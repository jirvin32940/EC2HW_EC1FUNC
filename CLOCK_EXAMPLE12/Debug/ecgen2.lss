
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d19c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d19c  0040d19c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000090c  20400000  0040d1a4  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000f30  2040090c  0040dab0  0001890c  2**2
                  ALLOC
  4 .stack        00002004  2040183c  0040e9e0  0001890c  2**0
                  ALLOC
  5 .heap         00000200  20403840  004109e4  0001890c  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  0001890c  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  0001893f  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015074  00000000  00000000  0001899a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a7b  00000000  00000000  0002da0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b086  00000000  00000000  00030489  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012c8  00000000  00000000  0003b50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001150  00000000  00000000  0003c7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020d1f  00000000  00000000  0003d927  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000111f8  00000000  00000000  0005e646  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008e8db  00000000  00000000  0006f83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005fa0  00000000  00000000  000fe11c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403840 	.word	0x20403840
  400004:	00402365 	.word	0x00402365
  400008:	004023e9 	.word	0x004023e9
  40000c:	004023e9 	.word	0x004023e9
  400010:	004023e9 	.word	0x004023e9
  400014:	004023e9 	.word	0x004023e9
  400018:	004023e9 	.word	0x004023e9
	...
  40002c:	004023e9 	.word	0x004023e9
  400030:	004023e9 	.word	0x004023e9
  400034:	00000000 	.word	0x00000000
  400038:	004023e9 	.word	0x004023e9
  40003c:	00403a75 	.word	0x00403a75
  400040:	004023e9 	.word	0x004023e9
  400044:	004023e9 	.word	0x004023e9
  400048:	004023e9 	.word	0x004023e9
  40004c:	004023e9 	.word	0x004023e9
  400050:	004023e9 	.word	0x004023e9
  400054:	004023e9 	.word	0x004023e9
  400058:	004023e9 	.word	0x004023e9
  40005c:	004023e9 	.word	0x004023e9
  400060:	004023e9 	.word	0x004023e9
  400064:	00000000 	.word	0x00000000
  400068:	0040139d 	.word	0x0040139d
  40006c:	004013b5 	.word	0x004013b5
  400070:	004013cd 	.word	0x004013cd
  400074:	00403bb9 	.word	0x00403bb9
  400078:	004023e9 	.word	0x004023e9
  40007c:	004023e9 	.word	0x004023e9
  400080:	004013e5 	.word	0x004013e5
  400084:	004013fd 	.word	0x004013fd
  400088:	004023e9 	.word	0x004023e9
  40008c:	004023e9 	.word	0x004023e9
  400090:	004023e9 	.word	0x004023e9
  400094:	004023e9 	.word	0x004023e9
  400098:	004023e9 	.word	0x004023e9
  40009c:	004023e9 	.word	0x004023e9
  4000a0:	004023e9 	.word	0x004023e9
  4000a4:	004023e9 	.word	0x004023e9
  4000a8:	004023e9 	.word	0x004023e9
  4000ac:	004023e9 	.word	0x004023e9
  4000b0:	004023e9 	.word	0x004023e9
  4000b4:	00401269 	.word	0x00401269
  4000b8:	004023e9 	.word	0x004023e9
  4000bc:	00403f0d 	.word	0x00403f0d
  4000c0:	004023e9 	.word	0x004023e9
  4000c4:	004023e9 	.word	0x004023e9
  4000c8:	004023e9 	.word	0x004023e9
  4000cc:	004023e9 	.word	0x004023e9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004023e9 	.word	0x004023e9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004023e9 	.word	0x004023e9
  4000e0:	0040127d 	.word	0x0040127d
  4000e4:	004023e9 	.word	0x004023e9
  4000e8:	004023e9 	.word	0x004023e9
  4000ec:	004023e9 	.word	0x004023e9
  4000f0:	004023e9 	.word	0x004023e9
  4000f4:	004023e9 	.word	0x004023e9
  4000f8:	004023e9 	.word	0x004023e9
  4000fc:	004023e9 	.word	0x004023e9
  400100:	004023e9 	.word	0x004023e9
  400104:	004023e9 	.word	0x004023e9
  400108:	004023e9 	.word	0x004023e9
  40010c:	004023e9 	.word	0x004023e9
  400110:	004023e9 	.word	0x004023e9
	...
  400120:	004023e9 	.word	0x004023e9
  400124:	004023e9 	.word	0x004023e9
  400128:	004023e9 	.word	0x004023e9
  40012c:	004023e9 	.word	0x004023e9
  400130:	004023e9 	.word	0x004023e9
  400134:	00000000 	.word	0x00000000
  400138:	004023e9 	.word	0x004023e9
  40013c:	004023e9 	.word	0x004023e9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040090c 	.word	0x2040090c
  40015c:	00000000 	.word	0x00000000
  400160:	0040d1a4 	.word	0x0040d1a4

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040d1a4 	.word	0x0040d1a4
  400190:	20400910 	.word	0x20400910
  400194:	0040d1a4 	.word	0x0040d1a4
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00401511 	.word	0x00401511
  400218:	0040157d 	.word	0x0040157d
  40021c:	004015ed 	.word	0x004015ed

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00401549 	.word	0x00401549
  40028c:	00401665 	.word	0x00401665

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401681 	.word	0x00401681
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401699 	.word	0x00401699
  400400:	004016b5 	.word	0x004016b5

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00402559 	.word	0x00402559
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00401415 	.word	0x00401415
  400500:	0040148d 	.word	0x0040148d
  400504:	004023f1 	.word	0x004023f1
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	20400a10 	.word	0x20400a10
  400560:	20400a18 	.word	0x20400a18

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	20400a14 	.word	0x20400a14
  4005d0:	20400a18 	.word	0x20400a18

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	004016d1 	.word	0x004016d1

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b3b      	ldr	r3, [pc, #236]	; (400b60 <board_init+0xf4>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b3a      	ldr	r3, [pc, #232]	; (400b64 <board_init+0xf8>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b39      	ldr	r3, [pc, #228]	; (400b68 <board_init+0xfc>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b38      	ldr	r3, [pc, #224]	; (400b6c <board_init+0x100>)
  400a8a:	4798      	blx	r3
	
	ioport_set_pin_dir(ECLAVE_PSUPPLY_ONn, IOPORT_DIR_OUTPUT);
  400a8c:	2002      	movs	r0, #2
  400a8e:	2101      	movs	r1, #1
  400a90:	4b35      	ldr	r3, [pc, #212]	; (400b68 <board_init+0xfc>)
  400a92:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_HIGH);
  400a94:	2002      	movs	r0, #2
  400a96:	2101      	movs	r1, #1
  400a98:	4b34      	ldr	r3, [pc, #208]	; (400b6c <board_init+0x100>)
  400a9a:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_LED_OEn, IOPORT_DIR_OUTPUT);
  400a9c:	2001      	movs	r0, #1
  400a9e:	2101      	movs	r1, #1
  400aa0:	4b31      	ldr	r3, [pc, #196]	; (400b68 <board_init+0xfc>)
  400aa2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH);
  400aa4:	2001      	movs	r0, #1
  400aa6:	2101      	movs	r1, #1
  400aa8:	4b30      	ldr	r3, [pc, #192]	; (400b6c <board_init+0x100>)
  400aaa:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_MFP, IOPORT_DIR_OUTPUT);
  400aac:	2000      	movs	r0, #0
  400aae:	2101      	movs	r1, #1
  400ab0:	4b2d      	ldr	r3, [pc, #180]	; (400b68 <board_init+0xfc>)
  400ab2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_MFP, IOPORT_PIN_LEVEL_LOW);  //high=1x multiplier, low=4x multiplier 10apr15;
  400ab4:	2000      	movs	r0, #0
  400ab6:	2100      	movs	r1, #0
  400ab8:	4b2c      	ldr	r3, [pc, #176]	; (400b6c <board_init+0x100>)
  400aba:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_SOLENOID, IOPORT_DIR_OUTPUT);
  400abc:	2015      	movs	r0, #21
  400abe:	2101      	movs	r1, #1
  400ac0:	4b29      	ldr	r3, [pc, #164]	; (400b68 <board_init+0xfc>)
  400ac2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  400ac4:	2015      	movs	r0, #21
  400ac6:	2100      	movs	r1, #0
  400ac8:	4b28      	ldr	r3, [pc, #160]	; (400b6c <board_init+0x100>)
  400aca:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_DOORSW1, IOPORT_DIR_INPUT);
  400acc:	204d      	movs	r0, #77	; 0x4d
  400ace:	2100      	movs	r1, #0
  400ad0:	4b25      	ldr	r3, [pc, #148]	; (400b68 <board_init+0xfc>)
  400ad2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_DOORSW2, IOPORT_DIR_INPUT);
  400ad4:	204e      	movs	r0, #78	; 0x4e
  400ad6:	2100      	movs	r1, #0
  400ad8:	4b23      	ldr	r3, [pc, #140]	; (400b68 <board_init+0xfc>)
  400ada:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400adc:	200b      	movs	r0, #11
  400ade:	2100      	movs	r1, #0
  400ae0:	4b21      	ldr	r3, [pc, #132]	; (400b68 <board_init+0xfc>)
  400ae2:	4798      	blx	r3
  400ae4:	200b      	movs	r0, #11
  400ae6:	2188      	movs	r1, #136	; 0x88
  400ae8:	4b21      	ldr	r3, [pc, #132]	; (400b70 <board_init+0x104>)
  400aea:	4798      	blx	r3
  400aec:	200b      	movs	r0, #11
  400aee:	2102      	movs	r1, #2
  400af0:	4b20      	ldr	r3, [pc, #128]	; (400b74 <board_init+0x108>)
  400af2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400af4:	2000      	movs	r0, #0
  400af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400afa:	2200      	movs	r2, #0
  400afc:	4b1e      	ldr	r3, [pc, #120]	; (400b78 <board_init+0x10c>)
  400afe:	4798      	blx	r3
  400b00:	2000      	movs	r0, #0
  400b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400b06:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <board_init+0x110>)
  400b08:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400b0a:	2003      	movs	r0, #3
  400b0c:	2100      	movs	r1, #0
  400b0e:	4b18      	ldr	r3, [pc, #96]	; (400b70 <board_init+0x104>)
  400b10:	4798      	blx	r3
  400b12:	2003      	movs	r0, #3
  400b14:	4b1a      	ldr	r3, [pc, #104]	; (400b80 <board_init+0x114>)
  400b16:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400b18:	2004      	movs	r0, #4
  400b1a:	2100      	movs	r1, #0
  400b1c:	4b14      	ldr	r3, [pc, #80]	; (400b70 <board_init+0x104>)
  400b1e:	4798      	blx	r3
  400b20:	2004      	movs	r0, #4
  400b22:	4b17      	ldr	r3, [pc, #92]	; (400b80 <board_init+0x114>)
  400b24:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(QSPI_QIO3_GPIO, QSPI_QIO3_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400b26:	200b      	movs	r0, #11
  400b28:	2101      	movs	r1, #1
  400b2a:	4b11      	ldr	r3, [pc, #68]	; (400b70 <board_init+0x104>)
  400b2c:	4798      	blx	r3
  400b2e:	200b      	movs	r0, #11
  400b30:	4b13      	ldr	r3, [pc, #76]	; (400b80 <board_init+0x114>)
  400b32:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400b34:	2020      	movs	r0, #32
  400b36:	2102      	movs	r1, #2
  400b38:	4b0d      	ldr	r3, [pc, #52]	; (400b70 <board_init+0x104>)
  400b3a:	4798      	blx	r3
  400b3c:	2020      	movs	r0, #32
  400b3e:	4b10      	ldr	r3, [pc, #64]	; (400b80 <board_init+0x114>)
  400b40:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400b42:	2021      	movs	r0, #33	; 0x21
  400b44:	2102      	movs	r1, #2
  400b46:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <board_init+0x104>)
  400b48:	4798      	blx	r3
  400b4a:	2021      	movs	r0, #33	; 0x21
  400b4c:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <board_init+0x114>)
  400b4e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400b50:	2023      	movs	r0, #35	; 0x23
  400b52:	2102      	movs	r1, #2
  400b54:	4b06      	ldr	r3, [pc, #24]	; (400b70 <board_init+0x104>)
  400b56:	4798      	blx	r3
  400b58:	2023      	movs	r0, #35	; 0x23
  400b5a:	4b09      	ldr	r3, [pc, #36]	; (400b80 <board_init+0x114>)
  400b5c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	004005ed 	.word	0x004005ed
  400b68:	004008ad 	.word	0x004008ad
  400b6c:	00400935 	.word	0x00400935
  400b70:	00400791 	.word	0x00400791
  400b74:	004009a1 	.word	0x004009a1
  400b78:	00400691 	.word	0x00400691
  400b7c:	0040065d 	.word	0x0040065d
  400b80:	00400615 	.word	0x00400615

00400b84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b84:	b480      	push	{r7}
  400b86:	b083      	sub	sp, #12
  400b88:	af00      	add	r7, sp, #0
  400b8a:	4603      	mov	r3, r0
  400b8c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8e:	4908      	ldr	r1, [pc, #32]	; (400bb0 <NVIC_EnableIRQ+0x2c>)
  400b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b94:	095b      	lsrs	r3, r3, #5
  400b96:	79fa      	ldrb	r2, [r7, #7]
  400b98:	f002 021f 	and.w	r2, r2, #31
  400b9c:	2001      	movs	r0, #1
  400b9e:	fa00 f202 	lsl.w	r2, r0, r2
  400ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ba6:	370c      	adds	r7, #12
  400ba8:	46bd      	mov	sp, r7
  400baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bae:	4770      	bx	lr
  400bb0:	e000e100 	.word	0xe000e100

00400bb4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b083      	sub	sp, #12
  400bb8:	af00      	add	r7, sp, #0
  400bba:	4603      	mov	r3, r0
  400bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bbe:	4909      	ldr	r1, [pc, #36]	; (400be4 <NVIC_ClearPendingIRQ+0x30>)
  400bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bc4:	095b      	lsrs	r3, r3, #5
  400bc6:	79fa      	ldrb	r2, [r7, #7]
  400bc8:	f002 021f 	and.w	r2, r2, #31
  400bcc:	2001      	movs	r0, #1
  400bce:	fa00 f202 	lsl.w	r2, r0, r2
  400bd2:	3360      	adds	r3, #96	; 0x60
  400bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400bd8:	370c      	adds	r7, #12
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	e000e100 	.word	0xe000e100

00400be8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	4603      	mov	r3, r0
  400bf0:	6039      	str	r1, [r7, #0]
  400bf2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	da0b      	bge.n	400c14 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400bfc:	490d      	ldr	r1, [pc, #52]	; (400c34 <NVIC_SetPriority+0x4c>)
  400bfe:	79fb      	ldrb	r3, [r7, #7]
  400c00:	f003 030f 	and.w	r3, r3, #15
  400c04:	3b04      	subs	r3, #4
  400c06:	683a      	ldr	r2, [r7, #0]
  400c08:	b2d2      	uxtb	r2, r2
  400c0a:	0152      	lsls	r2, r2, #5
  400c0c:	b2d2      	uxtb	r2, r2
  400c0e:	440b      	add	r3, r1
  400c10:	761a      	strb	r2, [r3, #24]
  400c12:	e009      	b.n	400c28 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c14:	4908      	ldr	r1, [pc, #32]	; (400c38 <NVIC_SetPriority+0x50>)
  400c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c1a:	683a      	ldr	r2, [r7, #0]
  400c1c:	b2d2      	uxtb	r2, r2
  400c1e:	0152      	lsls	r2, r2, #5
  400c20:	b2d2      	uxtb	r2, r2
  400c22:	440b      	add	r3, r1
  400c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400c28:	370c      	adds	r7, #12
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	e000ed00 	.word	0xe000ed00
  400c38:	e000e100 	.word	0xe000e100

00400c3c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400c3c:	b480      	push	{r7}
  400c3e:	b083      	sub	sp, #12
  400c40:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c42:	f3ef 8310 	mrs	r3, PRIMASK
  400c46:	603b      	str	r3, [r7, #0]
  return(result);
  400c48:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	bf0c      	ite	eq
  400c4e:	2301      	moveq	r3, #1
  400c50:	2300      	movne	r3, #0
  400c52:	b2db      	uxtb	r3, r3
  400c54:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c56:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c5c:	4b04      	ldr	r3, [pc, #16]	; (400c70 <cpu_irq_save+0x34>)
  400c5e:	2200      	movs	r2, #0
  400c60:	701a      	strb	r2, [r3, #0]
	return flags;
  400c62:	687b      	ldr	r3, [r7, #4]
}
  400c64:	4618      	mov	r0, r3
  400c66:	370c      	adds	r7, #12
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400000 	.word	0x20400000

00400c74 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	return (flags);
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	2b00      	cmp	r3, #0
  400c80:	bf14      	ite	ne
  400c82:	2301      	movne	r3, #1
  400c84:	2300      	moveq	r3, #0
  400c86:	b2db      	uxtb	r3, r3
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c92:	4770      	bx	lr

00400c94 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c94:	b580      	push	{r7, lr}
  400c96:	b082      	sub	sp, #8
  400c98:	af00      	add	r7, sp, #0
  400c9a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c9c:	6878      	ldr	r0, [r7, #4]
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <cpu_irq_restore+0x28>)
  400ca0:	4798      	blx	r3
  400ca2:	4603      	mov	r3, r0
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d005      	beq.n	400cb4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <cpu_irq_restore+0x2c>)
  400caa:	2201      	movs	r2, #1
  400cac:	701a      	strb	r2, [r3, #0]
  400cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cb2:	b662      	cpsie	i
}
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	00400c75 	.word	0x00400c75
  400cc0:	20400000 	.word	0x20400000

00400cc4 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400cc4:	b480      	push	{r7}
  400cc6:	b083      	sub	sp, #12
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	460b      	mov	r3, r1
  400cce:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400cd0:	370c      	adds	r7, #12
  400cd2:	46bd      	mov	sp, r7
  400cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop

00400cdc <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b084      	sub	sp, #16
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	4603      	mov	r3, r0
  400cfc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400cfe:	79fb      	ldrb	r3, [r7, #7]
  400d00:	4a0a      	ldr	r2, [pc, #40]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d02:	5cd3      	ldrb	r3, [r2, r3]
  400d04:	2bff      	cmp	r3, #255	; 0xff
  400d06:	d100      	bne.n	400d0a <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400d08:	e7fe      	b.n	400d08 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400d0a:	4b09      	ldr	r3, [pc, #36]	; (400d30 <sleepmgr_lock_mode+0x3c>)
  400d0c:	4798      	blx	r3
  400d0e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400d10:	79fb      	ldrb	r3, [r7, #7]
  400d12:	4a06      	ldr	r2, [pc, #24]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d14:	5cd2      	ldrb	r2, [r2, r3]
  400d16:	3201      	adds	r2, #1
  400d18:	b2d1      	uxtb	r1, r2
  400d1a:	4a04      	ldr	r2, [pc, #16]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d1c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400d1e:	68f8      	ldr	r0, [r7, #12]
  400d20:	4b04      	ldr	r3, [pc, #16]	; (400d34 <sleepmgr_lock_mode+0x40>)
  400d22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400d24:	3710      	adds	r7, #16
  400d26:	46bd      	mov	sp, r7
  400d28:	bd80      	pop	{r7, pc}
  400d2a:	bf00      	nop
  400d2c:	20400a08 	.word	0x20400a08
  400d30:	00400c3d 	.word	0x00400c3d
  400d34:	00400c95 	.word	0x00400c95

00400d38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400d38:	b480      	push	{r7}
  400d3a:	b083      	sub	sp, #12
  400d3c:	af00      	add	r7, sp, #0
  400d3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d40:	687b      	ldr	r3, [r7, #4]
  400d42:	2b07      	cmp	r3, #7
  400d44:	d825      	bhi.n	400d92 <osc_get_rate+0x5a>
  400d46:	a201      	add	r2, pc, #4	; (adr r2, 400d4c <osc_get_rate+0x14>)
  400d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d4c:	00400d6d 	.word	0x00400d6d
  400d50:	00400d73 	.word	0x00400d73
  400d54:	00400d79 	.word	0x00400d79
  400d58:	00400d7f 	.word	0x00400d7f
  400d5c:	00400d83 	.word	0x00400d83
  400d60:	00400d87 	.word	0x00400d87
  400d64:	00400d8b 	.word	0x00400d8b
  400d68:	00400d8f 	.word	0x00400d8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d70:	e010      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d76:	e00d      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d7c:	e00a      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d7e:	4b08      	ldr	r3, [pc, #32]	; (400da0 <osc_get_rate+0x68>)
  400d80:	e008      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d82:	4b08      	ldr	r3, [pc, #32]	; (400da4 <osc_get_rate+0x6c>)
  400d84:	e006      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d86:	4b08      	ldr	r3, [pc, #32]	; (400da8 <osc_get_rate+0x70>)
  400d88:	e004      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d8a:	4b08      	ldr	r3, [pc, #32]	; (400dac <osc_get_rate+0x74>)
  400d8c:	e002      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <osc_get_rate+0x70>)
  400d90:	e000      	b.n	400d94 <osc_get_rate+0x5c>
	}

	return 0;
  400d92:	2300      	movs	r3, #0
}
  400d94:	4618      	mov	r0, r3
  400d96:	370c      	adds	r7, #12
  400d98:	46bd      	mov	sp, r7
  400d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d9e:	4770      	bx	lr
  400da0:	003d0900 	.word	0x003d0900
  400da4:	007a1200 	.word	0x007a1200
  400da8:	00b71b00 	.word	0x00b71b00
  400dac:	00f42400 	.word	0x00f42400

00400db0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400db4:	2006      	movs	r0, #6
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <sysclk_get_main_hz+0x1c>)
  400db8:	4798      	blx	r3
  400dba:	4602      	mov	r2, r0
  400dbc:	4613      	mov	r3, r2
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	4413      	add	r3, r2
  400dc2:	009a      	lsls	r2, r3, #2
  400dc4:	4413      	add	r3, r2
  400dc6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400dc8:	4618      	mov	r0, r3
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	00400d39 	.word	0x00400d39

00400dd0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <sysclk_get_cpu_hz+0x10>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400dda:	4618      	mov	r0, r3
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400db1 	.word	0x00400db1

00400de4 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400dec:	687b      	ldr	r3, [r7, #4]
  400dee:	4a09      	ldr	r2, [pc, #36]	; (400e14 <afec_find_inst_num+0x30>)
  400df0:	4293      	cmp	r3, r2
  400df2:	d101      	bne.n	400df8 <afec_find_inst_num+0x14>
		return 1;
  400df4:	2301      	movs	r3, #1
  400df6:	e006      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400df8:	687b      	ldr	r3, [r7, #4]
  400dfa:	4a07      	ldr	r2, [pc, #28]	; (400e18 <afec_find_inst_num+0x34>)
  400dfc:	4293      	cmp	r3, r2
  400dfe:	d101      	bne.n	400e04 <afec_find_inst_num+0x20>
		return 0;
  400e00:	2300      	movs	r3, #0
  400e02:	e000      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400e04:	2300      	movs	r3, #0
}
  400e06:	4618      	mov	r0, r3
  400e08:	370c      	adds	r7, #12
  400e0a:	46bd      	mov	sp, r7
  400e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	40064000 	.word	0x40064000
  400e18:	4003c000 	.word	0x4003c000

00400e1c <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	4a09      	ldr	r2, [pc, #36]	; (400e4c <afec_find_pid+0x30>)
  400e28:	4293      	cmp	r3, r2
  400e2a:	d101      	bne.n	400e30 <afec_find_pid+0x14>
		return ID_AFEC1;
  400e2c:	2328      	movs	r3, #40	; 0x28
  400e2e:	e006      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	4a07      	ldr	r2, [pc, #28]	; (400e50 <afec_find_pid+0x34>)
  400e34:	4293      	cmp	r3, r2
  400e36:	d101      	bne.n	400e3c <afec_find_pid+0x20>
		return ID_AFEC0;
  400e38:	231d      	movs	r3, #29
  400e3a:	e000      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400e3c:	231d      	movs	r3, #29
}
  400e3e:	4618      	mov	r0, r3
  400e40:	370c      	adds	r7, #12
  400e42:	46bd      	mov	sp, r7
  400e44:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	40064000 	.word	0x40064000
  400e50:	4003c000 	.word	0x4003c000

00400e54 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400e54:	b480      	push	{r7}
  400e56:	b085      	sub	sp, #20
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400e5e:	2300      	movs	r3, #0
  400e60:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e62:	683b      	ldr	r3, [r7, #0]
  400e64:	7cdb      	ldrb	r3, [r3, #19]
  400e66:	2b00      	cmp	r3, #0
  400e68:	d002      	beq.n	400e70 <afec_set_config+0x1c>
  400e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e6e:	e000      	b.n	400e72 <afec_set_config+0x1e>
  400e70:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e72:	683b      	ldr	r3, [r7, #0]
  400e74:	6859      	ldr	r1, [r3, #4]
  400e76:	683b      	ldr	r3, [r7, #0]
  400e78:	689b      	ldr	r3, [r3, #8]
  400e7a:	fbb1 f3f3 	udiv	r3, r1, r3
  400e7e:	3b01      	subs	r3, #1
  400e80:	021b      	lsls	r3, r3, #8
  400e82:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e84:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e86:	683b      	ldr	r3, [r7, #0]
  400e88:	7c1b      	ldrb	r3, [r3, #16]
  400e8a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400e8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400e90:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e92:	683b      	ldr	r3, [r7, #0]
  400e94:	7c5b      	ldrb	r3, [r3, #17]
  400e96:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400e9c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400e9e:	683b      	ldr	r3, [r7, #0]
  400ea0:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400ea2:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400ea8:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400eaa:	687b      	ldr	r3, [r7, #4]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400eb0:	683b      	ldr	r3, [r7, #0]
  400eb2:	7d1b      	ldrb	r3, [r3, #20]
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d002      	beq.n	400ebe <afec_set_config+0x6a>
  400eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ebc:	e000      	b.n	400ec0 <afec_set_config+0x6c>
  400ebe:	2200      	movs	r2, #0
			(config->resolution) |
  400ec0:	683b      	ldr	r3, [r7, #0]
  400ec2:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ec4:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400ec6:	683b      	ldr	r3, [r7, #0]
  400ec8:	7d5b      	ldrb	r3, [r3, #21]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d002      	beq.n	400ed4 <afec_set_config+0x80>
  400ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400ed2:	e000      	b.n	400ed6 <afec_set_config+0x82>
  400ed4:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400ed6:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400edc:	683b      	ldr	r3, [r7, #0]
  400ede:	7d9b      	ldrb	r3, [r3, #22]
  400ee0:	021b      	lsls	r3, r3, #8
  400ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400ee6:	f043 020c 	orr.w	r2, r3, #12
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400ef0:	3714      	adds	r7, #20
  400ef2:	46bd      	mov	sp, r7
  400ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop

00400efc <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b086      	sub	sp, #24
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	460b      	mov	r3, r1
  400f06:	607a      	str	r2, [r7, #4]
  400f08:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400f0a:	897b      	ldrh	r3, [r7, #10]
  400f0c:	68f8      	ldr	r0, [r7, #12]
  400f0e:	4619      	mov	r1, r3
  400f10:	4b1d      	ldr	r3, [pc, #116]	; (400f88 <afec_ch_set_config+0x8c>)
  400f12:	4798      	blx	r3
	uint32_t reg = 0;
  400f14:	2300      	movs	r3, #0
  400f16:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400f1c:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400f1e:	897b      	ldrh	r3, [r7, #10]
  400f20:	2201      	movs	r2, #1
  400f22:	fa02 f303 	lsl.w	r3, r2, r3
  400f26:	43db      	mvns	r3, r3
  400f28:	697a      	ldr	r2, [r7, #20]
  400f2a:	4013      	ands	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	781b      	ldrb	r3, [r3, #0]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d004      	beq.n	400f40 <afec_ch_set_config+0x44>
  400f36:	897b      	ldrh	r3, [r7, #10]
  400f38:	2201      	movs	r2, #1
  400f3a:	fa02 f303 	lsl.w	r3, r2, r3
  400f3e:	e000      	b.n	400f42 <afec_ch_set_config+0x46>
  400f40:	2300      	movs	r3, #0
  400f42:	697a      	ldr	r2, [r7, #20]
  400f44:	4313      	orrs	r3, r2
  400f46:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	697a      	ldr	r2, [r7, #20]
  400f4c:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f52:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400f54:	897b      	ldrh	r3, [r7, #10]
  400f56:	005b      	lsls	r3, r3, #1
  400f58:	2203      	movs	r2, #3
  400f5a:	fa02 f303 	lsl.w	r3, r2, r3
  400f5e:	43db      	mvns	r3, r3
  400f60:	697a      	ldr	r2, [r7, #20]
  400f62:	4013      	ands	r3, r2
  400f64:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400f66:	687b      	ldr	r3, [r7, #4]
  400f68:	785b      	ldrb	r3, [r3, #1]
  400f6a:	461a      	mov	r2, r3
  400f6c:	897b      	ldrh	r3, [r7, #10]
  400f6e:	005b      	lsls	r3, r3, #1
  400f70:	fa02 f303 	lsl.w	r3, r2, r3
  400f74:	461a      	mov	r2, r3
  400f76:	697b      	ldr	r3, [r7, #20]
  400f78:	4313      	orrs	r3, r2
  400f7a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	697a      	ldr	r2, [r7, #20]
  400f80:	655a      	str	r2, [r3, #84]	; 0x54
}
  400f82:	3718      	adds	r7, #24
  400f84:	46bd      	mov	sp, r7
  400f86:	bd80      	pop	{r7, pc}
  400f88:	00400cc5 	.word	0x00400cc5

00400f8c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	b082      	sub	sp, #8
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	2200      	movs	r2, #0
  400f98:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f9a:	4b12      	ldr	r3, [pc, #72]	; (400fe4 <afec_get_config_defaults+0x58>)
  400f9c:	4798      	blx	r3
  400f9e:	4602      	mov	r2, r0
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	4a10      	ldr	r2, [pc, #64]	; (400fe8 <afec_get_config_defaults+0x5c>)
  400fa8:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400fb0:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400fb2:	687b      	ldr	r3, [r7, #4]
  400fb4:	2202      	movs	r2, #2
  400fb6:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2201      	movs	r2, #1
  400fbc:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	2201      	movs	r2, #1
  400fc2:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2200      	movs	r2, #0
  400fc8:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2201      	movs	r2, #1
  400fce:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2201      	movs	r2, #1
  400fd4:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	2201      	movs	r2, #1
  400fda:	759a      	strb	r2, [r3, #22]
}
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	00400dd1 	.word	0x00400dd1
  400fe8:	005b8d80 	.word	0x005b8d80

00400fec <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400fec:	b480      	push	{r7}
  400fee:	b083      	sub	sp, #12
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	2200      	movs	r2, #0
  400ff8:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	2201      	movs	r2, #1
  400ffe:	705a      	strb	r2, [r3, #1]

}
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr
  40100a:	bf00      	nop

0040100c <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40100c:	b580      	push	{r7, lr}
  40100e:	b084      	sub	sp, #16
  401010:	af00      	add	r7, sp, #0
  401012:	6078      	str	r0, [r7, #4]
  401014:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401016:	6878      	ldr	r0, [r7, #4]
  401018:	4b17      	ldr	r3, [pc, #92]	; (401078 <afec_init+0x6c>)
  40101a:	4798      	blx	r3
  40101c:	4603      	mov	r3, r0
  40101e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401022:	2b00      	cmp	r3, #0
  401024:	d001      	beq.n	40102a <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  401026:	2319      	movs	r3, #25
  401028:	e021      	b.n	40106e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	2201      	movs	r2, #1
  40102e:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  401030:	6878      	ldr	r0, [r7, #4]
  401032:	6839      	ldr	r1, [r7, #0]
  401034:	4b11      	ldr	r3, [pc, #68]	; (40107c <afec_init+0x70>)
  401036:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401038:	2300      	movs	r3, #0
  40103a:	60fb      	str	r3, [r7, #12]
  40103c:	e013      	b.n	401066 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  40103e:	2300      	movs	r3, #0
  401040:	60bb      	str	r3, [r7, #8]
  401042:	e00a      	b.n	40105a <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  401044:	490e      	ldr	r1, [pc, #56]	; (401080 <afec_init+0x74>)
  401046:	68fb      	ldr	r3, [r7, #12]
  401048:	011a      	lsls	r2, r3, #4
  40104a:	68bb      	ldr	r3, [r7, #8]
  40104c:	4413      	add	r3, r2
  40104e:	2200      	movs	r2, #0
  401050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	3301      	adds	r3, #1
  401058:	60bb      	str	r3, [r7, #8]
  40105a:	68bb      	ldr	r3, [r7, #8]
  40105c:	2b0f      	cmp	r3, #15
  40105e:	d9f1      	bls.n	401044 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401060:	68fb      	ldr	r3, [r7, #12]
  401062:	3301      	adds	r3, #1
  401064:	60fb      	str	r3, [r7, #12]
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	2b01      	cmp	r3, #1
  40106a:	d9e8      	bls.n	40103e <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  40106c:	2300      	movs	r3, #0
  40106e:	b25b      	sxtb	r3, r3
}
  401070:	4618      	mov	r0, r3
  401072:	3710      	adds	r7, #16
  401074:	46bd      	mov	sp, r7
  401076:	bd80      	pop	{r7, pc}
  401078:	00400cdd 	.word	0x00400cdd
  40107c:	00400e55 	.word	0x00400e55
  401080:	20400a1c 	.word	0x20400a1c

00401084 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  401084:	b580      	push	{r7, lr}
  401086:	b086      	sub	sp, #24
  401088:	af00      	add	r7, sp, #0
  40108a:	60f8      	str	r0, [r7, #12]
  40108c:	60b9      	str	r1, [r7, #8]
  40108e:	607a      	str	r2, [r7, #4]
  401090:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b17      	ldr	r3, [pc, #92]	; (4010f4 <afec_set_callback+0x70>)
  401096:	4798      	blx	r3
  401098:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  40109a:	4917      	ldr	r1, [pc, #92]	; (4010f8 <afec_set_callback+0x74>)
  40109c:	697b      	ldr	r3, [r7, #20]
  40109e:	011a      	lsls	r2, r3, #4
  4010a0:	68bb      	ldr	r3, [r7, #8]
  4010a2:	4413      	add	r3, r2
  4010a4:	687a      	ldr	r2, [r7, #4]
  4010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  4010aa:	697b      	ldr	r3, [r7, #20]
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d10b      	bne.n	4010c8 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  4010b0:	201d      	movs	r0, #29
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <afec_set_callback+0x78>)
  4010b4:	4798      	blx	r3
  4010b6:	78fb      	ldrb	r3, [r7, #3]
  4010b8:	201d      	movs	r0, #29
  4010ba:	4619      	mov	r1, r3
  4010bc:	4b10      	ldr	r3, [pc, #64]	; (401100 <afec_set_callback+0x7c>)
  4010be:	4798      	blx	r3
  4010c0:	201d      	movs	r0, #29
  4010c2:	4b10      	ldr	r3, [pc, #64]	; (401104 <afec_set_callback+0x80>)
  4010c4:	4798      	blx	r3
  4010c6:	e00d      	b.n	4010e4 <afec_set_callback+0x60>
	} else if (i == 1) {
  4010c8:	697b      	ldr	r3, [r7, #20]
  4010ca:	2b01      	cmp	r3, #1
  4010cc:	d10a      	bne.n	4010e4 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  4010ce:	2028      	movs	r0, #40	; 0x28
  4010d0:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <afec_set_callback+0x78>)
  4010d2:	4798      	blx	r3
  4010d4:	78fb      	ldrb	r3, [r7, #3]
  4010d6:	2028      	movs	r0, #40	; 0x28
  4010d8:	4619      	mov	r1, r3
  4010da:	4b09      	ldr	r3, [pc, #36]	; (401100 <afec_set_callback+0x7c>)
  4010dc:	4798      	blx	r3
  4010de:	2028      	movs	r0, #40	; 0x28
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <afec_set_callback+0x80>)
  4010e2:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4010e4:	68f8      	ldr	r0, [r7, #12]
  4010e6:	68b9      	ldr	r1, [r7, #8]
  4010e8:	4b07      	ldr	r3, [pc, #28]	; (401108 <afec_set_callback+0x84>)
  4010ea:	4798      	blx	r3
}
  4010ec:	3718      	adds	r7, #24
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bd80      	pop	{r7, pc}
  4010f2:	bf00      	nop
  4010f4:	00400de5 	.word	0x00400de5
  4010f8:	20400a1c 	.word	0x20400a1c
  4010fc:	00400bb5 	.word	0x00400bb5
  401100:	00400be9 	.word	0x00400be9
  401104:	00400b85 	.word	0x00400b85
  401108:	0040110d 	.word	0x0040110d

0040110c <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
  401114:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401116:	683b      	ldr	r3, [r7, #0]
  401118:	4a19      	ldr	r2, [pc, #100]	; (401180 <afec_enable_interrupt+0x74>)
  40111a:	4293      	cmp	r3, r2
  40111c:	d103      	bne.n	401126 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40111e:	687b      	ldr	r3, [r7, #4]
  401120:	4a17      	ldr	r2, [pc, #92]	; (401180 <afec_enable_interrupt+0x74>)
  401122:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  401124:	e026      	b.n	401174 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401126:	683b      	ldr	r3, [r7, #0]
  401128:	2b0b      	cmp	r3, #11
  40112a:	d80f      	bhi.n	40114c <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40112c:	683b      	ldr	r3, [r7, #0]
  40112e:	2b0b      	cmp	r3, #11
  401130:	d104      	bne.n	40113c <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  401132:	687b      	ldr	r3, [r7, #4]
  401134:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401138:	625a      	str	r2, [r3, #36]	; 0x24
  40113a:	e01b      	b.n	401174 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	2201      	movs	r2, #1
  401140:	fa02 f303 	lsl.w	r3, r2, r3
  401144:	461a      	mov	r2, r3
  401146:	687b      	ldr	r3, [r7, #4]
  401148:	625a      	str	r2, [r3, #36]	; 0x24
  40114a:	e013      	b.n	401174 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40114c:	683b      	ldr	r3, [r7, #0]
  40114e:	2b0e      	cmp	r3, #14
  401150:	d808      	bhi.n	401164 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401152:	683b      	ldr	r3, [r7, #0]
  401154:	330c      	adds	r3, #12
  401156:	461a      	mov	r2, r3
  401158:	2301      	movs	r3, #1
  40115a:	4093      	lsls	r3, r2
  40115c:	461a      	mov	r2, r3
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	625a      	str	r2, [r3, #36]	; 0x24
  401162:	e007      	b.n	401174 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401164:	683b      	ldr	r3, [r7, #0]
  401166:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401168:	461a      	mov	r2, r3
  40116a:	2301      	movs	r3, #1
  40116c:	4093      	lsls	r3, r2
  40116e:	461a      	mov	r2, r3
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401174:	370c      	adds	r7, #12
  401176:	46bd      	mov	sp, r7
  401178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	47000fff 	.word	0x47000fff

00401184 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401184:	b580      	push	{r7, lr}
  401186:	b082      	sub	sp, #8
  401188:	af00      	add	r7, sp, #0
  40118a:	4603      	mov	r3, r0
  40118c:	6039      	str	r1, [r7, #0]
  40118e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401190:	79fb      	ldrb	r3, [r7, #7]
  401192:	4909      	ldr	r1, [pc, #36]	; (4011b8 <afec_interrupt+0x34>)
  401194:	011a      	lsls	r2, r3, #4
  401196:	683b      	ldr	r3, [r7, #0]
  401198:	4413      	add	r3, r2
  40119a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	d007      	beq.n	4011b2 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4011a2:	79fb      	ldrb	r3, [r7, #7]
  4011a4:	4904      	ldr	r1, [pc, #16]	; (4011b8 <afec_interrupt+0x34>)
  4011a6:	011a      	lsls	r2, r3, #4
  4011a8:	683b      	ldr	r3, [r7, #0]
  4011aa:	4413      	add	r3, r2
  4011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4011b0:	4798      	blx	r3
	}
}
  4011b2:	3708      	adds	r7, #8
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	20400a1c 	.word	0x20400a1c

004011bc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b086      	sub	sp, #24
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  4011c4:	6878      	ldr	r0, [r7, #4]
  4011c6:	4b25      	ldr	r3, [pc, #148]	; (40125c <afec_process_callback+0xa0>)
  4011c8:	4798      	blx	r3
  4011ca:	4603      	mov	r3, r0
  4011cc:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4011ce:	6878      	ldr	r0, [r7, #4]
  4011d0:	4b23      	ldr	r3, [pc, #140]	; (401260 <afec_process_callback+0xa4>)
  4011d2:	4798      	blx	r3
  4011d4:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4011d6:	2300      	movs	r3, #0
  4011d8:	617b      	str	r3, [r7, #20]
  4011da:	e039      	b.n	401250 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4011dc:	697b      	ldr	r3, [r7, #20]
  4011de:	2b0b      	cmp	r3, #11
  4011e0:	d80f      	bhi.n	401202 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	2201      	movs	r2, #1
  4011e6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ea:	461a      	mov	r2, r3
  4011ec:	68fb      	ldr	r3, [r7, #12]
  4011ee:	4013      	ands	r3, r2
  4011f0:	2b00      	cmp	r3, #0
  4011f2:	d02a      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011f4:	693b      	ldr	r3, [r7, #16]
  4011f6:	b2db      	uxtb	r3, r3
  4011f8:	4618      	mov	r0, r3
  4011fa:	6979      	ldr	r1, [r7, #20]
  4011fc:	4b19      	ldr	r3, [pc, #100]	; (401264 <afec_process_callback+0xa8>)
  4011fe:	4798      	blx	r3
  401200:	e023      	b.n	40124a <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b0e      	cmp	r3, #14
  401206:	d810      	bhi.n	40122a <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401208:	697b      	ldr	r3, [r7, #20]
  40120a:	330c      	adds	r3, #12
  40120c:	461a      	mov	r2, r3
  40120e:	2301      	movs	r3, #1
  401210:	4093      	lsls	r3, r2
  401212:	461a      	mov	r2, r3
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	4013      	ands	r3, r2
  401218:	2b00      	cmp	r3, #0
  40121a:	d016      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	b2db      	uxtb	r3, r3
  401220:	4618      	mov	r0, r3
  401222:	6979      	ldr	r1, [r7, #20]
  401224:	4b0f      	ldr	r3, [pc, #60]	; (401264 <afec_process_callback+0xa8>)
  401226:	4798      	blx	r3
  401228:	e00f      	b.n	40124a <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40122a:	697b      	ldr	r3, [r7, #20]
  40122c:	330f      	adds	r3, #15
  40122e:	461a      	mov	r2, r3
  401230:	2301      	movs	r3, #1
  401232:	4093      	lsls	r3, r2
  401234:	461a      	mov	r2, r3
  401236:	68fb      	ldr	r3, [r7, #12]
  401238:	4013      	ands	r3, r2
  40123a:	2b00      	cmp	r3, #0
  40123c:	d005      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40123e:	693b      	ldr	r3, [r7, #16]
  401240:	b2db      	uxtb	r3, r3
  401242:	4618      	mov	r0, r3
  401244:	6979      	ldr	r1, [r7, #20]
  401246:	4b07      	ldr	r3, [pc, #28]	; (401264 <afec_process_callback+0xa8>)
  401248:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40124a:	697b      	ldr	r3, [r7, #20]
  40124c:	3301      	adds	r3, #1
  40124e:	617b      	str	r3, [r7, #20]
  401250:	697b      	ldr	r3, [r7, #20]
  401252:	2b0f      	cmp	r3, #15
  401254:	d9c2      	bls.n	4011dc <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401256:	3718      	adds	r7, #24
  401258:	46bd      	mov	sp, r7
  40125a:	bd80      	pop	{r7, pc}
  40125c:	00400cdd 	.word	0x00400cdd
  401260:	00400de5 	.word	0x00400de5
  401264:	00401185 	.word	0x00401185

00401268 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401268:	b580      	push	{r7, lr}
  40126a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40126c:	4801      	ldr	r0, [pc, #4]	; (401274 <AFEC0_Handler+0xc>)
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <AFEC0_Handler+0x10>)
  401270:	4798      	blx	r3
}
  401272:	bd80      	pop	{r7, pc}
  401274:	4003c000 	.word	0x4003c000
  401278:	004011bd 	.word	0x004011bd

0040127c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401280:	4801      	ldr	r0, [pc, #4]	; (401288 <AFEC1_Handler+0xc>)
  401282:	4b02      	ldr	r3, [pc, #8]	; (40128c <AFEC1_Handler+0x10>)
  401284:	4798      	blx	r3
}
  401286:	bd80      	pop	{r7, pc}
  401288:	40064000 	.word	0x40064000
  40128c:	004011bd 	.word	0x004011bd

00401290 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401290:	b580      	push	{r7, lr}
  401292:	b084      	sub	sp, #16
  401294:	af00      	add	r7, sp, #0
  401296:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401298:	6878      	ldr	r0, [r7, #4]
  40129a:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <afec_enable+0x24>)
  40129c:	4798      	blx	r3
  40129e:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <afec_enable+0x28>)
  4012a4:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4012a6:	2002      	movs	r0, #2
  4012a8:	4b04      	ldr	r3, [pc, #16]	; (4012bc <afec_enable+0x2c>)
  4012aa:	4798      	blx	r3
}
  4012ac:	3710      	adds	r7, #16
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bd80      	pop	{r7, pc}
  4012b2:	bf00      	nop
  4012b4:	00400e1d 	.word	0x00400e1d
  4012b8:	004016d1 	.word	0x004016d1
  4012bc:	00400cf5 	.word	0x00400cf5

004012c0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4012c0:	b480      	push	{r7}
  4012c2:	b083      	sub	sp, #12
  4012c4:	af00      	add	r7, sp, #0
  4012c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4012cc:	4618      	mov	r0, r3
  4012ce:	370c      	adds	r7, #12
  4012d0:	46bd      	mov	sp, r7
  4012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d6:	4770      	bx	lr

004012d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	370c      	adds	r7, #12
  4012e8:	46bd      	mov	sp, r7
  4012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ee:	4770      	bx	lr

004012f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012f0:	b580      	push	{r7, lr}
  4012f2:	b084      	sub	sp, #16
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
  4012f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012fa:	6878      	ldr	r0, [r7, #4]
  4012fc:	4b24      	ldr	r3, [pc, #144]	; (401390 <pio_handler_process+0xa0>)
  4012fe:	4798      	blx	r3
  401300:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401302:	6878      	ldr	r0, [r7, #4]
  401304:	4b23      	ldr	r3, [pc, #140]	; (401394 <pio_handler_process+0xa4>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	4013      	ands	r3, r2
  40130e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401310:	68fb      	ldr	r3, [r7, #12]
  401312:	2b00      	cmp	r3, #0
  401314:	d038      	beq.n	401388 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  401316:	2300      	movs	r3, #0
  401318:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40131a:	e032      	b.n	401382 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40131c:	4a1e      	ldr	r2, [pc, #120]	; (401398 <pio_handler_process+0xa8>)
  40131e:	68bb      	ldr	r3, [r7, #8]
  401320:	011b      	lsls	r3, r3, #4
  401322:	4413      	add	r3, r2
  401324:	681a      	ldr	r2, [r3, #0]
  401326:	683b      	ldr	r3, [r7, #0]
  401328:	429a      	cmp	r2, r3
  40132a:	d123      	bne.n	401374 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40132c:	4a1a      	ldr	r2, [pc, #104]	; (401398 <pio_handler_process+0xa8>)
  40132e:	68bb      	ldr	r3, [r7, #8]
  401330:	011b      	lsls	r3, r3, #4
  401332:	4413      	add	r3, r2
  401334:	685a      	ldr	r2, [r3, #4]
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	4013      	ands	r3, r2
  40133a:	2b00      	cmp	r3, #0
  40133c:	d01a      	beq.n	401374 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40133e:	4a16      	ldr	r2, [pc, #88]	; (401398 <pio_handler_process+0xa8>)
  401340:	68bb      	ldr	r3, [r7, #8]
  401342:	011b      	lsls	r3, r3, #4
  401344:	4413      	add	r3, r2
  401346:	3308      	adds	r3, #8
  401348:	685b      	ldr	r3, [r3, #4]
  40134a:	4913      	ldr	r1, [pc, #76]	; (401398 <pio_handler_process+0xa8>)
  40134c:	68ba      	ldr	r2, [r7, #8]
  40134e:	0112      	lsls	r2, r2, #4
  401350:	440a      	add	r2, r1
  401352:	6810      	ldr	r0, [r2, #0]
  401354:	4910      	ldr	r1, [pc, #64]	; (401398 <pio_handler_process+0xa8>)
  401356:	68ba      	ldr	r2, [r7, #8]
  401358:	0112      	lsls	r2, r2, #4
  40135a:	440a      	add	r2, r1
  40135c:	6852      	ldr	r2, [r2, #4]
  40135e:	4611      	mov	r1, r2
  401360:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401362:	4a0d      	ldr	r2, [pc, #52]	; (401398 <pio_handler_process+0xa8>)
  401364:	68bb      	ldr	r3, [r7, #8]
  401366:	011b      	lsls	r3, r3, #4
  401368:	4413      	add	r3, r2
  40136a:	685b      	ldr	r3, [r3, #4]
  40136c:	43db      	mvns	r3, r3
  40136e:	68fa      	ldr	r2, [r7, #12]
  401370:	4013      	ands	r3, r2
  401372:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401374:	68bb      	ldr	r3, [r7, #8]
  401376:	3301      	adds	r3, #1
  401378:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40137a:	68bb      	ldr	r3, [r7, #8]
  40137c:	2b06      	cmp	r3, #6
  40137e:	d900      	bls.n	401382 <pio_handler_process+0x92>
				break;
  401380:	e002      	b.n	401388 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401382:	68fb      	ldr	r3, [r7, #12]
  401384:	2b00      	cmp	r3, #0
  401386:	d1c9      	bne.n	40131c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401388:	3710      	adds	r7, #16
  40138a:	46bd      	mov	sp, r7
  40138c:	bd80      	pop	{r7, pc}
  40138e:	bf00      	nop
  401390:	004012c1 	.word	0x004012c1
  401394:	004012d9 	.word	0x004012d9
  401398:	20400928 	.word	0x20400928

0040139c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4013a0:	4802      	ldr	r0, [pc, #8]	; (4013ac <PIOA_Handler+0x10>)
  4013a2:	210a      	movs	r1, #10
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <PIOA_Handler+0x14>)
  4013a6:	4798      	blx	r3
}
  4013a8:	bd80      	pop	{r7, pc}
  4013aa:	bf00      	nop
  4013ac:	400e0e00 	.word	0x400e0e00
  4013b0:	004012f1 	.word	0x004012f1

004013b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4013b8:	4802      	ldr	r0, [pc, #8]	; (4013c4 <PIOB_Handler+0x10>)
  4013ba:	210b      	movs	r1, #11
  4013bc:	4b02      	ldr	r3, [pc, #8]	; (4013c8 <PIOB_Handler+0x14>)
  4013be:	4798      	blx	r3
}
  4013c0:	bd80      	pop	{r7, pc}
  4013c2:	bf00      	nop
  4013c4:	400e1000 	.word	0x400e1000
  4013c8:	004012f1 	.word	0x004012f1

004013cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4013d0:	4802      	ldr	r0, [pc, #8]	; (4013dc <PIOC_Handler+0x10>)
  4013d2:	210c      	movs	r1, #12
  4013d4:	4b02      	ldr	r3, [pc, #8]	; (4013e0 <PIOC_Handler+0x14>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bd80      	pop	{r7, pc}
  4013da:	bf00      	nop
  4013dc:	400e1200 	.word	0x400e1200
  4013e0:	004012f1 	.word	0x004012f1

004013e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4013e4:	b580      	push	{r7, lr}
  4013e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4013e8:	4802      	ldr	r0, [pc, #8]	; (4013f4 <PIOD_Handler+0x10>)
  4013ea:	2110      	movs	r1, #16
  4013ec:	4b02      	ldr	r3, [pc, #8]	; (4013f8 <PIOD_Handler+0x14>)
  4013ee:	4798      	blx	r3
}
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	400e1400 	.word	0x400e1400
  4013f8:	004012f1 	.word	0x004012f1

004013fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401400:	4802      	ldr	r0, [pc, #8]	; (40140c <PIOE_Handler+0x10>)
  401402:	2111      	movs	r1, #17
  401404:	4b02      	ldr	r3, [pc, #8]	; (401410 <PIOE_Handler+0x14>)
  401406:	4798      	blx	r3
}
  401408:	bd80      	pop	{r7, pc}
  40140a:	bf00      	nop
  40140c:	400e1600 	.word	0x400e1600
  401410:	004012f1 	.word	0x004012f1

00401414 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401414:	b480      	push	{r7}
  401416:	b083      	sub	sp, #12
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	3b01      	subs	r3, #1
  401420:	2b03      	cmp	r3, #3
  401422:	d81a      	bhi.n	40145a <pmc_mck_set_division+0x46>
  401424:	a201      	add	r2, pc, #4	; (adr r2, 40142c <pmc_mck_set_division+0x18>)
  401426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40142a:	bf00      	nop
  40142c:	0040143d 	.word	0x0040143d
  401430:	00401443 	.word	0x00401443
  401434:	0040144b 	.word	0x0040144b
  401438:	00401453 	.word	0x00401453
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40143c:	2300      	movs	r3, #0
  40143e:	607b      	str	r3, [r7, #4]
			break;
  401440:	e00e      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401442:	f44f 7380 	mov.w	r3, #256	; 0x100
  401446:	607b      	str	r3, [r7, #4]
			break;
  401448:	e00a      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40144a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40144e:	607b      	str	r3, [r7, #4]
			break;
  401450:	e006      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401452:	f44f 7300 	mov.w	r3, #512	; 0x200
  401456:	607b      	str	r3, [r7, #4]
			break;
  401458:	e002      	b.n	401460 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40145a:	2300      	movs	r3, #0
  40145c:	607b      	str	r3, [r7, #4]
			break;
  40145e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401460:	4909      	ldr	r1, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401462:	4b09      	ldr	r3, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
  401464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40146a:	687b      	ldr	r3, [r7, #4]
  40146c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40146e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	bf00      	nop
  401472:	4b05      	ldr	r3, [pc, #20]	; (401488 <pmc_mck_set_division+0x74>)
  401474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401476:	f003 0308 	and.w	r3, r3, #8
  40147a:	2b00      	cmp	r3, #0
  40147c:	d0f9      	beq.n	401472 <pmc_mck_set_division+0x5e>
}
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	f85d 7b04 	ldr.w	r7, [sp], #4
  401486:	4770      	bx	lr
  401488:	400e0600 	.word	0x400e0600

0040148c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40148c:	b480      	push	{r7}
  40148e:	b085      	sub	sp, #20
  401490:	af00      	add	r7, sp, #0
  401492:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401494:	491d      	ldr	r1, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401496:	4b1d      	ldr	r3, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40149a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40149e:	687b      	ldr	r3, [r7, #4]
  4014a0:	4313      	orrs	r3, r2
  4014a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014a8:	60fb      	str	r3, [r7, #12]
  4014aa:	e007      	b.n	4014bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014ac:	68fb      	ldr	r3, [r7, #12]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d101      	bne.n	4014b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e023      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014b6:	68fb      	ldr	r3, [r7, #12]
  4014b8:	3b01      	subs	r3, #1
  4014ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014bc:	4b13      	ldr	r3, [pc, #76]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c0:	f003 0308 	and.w	r3, r3, #8
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d0f1      	beq.n	4014ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4014c8:	4a10      	ldr	r2, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014ca:	4b10      	ldr	r3, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ce:	f023 0303 	bic.w	r3, r3, #3
  4014d2:	f043 0302 	orr.w	r3, r3, #2
  4014d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014dc:	60fb      	str	r3, [r7, #12]
  4014de:	e007      	b.n	4014f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d101      	bne.n	4014ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4014e6:	2301      	movs	r3, #1
  4014e8:	e009      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	3b01      	subs	r3, #1
  4014ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f4:	f003 0308 	and.w	r3, r3, #8
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d0f1      	beq.n	4014e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3714      	adds	r7, #20
  401502:	46bd      	mov	sp, r7
  401504:	f85d 7b04 	ldr.w	r7, [sp], #4
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	400e0600 	.word	0x400e0600

00401510 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2b01      	cmp	r3, #1
  40151c:	d105      	bne.n	40152a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40151e:	4907      	ldr	r1, [pc, #28]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401520:	4b06      	ldr	r3, [pc, #24]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401522:	689a      	ldr	r2, [r3, #8]
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <pmc_switch_sclk_to_32kxtal+0x30>)
  401526:	4313      	orrs	r3, r2
  401528:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40152a:	4b04      	ldr	r3, [pc, #16]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40152c:	4a05      	ldr	r2, [pc, #20]	; (401544 <pmc_switch_sclk_to_32kxtal+0x34>)
  40152e:	601a      	str	r2, [r3, #0]
}
  401530:	370c      	adds	r7, #12
  401532:	46bd      	mov	sp, r7
  401534:	f85d 7b04 	ldr.w	r7, [sp], #4
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e1810 	.word	0x400e1810
  401540:	a5100000 	.word	0xa5100000
  401544:	a5000008 	.word	0xa5000008

00401548 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401548:	b480      	push	{r7}
  40154a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <pmc_osc_is_ready_32kxtal+0x2c>)
  40154e:	695b      	ldr	r3, [r3, #20]
  401550:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401554:	2b00      	cmp	r3, #0
  401556:	d007      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401558:	4b07      	ldr	r3, [pc, #28]	; (401578 <pmc_osc_is_ready_32kxtal+0x30>)
  40155a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401560:	2b00      	cmp	r3, #0
  401562:	d001      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401564:	2301      	movs	r3, #1
  401566:	e000      	b.n	40156a <pmc_osc_is_ready_32kxtal+0x22>
  401568:	2300      	movs	r3, #0
}
  40156a:	4618      	mov	r0, r3
  40156c:	46bd      	mov	sp, r7
  40156e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401572:	4770      	bx	lr
  401574:	400e1810 	.word	0x400e1810
  401578:	400e0600 	.word	0x400e0600

0040157c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40157c:	b480      	push	{r7}
  40157e:	b083      	sub	sp, #12
  401580:	af00      	add	r7, sp, #0
  401582:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401584:	4915      	ldr	r1, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401586:	4b15      	ldr	r3, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401588:	6a1a      	ldr	r2, [r3, #32]
  40158a:	4b15      	ldr	r3, [pc, #84]	; (4015e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40158c:	4313      	orrs	r3, r2
  40158e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401590:	bf00      	nop
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40159a:	2b00      	cmp	r3, #0
  40159c:	d0f9      	beq.n	401592 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40159e:	490f      	ldr	r1, [pc, #60]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a0:	4b0e      	ldr	r3, [pc, #56]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a2:	6a1a      	ldr	r2, [r3, #32]
  4015a4:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4015a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4015a8:	687a      	ldr	r2, [r7, #4]
  4015aa:	4313      	orrs	r3, r2
  4015ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4015b0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4015b2:	bf00      	nop
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4015bc:	2b00      	cmp	r3, #0
  4015be:	d0f9      	beq.n	4015b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015c0:	4906      	ldr	r1, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c2:	4b06      	ldr	r3, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c4:	6a1a      	ldr	r2, [r3, #32]
  4015c6:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4015c8:	4013      	ands	r3, r2
  4015ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4015d0:	370c      	adds	r7, #12
  4015d2:	46bd      	mov	sp, r7
  4015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	400e0600 	.word	0x400e0600
  4015e0:	00370008 	.word	0x00370008
  4015e4:	ffc8ff8f 	.word	0xffc8ff8f
  4015e8:	fec8ffff 	.word	0xfec8ffff

004015ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d008      	beq.n	40160e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015fc:	4913      	ldr	r1, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  4015fe:	4b13      	ldr	r3, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401600:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401602:	4a13      	ldr	r2, [pc, #76]	; (401650 <pmc_switch_mainck_to_xtal+0x64>)
  401604:	401a      	ands	r2, r3
  401606:	4b13      	ldr	r3, [pc, #76]	; (401654 <pmc_switch_mainck_to_xtal+0x68>)
  401608:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40160a:	620b      	str	r3, [r1, #32]
  40160c:	e018      	b.n	401640 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40160e:	490f      	ldr	r1, [pc, #60]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401610:	4b0e      	ldr	r3, [pc, #56]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401612:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401614:	4b10      	ldr	r3, [pc, #64]	; (401658 <pmc_switch_mainck_to_xtal+0x6c>)
  401616:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401618:	683a      	ldr	r2, [r7, #0]
  40161a:	0212      	lsls	r2, r2, #8
  40161c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40161e:	431a      	orrs	r2, r3
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <pmc_switch_mainck_to_xtal+0x70>)
  401622:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401624:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401626:	bf00      	nop
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  40162a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40162c:	f003 0301 	and.w	r3, r3, #1
  401630:	2b00      	cmp	r3, #0
  401632:	d0f9      	beq.n	401628 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401634:	4905      	ldr	r1, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401636:	4b05      	ldr	r3, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401638:	6a1a      	ldr	r2, [r3, #32]
  40163a:	4b09      	ldr	r3, [pc, #36]	; (401660 <pmc_switch_mainck_to_xtal+0x74>)
  40163c:	4313      	orrs	r3, r2
  40163e:	620b      	str	r3, [r1, #32]
	}
}
  401640:	370c      	adds	r7, #12
  401642:	46bd      	mov	sp, r7
  401644:	f85d 7b04 	ldr.w	r7, [sp], #4
  401648:	4770      	bx	lr
  40164a:	bf00      	nop
  40164c:	400e0600 	.word	0x400e0600
  401650:	fec8fffc 	.word	0xfec8fffc
  401654:	01370002 	.word	0x01370002
  401658:	ffc8fffc 	.word	0xffc8fffc
  40165c:	00370001 	.word	0x00370001
  401660:	01370000 	.word	0x01370000

00401664 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_osc_is_ready_mainck+0x18>)
  40166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401670:	4618      	mov	r0, r3
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401684:	4b03      	ldr	r3, [pc, #12]	; (401694 <pmc_disable_pllack+0x14>)
  401686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40168a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40168c:	46bd      	mov	sp, r7
  40168e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401692:	4770      	bx	lr
  401694:	400e0600 	.word	0x400e0600

00401698 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401698:	b480      	push	{r7}
  40169a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40169c:	4b04      	ldr	r3, [pc, #16]	; (4016b0 <pmc_is_locked_pllack+0x18>)
  40169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a0:	f003 0302 	and.w	r3, r3, #2
}
  4016a4:	4618      	mov	r0, r3
  4016a6:	46bd      	mov	sp, r7
  4016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop
  4016b0:	400e0600 	.word	0x400e0600

004016b4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4016b4:	b480      	push	{r7}
  4016b6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4016b8:	4b04      	ldr	r3, [pc, #16]	; (4016cc <pmc_is_locked_upll+0x18>)
  4016ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	46bd      	mov	sp, r7
  4016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop
  4016cc:	400e0600 	.word	0x400e0600

004016d0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b083      	sub	sp, #12
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	2b3f      	cmp	r3, #63	; 0x3f
  4016dc:	d901      	bls.n	4016e2 <pmc_enable_periph_clk+0x12>
		return 1;
  4016de:	2301      	movs	r3, #1
  4016e0:	e02f      	b.n	401742 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	2b1f      	cmp	r3, #31
  4016e6:	d813      	bhi.n	401710 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016e8:	4b19      	ldr	r3, [pc, #100]	; (401750 <pmc_enable_periph_clk+0x80>)
  4016ea:	699a      	ldr	r2, [r3, #24]
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	2101      	movs	r1, #1
  4016f0:	fa01 f303 	lsl.w	r3, r1, r3
  4016f4:	401a      	ands	r2, r3
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	2101      	movs	r1, #1
  4016fa:	fa01 f303 	lsl.w	r3, r1, r3
  4016fe:	429a      	cmp	r2, r3
  401700:	d01e      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401702:	4a13      	ldr	r2, [pc, #76]	; (401750 <pmc_enable_periph_clk+0x80>)
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	2101      	movs	r1, #1
  401708:	fa01 f303 	lsl.w	r3, r1, r3
  40170c:	6113      	str	r3, [r2, #16]
  40170e:	e017      	b.n	401740 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	3b20      	subs	r3, #32
  401714:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pmc_enable_periph_clk+0x80>)
  401718:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	2101      	movs	r1, #1
  401720:	fa01 f303 	lsl.w	r3, r1, r3
  401724:	401a      	ands	r2, r3
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2101      	movs	r1, #1
  40172a:	fa01 f303 	lsl.w	r3, r1, r3
  40172e:	429a      	cmp	r2, r3
  401730:	d006      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401732:	4a07      	ldr	r2, [pc, #28]	; (401750 <pmc_enable_periph_clk+0x80>)
  401734:	687b      	ldr	r3, [r7, #4]
  401736:	2101      	movs	r1, #1
  401738:	fa01 f303 	lsl.w	r3, r1, r3
  40173c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401740:	2300      	movs	r3, #0
}
  401742:	4618      	mov	r0, r3
  401744:	370c      	adds	r7, #12
  401746:	46bd      	mov	sp, r7
  401748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	400e0600 	.word	0x400e0600

00401754 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401754:	b4b0      	push	{r4, r5, r7}
  401756:	b091      	sub	sp, #68	; 0x44
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40175e:	4b1b      	ldr	r3, [pc, #108]	; (4017cc <pwm_clocks_generate+0x78>)
  401760:	f107 040c 	add.w	r4, r7, #12
  401764:	461d      	mov	r5, r3
  401766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401776:	2300      	movs	r3, #0
  401778:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40177c:	009b      	lsls	r3, r3, #2
  40177e:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401782:	4413      	add	r3, r2
  401784:	f853 3c34 	ldr.w	r3, [r3, #-52]
  401788:	683a      	ldr	r2, [r7, #0]
  40178a:	fbb2 f2f3 	udiv	r2, r2, r3
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	fbb2 f3f3 	udiv	r3, r2, r3
  401794:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40179c:	d800      	bhi.n	4017a0 <pwm_clocks_generate+0x4c>
			break;
  40179e:	e005      	b.n	4017ac <pwm_clocks_generate+0x58>
		}
		ul_pre++;
  4017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a2:	3301      	adds	r3, #1
  4017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a8:	2b0a      	cmp	r3, #10
  4017aa:	d9e6      	bls.n	40177a <pwm_clocks_generate+0x26>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017ae:	2b0a      	cmp	r3, #10
  4017b0:	d804      	bhi.n	4017bc <pwm_clocks_generate+0x68>
		return ul_div | (ul_pre << 8);
  4017b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017b4:	021a      	lsls	r2, r3, #8
  4017b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4017b8:	4313      	orrs	r3, r2
  4017ba:	e001      	b.n	4017c0 <pwm_clocks_generate+0x6c>
	} else {
		return PWM_INVALID_ARGUMENT;
  4017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  4017c0:	4618      	mov	r0, r3
  4017c2:	3744      	adds	r7, #68	; 0x44
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bcb0      	pop	{r4, r5, r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	0040c52c 	.word	0x0040c52c

004017d0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4017d0:	b580      	push	{r7, lr}
  4017d2:	b084      	sub	sp, #16
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	6078      	str	r0, [r7, #4]
  4017d8:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  4017da:	2300      	movs	r3, #0
  4017dc:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4017de:	683b      	ldr	r3, [r7, #0]
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d011      	beq.n	40180a <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	681a      	ldr	r2, [r3, #0]
  4017ea:	683b      	ldr	r3, [r7, #0]
  4017ec:	689b      	ldr	r3, [r3, #8]
  4017ee:	4610      	mov	r0, r2
  4017f0:	4619      	mov	r1, r3
  4017f2:	4b16      	ldr	r3, [pc, #88]	; (40184c <pwm_init+0x7c>)
  4017f4:	4798      	blx	r3
  4017f6:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  4017f8:	68bb      	ldr	r3, [r7, #8]
  4017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017fe:	4293      	cmp	r3, r2
  401800:	d101      	bne.n	401806 <pwm_init+0x36>
			return result;
  401802:	68bb      	ldr	r3, [r7, #8]
  401804:	e01e      	b.n	401844 <pwm_init+0x74>
		}

		clock = result;
  401806:	68bb      	ldr	r3, [r7, #8]
  401808:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	685b      	ldr	r3, [r3, #4]
  40180e:	2b00      	cmp	r3, #0
  401810:	d014      	beq.n	40183c <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401812:	683b      	ldr	r3, [r7, #0]
  401814:	685a      	ldr	r2, [r3, #4]
  401816:	683b      	ldr	r3, [r7, #0]
  401818:	689b      	ldr	r3, [r3, #8]
  40181a:	4610      	mov	r0, r2
  40181c:	4619      	mov	r1, r3
  40181e:	4b0b      	ldr	r3, [pc, #44]	; (40184c <pwm_init+0x7c>)
  401820:	4798      	blx	r3
  401822:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  401824:	68bb      	ldr	r3, [r7, #8]
  401826:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40182a:	4293      	cmp	r3, r2
  40182c:	d101      	bne.n	401832 <pwm_init+0x62>
			return result;
  40182e:	68bb      	ldr	r3, [r7, #8]
  401830:	e008      	b.n	401844 <pwm_init+0x74>
		}

		clock |= (result << 16);
  401832:	68bb      	ldr	r3, [r7, #8]
  401834:	041b      	lsls	r3, r3, #16
  401836:	68fa      	ldr	r2, [r7, #12]
  401838:	4313      	orrs	r3, r2
  40183a:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	68fa      	ldr	r2, [r7, #12]
  401840:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  401842:	2300      	movs	r3, #0
}
  401844:	4618      	mov	r0, r3
  401846:	3710      	adds	r7, #16
  401848:	46bd      	mov	sp, r7
  40184a:	bd80      	pop	{r7, pc}
  40184c:	00401755 	.word	0x00401755

00401850 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401850:	b480      	push	{r7}
  401852:	b087      	sub	sp, #28
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
  401858:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  40185a:	2300      	movs	r3, #0
  40185c:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  40185e:	683b      	ldr	r3, [r7, #0]
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401864:	683b      	ldr	r3, [r7, #0]
  401866:	685b      	ldr	r3, [r3, #4]
  401868:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  40186c:	683a      	ldr	r2, [r7, #0]
  40186e:	7a92      	ldrb	r2, [r2, #10]
  401870:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401872:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401874:	683a      	ldr	r2, [r7, #0]
  401876:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  401878:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  40187a:	683a      	ldr	r2, [r7, #0]
  40187c:	7d92      	ldrb	r2, [r2, #22]
  40187e:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401880:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401882:	683a      	ldr	r2, [r7, #0]
  401884:	7dd2      	ldrb	r2, [r2, #23]
  401886:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  401888:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  40188a:	683a      	ldr	r2, [r7, #0]
  40188c:	7e12      	ldrb	r2, [r2, #24]
  40188e:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401890:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401892:	683a      	ldr	r2, [r7, #0]
  401894:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401896:	4313      	orrs	r3, r2
  401898:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	693b      	ldr	r3, [r7, #16]
  40189e:	3310      	adds	r3, #16
  4018a0:	015b      	lsls	r3, r3, #5
  4018a2:	4413      	add	r3, r2
  4018a4:	697a      	ldr	r2, [r7, #20]
  4018a6:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	68da      	ldr	r2, [r3, #12]
  4018ac:	6879      	ldr	r1, [r7, #4]
  4018ae:	693b      	ldr	r3, [r7, #16]
  4018b0:	3310      	adds	r3, #16
  4018b2:	015b      	lsls	r3, r3, #5
  4018b4:	440b      	add	r3, r1
  4018b6:	605a      	str	r2, [r3, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4018b8:	683b      	ldr	r3, [r7, #0]
  4018ba:	691a      	ldr	r2, [r3, #16]
  4018bc:	6879      	ldr	r1, [r7, #4]
  4018be:	693b      	ldr	r3, [r7, #16]
  4018c0:	015b      	lsls	r3, r3, #5
  4018c2:	440b      	add	r3, r1
  4018c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4018c8:	605a      	str	r2, [r3, #4]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	7d9b      	ldrb	r3, [r3, #22]
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d00d      	beq.n	4018ee <pwm_channel_init+0x9e>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4018d2:	683b      	ldr	r3, [r7, #0]
  4018d4:	8b9b      	ldrh	r3, [r3, #28]
  4018d6:	041b      	lsls	r3, r3, #16
  4018d8:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4018da:	683b      	ldr	r3, [r7, #0]
  4018dc:	8b5b      	ldrh	r3, [r3, #26]
  4018de:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4018e0:	6879      	ldr	r1, [r7, #4]
  4018e2:	693b      	ldr	r3, [r7, #16]
  4018e4:	015b      	lsls	r3, r3, #5
  4018e6:	440b      	add	r3, r1
  4018e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
  4018ec:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4018f2:	693b      	ldr	r3, [r7, #16]
  4018f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018f8:	fa01 f303 	lsl.w	r3, r1, r3
  4018fc:	43db      	mvns	r3, r3
  4018fe:	4013      	ands	r3, r2
  401900:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401902:	683b      	ldr	r3, [r7, #0]
  401904:	7f9b      	ldrb	r3, [r3, #30]
  401906:	461a      	mov	r2, r3
  401908:	693b      	ldr	r3, [r7, #16]
  40190a:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40190c:	683b      	ldr	r3, [r7, #0]
  40190e:	7fdb      	ldrb	r3, [r3, #31]
  401910:	4619      	mov	r1, r3
  401912:	693b      	ldr	r3, [r7, #16]
  401914:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401918:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40191a:	4313      	orrs	r3, r2
  40191c:	461a      	mov	r2, r3
  40191e:	697b      	ldr	r3, [r7, #20]
  401920:	4313      	orrs	r3, r2
  401922:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401924:	687b      	ldr	r3, [r7, #4]
  401926:	697a      	ldr	r2, [r7, #20]
  401928:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40192e:	693b      	ldr	r3, [r7, #16]
  401930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  401934:	fa01 f303 	lsl.w	r3, r1, r3
  401938:	43db      	mvns	r3, r3
  40193a:	4013      	ands	r3, r2
  40193c:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40193e:	683b      	ldr	r3, [r7, #0]
  401940:	f893 3020 	ldrb.w	r3, [r3, #32]
  401944:	461a      	mov	r2, r3
  401946:	693b      	ldr	r3, [r7, #16]
  401948:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401950:	4619      	mov	r1, r3
  401952:	693b      	ldr	r3, [r7, #16]
  401954:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401958:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40195a:	4313      	orrs	r3, r2
  40195c:	461a      	mov	r2, r3
  40195e:	697b      	ldr	r3, [r7, #20]
  401960:	4313      	orrs	r3, r2
  401962:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	697a      	ldr	r2, [r7, #20]
  401968:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40196a:	693b      	ldr	r3, [r7, #16]
  40196c:	2201      	movs	r2, #1
  40196e:	fa02 f303 	lsl.w	r3, r2, r3
  401972:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  401974:	683b      	ldr	r3, [r7, #0]
  401976:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  40197a:	2b00      	cmp	r3, #0
  40197c:	d006      	beq.n	40198c <pwm_channel_init+0x13c>
		p_pwm->PWM_SCM |= channel;
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	6a1a      	ldr	r2, [r3, #32]
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	431a      	orrs	r2, r3
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	621a      	str	r2, [r3, #32]
  40198a:	e006      	b.n	40199a <pwm_channel_init+0x14a>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	6a1a      	ldr	r2, [r3, #32]
  401990:	68fb      	ldr	r3, [r7, #12]
  401992:	43db      	mvns	r3, r3
  401994:	401a      	ands	r2, r3
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019a0:	2b02      	cmp	r3, #2
  4019a2:	d10b      	bne.n	4019bc <pwm_channel_init+0x16c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019aa:	693a      	ldr	r2, [r7, #16]
  4019ac:	2101      	movs	r1, #1
  4019ae:	fa01 f202 	lsl.w	r2, r1, r2
  4019b2:	431a      	orrs	r2, r3
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4019ba:	e024      	b.n	401a06 <pwm_channel_init+0x1b6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019c2:	693a      	ldr	r2, [r7, #16]
  4019c4:	2101      	movs	r1, #1
  4019c6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ca:	43d2      	mvns	r2, r2
  4019cc:	401a      	ands	r2, r3
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4019d4:	683b      	ldr	r3, [r7, #0]
  4019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019da:	2b01      	cmp	r3, #1
  4019dc:	d109      	bne.n	4019f2 <pwm_channel_init+0x1a2>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019e2:	693a      	ldr	r2, [r7, #16]
  4019e4:	2101      	movs	r1, #1
  4019e6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ea:	431a      	orrs	r2, r3
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	669a      	str	r2, [r3, #104]	; 0x68
  4019f0:	e009      	b.n	401a06 <pwm_channel_init+0x1b6>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019f6:	693a      	ldr	r2, [r7, #16]
  4019f8:	2101      	movs	r1, #1
  4019fa:	fa01 f202 	lsl.w	r2, r1, r2
  4019fe:	43d2      	mvns	r2, r2
  401a00:	401a      	ands	r2, r3
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  401a06:	683b      	ldr	r3, [r7, #0]
  401a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a0c:	2b02      	cmp	r3, #2
  401a0e:	d10c      	bne.n	401a2a <pwm_channel_init+0x1da>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  401a10:	687b      	ldr	r3, [r7, #4]
  401a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a16:	693a      	ldr	r2, [r7, #16]
  401a18:	2101      	movs	r1, #1
  401a1a:	fa01 f202 	lsl.w	r2, r1, r2
  401a1e:	0412      	lsls	r2, r2, #16
  401a20:	431a      	orrs	r2, r3
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401a28:	e027      	b.n	401a7a <pwm_channel_init+0x22a>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a30:	693a      	ldr	r2, [r7, #16]
  401a32:	2101      	movs	r1, #1
  401a34:	fa01 f202 	lsl.w	r2, r1, r2
  401a38:	0412      	lsls	r2, r2, #16
  401a3a:	43d2      	mvns	r2, r2
  401a3c:	401a      	ands	r2, r3
  401a3e:	687b      	ldr	r3, [r7, #4]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401a44:	683b      	ldr	r3, [r7, #0]
  401a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a4a:	2b01      	cmp	r3, #1
  401a4c:	d10a      	bne.n	401a64 <pwm_channel_init+0x214>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a52:	693a      	ldr	r2, [r7, #16]
  401a54:	2101      	movs	r1, #1
  401a56:	fa01 f202 	lsl.w	r2, r1, r2
  401a5a:	0412      	lsls	r2, r2, #16
  401a5c:	431a      	orrs	r2, r3
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	669a      	str	r2, [r3, #104]	; 0x68
  401a62:	e00a      	b.n	401a7a <pwm_channel_init+0x22a>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401a64:	687b      	ldr	r3, [r7, #4]
  401a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a68:	693a      	ldr	r2, [r7, #16]
  401a6a:	2101      	movs	r1, #1
  401a6c:	fa01 f202 	lsl.w	r2, r1, r2
  401a70:	0412      	lsls	r2, r2, #16
  401a72:	43d2      	mvns	r2, r2
  401a74:	401a      	ands	r2, r3
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  401a7a:	2300      	movs	r3, #0
  401a7c:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a7e:	693b      	ldr	r3, [r7, #16]
  401a80:	00db      	lsls	r3, r3, #3
  401a82:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401a88:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  401a8a:	693b      	ldr	r3, [r7, #16]
  401a8c:	22ff      	movs	r2, #255	; 0xff
  401a8e:	fa02 f303 	lsl.w	r3, r2, r3
  401a92:	43db      	mvns	r3, r3
  401a94:	461a      	mov	r2, r3
  401a96:	68bb      	ldr	r3, [r7, #8]
  401a98:	4013      	ands	r3, r2
  401a9a:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a9c:	683b      	ldr	r3, [r7, #0]
  401a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401aa2:	461a      	mov	r2, r3
  401aa4:	693b      	ldr	r3, [r7, #16]
  401aa6:	fa02 f303 	lsl.w	r3, r2, r3
  401aaa:	461a      	mov	r2, r3
  401aac:	68bb      	ldr	r3, [r7, #8]
  401aae:	4313      	orrs	r3, r2
  401ab0:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  401ab2:	687b      	ldr	r3, [r7, #4]
  401ab4:	68ba      	ldr	r2, [r7, #8]
  401ab6:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401ab8:	693b      	ldr	r3, [r7, #16]
  401aba:	2b00      	cmp	r3, #0
  401abc:	d115      	bne.n	401aea <pwm_channel_init+0x29a>
		if (p_channel->spread_spectrum_mode ==
  401abe:	683b      	ldr	r3, [r7, #0]
  401ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  401ac4:	2b01      	cmp	r3, #1
  401ac6:	d109      	bne.n	401adc <pwm_channel_init+0x28c>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ada:	e006      	b.n	401aea <pwm_channel_init+0x29a>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401adc:	683b      	ldr	r3, [r7, #0]
  401ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ae0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401aea:	687a      	ldr	r2, [r7, #4]
  401aec:	693b      	ldr	r3, [r7, #16]
  401aee:	3310      	adds	r3, #16
  401af0:	015b      	lsls	r3, r3, #5
  401af2:	4413      	add	r3, r2
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401afa:	6879      	ldr	r1, [r7, #4]
  401afc:	693b      	ldr	r3, [r7, #16]
  401afe:	3310      	adds	r3, #16
  401b00:	015b      	lsls	r3, r3, #5
  401b02:	440b      	add	r3, r1
  401b04:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401b06:	687a      	ldr	r2, [r7, #4]
  401b08:	693b      	ldr	r3, [r7, #16]
  401b0a:	3310      	adds	r3, #16
  401b0c:	015b      	lsls	r3, r3, #5
  401b0e:	4413      	add	r3, r2
  401b10:	681a      	ldr	r2, [r3, #0]
  401b12:	683b      	ldr	r3, [r7, #0]
  401b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401b1a:	431a      	orrs	r2, r3
  401b1c:	6879      	ldr	r1, [r7, #4]
  401b1e:	693b      	ldr	r3, [r7, #16]
  401b20:	3310      	adds	r3, #16
  401b22:	015b      	lsls	r3, r3, #5
  401b24:	440b      	add	r3, r1
  401b26:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401b28:	2300      	movs	r3, #0
}
  401b2a:	4618      	mov	r0, r3
  401b2c:	371c      	adds	r7, #28
  401b2e:	46bd      	mov	sp, r7
  401b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop

00401b38 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  401b38:	b480      	push	{r7}
  401b3a:	b087      	sub	sp, #28
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	60f8      	str	r0, [r7, #12]
  401b40:	60b9      	str	r1, [r7, #8]
  401b42:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  401b44:	68bb      	ldr	r3, [r7, #8]
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401b4a:	68bb      	ldr	r3, [r7, #8]
  401b4c:	691a      	ldr	r2, [r3, #16]
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	429a      	cmp	r2, r3
  401b52:	d202      	bcs.n	401b5a <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  401b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b58:	e00b      	b.n	401b72 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401b5a:	68bb      	ldr	r3, [r7, #8]
  401b5c:	687a      	ldr	r2, [r7, #4]
  401b5e:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401b60:	68fa      	ldr	r2, [r7, #12]
  401b62:	697b      	ldr	r3, [r7, #20]
  401b64:	015b      	lsls	r3, r3, #5
  401b66:	4413      	add	r3, r2
  401b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401b6c:	687a      	ldr	r2, [r7, #4]
  401b6e:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  401b70:	2300      	movs	r3, #0
}
  401b72:	4618      	mov	r0, r3
  401b74:	371c      	adds	r7, #28
  401b76:	46bd      	mov	sp, r7
  401b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
  401b88:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  401b8a:	683b      	ldr	r3, [r7, #0]
  401b8c:	2201      	movs	r2, #1
  401b8e:	fa02 f303 	lsl.w	r3, r2, r3
  401b92:	461a      	mov	r2, r3
  401b94:	687b      	ldr	r3, [r7, #4]
  401b96:	605a      	str	r2, [r3, #4]
}
  401b98:	370c      	adds	r7, #12
  401b9a:	46bd      	mov	sp, r7
  401b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401bae:	683b      	ldr	r3, [r7, #0]
  401bb0:	2201      	movs	r2, #1
  401bb2:	fa02 f303 	lsl.w	r3, r2, r3
  401bb6:	461a      	mov	r2, r3
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	609a      	str	r2, [r3, #8]
}
  401bbc:	370c      	adds	r7, #12
  401bbe:	46bd      	mov	sp, r7
  401bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop

00401bc8 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401bc8:	b480      	push	{r7}
  401bca:	b083      	sub	sp, #12
  401bcc:	af00      	add	r7, sp, #0
  401bce:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	69db      	ldr	r3, [r3, #28]
#endif
}
  401bd4:	4618      	mov	r0, r3
  401bd6:	370c      	adds	r7, #12
  401bd8:	46bd      	mov	sp, r7
  401bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bde:	4770      	bx	lr

00401be0 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401be0:	b480      	push	{r7}
  401be2:	b085      	sub	sp, #20
  401be4:	af00      	add	r7, sp, #0
  401be6:	60f8      	str	r0, [r7, #12]
  401be8:	60b9      	str	r1, [r7, #8]
  401bea:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401bec:	68bb      	ldr	r3, [r7, #8]
  401bee:	2201      	movs	r2, #1
  401bf0:	409a      	lsls	r2, r3
  401bf2:	687b      	ldr	r3, [r7, #4]
  401bf4:	3310      	adds	r3, #16
  401bf6:	4619      	mov	r1, r3
  401bf8:	2301      	movs	r3, #1
  401bfa:	408b      	lsls	r3, r1
  401bfc:	4313      	orrs	r3, r2
  401bfe:	461a      	mov	r2, r3
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	611a      	str	r2, [r3, #16]
#endif
}
  401c04:	3714      	adds	r7, #20
  401c06:	46bd      	mov	sp, r7
  401c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <pwm_channel_disable_interrupt>:
 * \param ul_fault Bitmask of channel number to disable fault protection
 * interrupt(ignored by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401c10:	b480      	push	{r7}
  401c12:	b085      	sub	sp, #20
  401c14:	af00      	add	r7, sp, #0
  401c16:	60f8      	str	r0, [r7, #12]
  401c18:	60b9      	str	r1, [r7, #8]
  401c1a:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401c1c:	68bb      	ldr	r3, [r7, #8]
  401c1e:	2201      	movs	r2, #1
  401c20:	409a      	lsls	r2, r3
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	3310      	adds	r3, #16
  401c26:	4619      	mov	r1, r3
  401c28:	2301      	movs	r3, #1
  401c2a:	408b      	lsls	r3, r1
  401c2c:	4313      	orrs	r3, r2
  401c2e:	461a      	mov	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	615a      	str	r2, [r3, #20]
#endif
}
  401c34:	3714      	adds	r7, #20
  401c36:	46bd      	mov	sp, r7
  401c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop

00401c40 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401c40:	b480      	push	{r7}
  401c42:	b083      	sub	sp, #12
  401c44:	af00      	add	r7, sp, #0
  401c46:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	2208      	movs	r2, #8
  401c4c:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	2220      	movs	r2, #32
  401c52:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c54:	687b      	ldr	r3, [r7, #4]
  401c56:	2204      	movs	r2, #4
  401c58:	601a      	str	r2, [r3, #0]
}
  401c5a:	370c      	adds	r7, #12
  401c5c:	46bd      	mov	sp, r7
  401c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c62:	4770      	bx	lr

00401c64 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b084      	sub	sp, #16
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
  401c6c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401c6e:	2300      	movs	r3, #0
  401c70:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	f04f 32ff 	mov.w	r2, #4294967295
  401c78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401c7e:	6878      	ldr	r0, [r7, #4]
  401c80:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <twihs_master_init+0x4c>)
  401c82:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401c84:	6878      	ldr	r0, [r7, #4]
  401c86:	4b0b      	ldr	r3, [pc, #44]	; (401cb4 <twihs_master_init+0x50>)
  401c88:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c8a:	683b      	ldr	r3, [r7, #0]
  401c8c:	685a      	ldr	r2, [r3, #4]
  401c8e:	683b      	ldr	r3, [r7, #0]
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	6878      	ldr	r0, [r7, #4]
  401c94:	4611      	mov	r1, r2
  401c96:	461a      	mov	r2, r3
  401c98:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <twihs_master_init+0x54>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b01      	cmp	r3, #1
  401ca0:	d101      	bne.n	401ca6 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401ca2:	2301      	movs	r3, #1
  401ca4:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401ca6:	68fb      	ldr	r3, [r7, #12]
}
  401ca8:	4618      	mov	r0, r3
  401caa:	3710      	adds	r7, #16
  401cac:	46bd      	mov	sp, r7
  401cae:	bd80      	pop	{r7, pc}
  401cb0:	00401f4d 	.word	0x00401f4d
  401cb4:	00401c41 	.word	0x00401c41
  401cb8:	00401cbd 	.word	0x00401cbd

00401cbc <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401cc8:	2300      	movs	r3, #0
  401cca:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401ccc:	68bb      	ldr	r3, [r7, #8]
  401cce:	4a16      	ldr	r2, [pc, #88]	; (401d28 <twihs_set_speed+0x6c>)
  401cd0:	4293      	cmp	r3, r2
  401cd2:	d901      	bls.n	401cd8 <twihs_set_speed+0x1c>
		return FAIL;
  401cd4:	2301      	movs	r3, #1
  401cd6:	e021      	b.n	401d1c <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cd8:	68bb      	ldr	r3, [r7, #8]
  401cda:	005b      	lsls	r3, r3, #1
  401cdc:	687a      	ldr	r2, [r7, #4]
  401cde:	fbb2 f3f3 	udiv	r3, r2, r3
  401ce2:	3b04      	subs	r3, #4
  401ce4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ce6:	e005      	b.n	401cf4 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401ce8:	697b      	ldr	r3, [r7, #20]
  401cea:	3301      	adds	r3, #1
  401cec:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401cee:	693b      	ldr	r3, [r7, #16]
  401cf0:	085b      	lsrs	r3, r3, #1
  401cf2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cf4:	693b      	ldr	r3, [r7, #16]
  401cf6:	2bff      	cmp	r3, #255	; 0xff
  401cf8:	d902      	bls.n	401d00 <twihs_set_speed+0x44>
  401cfa:	697b      	ldr	r3, [r7, #20]
  401cfc:	2b06      	cmp	r3, #6
  401cfe:	d9f3      	bls.n	401ce8 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d00:	693b      	ldr	r3, [r7, #16]
  401d02:	b2da      	uxtb	r2, r3
  401d04:	693b      	ldr	r3, [r7, #16]
  401d06:	021b      	lsls	r3, r3, #8
  401d08:	b29b      	uxth	r3, r3
  401d0a:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401d0c:	697b      	ldr	r3, [r7, #20]
  401d0e:	041b      	lsls	r3, r3, #16
  401d10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d14:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401d1a:	2300      	movs	r3, #0
}
  401d1c:	4618      	mov	r0, r3
  401d1e:	371c      	adds	r7, #28
  401d20:	46bd      	mov	sp, r7
  401d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d26:	4770      	bx	lr
  401d28:	00061a80 	.word	0x00061a80

00401d2c <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b085      	sub	sp, #20
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
  401d34:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401d36:	683b      	ldr	r3, [r7, #0]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d101      	bne.n	401d40 <twihs_mk_addr+0x14>
		return 0;
  401d3c:	2300      	movs	r3, #0
  401d3e:	e01d      	b.n	401d7c <twihs_mk_addr+0x50>

	val = addr[0];
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	781b      	ldrb	r3, [r3, #0]
  401d44:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401d46:	683b      	ldr	r3, [r7, #0]
  401d48:	2b01      	cmp	r3, #1
  401d4a:	dd09      	ble.n	401d60 <twihs_mk_addr+0x34>
		val <<= 8;
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	021b      	lsls	r3, r3, #8
  401d50:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	3301      	adds	r3, #1
  401d56:	781b      	ldrb	r3, [r3, #0]
  401d58:	461a      	mov	r2, r3
  401d5a:	68fb      	ldr	r3, [r7, #12]
  401d5c:	4313      	orrs	r3, r2
  401d5e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b02      	cmp	r3, #2
  401d64:	dd09      	ble.n	401d7a <twihs_mk_addr+0x4e>
		val <<= 8;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	021b      	lsls	r3, r3, #8
  401d6a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	3302      	adds	r3, #2
  401d70:	781b      	ldrb	r3, [r3, #0]
  401d72:	461a      	mov	r2, r3
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	4313      	orrs	r3, r2
  401d78:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d7a:	68fb      	ldr	r3, [r7, #12]
}
  401d7c:	4618      	mov	r0, r3
  401d7e:	3714      	adds	r7, #20
  401d80:	46bd      	mov	sp, r7
  401d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d86:	4770      	bx	lr

00401d88 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b086      	sub	sp, #24
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401d92:	683b      	ldr	r3, [r7, #0]
  401d94:	68db      	ldr	r3, [r3, #12]
  401d96:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401d98:	683b      	ldr	r3, [r7, #0]
  401d9a:	689b      	ldr	r3, [r3, #8]
  401d9c:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401d9e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401da2:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401da4:	697b      	ldr	r3, [r7, #20]
  401da6:	2b00      	cmp	r3, #0
  401da8:	d101      	bne.n	401dae <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401daa:	2301      	movs	r3, #1
  401dac:	e059      	b.n	401e62 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401dae:	687b      	ldr	r3, [r7, #4]
  401db0:	2200      	movs	r2, #0
  401db2:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401db4:	683b      	ldr	r3, [r7, #0]
  401db6:	7c1b      	ldrb	r3, [r3, #16]
  401db8:	041b      	lsls	r3, r3, #16
  401dba:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dbe:	683b      	ldr	r3, [r7, #0]
  401dc0:	685b      	ldr	r3, [r3, #4]
  401dc2:	021b      	lsls	r3, r3, #8
  401dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dc8:	4313      	orrs	r3, r2
  401dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401dce:	687b      	ldr	r3, [r7, #4]
  401dd0:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401dd2:	687b      	ldr	r3, [r7, #4]
  401dd4:	2200      	movs	r2, #0
  401dd6:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dd8:	683a      	ldr	r2, [r7, #0]
  401dda:	683b      	ldr	r3, [r7, #0]
  401ddc:	685b      	ldr	r3, [r3, #4]
  401dde:	4610      	mov	r0, r2
  401de0:	4619      	mov	r1, r3
  401de2:	4b22      	ldr	r3, [pc, #136]	; (401e6c <twihs_master_read+0xe4>)
  401de4:	4798      	blx	r3
  401de6:	4602      	mov	r2, r0
  401de8:	687b      	ldr	r3, [r7, #4]
  401dea:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401dec:	687b      	ldr	r3, [r7, #4]
  401dee:	2201      	movs	r2, #1
  401df0:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401df2:	e029      	b.n	401e48 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	6a1b      	ldr	r3, [r3, #32]
  401df8:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401dfa:	68bb      	ldr	r3, [r7, #8]
  401dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e00:	2b00      	cmp	r3, #0
  401e02:	d001      	beq.n	401e08 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401e04:	2305      	movs	r3, #5
  401e06:	e02c      	b.n	401e62 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	1e5a      	subs	r2, r3, #1
  401e0c:	60fa      	str	r2, [r7, #12]
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d101      	bne.n	401e16 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401e12:	2309      	movs	r3, #9
  401e14:	e025      	b.n	401e62 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401e16:	697b      	ldr	r3, [r7, #20]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d102      	bne.n	401e22 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	2202      	movs	r2, #2
  401e20:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401e22:	68bb      	ldr	r3, [r7, #8]
  401e24:	f003 0302 	and.w	r3, r3, #2
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d100      	bne.n	401e2e <twihs_master_read+0xa6>
			continue;
  401e2c:	e00c      	b.n	401e48 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401e2e:	693b      	ldr	r3, [r7, #16]
  401e30:	1c5a      	adds	r2, r3, #1
  401e32:	613a      	str	r2, [r7, #16]
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401e38:	b2d2      	uxtb	r2, r2
  401e3a:	701a      	strb	r2, [r3, #0]

		cnt--;
  401e3c:	697b      	ldr	r3, [r7, #20]
  401e3e:	3b01      	subs	r3, #1
  401e40:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  401e42:	f643 2398 	movw	r3, #15000	; 0x3a98
  401e46:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401e48:	697b      	ldr	r3, [r7, #20]
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d1d2      	bne.n	401df4 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e4e:	bf00      	nop
  401e50:	687b      	ldr	r3, [r7, #4]
  401e52:	6a1b      	ldr	r3, [r3, #32]
  401e54:	f003 0301 	and.w	r3, r3, #1
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d0f9      	beq.n	401e50 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  401e60:	2300      	movs	r3, #0
}
  401e62:	4618      	mov	r0, r3
  401e64:	3718      	adds	r7, #24
  401e66:	46bd      	mov	sp, r7
  401e68:	bd80      	pop	{r7, pc}
  401e6a:	bf00      	nop
  401e6c:	00401d2d 	.word	0x00401d2d

00401e70 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e70:	b580      	push	{r7, lr}
  401e72:	b086      	sub	sp, #24
  401e74:	af00      	add	r7, sp, #0
  401e76:	6078      	str	r0, [r7, #4]
  401e78:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	68db      	ldr	r3, [r3, #12]
  401e7e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e80:	683b      	ldr	r3, [r7, #0]
  401e82:	689b      	ldr	r3, [r3, #8]
  401e84:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e86:	697b      	ldr	r3, [r7, #20]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d101      	bne.n	401e90 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401e8c:	2301      	movs	r3, #1
  401e8e:	e056      	b.n	401f3e <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	2200      	movs	r2, #0
  401e94:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	7c1b      	ldrb	r3, [r3, #16]
  401e9a:	041b      	lsls	r3, r3, #16
  401e9c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ea0:	683b      	ldr	r3, [r7, #0]
  401ea2:	685b      	ldr	r3, [r3, #4]
  401ea4:	021b      	lsls	r3, r3, #8
  401ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401eaa:	431a      	orrs	r2, r3
  401eac:	687b      	ldr	r3, [r7, #4]
  401eae:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	2200      	movs	r2, #0
  401eb4:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eb6:	683a      	ldr	r2, [r7, #0]
  401eb8:	683b      	ldr	r3, [r7, #0]
  401eba:	685b      	ldr	r3, [r3, #4]
  401ebc:	4610      	mov	r0, r2
  401ebe:	4619      	mov	r1, r3
  401ec0:	4b21      	ldr	r3, [pc, #132]	; (401f48 <twihs_master_write+0xd8>)
  401ec2:	4798      	blx	r3
  401ec4:	4602      	mov	r2, r0
  401ec6:	687b      	ldr	r3, [r7, #4]
  401ec8:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401eca:	e019      	b.n	401f00 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	6a1b      	ldr	r3, [r3, #32]
  401ed0:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d001      	beq.n	401ee0 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401edc:	2305      	movs	r3, #5
  401ede:	e02e      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	f003 0304 	and.w	r3, r3, #4
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d100      	bne.n	401eec <twihs_master_write+0x7c>
			continue;
  401eea:	e009      	b.n	401f00 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401eec:	693b      	ldr	r3, [r7, #16]
  401eee:	1c5a      	adds	r2, r3, #1
  401ef0:	613a      	str	r2, [r7, #16]
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	461a      	mov	r2, r3
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401efa:	697b      	ldr	r3, [r7, #20]
  401efc:	3b01      	subs	r3, #1
  401efe:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f00:	697b      	ldr	r3, [r7, #20]
  401f02:	2b00      	cmp	r3, #0
  401f04:	d1e2      	bne.n	401ecc <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	6a1b      	ldr	r3, [r3, #32]
  401f0a:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401f0c:	68fb      	ldr	r3, [r7, #12]
  401f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401f12:	2b00      	cmp	r3, #0
  401f14:	d001      	beq.n	401f1a <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401f16:	2305      	movs	r3, #5
  401f18:	e011      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401f1a:	68fb      	ldr	r3, [r7, #12]
  401f1c:	f003 0304 	and.w	r3, r3, #4
  401f20:	2b00      	cmp	r3, #0
  401f22:	d004      	beq.n	401f2e <twihs_master_write+0xbe>
			break;
  401f24:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	2202      	movs	r2, #2
  401f2a:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f2c:	e000      	b.n	401f30 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  401f2e:	e7ea      	b.n	401f06 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f30:	687b      	ldr	r3, [r7, #4]
  401f32:	6a1b      	ldr	r3, [r3, #32]
  401f34:	f003 0301 	and.w	r3, r3, #1
  401f38:	2b00      	cmp	r3, #0
  401f3a:	d0f9      	beq.n	401f30 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401f3c:	2300      	movs	r3, #0
}
  401f3e:	4618      	mov	r0, r3
  401f40:	3718      	adds	r7, #24
  401f42:	46bd      	mov	sp, r7
  401f44:	bd80      	pop	{r7, pc}
  401f46:	bf00      	nop
  401f48:	00401d2d 	.word	0x00401d2d

00401f4c <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	2280      	movs	r2, #128	; 0x80
  401f58:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr

00401f68 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401f68:	b480      	push	{r7}
  401f6a:	b085      	sub	sp, #20
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401f72:	2300      	movs	r3, #0
  401f74:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401f76:	687b      	ldr	r3, [r7, #4]
  401f78:	22ac      	movs	r2, #172	; 0xac
  401f7a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401f7c:	683b      	ldr	r3, [r7, #0]
  401f7e:	681a      	ldr	r2, [r3, #0]
  401f80:	683b      	ldr	r3, [r7, #0]
  401f82:	685b      	ldr	r3, [r3, #4]
  401f84:	fbb2 f3f3 	udiv	r3, r2, r3
  401f88:	091b      	lsrs	r3, r3, #4
  401f8a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d003      	beq.n	401f9a <uart_init+0x32>
  401f92:	68fb      	ldr	r3, [r7, #12]
  401f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401f98:	d301      	bcc.n	401f9e <uart_init+0x36>
		return 1;
  401f9a:	2301      	movs	r3, #1
  401f9c:	e00a      	b.n	401fb4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	68fa      	ldr	r2, [r7, #12]
  401fa2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401fa4:	683b      	ldr	r3, [r7, #0]
  401fa6:	689a      	ldr	r2, [r3, #8]
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401fac:	687b      	ldr	r3, [r7, #4]
  401fae:	2250      	movs	r2, #80	; 0x50
  401fb0:	601a      	str	r2, [r3, #0]

	return 0;
  401fb2:	2300      	movs	r3, #0
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fbe:	4770      	bx	lr

00401fc0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401fc0:	b480      	push	{r7}
  401fc2:	b083      	sub	sp, #12
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	6078      	str	r0, [r7, #4]
  401fc8:	460b      	mov	r3, r1
  401fca:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401fcc:	687b      	ldr	r3, [r7, #4]
  401fce:	695b      	ldr	r3, [r3, #20]
  401fd0:	f003 0302 	and.w	r3, r3, #2
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d101      	bne.n	401fdc <uart_write+0x1c>
		return 1;
  401fd8:	2301      	movs	r3, #1
  401fda:	e003      	b.n	401fe4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401fdc:	78fa      	ldrb	r2, [r7, #3]
  401fde:	687b      	ldr	r3, [r7, #4]
  401fe0:	61da      	str	r2, [r3, #28]
	return 0;
  401fe2:	2300      	movs	r3, #0
}
  401fe4:	4618      	mov	r0, r3
  401fe6:	370c      	adds	r7, #12
  401fe8:	46bd      	mov	sp, r7
  401fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fee:	4770      	bx	lr

00401ff0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
  401ff8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	695b      	ldr	r3, [r3, #20]
  401ffe:	f003 0301 	and.w	r3, r3, #1
  402002:	2b00      	cmp	r3, #0
  402004:	d101      	bne.n	40200a <uart_read+0x1a>
		return 1;
  402006:	2301      	movs	r3, #1
  402008:	e005      	b.n	402016 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	699b      	ldr	r3, [r3, #24]
  40200e:	b2da      	uxtb	r2, r3
  402010:	683b      	ldr	r3, [r7, #0]
  402012:	701a      	strb	r2, [r3, #0]
	return 0;
  402014:	2300      	movs	r3, #0
}
  402016:	4618      	mov	r0, r3
  402018:	370c      	adds	r7, #12
  40201a:	46bd      	mov	sp, r7
  40201c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402020:	4770      	bx	lr
  402022:	bf00      	nop

00402024 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402024:	b480      	push	{r7}
  402026:	b089      	sub	sp, #36	; 0x24
  402028:	af00      	add	r7, sp, #0
  40202a:	60f8      	str	r0, [r7, #12]
  40202c:	60b9      	str	r1, [r7, #8]
  40202e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402030:	68bb      	ldr	r3, [r7, #8]
  402032:	011a      	lsls	r2, r3, #4
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	429a      	cmp	r2, r3
  402038:	d802      	bhi.n	402040 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40203a:	2310      	movs	r3, #16
  40203c:	61fb      	str	r3, [r7, #28]
  40203e:	e001      	b.n	402044 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  402040:	2308      	movs	r3, #8
  402042:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	00da      	lsls	r2, r3, #3
  402048:	69fb      	ldr	r3, [r7, #28]
  40204a:	68b9      	ldr	r1, [r7, #8]
  40204c:	fb01 f303 	mul.w	r3, r1, r3
  402050:	085b      	lsrs	r3, r3, #1
  402052:	441a      	add	r2, r3
  402054:	69fb      	ldr	r3, [r7, #28]
  402056:	68b9      	ldr	r1, [r7, #8]
  402058:	fb01 f303 	mul.w	r3, r1, r3
  40205c:	fbb2 f3f3 	udiv	r3, r2, r3
  402060:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  402062:	69bb      	ldr	r3, [r7, #24]
  402064:	08db      	lsrs	r3, r3, #3
  402066:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402068:	69bb      	ldr	r3, [r7, #24]
  40206a:	f003 0307 	and.w	r3, r3, #7
  40206e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402070:	697b      	ldr	r3, [r7, #20]
  402072:	2b00      	cmp	r3, #0
  402074:	d003      	beq.n	40207e <usart_set_async_baudrate+0x5a>
  402076:	697b      	ldr	r3, [r7, #20]
  402078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40207c:	d301      	bcc.n	402082 <usart_set_async_baudrate+0x5e>
		return 1;
  40207e:	2301      	movs	r3, #1
  402080:	e00f      	b.n	4020a2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  402082:	69fb      	ldr	r3, [r7, #28]
  402084:	2b08      	cmp	r3, #8
  402086:	d105      	bne.n	402094 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402088:	68fb      	ldr	r3, [r7, #12]
  40208a:	685b      	ldr	r3, [r3, #4]
  40208c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402094:	693b      	ldr	r3, [r7, #16]
  402096:	041a      	lsls	r2, r3, #16
  402098:	697b      	ldr	r3, [r7, #20]
  40209a:	431a      	orrs	r2, r3
  40209c:	68fb      	ldr	r3, [r7, #12]
  40209e:	621a      	str	r2, [r3, #32]

	return 0;
  4020a0:	2300      	movs	r3, #0
}
  4020a2:	4618      	mov	r0, r3
  4020a4:	3724      	adds	r7, #36	; 0x24
  4020a6:	46bd      	mov	sp, r7
  4020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	b082      	sub	sp, #8
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4020b8:	6878      	ldr	r0, [r7, #4]
  4020ba:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <usart_reset+0x40>)
  4020bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2200      	movs	r2, #0
  4020c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	2200      	movs	r2, #0
  4020c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	2200      	movs	r2, #0
  4020ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4020d0:	6878      	ldr	r0, [r7, #4]
  4020d2:	4b08      	ldr	r3, [pc, #32]	; (4020f4 <usart_reset+0x44>)
  4020d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4020d6:	6878      	ldr	r0, [r7, #4]
  4020d8:	4b07      	ldr	r3, [pc, #28]	; (4020f8 <usart_reset+0x48>)
  4020da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4020dc:	6878      	ldr	r0, [r7, #4]
  4020de:	4b07      	ldr	r3, [pc, #28]	; (4020fc <usart_reset+0x4c>)
  4020e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4020e2:	6878      	ldr	r0, [r7, #4]
  4020e4:	4b06      	ldr	r3, [pc, #24]	; (402100 <usart_reset+0x50>)
  4020e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4020e8:	3708      	adds	r7, #8
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bd80      	pop	{r7, pc}
  4020ee:	bf00      	nop
  4020f0:	00402345 	.word	0x00402345
  4020f4:	004021a1 	.word	0x004021a1
  4020f8:	004021ed 	.word	0x004021ed
  4020fc:	00402255 	.word	0x00402255
  402100:	00402271 	.word	0x00402271

00402104 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402104:	b580      	push	{r7, lr}
  402106:	b084      	sub	sp, #16
  402108:	af00      	add	r7, sp, #0
  40210a:	60f8      	str	r0, [r7, #12]
  40210c:	60b9      	str	r1, [r7, #8]
  40210e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402110:	68f8      	ldr	r0, [r7, #12]
  402112:	4b1a      	ldr	r3, [pc, #104]	; (40217c <usart_init_rs232+0x78>)
  402114:	4798      	blx	r3

	ul_reg_val = 0;
  402116:	4b1a      	ldr	r3, [pc, #104]	; (402180 <usart_init_rs232+0x7c>)
  402118:	2200      	movs	r2, #0
  40211a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40211c:	68bb      	ldr	r3, [r7, #8]
  40211e:	2b00      	cmp	r3, #0
  402120:	d009      	beq.n	402136 <usart_init_rs232+0x32>
  402122:	68bb      	ldr	r3, [r7, #8]
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	68f8      	ldr	r0, [r7, #12]
  402128:	4619      	mov	r1, r3
  40212a:	687a      	ldr	r2, [r7, #4]
  40212c:	4b15      	ldr	r3, [pc, #84]	; (402184 <usart_init_rs232+0x80>)
  40212e:	4798      	blx	r3
  402130:	4603      	mov	r3, r0
  402132:	2b00      	cmp	r3, #0
  402134:	d001      	beq.n	40213a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402136:	2301      	movs	r3, #1
  402138:	e01b      	b.n	402172 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	685a      	ldr	r2, [r3, #4]
  40213e:	68bb      	ldr	r3, [r7, #8]
  402140:	689b      	ldr	r3, [r3, #8]
  402142:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402144:	68bb      	ldr	r3, [r7, #8]
  402146:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402148:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40214a:	68bb      	ldr	r3, [r7, #8]
  40214c:	68db      	ldr	r3, [r3, #12]
  40214e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402150:	4b0b      	ldr	r3, [pc, #44]	; (402180 <usart_init_rs232+0x7c>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	4313      	orrs	r3, r2
  402156:	4a0a      	ldr	r2, [pc, #40]	; (402180 <usart_init_rs232+0x7c>)
  402158:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40215a:	4b09      	ldr	r3, [pc, #36]	; (402180 <usart_init_rs232+0x7c>)
  40215c:	681b      	ldr	r3, [r3, #0]
  40215e:	4a08      	ldr	r2, [pc, #32]	; (402180 <usart_init_rs232+0x7c>)
  402160:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  402162:	68fb      	ldr	r3, [r7, #12]
  402164:	685a      	ldr	r2, [r3, #4]
  402166:	4b06      	ldr	r3, [pc, #24]	; (402180 <usart_init_rs232+0x7c>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	431a      	orrs	r2, r3
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	605a      	str	r2, [r3, #4]

	return 0;
  402170:	2300      	movs	r3, #0
}
  402172:	4618      	mov	r0, r3
  402174:	3710      	adds	r7, #16
  402176:	46bd      	mov	sp, r7
  402178:	bd80      	pop	{r7, pc}
  40217a:	bf00      	nop
  40217c:	004020b1 	.word	0x004020b1
  402180:	20400998 	.word	0x20400998
  402184:	00402025 	.word	0x00402025

00402188 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402188:	b480      	push	{r7}
  40218a:	b083      	sub	sp, #12
  40218c:	af00      	add	r7, sp, #0
  40218e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	2240      	movs	r2, #64	; 0x40
  402194:	601a      	str	r2, [r3, #0]
}
  402196:	370c      	adds	r7, #12
  402198:	46bd      	mov	sp, r7
  40219a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40219e:	4770      	bx	lr

004021a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4021a0:	b480      	push	{r7}
  4021a2:	b083      	sub	sp, #12
  4021a4:	af00      	add	r7, sp, #0
  4021a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	2288      	movs	r2, #136	; 0x88
  4021ac:	601a      	str	r2, [r3, #0]
}
  4021ae:	370c      	adds	r7, #12
  4021b0:	46bd      	mov	sp, r7
  4021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021b6:	4770      	bx	lr

004021b8 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
  4021c0:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  4021c2:	687b      	ldr	r3, [r7, #4]
  4021c4:	683a      	ldr	r2, [r7, #0]
  4021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
  4021c8:	370c      	adds	r7, #12
  4021ca:	46bd      	mov	sp, r7
  4021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4021d4:	b480      	push	{r7}
  4021d6:	b083      	sub	sp, #12
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4021dc:	687b      	ldr	r3, [r7, #4]
  4021de:	2210      	movs	r2, #16
  4021e0:	601a      	str	r2, [r3, #0]
}
  4021e2:	370c      	adds	r7, #12
  4021e4:	46bd      	mov	sp, r7
  4021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ea:	4770      	bx	lr

004021ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4021ec:	b480      	push	{r7}
  4021ee:	b083      	sub	sp, #12
  4021f0:	af00      	add	r7, sp, #0
  4021f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	2224      	movs	r2, #36	; 0x24
  4021f8:	601a      	str	r2, [r3, #0]
}
  4021fa:	370c      	adds	r7, #12
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402204:	b480      	push	{r7}
  402206:	b083      	sub	sp, #12
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
  40220c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40220e:	687b      	ldr	r3, [r7, #4]
  402210:	683a      	ldr	r2, [r7, #0]
  402212:	609a      	str	r2, [r3, #8]
}
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop

00402220 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402220:	b480      	push	{r7}
  402222:	b083      	sub	sp, #12
  402224:	af00      	add	r7, sp, #0
  402226:	6078      	str	r0, [r7, #4]
  402228:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	683a      	ldr	r2, [r7, #0]
  40222e:	60da      	str	r2, [r3, #12]
}
  402230:	370c      	adds	r7, #12
  402232:	46bd      	mov	sp, r7
  402234:	f85d 7b04 	ldr.w	r7, [sp], #4
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	695b      	ldr	r3, [r3, #20]
}
  402248:	4618      	mov	r0, r3
  40224a:	370c      	adds	r7, #12
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402262:	601a      	str	r2, [r3, #0]
}
  402264:	370c      	adds	r7, #12
  402266:	46bd      	mov	sp, r7
  402268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop

00402270 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40227e:	601a      	str	r2, [r3, #0]
}
  402280:	370c      	adds	r7, #12
  402282:	46bd      	mov	sp, r7
  402284:	f85d 7b04 	ldr.w	r7, [sp], #4
  402288:	4770      	bx	lr
  40228a:	bf00      	nop

0040228c <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  40228c:	b480      	push	{r7}
  40228e:	b083      	sub	sp, #12
  402290:	af00      	add	r7, sp, #0
  402292:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  402294:	687b      	ldr	r3, [r7, #4]
  402296:	695b      	ldr	r3, [r3, #20]
  402298:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40229c:	2b00      	cmp	r3, #0
  40229e:	bf14      	ite	ne
  4022a0:	2301      	movne	r3, #1
  4022a2:	2300      	moveq	r3, #0
  4022a4:	b2db      	uxtb	r3, r3
}
  4022a6:	4618      	mov	r0, r3
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop

004022b4 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	695b      	ldr	r3, [r3, #20]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	bf14      	ite	ne
  4022c8:	2301      	movne	r3, #1
  4022ca:	2300      	moveq	r3, #0
  4022cc:	b2db      	uxtb	r3, r3
}
  4022ce:	4618      	mov	r0, r3
  4022d0:	370c      	adds	r7, #12
  4022d2:	46bd      	mov	sp, r7
  4022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022d8:	4770      	bx	lr
  4022da:	bf00      	nop

004022dc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4022dc:	b480      	push	{r7}
  4022de:	b083      	sub	sp, #12
  4022e0:	af00      	add	r7, sp, #0
  4022e2:	6078      	str	r0, [r7, #4]
  4022e4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4022e6:	687b      	ldr	r3, [r7, #4]
  4022e8:	695b      	ldr	r3, [r3, #20]
  4022ea:	f003 0302 	and.w	r3, r3, #2
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d101      	bne.n	4022f6 <usart_write+0x1a>
		return 1;
  4022f2:	2301      	movs	r3, #1
  4022f4:	e005      	b.n	402302 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4022f6:	683b      	ldr	r3, [r7, #0]
  4022f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	61da      	str	r2, [r3, #28]
	return 0;
  402300:	2300      	movs	r3, #0
}
  402302:	4618      	mov	r0, r3
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop

00402310 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402310:	b480      	push	{r7}
  402312:	b083      	sub	sp, #12
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
  402318:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40231a:	687b      	ldr	r3, [r7, #4]
  40231c:	695b      	ldr	r3, [r3, #20]
  40231e:	f003 0301 	and.w	r3, r3, #1
  402322:	2b00      	cmp	r3, #0
  402324:	d101      	bne.n	40232a <usart_read+0x1a>
		return 1;
  402326:	2301      	movs	r3, #1
  402328:	e006      	b.n	402338 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	699b      	ldr	r3, [r3, #24]
  40232e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402332:	683b      	ldr	r3, [r7, #0]
  402334:	601a      	str	r2, [r3, #0]

	return 0;
  402336:	2300      	movs	r3, #0
}
  402338:	4618      	mov	r0, r3
  40233a:	370c      	adds	r7, #12
  40233c:	46bd      	mov	sp, r7
  40233e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402342:	4770      	bx	lr

00402344 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402344:	b480      	push	{r7}
  402346:	b083      	sub	sp, #12
  402348:	af00      	add	r7, sp, #0
  40234a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40234c:	687b      	ldr	r3, [r7, #4]
  40234e:	4a04      	ldr	r2, [pc, #16]	; (402360 <usart_disable_writeprotect+0x1c>)
  402350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402354:	370c      	adds	r7, #12
  402356:	46bd      	mov	sp, r7
  402358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop
  402360:	55534100 	.word	0x55534100

00402364 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402364:	b580      	push	{r7, lr}
  402366:	b082      	sub	sp, #8
  402368:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40236a:	4b16      	ldr	r3, [pc, #88]	; (4023c4 <Reset_Handler+0x60>)
  40236c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40236e:	4b16      	ldr	r3, [pc, #88]	; (4023c8 <Reset_Handler+0x64>)
  402370:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  402372:	687a      	ldr	r2, [r7, #4]
  402374:	683b      	ldr	r3, [r7, #0]
  402376:	429a      	cmp	r2, r3
  402378:	d00c      	beq.n	402394 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40237a:	e007      	b.n	40238c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40237c:	683b      	ldr	r3, [r7, #0]
  40237e:	1d1a      	adds	r2, r3, #4
  402380:	603a      	str	r2, [r7, #0]
  402382:	687a      	ldr	r2, [r7, #4]
  402384:	1d11      	adds	r1, r2, #4
  402386:	6079      	str	r1, [r7, #4]
  402388:	6812      	ldr	r2, [r2, #0]
  40238a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40238c:	683b      	ldr	r3, [r7, #0]
  40238e:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <Reset_Handler+0x68>)
  402390:	4293      	cmp	r3, r2
  402392:	d3f3      	bcc.n	40237c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402394:	4b0e      	ldr	r3, [pc, #56]	; (4023d0 <Reset_Handler+0x6c>)
  402396:	603b      	str	r3, [r7, #0]
  402398:	e004      	b.n	4023a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40239a:	683b      	ldr	r3, [r7, #0]
  40239c:	1d1a      	adds	r2, r3, #4
  40239e:	603a      	str	r2, [r7, #0]
  4023a0:	2200      	movs	r2, #0
  4023a2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4023a4:	683b      	ldr	r3, [r7, #0]
  4023a6:	4a0b      	ldr	r2, [pc, #44]	; (4023d4 <Reset_Handler+0x70>)
  4023a8:	4293      	cmp	r3, r2
  4023aa:	d3f6      	bcc.n	40239a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4023ac:	4b0a      	ldr	r3, [pc, #40]	; (4023d8 <Reset_Handler+0x74>)
  4023ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4023b0:	4a0a      	ldr	r2, [pc, #40]	; (4023dc <Reset_Handler+0x78>)
  4023b2:	687b      	ldr	r3, [r7, #4]
  4023b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4023b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4023ba:	4b09      	ldr	r3, [pc, #36]	; (4023e0 <Reset_Handler+0x7c>)
  4023bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4023be:	4b09      	ldr	r3, [pc, #36]	; (4023e4 <Reset_Handler+0x80>)
  4023c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4023c2:	e7fe      	b.n	4023c2 <Reset_Handler+0x5e>
  4023c4:	0040d1a4 	.word	0x0040d1a4
  4023c8:	20400000 	.word	0x20400000
  4023cc:	2040090c 	.word	0x2040090c
  4023d0:	2040090c 	.word	0x2040090c
  4023d4:	2040183c 	.word	0x2040183c
  4023d8:	00400000 	.word	0x00400000
  4023dc:	e000ed00 	.word	0xe000ed00
  4023e0:	004074b9 	.word	0x004074b9
  4023e4:	00406499 	.word	0x00406499

004023e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023e8:	b480      	push	{r7}
  4023ea:	af00      	add	r7, sp, #0
        while (1) {
        }
  4023ec:	e7fe      	b.n	4023ec <Dummy_Handler+0x4>
  4023ee:	bf00      	nop

004023f0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4023f0:	b480      	push	{r7}
  4023f2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023f4:	4b51      	ldr	r3, [pc, #324]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f8:	f003 0303 	and.w	r3, r3, #3
  4023fc:	2b01      	cmp	r3, #1
  4023fe:	d014      	beq.n	40242a <SystemCoreClockUpdate+0x3a>
  402400:	2b01      	cmp	r3, #1
  402402:	d302      	bcc.n	40240a <SystemCoreClockUpdate+0x1a>
  402404:	2b02      	cmp	r3, #2
  402406:	d038      	beq.n	40247a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402408:	e07b      	b.n	402502 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240a:	4b4d      	ldr	r3, [pc, #308]	; (402540 <SystemCoreClockUpdate+0x150>)
  40240c:	695b      	ldr	r3, [r3, #20]
  40240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402412:	2b00      	cmp	r3, #0
  402414:	d004      	beq.n	402420 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402416:	4b4b      	ldr	r3, [pc, #300]	; (402544 <SystemCoreClockUpdate+0x154>)
  402418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40241c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40241e:	e070      	b.n	402502 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402420:	4b48      	ldr	r3, [pc, #288]	; (402544 <SystemCoreClockUpdate+0x154>)
  402422:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402426:	601a      	str	r2, [r3, #0]
      }
    break;
  402428:	e06b      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40242a:	4b44      	ldr	r3, [pc, #272]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402436:	4b43      	ldr	r3, [pc, #268]	; (402544 <SystemCoreClockUpdate+0x154>)
  402438:	4a43      	ldr	r2, [pc, #268]	; (402548 <SystemCoreClockUpdate+0x158>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e01c      	b.n	402478 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b41      	ldr	r3, [pc, #260]	; (402544 <SystemCoreClockUpdate+0x154>)
  402440:	4a42      	ldr	r2, [pc, #264]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402444:	4b3d      	ldr	r3, [pc, #244]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d004      	beq.n	40245a <SystemCoreClockUpdate+0x6a>
  402450:	2b20      	cmp	r3, #32
  402452:	d008      	beq.n	402466 <SystemCoreClockUpdate+0x76>
  402454:	2b00      	cmp	r3, #0
  402456:	d00e      	beq.n	402476 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402458:	e00e      	b.n	402478 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40245a:	4b3a      	ldr	r3, [pc, #232]	; (402544 <SystemCoreClockUpdate+0x154>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	005b      	lsls	r3, r3, #1
  402460:	4a38      	ldr	r2, [pc, #224]	; (402544 <SystemCoreClockUpdate+0x154>)
  402462:	6013      	str	r3, [r2, #0]
          break;
  402464:	e008      	b.n	402478 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402466:	4b37      	ldr	r3, [pc, #220]	; (402544 <SystemCoreClockUpdate+0x154>)
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	4613      	mov	r3, r2
  40246c:	005b      	lsls	r3, r3, #1
  40246e:	4413      	add	r3, r2
  402470:	4a34      	ldr	r2, [pc, #208]	; (402544 <SystemCoreClockUpdate+0x154>)
  402472:	6013      	str	r3, [r2, #0]
          break;
  402474:	e000      	b.n	402478 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402476:	bf00      	nop

          default:
          break;
        }
      }
    break;
  402478:	e043      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40247a:	4b30      	ldr	r3, [pc, #192]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40247c:	6a1b      	ldr	r3, [r3, #32]
  40247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402482:	2b00      	cmp	r3, #0
  402484:	d003      	beq.n	40248e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <SystemCoreClockUpdate+0x154>)
  402488:	4a2f      	ldr	r2, [pc, #188]	; (402548 <SystemCoreClockUpdate+0x158>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	e01c      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40248e:	4b2d      	ldr	r3, [pc, #180]	; (402544 <SystemCoreClockUpdate+0x154>)
  402490:	4a2e      	ldr	r2, [pc, #184]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402492:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402494:	4b29      	ldr	r3, [pc, #164]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402496:	6a1b      	ldr	r3, [r3, #32]
  402498:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40249c:	2b10      	cmp	r3, #16
  40249e:	d004      	beq.n	4024aa <SystemCoreClockUpdate+0xba>
  4024a0:	2b20      	cmp	r3, #32
  4024a2:	d008      	beq.n	4024b6 <SystemCoreClockUpdate+0xc6>
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	d00e      	beq.n	4024c6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4024a8:	e00e      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4024aa:	4b26      	ldr	r3, [pc, #152]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ac:	681b      	ldr	r3, [r3, #0]
  4024ae:	005b      	lsls	r3, r3, #1
  4024b0:	4a24      	ldr	r2, [pc, #144]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b2:	6013      	str	r3, [r2, #0]
          break;
  4024b4:	e008      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4024b6:	4b23      	ldr	r3, [pc, #140]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b8:	681a      	ldr	r2, [r3, #0]
  4024ba:	4613      	mov	r3, r2
  4024bc:	005b      	lsls	r3, r3, #1
  4024be:	4413      	add	r3, r2
  4024c0:	4a20      	ldr	r2, [pc, #128]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024c2:	6013      	str	r3, [r2, #0]
          break;
  4024c4:	e000      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4024c6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4024c8:	4b1c      	ldr	r3, [pc, #112]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024cc:	f003 0303 	and.w	r3, r3, #3
  4024d0:	2b02      	cmp	r3, #2
  4024d2:	d115      	bne.n	402500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4024d4:	4b19      	ldr	r3, [pc, #100]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4024d8:	4b1d      	ldr	r3, [pc, #116]	; (402550 <SystemCoreClockUpdate+0x160>)
  4024da:	4013      	ands	r3, r2
  4024dc:	0c1b      	lsrs	r3, r3, #16
  4024de:	3301      	adds	r3, #1
  4024e0:	4a18      	ldr	r2, [pc, #96]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024e2:	6812      	ldr	r2, [r2, #0]
  4024e4:	fb02 f303 	mul.w	r3, r2, r3
  4024e8:	4a16      	ldr	r2, [pc, #88]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ea:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4024ec:	4b13      	ldr	r3, [pc, #76]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4024f0:	b2db      	uxtb	r3, r3
  4024f2:	4a14      	ldr	r2, [pc, #80]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024f4:	6812      	ldr	r2, [r2, #0]
  4024f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4024fa:	4a12      	ldr	r2, [pc, #72]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024fc:	6013      	str	r3, [r2, #0]
      }
    break;
  4024fe:	e7ff      	b.n	402500 <SystemCoreClockUpdate+0x110>
  402500:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402502:	4b0e      	ldr	r3, [pc, #56]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40250a:	2b70      	cmp	r3, #112	; 0x70
  40250c:	d108      	bne.n	402520 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40250e:	4b0d      	ldr	r3, [pc, #52]	; (402544 <SystemCoreClockUpdate+0x154>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	4a10      	ldr	r2, [pc, #64]	; (402554 <SystemCoreClockUpdate+0x164>)
  402514:	fba2 2303 	umull	r2, r3, r2, r3
  402518:	085b      	lsrs	r3, r3, #1
  40251a:	4a0a      	ldr	r2, [pc, #40]	; (402544 <SystemCoreClockUpdate+0x154>)
  40251c:	6013      	str	r3, [r2, #0]
  40251e:	e009      	b.n	402534 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402520:	4b06      	ldr	r3, [pc, #24]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402524:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402528:	091a      	lsrs	r2, r3, #4
  40252a:	4b06      	ldr	r3, [pc, #24]	; (402544 <SystemCoreClockUpdate+0x154>)
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	40d3      	lsrs	r3, r2
  402530:	4a04      	ldr	r2, [pc, #16]	; (402544 <SystemCoreClockUpdate+0x154>)
  402532:	6013      	str	r3, [r2, #0]
  }
}
  402534:	46bd      	mov	sp, r7
  402536:	f85d 7b04 	ldr.w	r7, [sp], #4
  40253a:	4770      	bx	lr
  40253c:	400e0600 	.word	0x400e0600
  402540:	400e1810 	.word	0x400e1810
  402544:	20400004 	.word	0x20400004
  402548:	00b71b00 	.word	0x00b71b00
  40254c:	003d0900 	.word	0x003d0900
  402550:	07ff0000 	.word	0x07ff0000
  402554:	aaaaaaab 	.word	0xaaaaaaab

00402558 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402558:	b480      	push	{r7}
  40255a:	b083      	sub	sp, #12
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402560:	687b      	ldr	r3, [r7, #4]
  402562:	4a18      	ldr	r2, [pc, #96]	; (4025c4 <system_init_flash+0x6c>)
  402564:	4293      	cmp	r3, r2
  402566:	d804      	bhi.n	402572 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <system_init_flash+0x70>)
  40256a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40256e:	601a      	str	r2, [r3, #0]
  402570:	e023      	b.n	4025ba <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402572:	687b      	ldr	r3, [r7, #4]
  402574:	4a15      	ldr	r2, [pc, #84]	; (4025cc <system_init_flash+0x74>)
  402576:	4293      	cmp	r3, r2
  402578:	d803      	bhi.n	402582 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40257a:	4b13      	ldr	r3, [pc, #76]	; (4025c8 <system_init_flash+0x70>)
  40257c:	4a14      	ldr	r2, [pc, #80]	; (4025d0 <system_init_flash+0x78>)
  40257e:	601a      	str	r2, [r3, #0]
  402580:	e01b      	b.n	4025ba <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402582:	687b      	ldr	r3, [r7, #4]
  402584:	4a13      	ldr	r2, [pc, #76]	; (4025d4 <system_init_flash+0x7c>)
  402586:	4293      	cmp	r3, r2
  402588:	d803      	bhi.n	402592 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40258a:	4b0f      	ldr	r3, [pc, #60]	; (4025c8 <system_init_flash+0x70>)
  40258c:	4a12      	ldr	r2, [pc, #72]	; (4025d8 <system_init_flash+0x80>)
  40258e:	601a      	str	r2, [r3, #0]
  402590:	e013      	b.n	4025ba <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402592:	687b      	ldr	r3, [r7, #4]
  402594:	4a11      	ldr	r2, [pc, #68]	; (4025dc <system_init_flash+0x84>)
  402596:	4293      	cmp	r3, r2
  402598:	d803      	bhi.n	4025a2 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40259a:	4b0b      	ldr	r3, [pc, #44]	; (4025c8 <system_init_flash+0x70>)
  40259c:	4a10      	ldr	r2, [pc, #64]	; (4025e0 <system_init_flash+0x88>)
  40259e:	601a      	str	r2, [r3, #0]
  4025a0:	e00b      	b.n	4025ba <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025a2:	687b      	ldr	r3, [r7, #4]
  4025a4:	4a0f      	ldr	r2, [pc, #60]	; (4025e4 <system_init_flash+0x8c>)
  4025a6:	4293      	cmp	r3, r2
  4025a8:	d804      	bhi.n	4025b4 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4025aa:	4b07      	ldr	r3, [pc, #28]	; (4025c8 <system_init_flash+0x70>)
  4025ac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	e002      	b.n	4025ba <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025b4:	4b04      	ldr	r3, [pc, #16]	; (4025c8 <system_init_flash+0x70>)
  4025b6:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <system_init_flash+0x90>)
  4025b8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4025ba:	370c      	adds	r7, #12
  4025bc:	46bd      	mov	sp, r7
  4025be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025c2:	4770      	bx	lr
  4025c4:	01312cff 	.word	0x01312cff
  4025c8:	400e0c00 	.word	0x400e0c00
  4025cc:	026259ff 	.word	0x026259ff
  4025d0:	04000100 	.word	0x04000100
  4025d4:	039386ff 	.word	0x039386ff
  4025d8:	04000200 	.word	0x04000200
  4025dc:	04c4b3ff 	.word	0x04c4b3ff
  4025e0:	04000300 	.word	0x04000300
  4025e4:	05f5e0ff 	.word	0x05f5e0ff
  4025e8:	04000500 	.word	0x04000500

004025ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4025ec:	b480      	push	{r7}
  4025ee:	b085      	sub	sp, #20
  4025f0:	af00      	add	r7, sp, #0
  4025f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025f4:	4b10      	ldr	r3, [pc, #64]	; (402638 <_sbrk+0x4c>)
  4025f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025f8:	4b10      	ldr	r3, [pc, #64]	; (40263c <_sbrk+0x50>)
  4025fa:	681b      	ldr	r3, [r3, #0]
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d102      	bne.n	402606 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402600:	4b0e      	ldr	r3, [pc, #56]	; (40263c <_sbrk+0x50>)
  402602:	4a0f      	ldr	r2, [pc, #60]	; (402640 <_sbrk+0x54>)
  402604:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402606:	4b0d      	ldr	r3, [pc, #52]	; (40263c <_sbrk+0x50>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40260c:	68ba      	ldr	r2, [r7, #8]
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	441a      	add	r2, r3
  402612:	68fb      	ldr	r3, [r7, #12]
  402614:	429a      	cmp	r2, r3
  402616:	dd02      	ble.n	40261e <_sbrk+0x32>
		return (caddr_t) -1;	
  402618:	f04f 33ff 	mov.w	r3, #4294967295
  40261c:	e006      	b.n	40262c <_sbrk+0x40>
	}

	heap += incr;
  40261e:	4b07      	ldr	r3, [pc, #28]	; (40263c <_sbrk+0x50>)
  402620:	681a      	ldr	r2, [r3, #0]
  402622:	687b      	ldr	r3, [r7, #4]
  402624:	4413      	add	r3, r2
  402626:	4a05      	ldr	r2, [pc, #20]	; (40263c <_sbrk+0x50>)
  402628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40262a:	68bb      	ldr	r3, [r7, #8]
}
  40262c:	4618      	mov	r0, r3
  40262e:	3714      	adds	r7, #20
  402630:	46bd      	mov	sp, r7
  402632:	f85d 7b04 	ldr.w	r7, [sp], #4
  402636:	4770      	bx	lr
  402638:	2045fffc 	.word	0x2045fffc
  40263c:	2040099c 	.word	0x2040099c
  402640:	20403a40 	.word	0x20403a40

00402644 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402644:	b480      	push	{r7}
  402646:	b083      	sub	sp, #12
  402648:	af00      	add	r7, sp, #0
  40264a:	6078      	str	r0, [r7, #4]
	return -1;
  40264c:	f04f 33ff 	mov.w	r3, #4294967295
}
  402650:	4618      	mov	r0, r3
  402652:	370c      	adds	r7, #12
  402654:	46bd      	mov	sp, r7
  402656:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265a:	4770      	bx	lr

0040265c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40265c:	b480      	push	{r7}
  40265e:	b083      	sub	sp, #12
  402660:	af00      	add	r7, sp, #0
  402662:	6078      	str	r0, [r7, #4]
  402664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402666:	683b      	ldr	r3, [r7, #0]
  402668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40266c:	605a      	str	r2, [r3, #4]

	return 0;
  40266e:	2300      	movs	r3, #0
}
  402670:	4618      	mov	r0, r3
  402672:	370c      	adds	r7, #12
  402674:	46bd      	mov	sp, r7
  402676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40267a:	4770      	bx	lr

0040267c <_isatty>:

extern int _isatty(int file)
{
  40267c:	b480      	push	{r7}
  40267e:	b083      	sub	sp, #12
  402680:	af00      	add	r7, sp, #0
  402682:	6078      	str	r0, [r7, #4]
	return 1;
  402684:	2301      	movs	r3, #1
}
  402686:	4618      	mov	r0, r3
  402688:	370c      	adds	r7, #12
  40268a:	46bd      	mov	sp, r7
  40268c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402690:	4770      	bx	lr
  402692:	bf00      	nop

00402694 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402694:	b480      	push	{r7}
  402696:	b085      	sub	sp, #20
  402698:	af00      	add	r7, sp, #0
  40269a:	60f8      	str	r0, [r7, #12]
  40269c:	60b9      	str	r1, [r7, #8]
  40269e:	607a      	str	r2, [r7, #4]
	return 0;
  4026a0:	2300      	movs	r3, #0
}
  4026a2:	4618      	mov	r0, r3
  4026a4:	3714      	adds	r7, #20
  4026a6:	46bd      	mov	sp, r7
  4026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop

004026b0 <print_ecdbg>:
static const char HEX_DIGITS[16] = "0123456789ABCDEF";



void print_ecdbg(const char *str)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b082      	sub	sp, #8
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]
  // Redirection to the debug USART.
  func_transmit(str, strlen(str));
  4026b8:	6878      	ldr	r0, [r7, #4]
  4026ba:	4b05      	ldr	r3, [pc, #20]	; (4026d0 <print_ecdbg+0x20>)
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	6878      	ldr	r0, [r7, #4]
  4026c2:	4619      	mov	r1, r3
  4026c4:	4b03      	ldr	r3, [pc, #12]	; (4026d4 <print_ecdbg+0x24>)
  4026c6:	4798      	blx	r3
}
  4026c8:	3708      	adds	r7, #8
  4026ca:	46bd      	mov	sp, r7
  4026cc:	bd80      	pop	{r7, pc}
  4026ce:	bf00      	nop
  4026d0:	00407771 	.word	0x00407771
  4026d4:	00403d45 	.word	0x00403d45

004026d8 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  4026d8:	b580      	push	{r7, lr}
  4026da:	b088      	sub	sp, #32
  4026dc:	af00      	add	r7, sp, #0
  4026de:	4603      	mov	r3, r0
  4026e0:	71fb      	strb	r3, [r7, #7]
  4026e2:	460b      	mov	r3, r1
  4026e4:	71bb      	strb	r3, [r7, #6]
  4026e6:	4613      	mov	r3, r2
  4026e8:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  4026ea:	79bb      	ldrb	r3, [r7, #6]
  4026ec:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  4026ee:	797b      	ldrb	r3, [r7, #5]
  4026f0:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4026f2:	79fb      	ldrb	r3, [r7, #7]
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d102      	bne.n	4026fe <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4026f8:	2360      	movs	r3, #96	; 0x60
  4026fa:	763b      	strb	r3, [r7, #24]
  4026fc:	e004      	b.n	402708 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  4026fe:	79fb      	ldrb	r3, [r7, #7]
  402700:	2b01      	cmp	r3, #1
  402702:	d101      	bne.n	402708 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402704:	2361      	movs	r3, #97	; 0x61
  402706:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402708:	2300      	movs	r3, #0
  40270a:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  40270c:	2300      	movs	r3, #0
  40270e:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402710:	2300      	movs	r3, #0
  402712:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402714:	2300      	movs	r3, #0
  402716:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  402718:	f107 031c 	add.w	r3, r7, #28
  40271c:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  40271e:	2302      	movs	r3, #2
  402720:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402722:	bf00      	nop
  402724:	f107 0308 	add.w	r3, r7, #8
  402728:	4805      	ldr	r0, [pc, #20]	; (402740 <PCA9952_write_reg+0x68>)
  40272a:	4619      	mov	r1, r3
  40272c:	4b05      	ldr	r3, [pc, #20]	; (402744 <PCA9952_write_reg+0x6c>)
  40272e:	4798      	blx	r3
  402730:	4603      	mov	r3, r0
  402732:	2b00      	cmp	r3, #0
  402734:	d1f6      	bne.n	402724 <PCA9952_write_reg+0x4c>

	return;
  402736:	bf00      	nop
}
  402738:	3720      	adds	r7, #32
  40273a:	46bd      	mov	sp, r7
  40273c:	bd80      	pop	{r7, pc}
  40273e:	bf00      	nop
  402740:	40018000 	.word	0x40018000
  402744:	00401e71 	.word	0x00401e71

00402748 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  402748:	b580      	push	{r7, lr}
  40274a:	b088      	sub	sp, #32
  40274c:	af00      	add	r7, sp, #0
  40274e:	4603      	mov	r3, r0
  402750:	460a      	mov	r2, r1
  402752:	71fb      	strb	r3, [r7, #7]
  402754:	4613      	mov	r3, r2
  402756:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  402758:	79fb      	ldrb	r3, [r7, #7]
  40275a:	2b00      	cmp	r3, #0
  40275c:	d102      	bne.n	402764 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  40275e:	2360      	movs	r3, #96	; 0x60
  402760:	763b      	strb	r3, [r7, #24]
  402762:	e004      	b.n	40276e <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  402764:	79fb      	ldrb	r3, [r7, #7]
  402766:	2b01      	cmp	r3, #1
  402768:	d101      	bne.n	40276e <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  40276a:	2361      	movs	r3, #97	; 0x61
  40276c:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  40276e:	2300      	movs	r3, #0
  402770:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402772:	2300      	movs	r3, #0
  402774:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402776:	2300      	movs	r3, #0
  402778:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  40277a:	2300      	movs	r3, #0
  40277c:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  40277e:	1dbb      	adds	r3, r7, #6
  402780:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402782:	2301      	movs	r3, #1
  402784:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402786:	bf00      	nop
  402788:	f107 0308 	add.w	r3, r7, #8
  40278c:	480f      	ldr	r0, [pc, #60]	; (4027cc <PCA9952_read_reg+0x84>)
  40278e:	4619      	mov	r1, r3
  402790:	4b0f      	ldr	r3, [pc, #60]	; (4027d0 <PCA9952_read_reg+0x88>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	2b00      	cmp	r3, #0
  402798:	d1f6      	bne.n	402788 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  40279a:	2014      	movs	r0, #20
  40279c:	4b0d      	ldr	r3, [pc, #52]	; (4027d4 <PCA9952_read_reg+0x8c>)
  40279e:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  4027a0:	2300      	movs	r3, #0
  4027a2:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  4027a4:	f107 031f 	add.w	r3, r7, #31
  4027a8:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  4027aa:	2301      	movs	r3, #1
  4027ac:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4027ae:	bf00      	nop
  4027b0:	f107 0308 	add.w	r3, r7, #8
  4027b4:	4805      	ldr	r0, [pc, #20]	; (4027cc <PCA9952_read_reg+0x84>)
  4027b6:	4619      	mov	r1, r3
  4027b8:	4b07      	ldr	r3, [pc, #28]	; (4027d8 <PCA9952_read_reg+0x90>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	2b00      	cmp	r3, #0
  4027c0:	d1f6      	bne.n	4027b0 <PCA9952_read_reg+0x68>

	return data;
  4027c2:	7ffb      	ldrb	r3, [r7, #31]
}
  4027c4:	4618      	mov	r0, r3
  4027c6:	3720      	adds	r7, #32
  4027c8:	46bd      	mov	sp, r7
  4027ca:	bd80      	pop	{r7, pc}
  4027cc:	40018000 	.word	0x40018000
  4027d0:	00401e71 	.word	0x00401e71
  4027d4:	00403a49 	.word	0x00403a49
  4027d8:	00401d89 	.word	0x00401d89

004027dc <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  4027dc:	b5b0      	push	{r4, r5, r7, lr}
  4027de:	b094      	sub	sp, #80	; 0x50
  4027e0:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  4027e2:	1d3b      	adds	r3, r7, #4
  4027e4:	2240      	movs	r2, #64	; 0x40
  4027e6:	4618      	mov	r0, r3
  4027e8:	2100      	movs	r1, #0
  4027ea:	4b45      	ldr	r3, [pc, #276]	; (402900 <PCA9952_init+0x124>)
  4027ec:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4027ee:	2000      	movs	r0, #0
  4027f0:	2100      	movs	r1, #0
  4027f2:	2200      	movs	r2, #0
  4027f4:	4b43      	ldr	r3, [pc, #268]	; (402904 <PCA9952_init+0x128>)
  4027f6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4027f8:	2000      	movs	r0, #0
  4027fa:	2101      	movs	r1, #1
  4027fc:	2200      	movs	r2, #0
  4027fe:	4b41      	ldr	r3, [pc, #260]	; (402904 <PCA9952_init+0x128>)
  402800:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402802:	2000      	movs	r0, #0
  402804:	2143      	movs	r1, #67	; 0x43
  402806:	22c8      	movs	r2, #200	; 0xc8
  402808:	4b3e      	ldr	r3, [pc, #248]	; (402904 <PCA9952_init+0x128>)
  40280a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40280c:	2000      	movs	r0, #0
  40280e:	2102      	movs	r1, #2
  402810:	2200      	movs	r2, #0
  402812:	4b3c      	ldr	r3, [pc, #240]	; (402904 <PCA9952_init+0x128>)
  402814:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  402816:	2000      	movs	r0, #0
  402818:	2103      	movs	r1, #3
  40281a:	2200      	movs	r2, #0
  40281c:	4b39      	ldr	r3, [pc, #228]	; (402904 <PCA9952_init+0x128>)
  40281e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  402820:	2000      	movs	r0, #0
  402822:	2104      	movs	r1, #4
  402824:	2200      	movs	r2, #0
  402826:	4b37      	ldr	r3, [pc, #220]	; (402904 <PCA9952_init+0x128>)
  402828:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  40282a:	2000      	movs	r0, #0
  40282c:	2105      	movs	r1, #5
  40282e:	2200      	movs	r2, #0
  402830:	4b34      	ldr	r3, [pc, #208]	; (402904 <PCA9952_init+0x128>)
  402832:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402834:	2000      	movs	r0, #0
  402836:	2144      	movs	r1, #68	; 0x44
  402838:	4b33      	ldr	r3, [pc, #204]	; (402908 <PCA9952_init+0x12c>)
  40283a:	4798      	blx	r3
  40283c:	4603      	mov	r3, r0
  40283e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  402842:	2000      	movs	r0, #0
  402844:	2145      	movs	r1, #69	; 0x45
  402846:	4b30      	ldr	r3, [pc, #192]	; (402908 <PCA9952_init+0x12c>)
  402848:	4798      	blx	r3
  40284a:	4603      	mov	r3, r0
  40284c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402850:	2001      	movs	r0, #1
  402852:	2100      	movs	r1, #0
  402854:	2200      	movs	r2, #0
  402856:	4b2b      	ldr	r3, [pc, #172]	; (402904 <PCA9952_init+0x128>)
  402858:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  40285a:	2001      	movs	r0, #1
  40285c:	2101      	movs	r1, #1
  40285e:	2200      	movs	r2, #0
  402860:	4b28      	ldr	r3, [pc, #160]	; (402904 <PCA9952_init+0x128>)
  402862:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402864:	2001      	movs	r0, #1
  402866:	2143      	movs	r1, #67	; 0x43
  402868:	22c8      	movs	r2, #200	; 0xc8
  40286a:	4b26      	ldr	r3, [pc, #152]	; (402904 <PCA9952_init+0x128>)
  40286c:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40286e:	2001      	movs	r0, #1
  402870:	2102      	movs	r1, #2
  402872:	2200      	movs	r2, #0
  402874:	4b23      	ldr	r3, [pc, #140]	; (402904 <PCA9952_init+0x128>)
  402876:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  402878:	2001      	movs	r0, #1
  40287a:	2103      	movs	r1, #3
  40287c:	2200      	movs	r2, #0
  40287e:	4b21      	ldr	r3, [pc, #132]	; (402904 <PCA9952_init+0x128>)
  402880:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  402882:	2001      	movs	r0, #1
  402884:	2104      	movs	r1, #4
  402886:	2200      	movs	r2, #0
  402888:	4b1e      	ldr	r3, [pc, #120]	; (402904 <PCA9952_init+0x128>)
  40288a:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  40288c:	2001      	movs	r0, #1
  40288e:	2105      	movs	r1, #5
  402890:	2200      	movs	r2, #0
  402892:	4b1c      	ldr	r3, [pc, #112]	; (402904 <PCA9952_init+0x128>)
  402894:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402896:	2001      	movs	r0, #1
  402898:	2144      	movs	r1, #68	; 0x44
  40289a:	4b1b      	ldr	r3, [pc, #108]	; (402908 <PCA9952_init+0x12c>)
  40289c:	4798      	blx	r3
  40289e:	4603      	mov	r3, r0
  4028a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  4028a4:	2001      	movs	r0, #1
  4028a6:	2145      	movs	r1, #69	; 0x45
  4028a8:	4b17      	ldr	r3, [pc, #92]	; (402908 <PCA9952_init+0x12c>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  4028b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4028b6:	b2db      	uxtb	r3, r3
  4028b8:	461d      	mov	r5, r3
  4028ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4028be:	b2db      	uxtb	r3, r3
  4028c0:	461c      	mov	r4, r3
  4028c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  4028c6:	b2db      	uxtb	r3, r3
  4028c8:	4619      	mov	r1, r3
  4028ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  4028ce:	b2db      	uxtb	r3, r3
  4028d0:	461a      	mov	r2, r3
  4028d2:	1d3b      	adds	r3, r7, #4
  4028d4:	9100      	str	r1, [sp, #0]
  4028d6:	9201      	str	r2, [sp, #4]
  4028d8:	4618      	mov	r0, r3
  4028da:	490c      	ldr	r1, [pc, #48]	; (40290c <PCA9952_init+0x130>)
  4028dc:	462a      	mov	r2, r5
  4028de:	4623      	mov	r3, r4
  4028e0:	4c0b      	ldr	r4, [pc, #44]	; (402910 <PCA9952_init+0x134>)
  4028e2:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  4028e4:	1d3b      	adds	r3, r7, #4
  4028e6:	4618      	mov	r0, r3
  4028e8:	4b0a      	ldr	r3, [pc, #40]	; (402914 <PCA9952_init+0x138>)
  4028ea:	4798      	blx	r3
  4028ec:	4602      	mov	r2, r0
  4028ee:	1d3b      	adds	r3, r7, #4
  4028f0:	4618      	mov	r0, r3
  4028f2:	4611      	mov	r1, r2
  4028f4:	4b08      	ldr	r3, [pc, #32]	; (402918 <PCA9952_init+0x13c>)
  4028f6:	4798      	blx	r3
	
	
}
  4028f8:	3748      	adds	r7, #72	; 0x48
  4028fa:	46bd      	mov	sp, r7
  4028fc:	bdb0      	pop	{r4, r5, r7, pc}
  4028fe:	bf00      	nop
  402900:	00407509 	.word	0x00407509
  402904:	004026d9 	.word	0x004026d9
  402908:	00402749 	.word	0x00402749
  40290c:	0040c558 	.word	0x0040c558
  402910:	00407725 	.word	0x00407725
  402914:	00407771 	.word	0x00407771
  402918:	00403d45 	.word	0x00403d45

0040291c <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
  40291c:	b580      	push	{r7, lr}
  40291e:	b084      	sub	sp, #16
  402920:	af00      	add	r7, sp, #0
  402922:	4603      	mov	r3, r0
  402924:	71fb      	strb	r3, [r7, #7]
  402926:	460b      	mov	r3, r1
  402928:	71bb      	strb	r3, [r7, #6]
  40292a:	4613      	mov	r3, r2
  40292c:	717b      	strb	r3, [r7, #5]
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
  40292e:	79bb      	ldrb	r3, [r7, #6]
  402930:	089b      	lsrs	r3, r3, #2
  402932:	737b      	strb	r3, [r7, #13]
	regPos = (channel % 4);
  402934:	79bb      	ldrb	r3, [r7, #6]
  402936:	f003 0303 	and.w	r3, r3, #3
  40293a:	733b      	strb	r3, [r7, #12]
	
	switch(regIdx)
  40293c:	7b7b      	ldrb	r3, [r7, #13]
  40293e:	2b03      	cmp	r3, #3
  402940:	d82a      	bhi.n	402998 <PCA9952_channel+0x7c>
  402942:	a201      	add	r2, pc, #4	; (adr r2, 402948 <PCA9952_channel+0x2c>)
  402944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402948:	00402959 	.word	0x00402959
  40294c:	00402969 	.word	0x00402969
  402950:	00402979 	.word	0x00402979
  402954:	00402989 	.word	0x00402989
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
  402958:	79fb      	ldrb	r3, [r7, #7]
  40295a:	4618      	mov	r0, r3
  40295c:	2102      	movs	r1, #2
  40295e:	4b37      	ldr	r3, [pc, #220]	; (402a3c <PCA9952_channel+0x120>)
  402960:	4798      	blx	r3
  402962:	4603      	mov	r3, r0
  402964:	73fb      	strb	r3, [r7, #15]
			break;
  402966:	e017      	b.n	402998 <PCA9952_channel+0x7c>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
  402968:	79fb      	ldrb	r3, [r7, #7]
  40296a:	4618      	mov	r0, r3
  40296c:	2103      	movs	r1, #3
  40296e:	4b33      	ldr	r3, [pc, #204]	; (402a3c <PCA9952_channel+0x120>)
  402970:	4798      	blx	r3
  402972:	4603      	mov	r3, r0
  402974:	73fb      	strb	r3, [r7, #15]
			break;
  402976:	e00f      	b.n	402998 <PCA9952_channel+0x7c>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
  402978:	79fb      	ldrb	r3, [r7, #7]
  40297a:	4618      	mov	r0, r3
  40297c:	2104      	movs	r1, #4
  40297e:	4b2f      	ldr	r3, [pc, #188]	; (402a3c <PCA9952_channel+0x120>)
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	73fb      	strb	r3, [r7, #15]
			break;
  402986:	e007      	b.n	402998 <PCA9952_channel+0x7c>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
  402988:	79fb      	ldrb	r3, [r7, #7]
  40298a:	4618      	mov	r0, r3
  40298c:	2105      	movs	r1, #5
  40298e:	4b2b      	ldr	r3, [pc, #172]	; (402a3c <PCA9952_channel+0x120>)
  402990:	4798      	blx	r3
  402992:	4603      	mov	r3, r0
  402994:	73fb      	strb	r3, [r7, #15]
			break;		
  402996:	bf00      	nop
	}

	maskVal = 0xFF << (regPos * 2);
  402998:	7b3b      	ldrb	r3, [r7, #12]
  40299a:	005b      	lsls	r3, r3, #1
  40299c:	22ff      	movs	r2, #255	; 0xff
  40299e:	fa02 f303 	lsl.w	r3, r2, r3
  4029a2:	72fb      	strb	r3, [r7, #11]
	maskVal = maskVal ^ 0xFF;
  4029a4:	7afb      	ldrb	r3, [r7, #11]
  4029a6:	43db      	mvns	r3, r3
  4029a8:	72fb      	strb	r3, [r7, #11]
	regShadow &= maskVal;
  4029aa:	7bfa      	ldrb	r2, [r7, #15]
  4029ac:	7afb      	ldrb	r3, [r7, #11]
  4029ae:	4013      	ands	r3, r2
  4029b0:	73fb      	strb	r3, [r7, #15]

	if (onOffn == LED_ON)
  4029b2:	797b      	ldrb	r3, [r7, #5]
  4029b4:	2b01      	cmp	r3, #1
  4029b6:	d106      	bne.n	4029c6 <PCA9952_channel+0xaa>
	{
		writeVal = (0x01 << (regPos * 2));
  4029b8:	7b3b      	ldrb	r3, [r7, #12]
  4029ba:	005b      	lsls	r3, r3, #1
  4029bc:	2201      	movs	r2, #1
  4029be:	fa02 f303 	lsl.w	r3, r2, r3
  4029c2:	73bb      	strb	r3, [r7, #14]
  4029c4:	e004      	b.n	4029d0 <PCA9952_channel+0xb4>
	}
	else if (onOffn == LED_OFF)
  4029c6:	797b      	ldrb	r3, [r7, #5]
  4029c8:	2b00      	cmp	r3, #0
  4029ca:	d101      	bne.n	4029d0 <PCA9952_channel+0xb4>
	{
		writeVal = 0;
  4029cc:	2300      	movs	r3, #0
  4029ce:	73bb      	strb	r3, [r7, #14]
	}
	
	regShadow |= writeVal;
  4029d0:	7bfa      	ldrb	r2, [r7, #15]
  4029d2:	7bbb      	ldrb	r3, [r7, #14]
  4029d4:	4313      	orrs	r3, r2
  4029d6:	73fb      	strb	r3, [r7, #15]
	
	switch(regIdx)
  4029d8:	7b7b      	ldrb	r3, [r7, #13]
  4029da:	2b03      	cmp	r3, #3
  4029dc:	d82a      	bhi.n	402a34 <PCA9952_channel+0x118>
  4029de:	a201      	add	r2, pc, #4	; (adr r2, 4029e4 <PCA9952_channel+0xc8>)
  4029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029e4:	004029f5 	.word	0x004029f5
  4029e8:	00402a05 	.word	0x00402a05
  4029ec:	00402a15 	.word	0x00402a15
  4029f0:	00402a25 	.word	0x00402a25
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
  4029f4:	79fa      	ldrb	r2, [r7, #7]
  4029f6:	7bfb      	ldrb	r3, [r7, #15]
  4029f8:	4610      	mov	r0, r2
  4029fa:	2102      	movs	r1, #2
  4029fc:	461a      	mov	r2, r3
  4029fe:	4b10      	ldr	r3, [pc, #64]	; (402a40 <PCA9952_channel+0x124>)
  402a00:	4798      	blx	r3
			break;
  402a02:	e017      	b.n	402a34 <PCA9952_channel+0x118>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
  402a04:	79fa      	ldrb	r2, [r7, #7]
  402a06:	7bfb      	ldrb	r3, [r7, #15]
  402a08:	4610      	mov	r0, r2
  402a0a:	2103      	movs	r1, #3
  402a0c:	461a      	mov	r2, r3
  402a0e:	4b0c      	ldr	r3, [pc, #48]	; (402a40 <PCA9952_channel+0x124>)
  402a10:	4798      	blx	r3
			break;
  402a12:	e00f      	b.n	402a34 <PCA9952_channel+0x118>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
  402a14:	79fa      	ldrb	r2, [r7, #7]
  402a16:	7bfb      	ldrb	r3, [r7, #15]
  402a18:	4610      	mov	r0, r2
  402a1a:	2104      	movs	r1, #4
  402a1c:	461a      	mov	r2, r3
  402a1e:	4b08      	ldr	r3, [pc, #32]	; (402a40 <PCA9952_channel+0x124>)
  402a20:	4798      	blx	r3
			break;
  402a22:	e007      	b.n	402a34 <PCA9952_channel+0x118>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
  402a24:	79fa      	ldrb	r2, [r7, #7]
  402a26:	7bfb      	ldrb	r3, [r7, #15]
  402a28:	4610      	mov	r0, r2
  402a2a:	2105      	movs	r1, #5
  402a2c:	461a      	mov	r2, r3
  402a2e:	4b04      	ldr	r3, [pc, #16]	; (402a40 <PCA9952_channel+0x124>)
  402a30:	4798      	blx	r3
			break;
  402a32:	bf00      	nop
	}

}
  402a34:	3710      	adds	r7, #16
  402a36:	46bd      	mov	sp, r7
  402a38:	bd80      	pop	{r7, pc}
  402a3a:	bf00      	nop
  402a3c:	00402749 	.word	0x00402749
  402a40:	004026d9 	.word	0x004026d9

00402a44 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b082      	sub	sp, #8
  402a48:	af00      	add	r7, sp, #0
  402a4a:	4603      	mov	r3, r0
  402a4c:	460a      	mov	r2, r1
  402a4e:	71fb      	strb	r3, [r7, #7]
  402a50:	4613      	mov	r3, r2
  402a52:	71bb      	strb	r3, [r7, #6]
	switch(shelf)
  402a54:	79fb      	ldrb	r3, [r7, #7]
  402a56:	2b03      	cmp	r3, #3
  402a58:	f200 8088 	bhi.w	402b6c <led_shelf+0x128>
  402a5c:	a201      	add	r2, pc, #4	; (adr r2, 402a64 <led_shelf+0x20>)
  402a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a62:	bf00      	nop
  402a64:	00402a75 	.word	0x00402a75
  402a68:	00402ab3 	.word	0x00402ab3
  402a6c:	00402af1 	.word	0x00402af1
  402a70:	00402b2f 	.word	0x00402b2f
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
  402a74:	79bb      	ldrb	r3, [r7, #6]
  402a76:	2001      	movs	r0, #1
  402a78:	2100      	movs	r1, #0
  402a7a:	461a      	mov	r2, r3
  402a7c:	4b3d      	ldr	r3, [pc, #244]	; (402b74 <led_shelf+0x130>)
  402a7e:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
  402a80:	79bb      	ldrb	r3, [r7, #6]
  402a82:	2001      	movs	r0, #1
  402a84:	2101      	movs	r1, #1
  402a86:	461a      	mov	r2, r3
  402a88:	4b3a      	ldr	r3, [pc, #232]	; (402b74 <led_shelf+0x130>)
  402a8a:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
  402a8c:	79bb      	ldrb	r3, [r7, #6]
  402a8e:	2001      	movs	r0, #1
  402a90:	2102      	movs	r1, #2
  402a92:	461a      	mov	r2, r3
  402a94:	4b37      	ldr	r3, [pc, #220]	; (402b74 <led_shelf+0x130>)
  402a96:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 0, onOffn);
  402a98:	79bb      	ldrb	r3, [r7, #6]
  402a9a:	2000      	movs	r0, #0
  402a9c:	2100      	movs	r1, #0
  402a9e:	461a      	mov	r2, r3
  402aa0:	4b34      	ldr	r3, [pc, #208]	; (402b74 <led_shelf+0x130>)
  402aa2:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 1, onOffn);
  402aa4:	79bb      	ldrb	r3, [r7, #6]
  402aa6:	2000      	movs	r0, #0
  402aa8:	2101      	movs	r1, #1
  402aaa:	461a      	mov	r2, r3
  402aac:	4b31      	ldr	r3, [pc, #196]	; (402b74 <led_shelf+0x130>)
  402aae:	4798      	blx	r3
			break;
  402ab0:	e05c      	b.n	402b6c <led_shelf+0x128>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
  402ab2:	79bb      	ldrb	r3, [r7, #6]
  402ab4:	2001      	movs	r0, #1
  402ab6:	2103      	movs	r1, #3
  402ab8:	461a      	mov	r2, r3
  402aba:	4b2e      	ldr	r3, [pc, #184]	; (402b74 <led_shelf+0x130>)
  402abc:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
  402abe:	79bb      	ldrb	r3, [r7, #6]
  402ac0:	2001      	movs	r0, #1
  402ac2:	2104      	movs	r1, #4
  402ac4:	461a      	mov	r2, r3
  402ac6:	4b2b      	ldr	r3, [pc, #172]	; (402b74 <led_shelf+0x130>)
  402ac8:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
  402aca:	79bb      	ldrb	r3, [r7, #6]
  402acc:	2001      	movs	r0, #1
  402ace:	2105      	movs	r1, #5
  402ad0:	461a      	mov	r2, r3
  402ad2:	4b28      	ldr	r3, [pc, #160]	; (402b74 <led_shelf+0x130>)
  402ad4:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 2, onOffn);
  402ad6:	79bb      	ldrb	r3, [r7, #6]
  402ad8:	2000      	movs	r0, #0
  402ada:	2102      	movs	r1, #2
  402adc:	461a      	mov	r2, r3
  402ade:	4b25      	ldr	r3, [pc, #148]	; (402b74 <led_shelf+0x130>)
  402ae0:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 3, onOffn);
  402ae2:	79bb      	ldrb	r3, [r7, #6]
  402ae4:	2000      	movs	r0, #0
  402ae6:	2103      	movs	r1, #3
  402ae8:	461a      	mov	r2, r3
  402aea:	4b22      	ldr	r3, [pc, #136]	; (402b74 <led_shelf+0x130>)
  402aec:	4798      	blx	r3
			break;
  402aee:	e03d      	b.n	402b6c <led_shelf+0x128>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
  402af0:	79bb      	ldrb	r3, [r7, #6]
  402af2:	2001      	movs	r0, #1
  402af4:	2106      	movs	r1, #6
  402af6:	461a      	mov	r2, r3
  402af8:	4b1e      	ldr	r3, [pc, #120]	; (402b74 <led_shelf+0x130>)
  402afa:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
  402afc:	79bb      	ldrb	r3, [r7, #6]
  402afe:	2001      	movs	r0, #1
  402b00:	2107      	movs	r1, #7
  402b02:	461a      	mov	r2, r3
  402b04:	4b1b      	ldr	r3, [pc, #108]	; (402b74 <led_shelf+0x130>)
  402b06:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
  402b08:	79bb      	ldrb	r3, [r7, #6]
  402b0a:	2001      	movs	r0, #1
  402b0c:	2108      	movs	r1, #8
  402b0e:	461a      	mov	r2, r3
  402b10:	4b18      	ldr	r3, [pc, #96]	; (402b74 <led_shelf+0x130>)
  402b12:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 4, onOffn);
  402b14:	79bb      	ldrb	r3, [r7, #6]
  402b16:	2000      	movs	r0, #0
  402b18:	2104      	movs	r1, #4
  402b1a:	461a      	mov	r2, r3
  402b1c:	4b15      	ldr	r3, [pc, #84]	; (402b74 <led_shelf+0x130>)
  402b1e:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 5, onOffn);
  402b20:	79bb      	ldrb	r3, [r7, #6]
  402b22:	2000      	movs	r0, #0
  402b24:	2105      	movs	r1, #5
  402b26:	461a      	mov	r2, r3
  402b28:	4b12      	ldr	r3, [pc, #72]	; (402b74 <led_shelf+0x130>)
  402b2a:	4798      	blx	r3
			break;
  402b2c:	e01e      	b.n	402b6c <led_shelf+0x128>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
  402b2e:	79bb      	ldrb	r3, [r7, #6]
  402b30:	2001      	movs	r0, #1
  402b32:	2109      	movs	r1, #9
  402b34:	461a      	mov	r2, r3
  402b36:	4b0f      	ldr	r3, [pc, #60]	; (402b74 <led_shelf+0x130>)
  402b38:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
  402b3a:	79bb      	ldrb	r3, [r7, #6]
  402b3c:	2001      	movs	r0, #1
  402b3e:	210a      	movs	r1, #10
  402b40:	461a      	mov	r2, r3
  402b42:	4b0c      	ldr	r3, [pc, #48]	; (402b74 <led_shelf+0x130>)
  402b44:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
  402b46:	79bb      	ldrb	r3, [r7, #6]
  402b48:	2001      	movs	r0, #1
  402b4a:	210b      	movs	r1, #11
  402b4c:	461a      	mov	r2, r3
  402b4e:	4b09      	ldr	r3, [pc, #36]	; (402b74 <led_shelf+0x130>)
  402b50:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 6, onOffn);
  402b52:	79bb      	ldrb	r3, [r7, #6]
  402b54:	2000      	movs	r0, #0
  402b56:	2106      	movs	r1, #6
  402b58:	461a      	mov	r2, r3
  402b5a:	4b06      	ldr	r3, [pc, #24]	; (402b74 <led_shelf+0x130>)
  402b5c:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 7, onOffn);
  402b5e:	79bb      	ldrb	r3, [r7, #6]
  402b60:	2000      	movs	r0, #0
  402b62:	2107      	movs	r1, #7
  402b64:	461a      	mov	r2, r3
  402b66:	4b03      	ldr	r3, [pc, #12]	; (402b74 <led_shelf+0x130>)
  402b68:	4798      	blx	r3
			break;
  402b6a:	bf00      	nop
	}	
	
}
  402b6c:	3708      	adds	r7, #8
  402b6e:	46bd      	mov	sp, r7
  402b70:	bd80      	pop	{r7, pc}
  402b72:	bf00      	nop
  402b74:	0040291d 	.word	0x0040291d

00402b78 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402b78:	b480      	push	{r7}
  402b7a:	b08d      	sub	sp, #52	; 0x34
  402b7c:	af00      	add	r7, sp, #0
  402b7e:	6078      	str	r0, [r7, #4]
  402b80:	460b      	mov	r3, r1
  402b82:	70fb      	strb	r3, [r7, #3]
  402b84:	687b      	ldr	r3, [r7, #4]
  402b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  402b88:	78fb      	ldrb	r3, [r7, #3]
  402b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b90:	627b      	str	r3, [r7, #36]	; 0x24
  402b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b94:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402b96:	6a3b      	ldr	r3, [r7, #32]
  402b98:	095b      	lsrs	r3, r3, #5
  402b9a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b9c:	69fa      	ldr	r2, [r7, #28]
  402b9e:	4b17      	ldr	r3, [pc, #92]	; (402bfc <ioport_set_pin_dir+0x84>)
  402ba0:	4413      	add	r3, r2
  402ba2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402ba4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402baa:	2b01      	cmp	r3, #1
  402bac:	d109      	bne.n	402bc2 <ioport_set_pin_dir+0x4a>
  402bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bb0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bb2:	697b      	ldr	r3, [r7, #20]
  402bb4:	f003 031f 	and.w	r3, r3, #31
  402bb8:	2201      	movs	r2, #1
  402bba:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bbc:	69bb      	ldr	r3, [r7, #24]
  402bbe:	611a      	str	r2, [r3, #16]
  402bc0:	e00c      	b.n	402bdc <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d108      	bne.n	402bdc <ioport_set_pin_dir+0x64>
  402bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bcc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bce:	693b      	ldr	r3, [r7, #16]
  402bd0:	f003 031f 	and.w	r3, r3, #31
  402bd4:	2201      	movs	r2, #1
  402bd6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bd8:	69bb      	ldr	r3, [r7, #24]
  402bda:	615a      	str	r2, [r3, #20]
  402bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bde:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402be0:	68fb      	ldr	r3, [r7, #12]
  402be2:	f003 031f 	and.w	r3, r3, #31
  402be6:	2201      	movs	r2, #1
  402be8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bea:	69bb      	ldr	r3, [r7, #24]
  402bec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402bf0:	3734      	adds	r7, #52	; 0x34
  402bf2:	46bd      	mov	sp, r7
  402bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	00200707 	.word	0x00200707

00402c00 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402c00:	b480      	push	{r7}
  402c02:	b08b      	sub	sp, #44	; 0x2c
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
  402c08:	460b      	mov	r3, r1
  402c0a:	70fb      	strb	r3, [r7, #3]
  402c0c:	687b      	ldr	r3, [r7, #4]
  402c0e:	627b      	str	r3, [r7, #36]	; 0x24
  402c10:	78fb      	ldrb	r3, [r7, #3]
  402c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c18:	61fb      	str	r3, [r7, #28]
  402c1a:	69fb      	ldr	r3, [r7, #28]
  402c1c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c1e:	69bb      	ldr	r3, [r7, #24]
  402c20:	095b      	lsrs	r3, r3, #5
  402c22:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c24:	697a      	ldr	r2, [r7, #20]
  402c26:	4b10      	ldr	r3, [pc, #64]	; (402c68 <ioport_set_pin_level+0x68>)
  402c28:	4413      	add	r3, r2
  402c2a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c2c:	613b      	str	r3, [r7, #16]

	if (level) {
  402c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c32:	2b00      	cmp	r3, #0
  402c34:	d009      	beq.n	402c4a <ioport_set_pin_level+0x4a>
  402c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c38:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c3a:	68fb      	ldr	r3, [r7, #12]
  402c3c:	f003 031f 	and.w	r3, r3, #31
  402c40:	2201      	movs	r2, #1
  402c42:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c44:	693b      	ldr	r3, [r7, #16]
  402c46:	631a      	str	r2, [r3, #48]	; 0x30
  402c48:	e008      	b.n	402c5c <ioport_set_pin_level+0x5c>
  402c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c4c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c4e:	68bb      	ldr	r3, [r7, #8]
  402c50:	f003 031f 	and.w	r3, r3, #31
  402c54:	2201      	movs	r2, #1
  402c56:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c58:	693b      	ldr	r3, [r7, #16]
  402c5a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402c5c:	372c      	adds	r7, #44	; 0x2c
  402c5e:	46bd      	mov	sp, r7
  402c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c64:	4770      	bx	lr
  402c66:	bf00      	nop
  402c68:	00200707 	.word	0x00200707

00402c6c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402c6c:	b480      	push	{r7}
  402c6e:	b089      	sub	sp, #36	; 0x24
  402c70:	af00      	add	r7, sp, #0
  402c72:	6078      	str	r0, [r7, #4]
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	61fb      	str	r3, [r7, #28]
  402c78:	69fb      	ldr	r3, [r7, #28]
  402c7a:	61bb      	str	r3, [r7, #24]
  402c7c:	69bb      	ldr	r3, [r7, #24]
  402c7e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c80:	697b      	ldr	r3, [r7, #20]
  402c82:	095b      	lsrs	r3, r3, #5
  402c84:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c86:	693a      	ldr	r2, [r7, #16]
  402c88:	4b0b      	ldr	r3, [pc, #44]	; (402cb8 <ioport_get_pin_level+0x4c>)
  402c8a:	4413      	add	r3, r2
  402c8c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402c90:	69fb      	ldr	r3, [r7, #28]
  402c92:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c94:	68fb      	ldr	r3, [r7, #12]
  402c96:	f003 031f 	and.w	r3, r3, #31
  402c9a:	2101      	movs	r1, #1
  402c9c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402ca0:	4013      	ands	r3, r2
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	bf14      	ite	ne
  402ca6:	2301      	movne	r3, #1
  402ca8:	2300      	moveq	r3, #0
  402caa:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402cac:	4618      	mov	r0, r3
  402cae:	3724      	adds	r7, #36	; 0x24
  402cb0:	46bd      	mov	sp, r7
  402cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cb6:	4770      	bx	lr
  402cb8:	00200707 	.word	0x00200707

00402cbc <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  402cbc:	b480      	push	{r7}
  402cbe:	b085      	sub	sp, #20
  402cc0:	af00      	add	r7, sp, #0
  402cc2:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  402cc4:	2300      	movs	r3, #0
  402cc6:	60fb      	str	r3, [r7, #12]
  402cc8:	e066      	b.n	402d98 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402cca:	bf00      	nop
  402ccc:	bf00      	nop
  402cce:	bf00      	nop
  402cd0:	bf00      	nop
  402cd2:	bf00      	nop
  402cd4:	bf00      	nop
  402cd6:	bf00      	nop
  402cd8:	bf00      	nop
  402cda:	bf00      	nop
  402cdc:	bf00      	nop
  402cde:	bf00      	nop
  402ce0:	bf00      	nop
  402ce2:	bf00      	nop
  402ce4:	bf00      	nop
  402ce6:	bf00      	nop
  402ce8:	bf00      	nop
  402cea:	bf00      	nop
  402cec:	bf00      	nop
  402cee:	bf00      	nop
  402cf0:	bf00      	nop
  402cf2:	bf00      	nop
  402cf4:	bf00      	nop
  402cf6:	bf00      	nop
  402cf8:	bf00      	nop
  402cfa:	bf00      	nop
  402cfc:	bf00      	nop
  402cfe:	bf00      	nop
  402d00:	bf00      	nop
  402d02:	bf00      	nop
  402d04:	bf00      	nop
  402d06:	bf00      	nop
  402d08:	bf00      	nop
  402d0a:	bf00      	nop
  402d0c:	bf00      	nop
  402d0e:	bf00      	nop
  402d10:	bf00      	nop
  402d12:	bf00      	nop
  402d14:	bf00      	nop
  402d16:	bf00      	nop
  402d18:	bf00      	nop
  402d1a:	bf00      	nop
  402d1c:	bf00      	nop
  402d1e:	bf00      	nop
  402d20:	bf00      	nop
  402d22:	bf00      	nop
  402d24:	bf00      	nop
  402d26:	bf00      	nop
  402d28:	bf00      	nop
  402d2a:	bf00      	nop
  402d2c:	bf00      	nop
  402d2e:	bf00      	nop
  402d30:	bf00      	nop
  402d32:	bf00      	nop
  402d34:	bf00      	nop
  402d36:	bf00      	nop
  402d38:	bf00      	nop
  402d3a:	bf00      	nop
  402d3c:	bf00      	nop
  402d3e:	bf00      	nop
  402d40:	bf00      	nop
  402d42:	bf00      	nop
  402d44:	bf00      	nop
  402d46:	bf00      	nop
  402d48:	bf00      	nop
  402d4a:	bf00      	nop
  402d4c:	bf00      	nop
  402d4e:	bf00      	nop
  402d50:	bf00      	nop
  402d52:	bf00      	nop
  402d54:	bf00      	nop
  402d56:	bf00      	nop
  402d58:	bf00      	nop
  402d5a:	bf00      	nop
  402d5c:	bf00      	nop
  402d5e:	bf00      	nop
  402d60:	bf00      	nop
  402d62:	bf00      	nop
  402d64:	bf00      	nop
  402d66:	bf00      	nop
  402d68:	bf00      	nop
  402d6a:	bf00      	nop
  402d6c:	bf00      	nop
  402d6e:	bf00      	nop
  402d70:	bf00      	nop
  402d72:	bf00      	nop
  402d74:	bf00      	nop
  402d76:	bf00      	nop
  402d78:	bf00      	nop
  402d7a:	bf00      	nop
  402d7c:	bf00      	nop
  402d7e:	bf00      	nop
  402d80:	bf00      	nop
  402d82:	bf00      	nop
  402d84:	bf00      	nop
  402d86:	bf00      	nop
  402d88:	bf00      	nop
  402d8a:	bf00      	nop
  402d8c:	bf00      	nop
  402d8e:	bf00      	nop
  402d90:	bf00      	nop
  402d92:	68fb      	ldr	r3, [r7, #12]
  402d94:	3301      	adds	r3, #1
  402d96:	60fb      	str	r3, [r7, #12]
  402d98:	68fa      	ldr	r2, [r7, #12]
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	429a      	cmp	r2, r3
  402d9e:	d394      	bcc.n	402cca <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  402da0:	3714      	adds	r7, #20
  402da2:	46bd      	mov	sp, r7
  402da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402da8:	4770      	bx	lr
  402daa:	bf00      	nop

00402dac <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  402dac:	b480      	push	{r7}
  402dae:	b083      	sub	sp, #12
  402db0:	af00      	add	r7, sp, #0
  402db2:	4603      	mov	r3, r0
  402db4:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  402db6:	79fb      	ldrb	r3, [r7, #7]
  402db8:	2b04      	cmp	r3, #4
  402dba:	d817      	bhi.n	402dec <io_pin+0x40>
  402dbc:	a201      	add	r2, pc, #4	; (adr r2, 402dc4 <io_pin+0x18>)
  402dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dc2:	bf00      	nop
  402dc4:	00402dd9 	.word	0x00402dd9
  402dc8:	00402ddd 	.word	0x00402ddd
  402dcc:	00402de1 	.word	0x00402de1
  402dd0:	00402de5 	.word	0x00402de5
  402dd4:	00402de9 	.word	0x00402de9
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402dd8:	230f      	movs	r3, #15
  402dda:	e008      	b.n	402dee <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402ddc:	2310      	movs	r3, #16
  402dde:	e006      	b.n	402dee <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402de0:	2311      	movs	r3, #17
  402de2:	e004      	b.n	402dee <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  402de4:	2312      	movs	r3, #18
  402de6:	e002      	b.n	402dee <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402de8:	2313      	movs	r3, #19
  402dea:	e000      	b.n	402dee <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402dec:	2300      	movs	r3, #0
			break;
	}
}
  402dee:	4618      	mov	r0, r3
  402df0:	370c      	adds	r7, #12
  402df2:	46bd      	mov	sp, r7
  402df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402df8:	4770      	bx	lr
  402dfa:	bf00      	nop

00402dfc <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402dfc:	b580      	push	{r7, lr}
  402dfe:	b084      	sub	sp, #16
  402e00:	af00      	add	r7, sp, #0
  402e02:	4603      	mov	r3, r0
  402e04:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e06:	79fb      	ldrb	r3, [r7, #7]
  402e08:	4618      	mov	r0, r3
  402e0a:	4b08      	ldr	r3, [pc, #32]	; (402e2c <drive_DQ_low+0x30>)
  402e0c:	4798      	blx	r3
  402e0e:	4603      	mov	r3, r0
  402e10:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402e12:	7bfb      	ldrb	r3, [r7, #15]
  402e14:	4618      	mov	r0, r3
  402e16:	2101      	movs	r1, #1
  402e18:	4b05      	ldr	r3, [pc, #20]	; (402e30 <drive_DQ_low+0x34>)
  402e1a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402e1c:	7bfb      	ldrb	r3, [r7, #15]
  402e1e:	4618      	mov	r0, r3
  402e20:	2100      	movs	r1, #0
  402e22:	4b04      	ldr	r3, [pc, #16]	; (402e34 <drive_DQ_low+0x38>)
  402e24:	4798      	blx	r3

}
  402e26:	3710      	adds	r7, #16
  402e28:	46bd      	mov	sp, r7
  402e2a:	bd80      	pop	{r7, pc}
  402e2c:	00402dad 	.word	0x00402dad
  402e30:	00402b79 	.word	0x00402b79
  402e34:	00402c01 	.word	0x00402c01

00402e38 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402e38:	b580      	push	{r7, lr}
  402e3a:	b084      	sub	sp, #16
  402e3c:	af00      	add	r7, sp, #0
  402e3e:	4603      	mov	r3, r0
  402e40:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e42:	79fb      	ldrb	r3, [r7, #7]
  402e44:	4618      	mov	r0, r3
  402e46:	4b06      	ldr	r3, [pc, #24]	; (402e60 <release_the_bus+0x28>)
  402e48:	4798      	blx	r3
  402e4a:	4603      	mov	r3, r0
  402e4c:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e4e:	7bfb      	ldrb	r3, [r7, #15]
  402e50:	4618      	mov	r0, r3
  402e52:	2100      	movs	r1, #0
  402e54:	4b03      	ldr	r3, [pc, #12]	; (402e64 <release_the_bus+0x2c>)
  402e56:	4798      	blx	r3
	

}
  402e58:	3710      	adds	r7, #16
  402e5a:	46bd      	mov	sp, r7
  402e5c:	bd80      	pop	{r7, pc}
  402e5e:	bf00      	nop
  402e60:	00402dad 	.word	0x00402dad
  402e64:	00402b79 	.word	0x00402b79

00402e68 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402e68:	b580      	push	{r7, lr}
  402e6a:	b084      	sub	sp, #16
  402e6c:	af00      	add	r7, sp, #0
  402e6e:	4603      	mov	r3, r0
  402e70:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402e72:	79fb      	ldrb	r3, [r7, #7]
  402e74:	4618      	mov	r0, r3
  402e76:	4b06      	ldr	r3, [pc, #24]	; (402e90 <gpio_input+0x28>)
  402e78:	4798      	blx	r3
  402e7a:	4603      	mov	r3, r0
  402e7c:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e7e:	7bfb      	ldrb	r3, [r7, #15]
  402e80:	4618      	mov	r0, r3
  402e82:	2100      	movs	r1, #0
  402e84:	4b03      	ldr	r3, [pc, #12]	; (402e94 <gpio_input+0x2c>)
  402e86:	4798      	blx	r3


}
  402e88:	3710      	adds	r7, #16
  402e8a:	46bd      	mov	sp, r7
  402e8c:	bd80      	pop	{r7, pc}
  402e8e:	bf00      	nop
  402e90:	00402dad 	.word	0x00402dad
  402e94:	00402b79 	.word	0x00402b79

00402e98 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402e98:	b580      	push	{r7, lr}
  402e9a:	b084      	sub	sp, #16
  402e9c:	af00      	add	r7, sp, #0
  402e9e:	4603      	mov	r3, r0
  402ea0:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  402ea2:	79fb      	ldrb	r3, [r7, #7]
  402ea4:	4618      	mov	r0, r3
  402ea6:	4b07      	ldr	r3, [pc, #28]	; (402ec4 <sample_line+0x2c>)
  402ea8:	4798      	blx	r3
  402eaa:	4603      	mov	r3, r0
  402eac:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  402eae:	7bfb      	ldrb	r3, [r7, #15]
  402eb0:	4618      	mov	r0, r3
  402eb2:	4b05      	ldr	r3, [pc, #20]	; (402ec8 <sample_line+0x30>)
  402eb4:	4798      	blx	r3
  402eb6:	4603      	mov	r3, r0
  402eb8:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  402eba:	7bbb      	ldrb	r3, [r7, #14]
}
  402ebc:	4618      	mov	r0, r3
  402ebe:	3710      	adds	r7, #16
  402ec0:	46bd      	mov	sp, r7
  402ec2:	bd80      	pop	{r7, pc}
  402ec4:	00402dad 	.word	0x00402dad
  402ec8:	00402c6d 	.word	0x00402c6d

00402ecc <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  402ecc:	b480      	push	{r7}
  402ece:	b083      	sub	sp, #12
  402ed0:	af00      	add	r7, sp, #0
  402ed2:	6078      	str	r0, [r7, #4]
	// Adjust tick values depending on speed
	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  402ed4:	687b      	ldr	r3, [r7, #4]
  402ed6:	2b00      	cmp	r3, #0
  402ed8:	d01e      	beq.n	402f18 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402eda:	4b21      	ldr	r3, [pc, #132]	; (402f60 <SetSpeed+0x94>)
  402edc:	2200      	movs	r2, #0
  402ede:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402ee0:	4b20      	ldr	r3, [pc, #128]	; (402f64 <SetSpeed+0x98>)
  402ee2:	2220      	movs	r2, #32
  402ee4:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  402ee6:	4b20      	ldr	r3, [pc, #128]	; (402f68 <SetSpeed+0x9c>)
  402ee8:	221e      	movs	r2, #30
  402eea:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402eec:	4b1f      	ldr	r3, [pc, #124]	; (402f6c <SetSpeed+0xa0>)
  402eee:	2202      	movs	r2, #2
  402ef0:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  402ef2:	4b1f      	ldr	r3, [pc, #124]	; (402f70 <SetSpeed+0xa4>)
  402ef4:	2202      	movs	r2, #2
  402ef6:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402ef8:	4b1e      	ldr	r3, [pc, #120]	; (402f74 <SetSpeed+0xa8>)
  402efa:	221b      	movs	r2, #27
  402efc:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402efe:	4b1e      	ldr	r3, [pc, #120]	; (402f78 <SetSpeed+0xac>)
  402f00:	2200      	movs	r2, #0
  402f02:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402f04:	4b1d      	ldr	r3, [pc, #116]	; (402f7c <SetSpeed+0xb0>)
  402f06:	22f0      	movs	r2, #240	; 0xf0
  402f08:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402f0a:	4b1d      	ldr	r3, [pc, #116]	; (402f80 <SetSpeed+0xb4>)
  402f0c:	2223      	movs	r2, #35	; 0x23
  402f0e:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402f10:	4b1c      	ldr	r3, [pc, #112]	; (402f84 <SetSpeed+0xb8>)
  402f12:	22cd      	movs	r2, #205	; 0xcd
  402f14:	601a      	str	r2, [r3, #0]
  402f16:	e01d      	b.n	402f54 <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402f18:	4b11      	ldr	r3, [pc, #68]	; (402f60 <SetSpeed+0x94>)
  402f1a:	2201      	movs	r2, #1
  402f1c:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402f1e:	4b11      	ldr	r3, [pc, #68]	; (402f64 <SetSpeed+0x98>)
  402f20:	2207      	movs	r2, #7
  402f22:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402f24:	4b10      	ldr	r3, [pc, #64]	; (402f68 <SetSpeed+0x9c>)
  402f26:	2207      	movs	r2, #7
  402f28:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402f2a:	4b10      	ldr	r3, [pc, #64]	; (402f6c <SetSpeed+0xa0>)
  402f2c:	2202      	movs	r2, #2
  402f2e:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402f30:	4b0f      	ldr	r3, [pc, #60]	; (402f70 <SetSpeed+0xa4>)
  402f32:	2200      	movs	r2, #0
  402f34:	601a      	str	r2, [r3, #0]
		F = 7;
  402f36:	4b0f      	ldr	r3, [pc, #60]	; (402f74 <SetSpeed+0xa8>)
  402f38:	2207      	movs	r2, #7
  402f3a:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402f3c:	4b0e      	ldr	r3, [pc, #56]	; (402f78 <SetSpeed+0xac>)
  402f3e:	2202      	movs	r2, #2
  402f40:	601a      	str	r2, [r3, #0]
		H = 70;
  402f42:	4b0e      	ldr	r3, [pc, #56]	; (402f7c <SetSpeed+0xb0>)
  402f44:	2246      	movs	r2, #70	; 0x46
  402f46:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402f48:	4b0d      	ldr	r3, [pc, #52]	; (402f80 <SetSpeed+0xb4>)
  402f4a:	2208      	movs	r2, #8
  402f4c:	601a      	str	r2, [r3, #0]
		J = 40;
  402f4e:	4b0d      	ldr	r3, [pc, #52]	; (402f84 <SetSpeed+0xb8>)
  402f50:	2228      	movs	r2, #40	; 0x28
  402f52:	601a      	str	r2, [r3, #0]
	}
}
  402f54:	370c      	adds	r7, #12
  402f56:	46bd      	mov	sp, r7
  402f58:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f5c:	4770      	bx	lr
  402f5e:	bf00      	nop
  402f60:	20400aa0 	.word	0x20400aa0
  402f64:	20400aa4 	.word	0x20400aa4
  402f68:	20400aac 	.word	0x20400aac
  402f6c:	20400a9c 	.word	0x20400a9c
  402f70:	20400ab8 	.word	0x20400ab8
  402f74:	20400ac0 	.word	0x20400ac0
  402f78:	20400ab0 	.word	0x20400ab0
  402f7c:	20400ab4 	.word	0x20400ab4
  402f80:	20400abc 	.word	0x20400abc
  402f84:	20400aa8 	.word	0x20400aa8

00402f88 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402f88:	b580      	push	{r7, lr}
  402f8a:	b084      	sub	sp, #16
  402f8c:	af00      	add	r7, sp, #0
  402f8e:	4603      	mov	r3, r0
  402f90:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402f92:	4b17      	ldr	r3, [pc, #92]	; (402ff0 <OWTouchReset+0x68>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	4618      	mov	r0, r3
  402f98:	4b16      	ldr	r3, [pc, #88]	; (402ff4 <OWTouchReset+0x6c>)
  402f9a:	4798      	blx	r3
	drive_DQ_low(idx);
  402f9c:	79fb      	ldrb	r3, [r7, #7]
  402f9e:	4618      	mov	r0, r3
  402fa0:	4b15      	ldr	r3, [pc, #84]	; (402ff8 <OWTouchReset+0x70>)
  402fa2:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  402fa4:	4b15      	ldr	r3, [pc, #84]	; (402ffc <OWTouchReset+0x74>)
  402fa6:	681b      	ldr	r3, [r3, #0]
  402fa8:	4618      	mov	r0, r3
  402faa:	4b12      	ldr	r3, [pc, #72]	; (402ff4 <OWTouchReset+0x6c>)
  402fac:	4798      	blx	r3
	release_the_bus(idx);
  402fae:	79fb      	ldrb	r3, [r7, #7]
  402fb0:	4618      	mov	r0, r3
  402fb2:	4b13      	ldr	r3, [pc, #76]	; (403000 <OWTouchReset+0x78>)
  402fb4:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  402fb6:	79fb      	ldrb	r3, [r7, #7]
  402fb8:	4618      	mov	r0, r3
  402fba:	4b12      	ldr	r3, [pc, #72]	; (403004 <OWTouchReset+0x7c>)
  402fbc:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  402fbe:	4b12      	ldr	r3, [pc, #72]	; (403008 <OWTouchReset+0x80>)
  402fc0:	681b      	ldr	r3, [r3, #0]
  402fc2:	4618      	mov	r0, r3
  402fc4:	4b0b      	ldr	r3, [pc, #44]	; (402ff4 <OWTouchReset+0x6c>)
  402fc6:	4798      	blx	r3
	result = sample_line(idx);
  402fc8:	79fb      	ldrb	r3, [r7, #7]
  402fca:	4618      	mov	r0, r3
  402fcc:	4b0f      	ldr	r3, [pc, #60]	; (40300c <OWTouchReset+0x84>)
  402fce:	4798      	blx	r3
  402fd0:	4603      	mov	r3, r0
  402fd2:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  402fd4:	79fb      	ldrb	r3, [r7, #7]
  402fd6:	4618      	mov	r0, r3
  402fd8:	4b0a      	ldr	r3, [pc, #40]	; (403004 <OWTouchReset+0x7c>)
  402fda:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402fdc:	4b0c      	ldr	r3, [pc, #48]	; (403010 <OWTouchReset+0x88>)
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	4618      	mov	r0, r3
  402fe2:	4b04      	ldr	r3, [pc, #16]	; (402ff4 <OWTouchReset+0x6c>)
  402fe4:	4798      	blx	r3
	return result; // Return sample presence pulse result
  402fe6:	68fb      	ldr	r3, [r7, #12]
}
  402fe8:	4618      	mov	r0, r3
  402fea:	3710      	adds	r7, #16
  402fec:	46bd      	mov	sp, r7
  402fee:	bd80      	pop	{r7, pc}
  402ff0:	20400aa0 	.word	0x20400aa0
  402ff4:	00402cbd 	.word	0x00402cbd
  402ff8:	00402dfd 	.word	0x00402dfd
  402ffc:	20400ab4 	.word	0x20400ab4
  403000:	00402e39 	.word	0x00402e39
  403004:	00402e69 	.word	0x00402e69
  403008:	20400abc 	.word	0x20400abc
  40300c:	00402e99 	.word	0x00402e99
  403010:	20400aa8 	.word	0x20400aa8

00403014 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  403014:	b580      	push	{r7, lr}
  403016:	b084      	sub	sp, #16
  403018:	af00      	add	r7, sp, #0
  40301a:	4603      	mov	r3, r0
  40301c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  40301e:	79fb      	ldrb	r3, [r7, #7]
  403020:	4618      	mov	r0, r3
  403022:	4b0d      	ldr	r3, [pc, #52]	; (403058 <drive_DQ_low_and_release_the_bus+0x44>)
  403024:	4798      	blx	r3
  403026:	4603      	mov	r3, r0
  403028:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  40302a:	7bfb      	ldrb	r3, [r7, #15]
  40302c:	4618      	mov	r0, r3
  40302e:	2101      	movs	r1, #1
  403030:	4b0a      	ldr	r3, [pc, #40]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403032:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  403034:	7bfb      	ldrb	r3, [r7, #15]
  403036:	4618      	mov	r0, r3
  403038:	2100      	movs	r1, #0
  40303a:	4b09      	ldr	r3, [pc, #36]	; (403060 <drive_DQ_low_and_release_the_bus+0x4c>)
  40303c:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  40303e:	4b09      	ldr	r3, [pc, #36]	; (403064 <drive_DQ_low_and_release_the_bus+0x50>)
  403040:	681b      	ldr	r3, [r3, #0]
  403042:	4618      	mov	r0, r3
  403044:	4b08      	ldr	r3, [pc, #32]	; (403068 <drive_DQ_low_and_release_the_bus+0x54>)
  403046:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  403048:	7bfb      	ldrb	r3, [r7, #15]
  40304a:	4618      	mov	r0, r3
  40304c:	2100      	movs	r1, #0
  40304e:	4b03      	ldr	r3, [pc, #12]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403050:	4798      	blx	r3
	
}
  403052:	3710      	adds	r7, #16
  403054:	46bd      	mov	sp, r7
  403056:	bd80      	pop	{r7, pc}
  403058:	00402dad 	.word	0x00402dad
  40305c:	00402b79 	.word	0x00402b79
  403060:	00402c01 	.word	0x00402c01
  403064:	20400aa0 	.word	0x20400aa0
  403068:	00402cbd 	.word	0x00402cbd

0040306c <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  40306c:	b580      	push	{r7, lr}
  40306e:	b082      	sub	sp, #8
  403070:	af00      	add	r7, sp, #0
  403072:	4603      	mov	r3, r0
  403074:	6039      	str	r1, [r7, #0]
  403076:	71fb      	strb	r3, [r7, #7]
	if (bit)
  403078:	683b      	ldr	r3, [r7, #0]
  40307a:	2b00      	cmp	r3, #0
  40307c:	d009      	beq.n	403092 <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  40307e:	79fb      	ldrb	r3, [r7, #7]
  403080:	4618      	mov	r0, r3
  403082:	4b0e      	ldr	r3, [pc, #56]	; (4030bc <OWWriteBit+0x50>)
  403084:	4798      	blx	r3
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  403086:	4b0e      	ldr	r3, [pc, #56]	; (4030c0 <OWWriteBit+0x54>)
  403088:	681b      	ldr	r3, [r3, #0]
  40308a:	4618      	mov	r0, r3
  40308c:	4b0d      	ldr	r3, [pc, #52]	; (4030c4 <OWWriteBit+0x58>)
  40308e:	4798      	blx	r3
  403090:	e011      	b.n	4030b6 <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  403092:	79fb      	ldrb	r3, [r7, #7]
  403094:	4618      	mov	r0, r3
  403096:	4b0c      	ldr	r3, [pc, #48]	; (4030c8 <OWWriteBit+0x5c>)
  403098:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  40309a:	4b0c      	ldr	r3, [pc, #48]	; (4030cc <OWWriteBit+0x60>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	4618      	mov	r0, r3
  4030a0:	4b08      	ldr	r3, [pc, #32]	; (4030c4 <OWWriteBit+0x58>)
  4030a2:	4798      	blx	r3
		release_the_bus(idx);
  4030a4:	79fb      	ldrb	r3, [r7, #7]
  4030a6:	4618      	mov	r0, r3
  4030a8:	4b09      	ldr	r3, [pc, #36]	; (4030d0 <OWWriteBit+0x64>)
  4030aa:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4030ac:	4b09      	ldr	r3, [pc, #36]	; (4030d4 <OWWriteBit+0x68>)
  4030ae:	681b      	ldr	r3, [r3, #0]
  4030b0:	4618      	mov	r0, r3
  4030b2:	4b04      	ldr	r3, [pc, #16]	; (4030c4 <OWWriteBit+0x58>)
  4030b4:	4798      	blx	r3
	}
}
  4030b6:	3708      	adds	r7, #8
  4030b8:	46bd      	mov	sp, r7
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	00403015 	.word	0x00403015
  4030c0:	20400aa4 	.word	0x20400aa4
  4030c4:	00402cbd 	.word	0x00402cbd
  4030c8:	00402dfd 	.word	0x00402dfd
  4030cc:	20400aac 	.word	0x20400aac
  4030d0:	00402e39 	.word	0x00402e39
  4030d4:	20400a9c 	.word	0x20400a9c

004030d8 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4030d8:	b580      	push	{r7, lr}
  4030da:	b084      	sub	sp, #16
  4030dc:	af00      	add	r7, sp, #0
  4030de:	4603      	mov	r3, r0
  4030e0:	71fb      	strb	r3, [r7, #7]
	int result;

	drive_DQ_low_and_release_the_bus(idx);
  4030e2:	79fb      	ldrb	r3, [r7, #7]
  4030e4:	4618      	mov	r0, r3
  4030e6:	4b0b      	ldr	r3, [pc, #44]	; (403114 <OWReadBit+0x3c>)
  4030e8:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4030ea:	4b0b      	ldr	r3, [pc, #44]	; (403118 <OWReadBit+0x40>)
  4030ec:	681b      	ldr	r3, [r3, #0]
  4030ee:	4618      	mov	r0, r3
  4030f0:	4b0a      	ldr	r3, [pc, #40]	; (40311c <OWReadBit+0x44>)
  4030f2:	4798      	blx	r3
	result = sample_line(idx);
  4030f4:	79fb      	ldrb	r3, [r7, #7]
  4030f6:	4618      	mov	r0, r3
  4030f8:	4b09      	ldr	r3, [pc, #36]	; (403120 <OWReadBit+0x48>)
  4030fa:	4798      	blx	r3
  4030fc:	4603      	mov	r3, r0
  4030fe:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  403100:	4b08      	ldr	r3, [pc, #32]	; (403124 <OWReadBit+0x4c>)
  403102:	681b      	ldr	r3, [r3, #0]
  403104:	4618      	mov	r0, r3
  403106:	4b05      	ldr	r3, [pc, #20]	; (40311c <OWReadBit+0x44>)
  403108:	4798      	blx	r3

	return result;
  40310a:	68fb      	ldr	r3, [r7, #12]
}
  40310c:	4618      	mov	r0, r3
  40310e:	3710      	adds	r7, #16
  403110:	46bd      	mov	sp, r7
  403112:	bd80      	pop	{r7, pc}
  403114:	00403015 	.word	0x00403015
  403118:	20400ab8 	.word	0x20400ab8
  40311c:	00402cbd 	.word	0x00402cbd
  403120:	00402e99 	.word	0x00402e99
  403124:	20400ac0 	.word	0x20400ac0

00403128 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  403128:	b580      	push	{r7, lr}
  40312a:	b084      	sub	sp, #16
  40312c:	af00      	add	r7, sp, #0
  40312e:	4603      	mov	r3, r0
  403130:	6039      	str	r1, [r7, #0]
  403132:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403134:	2300      	movs	r3, #0
  403136:	60fb      	str	r3, [r7, #12]
  403138:	e00d      	b.n	403156 <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  40313a:	683b      	ldr	r3, [r7, #0]
  40313c:	f003 0301 	and.w	r3, r3, #1
  403140:	79fa      	ldrb	r2, [r7, #7]
  403142:	4610      	mov	r0, r2
  403144:	4619      	mov	r1, r3
  403146:	4b07      	ldr	r3, [pc, #28]	; (403164 <OWWriteByte+0x3c>)
  403148:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  40314a:	683b      	ldr	r3, [r7, #0]
  40314c:	105b      	asrs	r3, r3, #1
  40314e:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403150:	68fb      	ldr	r3, [r7, #12]
  403152:	3301      	adds	r3, #1
  403154:	60fb      	str	r3, [r7, #12]
  403156:	68fb      	ldr	r3, [r7, #12]
  403158:	2b07      	cmp	r3, #7
  40315a:	ddee      	ble.n	40313a <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  40315c:	3710      	adds	r7, #16
  40315e:	46bd      	mov	sp, r7
  403160:	bd80      	pop	{r7, pc}
  403162:	bf00      	nop
  403164:	0040306d 	.word	0x0040306d

00403168 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  403168:	b580      	push	{r7, lr}
  40316a:	b084      	sub	sp, #16
  40316c:	af00      	add	r7, sp, #0
  40316e:	4603      	mov	r3, r0
  403170:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  403172:	2300      	movs	r3, #0
  403174:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  403176:	2300      	movs	r3, #0
  403178:	60fb      	str	r3, [r7, #12]
  40317a:	e010      	b.n	40319e <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  40317c:	68bb      	ldr	r3, [r7, #8]
  40317e:	105b      	asrs	r3, r3, #1
  403180:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  403182:	79fb      	ldrb	r3, [r7, #7]
  403184:	4618      	mov	r0, r3
  403186:	4b0a      	ldr	r3, [pc, #40]	; (4031b0 <OWReadByte+0x48>)
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
  40318c:	2b00      	cmp	r3, #0
  40318e:	d003      	beq.n	403198 <OWReadByte+0x30>
		result |= 0x80;
  403190:	68bb      	ldr	r3, [r7, #8]
  403192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403196:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  403198:	68fb      	ldr	r3, [r7, #12]
  40319a:	3301      	adds	r3, #1
  40319c:	60fb      	str	r3, [r7, #12]
  40319e:	68fb      	ldr	r3, [r7, #12]
  4031a0:	2b07      	cmp	r3, #7
  4031a2:	ddeb      	ble.n	40317c <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4031a4:	68bb      	ldr	r3, [r7, #8]
}
  4031a6:	4618      	mov	r0, r3
  4031a8:	3710      	adds	r7, #16
  4031aa:	46bd      	mov	sp, r7
  4031ac:	bd80      	pop	{r7, pc}
  4031ae:	bf00      	nop
  4031b0:	004030d9 	.word	0x004030d9

004031b4 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4031b4:	b480      	push	{r7}
  4031b6:	b085      	sub	sp, #20
  4031b8:	af00      	add	r7, sp, #0
  4031ba:	4603      	mov	r3, r0
  4031bc:	460a      	mov	r2, r1
  4031be:	71fb      	strb	r3, [r7, #7]
  4031c0:	4613      	mov	r3, r2
  4031c2:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4031c4:	79fa      	ldrb	r2, [r7, #7]
  4031c6:	79bb      	ldrb	r3, [r7, #6]
  4031c8:	4053      	eors	r3, r2
  4031ca:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4031cc:	2300      	movs	r3, #0
  4031ce:	60fb      	str	r3, [r7, #12]
  4031d0:	e012      	b.n	4031f8 <crc8_add+0x44>
   {
		if(acc & 1) 
  4031d2:	79fb      	ldrb	r3, [r7, #7]
  4031d4:	f003 0301 	and.w	r3, r3, #1
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d007      	beq.n	4031ec <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4031dc:	79fb      	ldrb	r3, [r7, #7]
  4031de:	085b      	lsrs	r3, r3, #1
  4031e0:	b2da      	uxtb	r2, r3
  4031e2:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4031e6:	4053      	eors	r3, r2
  4031e8:	71fb      	strb	r3, [r7, #7]
  4031ea:	e002      	b.n	4031f2 <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4031ec:	79fb      	ldrb	r3, [r7, #7]
  4031ee:	085b      	lsrs	r3, r3, #1
  4031f0:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4031f2:	68fb      	ldr	r3, [r7, #12]
  4031f4:	3301      	adds	r3, #1
  4031f6:	60fb      	str	r3, [r7, #12]
  4031f8:	68fb      	ldr	r3, [r7, #12]
  4031fa:	2b07      	cmp	r3, #7
  4031fc:	dde9      	ble.n	4031d2 <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4031fe:	79fb      	ldrb	r3, [r7, #7]
}
  403200:	4618      	mov	r0, r3
  403202:	3714      	adds	r7, #20
  403204:	46bd      	mov	sp, r7
  403206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320a:	4770      	bx	lr

0040320c <start_timer>:
		timers[i].overflow = 0;
	}
}

void start_timer(unsigned short timerID, unsigned long duration)
{
  40320c:	b480      	push	{r7}
  40320e:	b083      	sub	sp, #12
  403210:	af00      	add	r7, sp, #0
  403212:	4603      	mov	r3, r0
  403214:	6039      	str	r1, [r7, #0]
  403216:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = ((timerTickCount+duration) & MAX_TICK);
  403218:	88fb      	ldrh	r3, [r7, #6]
  40321a:	4a17      	ldr	r2, [pc, #92]	; (403278 <start_timer+0x6c>)
  40321c:	6811      	ldr	r1, [r2, #0]
  40321e:	683a      	ldr	r2, [r7, #0]
  403220:	440a      	add	r2, r1
  403222:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  403226:	4915      	ldr	r1, [pc, #84]	; (40327c <start_timer+0x70>)
  403228:	00db      	lsls	r3, r3, #3
  40322a:	440b      	add	r3, r1
  40322c:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 1;
  40322e:	88fb      	ldrh	r3, [r7, #6]
  403230:	4a12      	ldr	r2, [pc, #72]	; (40327c <start_timer+0x70>)
  403232:	2101      	movs	r1, #1
  403234:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403238:	88fb      	ldrh	r3, [r7, #6]
  40323a:	4a10      	ldr	r2, [pc, #64]	; (40327c <start_timer+0x70>)
  40323c:	00db      	lsls	r3, r3, #3
  40323e:	4413      	add	r3, r2
  403240:	2200      	movs	r2, #0
  403242:	709a      	strb	r2, [r3, #2]
	if (duration <= (MAX_TICK - timerTickCount))
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <start_timer+0x6c>)
  403246:	681a      	ldr	r2, [r3, #0]
  403248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  40324c:	1a9b      	subs	r3, r3, r2
  40324e:	683a      	ldr	r2, [r7, #0]
  403250:	4293      	cmp	r3, r2
  403252:	d306      	bcc.n	403262 <start_timer+0x56>
	{
		timers[timerID].overflow = 0;
  403254:	88fb      	ldrh	r3, [r7, #6]
  403256:	4a09      	ldr	r2, [pc, #36]	; (40327c <start_timer+0x70>)
  403258:	00db      	lsls	r3, r3, #3
  40325a:	4413      	add	r3, r2
  40325c:	2200      	movs	r2, #0
  40325e:	70da      	strb	r2, [r3, #3]
  403260:	e005      	b.n	40326e <start_timer+0x62>
	}
	else
	{
		timers[timerID].overflow = 1;
  403262:	88fb      	ldrh	r3, [r7, #6]
  403264:	4a05      	ldr	r2, [pc, #20]	; (40327c <start_timer+0x70>)
  403266:	00db      	lsls	r3, r3, #3
  403268:	4413      	add	r3, r2
  40326a:	2201      	movs	r2, #1
  40326c:	70da      	strb	r2, [r3, #3]
	}
}
  40326e:	370c      	adds	r7, #12
  403270:	46bd      	mov	sp, r7
  403272:	f85d 7b04 	ldr.w	r7, [sp], #4
  403276:	4770      	bx	lr
  403278:	204009a0 	.word	0x204009a0
  40327c:	20400ac4 	.word	0x20400ac4

00403280 <process_timers>:

void process_timers(void)
{
  403280:	b480      	push	{r7}
  403282:	b083      	sub	sp, #12
  403284:	af00      	add	r7, sp, #0
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  403286:	2300      	movs	r3, #0
  403288:	80fb      	strh	r3, [r7, #6]
  40328a:	e02d      	b.n	4032e8 <process_timers+0x68>
	{
		if (timers[i].active)
  40328c:	88fb      	ldrh	r3, [r7, #6]
  40328e:	4a1e      	ldr	r2, [pc, #120]	; (403308 <process_timers+0x88>)
  403290:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  403294:	2b00      	cmp	r3, #0
  403296:	d024      	beq.n	4032e2 <process_timers+0x62>
		{
			if (rollover) 
  403298:	4b1c      	ldr	r3, [pc, #112]	; (40330c <process_timers+0x8c>)
  40329a:	781b      	ldrb	r3, [r3, #0]
  40329c:	2b00      	cmp	r3, #0
  40329e:	d005      	beq.n	4032ac <process_timers+0x2c>
			{
				timers[i].overflow = 0;
  4032a0:	88fb      	ldrh	r3, [r7, #6]
  4032a2:	4a19      	ldr	r2, [pc, #100]	; (403308 <process_timers+0x88>)
  4032a4:	00db      	lsls	r3, r3, #3
  4032a6:	4413      	add	r3, r2
  4032a8:	2200      	movs	r2, #0
  4032aa:	70da      	strb	r2, [r3, #3]
			}
			
			if (!timers[i].overflow) 	/* don't check for timer count done if the timer count overflowed when it was set  */
  4032ac:	88fb      	ldrh	r3, [r7, #6]
  4032ae:	4a16      	ldr	r2, [pc, #88]	; (403308 <process_timers+0x88>)
  4032b0:	00db      	lsls	r3, r3, #3
  4032b2:	4413      	add	r3, r2
  4032b4:	78db      	ldrb	r3, [r3, #3]
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d113      	bne.n	4032e2 <process_timers+0x62>
			{							/* but timerTickCount hasn't rolled over yet */
				if (timerTickCount > timers[i].count)
  4032ba:	88fb      	ldrh	r3, [r7, #6]
  4032bc:	4a12      	ldr	r2, [pc, #72]	; (403308 <process_timers+0x88>)
  4032be:	00db      	lsls	r3, r3, #3
  4032c0:	4413      	add	r3, r2
  4032c2:	685a      	ldr	r2, [r3, #4]
  4032c4:	4b12      	ldr	r3, [pc, #72]	; (403310 <process_timers+0x90>)
  4032c6:	681b      	ldr	r3, [r3, #0]
  4032c8:	429a      	cmp	r2, r3
  4032ca:	d20a      	bcs.n	4032e2 <process_timers+0x62>
				{
					timers[i].active = 0;
  4032cc:	88fb      	ldrh	r3, [r7, #6]
  4032ce:	4a0e      	ldr	r2, [pc, #56]	; (403308 <process_timers+0x88>)
  4032d0:	2100      	movs	r1, #0
  4032d2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
						timers[i].done = 1;
  4032d6:	88fb      	ldrh	r3, [r7, #6]
  4032d8:	4a0b      	ldr	r2, [pc, #44]	; (403308 <process_timers+0x88>)
  4032da:	00db      	lsls	r3, r3, #3
  4032dc:	4413      	add	r3, r2
  4032de:	2201      	movs	r2, #1
  4032e0:	709a      	strb	r2, [r3, #2]

void process_timers(void)
{
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  4032e2:	88fb      	ldrh	r3, [r7, #6]
  4032e4:	3301      	adds	r3, #1
  4032e6:	80fb      	strh	r3, [r7, #6]
  4032e8:	88fb      	ldrh	r3, [r7, #6]
  4032ea:	2b05      	cmp	r3, #5
  4032ec:	d9ce      	bls.n	40328c <process_timers+0xc>
				}
			}	
		}
	}
	
	if (rollover)
  4032ee:	4b07      	ldr	r3, [pc, #28]	; (40330c <process_timers+0x8c>)
  4032f0:	781b      	ldrb	r3, [r3, #0]
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d002      	beq.n	4032fc <process_timers+0x7c>
	{
		rollover = 0; /* set in the interrupt, cleared here after we use it */
  4032f6:	4b05      	ldr	r3, [pc, #20]	; (40330c <process_timers+0x8c>)
  4032f8:	2200      	movs	r2, #0
  4032fa:	701a      	strb	r2, [r3, #0]
	}
}
  4032fc:	370c      	adds	r7, #12
  4032fe:	46bd      	mov	sp, r7
  403300:	f85d 7b04 	ldr.w	r7, [sp], #4
  403304:	4770      	bx	lr
  403306:	bf00      	nop
  403308:	20400ac4 	.word	0x20400ac4
  40330c:	204009a4 	.word	0x204009a4
  403310:	204009a0 	.word	0x204009a0

00403314 <timer_done>:
{
	return (timers[timerID].active);
}

unsigned short timer_done(unsigned short timerID)
{
  403314:	b480      	push	{r7}
  403316:	b083      	sub	sp, #12
  403318:	af00      	add	r7, sp, #0
  40331a:	4603      	mov	r3, r0
  40331c:	80fb      	strh	r3, [r7, #6]
	if (timers[timerID].done)
  40331e:	88fb      	ldrh	r3, [r7, #6]
  403320:	4a0a      	ldr	r2, [pc, #40]	; (40334c <timer_done+0x38>)
  403322:	00db      	lsls	r3, r3, #3
  403324:	4413      	add	r3, r2
  403326:	789b      	ldrb	r3, [r3, #2]
  403328:	2b00      	cmp	r3, #0
  40332a:	d007      	beq.n	40333c <timer_done+0x28>
	{
		timers[timerID].done = 0;
  40332c:	88fb      	ldrh	r3, [r7, #6]
  40332e:	4a07      	ldr	r2, [pc, #28]	; (40334c <timer_done+0x38>)
  403330:	00db      	lsls	r3, r3, #3
  403332:	4413      	add	r3, r2
  403334:	2200      	movs	r2, #0
  403336:	709a      	strb	r2, [r3, #2]
		return 1;
  403338:	2301      	movs	r3, #1
  40333a:	e000      	b.n	40333e <timer_done+0x2a>
	}
	else
		return 0;
  40333c:	2300      	movs	r3, #0
}
  40333e:	4618      	mov	r0, r3
  403340:	370c      	adds	r7, #12
  403342:	46bd      	mov	sp, r7
  403344:	f85d 7b04 	ldr.w	r7, [sp], #4
  403348:	4770      	bx	lr
  40334a:	bf00      	nop
  40334c:	20400ac4 	.word	0x20400ac4

00403350 <end_timer>:

void end_timer(unsigned short timerID)
{
  403350:	b480      	push	{r7}
  403352:	b083      	sub	sp, #12
  403354:	af00      	add	r7, sp, #0
  403356:	4603      	mov	r3, r0
  403358:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = 0;
  40335a:	88fb      	ldrh	r3, [r7, #6]
  40335c:	4a0d      	ldr	r2, [pc, #52]	; (403394 <end_timer+0x44>)
  40335e:	00db      	lsls	r3, r3, #3
  403360:	4413      	add	r3, r2
  403362:	2200      	movs	r2, #0
  403364:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 0;
  403366:	88fb      	ldrh	r3, [r7, #6]
  403368:	4a0a      	ldr	r2, [pc, #40]	; (403394 <end_timer+0x44>)
  40336a:	2100      	movs	r1, #0
  40336c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403370:	88fb      	ldrh	r3, [r7, #6]
  403372:	4a08      	ldr	r2, [pc, #32]	; (403394 <end_timer+0x44>)
  403374:	00db      	lsls	r3, r3, #3
  403376:	4413      	add	r3, r2
  403378:	2200      	movs	r2, #0
  40337a:	709a      	strb	r2, [r3, #2]
	timers[timerID].overflow = 0;
  40337c:	88fb      	ldrh	r3, [r7, #6]
  40337e:	4a05      	ldr	r2, [pc, #20]	; (403394 <end_timer+0x44>)
  403380:	00db      	lsls	r3, r3, #3
  403382:	4413      	add	r3, r2
  403384:	2200      	movs	r2, #0
  403386:	70da      	strb	r2, [r3, #3]
}
  403388:	370c      	adds	r7, #12
  40338a:	46bd      	mov	sp, r7
  40338c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403390:	4770      	bx	lr
  403392:	bf00      	nop
  403394:	20400ac4 	.word	0x20400ac4

00403398 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403398:	b480      	push	{r7}
  40339a:	b083      	sub	sp, #12
  40339c:	af00      	add	r7, sp, #0
  40339e:	4603      	mov	r3, r0
  4033a0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4033a2:	4908      	ldr	r1, [pc, #32]	; (4033c4 <NVIC_EnableIRQ+0x2c>)
  4033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033a8:	095b      	lsrs	r3, r3, #5
  4033aa:	79fa      	ldrb	r2, [r7, #7]
  4033ac:	f002 021f 	and.w	r2, r2, #31
  4033b0:	2001      	movs	r0, #1
  4033b2:	fa00 f202 	lsl.w	r2, r0, r2
  4033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ba:	370c      	adds	r7, #12
  4033bc:	46bd      	mov	sp, r7
  4033be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033c2:	4770      	bx	lr
  4033c4:	e000e100 	.word	0xe000e100

004033c8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4033c8:	b480      	push	{r7}
  4033ca:	b083      	sub	sp, #12
  4033cc:	af00      	add	r7, sp, #0
  4033ce:	4603      	mov	r3, r0
  4033d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4033d2:	4909      	ldr	r1, [pc, #36]	; (4033f8 <NVIC_DisableIRQ+0x30>)
  4033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033d8:	095b      	lsrs	r3, r3, #5
  4033da:	79fa      	ldrb	r2, [r7, #7]
  4033dc:	f002 021f 	and.w	r2, r2, #31
  4033e0:	2001      	movs	r0, #1
  4033e2:	fa00 f202 	lsl.w	r2, r0, r2
  4033e6:	3320      	adds	r3, #32
  4033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ec:	370c      	adds	r7, #12
  4033ee:	46bd      	mov	sp, r7
  4033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033f4:	4770      	bx	lr
  4033f6:	bf00      	nop
  4033f8:	e000e100 	.word	0xe000e100

004033fc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4033fc:	b480      	push	{r7}
  4033fe:	b083      	sub	sp, #12
  403400:	af00      	add	r7, sp, #0
  403402:	4603      	mov	r3, r0
  403404:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403406:	4909      	ldr	r1, [pc, #36]	; (40342c <NVIC_ClearPendingIRQ+0x30>)
  403408:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40340c:	095b      	lsrs	r3, r3, #5
  40340e:	79fa      	ldrb	r2, [r7, #7]
  403410:	f002 021f 	and.w	r2, r2, #31
  403414:	2001      	movs	r0, #1
  403416:	fa00 f202 	lsl.w	r2, r0, r2
  40341a:	3360      	adds	r3, #96	; 0x60
  40341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403420:	370c      	adds	r7, #12
  403422:	46bd      	mov	sp, r7
  403424:	f85d 7b04 	ldr.w	r7, [sp], #4
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	e000e100 	.word	0xe000e100

00403430 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403430:	b480      	push	{r7}
  403432:	b083      	sub	sp, #12
  403434:	af00      	add	r7, sp, #0
  403436:	4603      	mov	r3, r0
  403438:	6039      	str	r1, [r7, #0]
  40343a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403440:	2b00      	cmp	r3, #0
  403442:	da0b      	bge.n	40345c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403444:	490d      	ldr	r1, [pc, #52]	; (40347c <NVIC_SetPriority+0x4c>)
  403446:	79fb      	ldrb	r3, [r7, #7]
  403448:	f003 030f 	and.w	r3, r3, #15
  40344c:	3b04      	subs	r3, #4
  40344e:	683a      	ldr	r2, [r7, #0]
  403450:	b2d2      	uxtb	r2, r2
  403452:	0152      	lsls	r2, r2, #5
  403454:	b2d2      	uxtb	r2, r2
  403456:	440b      	add	r3, r1
  403458:	761a      	strb	r2, [r3, #24]
  40345a:	e009      	b.n	403470 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40345c:	4908      	ldr	r1, [pc, #32]	; (403480 <NVIC_SetPriority+0x50>)
  40345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403462:	683a      	ldr	r2, [r7, #0]
  403464:	b2d2      	uxtb	r2, r2
  403466:	0152      	lsls	r2, r2, #5
  403468:	b2d2      	uxtb	r2, r2
  40346a:	440b      	add	r3, r1
  40346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403470:	370c      	adds	r7, #12
  403472:	46bd      	mov	sp, r7
  403474:	f85d 7b04 	ldr.w	r7, [sp], #4
  403478:	4770      	bx	lr
  40347a:	bf00      	nop
  40347c:	e000ed00 	.word	0xe000ed00
  403480:	e000e100 	.word	0xe000e100

00403484 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403484:	b580      	push	{r7, lr}
  403486:	b082      	sub	sp, #8
  403488:	af00      	add	r7, sp, #0
  40348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  40348c:	687b      	ldr	r3, [r7, #4]
  40348e:	3b01      	subs	r3, #1
  403490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403494:	d301      	bcc.n	40349a <SysTick_Config+0x16>
  403496:	2301      	movs	r3, #1
  403498:	e00f      	b.n	4034ba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40349a:	4a0a      	ldr	r2, [pc, #40]	; (4034c4 <SysTick_Config+0x40>)
  40349c:	687b      	ldr	r3, [r7, #4]
  40349e:	3b01      	subs	r3, #1
  4034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4034a2:	f04f 30ff 	mov.w	r0, #4294967295
  4034a6:	2107      	movs	r1, #7
  4034a8:	4b07      	ldr	r3, [pc, #28]	; (4034c8 <SysTick_Config+0x44>)
  4034aa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4034ac:	4b05      	ldr	r3, [pc, #20]	; (4034c4 <SysTick_Config+0x40>)
  4034ae:	2200      	movs	r2, #0
  4034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4034b2:	4b04      	ldr	r3, [pc, #16]	; (4034c4 <SysTick_Config+0x40>)
  4034b4:	2207      	movs	r2, #7
  4034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4034b8:	2300      	movs	r3, #0
}
  4034ba:	4618      	mov	r0, r3
  4034bc:	3708      	adds	r7, #8
  4034be:	46bd      	mov	sp, r7
  4034c0:	bd80      	pop	{r7, pc}
  4034c2:	bf00      	nop
  4034c4:	e000e010 	.word	0xe000e010
  4034c8:	00403431 	.word	0x00403431

004034cc <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4034cc:	b480      	push	{r7}
  4034ce:	b085      	sub	sp, #20
  4034d0:	af00      	add	r7, sp, #0
  4034d2:	6078      	str	r0, [r7, #4]
  4034d4:	460b      	mov	r3, r1
  4034d6:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  4034d8:	687b      	ldr	r3, [r7, #4]
  4034da:	685b      	ldr	r3, [r3, #4]
  4034dc:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  4034de:	78fb      	ldrb	r3, [r7, #3]
  4034e0:	2bff      	cmp	r3, #255	; 0xff
  4034e2:	d104      	bne.n	4034ee <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  4034e4:	68fb      	ldr	r3, [r7, #12]
  4034e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4034ea:	60fb      	str	r3, [r7, #12]
  4034ec:	e007      	b.n	4034fe <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4034ee:	68fb      	ldr	r3, [r7, #12]
  4034f0:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4034f4:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4034f6:	78fb      	ldrb	r3, [r7, #3]
  4034f8:	68fa      	ldr	r2, [r7, #12]
  4034fa:	4313      	orrs	r3, r2
  4034fc:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  4034fe:	687b      	ldr	r3, [r7, #4]
  403500:	68fa      	ldr	r2, [r7, #12]
  403502:	605a      	str	r2, [r3, #4]
}
  403504:	3714      	adds	r7, #20
  403506:	46bd      	mov	sp, r7
  403508:	f85d 7b04 	ldr.w	r7, [sp], #4
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  403510:	b480      	push	{r7}
  403512:	b083      	sub	sp, #12
  403514:	af00      	add	r7, sp, #0
  403516:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  403518:	687b      	ldr	r3, [r7, #4]
  40351a:	6a1b      	ldr	r3, [r3, #32]
  40351c:	b29b      	uxth	r3, r3
}
  40351e:	4618      	mov	r0, r3
  403520:	370c      	adds	r7, #12
  403522:	46bd      	mov	sp, r7
  403524:	f85d 7b04 	ldr.w	r7, [sp], #4
  403528:	4770      	bx	lr
  40352a:	bf00      	nop

0040352c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40352c:	b480      	push	{r7}
  40352e:	b083      	sub	sp, #12
  403530:	af00      	add	r7, sp, #0
  403532:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403534:	687b      	ldr	r3, [r7, #4]
  403536:	2b07      	cmp	r3, #7
  403538:	d825      	bhi.n	403586 <osc_get_rate+0x5a>
  40353a:	a201      	add	r2, pc, #4	; (adr r2, 403540 <osc_get_rate+0x14>)
  40353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403540:	00403561 	.word	0x00403561
  403544:	00403567 	.word	0x00403567
  403548:	0040356d 	.word	0x0040356d
  40354c:	00403573 	.word	0x00403573
  403550:	00403577 	.word	0x00403577
  403554:	0040357b 	.word	0x0040357b
  403558:	0040357f 	.word	0x0040357f
  40355c:	00403583 	.word	0x00403583
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403560:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403564:	e010      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40356a:	e00d      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403570:	e00a      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403572:	4b08      	ldr	r3, [pc, #32]	; (403594 <osc_get_rate+0x68>)
  403574:	e008      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403576:	4b08      	ldr	r3, [pc, #32]	; (403598 <osc_get_rate+0x6c>)
  403578:	e006      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40357a:	4b08      	ldr	r3, [pc, #32]	; (40359c <osc_get_rate+0x70>)
  40357c:	e004      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40357e:	4b08      	ldr	r3, [pc, #32]	; (4035a0 <osc_get_rate+0x74>)
  403580:	e002      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403582:	4b06      	ldr	r3, [pc, #24]	; (40359c <osc_get_rate+0x70>)
  403584:	e000      	b.n	403588 <osc_get_rate+0x5c>
	}

	return 0;
  403586:	2300      	movs	r3, #0
}
  403588:	4618      	mov	r0, r3
  40358a:	370c      	adds	r7, #12
  40358c:	46bd      	mov	sp, r7
  40358e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403592:	4770      	bx	lr
  403594:	003d0900 	.word	0x003d0900
  403598:	007a1200 	.word	0x007a1200
  40359c:	00b71b00 	.word	0x00b71b00
  4035a0:	00f42400 	.word	0x00f42400

004035a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4035a4:	b580      	push	{r7, lr}
  4035a6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4035a8:	2006      	movs	r0, #6
  4035aa:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <sysclk_get_main_hz+0x1c>)
  4035ac:	4798      	blx	r3
  4035ae:	4602      	mov	r2, r0
  4035b0:	4613      	mov	r3, r2
  4035b2:	009b      	lsls	r3, r3, #2
  4035b4:	4413      	add	r3, r2
  4035b6:	009a      	lsls	r2, r3, #2
  4035b8:	4413      	add	r3, r2
  4035ba:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4035bc:	4618      	mov	r0, r3
  4035be:	bd80      	pop	{r7, pc}
  4035c0:	0040352d 	.word	0x0040352d

004035c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4035c4:	b580      	push	{r7, lr}
  4035c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035c8:	4b02      	ldr	r3, [pc, #8]	; (4035d4 <sysclk_get_cpu_hz+0x10>)
  4035ca:	4798      	blx	r3
  4035cc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4035ce:	4618      	mov	r0, r3
  4035d0:	bd80      	pop	{r7, pc}
  4035d2:	bf00      	nop
  4035d4:	004035a5 	.word	0x004035a5

004035d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4035d8:	b580      	push	{r7, lr}
  4035da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035dc:	4b02      	ldr	r3, [pc, #8]	; (4035e8 <sysclk_get_peripheral_hz+0x10>)
  4035de:	4798      	blx	r3
  4035e0:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4035e2:	4618      	mov	r0, r3
  4035e4:	bd80      	pop	{r7, pc}
  4035e6:	bf00      	nop
  4035e8:	004035a5 	.word	0x004035a5

004035ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4035ec:	b580      	push	{r7, lr}
  4035ee:	b082      	sub	sp, #8
  4035f0:	af00      	add	r7, sp, #0
  4035f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4035f4:	6878      	ldr	r0, [r7, #4]
  4035f6:	4b02      	ldr	r3, [pc, #8]	; (403600 <sysclk_enable_peripheral_clock+0x14>)
  4035f8:	4798      	blx	r3
}
  4035fa:	3708      	adds	r7, #8
  4035fc:	46bd      	mov	sp, r7
  4035fe:	bd80      	pop	{r7, pc}
  403600:	004016d1 	.word	0x004016d1

00403604 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403604:	b480      	push	{r7}
  403606:	b08b      	sub	sp, #44	; 0x2c
  403608:	af00      	add	r7, sp, #0
  40360a:	6078      	str	r0, [r7, #4]
  40360c:	460b      	mov	r3, r1
  40360e:	70fb      	strb	r3, [r7, #3]
  403610:	687b      	ldr	r3, [r7, #4]
  403612:	627b      	str	r3, [r7, #36]	; 0x24
  403614:	78fb      	ldrb	r3, [r7, #3]
  403616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40361c:	61fb      	str	r3, [r7, #28]
  40361e:	69fb      	ldr	r3, [r7, #28]
  403620:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403622:	69bb      	ldr	r3, [r7, #24]
  403624:	095b      	lsrs	r3, r3, #5
  403626:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403628:	697a      	ldr	r2, [r7, #20]
  40362a:	4b10      	ldr	r3, [pc, #64]	; (40366c <ioport_set_pin_level+0x68>)
  40362c:	4413      	add	r3, r2
  40362e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403630:	613b      	str	r3, [r7, #16]

	if (level) {
  403632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403636:	2b00      	cmp	r3, #0
  403638:	d009      	beq.n	40364e <ioport_set_pin_level+0x4a>
  40363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40363c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40363e:	68fb      	ldr	r3, [r7, #12]
  403640:	f003 031f 	and.w	r3, r3, #31
  403644:	2201      	movs	r2, #1
  403646:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403648:	693b      	ldr	r3, [r7, #16]
  40364a:	631a      	str	r2, [r3, #48]	; 0x30
  40364c:	e008      	b.n	403660 <ioport_set_pin_level+0x5c>
  40364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403650:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403652:	68bb      	ldr	r3, [r7, #8]
  403654:	f003 031f 	and.w	r3, r3, #31
  403658:	2201      	movs	r2, #1
  40365a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40365c:	693b      	ldr	r3, [r7, #16]
  40365e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  403660:	372c      	adds	r7, #44	; 0x2c
  403662:	46bd      	mov	sp, r7
  403664:	f85d 7b04 	ldr.w	r7, [sp], #4
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	00200707 	.word	0x00200707

00403670 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403670:	b580      	push	{r7, lr}
  403672:	b08c      	sub	sp, #48	; 0x30
  403674:	af00      	add	r7, sp, #0
  403676:	6078      	str	r0, [r7, #4]
  403678:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40367a:	4b48      	ldr	r3, [pc, #288]	; (40379c <usart_serial_init+0x12c>)
  40367c:	4798      	blx	r3
  40367e:	4603      	mov	r3, r0
  403680:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403682:	683b      	ldr	r3, [r7, #0]
  403684:	681b      	ldr	r3, [r3, #0]
  403686:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403688:	683b      	ldr	r3, [r7, #0]
  40368a:	689b      	ldr	r3, [r3, #8]
  40368c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40368e:	683b      	ldr	r3, [r7, #0]
  403690:	681b      	ldr	r3, [r3, #0]
  403692:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403694:	683b      	ldr	r3, [r7, #0]
  403696:	685b      	ldr	r3, [r3, #4]
  403698:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40369a:	683b      	ldr	r3, [r7, #0]
  40369c:	689b      	ldr	r3, [r3, #8]
  40369e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4036a0:	683b      	ldr	r3, [r7, #0]
  4036a2:	68db      	ldr	r3, [r3, #12]
  4036a4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4036a6:	2300      	movs	r3, #0
  4036a8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4036aa:	687b      	ldr	r3, [r7, #4]
  4036ac:	4a3c      	ldr	r2, [pc, #240]	; (4037a0 <usart_serial_init+0x130>)
  4036ae:	4293      	cmp	r3, r2
  4036b0:	d108      	bne.n	4036c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4036b2:	2007      	movs	r0, #7
  4036b4:	4b3b      	ldr	r3, [pc, #236]	; (4037a4 <usart_serial_init+0x134>)
  4036b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036bc:	6878      	ldr	r0, [r7, #4]
  4036be:	4619      	mov	r1, r3
  4036c0:	4b39      	ldr	r3, [pc, #228]	; (4037a8 <usart_serial_init+0x138>)
  4036c2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4036c4:	687b      	ldr	r3, [r7, #4]
  4036c6:	4a39      	ldr	r2, [pc, #228]	; (4037ac <usart_serial_init+0x13c>)
  4036c8:	4293      	cmp	r3, r2
  4036ca:	d108      	bne.n	4036de <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4036cc:	2008      	movs	r0, #8
  4036ce:	4b35      	ldr	r3, [pc, #212]	; (4037a4 <usart_serial_init+0x134>)
  4036d0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036d6:	6878      	ldr	r0, [r7, #4]
  4036d8:	4619      	mov	r1, r3
  4036da:	4b33      	ldr	r3, [pc, #204]	; (4037a8 <usart_serial_init+0x138>)
  4036dc:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4036de:	687b      	ldr	r3, [r7, #4]
  4036e0:	4a33      	ldr	r2, [pc, #204]	; (4037b0 <usart_serial_init+0x140>)
  4036e2:	4293      	cmp	r3, r2
  4036e4:	d108      	bne.n	4036f8 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  4036e6:	202c      	movs	r0, #44	; 0x2c
  4036e8:	4b2e      	ldr	r3, [pc, #184]	; (4037a4 <usart_serial_init+0x134>)
  4036ea:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036f0:	6878      	ldr	r0, [r7, #4]
  4036f2:	4619      	mov	r1, r3
  4036f4:	4b2c      	ldr	r3, [pc, #176]	; (4037a8 <usart_serial_init+0x138>)
  4036f6:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4036f8:	687b      	ldr	r3, [r7, #4]
  4036fa:	4a2e      	ldr	r2, [pc, #184]	; (4037b4 <usart_serial_init+0x144>)
  4036fc:	4293      	cmp	r3, r2
  4036fe:	d108      	bne.n	403712 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403700:	202d      	movs	r0, #45	; 0x2d
  403702:	4b28      	ldr	r3, [pc, #160]	; (4037a4 <usart_serial_init+0x134>)
  403704:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403706:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40370a:	6878      	ldr	r0, [r7, #4]
  40370c:	4619      	mov	r1, r3
  40370e:	4b26      	ldr	r3, [pc, #152]	; (4037a8 <usart_serial_init+0x138>)
  403710:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403712:	687b      	ldr	r3, [r7, #4]
  403714:	4a28      	ldr	r2, [pc, #160]	; (4037b8 <usart_serial_init+0x148>)
  403716:	4293      	cmp	r3, r2
  403718:	d111      	bne.n	40373e <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40371a:	200d      	movs	r0, #13
  40371c:	4b21      	ldr	r3, [pc, #132]	; (4037a4 <usart_serial_init+0x134>)
  40371e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403720:	4b1e      	ldr	r3, [pc, #120]	; (40379c <usart_serial_init+0x12c>)
  403722:	4798      	blx	r3
  403724:	4602      	mov	r2, r0
  403726:	f107 030c 	add.w	r3, r7, #12
  40372a:	6878      	ldr	r0, [r7, #4]
  40372c:	4619      	mov	r1, r3
  40372e:	4b23      	ldr	r3, [pc, #140]	; (4037bc <usart_serial_init+0x14c>)
  403730:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403732:	6878      	ldr	r0, [r7, #4]
  403734:	4b22      	ldr	r3, [pc, #136]	; (4037c0 <usart_serial_init+0x150>)
  403736:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403738:	6878      	ldr	r0, [r7, #4]
  40373a:	4b22      	ldr	r3, [pc, #136]	; (4037c4 <usart_serial_init+0x154>)
  40373c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40373e:	687b      	ldr	r3, [r7, #4]
  403740:	4a21      	ldr	r2, [pc, #132]	; (4037c8 <usart_serial_init+0x158>)
  403742:	4293      	cmp	r3, r2
  403744:	d111      	bne.n	40376a <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403746:	200e      	movs	r0, #14
  403748:	4b16      	ldr	r3, [pc, #88]	; (4037a4 <usart_serial_init+0x134>)
  40374a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40374c:	4b13      	ldr	r3, [pc, #76]	; (40379c <usart_serial_init+0x12c>)
  40374e:	4798      	blx	r3
  403750:	4602      	mov	r2, r0
  403752:	f107 030c 	add.w	r3, r7, #12
  403756:	6878      	ldr	r0, [r7, #4]
  403758:	4619      	mov	r1, r3
  40375a:	4b18      	ldr	r3, [pc, #96]	; (4037bc <usart_serial_init+0x14c>)
  40375c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40375e:	6878      	ldr	r0, [r7, #4]
  403760:	4b17      	ldr	r3, [pc, #92]	; (4037c0 <usart_serial_init+0x150>)
  403762:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403764:	6878      	ldr	r0, [r7, #4]
  403766:	4b17      	ldr	r3, [pc, #92]	; (4037c4 <usart_serial_init+0x154>)
  403768:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40376a:	687b      	ldr	r3, [r7, #4]
  40376c:	4a17      	ldr	r2, [pc, #92]	; (4037cc <usart_serial_init+0x15c>)
  40376e:	4293      	cmp	r3, r2
  403770:	d111      	bne.n	403796 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  403772:	200f      	movs	r0, #15
  403774:	4b0b      	ldr	r3, [pc, #44]	; (4037a4 <usart_serial_init+0x134>)
  403776:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403778:	4b08      	ldr	r3, [pc, #32]	; (40379c <usart_serial_init+0x12c>)
  40377a:	4798      	blx	r3
  40377c:	4602      	mov	r2, r0
  40377e:	f107 030c 	add.w	r3, r7, #12
  403782:	6878      	ldr	r0, [r7, #4]
  403784:	4619      	mov	r1, r3
  403786:	4b0d      	ldr	r3, [pc, #52]	; (4037bc <usart_serial_init+0x14c>)
  403788:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40378a:	6878      	ldr	r0, [r7, #4]
  40378c:	4b0c      	ldr	r3, [pc, #48]	; (4037c0 <usart_serial_init+0x150>)
  40378e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403790:	6878      	ldr	r0, [r7, #4]
  403792:	4b0c      	ldr	r3, [pc, #48]	; (4037c4 <usart_serial_init+0x154>)
  403794:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403796:	3730      	adds	r7, #48	; 0x30
  403798:	46bd      	mov	sp, r7
  40379a:	bd80      	pop	{r7, pc}
  40379c:	004035d9 	.word	0x004035d9
  4037a0:	400e0800 	.word	0x400e0800
  4037a4:	004035ed 	.word	0x004035ed
  4037a8:	00401f69 	.word	0x00401f69
  4037ac:	400e0a00 	.word	0x400e0a00
  4037b0:	400e1a00 	.word	0x400e1a00
  4037b4:	400e1c00 	.word	0x400e1c00
  4037b8:	40024000 	.word	0x40024000
  4037bc:	00402105 	.word	0x00402105
  4037c0:	00402189 	.word	0x00402189
  4037c4:	004021d5 	.word	0x004021d5
  4037c8:	40028000 	.word	0x40028000
  4037cc:	4002c000 	.word	0x4002c000

004037d0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4037d0:	b580      	push	{r7, lr}
  4037d2:	b082      	sub	sp, #8
  4037d4:	af00      	add	r7, sp, #0
  4037d6:	6078      	str	r0, [r7, #4]
  4037d8:	460b      	mov	r3, r1
  4037da:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4037dc:	687b      	ldr	r3, [r7, #4]
  4037de:	4a36      	ldr	r2, [pc, #216]	; (4038b8 <usart_serial_putchar+0xe8>)
  4037e0:	4293      	cmp	r3, r2
  4037e2:	d10a      	bne.n	4037fa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4037e4:	bf00      	nop
  4037e6:	78fb      	ldrb	r3, [r7, #3]
  4037e8:	6878      	ldr	r0, [r7, #4]
  4037ea:	4619      	mov	r1, r3
  4037ec:	4b33      	ldr	r3, [pc, #204]	; (4038bc <usart_serial_putchar+0xec>)
  4037ee:	4798      	blx	r3
  4037f0:	4603      	mov	r3, r0
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	d1f7      	bne.n	4037e6 <usart_serial_putchar+0x16>
		return 1;
  4037f6:	2301      	movs	r3, #1
  4037f8:	e05a      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4037fa:	687b      	ldr	r3, [r7, #4]
  4037fc:	4a30      	ldr	r2, [pc, #192]	; (4038c0 <usart_serial_putchar+0xf0>)
  4037fe:	4293      	cmp	r3, r2
  403800:	d10a      	bne.n	403818 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403802:	bf00      	nop
  403804:	78fb      	ldrb	r3, [r7, #3]
  403806:	6878      	ldr	r0, [r7, #4]
  403808:	4619      	mov	r1, r3
  40380a:	4b2c      	ldr	r3, [pc, #176]	; (4038bc <usart_serial_putchar+0xec>)
  40380c:	4798      	blx	r3
  40380e:	4603      	mov	r3, r0
  403810:	2b00      	cmp	r3, #0
  403812:	d1f7      	bne.n	403804 <usart_serial_putchar+0x34>
		return 1;
  403814:	2301      	movs	r3, #1
  403816:	e04b      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403818:	687b      	ldr	r3, [r7, #4]
  40381a:	4a2a      	ldr	r2, [pc, #168]	; (4038c4 <usart_serial_putchar+0xf4>)
  40381c:	4293      	cmp	r3, r2
  40381e:	d10a      	bne.n	403836 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403820:	bf00      	nop
  403822:	78fb      	ldrb	r3, [r7, #3]
  403824:	6878      	ldr	r0, [r7, #4]
  403826:	4619      	mov	r1, r3
  403828:	4b24      	ldr	r3, [pc, #144]	; (4038bc <usart_serial_putchar+0xec>)
  40382a:	4798      	blx	r3
  40382c:	4603      	mov	r3, r0
  40382e:	2b00      	cmp	r3, #0
  403830:	d1f7      	bne.n	403822 <usart_serial_putchar+0x52>
		return 1;
  403832:	2301      	movs	r3, #1
  403834:	e03c      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403836:	687b      	ldr	r3, [r7, #4]
  403838:	4a23      	ldr	r2, [pc, #140]	; (4038c8 <usart_serial_putchar+0xf8>)
  40383a:	4293      	cmp	r3, r2
  40383c:	d10a      	bne.n	403854 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40383e:	bf00      	nop
  403840:	78fb      	ldrb	r3, [r7, #3]
  403842:	6878      	ldr	r0, [r7, #4]
  403844:	4619      	mov	r1, r3
  403846:	4b1d      	ldr	r3, [pc, #116]	; (4038bc <usart_serial_putchar+0xec>)
  403848:	4798      	blx	r3
  40384a:	4603      	mov	r3, r0
  40384c:	2b00      	cmp	r3, #0
  40384e:	d1f7      	bne.n	403840 <usart_serial_putchar+0x70>
		return 1;
  403850:	2301      	movs	r3, #1
  403852:	e02d      	b.n	4038b0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403854:	687b      	ldr	r3, [r7, #4]
  403856:	4a1d      	ldr	r2, [pc, #116]	; (4038cc <usart_serial_putchar+0xfc>)
  403858:	4293      	cmp	r3, r2
  40385a:	d10a      	bne.n	403872 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40385c:	bf00      	nop
  40385e:	78fb      	ldrb	r3, [r7, #3]
  403860:	6878      	ldr	r0, [r7, #4]
  403862:	4619      	mov	r1, r3
  403864:	4b1a      	ldr	r3, [pc, #104]	; (4038d0 <usart_serial_putchar+0x100>)
  403866:	4798      	blx	r3
  403868:	4603      	mov	r3, r0
  40386a:	2b00      	cmp	r3, #0
  40386c:	d1f7      	bne.n	40385e <usart_serial_putchar+0x8e>
		return 1;
  40386e:	2301      	movs	r3, #1
  403870:	e01e      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403872:	687b      	ldr	r3, [r7, #4]
  403874:	4a17      	ldr	r2, [pc, #92]	; (4038d4 <usart_serial_putchar+0x104>)
  403876:	4293      	cmp	r3, r2
  403878:	d10a      	bne.n	403890 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40387a:	bf00      	nop
  40387c:	78fb      	ldrb	r3, [r7, #3]
  40387e:	6878      	ldr	r0, [r7, #4]
  403880:	4619      	mov	r1, r3
  403882:	4b13      	ldr	r3, [pc, #76]	; (4038d0 <usart_serial_putchar+0x100>)
  403884:	4798      	blx	r3
  403886:	4603      	mov	r3, r0
  403888:	2b00      	cmp	r3, #0
  40388a:	d1f7      	bne.n	40387c <usart_serial_putchar+0xac>
		return 1;
  40388c:	2301      	movs	r3, #1
  40388e:	e00f      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403890:	687b      	ldr	r3, [r7, #4]
  403892:	4a11      	ldr	r2, [pc, #68]	; (4038d8 <usart_serial_putchar+0x108>)
  403894:	4293      	cmp	r3, r2
  403896:	d10a      	bne.n	4038ae <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  403898:	bf00      	nop
  40389a:	78fb      	ldrb	r3, [r7, #3]
  40389c:	6878      	ldr	r0, [r7, #4]
  40389e:	4619      	mov	r1, r3
  4038a0:	4b0b      	ldr	r3, [pc, #44]	; (4038d0 <usart_serial_putchar+0x100>)
  4038a2:	4798      	blx	r3
  4038a4:	4603      	mov	r3, r0
  4038a6:	2b00      	cmp	r3, #0
  4038a8:	d1f7      	bne.n	40389a <usart_serial_putchar+0xca>
		return 1;
  4038aa:	2301      	movs	r3, #1
  4038ac:	e000      	b.n	4038b0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4038ae:	2300      	movs	r3, #0
}
  4038b0:	4618      	mov	r0, r3
  4038b2:	3708      	adds	r7, #8
  4038b4:	46bd      	mov	sp, r7
  4038b6:	bd80      	pop	{r7, pc}
  4038b8:	400e0800 	.word	0x400e0800
  4038bc:	00401fc1 	.word	0x00401fc1
  4038c0:	400e0a00 	.word	0x400e0a00
  4038c4:	400e1a00 	.word	0x400e1a00
  4038c8:	400e1c00 	.word	0x400e1c00
  4038cc:	40024000 	.word	0x40024000
  4038d0:	004022dd 	.word	0x004022dd
  4038d4:	40028000 	.word	0x40028000
  4038d8:	4002c000 	.word	0x4002c000

004038dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4038dc:	b580      	push	{r7, lr}
  4038de:	b084      	sub	sp, #16
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	6078      	str	r0, [r7, #4]
  4038e4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4038e6:	2300      	movs	r3, #0
  4038e8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4038ea:	687b      	ldr	r3, [r7, #4]
  4038ec:	4a33      	ldr	r2, [pc, #204]	; (4039bc <usart_serial_getchar+0xe0>)
  4038ee:	4293      	cmp	r3, r2
  4038f0:	d107      	bne.n	403902 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4038f2:	bf00      	nop
  4038f4:	6878      	ldr	r0, [r7, #4]
  4038f6:	6839      	ldr	r1, [r7, #0]
  4038f8:	4b31      	ldr	r3, [pc, #196]	; (4039c0 <usart_serial_getchar+0xe4>)
  4038fa:	4798      	blx	r3
  4038fc:	4603      	mov	r3, r0
  4038fe:	2b00      	cmp	r3, #0
  403900:	d1f8      	bne.n	4038f4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403902:	687b      	ldr	r3, [r7, #4]
  403904:	4a2f      	ldr	r2, [pc, #188]	; (4039c4 <usart_serial_getchar+0xe8>)
  403906:	4293      	cmp	r3, r2
  403908:	d107      	bne.n	40391a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40390a:	bf00      	nop
  40390c:	6878      	ldr	r0, [r7, #4]
  40390e:	6839      	ldr	r1, [r7, #0]
  403910:	4b2b      	ldr	r3, [pc, #172]	; (4039c0 <usart_serial_getchar+0xe4>)
  403912:	4798      	blx	r3
  403914:	4603      	mov	r3, r0
  403916:	2b00      	cmp	r3, #0
  403918:	d1f8      	bne.n	40390c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40391a:	687b      	ldr	r3, [r7, #4]
  40391c:	4a2a      	ldr	r2, [pc, #168]	; (4039c8 <usart_serial_getchar+0xec>)
  40391e:	4293      	cmp	r3, r2
  403920:	d107      	bne.n	403932 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403922:	bf00      	nop
  403924:	6878      	ldr	r0, [r7, #4]
  403926:	6839      	ldr	r1, [r7, #0]
  403928:	4b25      	ldr	r3, [pc, #148]	; (4039c0 <usart_serial_getchar+0xe4>)
  40392a:	4798      	blx	r3
  40392c:	4603      	mov	r3, r0
  40392e:	2b00      	cmp	r3, #0
  403930:	d1f8      	bne.n	403924 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403932:	687b      	ldr	r3, [r7, #4]
  403934:	4a25      	ldr	r2, [pc, #148]	; (4039cc <usart_serial_getchar+0xf0>)
  403936:	4293      	cmp	r3, r2
  403938:	d107      	bne.n	40394a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40393a:	bf00      	nop
  40393c:	6878      	ldr	r0, [r7, #4]
  40393e:	6839      	ldr	r1, [r7, #0]
  403940:	4b1f      	ldr	r3, [pc, #124]	; (4039c0 <usart_serial_getchar+0xe4>)
  403942:	4798      	blx	r3
  403944:	4603      	mov	r3, r0
  403946:	2b00      	cmp	r3, #0
  403948:	d1f8      	bne.n	40393c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40394a:	687b      	ldr	r3, [r7, #4]
  40394c:	4a20      	ldr	r2, [pc, #128]	; (4039d0 <usart_serial_getchar+0xf4>)
  40394e:	4293      	cmp	r3, r2
  403950:	d10d      	bne.n	40396e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  403952:	bf00      	nop
  403954:	f107 030c 	add.w	r3, r7, #12
  403958:	6878      	ldr	r0, [r7, #4]
  40395a:	4619      	mov	r1, r3
  40395c:	4b1d      	ldr	r3, [pc, #116]	; (4039d4 <usart_serial_getchar+0xf8>)
  40395e:	4798      	blx	r3
  403960:	4603      	mov	r3, r0
  403962:	2b00      	cmp	r3, #0
  403964:	d1f6      	bne.n	403954 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  403966:	68fb      	ldr	r3, [r7, #12]
  403968:	b2da      	uxtb	r2, r3
  40396a:	683b      	ldr	r3, [r7, #0]
  40396c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40396e:	687b      	ldr	r3, [r7, #4]
  403970:	4a19      	ldr	r2, [pc, #100]	; (4039d8 <usart_serial_getchar+0xfc>)
  403972:	4293      	cmp	r3, r2
  403974:	d10d      	bne.n	403992 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  403976:	bf00      	nop
  403978:	f107 030c 	add.w	r3, r7, #12
  40397c:	6878      	ldr	r0, [r7, #4]
  40397e:	4619      	mov	r1, r3
  403980:	4b14      	ldr	r3, [pc, #80]	; (4039d4 <usart_serial_getchar+0xf8>)
  403982:	4798      	blx	r3
  403984:	4603      	mov	r3, r0
  403986:	2b00      	cmp	r3, #0
  403988:	d1f6      	bne.n	403978 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40398a:	68fb      	ldr	r3, [r7, #12]
  40398c:	b2da      	uxtb	r2, r3
  40398e:	683b      	ldr	r3, [r7, #0]
  403990:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	4a11      	ldr	r2, [pc, #68]	; (4039dc <usart_serial_getchar+0x100>)
  403996:	4293      	cmp	r3, r2
  403998:	d10d      	bne.n	4039b6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40399a:	bf00      	nop
  40399c:	f107 030c 	add.w	r3, r7, #12
  4039a0:	6878      	ldr	r0, [r7, #4]
  4039a2:	4619      	mov	r1, r3
  4039a4:	4b0b      	ldr	r3, [pc, #44]	; (4039d4 <usart_serial_getchar+0xf8>)
  4039a6:	4798      	blx	r3
  4039a8:	4603      	mov	r3, r0
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	d1f6      	bne.n	40399c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4039ae:	68fb      	ldr	r3, [r7, #12]
  4039b0:	b2da      	uxtb	r2, r3
  4039b2:	683b      	ldr	r3, [r7, #0]
  4039b4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4039b6:	3710      	adds	r7, #16
  4039b8:	46bd      	mov	sp, r7
  4039ba:	bd80      	pop	{r7, pc}
  4039bc:	400e0800 	.word	0x400e0800
  4039c0:	00401ff1 	.word	0x00401ff1
  4039c4:	400e0a00 	.word	0x400e0a00
  4039c8:	400e1a00 	.word	0x400e1a00
  4039cc:	400e1c00 	.word	0x400e1c00
  4039d0:	40024000 	.word	0x40024000
  4039d4:	00402311 	.word	0x00402311
  4039d8:	40028000 	.word	0x40028000
  4039dc:	4002c000 	.word	0x4002c000

004039e0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4039e0:	b580      	push	{r7, lr}
  4039e2:	b082      	sub	sp, #8
  4039e4:	af00      	add	r7, sp, #0
  4039e6:	6078      	str	r0, [r7, #4]
  4039e8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4039ea:	4a0f      	ldr	r2, [pc, #60]	; (403a28 <stdio_serial_init+0x48>)
  4039ec:	687b      	ldr	r3, [r7, #4]
  4039ee:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4039f0:	4b0e      	ldr	r3, [pc, #56]	; (403a2c <stdio_serial_init+0x4c>)
  4039f2:	4a0f      	ldr	r2, [pc, #60]	; (403a30 <stdio_serial_init+0x50>)
  4039f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4039f6:	4b0f      	ldr	r3, [pc, #60]	; (403a34 <stdio_serial_init+0x54>)
  4039f8:	4a0f      	ldr	r2, [pc, #60]	; (403a38 <stdio_serial_init+0x58>)
  4039fa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4039fc:	6878      	ldr	r0, [r7, #4]
  4039fe:	6839      	ldr	r1, [r7, #0]
  403a00:	4b0e      	ldr	r3, [pc, #56]	; (403a3c <stdio_serial_init+0x5c>)
  403a02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403a04:	4b0e      	ldr	r3, [pc, #56]	; (403a40 <stdio_serial_init+0x60>)
  403a06:	681b      	ldr	r3, [r3, #0]
  403a08:	689b      	ldr	r3, [r3, #8]
  403a0a:	4618      	mov	r0, r3
  403a0c:	2100      	movs	r1, #0
  403a0e:	4b0d      	ldr	r3, [pc, #52]	; (403a44 <stdio_serial_init+0x64>)
  403a10:	4798      	blx	r3
	setbuf(stdin, NULL);
  403a12:	4b0b      	ldr	r3, [pc, #44]	; (403a40 <stdio_serial_init+0x60>)
  403a14:	681b      	ldr	r3, [r3, #0]
  403a16:	685b      	ldr	r3, [r3, #4]
  403a18:	4618      	mov	r0, r3
  403a1a:	2100      	movs	r1, #0
  403a1c:	4b09      	ldr	r3, [pc, #36]	; (403a44 <stdio_serial_init+0x64>)
  403a1e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403a20:	3708      	adds	r7, #8
  403a22:	46bd      	mov	sp, r7
  403a24:	bd80      	pop	{r7, pc}
  403a26:	bf00      	nop
  403a28:	20400a18 	.word	0x20400a18
  403a2c:	20400a14 	.word	0x20400a14
  403a30:	004037d1 	.word	0x004037d1
  403a34:	20400a10 	.word	0x20400a10
  403a38:	004038dd 	.word	0x004038dd
  403a3c:	00403671 	.word	0x00403671
  403a40:	204004c0 	.word	0x204004c0
  403a44:	00407619 	.word	0x00407619

00403a48 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  403a48:	b480      	push	{r7}
  403a4a:	b085      	sub	sp, #20
  403a4c:	af00      	add	r7, sp, #0
  403a4e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  403a50:	4b07      	ldr	r3, [pc, #28]	; (403a70 <mdelay+0x28>)
  403a52:	681b      	ldr	r3, [r3, #0]
  403a54:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  403a56:	bf00      	nop
  403a58:	4b05      	ldr	r3, [pc, #20]	; (403a70 <mdelay+0x28>)
  403a5a:	681a      	ldr	r2, [r3, #0]
  403a5c:	68fb      	ldr	r3, [r7, #12]
  403a5e:	1ad2      	subs	r2, r2, r3
  403a60:	687b      	ldr	r3, [r7, #4]
  403a62:	429a      	cmp	r2, r3
  403a64:	d3f8      	bcc.n	403a58 <mdelay+0x10>
	}
}
  403a66:	3714      	adds	r7, #20
  403a68:	46bd      	mov	sp, r7
  403a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a6e:	4770      	bx	lr
  403a70:	204009ac 	.word	0x204009ac

00403a74 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  403a74:	b580      	push	{r7, lr}
  403a76:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  403a78:	4b44      	ldr	r3, [pc, #272]	; (403b8c <SysTick_Handler+0x118>)
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	3301      	adds	r3, #1
  403a7e:	4a43      	ldr	r2, [pc, #268]	; (403b8c <SysTick_Handler+0x118>)
  403a80:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  403a82:	4b43      	ldr	r3, [pc, #268]	; (403b90 <SysTick_Handler+0x11c>)
  403a84:	681b      	ldr	r3, [r3, #0]
  403a86:	3301      	adds	r3, #1
  403a88:	4a41      	ldr	r2, [pc, #260]	; (403b90 <SysTick_Handler+0x11c>)
  403a8a:	6013      	str	r3, [r2, #0]
	
	timerTickCount++;
  403a8c:	4b41      	ldr	r3, [pc, #260]	; (403b94 <SysTick_Handler+0x120>)
  403a8e:	681b      	ldr	r3, [r3, #0]
  403a90:	3301      	adds	r3, #1
  403a92:	4a40      	ldr	r2, [pc, #256]	; (403b94 <SysTick_Handler+0x120>)
  403a94:	6013      	str	r3, [r2, #0]
	timerTickCount &= MAX_TICK; // force rollover at this count to avoid confusion detecting rollover with the MSbit set
  403a96:	4b3f      	ldr	r3, [pc, #252]	; (403b94 <SysTick_Handler+0x120>)
  403a98:	681b      	ldr	r3, [r3, #0]
  403a9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  403a9e:	4a3d      	ldr	r2, [pc, #244]	; (403b94 <SysTick_Handler+0x120>)
  403aa0:	6013      	str	r3, [r2, #0]
	if (timerTickCount == 0)
  403aa2:	4b3c      	ldr	r3, [pc, #240]	; (403b94 <SysTick_Handler+0x120>)
  403aa4:	681b      	ldr	r3, [r3, #0]
  403aa6:	2b00      	cmp	r3, #0
  403aa8:	d102      	bne.n	403ab0 <SysTick_Handler+0x3c>
	{
		rollover = 1;
  403aaa:	4b3b      	ldr	r3, [pc, #236]	; (403b98 <SysTick_Handler+0x124>)
  403aac:	2201      	movs	r2, #1
  403aae:	701a      	strb	r2, [r3, #0]
	}
	
	if ((timerTickCount % TICKS_PER_SEC) == 0)
  403ab0:	4b38      	ldr	r3, [pc, #224]	; (403b94 <SysTick_Handler+0x120>)
  403ab2:	681a      	ldr	r2, [r3, #0]
  403ab4:	4b39      	ldr	r3, [pc, #228]	; (403b9c <SysTick_Handler+0x128>)
  403ab6:	fba3 1302 	umull	r1, r3, r3, r2
  403aba:	099b      	lsrs	r3, r3, #6
  403abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403ac0:	fb01 f303 	mul.w	r3, r1, r3
  403ac4:	1ad3      	subs	r3, r2, r3
  403ac6:	2b00      	cmp	r3, #0
  403ac8:	d101      	bne.n	403ace <SysTick_Handler+0x5a>
	{
		process_timers();
  403aca:	4b35      	ldr	r3, [pc, #212]	; (403ba0 <SysTick_Handler+0x12c>)
  403acc:	4798      	blx	r3
	}

	
	if (controls.buzzer_enable)
  403ace:	4b35      	ldr	r3, [pc, #212]	; (403ba4 <SysTick_Handler+0x130>)
  403ad0:	78db      	ldrb	r3, [r3, #3]
  403ad2:	2b00      	cmp	r3, #0
  403ad4:	d028      	beq.n	403b28 <SysTick_Handler+0xb4>
	{
		controls.buzzer_count++;
  403ad6:	4b33      	ldr	r3, [pc, #204]	; (403ba4 <SysTick_Handler+0x130>)
  403ad8:	88db      	ldrh	r3, [r3, #6]
  403ada:	3301      	adds	r3, #1
  403adc:	b29a      	uxth	r2, r3
  403ade:	4b31      	ldr	r3, [pc, #196]	; (403ba4 <SysTick_Handler+0x130>)
  403ae0:	80da      	strh	r2, [r3, #6]
		
		if (controls.buzzer_cycle == CYCLE_ON)
  403ae2:	4b30      	ldr	r3, [pc, #192]	; (403ba4 <SysTick_Handler+0x130>)
  403ae4:	791b      	ldrb	r3, [r3, #4]
  403ae6:	2b01      	cmp	r3, #1
  403ae8:	d10f      	bne.n	403b0a <SysTick_Handler+0x96>
		{
			if (controls.buzzer_count > BUZZER_ON_COUNT)
  403aea:	4b2e      	ldr	r3, [pc, #184]	; (403ba4 <SysTick_Handler+0x130>)
  403aec:	88db      	ldrh	r3, [r3, #6]
  403aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403af2:	d919      	bls.n	403b28 <SysTick_Handler+0xb4>
			{
				controls.buzzer_count = 0;
  403af4:	4b2b      	ldr	r3, [pc, #172]	; (403ba4 <SysTick_Handler+0x130>)
  403af6:	2200      	movs	r2, #0
  403af8:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_OFF;
  403afa:	4b2a      	ldr	r3, [pc, #168]	; (403ba4 <SysTick_Handler+0x130>)
  403afc:	2200      	movs	r2, #0
  403afe:	711a      	strb	r2, [r3, #4]
				pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b00:	4829      	ldr	r0, [pc, #164]	; (403ba8 <SysTick_Handler+0x134>)
  403b02:	2100      	movs	r1, #0
  403b04:	4b29      	ldr	r3, [pc, #164]	; (403bac <SysTick_Handler+0x138>)
  403b06:	4798      	blx	r3
  403b08:	e00e      	b.n	403b28 <SysTick_Handler+0xb4>
			}
		}
		else
		{
			if (controls.buzzer_count > BUZZER_OFF_COUNT)
  403b0a:	4b26      	ldr	r3, [pc, #152]	; (403ba4 <SysTick_Handler+0x130>)
  403b0c:	88db      	ldrh	r3, [r3, #6]
  403b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403b12:	d909      	bls.n	403b28 <SysTick_Handler+0xb4>
			{
				controls.buzzer_count = 0;
  403b14:	4b23      	ldr	r3, [pc, #140]	; (403ba4 <SysTick_Handler+0x130>)
  403b16:	2200      	movs	r2, #0
  403b18:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_ON;
  403b1a:	4b22      	ldr	r3, [pc, #136]	; (403ba4 <SysTick_Handler+0x130>)
  403b1c:	2201      	movs	r2, #1
  403b1e:	711a      	strb	r2, [r3, #4]
				pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b20:	4821      	ldr	r0, [pc, #132]	; (403ba8 <SysTick_Handler+0x134>)
  403b22:	2100      	movs	r1, #0
  403b24:	4b22      	ldr	r3, [pc, #136]	; (403bb0 <SysTick_Handler+0x13c>)
  403b26:	4798      	blx	r3
			}
		}
	}
	
	if (controls.solenoid_enable)
  403b28:	4b1e      	ldr	r3, [pc, #120]	; (403ba4 <SysTick_Handler+0x130>)
  403b2a:	7a1b      	ldrb	r3, [r3, #8]
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	d02b      	beq.n	403b88 <SysTick_Handler+0x114>
	{
		controls.solenoid_count++;
  403b30:	4b1c      	ldr	r3, [pc, #112]	; (403ba4 <SysTick_Handler+0x130>)
  403b32:	895b      	ldrh	r3, [r3, #10]
  403b34:	3301      	adds	r3, #1
  403b36:	b29a      	uxth	r2, r3
  403b38:	4b1a      	ldr	r3, [pc, #104]	; (403ba4 <SysTick_Handler+0x130>)
  403b3a:	815a      	strh	r2, [r3, #10]
		
		if (controls.solenoid_cycle == CYCLE_ON)
  403b3c:	4b19      	ldr	r3, [pc, #100]	; (403ba4 <SysTick_Handler+0x130>)
  403b3e:	7a5b      	ldrb	r3, [r3, #9]
  403b40:	2b01      	cmp	r3, #1
  403b42:	d112      	bne.n	403b6a <SysTick_Handler+0xf6>
		{
			if (controls.solenoid_count > SOLENOID_ON_COUNT)
  403b44:	4b17      	ldr	r3, [pc, #92]	; (403ba4 <SysTick_Handler+0x130>)
  403b46:	895b      	ldrh	r3, [r3, #10]
  403b48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403b4c:	d91c      	bls.n	403b88 <SysTick_Handler+0x114>
			{
				controls.solenoid_count = 0;
  403b4e:	4b15      	ldr	r3, [pc, #84]	; (403ba4 <SysTick_Handler+0x130>)
  403b50:	2200      	movs	r2, #0
  403b52:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_OFF;
  403b54:	4b13      	ldr	r3, [pc, #76]	; (403ba4 <SysTick_Handler+0x130>)
  403b56:	2200      	movs	r2, #0
  403b58:	725a      	strb	r2, [r3, #9]
				controls.solenoid_enable = 0; //solenoid is a one-shot
  403b5a:	4b12      	ldr	r3, [pc, #72]	; (403ba4 <SysTick_Handler+0x130>)
  403b5c:	2200      	movs	r2, #0
  403b5e:	721a      	strb	r2, [r3, #8]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  403b60:	2015      	movs	r0, #21
  403b62:	2100      	movs	r1, #0
  403b64:	4b13      	ldr	r3, [pc, #76]	; (403bb4 <SysTick_Handler+0x140>)
  403b66:	4798      	blx	r3
  403b68:	e00e      	b.n	403b88 <SysTick_Handler+0x114>
			}
		}
		else
		{
			if (controls.solenoid_count > SOLENOID_OFF_COUNT)
  403b6a:	4b0e      	ldr	r3, [pc, #56]	; (403ba4 <SysTick_Handler+0x130>)
  403b6c:	895b      	ldrh	r3, [r3, #10]
  403b6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403b72:	d909      	bls.n	403b88 <SysTick_Handler+0x114>
			{
				controls.solenoid_count = 0;
  403b74:	4b0b      	ldr	r3, [pc, #44]	; (403ba4 <SysTick_Handler+0x130>)
  403b76:	2200      	movs	r2, #0
  403b78:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_ON;
  403b7a:	4b0a      	ldr	r3, [pc, #40]	; (403ba4 <SysTick_Handler+0x130>)
  403b7c:	2201      	movs	r2, #1
  403b7e:	725a      	strb	r2, [r3, #9]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
  403b80:	2015      	movs	r0, #21
  403b82:	2101      	movs	r1, #1
  403b84:	4b0b      	ldr	r3, [pc, #44]	; (403bb4 <SysTick_Handler+0x140>)
  403b86:	4798      	blx	r3
			}
			
		}
	}
}
  403b88:	bd80      	pop	{r7, pc}
  403b8a:	bf00      	nop
  403b8c:	20400b34 	.word	0x20400b34
  403b90:	204009ac 	.word	0x204009ac
  403b94:	204009a0 	.word	0x204009a0
  403b98:	204009a4 	.word	0x204009a4
  403b9c:	10624dd3 	.word	0x10624dd3
  403ba0:	00403281 	.word	0x00403281
  403ba4:	20400b38 	.word	0x20400b38
  403ba8:	40020000 	.word	0x40020000
  403bac:	00401ba5 	.word	0x00401ba5
  403bb0:	00401b81 	.word	0x00401b81
  403bb4:	00403605 	.word	0x00403605

00403bb8 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  403bb8:	b580      	push	{r7, lr}
  403bba:	b082      	sub	sp, #8
  403bbc:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  403bbe:	481b      	ldr	r0, [pc, #108]	; (403c2c <USART0_Handler+0x74>)
  403bc0:	4b1b      	ldr	r3, [pc, #108]	; (403c30 <USART0_Handler+0x78>)
  403bc2:	4798      	blx	r3
  403bc4:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  403bc6:	687a      	ldr	r2, [r7, #4]
  403bc8:	f240 2302 	movw	r3, #514	; 0x202
  403bcc:	4013      	ands	r3, r2
  403bce:	2b00      	cmp	r3, #0
  403bd0:	d004      	beq.n	403bdc <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  403bd2:	4816      	ldr	r0, [pc, #88]	; (403c2c <USART0_Handler+0x74>)
  403bd4:	f240 2102 	movw	r1, #514	; 0x202
  403bd8:	4b16      	ldr	r3, [pc, #88]	; (403c34 <USART0_Handler+0x7c>)
  403bda:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  403bdc:	4b16      	ldr	r3, [pc, #88]	; (403c38 <USART0_Handler+0x80>)
  403bde:	781b      	ldrb	r3, [r3, #0]
  403be0:	b2db      	uxtb	r3, r3
  403be2:	2b02      	cmp	r3, #2
  403be4:	d11f      	bne.n	403c26 <USART0_Handler+0x6e>
  403be6:	1cfb      	adds	r3, r7, #3
  403be8:	4810      	ldr	r0, [pc, #64]	; (403c2c <USART0_Handler+0x74>)
  403bea:	4619      	mov	r1, r3
  403bec:	4b13      	ldr	r3, [pc, #76]	; (403c3c <USART0_Handler+0x84>)
  403bee:	4798      	blx	r3
  403bf0:	4603      	mov	r3, r0
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	d117      	bne.n	403c26 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  403bf6:	4b12      	ldr	r3, [pc, #72]	; (403c40 <USART0_Handler+0x88>)
  403bf8:	681b      	ldr	r3, [r3, #0]
  403bfa:	1c5a      	adds	r2, r3, #1
  403bfc:	4910      	ldr	r1, [pc, #64]	; (403c40 <USART0_Handler+0x88>)
  403bfe:	600a      	str	r2, [r1, #0]
  403c00:	78fa      	ldrb	r2, [r7, #3]
  403c02:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  403c04:	4b0f      	ldr	r3, [pc, #60]	; (403c44 <USART0_Handler+0x8c>)
  403c06:	681b      	ldr	r3, [r3, #0]
  403c08:	3301      	adds	r3, #1
  403c0a:	4a0e      	ldr	r2, [pc, #56]	; (403c44 <USART0_Handler+0x8c>)
  403c0c:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  403c0e:	4b0d      	ldr	r3, [pc, #52]	; (403c44 <USART0_Handler+0x8c>)
  403c10:	681b      	ldr	r3, [r3, #0]
  403c12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403c16:	d306      	bcc.n	403c26 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403c18:	4b07      	ldr	r3, [pc, #28]	; (403c38 <USART0_Handler+0x80>)
  403c1a:	2203      	movs	r2, #3
  403c1c:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403c1e:	4803      	ldr	r0, [pc, #12]	; (403c2c <USART0_Handler+0x74>)
  403c20:	2101      	movs	r1, #1
  403c22:	4b04      	ldr	r3, [pc, #16]	; (403c34 <USART0_Handler+0x7c>)
  403c24:	4798      	blx	r3
		}
	}
}
  403c26:	3708      	adds	r7, #8
  403c28:	46bd      	mov	sp, r7
  403c2a:	bd80      	pop	{r7, pc}
  403c2c:	40024000 	.word	0x40024000
  403c30:	0040223d 	.word	0x0040223d
  403c34:	00402221 	.word	0x00402221
  403c38:	204009a5 	.word	0x204009a5
  403c3c:	00402311 	.word	0x00402311
  403c40:	20400008 	.word	0x20400008
  403c44:	204009a8 	.word	0x204009a8

00403c48 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
void configure_usart(void)
{
  403c48:	b5b0      	push	{r4, r5, r7, lr}
  403c4a:	b086      	sub	sp, #24
  403c4c:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403c4e:	4b14      	ldr	r3, [pc, #80]	; (403ca0 <configure_usart+0x58>)
  403c50:	463c      	mov	r4, r7
  403c52:	461d      	mov	r5, r3
  403c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403c58:	e895 0003 	ldmia.w	r5, {r0, r1}
  403c5c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403c60:	200d      	movs	r0, #13
  403c62:	4b10      	ldr	r3, [pc, #64]	; (403ca4 <configure_usart+0x5c>)
  403c64:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  403c66:	4b10      	ldr	r3, [pc, #64]	; (403ca8 <configure_usart+0x60>)
  403c68:	4798      	blx	r3
  403c6a:	4602      	mov	r2, r0
  403c6c:	463b      	mov	r3, r7
  403c6e:	480f      	ldr	r0, [pc, #60]	; (403cac <configure_usart+0x64>)
  403c70:	4619      	mov	r1, r3
  403c72:	4b0f      	ldr	r3, [pc, #60]	; (403cb0 <configure_usart+0x68>)
  403c74:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  403c76:	480d      	ldr	r0, [pc, #52]	; (403cac <configure_usart+0x64>)
  403c78:	2104      	movs	r1, #4
  403c7a:	4b0e      	ldr	r3, [pc, #56]	; (403cb4 <configure_usart+0x6c>)
  403c7c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  403c7e:	480b      	ldr	r0, [pc, #44]	; (403cac <configure_usart+0x64>)
  403c80:	f04f 31ff 	mov.w	r1, #4294967295
  403c84:	4b0c      	ldr	r3, [pc, #48]	; (403cb8 <configure_usart+0x70>)
  403c86:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  403c88:	4808      	ldr	r0, [pc, #32]	; (403cac <configure_usart+0x64>)
  403c8a:	4b0c      	ldr	r3, [pc, #48]	; (403cbc <configure_usart+0x74>)
  403c8c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403c8e:	4807      	ldr	r0, [pc, #28]	; (403cac <configure_usart+0x64>)
  403c90:	4b0b      	ldr	r3, [pc, #44]	; (403cc0 <configure_usart+0x78>)
  403c92:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  403c94:	200d      	movs	r0, #13
  403c96:	4b0b      	ldr	r3, [pc, #44]	; (403cc4 <configure_usart+0x7c>)
  403c98:	4798      	blx	r3
}
  403c9a:	3718      	adds	r7, #24
  403c9c:	46bd      	mov	sp, r7
  403c9e:	bdb0      	pop	{r4, r5, r7, pc}
  403ca0:	0040c588 	.word	0x0040c588
  403ca4:	004035ed 	.word	0x004035ed
  403ca8:	004035c5 	.word	0x004035c5
  403cac:	40024000 	.word	0x40024000
  403cb0:	00402105 	.word	0x00402105
  403cb4:	004021b9 	.word	0x004021b9
  403cb8:	00402221 	.word	0x00402221
  403cbc:	00402189 	.word	0x00402189
  403cc0:	004021d5 	.word	0x004021d5
  403cc4:	00403399 	.word	0x00403399

00403cc8 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
void configure_systick(void)
{
  403cc8:	b580      	push	{r7, lr}
  403cca:	b082      	sub	sp, #8
  403ccc:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  403cce:	4b0a      	ldr	r3, [pc, #40]	; (403cf8 <configure_systick+0x30>)
  403cd0:	4798      	blx	r3
  403cd2:	4602      	mov	r2, r0
  403cd4:	4b09      	ldr	r3, [pc, #36]	; (403cfc <configure_systick+0x34>)
  403cd6:	fba3 2302 	umull	r2, r3, r3, r2
  403cda:	099b      	lsrs	r3, r3, #6
  403cdc:	4618      	mov	r0, r3
  403cde:	4b08      	ldr	r3, [pc, #32]	; (403d00 <configure_systick+0x38>)
  403ce0:	4798      	blx	r3
  403ce2:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  403ce4:	687b      	ldr	r3, [r7, #4]
  403ce6:	2b00      	cmp	r3, #0
  403ce8:	d003      	beq.n	403cf2 <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  403cea:	4806      	ldr	r0, [pc, #24]	; (403d04 <configure_systick+0x3c>)
  403cec:	4b06      	ldr	r3, [pc, #24]	; (403d08 <configure_systick+0x40>)
  403cee:	4798      	blx	r3
		while (1) {
		}
  403cf0:	e7fe      	b.n	403cf0 <configure_systick+0x28>
	}
}
  403cf2:	3708      	adds	r7, #8
  403cf4:	46bd      	mov	sp, r7
  403cf6:	bd80      	pop	{r7, pc}
  403cf8:	004035c5 	.word	0x004035c5
  403cfc:	10624dd3 	.word	0x10624dd3
  403d00:	00403485 	.word	0x00403485
  403d04:	0040c5a0 	.word	0x0040c5a0
  403d08:	00407609 	.word	0x00407609

00403d0c <configure_console>:

/**
 *  Configure UART for debug message output.
 */
void configure_console(void)
{
  403d0c:	b590      	push	{r4, r7, lr}
  403d0e:	b085      	sub	sp, #20
  403d10:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403d12:	4b08      	ldr	r3, [pc, #32]	; (403d34 <configure_console+0x28>)
  403d14:	463c      	mov	r4, r7
  403d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403d1c:	2007      	movs	r0, #7
  403d1e:	4b06      	ldr	r3, [pc, #24]	; (403d38 <configure_console+0x2c>)
  403d20:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403d22:	463b      	mov	r3, r7
  403d24:	4805      	ldr	r0, [pc, #20]	; (403d3c <configure_console+0x30>)
  403d26:	4619      	mov	r1, r3
  403d28:	4b05      	ldr	r3, [pc, #20]	; (403d40 <configure_console+0x34>)
  403d2a:	4798      	blx	r3
}
  403d2c:	3714      	adds	r7, #20
  403d2e:	46bd      	mov	sp, r7
  403d30:	bd90      	pop	{r4, r7, pc}
  403d32:	bf00      	nop
  403d34:	0040c5c4 	.word	0x0040c5c4
  403d38:	004035ed 	.word	0x004035ed
  403d3c:	400e0800 	.word	0x400e0800
  403d40:	004039e1 	.word	0x004039e1

00403d44 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403d44:	b580      	push	{r7, lr}
  403d46:	b082      	sub	sp, #8
  403d48:	af00      	add	r7, sp, #0
  403d4a:	6078      	str	r0, [r7, #4]
  403d4c:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403d4e:	e013      	b.n	403d78 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403d50:	687b      	ldr	r3, [r7, #4]
  403d52:	781b      	ldrb	r3, [r3, #0]
  403d54:	4810      	ldr	r0, [pc, #64]	; (403d98 <func_transmit+0x54>)
  403d56:	4619      	mov	r1, r3
  403d58:	4b10      	ldr	r3, [pc, #64]	; (403d9c <func_transmit+0x58>)
  403d5a:	4798      	blx	r3
  403d5c:	4603      	mov	r3, r0
  403d5e:	2b00      	cmp	r3, #0
  403d60:	d10a      	bne.n	403d78 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  403d62:	480d      	ldr	r0, [pc, #52]	; (403d98 <func_transmit+0x54>)
  403d64:	f240 2102 	movw	r1, #514	; 0x202
  403d68:	4b0d      	ldr	r3, [pc, #52]	; (403da0 <func_transmit+0x5c>)
  403d6a:	4798      	blx	r3
			ulsize--;
  403d6c:	683b      	ldr	r3, [r7, #0]
  403d6e:	3b01      	subs	r3, #1
  403d70:	603b      	str	r3, [r7, #0]
			p_buff++;
  403d72:	687b      	ldr	r3, [r7, #4]
  403d74:	3301      	adds	r3, #1
  403d76:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  403d78:	683b      	ldr	r3, [r7, #0]
  403d7a:	2b00      	cmp	r3, #0
  403d7c:	d1e8      	bne.n	403d50 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  403d7e:	bf00      	nop
  403d80:	4805      	ldr	r0, [pc, #20]	; (403d98 <func_transmit+0x54>)
  403d82:	4b08      	ldr	r3, [pc, #32]	; (403da4 <func_transmit+0x60>)
  403d84:	4798      	blx	r3
  403d86:	4603      	mov	r3, r0
  403d88:	2b00      	cmp	r3, #0
  403d8a:	d0f9      	beq.n	403d80 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  403d8c:	2300      	movs	r3, #0
}
  403d8e:	4618      	mov	r0, r3
  403d90:	3708      	adds	r7, #8
  403d92:	46bd      	mov	sp, r7
  403d94:	bd80      	pop	{r7, pc}
  403d96:	bf00      	nop
  403d98:	40024000 	.word	0x40024000
  403d9c:	004022dd 	.word	0x004022dd
  403da0:	00402205 	.word	0x00402205
  403da4:	0040228d 	.word	0x0040228d

00403da8 <twi_init>:
	SHELF_ACTIVE
};

void twi_init(void);
void twi_init(void)
{
  403da8:	b580      	push	{r7, lr}
  403daa:	b084      	sub	sp, #16
  403dac:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  403dae:	2013      	movs	r0, #19
  403db0:	4b09      	ldr	r3, [pc, #36]	; (403dd8 <twi_init+0x30>)
  403db2:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  403db4:	4b09      	ldr	r3, [pc, #36]	; (403ddc <twi_init+0x34>)
  403db6:	4798      	blx	r3
  403db8:	4603      	mov	r3, r0
  403dba:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  403dbc:	4b08      	ldr	r3, [pc, #32]	; (403de0 <twi_init+0x38>)
  403dbe:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  403dc0:	1d3b      	adds	r3, r7, #4
  403dc2:	4808      	ldr	r0, [pc, #32]	; (403de4 <twi_init+0x3c>)
  403dc4:	4619      	mov	r1, r3
  403dc6:	4b08      	ldr	r3, [pc, #32]	; (403de8 <twi_init+0x40>)
  403dc8:	4798      	blx	r3
  403dca:	4603      	mov	r3, r0
  403dcc:	2b00      	cmp	r3, #0
  403dce:	d000      	beq.n	403dd2 <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403dd0:	e7fe      	b.n	403dd0 <twi_init+0x28>
	}
}
  403dd2:	3710      	adds	r7, #16
  403dd4:	46bd      	mov	sp, r7
  403dd6:	bd80      	pop	{r7, pc}
  403dd8:	004016d1 	.word	0x004016d1
  403ddc:	004035c5 	.word	0x004035c5
  403de0:	00061a80 	.word	0x00061a80
  403de4:	40018000 	.word	0x40018000
  403de8:	00401c65 	.word	0x00401c65

00403dec <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  403dec:	b580      	push	{r7, lr}
  403dee:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  403df0:	4804      	ldr	r0, [pc, #16]	; (403e04 <afec0_data_ready+0x18>)
  403df2:	4b05      	ldr	r3, [pc, #20]	; (403e08 <afec0_data_ready+0x1c>)
  403df4:	4798      	blx	r3
  403df6:	4602      	mov	r2, r0
  403df8:	4b04      	ldr	r3, [pc, #16]	; (403e0c <afec0_data_ready+0x20>)
  403dfa:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403dfc:	4b04      	ldr	r3, [pc, #16]	; (403e10 <afec0_data_ready+0x24>)
  403dfe:	2201      	movs	r2, #1
  403e00:	701a      	strb	r2, [r3, #0]
}
  403e02:	bd80      	pop	{r7, pc}
  403e04:	4003c000 	.word	0x4003c000
  403e08:	00403511 	.word	0x00403511
  403e0c:	20401330 	.word	0x20401330
  403e10:	204009b0 	.word	0x204009b0

00403e14 <afec1_data_ready>:

static void afec1_data_ready(void)
{
  403e14:	b580      	push	{r7, lr}
  403e16:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  403e18:	4804      	ldr	r0, [pc, #16]	; (403e2c <afec1_data_ready+0x18>)
  403e1a:	4b05      	ldr	r3, [pc, #20]	; (403e30 <afec1_data_ready+0x1c>)
  403e1c:	4798      	blx	r3
  403e1e:	4602      	mov	r2, r0
  403e20:	4b04      	ldr	r3, [pc, #16]	; (403e34 <afec1_data_ready+0x20>)
  403e22:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403e24:	4b04      	ldr	r3, [pc, #16]	; (403e38 <afec1_data_ready+0x24>)
  403e26:	2201      	movs	r2, #1
  403e28:	701a      	strb	r2, [r3, #0]
}
  403e2a:	bd80      	pop	{r7, pc}
  403e2c:	40064000 	.word	0x40064000
  403e30:	00403511 	.word	0x00403511
  403e34:	20400af4 	.word	0x20400af4
  403e38:	204009b0 	.word	0x204009b0

00403e3c <init_adc>:



void init_adc(void)
{
  403e3c:	b590      	push	{r4, r7, lr}
  403e3e:	b089      	sub	sp, #36	; 0x24
  403e40:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;
	struct afec_ch_config afec_ch_cfg;

	
	afec_enable(AFEC0);
  403e42:	4827      	ldr	r0, [pc, #156]	; (403ee0 <init_adc+0xa4>)
  403e44:	4b27      	ldr	r3, [pc, #156]	; (403ee4 <init_adc+0xa8>)
  403e46:	4798      	blx	r3
	afec_enable(AFEC1);
  403e48:	4827      	ldr	r0, [pc, #156]	; (403ee8 <init_adc+0xac>)
  403e4a:	4b26      	ldr	r3, [pc, #152]	; (403ee4 <init_adc+0xa8>)
  403e4c:	4798      	blx	r3

	afec_get_config_defaults(&afec_cfg);
  403e4e:	f107 0308 	add.w	r3, r7, #8
  403e52:	4618      	mov	r0, r3
  403e54:	4b25      	ldr	r3, [pc, #148]	; (403eec <init_adc+0xb0>)
  403e56:	4798      	blx	r3
	afec_cfg.resolution = AFEC_12_BITS;
  403e58:	2300      	movs	r3, #0
  403e5a:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  403e5c:	f107 0308 	add.w	r3, r7, #8
  403e60:	481f      	ldr	r0, [pc, #124]	; (403ee0 <init_adc+0xa4>)
  403e62:	4619      	mov	r1, r3
  403e64:	4b22      	ldr	r3, [pc, #136]	; (403ef0 <init_adc+0xb4>)
  403e66:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  403e68:	f107 0308 	add.w	r3, r7, #8
  403e6c:	481e      	ldr	r0, [pc, #120]	; (403ee8 <init_adc+0xac>)
  403e6e:	4619      	mov	r1, r3
  403e70:	4b1f      	ldr	r3, [pc, #124]	; (403ef0 <init_adc+0xb4>)
  403e72:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403e74:	1d3b      	adds	r3, r7, #4
  403e76:	4618      	mov	r0, r3
  403e78:	4b1e      	ldr	r3, [pc, #120]	; (403ef4 <init_adc+0xb8>)
  403e7a:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  403e7c:	2303      	movs	r3, #3
  403e7e:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  403e80:	1d3b      	adds	r3, r7, #4
  403e82:	4819      	ldr	r0, [pc, #100]	; (403ee8 <init_adc+0xac>)
  403e84:	2109      	movs	r1, #9
  403e86:	461a      	mov	r2, r3
  403e88:	4b1b      	ldr	r3, [pc, #108]	; (403ef8 <init_adc+0xbc>)
  403e8a:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  403e8c:	1d3b      	adds	r3, r7, #4
  403e8e:	4814      	ldr	r0, [pc, #80]	; (403ee0 <init_adc+0xa4>)
  403e90:	2104      	movs	r1, #4
  403e92:	461a      	mov	r2, r3
  403e94:	4b18      	ldr	r3, [pc, #96]	; (403ef8 <init_adc+0xbc>)
  403e96:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_4, &afec_ch_cfg);
  403e98:	1d3b      	adds	r3, r7, #4
  403e9a:	4813      	ldr	r0, [pc, #76]	; (403ee8 <init_adc+0xac>)
  403e9c:	2104      	movs	r1, #4
  403e9e:	461a      	mov	r2, r3
  403ea0:	4b15      	ldr	r3, [pc, #84]	; (403ef8 <init_adc+0xbc>)
  403ea2:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_5, &afec_ch_cfg);
  403ea4:	1d3b      	adds	r3, r7, #4
  403ea6:	4810      	ldr	r0, [pc, #64]	; (403ee8 <init_adc+0xac>)
  403ea8:	2105      	movs	r1, #5
  403eaa:	461a      	mov	r2, r3
  403eac:	4b12      	ldr	r3, [pc, #72]	; (403ef8 <init_adc+0xbc>)
  403eae:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  403eb0:	480b      	ldr	r0, [pc, #44]	; (403ee0 <init_adc+0xa4>)
  403eb2:	2100      	movs	r1, #0
  403eb4:	4b11      	ldr	r3, [pc, #68]	; (403efc <init_adc+0xc0>)
  403eb6:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  403eb8:	480b      	ldr	r0, [pc, #44]	; (403ee8 <init_adc+0xac>)
  403eba:	2100      	movs	r1, #0
  403ebc:	4b0f      	ldr	r3, [pc, #60]	; (403efc <init_adc+0xc0>)
  403ebe:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  403ec0:	4807      	ldr	r0, [pc, #28]	; (403ee0 <init_adc+0xa4>)
  403ec2:	210c      	movs	r1, #12
  403ec4:	4a0e      	ldr	r2, [pc, #56]	; (403f00 <init_adc+0xc4>)
  403ec6:	2301      	movs	r3, #1
  403ec8:	4c0e      	ldr	r4, [pc, #56]	; (403f04 <init_adc+0xc8>)
  403eca:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  403ecc:	4806      	ldr	r0, [pc, #24]	; (403ee8 <init_adc+0xac>)
  403ece:	210c      	movs	r1, #12
  403ed0:	4a0d      	ldr	r2, [pc, #52]	; (403f08 <init_adc+0xcc>)
  403ed2:	2301      	movs	r3, #1
  403ed4:	4c0b      	ldr	r4, [pc, #44]	; (403f04 <init_adc+0xc8>)
  403ed6:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  403ed8:	3724      	adds	r7, #36	; 0x24
  403eda:	46bd      	mov	sp, r7
  403edc:	bd90      	pop	{r4, r7, pc}
  403ede:	bf00      	nop
  403ee0:	4003c000 	.word	0x4003c000
  403ee4:	00401291 	.word	0x00401291
  403ee8:	40064000 	.word	0x40064000
  403eec:	00400f8d 	.word	0x00400f8d
  403ef0:	0040100d 	.word	0x0040100d
  403ef4:	00400fed 	.word	0x00400fed
  403ef8:	00400efd 	.word	0x00400efd
  403efc:	004034cd 	.word	0x004034cd
  403f00:	00403ded 	.word	0x00403ded
  403f04:	00401085 	.word	0x00401085
  403f08:	00403e15 	.word	0x00403e15

00403f0c <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  403f0c:	b580      	push	{r7, lr}
  403f0e:	b082      	sub	sp, #8
  403f10:	af00      	add	r7, sp, #0
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  403f12:	481e      	ldr	r0, [pc, #120]	; (403f8c <PWM0_Handler+0x80>)
  403f14:	4b1e      	ldr	r3, [pc, #120]	; (403f90 <PWM0_Handler+0x84>)
  403f16:	4798      	blx	r3
  403f18:	6078      	str	r0, [r7, #4]

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  403f1a:	687b      	ldr	r3, [r7, #4]
  403f1c:	f003 0301 	and.w	r3, r3, #1
  403f20:	2b00      	cmp	r3, #0
  403f22:	d030      	beq.n	403f86 <PWM0_Handler+0x7a>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  403f24:	4b1b      	ldr	r3, [pc, #108]	; (403f94 <PWM0_Handler+0x88>)
  403f26:	681b      	ldr	r3, [r3, #0]
  403f28:	3301      	adds	r3, #1
  403f2a:	4a1a      	ldr	r2, [pc, #104]	; (403f94 <PWM0_Handler+0x88>)
  403f2c:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  403f2e:	4b19      	ldr	r3, [pc, #100]	; (403f94 <PWM0_Handler+0x88>)
  403f30:	681b      	ldr	r3, [r3, #0]
  403f32:	2b28      	cmp	r3, #40	; 0x28
  403f34:	d127      	bne.n	403f86 <PWM0_Handler+0x7a>
			/* Fade in */
			if (fade_in) {
  403f36:	4b18      	ldr	r3, [pc, #96]	; (403f98 <PWM0_Handler+0x8c>)
  403f38:	781b      	ldrb	r3, [r3, #0]
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	d00c      	beq.n	403f58 <PWM0_Handler+0x4c>
				ul_duty++;
  403f3e:	4b17      	ldr	r3, [pc, #92]	; (403f9c <PWM0_Handler+0x90>)
  403f40:	681b      	ldr	r3, [r3, #0]
  403f42:	3301      	adds	r3, #1
  403f44:	4a15      	ldr	r2, [pc, #84]	; (403f9c <PWM0_Handler+0x90>)
  403f46:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  403f48:	4b14      	ldr	r3, [pc, #80]	; (403f9c <PWM0_Handler+0x90>)
  403f4a:	681b      	ldr	r3, [r3, #0]
  403f4c:	2b64      	cmp	r3, #100	; 0x64
  403f4e:	d10f      	bne.n	403f70 <PWM0_Handler+0x64>
					fade_in = 0;
  403f50:	4b11      	ldr	r3, [pc, #68]	; (403f98 <PWM0_Handler+0x8c>)
  403f52:	2200      	movs	r2, #0
  403f54:	701a      	strb	r2, [r3, #0]
  403f56:	e00b      	b.n	403f70 <PWM0_Handler+0x64>
					}
				} else {
				/* Fade out */
				ul_duty--;
  403f58:	4b10      	ldr	r3, [pc, #64]	; (403f9c <PWM0_Handler+0x90>)
  403f5a:	681b      	ldr	r3, [r3, #0]
  403f5c:	3b01      	subs	r3, #1
  403f5e:	4a0f      	ldr	r2, [pc, #60]	; (403f9c <PWM0_Handler+0x90>)
  403f60:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  403f62:	4b0e      	ldr	r3, [pc, #56]	; (403f9c <PWM0_Handler+0x90>)
  403f64:	681b      	ldr	r3, [r3, #0]
  403f66:	2b32      	cmp	r3, #50	; 0x32
  403f68:	d102      	bne.n	403f70 <PWM0_Handler+0x64>
					fade_in = 1;
  403f6a:	4b0b      	ldr	r3, [pc, #44]	; (403f98 <PWM0_Handler+0x8c>)
  403f6c:	2201      	movs	r2, #1
  403f6e:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  403f70:	4b08      	ldr	r3, [pc, #32]	; (403f94 <PWM0_Handler+0x88>)
  403f72:	2200      	movs	r2, #0
  403f74:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403f76:	4b0a      	ldr	r3, [pc, #40]	; (403fa0 <PWM0_Handler+0x94>)
  403f78:	2200      	movs	r2, #0
  403f7a:	601a      	str	r2, [r3, #0]
//jsi 16feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
					pwm_channel_update_duty(PWM0, &g_pwm_channel_led, (PERIOD_VALUE/2)); //jsi 16feb16 just fixed for now
  403f7c:	4803      	ldr	r0, [pc, #12]	; (403f8c <PWM0_Handler+0x80>)
  403f7e:	4908      	ldr	r1, [pc, #32]	; (403fa0 <PWM0_Handler+0x94>)
  403f80:	2232      	movs	r2, #50	; 0x32
  403f82:	4b08      	ldr	r3, [pc, #32]	; (403fa4 <PWM0_Handler+0x98>)
  403f84:	4798      	blx	r3
//jsi 15feb16			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
//jsi 15feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
		}
	}
}
  403f86:	3708      	adds	r7, #8
  403f88:	46bd      	mov	sp, r7
  403f8a:	bd80      	pop	{r7, pc}
  403f8c:	40020000 	.word	0x40020000
  403f90:	00401bc9 	.word	0x00401bc9
  403f94:	204009b4 	.word	0x204009b4
  403f98:	2040000c 	.word	0x2040000c
  403f9c:	20400010 	.word	0x20400010
  403fa0:	20400af8 	.word	0x20400af8
  403fa4:	00401b39 	.word	0x00401b39

00403fa8 <init_pwm>:



void init_pwm(void)
{
  403fa8:	b580      	push	{r7, lr}
  403faa:	b084      	sub	sp, #16
  403fac:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  403fae:	201f      	movs	r0, #31
  403fb0:	4b30      	ldr	r3, [pc, #192]	; (404074 <init_pwm+0xcc>)
  403fb2:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403fb4:	4830      	ldr	r0, [pc, #192]	; (404078 <init_pwm+0xd0>)
  403fb6:	2100      	movs	r1, #0
  403fb8:	4b30      	ldr	r3, [pc, #192]	; (40407c <init_pwm+0xd4>)
  403fba:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  403fbc:	482e      	ldr	r0, [pc, #184]	; (404078 <init_pwm+0xd0>)
  403fbe:	2101      	movs	r1, #1
  403fc0:	4b2e      	ldr	r3, [pc, #184]	; (40407c <init_pwm+0xd4>)
  403fc2:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403fc4:	4b2e      	ldr	r3, [pc, #184]	; (404080 <init_pwm+0xd8>)
  403fc6:	607b      	str	r3, [r7, #4]
  403fc8:	2300      	movs	r3, #0
  403fca:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  403fcc:	4b2d      	ldr	r3, [pc, #180]	; (404084 <init_pwm+0xdc>)
  403fce:	4798      	blx	r3
  403fd0:	4603      	mov	r3, r0
	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403fd2:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM0, &clock_setting);
  403fd4:	1d3b      	adds	r3, r7, #4
  403fd6:	4828      	ldr	r0, [pc, #160]	; (404078 <init_pwm+0xd0>)
  403fd8:	4619      	mov	r1, r3
  403fda:	4b2b      	ldr	r3, [pc, #172]	; (404088 <init_pwm+0xe0>)
  403fdc:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  403fde:	4b2b      	ldr	r3, [pc, #172]	; (40408c <init_pwm+0xe4>)
  403fe0:	2200      	movs	r2, #0
  403fe2:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  403fe4:	4b29      	ldr	r3, [pc, #164]	; (40408c <init_pwm+0xe4>)
  403fe6:	2200      	movs	r2, #0
  403fe8:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  403fea:	4b28      	ldr	r3, [pc, #160]	; (40408c <init_pwm+0xe4>)
  403fec:	220b      	movs	r2, #11
  403fee:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  403ff0:	4b26      	ldr	r3, [pc, #152]	; (40408c <init_pwm+0xe4>)
  403ff2:	2264      	movs	r2, #100	; 0x64
  403ff4:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  403ff6:	4b25      	ldr	r3, [pc, #148]	; (40408c <init_pwm+0xe4>)
  403ff8:	2232      	movs	r2, #50	; 0x32
  403ffa:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403ffc:	4b23      	ldr	r3, [pc, #140]	; (40408c <init_pwm+0xe4>)
  403ffe:	2200      	movs	r2, #0
  404000:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  404002:	481d      	ldr	r0, [pc, #116]	; (404078 <init_pwm+0xd0>)
  404004:	4921      	ldr	r1, [pc, #132]	; (40408c <init_pwm+0xe4>)
  404006:	4b22      	ldr	r3, [pc, #136]	; (404090 <init_pwm+0xe8>)
  404008:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  40400a:	481b      	ldr	r0, [pc, #108]	; (404078 <init_pwm+0xd0>)
  40400c:	2100      	movs	r1, #0
  40400e:	2200      	movs	r2, #0
  404010:	4b20      	ldr	r3, [pc, #128]	; (404094 <init_pwm+0xec>)
  404012:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  404014:	4b1d      	ldr	r3, [pc, #116]	; (40408c <init_pwm+0xe4>)
  404016:	f44f 7280 	mov.w	r2, #256	; 0x100
  40401a:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  40401c:	4b1b      	ldr	r3, [pc, #108]	; (40408c <init_pwm+0xe4>)
  40401e:	2201      	movs	r2, #1
  404020:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  404022:	4b1a      	ldr	r3, [pc, #104]	; (40408c <init_pwm+0xe4>)
  404024:	220b      	movs	r2, #11
  404026:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  404028:	4b18      	ldr	r3, [pc, #96]	; (40408c <init_pwm+0xe4>)
  40402a:	2264      	movs	r2, #100	; 0x64
  40402c:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  40402e:	4b17      	ldr	r3, [pc, #92]	; (40408c <init_pwm+0xe4>)
  404030:	2232      	movs	r2, #50	; 0x32
  404032:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  404034:	4b15      	ldr	r3, [pc, #84]	; (40408c <init_pwm+0xe4>)
  404036:	2201      	movs	r2, #1
  404038:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  40403a:	480f      	ldr	r0, [pc, #60]	; (404078 <init_pwm+0xd0>)
  40403c:	4913      	ldr	r1, [pc, #76]	; (40408c <init_pwm+0xe4>)
  40403e:	4b14      	ldr	r3, [pc, #80]	; (404090 <init_pwm+0xe8>)
  404040:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  404042:	480d      	ldr	r0, [pc, #52]	; (404078 <init_pwm+0xd0>)
  404044:	2101      	movs	r1, #1
  404046:	2200      	movs	r2, #0
  404048:	4b13      	ldr	r3, [pc, #76]	; (404098 <init_pwm+0xf0>)
  40404a:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  40404c:	201f      	movs	r0, #31
  40404e:	4b13      	ldr	r3, [pc, #76]	; (40409c <init_pwm+0xf4>)
  404050:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  404052:	201f      	movs	r0, #31
  404054:	4b12      	ldr	r3, [pc, #72]	; (4040a0 <init_pwm+0xf8>)
  404056:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  404058:	201f      	movs	r0, #31
  40405a:	2100      	movs	r1, #0
  40405c:	4b11      	ldr	r3, [pc, #68]	; (4040a4 <init_pwm+0xfc>)
  40405e:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  404060:	201f      	movs	r0, #31
  404062:	4b11      	ldr	r3, [pc, #68]	; (4040a8 <init_pwm+0x100>)
  404064:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  404066:	4804      	ldr	r0, [pc, #16]	; (404078 <init_pwm+0xd0>)
  404068:	2100      	movs	r1, #0
  40406a:	4b10      	ldr	r3, [pc, #64]	; (4040ac <init_pwm+0x104>)
  40406c:	4798      	blx	r3
//jsi 15feb16	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);

}
  40406e:	3710      	adds	r7, #16
  404070:	46bd      	mov	sp, r7
  404072:	bd80      	pop	{r7, pc}
  404074:	004016d1 	.word	0x004016d1
  404078:	40020000 	.word	0x40020000
  40407c:	00401ba5 	.word	0x00401ba5
  404080:	00030d40 	.word	0x00030d40
  404084:	004035c5 	.word	0x004035c5
  404088:	004017d1 	.word	0x004017d1
  40408c:	20400af8 	.word	0x20400af8
  404090:	00401851 	.word	0x00401851
  404094:	00401be1 	.word	0x00401be1
  404098:	00401c11 	.word	0x00401c11
  40409c:	004033c9 	.word	0x004033c9
  4040a0:	004033fd 	.word	0x004033fd
  4040a4:	00403431 	.word	0x00403431
  4040a8:	00403399 	.word	0x00403399
  4040ac:	00401b81 	.word	0x00401b81

004040b0 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4040b0:	b480      	push	{r7}
  4040b2:	b083      	sub	sp, #12
  4040b4:	af00      	add	r7, sp, #0
  4040b6:	6078      	str	r0, [r7, #4]
  4040b8:	460b      	mov	r3, r1
  4040ba:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4040bc:	370c      	adds	r7, #12
  4040be:	46bd      	mov	sp, r7
  4040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040c4:	4770      	bx	lr
  4040c6:	bf00      	nop

004040c8 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  4040c8:	b480      	push	{r7}
  4040ca:	b083      	sub	sp, #12
  4040cc:	af00      	add	r7, sp, #0
  4040ce:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  4040d0:	687b      	ldr	r3, [r7, #4]
  4040d2:	2202      	movs	r2, #2
  4040d4:	601a      	str	r2, [r3, #0]
}
  4040d6:	370c      	adds	r7, #12
  4040d8:	46bd      	mov	sp, r7
  4040da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040de:	4770      	bx	lr

004040e0 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4040e0:	b580      	push	{r7, lr}
  4040e2:	b082      	sub	sp, #8
  4040e4:	af00      	add	r7, sp, #0
  4040e6:	6078      	str	r0, [r7, #4]
  4040e8:	460b      	mov	r3, r1
  4040ea:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4040ec:	887b      	ldrh	r3, [r7, #2]
  4040ee:	f640 72ff 	movw	r2, #4095	; 0xfff
  4040f2:	4293      	cmp	r3, r2
  4040f4:	d004      	beq.n	404100 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4040f6:	887b      	ldrh	r3, [r7, #2]
  4040f8:	6878      	ldr	r0, [r7, #4]
  4040fa:	4619      	mov	r1, r3
  4040fc:	4b09      	ldr	r3, [pc, #36]	; (404124 <afec_channel_enable+0x44>)
  4040fe:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404100:	887b      	ldrh	r3, [r7, #2]
  404102:	f640 72ff 	movw	r2, #4095	; 0xfff
  404106:	4293      	cmp	r3, r2
  404108:	d005      	beq.n	404116 <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40410a:	887b      	ldrh	r3, [r7, #2]
  40410c:	2201      	movs	r2, #1
  40410e:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404112:	461a      	mov	r2, r3
  404114:	e001      	b.n	40411a <afec_channel_enable+0x3a>
  404116:	f640 72ff 	movw	r2, #4095	; 0xfff
  40411a:	687b      	ldr	r3, [r7, #4]
  40411c:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  40411e:	3708      	adds	r7, #8
  404120:	46bd      	mov	sp, r7
  404122:	bd80      	pop	{r7, pc}
  404124:	004040b1 	.word	0x004040b1

00404128 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  404128:	b580      	push	{r7, lr}
  40412a:	b082      	sub	sp, #8
  40412c:	af00      	add	r7, sp, #0
  40412e:	6078      	str	r0, [r7, #4]
  404130:	460b      	mov	r3, r1
  404132:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  404134:	887b      	ldrh	r3, [r7, #2]
  404136:	f640 72ff 	movw	r2, #4095	; 0xfff
  40413a:	4293      	cmp	r3, r2
  40413c:	d004      	beq.n	404148 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40413e:	887b      	ldrh	r3, [r7, #2]
  404140:	6878      	ldr	r0, [r7, #4]
  404142:	4619      	mov	r1, r3
  404144:	4b09      	ldr	r3, [pc, #36]	; (40416c <afec_channel_disable+0x44>)
  404146:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  404148:	887b      	ldrh	r3, [r7, #2]
  40414a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40414e:	4293      	cmp	r3, r2
  404150:	d005      	beq.n	40415e <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  404152:	887b      	ldrh	r3, [r7, #2]
  404154:	2201      	movs	r2, #1
  404156:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  40415a:	461a      	mov	r2, r3
  40415c:	e001      	b.n	404162 <afec_channel_disable+0x3a>
  40415e:	f640 72ff 	movw	r2, #4095	; 0xfff
  404162:	687b      	ldr	r3, [r7, #4]
  404164:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  404166:	3708      	adds	r7, #8
  404168:	46bd      	mov	sp, r7
  40416a:	bd80      	pop	{r7, pc}
  40416c:	004040b1 	.word	0x004040b1

00404170 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404170:	b480      	push	{r7}
  404172:	b08d      	sub	sp, #52	; 0x34
  404174:	af00      	add	r7, sp, #0
  404176:	6078      	str	r0, [r7, #4]
  404178:	460b      	mov	r3, r1
  40417a:	70fb      	strb	r3, [r7, #3]
  40417c:	687b      	ldr	r3, [r7, #4]
  40417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  404180:	78fb      	ldrb	r3, [r7, #3]
  404182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404188:	627b      	str	r3, [r7, #36]	; 0x24
  40418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40418c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40418e:	6a3b      	ldr	r3, [r7, #32]
  404190:	095b      	lsrs	r3, r3, #5
  404192:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404194:	69fa      	ldr	r2, [r7, #28]
  404196:	4b17      	ldr	r3, [pc, #92]	; (4041f4 <ioport_set_pin_dir+0x84>)
  404198:	4413      	add	r3, r2
  40419a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40419c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40419e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041a2:	2b01      	cmp	r3, #1
  4041a4:	d109      	bne.n	4041ba <ioport_set_pin_dir+0x4a>
  4041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041a8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041aa:	697b      	ldr	r3, [r7, #20]
  4041ac:	f003 031f 	and.w	r3, r3, #31
  4041b0:	2201      	movs	r2, #1
  4041b2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4041b4:	69bb      	ldr	r3, [r7, #24]
  4041b6:	611a      	str	r2, [r3, #16]
  4041b8:	e00c      	b.n	4041d4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4041ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041be:	2b00      	cmp	r3, #0
  4041c0:	d108      	bne.n	4041d4 <ioport_set_pin_dir+0x64>
  4041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041c4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041c6:	693b      	ldr	r3, [r7, #16]
  4041c8:	f003 031f 	and.w	r3, r3, #31
  4041cc:	2201      	movs	r2, #1
  4041ce:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4041d0:	69bb      	ldr	r3, [r7, #24]
  4041d2:	615a      	str	r2, [r3, #20]
  4041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041d6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041d8:	68fb      	ldr	r3, [r7, #12]
  4041da:	f003 031f 	and.w	r3, r3, #31
  4041de:	2201      	movs	r2, #1
  4041e0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4041e2:	69bb      	ldr	r3, [r7, #24]
  4041e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4041e8:	3734      	adds	r7, #52	; 0x34
  4041ea:	46bd      	mov	sp, r7
  4041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041f0:	4770      	bx	lr
  4041f2:	bf00      	nop
  4041f4:	00200707 	.word	0x00200707

004041f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4041f8:	b480      	push	{r7}
  4041fa:	b08b      	sub	sp, #44	; 0x2c
  4041fc:	af00      	add	r7, sp, #0
  4041fe:	6078      	str	r0, [r7, #4]
  404200:	460b      	mov	r3, r1
  404202:	70fb      	strb	r3, [r7, #3]
  404204:	687b      	ldr	r3, [r7, #4]
  404206:	627b      	str	r3, [r7, #36]	; 0x24
  404208:	78fb      	ldrb	r3, [r7, #3]
  40420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404210:	61fb      	str	r3, [r7, #28]
  404212:	69fb      	ldr	r3, [r7, #28]
  404214:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404216:	69bb      	ldr	r3, [r7, #24]
  404218:	095b      	lsrs	r3, r3, #5
  40421a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40421c:	697a      	ldr	r2, [r7, #20]
  40421e:	4b10      	ldr	r3, [pc, #64]	; (404260 <ioport_set_pin_level+0x68>)
  404220:	4413      	add	r3, r2
  404222:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404224:	613b      	str	r3, [r7, #16]

	if (level) {
  404226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40422a:	2b00      	cmp	r3, #0
  40422c:	d009      	beq.n	404242 <ioport_set_pin_level+0x4a>
  40422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404230:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404232:	68fb      	ldr	r3, [r7, #12]
  404234:	f003 031f 	and.w	r3, r3, #31
  404238:	2201      	movs	r2, #1
  40423a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40423c:	693b      	ldr	r3, [r7, #16]
  40423e:	631a      	str	r2, [r3, #48]	; 0x30
  404240:	e008      	b.n	404254 <ioport_set_pin_level+0x5c>
  404242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404244:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404246:	68bb      	ldr	r3, [r7, #8]
  404248:	f003 031f 	and.w	r3, r3, #31
  40424c:	2201      	movs	r2, #1
  40424e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404250:	693b      	ldr	r3, [r7, #16]
  404252:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  404254:	372c      	adds	r7, #44	; 0x2c
  404256:	46bd      	mov	sp, r7
  404258:	f85d 7b04 	ldr.w	r7, [sp], #4
  40425c:	4770      	bx	lr
  40425e:	bf00      	nop
  404260:	00200707 	.word	0x00200707

00404264 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  404264:	b480      	push	{r7}
  404266:	b089      	sub	sp, #36	; 0x24
  404268:	af00      	add	r7, sp, #0
  40426a:	6078      	str	r0, [r7, #4]
  40426c:	687b      	ldr	r3, [r7, #4]
  40426e:	61fb      	str	r3, [r7, #28]
  404270:	69fb      	ldr	r3, [r7, #28]
  404272:	61bb      	str	r3, [r7, #24]
  404274:	69bb      	ldr	r3, [r7, #24]
  404276:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404278:	697b      	ldr	r3, [r7, #20]
  40427a:	095b      	lsrs	r3, r3, #5
  40427c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40427e:	693a      	ldr	r2, [r7, #16]
  404280:	4b0b      	ldr	r3, [pc, #44]	; (4042b0 <ioport_get_pin_level+0x4c>)
  404282:	4413      	add	r3, r2
  404284:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404288:	69fb      	ldr	r3, [r7, #28]
  40428a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40428c:	68fb      	ldr	r3, [r7, #12]
  40428e:	f003 031f 	and.w	r3, r3, #31
  404292:	2101      	movs	r1, #1
  404294:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404298:	4013      	ands	r3, r2
  40429a:	2b00      	cmp	r3, #0
  40429c:	bf14      	ite	ne
  40429e:	2301      	movne	r3, #1
  4042a0:	2300      	moveq	r3, #0
  4042a2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4042a4:	4618      	mov	r0, r3
  4042a6:	3724      	adds	r7, #36	; 0x24
  4042a8:	46bd      	mov	sp, r7
  4042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ae:	4770      	bx	lr
  4042b0:	00200707 	.word	0x00200707

004042b4 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  4042b4:	b480      	push	{r7}
  4042b6:	b08b      	sub	sp, #44	; 0x2c
  4042b8:	af00      	add	r7, sp, #0
  4042ba:	6078      	str	r0, [r7, #4]
  4042bc:	687b      	ldr	r3, [r7, #4]
  4042be:	627b      	str	r3, [r7, #36]	; 0x24
  4042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042c2:	623b      	str	r3, [r7, #32]
  4042c4:	6a3b      	ldr	r3, [r7, #32]
  4042c6:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4042c8:	69fb      	ldr	r3, [r7, #28]
  4042ca:	095b      	lsrs	r3, r3, #5
  4042cc:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4042ce:	69ba      	ldr	r2, [r7, #24]
  4042d0:	4b12      	ldr	r3, [pc, #72]	; (40431c <ioport_toggle_pin_level+0x68>)
  4042d2:	4413      	add	r3, r2
  4042d4:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4042d6:	617b      	str	r3, [r7, #20]
  4042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042da:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4042dc:	693b      	ldr	r3, [r7, #16]
  4042de:	f003 031f 	and.w	r3, r3, #31
  4042e2:	2201      	movs	r2, #1
  4042e4:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4042e8:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4042ea:	697b      	ldr	r3, [r7, #20]
  4042ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042f0:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4042f2:	68bb      	ldr	r3, [r7, #8]
  4042f4:	f003 031f 	and.w	r3, r3, #31
  4042f8:	2101      	movs	r1, #1
  4042fa:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4042fe:	4013      	ands	r3, r2
  404300:	2b00      	cmp	r3, #0
  404302:	d003      	beq.n	40430c <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  404304:	697b      	ldr	r3, [r7, #20]
  404306:	68fa      	ldr	r2, [r7, #12]
  404308:	635a      	str	r2, [r3, #52]	; 0x34
  40430a:	e002      	b.n	404312 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  40430c:	697b      	ldr	r3, [r7, #20]
  40430e:	68fa      	ldr	r2, [r7, #12]
  404310:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  404312:	372c      	adds	r7, #44	; 0x2c
  404314:	46bd      	mov	sp, r7
  404316:	f85d 7b04 	ldr.w	r7, [sp], #4
  40431a:	4770      	bx	lr
  40431c:	00200707 	.word	0x00200707

00404320 <init_sysErr>:

#define BIT(x) (1<<(x))

void init_sysErr(void);
void init_sysErr(void)
{
  404320:	b580      	push	{r7, lr}
  404322:	af00      	add	r7, sp, #0
	memset(&sysErr, 0x00, sizeof(sysErr)); //Init everything to "PASS"
  404324:	4802      	ldr	r0, [pc, #8]	; (404330 <init_sysErr+0x10>)
  404326:	2100      	movs	r1, #0
  404328:	2210      	movs	r2, #16
  40432a:	4b02      	ldr	r3, [pc, #8]	; (404334 <init_sysErr+0x14>)
  40432c:	4798      	blx	r3
}
  40432e:	bd80      	pop	{r7, pc}
  404330:	204016b4 	.word	0x204016b4
  404334:	00407509 	.word	0x00407509

00404338 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
  404338:	b580      	push	{r7, lr}
  40433a:	b084      	sub	sp, #16
  40433c:	af00      	add	r7, sp, #0
  40433e:	4603      	mov	r3, r0
  404340:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i<7; i++)
  404342:	2300      	movs	r3, #0
  404344:	60fb      	str	r3, [r7, #12]
  404346:	e05f      	b.n	404408 <display_text+0xd0>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
  404348:	4b32      	ldr	r3, [pc, #200]	; (404414 <display_text+0xdc>)
  40434a:	681b      	ldr	r3, [r3, #0]
  40434c:	689b      	ldr	r3, [r3, #8]
  40434e:	689a      	ldr	r2, [r3, #8]
  404350:	3a01      	subs	r2, #1
  404352:	609a      	str	r2, [r3, #8]
  404354:	689b      	ldr	r3, [r3, #8]
  404356:	2b00      	cmp	r3, #0
  404358:	da41      	bge.n	4043de <display_text+0xa6>
  40435a:	4b2e      	ldr	r3, [pc, #184]	; (404414 <display_text+0xdc>)
  40435c:	681b      	ldr	r3, [r3, #0]
  40435e:	689b      	ldr	r3, [r3, #8]
  404360:	689a      	ldr	r2, [r3, #8]
  404362:	4b2c      	ldr	r3, [pc, #176]	; (404414 <display_text+0xdc>)
  404364:	681b      	ldr	r3, [r3, #0]
  404366:	689b      	ldr	r3, [r3, #8]
  404368:	699b      	ldr	r3, [r3, #24]
  40436a:	429a      	cmp	r2, r3
  40436c:	db24      	blt.n	4043b8 <display_text+0x80>
  40436e:	4b29      	ldr	r3, [pc, #164]	; (404414 <display_text+0xdc>)
  404370:	681b      	ldr	r3, [r3, #0]
  404372:	689b      	ldr	r3, [r3, #8]
  404374:	681b      	ldr	r3, [r3, #0]
  404376:	79fa      	ldrb	r2, [r7, #7]
  404378:	4927      	ldr	r1, [pc, #156]	; (404418 <display_text+0xe0>)
  40437a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  40437e:	68fa      	ldr	r2, [r7, #12]
  404380:	440a      	add	r2, r1
  404382:	7812      	ldrb	r2, [r2, #0]
  404384:	701a      	strb	r2, [r3, #0]
  404386:	4b23      	ldr	r3, [pc, #140]	; (404414 <display_text+0xdc>)
  404388:	681b      	ldr	r3, [r3, #0]
  40438a:	689b      	ldr	r3, [r3, #8]
  40438c:	681b      	ldr	r3, [r3, #0]
  40438e:	781b      	ldrb	r3, [r3, #0]
  404390:	2b0a      	cmp	r3, #10
  404392:	d006      	beq.n	4043a2 <display_text+0x6a>
  404394:	4b1f      	ldr	r3, [pc, #124]	; (404414 <display_text+0xdc>)
  404396:	681b      	ldr	r3, [r3, #0]
  404398:	689b      	ldr	r3, [r3, #8]
  40439a:	681a      	ldr	r2, [r3, #0]
  40439c:	3201      	adds	r2, #1
  40439e:	601a      	str	r2, [r3, #0]
  4043a0:	e02f      	b.n	404402 <display_text+0xca>
  4043a2:	4b1c      	ldr	r3, [pc, #112]	; (404414 <display_text+0xdc>)
  4043a4:	681a      	ldr	r2, [r3, #0]
  4043a6:	4b1b      	ldr	r3, [pc, #108]	; (404414 <display_text+0xdc>)
  4043a8:	681b      	ldr	r3, [r3, #0]
  4043aa:	689b      	ldr	r3, [r3, #8]
  4043ac:	4610      	mov	r0, r2
  4043ae:	210a      	movs	r1, #10
  4043b0:	461a      	mov	r2, r3
  4043b2:	4b1a      	ldr	r3, [pc, #104]	; (40441c <display_text+0xe4>)
  4043b4:	4798      	blx	r3
  4043b6:	e024      	b.n	404402 <display_text+0xca>
  4043b8:	4b16      	ldr	r3, [pc, #88]	; (404414 <display_text+0xdc>)
  4043ba:	6819      	ldr	r1, [r3, #0]
  4043bc:	79fb      	ldrb	r3, [r7, #7]
  4043be:	4a16      	ldr	r2, [pc, #88]	; (404418 <display_text+0xe0>)
  4043c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4043c4:	68fb      	ldr	r3, [r7, #12]
  4043c6:	4413      	add	r3, r2
  4043c8:	781b      	ldrb	r3, [r3, #0]
  4043ca:	461a      	mov	r2, r3
  4043cc:	4b11      	ldr	r3, [pc, #68]	; (404414 <display_text+0xdc>)
  4043ce:	681b      	ldr	r3, [r3, #0]
  4043d0:	689b      	ldr	r3, [r3, #8]
  4043d2:	4608      	mov	r0, r1
  4043d4:	4611      	mov	r1, r2
  4043d6:	461a      	mov	r2, r3
  4043d8:	4b10      	ldr	r3, [pc, #64]	; (40441c <display_text+0xe4>)
  4043da:	4798      	blx	r3
  4043dc:	e011      	b.n	404402 <display_text+0xca>
  4043de:	4b0d      	ldr	r3, [pc, #52]	; (404414 <display_text+0xdc>)
  4043e0:	681b      	ldr	r3, [r3, #0]
  4043e2:	689b      	ldr	r3, [r3, #8]
  4043e4:	681b      	ldr	r3, [r3, #0]
  4043e6:	79fa      	ldrb	r2, [r7, #7]
  4043e8:	490b      	ldr	r1, [pc, #44]	; (404418 <display_text+0xe0>)
  4043ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4043ee:	68fa      	ldr	r2, [r7, #12]
  4043f0:	440a      	add	r2, r1
  4043f2:	7812      	ldrb	r2, [r2, #0]
  4043f4:	701a      	strb	r2, [r3, #0]
  4043f6:	4b07      	ldr	r3, [pc, #28]	; (404414 <display_text+0xdc>)
  4043f8:	681b      	ldr	r3, [r3, #0]
  4043fa:	689b      	ldr	r3, [r3, #8]
  4043fc:	681a      	ldr	r2, [r3, #0]
  4043fe:	3201      	adds	r2, #1
  404400:	601a      	str	r2, [r3, #0]


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
  404402:	68fb      	ldr	r3, [r7, #12]
  404404:	3301      	adds	r3, #1
  404406:	60fb      	str	r3, [r7, #12]
  404408:	68fb      	ldr	r3, [r7, #12]
  40440a:	2b06      	cmp	r3, #6
  40440c:	dd9c      	ble.n	404348 <display_text+0x10>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
  40440e:	3710      	adds	r7, #16
  404410:	46bd      	mov	sp, r7
  404412:	bd80      	pop	{r7, pc}
  404414:	204004c0 	.word	0x204004c0
  404418:	20400068 	.word	0x20400068
  40441c:	00408cdd 	.word	0x00408cdd

00404420 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
  404420:	b580      	push	{r7, lr}
  404422:	af00      	add	r7, sp, #0
	uint32_t ioFlags;

	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  404424:	200f      	movs	r0, #15
  404426:	2101      	movs	r1, #1
  404428:	4b13      	ldr	r3, [pc, #76]	; (404478 <init_io+0x58>)
  40442a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  40442c:	200f      	movs	r0, #15
  40442e:	2101      	movs	r1, #1
  404430:	4b12      	ldr	r3, [pc, #72]	; (40447c <init_io+0x5c>)
  404432:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  404434:	2010      	movs	r0, #16
  404436:	2101      	movs	r1, #1
  404438:	4b0f      	ldr	r3, [pc, #60]	; (404478 <init_io+0x58>)
  40443a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  40443c:	2010      	movs	r0, #16
  40443e:	2101      	movs	r1, #1
  404440:	4b0e      	ldr	r3, [pc, #56]	; (40447c <init_io+0x5c>)
  404442:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  404444:	2011      	movs	r0, #17
  404446:	2101      	movs	r1, #1
  404448:	4b0b      	ldr	r3, [pc, #44]	; (404478 <init_io+0x58>)
  40444a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  40444c:	2011      	movs	r0, #17
  40444e:	2101      	movs	r1, #1
  404450:	4b0a      	ldr	r3, [pc, #40]	; (40447c <init_io+0x5c>)
  404452:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  404454:	2012      	movs	r0, #18
  404456:	2101      	movs	r1, #1
  404458:	4b07      	ldr	r3, [pc, #28]	; (404478 <init_io+0x58>)
  40445a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  40445c:	2012      	movs	r0, #18
  40445e:	2101      	movs	r1, #1
  404460:	4b06      	ldr	r3, [pc, #24]	; (40447c <init_io+0x5c>)
  404462:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  404464:	2013      	movs	r0, #19
  404466:	2101      	movs	r1, #1
  404468:	4b03      	ldr	r3, [pc, #12]	; (404478 <init_io+0x58>)
  40446a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  40446c:	2013      	movs	r0, #19
  40446e:	2101      	movs	r1, #1
  404470:	4b02      	ldr	r3, [pc, #8]	; (40447c <init_io+0x5c>)
  404472:	4798      	blx	r3
}
  404474:	bd80      	pop	{r7, pc}
  404476:	bf00      	nop
  404478:	00404171 	.word	0x00404171
  40447c:	004041f9 	.word	0x004041f9

00404480 <print_ecdbg_num>:
};


void print_ecdbg_num(unsigned int num);
void print_ecdbg_num(unsigned int num)
{
  404480:	b580      	push	{r7, lr}
  404482:	b084      	sub	sp, #16
  404484:	af00      	add	r7, sp, #0
  404486:	6078      	str	r0, [r7, #4]
	char str[6];
	
	sprintf(str, "%d", num);	
  404488:	f107 0308 	add.w	r3, r7, #8
  40448c:	4618      	mov	r0, r3
  40448e:	4906      	ldr	r1, [pc, #24]	; (4044a8 <print_ecdbg_num+0x28>)
  404490:	687a      	ldr	r2, [r7, #4]
  404492:	4b06      	ldr	r3, [pc, #24]	; (4044ac <print_ecdbg_num+0x2c>)
  404494:	4798      	blx	r3
	
	print_ecdbg(str);
  404496:	f107 0308 	add.w	r3, r7, #8
  40449a:	4618      	mov	r0, r3
  40449c:	4b04      	ldr	r3, [pc, #16]	; (4044b0 <print_ecdbg_num+0x30>)
  40449e:	4798      	blx	r3
}
  4044a0:	3710      	adds	r7, #16
  4044a2:	46bd      	mov	sp, r7
  4044a4:	bd80      	pop	{r7, pc}
  4044a6:	bf00      	nop
  4044a8:	0040c5fc 	.word	0x0040c5fc
  4044ac:	00407725 	.word	0x00407725
  4044b0:	004026b1 	.word	0x004026b1

004044b4 <read_led_board_serial_ids>:

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
  4044b4:	b580      	push	{r7, lr}
  4044b6:	b084      	sub	sp, #16
  4044b8:	af00      	add	r7, sp, #0
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
  4044ba:	2001      	movs	r0, #1
  4044bc:	4b8b      	ldr	r3, [pc, #556]	; (4046ec <read_led_board_serial_ids+0x238>)
  4044be:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4044c0:	2300      	movs	r3, #0
  4044c2:	60fb      	str	r3, [r7, #12]
  4044c4:	e02d      	b.n	404522 <read_led_board_serial_ids+0x6e>
	{
		ledBrd[i].present = !OWTouchReset(i);
  4044c6:	68fb      	ldr	r3, [r7, #12]
  4044c8:	b2db      	uxtb	r3, r3
  4044ca:	4618      	mov	r0, r3
  4044cc:	4b88      	ldr	r3, [pc, #544]	; (4046f0 <read_led_board_serial_ids+0x23c>)
  4044ce:	4798      	blx	r3
  4044d0:	4603      	mov	r3, r0
  4044d2:	2b00      	cmp	r3, #0
  4044d4:	bf0c      	ite	eq
  4044d6:	2301      	moveq	r3, #1
  4044d8:	2300      	movne	r3, #0
  4044da:	b2db      	uxtb	r3, r3
  4044dc:	4618      	mov	r0, r3
  4044de:	4985      	ldr	r1, [pc, #532]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4044e0:	68fa      	ldr	r2, [r7, #12]
  4044e2:	4613      	mov	r3, r2
  4044e4:	00db      	lsls	r3, r3, #3
  4044e6:	1a9b      	subs	r3, r3, r2
  4044e8:	005b      	lsls	r3, r3, #1
  4044ea:	440b      	add	r3, r1
  4044ec:	3308      	adds	r3, #8
  4044ee:	4602      	mov	r2, r0
  4044f0:	701a      	strb	r2, [r3, #0]
		if (ledBrd[i].present)
  4044f2:	4980      	ldr	r1, [pc, #512]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4044f4:	68fa      	ldr	r2, [r7, #12]
  4044f6:	4613      	mov	r3, r2
  4044f8:	00db      	lsls	r3, r3, #3
  4044fa:	1a9b      	subs	r3, r3, r2
  4044fc:	005b      	lsls	r3, r3, #1
  4044fe:	440b      	add	r3, r1
  404500:	3308      	adds	r3, #8
  404502:	781b      	ldrb	r3, [r3, #0]
  404504:	2b00      	cmp	r3, #0
  404506:	d009      	beq.n	40451c <read_led_board_serial_ids+0x68>
		{
			print_ecdbg("LED board detected in slot ");
  404508:	487b      	ldr	r0, [pc, #492]	; (4046f8 <read_led_board_serial_ids+0x244>)
  40450a:	4b7c      	ldr	r3, [pc, #496]	; (4046fc <read_led_board_serial_ids+0x248>)
  40450c:	4798      	blx	r3
			print_ecdbg_num(i);
  40450e:	68fb      	ldr	r3, [r7, #12]
  404510:	4618      	mov	r0, r3
  404512:	4b7b      	ldr	r3, [pc, #492]	; (404700 <read_led_board_serial_ids+0x24c>)
  404514:	4798      	blx	r3
			print_ecdbg("\r\n");
  404516:	487b      	ldr	r0, [pc, #492]	; (404704 <read_led_board_serial_ids+0x250>)
  404518:	4b78      	ldr	r3, [pc, #480]	; (4046fc <read_led_board_serial_ids+0x248>)
  40451a:	4798      	blx	r3
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  40451c:	68fb      	ldr	r3, [r7, #12]
  40451e:	3301      	adds	r3, #1
  404520:	60fb      	str	r3, [r7, #12]
  404522:	68fb      	ldr	r3, [r7, #12]
  404524:	2b04      	cmp	r3, #4
  404526:	ddce      	ble.n	4044c6 <read_led_board_serial_ids+0x12>
			print_ecdbg_num(i);
			print_ecdbg("\r\n");
		}
	}
	
	if (ledBrd[0].present && ledBrd[1].present)
  404528:	4b72      	ldr	r3, [pc, #456]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40452a:	7a1b      	ldrb	r3, [r3, #8]
  40452c:	2b00      	cmp	r3, #0
  40452e:	d009      	beq.n	404544 <read_led_board_serial_ids+0x90>
  404530:	4b70      	ldr	r3, [pc, #448]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404532:	7d9b      	ldrb	r3, [r3, #22]
  404534:	2b00      	cmp	r3, #0
  404536:	d005      	beq.n	404544 <read_led_board_serial_ids+0x90>
	{
		shelf[0].present = 1;
  404538:	4b73      	ldr	r3, [pc, #460]	; (404708 <read_led_board_serial_ids+0x254>)
  40453a:	2201      	movs	r2, #1
  40453c:	711a      	strb	r2, [r3, #4]
		
		print_ecdbg("Shelf 0 present\r\n");
  40453e:	4873      	ldr	r0, [pc, #460]	; (40470c <read_led_board_serial_ids+0x258>)
  404540:	4b6e      	ldr	r3, [pc, #440]	; (4046fc <read_led_board_serial_ids+0x248>)
  404542:	4798      	blx	r3
	}
	if (ledBrd[1].present && ledBrd[2].present)
  404544:	4b6b      	ldr	r3, [pc, #428]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404546:	7d9b      	ldrb	r3, [r3, #22]
  404548:	2b00      	cmp	r3, #0
  40454a:	d00a      	beq.n	404562 <read_led_board_serial_ids+0xae>
  40454c:	4b69      	ldr	r3, [pc, #420]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40454e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  404552:	2b00      	cmp	r3, #0
  404554:	d005      	beq.n	404562 <read_led_board_serial_ids+0xae>
	{
		shelf[1].present = 1;
  404556:	4b6c      	ldr	r3, [pc, #432]	; (404708 <read_led_board_serial_ids+0x254>)
  404558:	2201      	movs	r2, #1
  40455a:	725a      	strb	r2, [r3, #9]
		print_ecdbg("Shelf 1 present\r\n");
  40455c:	486c      	ldr	r0, [pc, #432]	; (404710 <read_led_board_serial_ids+0x25c>)
  40455e:	4b67      	ldr	r3, [pc, #412]	; (4046fc <read_led_board_serial_ids+0x248>)
  404560:	4798      	blx	r3
	}
	if (ledBrd[2].present && ledBrd[3].present)
  404562:	4b64      	ldr	r3, [pc, #400]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  404568:	2b00      	cmp	r3, #0
  40456a:	d00a      	beq.n	404582 <read_led_board_serial_ids+0xce>
  40456c:	4b61      	ldr	r3, [pc, #388]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40456e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404572:	2b00      	cmp	r3, #0
  404574:	d005      	beq.n	404582 <read_led_board_serial_ids+0xce>
	{
		shelf[2].present = 1;
  404576:	4b64      	ldr	r3, [pc, #400]	; (404708 <read_led_board_serial_ids+0x254>)
  404578:	2201      	movs	r2, #1
  40457a:	739a      	strb	r2, [r3, #14]
		print_ecdbg("Shelf 2 present\r\n");
  40457c:	4865      	ldr	r0, [pc, #404]	; (404714 <read_led_board_serial_ids+0x260>)
  40457e:	4b5f      	ldr	r3, [pc, #380]	; (4046fc <read_led_board_serial_ids+0x248>)
  404580:	4798      	blx	r3
	}
	if (ledBrd[3].present && ledBrd[4].present)
  404582:	4b5c      	ldr	r3, [pc, #368]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404584:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404588:	2b00      	cmp	r3, #0
  40458a:	d00a      	beq.n	4045a2 <read_led_board_serial_ids+0xee>
  40458c:	4b59      	ldr	r3, [pc, #356]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40458e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  404592:	2b00      	cmp	r3, #0
  404594:	d005      	beq.n	4045a2 <read_led_board_serial_ids+0xee>
	{
		shelf[3].present = 1;
  404596:	4b5c      	ldr	r3, [pc, #368]	; (404708 <read_led_board_serial_ids+0x254>)
  404598:	2201      	movs	r2, #1
  40459a:	74da      	strb	r2, [r3, #19]
		print_ecdbg("Shelf 3 present\r\n");
  40459c:	485e      	ldr	r0, [pc, #376]	; (404718 <read_led_board_serial_ids+0x264>)
  40459e:	4b57      	ldr	r3, [pc, #348]	; (4046fc <read_led_board_serial_ids+0x248>)
  4045a0:	4798      	blx	r3
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  4045a2:	2300      	movs	r3, #0
  4045a4:	60bb      	str	r3, [r7, #8]
  4045a6:	e099      	b.n	4046dc <read_led_board_serial_ids+0x228>
	{
		unsigned char acc = 0;
  4045a8:	2300      	movs	r3, #0
  4045aa:	71fb      	strb	r3, [r7, #7]
		
		if (ledBrd[i].present)
  4045ac:	4951      	ldr	r1, [pc, #324]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045ae:	68ba      	ldr	r2, [r7, #8]
  4045b0:	4613      	mov	r3, r2
  4045b2:	00db      	lsls	r3, r3, #3
  4045b4:	1a9b      	subs	r3, r3, r2
  4045b6:	005b      	lsls	r3, r3, #1
  4045b8:	440b      	add	r3, r1
  4045ba:	3308      	adds	r3, #8
  4045bc:	781b      	ldrb	r3, [r3, #0]
  4045be:	2b00      	cmp	r3, #0
  4045c0:	f000 8089 	beq.w	4046d6 <read_led_board_serial_ids+0x222>
		{
			OWWriteByte(i, 0x33); //Read ID command
  4045c4:	68bb      	ldr	r3, [r7, #8]
  4045c6:	b2db      	uxtb	r3, r3
  4045c8:	4618      	mov	r0, r3
  4045ca:	2133      	movs	r1, #51	; 0x33
  4045cc:	4b53      	ldr	r3, [pc, #332]	; (40471c <read_led_board_serial_ids+0x268>)
  4045ce:	4798      	blx	r3
			
			ledBrd[i].idFamily = OWReadByte(i);
  4045d0:	68bb      	ldr	r3, [r7, #8]
  4045d2:	b2db      	uxtb	r3, r3
  4045d4:	4618      	mov	r0, r3
  4045d6:	4b52      	ldr	r3, [pc, #328]	; (404720 <read_led_board_serial_ids+0x26c>)
  4045d8:	4798      	blx	r3
  4045da:	4603      	mov	r3, r0
  4045dc:	b2d8      	uxtb	r0, r3
  4045de:	4945      	ldr	r1, [pc, #276]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045e0:	68ba      	ldr	r2, [r7, #8]
  4045e2:	4613      	mov	r3, r2
  4045e4:	00db      	lsls	r3, r3, #3
  4045e6:	1a9b      	subs	r3, r3, r2
  4045e8:	005b      	lsls	r3, r3, #1
  4045ea:	440b      	add	r3, r1
  4045ec:	4602      	mov	r2, r0
  4045ee:	701a      	strb	r2, [r3, #0]
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
  4045f0:	4940      	ldr	r1, [pc, #256]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045f2:	68ba      	ldr	r2, [r7, #8]
  4045f4:	4613      	mov	r3, r2
  4045f6:	00db      	lsls	r3, r3, #3
  4045f8:	1a9b      	subs	r3, r3, r2
  4045fa:	005b      	lsls	r3, r3, #1
  4045fc:	440b      	add	r3, r1
  4045fe:	781b      	ldrb	r3, [r3, #0]
  404600:	2000      	movs	r0, #0
  404602:	4619      	mov	r1, r3
  404604:	4b47      	ldr	r3, [pc, #284]	; (404724 <read_led_board_serial_ids+0x270>)
  404606:	4798      	blx	r3
  404608:	4603      	mov	r3, r0
  40460a:	71fb      	strb	r3, [r7, #7]
			
			for (int j=0; j<6; j++)
  40460c:	2300      	movs	r3, #0
  40460e:	603b      	str	r3, [r7, #0]
  404610:	e025      	b.n	40465e <read_led_board_serial_ids+0x1aa>
			{
				ledBrd[i].id[j] = OWReadByte(i);
  404612:	68bb      	ldr	r3, [r7, #8]
  404614:	b2db      	uxtb	r3, r3
  404616:	4618      	mov	r0, r3
  404618:	4b41      	ldr	r3, [pc, #260]	; (404720 <read_led_board_serial_ids+0x26c>)
  40461a:	4798      	blx	r3
  40461c:	4603      	mov	r3, r0
  40461e:	b2d8      	uxtb	r0, r3
  404620:	4934      	ldr	r1, [pc, #208]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404622:	68ba      	ldr	r2, [r7, #8]
  404624:	4613      	mov	r3, r2
  404626:	00db      	lsls	r3, r3, #3
  404628:	1a9b      	subs	r3, r3, r2
  40462a:	005b      	lsls	r3, r3, #1
  40462c:	683a      	ldr	r2, [r7, #0]
  40462e:	4413      	add	r3, r2
  404630:	440b      	add	r3, r1
  404632:	4602      	mov	r2, r0
  404634:	705a      	strb	r2, [r3, #1]
				acc = crc8_add(acc, ledBrd[i].id[j]);
  404636:	492f      	ldr	r1, [pc, #188]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404638:	68ba      	ldr	r2, [r7, #8]
  40463a:	4613      	mov	r3, r2
  40463c:	00db      	lsls	r3, r3, #3
  40463e:	1a9b      	subs	r3, r3, r2
  404640:	005b      	lsls	r3, r3, #1
  404642:	683a      	ldr	r2, [r7, #0]
  404644:	4413      	add	r3, r2
  404646:	440b      	add	r3, r1
  404648:	785b      	ldrb	r3, [r3, #1]
  40464a:	79fa      	ldrb	r2, [r7, #7]
  40464c:	4610      	mov	r0, r2
  40464e:	4619      	mov	r1, r3
  404650:	4b34      	ldr	r3, [pc, #208]	; (404724 <read_led_board_serial_ids+0x270>)
  404652:	4798      	blx	r3
  404654:	4603      	mov	r3, r0
  404656:	71fb      	strb	r3, [r7, #7]
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
  404658:	683b      	ldr	r3, [r7, #0]
  40465a:	3301      	adds	r3, #1
  40465c:	603b      	str	r3, [r7, #0]
  40465e:	683b      	ldr	r3, [r7, #0]
  404660:	2b05      	cmp	r3, #5
  404662:	ddd6      	ble.n	404612 <read_led_board_serial_ids+0x15e>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
  404664:	68bb      	ldr	r3, [r7, #8]
  404666:	b2db      	uxtb	r3, r3
  404668:	4618      	mov	r0, r3
  40466a:	4b2d      	ldr	r3, [pc, #180]	; (404720 <read_led_board_serial_ids+0x26c>)
  40466c:	4798      	blx	r3
  40466e:	4603      	mov	r3, r0
  404670:	b2d8      	uxtb	r0, r3
  404672:	4920      	ldr	r1, [pc, #128]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404674:	68ba      	ldr	r2, [r7, #8]
  404676:	4613      	mov	r3, r2
  404678:	00db      	lsls	r3, r3, #3
  40467a:	1a9b      	subs	r3, r3, r2
  40467c:	005b      	lsls	r3, r3, #1
  40467e:	440b      	add	r3, r1
  404680:	4602      	mov	r2, r0
  404682:	71da      	strb	r2, [r3, #7]
			
			if (acc != ledBrd[i].idcsum)
  404684:	491b      	ldr	r1, [pc, #108]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404686:	68ba      	ldr	r2, [r7, #8]
  404688:	4613      	mov	r3, r2
  40468a:	00db      	lsls	r3, r3, #3
  40468c:	1a9b      	subs	r3, r3, r2
  40468e:	005b      	lsls	r3, r3, #1
  404690:	440b      	add	r3, r1
  404692:	79db      	ldrb	r3, [r3, #7]
  404694:	79fa      	ldrb	r2, [r7, #7]
  404696:	429a      	cmp	r2, r3
  404698:	d01d      	beq.n	4046d6 <read_led_board_serial_ids+0x222>
			{
				sysErr.ledBrdSerialIdCsum |= BIT(i); //SE_FAIL;
  40469a:	4b23      	ldr	r3, [pc, #140]	; (404728 <read_led_board_serial_ids+0x274>)
  40469c:	7b1b      	ldrb	r3, [r3, #12]
  40469e:	b2d9      	uxtb	r1, r3
  4046a0:	2201      	movs	r2, #1
  4046a2:	68bb      	ldr	r3, [r7, #8]
  4046a4:	fa02 f303 	lsl.w	r3, r2, r3
  4046a8:	b2db      	uxtb	r3, r3
  4046aa:	460a      	mov	r2, r1
  4046ac:	4313      	orrs	r3, r2
  4046ae:	b2db      	uxtb	r3, r3
  4046b0:	b2da      	uxtb	r2, r3
  4046b2:	4b1d      	ldr	r3, [pc, #116]	; (404728 <read_led_board_serial_ids+0x274>)
  4046b4:	731a      	strb	r2, [r3, #12]
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
  4046b6:	490f      	ldr	r1, [pc, #60]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4046b8:	68ba      	ldr	r2, [r7, #8]
  4046ba:	4613      	mov	r3, r2
  4046bc:	00db      	lsls	r3, r3, #3
  4046be:	1a9b      	subs	r3, r3, r2
  4046c0:	005b      	lsls	r3, r3, #1
  4046c2:	440b      	add	r3, r1
  4046c4:	3308      	adds	r3, #8
  4046c6:	2200      	movs	r2, #0
  4046c8:	701a      	strb	r2, [r3, #0]
				print_ecdbg("Invalid serial ID checksum.\r\n");
  4046ca:	4818      	ldr	r0, [pc, #96]	; (40472c <read_led_board_serial_ids+0x278>)
  4046cc:	4b0b      	ldr	r3, [pc, #44]	; (4046fc <read_led_board_serial_ids+0x248>)
  4046ce:	4798      	blx	r3
				
				electroclaveState = STATE_CHASSIS_ERROR;
  4046d0:	4b17      	ldr	r3, [pc, #92]	; (404730 <read_led_board_serial_ids+0x27c>)
  4046d2:	2207      	movs	r2, #7
  4046d4:	701a      	strb	r2, [r3, #0]
		shelf[3].present = 1;
		print_ecdbg("Shelf 3 present\r\n");
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  4046d6:	68bb      	ldr	r3, [r7, #8]
  4046d8:	3301      	adds	r3, #1
  4046da:	60bb      	str	r3, [r7, #8]
  4046dc:	68bb      	ldr	r3, [r7, #8]
  4046de:	2b04      	cmp	r3, #4
  4046e0:	f77f af62 	ble.w	4045a8 <read_led_board_serial_ids+0xf4>
				
				electroclaveState = STATE_CHASSIS_ERROR;
			}
		}
	}
}
  4046e4:	3710      	adds	r7, #16
  4046e6:	46bd      	mov	sp, r7
  4046e8:	bd80      	pop	{r7, pc}
  4046ea:	bf00      	nop
  4046ec:	00402ecd 	.word	0x00402ecd
  4046f0:	00402f89 	.word	0x00402f89
  4046f4:	20401644 	.word	0x20401644
  4046f8:	0040c600 	.word	0x0040c600
  4046fc:	004026b1 	.word	0x004026b1
  404700:	00404481 	.word	0x00404481
  404704:	0040c61c 	.word	0x0040c61c
  404708:	2040168c 	.word	0x2040168c
  40470c:	0040c620 	.word	0x0040c620
  404710:	0040c634 	.word	0x0040c634
  404714:	0040c648 	.word	0x0040c648
  404718:	0040c65c 	.word	0x0040c65c
  40471c:	00403129 	.word	0x00403129
  404720:	00403169 	.word	0x00403169
  404724:	004031b5 	.word	0x004031b5
  404728:	204016b4 	.word	0x204016b4
  40472c:	0040c670 	.word	0x0040c670
  404730:	204009b9 	.word	0x204009b9
  404734:	00000000 	.word	0x00000000

00404738 <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
  404738:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
  40473c:	b087      	sub	sp, #28
  40473e:	af00      	add	r7, sp, #0
  404740:	4603      	mov	r3, r0
  404742:	71fb      	strb	r3, [r7, #7]
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
  404744:	79fa      	ldrb	r2, [r7, #7]
  404746:	4944      	ldr	r1, [pc, #272]	; (404858 <check_led_brd_side_lifetime+0x120>)
  404748:	4613      	mov	r3, r2
  40474a:	009b      	lsls	r3, r3, #2
  40474c:	4413      	add	r3, r2
  40474e:	440b      	add	r3, r1
  404750:	785b      	ldrb	r3, [r3, #1]
  404752:	75fb      	strb	r3, [r7, #23]
	
	
	hours = h.hrs[idx];
  404754:	7dfb      	ldrb	r3, [r7, #23]
  404756:	4a41      	ldr	r2, [pc, #260]	; (40485c <check_led_brd_side_lifetime+0x124>)
  404758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40475c:	613b      	str	r3, [r7, #16]
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 91.879);
  40475e:	4b40      	ldr	r3, [pc, #256]	; (404860 <check_led_brd_side_lifetime+0x128>)
  404760:	6938      	ldr	r0, [r7, #16]
  404762:	4798      	blx	r3
  404764:	4602      	mov	r2, r0
  404766:	460b      	mov	r3, r1
  404768:	4c3e      	ldr	r4, [pc, #248]	; (404864 <check_led_brd_side_lifetime+0x12c>)
  40476a:	4610      	mov	r0, r2
  40476c:	4619      	mov	r1, r3
  40476e:	a334      	add	r3, pc, #208	; (adr r3, 404840 <check_led_brd_side_lifetime+0x108>)
  404770:	e9d3 2300 	ldrd	r2, r3, [r3]
  404774:	47a0      	blx	r4
  404776:	4602      	mov	r2, r0
  404778:	460b      	mov	r3, r1
  40477a:	4690      	mov	r8, r2
  40477c:	4699      	mov	r9, r3
  40477e:	4b38      	ldr	r3, [pc, #224]	; (404860 <check_led_brd_side_lifetime+0x128>)
  404780:	6938      	ldr	r0, [r7, #16]
  404782:	4798      	blx	r3
  404784:	4602      	mov	r2, r0
  404786:	460b      	mov	r3, r1
  404788:	4c36      	ldr	r4, [pc, #216]	; (404864 <check_led_brd_side_lifetime+0x12c>)
  40478a:	4640      	mov	r0, r8
  40478c:	4649      	mov	r1, r9
  40478e:	47a0      	blx	r4
  404790:	4602      	mov	r2, r0
  404792:	460b      	mov	r3, r1
  404794:	4690      	mov	r8, r2
  404796:	4699      	mov	r9, r3
  404798:	4b31      	ldr	r3, [pc, #196]	; (404860 <check_led_brd_side_lifetime+0x128>)
  40479a:	6938      	ldr	r0, [r7, #16]
  40479c:	4798      	blx	r3
  40479e:	4602      	mov	r2, r0
  4047a0:	460b      	mov	r3, r1
  4047a2:	4c30      	ldr	r4, [pc, #192]	; (404864 <check_led_brd_side_lifetime+0x12c>)
  4047a4:	4610      	mov	r0, r2
  4047a6:	4619      	mov	r1, r3
  4047a8:	a327      	add	r3, pc, #156	; (adr r3, 404848 <check_led_brd_side_lifetime+0x110>)
  4047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047ae:	47a0      	blx	r4
  4047b0:	4602      	mov	r2, r0
  4047b2:	460b      	mov	r3, r1
  4047b4:	4c2c      	ldr	r4, [pc, #176]	; (404868 <check_led_brd_side_lifetime+0x130>)
  4047b6:	4640      	mov	r0, r8
  4047b8:	4649      	mov	r1, r9
  4047ba:	47a0      	blx	r4
  4047bc:	4602      	mov	r2, r0
  4047be:	460b      	mov	r3, r1
  4047c0:	4c2a      	ldr	r4, [pc, #168]	; (40486c <check_led_brd_side_lifetime+0x134>)
  4047c2:	4610      	mov	r0, r2
  4047c4:	4619      	mov	r1, r3
  4047c6:	a322      	add	r3, pc, #136	; (adr r3, 404850 <check_led_brd_side_lifetime+0x118>)
  4047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047cc:	47a0      	blx	r4
  4047ce:	4602      	mov	r2, r0
  4047d0:	460b      	mov	r3, r1
  4047d2:	4610      	mov	r0, r2
  4047d4:	4619      	mov	r1, r3
  4047d6:	4b26      	ldr	r3, [pc, #152]	; (404870 <check_led_brd_side_lifetime+0x138>)
  4047d8:	4798      	blx	r3
  4047da:	4603      	mov	r3, r0
  4047dc:	60fb      	str	r3, [r7, #12]
		
	ledBrdSide[sideIdx].sanitizeMinutes = (c.initialDTE * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
  4047de:	79fa      	ldrb	r2, [r7, #7]
  4047e0:	4b24      	ldr	r3, [pc, #144]	; (404874 <check_led_brd_side_lifetime+0x13c>)
  4047e2:	781b      	ldrb	r3, [r3, #0]
  4047e4:	4619      	mov	r1, r3
  4047e6:	2364      	movs	r3, #100	; 0x64
  4047e8:	fb03 f301 	mul.w	r3, r3, r1
  4047ec:	ee07 3a90 	vmov	s15, r3
  4047f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4047f4:	edd7 7a03 	vldr	s15, [r7, #12]
  4047f8:	eec7 7a27 	vdiv.f32	s15, s14, s15
  4047fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  404800:	edc7 7a00 	vstr	s15, [r7]
  404804:	783b      	ldrb	r3, [r7, #0]
  404806:	b2d8      	uxtb	r0, r3
  404808:	4913      	ldr	r1, [pc, #76]	; (404858 <check_led_brd_side_lifetime+0x120>)
  40480a:	4613      	mov	r3, r2
  40480c:	009b      	lsls	r3, r3, #2
  40480e:	4413      	add	r3, r2
  404810:	440b      	add	r3, r1
  404812:	4602      	mov	r2, r0
  404814:	701a      	strb	r2, [r3, #0]
	
//	ledBrdSide[sideIdx].sanitizeMinutes = 60; //DEBUG hard code to 1 minute per Christian 24jun15 take this out later
//	ledBrdSide[sideIdx].sanitizeMinutes = 255; //DEBUG hard code to 10 minutes to debug BOTDRIVE problem 31jul15 take this out later
	ledBrdSide[sideIdx].sanitizeMinutes = 30; //DEBUG hard code to 30 minutes for sanitation tests 16jan16
  404816:	79fa      	ldrb	r2, [r7, #7]
  404818:	490f      	ldr	r1, [pc, #60]	; (404858 <check_led_brd_side_lifetime+0x120>)
  40481a:	4613      	mov	r3, r2
  40481c:	009b      	lsls	r3, r3, #2
  40481e:	4413      	add	r3, r2
  404820:	440b      	add	r3, r1
  404822:	221e      	movs	r2, #30
  404824:	701a      	strb	r2, [r3, #0]


	if (hours < 2001)
  404826:	693b      	ldr	r3, [r7, #16]
  404828:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40482c:	d801      	bhi.n	404832 <check_led_brd_side_lifetime+0xfa>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
  40482e:	2301      	movs	r3, #1
  404830:	e000      	b.n	404834 <check_led_brd_side_lifetime+0xfc>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
  404832:	2300      	movs	r3, #0
//DEBUG 24jun15 need to function even with these errors for demo purposes		electroclaveState = STATE_CHASSIS_ERROR;
	}
}
  404834:	4618      	mov	r0, r3
  404836:	371c      	adds	r7, #28
  404838:	46bd      	mov	sp, r7
  40483a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
  40483e:	bf00      	nop
  404840:	88e368f1 	.word	0x88e368f1
  404844:	3ef4f8b5 	.word	0x3ef4f8b5
  404848:	65fd8adb 	.word	0x65fd8adb
  40484c:	3fb1e4f7 	.word	0x3fb1e4f7
  404850:	89374bc7 	.word	0x89374bc7
  404854:	4056f841 	.word	0x4056f841
  404858:	204016c8 	.word	0x204016c8
  40485c:	204016f4 	.word	0x204016f4
  404860:	00406f09 	.word	0x00406f09
  404864:	00406ff5 	.word	0x00406ff5
  404868:	00406c8d 	.word	0x00406c8d
  40486c:	00406c91 	.word	0x00406c91
  404870:	00407419 	.word	0x00407419
  404874:	204016c4 	.word	0x204016c4

00404878 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
  404878:	b580      	push	{r7, lr}
  40487a:	b082      	sub	sp, #8
  40487c:	af00      	add	r7, sp, #0
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  40487e:	2300      	movs	r3, #0
  404880:	607b      	str	r3, [r7, #4]
  404882:	e029      	b.n	4048d8 <check_led_brd_side_lifetimes+0x60>
	{
		brdIdx = ledBrdSide[i].boardIdx;
  404884:	4917      	ldr	r1, [pc, #92]	; (4048e4 <check_led_brd_side_lifetimes+0x6c>)
  404886:	687a      	ldr	r2, [r7, #4]
  404888:	4613      	mov	r3, r2
  40488a:	009b      	lsls	r3, r3, #2
  40488c:	4413      	add	r3, r2
  40488e:	440b      	add	r3, r1
  404890:	791b      	ldrb	r3, [r3, #4]
  404892:	70fb      	strb	r3, [r7, #3]
		
		if (ledBrd[brdIdx].present)
  404894:	78fa      	ldrb	r2, [r7, #3]
  404896:	4914      	ldr	r1, [pc, #80]	; (4048e8 <check_led_brd_side_lifetimes+0x70>)
  404898:	4613      	mov	r3, r2
  40489a:	00db      	lsls	r3, r3, #3
  40489c:	1a9b      	subs	r3, r3, r2
  40489e:	005b      	lsls	r3, r3, #1
  4048a0:	440b      	add	r3, r1
  4048a2:	3308      	adds	r3, #8
  4048a4:	781b      	ldrb	r3, [r3, #0]
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	d013      	beq.n	4048d2 <check_led_brd_side_lifetimes+0x5a>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
  4048aa:	687b      	ldr	r3, [r7, #4]
  4048ac:	b2db      	uxtb	r3, r3
  4048ae:	4618      	mov	r0, r3
  4048b0:	4b0e      	ldr	r3, [pc, #56]	; (4048ec <check_led_brd_side_lifetimes+0x74>)
  4048b2:	4798      	blx	r3
  4048b4:	4603      	mov	r3, r0
  4048b6:	2b00      	cmp	r3, #0
  4048b8:	bf0c      	ite	eq
  4048ba:	2301      	moveq	r3, #1
  4048bc:	2300      	movne	r3, #0
  4048be:	b2db      	uxtb	r3, r3
  4048c0:	4618      	mov	r0, r3
  4048c2:	4908      	ldr	r1, [pc, #32]	; (4048e4 <check_led_brd_side_lifetimes+0x6c>)
  4048c4:	687a      	ldr	r2, [r7, #4]
  4048c6:	4613      	mov	r3, r2
  4048c8:	009b      	lsls	r3, r3, #2
  4048ca:	4413      	add	r3, r2
  4048cc:	440b      	add	r3, r1
  4048ce:	4602      	mov	r2, r0
  4048d0:	709a      	strb	r2, [r3, #2]
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  4048d2:	687b      	ldr	r3, [r7, #4]
  4048d4:	3301      	adds	r3, #1
  4048d6:	607b      	str	r3, [r7, #4]
  4048d8:	687b      	ldr	r3, [r7, #4]
  4048da:	2b07      	cmp	r3, #7
  4048dc:	ddd2      	ble.n	404884 <check_led_brd_side_lifetimes+0xc>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
  4048de:	3708      	adds	r7, #8
  4048e0:	46bd      	mov	sp, r7
  4048e2:	bd80      	pop	{r7, pc}
  4048e4:	204016c8 	.word	0x204016c8
  4048e8:	20401644 	.word	0x20401644
  4048ec:	00404739 	.word	0x00404739

004048f0 <adc_process_task>:
extern uint32_t g_afec1_sample_data;


int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
  4048f0:	b580      	push	{r7, lr}
  4048f2:	b082      	sub	sp, #8
  4048f4:	af00      	add	r7, sp, #0
  4048f6:	4603      	mov	r3, r0
  4048f8:	71fb      	strb	r3, [r7, #7]
	
	switch(shelfIdx)
  4048fa:	79fb      	ldrb	r3, [r7, #7]
  4048fc:	2b03      	cmp	r3, #3
  4048fe:	f200 8083 	bhi.w	404a08 <adc_process_task+0x118>
  404902:	a201      	add	r2, pc, #4	; (adr r2, 404908 <adc_process_task+0x18>)
  404904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404908:	00404919 	.word	0x00404919
  40490c:	00404955 	.word	0x00404955
  404910:	00404991 	.word	0x00404991
  404914:	004049cd 	.word	0x004049cd
	{
		case 0:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  404918:	4840      	ldr	r0, [pc, #256]	; (404a1c <adc_process_task+0x12c>)
  40491a:	2109      	movs	r1, #9
  40491c:	4b40      	ldr	r3, [pc, #256]	; (404a20 <adc_process_task+0x130>)
  40491e:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404920:	483e      	ldr	r0, [pc, #248]	; (404a1c <adc_process_task+0x12c>)
  404922:	4b40      	ldr	r3, [pc, #256]	; (404a24 <adc_process_task+0x134>)
  404924:	4798      	blx	r3
			is_conversion_done = false;
  404926:	4b40      	ldr	r3, [pc, #256]	; (404a28 <adc_process_task+0x138>)
  404928:	2200      	movs	r2, #0
  40492a:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  40492c:	bf00      	nop
  40492e:	4b3e      	ldr	r3, [pc, #248]	; (404a28 <adc_process_task+0x138>)
  404930:	781b      	ldrb	r3, [r3, #0]
  404932:	f083 0301 	eor.w	r3, r3, #1
  404936:	b2db      	uxtb	r3, r3
  404938:	2b00      	cmp	r3, #0
  40493a:	d1f8      	bne.n	40492e <adc_process_task+0x3e>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  40493c:	79fb      	ldrb	r3, [r7, #7]
  40493e:	4a3b      	ldr	r2, [pc, #236]	; (404a2c <adc_process_task+0x13c>)
  404940:	6812      	ldr	r2, [r2, #0]
  404942:	b291      	uxth	r1, r2
  404944:	4a3a      	ldr	r2, [pc, #232]	; (404a30 <adc_process_task+0x140>)
  404946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  40494a:	4834      	ldr	r0, [pc, #208]	; (404a1c <adc_process_task+0x12c>)
  40494c:	2109      	movs	r1, #9
  40494e:	4b39      	ldr	r3, [pc, #228]	; (404a34 <adc_process_task+0x144>)
  404950:	4798      	blx	r3
			break;
  404952:	e059      	b.n	404a08 <adc_process_task+0x118>
		case 1:
			afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  404954:	4838      	ldr	r0, [pc, #224]	; (404a38 <adc_process_task+0x148>)
  404956:	2104      	movs	r1, #4
  404958:	4b31      	ldr	r3, [pc, #196]	; (404a20 <adc_process_task+0x130>)
  40495a:	4798      	blx	r3
			afec_start_software_conversion(AFEC0);
  40495c:	4836      	ldr	r0, [pc, #216]	; (404a38 <adc_process_task+0x148>)
  40495e:	4b31      	ldr	r3, [pc, #196]	; (404a24 <adc_process_task+0x134>)
  404960:	4798      	blx	r3
			is_conversion_done = false;
  404962:	4b31      	ldr	r3, [pc, #196]	; (404a28 <adc_process_task+0x138>)
  404964:	2200      	movs	r2, #0
  404966:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404968:	bf00      	nop
  40496a:	4b2f      	ldr	r3, [pc, #188]	; (404a28 <adc_process_task+0x138>)
  40496c:	781b      	ldrb	r3, [r3, #0]
  40496e:	f083 0301 	eor.w	r3, r3, #1
  404972:	b2db      	uxtb	r3, r3
  404974:	2b00      	cmp	r3, #0
  404976:	d1f8      	bne.n	40496a <adc_process_task+0x7a>
			bluesense_buf[shelfIdx] = g_afec0_sample_data;
  404978:	79fb      	ldrb	r3, [r7, #7]
  40497a:	4a30      	ldr	r2, [pc, #192]	; (404a3c <adc_process_task+0x14c>)
  40497c:	6812      	ldr	r2, [r2, #0]
  40497e:	b291      	uxth	r1, r2
  404980:	4a2b      	ldr	r2, [pc, #172]	; (404a30 <adc_process_task+0x140>)
  404982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  404986:	482c      	ldr	r0, [pc, #176]	; (404a38 <adc_process_task+0x148>)
  404988:	2104      	movs	r1, #4
  40498a:	4b2a      	ldr	r3, [pc, #168]	; (404a34 <adc_process_task+0x144>)
  40498c:	4798      	blx	r3
			break;
  40498e:	e03b      	b.n	404a08 <adc_process_task+0x118>
		case 2:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_4);
  404990:	4822      	ldr	r0, [pc, #136]	; (404a1c <adc_process_task+0x12c>)
  404992:	2104      	movs	r1, #4
  404994:	4b22      	ldr	r3, [pc, #136]	; (404a20 <adc_process_task+0x130>)
  404996:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404998:	4820      	ldr	r0, [pc, #128]	; (404a1c <adc_process_task+0x12c>)
  40499a:	4b22      	ldr	r3, [pc, #136]	; (404a24 <adc_process_task+0x134>)
  40499c:	4798      	blx	r3
			is_conversion_done = false;
  40499e:	4b22      	ldr	r3, [pc, #136]	; (404a28 <adc_process_task+0x138>)
  4049a0:	2200      	movs	r2, #0
  4049a2:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  4049a4:	bf00      	nop
  4049a6:	4b20      	ldr	r3, [pc, #128]	; (404a28 <adc_process_task+0x138>)
  4049a8:	781b      	ldrb	r3, [r3, #0]
  4049aa:	f083 0301 	eor.w	r3, r3, #1
  4049ae:	b2db      	uxtb	r3, r3
  4049b0:	2b00      	cmp	r3, #0
  4049b2:	d1f8      	bne.n	4049a6 <adc_process_task+0xb6>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  4049b4:	79fb      	ldrb	r3, [r7, #7]
  4049b6:	4a1d      	ldr	r2, [pc, #116]	; (404a2c <adc_process_task+0x13c>)
  4049b8:	6812      	ldr	r2, [r2, #0]
  4049ba:	b291      	uxth	r1, r2
  4049bc:	4a1c      	ldr	r2, [pc, #112]	; (404a30 <adc_process_task+0x140>)
  4049be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_4);
  4049c2:	4816      	ldr	r0, [pc, #88]	; (404a1c <adc_process_task+0x12c>)
  4049c4:	2104      	movs	r1, #4
  4049c6:	4b1b      	ldr	r3, [pc, #108]	; (404a34 <adc_process_task+0x144>)
  4049c8:	4798      	blx	r3
			break;
  4049ca:	e01d      	b.n	404a08 <adc_process_task+0x118>
		case 3:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_5);
  4049cc:	4813      	ldr	r0, [pc, #76]	; (404a1c <adc_process_task+0x12c>)
  4049ce:	2105      	movs	r1, #5
  4049d0:	4b13      	ldr	r3, [pc, #76]	; (404a20 <adc_process_task+0x130>)
  4049d2:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  4049d4:	4811      	ldr	r0, [pc, #68]	; (404a1c <adc_process_task+0x12c>)
  4049d6:	4b13      	ldr	r3, [pc, #76]	; (404a24 <adc_process_task+0x134>)
  4049d8:	4798      	blx	r3
			is_conversion_done = false;
  4049da:	4b13      	ldr	r3, [pc, #76]	; (404a28 <adc_process_task+0x138>)
  4049dc:	2200      	movs	r2, #0
  4049de:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  4049e0:	bf00      	nop
  4049e2:	4b11      	ldr	r3, [pc, #68]	; (404a28 <adc_process_task+0x138>)
  4049e4:	781b      	ldrb	r3, [r3, #0]
  4049e6:	f083 0301 	eor.w	r3, r3, #1
  4049ea:	b2db      	uxtb	r3, r3
  4049ec:	2b00      	cmp	r3, #0
  4049ee:	d1f8      	bne.n	4049e2 <adc_process_task+0xf2>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  4049f0:	79fb      	ldrb	r3, [r7, #7]
  4049f2:	4a0e      	ldr	r2, [pc, #56]	; (404a2c <adc_process_task+0x13c>)
  4049f4:	6812      	ldr	r2, [r2, #0]
  4049f6:	b291      	uxth	r1, r2
  4049f8:	4a0d      	ldr	r2, [pc, #52]	; (404a30 <adc_process_task+0x140>)
  4049fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_5);
  4049fe:	4807      	ldr	r0, [pc, #28]	; (404a1c <adc_process_task+0x12c>)
  404a00:	2105      	movs	r1, #5
  404a02:	4b0c      	ldr	r3, [pc, #48]	; (404a34 <adc_process_task+0x144>)
  404a04:	4798      	blx	r3
			break;		
  404a06:	bf00      	nop
	}
	
	return bluesense_buf[shelfIdx];
  404a08:	79fb      	ldrb	r3, [r7, #7]
  404a0a:	4a09      	ldr	r2, [pc, #36]	; (404a30 <adc_process_task+0x140>)
  404a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  404a10:	b21b      	sxth	r3, r3
}
  404a12:	4618      	mov	r0, r3
  404a14:	3708      	adds	r7, #8
  404a16:	46bd      	mov	sp, r7
  404a18:	bd80      	pop	{r7, pc}
  404a1a:	bf00      	nop
  404a1c:	40064000 	.word	0x40064000
  404a20:	004040e1 	.word	0x004040e1
  404a24:	004040c9 	.word	0x004040c9
  404a28:	204009b0 	.word	0x204009b0
  404a2c:	20400af4 	.word	0x20400af4
  404a30:	2040133c 	.word	0x2040133c
  404a34:	00404129 	.word	0x00404129
  404a38:	4003c000 	.word	0x4003c000
  404a3c:	20401330 	.word	0x20401330

00404a40 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
  404a40:	b590      	push	{r4, r7, lr}
  404a42:	b0a1      	sub	sp, #132	; 0x84
  404a44:	af02      	add	r7, sp, #8
  404a46:	4603      	mov	r3, r0
  404a48:	71fb      	strb	r3, [r7, #7]
	uint16_t bluesense[8] = {0,0,0,0,0,0,0,0};
  404a4a:	2300      	movs	r3, #0
  404a4c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  404a50:	2300      	movs	r3, #0
  404a52:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  404a56:	2300      	movs	r3, #0
  404a58:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  404a5c:	2300      	movs	r3, #0
  404a5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  404a62:	2300      	movs	r3, #0
  404a64:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  404a68:	2300      	movs	r3, #0
  404a6a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  404a6e:	2300      	movs	r3, #0
  404a70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  404a74:	2300      	movs	r3, #0
  404a76:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	unsigned long bluesenseAccumulated = 0;
  404a7a:	2300      	movs	r3, #0
  404a7c:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned int bluesenseAvg = 0;
  404a7e:	2300      	movs	r3, #0
  404a80:	66bb      	str	r3, [r7, #104]	; 0x68
	
	char str[80];
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
  404a82:	79fb      	ldrb	r3, [r7, #7]
  404a84:	4618      	mov	r0, r3
  404a86:	2101      	movs	r1, #1
  404a88:	4b37      	ldr	r3, [pc, #220]	; (404b68 <check_shelf_for_devices+0x128>)
  404a8a:	4798      	blx	r3
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
  404a8c:	2064      	movs	r0, #100	; 0x64
  404a8e:	4b37      	ldr	r3, [pc, #220]	; (404b6c <check_shelf_for_devices+0x12c>)
  404a90:	4798      	blx	r3
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  404a92:	2300      	movs	r3, #0
  404a94:	673b      	str	r3, [r7, #112]	; 0x70
  404a96:	e025      	b.n	404ae4 <check_shelf_for_devices+0xa4>
	{
		bluesense[i] = adc_process_task(shelfPosition);
  404a98:	79fb      	ldrb	r3, [r7, #7]
  404a9a:	4618      	mov	r0, r3
  404a9c:	4b34      	ldr	r3, [pc, #208]	; (404b70 <check_shelf_for_devices+0x130>)
  404a9e:	4798      	blx	r3
  404aa0:	4603      	mov	r3, r0
  404aa2:	b29a      	uxth	r2, r3
  404aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404aa6:	005b      	lsls	r3, r3, #1
  404aa8:	f107 0178 	add.w	r1, r7, #120	; 0x78
  404aac:	440b      	add	r3, r1
  404aae:	f823 2c20 	strh.w	r2, [r3, #-32]
		
		if (bluesense[i] & 0x8000) //don't try to average negative numbers
  404ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404ab4:	005b      	lsls	r3, r3, #1
  404ab6:	f107 0278 	add.w	r2, r7, #120	; 0x78
  404aba:	4413      	add	r3, r2
  404abc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404ac0:	b29b      	uxth	r3, r3
  404ac2:	b21b      	sxth	r3, r3
  404ac4:	2b00      	cmp	r3, #0
  404ac6:	db0a      	blt.n	404ade <check_shelf_for_devices+0x9e>
		{
			bluesenseAccumulated += 0;
		}
		else
		{
			bluesenseAccumulated += bluesense[i];
  404ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404aca:	005b      	lsls	r3, r3, #1
  404acc:	f107 0278 	add.w	r2, r7, #120	; 0x78
  404ad0:	4413      	add	r3, r2
  404ad2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404ad6:	461a      	mov	r2, r3
  404ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  404ada:	4413      	add	r3, r2
  404adc:	677b      	str	r3, [r7, #116]	; 0x74
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  404ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404ae0:	3301      	adds	r3, #1
  404ae2:	673b      	str	r3, [r7, #112]	; 0x70
  404ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404ae6:	2b07      	cmp	r3, #7
  404ae8:	ddd6      	ble.n	404a98 <check_shelf_for_devices+0x58>
		{
			bluesenseAccumulated += bluesense[i];
		}
	}
	
	bluesenseAvg = bluesenseAccumulated/8;
  404aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  404aec:	08db      	lsrs	r3, r3, #3
  404aee:	66bb      	str	r3, [r7, #104]	; 0x68
	
	led_shelf(shelfPosition, LED_OFF);
  404af0:	79fb      	ldrb	r3, [r7, #7]
  404af2:	4618      	mov	r0, r3
  404af4:	2100      	movs	r1, #0
  404af6:	4b1c      	ldr	r3, [pc, #112]	; (404b68 <check_shelf_for_devices+0x128>)
  404af8:	4798      	blx	r3
	
	memset(str,0x00, 80);
  404afa:	f107 0308 	add.w	r3, r7, #8
  404afe:	4618      	mov	r0, r3
  404b00:	2100      	movs	r1, #0
  404b02:	2250      	movs	r2, #80	; 0x50
  404b04:	4b1b      	ldr	r3, [pc, #108]	; (404b74 <check_shelf_for_devices+0x134>)
  404b06:	4798      	blx	r3

	for (int i=0; i<8; i++)
  404b08:	2300      	movs	r3, #0
  404b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  404b0c:	e018      	b.n	404b40 <check_shelf_for_devices+0x100>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
  404b0e:	79fa      	ldrb	r2, [r7, #7]
  404b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404b12:	005b      	lsls	r3, r3, #1
  404b14:	f107 0178 	add.w	r1, r7, #120	; 0x78
  404b18:	440b      	add	r3, r1
  404b1a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404b1e:	4619      	mov	r1, r3
  404b20:	f107 0308 	add.w	r3, r7, #8
  404b24:	9100      	str	r1, [sp, #0]
  404b26:	4618      	mov	r0, r3
  404b28:	4913      	ldr	r1, [pc, #76]	; (404b78 <check_shelf_for_devices+0x138>)
  404b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404b2c:	4c13      	ldr	r4, [pc, #76]	; (404b7c <check_shelf_for_devices+0x13c>)
  404b2e:	47a0      	blx	r4
		print_ecdbg(str);
  404b30:	f107 0308 	add.w	r3, r7, #8
  404b34:	4618      	mov	r0, r3
  404b36:	4b12      	ldr	r3, [pc, #72]	; (404b80 <check_shelf_for_devices+0x140>)
  404b38:	4798      	blx	r3
	
	led_shelf(shelfPosition, LED_OFF);
	
	memset(str,0x00, 80);

	for (int i=0; i<8; i++)
  404b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404b3c:	3301      	adds	r3, #1
  404b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  404b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404b42:	2b07      	cmp	r3, #7
  404b44:	dde3      	ble.n	404b0e <check_shelf_for_devices+0xce>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
		print_ecdbg(str);
	}

	if ((bluesenseAvg < 0x300) ||  (bluesenseAvg & 0x8000))//full range for 12 bit number is 0xFFF, but this number is 2's complement meaning it can (and it does) go negative
  404b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  404b4c:	d304      	bcc.n	404b58 <check_shelf_for_devices+0x118>
  404b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404b54:	2b00      	cmp	r3, #0
  404b56:	d001      	beq.n	404b5c <check_shelf_for_devices+0x11c>
	{
		return DEVICES_PRESENT;
  404b58:	2301      	movs	r3, #1
  404b5a:	e000      	b.n	404b5e <check_shelf_for_devices+0x11e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
  404b5c:	2300      	movs	r3, #0
	}
}
  404b5e:	4618      	mov	r0, r3
  404b60:	377c      	adds	r7, #124	; 0x7c
  404b62:	46bd      	mov	sp, r7
  404b64:	bd90      	pop	{r4, r7, pc}
  404b66:	bf00      	nop
  404b68:	00402a45 	.word	0x00402a45
  404b6c:	00403a49 	.word	0x00403a49
  404b70:	004048f1 	.word	0x004048f1
  404b74:	00407509 	.word	0x00407509
  404b78:	0040c690 	.word	0x0040c690
  404b7c:	00407725 	.word	0x00407725
  404b80:	004026b1 	.word	0x004026b1

00404b84 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
  404b84:	b580      	push	{r7, lr}
  404b86:	b082      	sub	sp, #8
  404b88:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_SHELVES; i++)
  404b8a:	2300      	movs	r3, #0
  404b8c:	607b      	str	r3, [r7, #4]
  404b8e:	e02d      	b.n	404bec <check_shelves_for_devices+0x68>
	{
		if (shelf[i].present)
  404b90:	4919      	ldr	r1, [pc, #100]	; (404bf8 <check_shelves_for_devices+0x74>)
  404b92:	687a      	ldr	r2, [r7, #4]
  404b94:	4613      	mov	r3, r2
  404b96:	009b      	lsls	r3, r3, #2
  404b98:	4413      	add	r3, r2
  404b9a:	440b      	add	r3, r1
  404b9c:	791b      	ldrb	r3, [r3, #4]
  404b9e:	2b00      	cmp	r3, #0
  404ba0:	d021      	beq.n	404be6 <check_shelves_for_devices+0x62>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);
  404ba2:	687b      	ldr	r3, [r7, #4]
  404ba4:	b2db      	uxtb	r3, r3
  404ba6:	4618      	mov	r0, r3
  404ba8:	4b14      	ldr	r3, [pc, #80]	; (404bfc <check_shelves_for_devices+0x78>)
  404baa:	4798      	blx	r3
  404bac:	4603      	mov	r3, r0
  404bae:	4618      	mov	r0, r3
  404bb0:	4911      	ldr	r1, [pc, #68]	; (404bf8 <check_shelves_for_devices+0x74>)
  404bb2:	687a      	ldr	r2, [r7, #4]
  404bb4:	4613      	mov	r3, r2
  404bb6:	009b      	lsls	r3, r3, #2
  404bb8:	4413      	add	r3, r2
  404bba:	440b      	add	r3, r1
  404bbc:	4602      	mov	r2, r0
  404bbe:	70da      	strb	r2, [r3, #3]
			
			if (shelf[i].devicesPresent)
  404bc0:	490d      	ldr	r1, [pc, #52]	; (404bf8 <check_shelves_for_devices+0x74>)
  404bc2:	687a      	ldr	r2, [r7, #4]
  404bc4:	4613      	mov	r3, r2
  404bc6:	009b      	lsls	r3, r3, #2
  404bc8:	4413      	add	r3, r2
  404bca:	440b      	add	r3, r1
  404bcc:	78db      	ldrb	r3, [r3, #3]
  404bce:	2b00      	cmp	r3, #0
  404bd0:	d009      	beq.n	404be6 <check_shelves_for_devices+0x62>
			{
				print_ecdbg("Devices detected on shelf ");
  404bd2:	480b      	ldr	r0, [pc, #44]	; (404c00 <check_shelves_for_devices+0x7c>)
  404bd4:	4b0b      	ldr	r3, [pc, #44]	; (404c04 <check_shelves_for_devices+0x80>)
  404bd6:	4798      	blx	r3
				print_ecdbg_num(i);
  404bd8:	687b      	ldr	r3, [r7, #4]
  404bda:	4618      	mov	r0, r3
  404bdc:	4b0a      	ldr	r3, [pc, #40]	; (404c08 <check_shelves_for_devices+0x84>)
  404bde:	4798      	blx	r3
				print_ecdbg("\r\n");
  404be0:	480a      	ldr	r0, [pc, #40]	; (404c0c <check_shelves_for_devices+0x88>)
  404be2:	4b08      	ldr	r3, [pc, #32]	; (404c04 <check_shelves_for_devices+0x80>)
  404be4:	4798      	blx	r3
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
  404be6:	687b      	ldr	r3, [r7, #4]
  404be8:	3301      	adds	r3, #1
  404bea:	607b      	str	r3, [r7, #4]
  404bec:	687b      	ldr	r3, [r7, #4]
  404bee:	2b03      	cmp	r3, #3
  404bf0:	ddce      	ble.n	404b90 <check_shelves_for_devices+0xc>
				print_ecdbg_num(i);
				print_ecdbg("\r\n");
			}
		}
	}
}
  404bf2:	3708      	adds	r7, #8
  404bf4:	46bd      	mov	sp, r7
  404bf6:	bd80      	pop	{r7, pc}
  404bf8:	2040168c 	.word	0x2040168c
  404bfc:	00404a41 	.word	0x00404a41
  404c00:	0040c6b0 	.word	0x0040c6b0
  404c04:	004026b1 	.word	0x004026b1
  404c08:	00404481 	.word	0x00404481
  404c0c:	0040c61c 	.word	0x0040c61c

00404c10 <print_pca9952_errors>:


void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1);
void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1)
{
  404c10:	b580      	push	{r7, lr}
  404c12:	b086      	sub	sp, #24
  404c14:	af00      	add	r7, sp, #0
  404c16:	4603      	mov	r3, r0
  404c18:	71fb      	strb	r3, [r7, #7]
  404c1a:	460b      	mov	r3, r1
  404c1c:	71bb      	strb	r3, [r7, #6]
  404c1e:	4613      	mov	r3, r2
  404c20:	717b      	strb	r3, [r7, #5]
	unsigned char bit;
	
	switch (sideSel)
  404c22:	79fb      	ldrb	r3, [r7, #7]
  404c24:	2b00      	cmp	r3, #0
  404c26:	d03c      	beq.n	404ca2 <print_pca9952_errors+0x92>
  404c28:	2b01      	cmp	r3, #1
  404c2a:	f040 8096 	bne.w	404d5a <print_pca9952_errors+0x14a>
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
  404c2e:	484c      	ldr	r0, [pc, #304]	; (404d60 <print_pca9952_errors+0x150>)
  404c30:	4b4c      	ldr	r3, [pc, #304]	; (404d64 <print_pca9952_errors+0x154>)
  404c32:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  404c34:	2300      	movs	r3, #0
  404c36:	617b      	str	r3, [r7, #20]
  404c38:	e022      	b.n	404c80 <print_pca9952_errors+0x70>
			{
				bit = (1 << i);
  404c3a:	2201      	movs	r2, #1
  404c3c:	697b      	ldr	r3, [r7, #20]
  404c3e:	fa02 f303 	lsl.w	r3, r2, r3
  404c42:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  404c44:	7afa      	ldrb	r2, [r7, #11]
  404c46:	79bb      	ldrb	r3, [r7, #6]
  404c48:	4013      	ands	r3, r2
  404c4a:	b2db      	uxtb	r3, r3
  404c4c:	2b00      	cmp	r3, #0
  404c4e:	d014      	beq.n	404c7a <print_pca9952_errors+0x6a>
				{
					print_ecdbg_num(i);
  404c50:	697b      	ldr	r3, [r7, #20]
  404c52:	4618      	mov	r0, r3
  404c54:	4b44      	ldr	r3, [pc, #272]	; (404d68 <print_pca9952_errors+0x158>)
  404c56:	4798      	blx	r3
					print_ecdbg(" ");
  404c58:	4844      	ldr	r0, [pc, #272]	; (404d6c <print_pca9952_errors+0x15c>)
  404c5a:	4b42      	ldr	r3, [pc, #264]	; (404d64 <print_pca9952_errors+0x154>)
  404c5c:	4798      	blx	r3
					sysErr.topdrive |= BIT(i); //SE_FAIL
  404c5e:	4b44      	ldr	r3, [pc, #272]	; (404d70 <print_pca9952_errors+0x160>)
  404c60:	781b      	ldrb	r3, [r3, #0]
  404c62:	b2d9      	uxtb	r1, r3
  404c64:	2201      	movs	r2, #1
  404c66:	697b      	ldr	r3, [r7, #20]
  404c68:	fa02 f303 	lsl.w	r3, r2, r3
  404c6c:	b2db      	uxtb	r3, r3
  404c6e:	460a      	mov	r2, r1
  404c70:	4313      	orrs	r3, r2
  404c72:	b2db      	uxtb	r3, r3
  404c74:	b2da      	uxtb	r2, r3
  404c76:	4b3e      	ldr	r3, [pc, #248]	; (404d70 <print_pca9952_errors+0x160>)
  404c78:	701a      	strb	r2, [r3, #0]
	switch (sideSel)
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
			
			for (int i=0; i<8; i++)
  404c7a:	697b      	ldr	r3, [r7, #20]
  404c7c:	3301      	adds	r3, #1
  404c7e:	617b      	str	r3, [r7, #20]
  404c80:	697b      	ldr	r3, [r7, #20]
  404c82:	2b07      	cmp	r3, #7
  404c84:	ddd9      	ble.n	404c3a <print_pca9952_errors+0x2a>
					sysErr.topdrive |= BIT(i); //SE_FAIL
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  404c86:	483b      	ldr	r0, [pc, #236]	; (404d74 <print_pca9952_errors+0x164>)
  404c88:	4b36      	ldr	r3, [pc, #216]	; (404d64 <print_pca9952_errors+0x154>)
  404c8a:	4798      	blx	r3
			
			if (eflag1 != 0)
  404c8c:	797b      	ldrb	r3, [r7, #5]
  404c8e:	2b00      	cmp	r3, #0
  404c90:	d006      	beq.n	404ca0 <print_pca9952_errors+0x90>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
  404c92:	4839      	ldr	r0, [pc, #228]	; (404d78 <print_pca9952_errors+0x168>)
  404c94:	4b33      	ldr	r3, [pc, #204]	; (404d64 <print_pca9952_errors+0x154>)
  404c96:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  404c98:	4b38      	ldr	r3, [pc, #224]	; (404d7c <print_pca9952_errors+0x16c>)
  404c9a:	2207      	movs	r2, #7
  404c9c:	701a      	strb	r2, [r3, #0]
			}
			
			break;
  404c9e:	e05c      	b.n	404d5a <print_pca9952_errors+0x14a>
  404ca0:	e05b      	b.n	404d5a <print_pca9952_errors+0x14a>

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
  404ca2:	4837      	ldr	r0, [pc, #220]	; (404d80 <print_pca9952_errors+0x170>)
  404ca4:	4b2f      	ldr	r3, [pc, #188]	; (404d64 <print_pca9952_errors+0x154>)
  404ca6:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  404ca8:	2300      	movs	r3, #0
  404caa:	613b      	str	r3, [r7, #16]
  404cac:	e01d      	b.n	404cea <print_pca9952_errors+0xda>
			{
				bit = (1 << i);
  404cae:	2201      	movs	r2, #1
  404cb0:	693b      	ldr	r3, [r7, #16]
  404cb2:	fa02 f303 	lsl.w	r3, r2, r3
  404cb6:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  404cb8:	7afa      	ldrb	r2, [r7, #11]
  404cba:	79bb      	ldrb	r3, [r7, #6]
  404cbc:	4013      	ands	r3, r2
  404cbe:	b2db      	uxtb	r3, r3
  404cc0:	2b00      	cmp	r3, #0
  404cc2:	d00f      	beq.n	404ce4 <print_pca9952_errors+0xd4>
				{
					print_ecdbg_num(i);
  404cc4:	693b      	ldr	r3, [r7, #16]
  404cc6:	4618      	mov	r0, r3
  404cc8:	4b27      	ldr	r3, [pc, #156]	; (404d68 <print_pca9952_errors+0x158>)
  404cca:	4798      	blx	r3
					print_ecdbg(" ");
  404ccc:	4827      	ldr	r0, [pc, #156]	; (404d6c <print_pca9952_errors+0x15c>)
  404cce:	4b25      	ldr	r3, [pc, #148]	; (404d64 <print_pca9952_errors+0x154>)
  404cd0:	4798      	blx	r3
					sysErr.botdrive |= BIT(i); //SE_FAIL;
  404cd2:	4b27      	ldr	r3, [pc, #156]	; (404d70 <print_pca9952_errors+0x160>)
  404cd4:	685b      	ldr	r3, [r3, #4]
  404cd6:	2101      	movs	r1, #1
  404cd8:	693a      	ldr	r2, [r7, #16]
  404cda:	fa01 f202 	lsl.w	r2, r1, r2
  404cde:	4313      	orrs	r3, r2
  404ce0:	4a23      	ldr	r2, [pc, #140]	; (404d70 <print_pca9952_errors+0x160>)
  404ce2:	6053      	str	r3, [r2, #4]
			break;

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
			
			for (int i=0; i<8; i++)
  404ce4:	693b      	ldr	r3, [r7, #16]
  404ce6:	3301      	adds	r3, #1
  404ce8:	613b      	str	r3, [r7, #16]
  404cea:	693b      	ldr	r3, [r7, #16]
  404cec:	2b07      	cmp	r3, #7
  404cee:	ddde      	ble.n	404cae <print_pca9952_errors+0x9e>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  404cf0:	2300      	movs	r3, #0
  404cf2:	60fb      	str	r3, [r7, #12]
  404cf4:	e01f      	b.n	404d36 <print_pca9952_errors+0x126>
			{
				bit = (1 << i);
  404cf6:	2201      	movs	r2, #1
  404cf8:	68fb      	ldr	r3, [r7, #12]
  404cfa:	fa02 f303 	lsl.w	r3, r2, r3
  404cfe:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag1)
  404d00:	7afa      	ldrb	r2, [r7, #11]
  404d02:	797b      	ldrb	r3, [r7, #5]
  404d04:	4013      	ands	r3, r2
  404d06:	b2db      	uxtb	r3, r3
  404d08:	2b00      	cmp	r3, #0
  404d0a:	d011      	beq.n	404d30 <print_pca9952_errors+0x120>
				{
					print_ecdbg_num((i+8));
  404d0c:	68fb      	ldr	r3, [r7, #12]
  404d0e:	3308      	adds	r3, #8
  404d10:	4618      	mov	r0, r3
  404d12:	4b15      	ldr	r3, [pc, #84]	; (404d68 <print_pca9952_errors+0x158>)
  404d14:	4798      	blx	r3
					print_ecdbg(" ");
  404d16:	4815      	ldr	r0, [pc, #84]	; (404d6c <print_pca9952_errors+0x15c>)
  404d18:	4b12      	ldr	r3, [pc, #72]	; (404d64 <print_pca9952_errors+0x154>)
  404d1a:	4798      	blx	r3
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
  404d1c:	4b14      	ldr	r3, [pc, #80]	; (404d70 <print_pca9952_errors+0x160>)
  404d1e:	685b      	ldr	r3, [r3, #4]
  404d20:	68fa      	ldr	r2, [r7, #12]
  404d22:	3208      	adds	r2, #8
  404d24:	2101      	movs	r1, #1
  404d26:	fa01 f202 	lsl.w	r2, r1, r2
  404d2a:	4313      	orrs	r3, r2
  404d2c:	4a10      	ldr	r2, [pc, #64]	; (404d70 <print_pca9952_errors+0x160>)
  404d2e:	6053      	str	r3, [r2, #4]
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  404d30:	68fb      	ldr	r3, [r7, #12]
  404d32:	3301      	adds	r3, #1
  404d34:	60fb      	str	r3, [r7, #12]
  404d36:	68fb      	ldr	r3, [r7, #12]
  404d38:	2b03      	cmp	r3, #3
  404d3a:	dddc      	ble.n	404cf6 <print_pca9952_errors+0xe6>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  404d3c:	480d      	ldr	r0, [pc, #52]	; (404d74 <print_pca9952_errors+0x164>)
  404d3e:	4b09      	ldr	r3, [pc, #36]	; (404d64 <print_pca9952_errors+0x154>)
  404d40:	4798      	blx	r3
			
			if ((eflag1 & 0xF0) != 0)
  404d42:	797b      	ldrb	r3, [r7, #5]
  404d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  404d48:	2b00      	cmp	r3, #0
  404d4a:	d005      	beq.n	404d58 <print_pca9952_errors+0x148>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
  404d4c:	480d      	ldr	r0, [pc, #52]	; (404d84 <print_pca9952_errors+0x174>)
  404d4e:	4b05      	ldr	r3, [pc, #20]	; (404d64 <print_pca9952_errors+0x154>)
  404d50:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  404d52:	4b0a      	ldr	r3, [pc, #40]	; (404d7c <print_pca9952_errors+0x16c>)
  404d54:	2207      	movs	r2, #7
  404d56:	701a      	strb	r2, [r3, #0]
			}
			break;
  404d58:	bf00      	nop
	}
}
  404d5a:	3718      	adds	r7, #24
  404d5c:	46bd      	mov	sp, r7
  404d5e:	bd80      	pop	{r7, pc}
  404d60:	0040c6cc 	.word	0x0040c6cc
  404d64:	004026b1 	.word	0x004026b1
  404d68:	00404481 	.word	0x00404481
  404d6c:	0040c6ec 	.word	0x0040c6ec
  404d70:	204016b4 	.word	0x204016b4
  404d74:	0040c61c 	.word	0x0040c61c
  404d78:	0040c6f0 	.word	0x0040c6f0
  404d7c:	204009b9 	.word	0x204009b9
  404d80:	0040c72c 	.word	0x0040c72c
  404d84:	0040c74c 	.word	0x0040c74c

00404d88 <test_led_driver_channels>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void test_led_driver_channels(void);
void test_led_driver_channels(void)
{
  404d88:	b580      	push	{r7, lr}
  404d8a:	b086      	sub	sp, #24
  404d8c:	af00      	add	r7, sp, #0
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
  404d8e:	2300      	movs	r3, #0
  404d90:	75fb      	strb	r3, [r7, #23]
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  404d92:	2300      	movs	r3, #0
  404d94:	613b      	str	r3, [r7, #16]
  404d96:	e00e      	b.n	404db6 <test_led_driver_channels+0x2e>
	{
		if (shelf[i].present)
  404d98:	496a      	ldr	r1, [pc, #424]	; (404f44 <test_led_driver_channels+0x1bc>)
  404d9a:	693a      	ldr	r2, [r7, #16]
  404d9c:	4613      	mov	r3, r2
  404d9e:	009b      	lsls	r3, r3, #2
  404da0:	4413      	add	r3, r2
  404da2:	440b      	add	r3, r1
  404da4:	791b      	ldrb	r3, [r3, #4]
  404da6:	2b00      	cmp	r3, #0
  404da8:	d002      	beq.n	404db0 <test_led_driver_channels+0x28>
		{
			numShelvesPresent++;
  404daa:	7dfb      	ldrb	r3, [r7, #23]
  404dac:	3301      	adds	r3, #1
  404dae:	75fb      	strb	r3, [r7, #23]
void test_led_driver_channels(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  404db0:	693b      	ldr	r3, [r7, #16]
  404db2:	3301      	adds	r3, #1
  404db4:	613b      	str	r3, [r7, #16]
  404db6:	693b      	ldr	r3, [r7, #16]
  404db8:	2b03      	cmp	r3, #3
  404dba:	dded      	ble.n	404d98 <test_led_driver_channels+0x10>
		{
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
  404dbc:	7dfb      	ldrb	r3, [r7, #23]
  404dbe:	2b00      	cmp	r3, #0
  404dc0:	f000 80ad 	beq.w	404f1e <test_led_driver_channels+0x196>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  404dc4:	2000      	movs	r0, #0
  404dc6:	2143      	movs	r1, #67	; 0x43
  404dc8:	22c8      	movs	r2, #200	; 0xc8
  404dca:	4b5f      	ldr	r3, [pc, #380]	; (404f48 <test_led_driver_channels+0x1c0>)
  404dcc:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  404dce:	2001      	movs	r0, #1
  404dd0:	2143      	movs	r1, #67	; 0x43
  404dd2:	22c8      	movs	r2, #200	; 0xc8
  404dd4:	4b5c      	ldr	r3, [pc, #368]	; (404f48 <test_led_driver_channels+0x1c0>)
  404dd6:	4798      	blx	r3

		for (int i=0; i<NUM_SHELVES; i++)
  404dd8:	2300      	movs	r3, #0
  404dda:	60fb      	str	r3, [r7, #12]
  404ddc:	e011      	b.n	404e02 <test_led_driver_channels+0x7a>
		{
			if (shelf[i].present)
  404dde:	4959      	ldr	r1, [pc, #356]	; (404f44 <test_led_driver_channels+0x1bc>)
  404de0:	68fa      	ldr	r2, [r7, #12]
  404de2:	4613      	mov	r3, r2
  404de4:	009b      	lsls	r3, r3, #2
  404de6:	4413      	add	r3, r2
  404de8:	440b      	add	r3, r1
  404dea:	791b      	ldrb	r3, [r3, #4]
  404dec:	2b00      	cmp	r3, #0
  404dee:	d005      	beq.n	404dfc <test_led_driver_channels+0x74>
			{
				led_shelf(i, LED_ON);
  404df0:	68fb      	ldr	r3, [r7, #12]
  404df2:	b2db      	uxtb	r3, r3
  404df4:	4618      	mov	r0, r3
  404df6:	2101      	movs	r1, #1
  404df8:	4b54      	ldr	r3, [pc, #336]	; (404f4c <test_led_driver_channels+0x1c4>)
  404dfa:	4798      	blx	r3
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
  404dfc:	68fb      	ldr	r3, [r7, #12]
  404dfe:	3301      	adds	r3, #1
  404e00:	60fb      	str	r3, [r7, #12]
  404e02:	68fb      	ldr	r3, [r7, #12]
  404e04:	2b03      	cmp	r3, #3
  404e06:	ddea      	ble.n	404dde <test_led_driver_channels+0x56>
			{
				led_shelf(i, LED_ON);
			}
		}
		
		udelay(100); //maybe need this while testing LED boards with resistors in place of real LEDs 31july2015
  404e08:	2064      	movs	r0, #100	; 0x64
  404e0a:	4b51      	ldr	r3, [pc, #324]	; (404f50 <test_led_driver_channels+0x1c8>)
  404e0c:	4798      	blx	r3

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
  404e0e:	2000      	movs	r0, #0
  404e10:	2101      	movs	r1, #1
  404e12:	2240      	movs	r2, #64	; 0x40
  404e14:	4b4c      	ldr	r3, [pc, #304]	; (404f48 <test_led_driver_channels+0x1c0>)
  404e16:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
  404e18:	2001      	movs	r0, #1
  404e1a:	2101      	movs	r1, #1
  404e1c:	2240      	movs	r2, #64	; 0x40
  404e1e:	4b4a      	ldr	r3, [pc, #296]	; (404f48 <test_led_driver_channels+0x1c0>)
  404e20:	4798      	blx	r3
		
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
  404e22:	2000      	movs	r0, #0
  404e24:	2101      	movs	r1, #1
  404e26:	4b4b      	ldr	r3, [pc, #300]	; (404f54 <test_led_driver_channels+0x1cc>)
  404e28:	4798      	blx	r3
  404e2a:	4603      	mov	r3, r0
  404e2c:	71fb      	strb	r3, [r7, #7]
			
			if ((tmp1 & 0x40) == 0)
  404e2e:	79fb      	ldrb	r3, [r7, #7]
  404e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404e34:	2b00      	cmp	r3, #0
  404e36:	d125      	bne.n	404e84 <test_led_driver_channels+0xfc>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
  404e38:	2000      	movs	r0, #0
  404e3a:	2144      	movs	r1, #68	; 0x44
  404e3c:	4b45      	ldr	r3, [pc, #276]	; (404f54 <test_led_driver_channels+0x1cc>)
  404e3e:	4798      	blx	r3
  404e40:	4603      	mov	r3, r0
  404e42:	461a      	mov	r2, r3
  404e44:	4b44      	ldr	r3, [pc, #272]	; (404f58 <test_led_driver_channels+0x1d0>)
  404e46:	701a      	strb	r2, [r3, #0]
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  404e48:	2000      	movs	r0, #0
  404e4a:	2145      	movs	r1, #69	; 0x45
  404e4c:	4b41      	ldr	r3, [pc, #260]	; (404f54 <test_led_driver_channels+0x1cc>)
  404e4e:	4798      	blx	r3
  404e50:	4603      	mov	r3, r0
  404e52:	461a      	mov	r2, r3
  404e54:	4b41      	ldr	r3, [pc, #260]	; (404f5c <test_led_driver_channels+0x1d4>)
  404e56:	701a      	strb	r2, [r3, #0]
				
				if ((topEflag0 != 0) || (topEflag1 != 0))
  404e58:	4b3f      	ldr	r3, [pc, #252]	; (404f58 <test_led_driver_channels+0x1d0>)
  404e5a:	781b      	ldrb	r3, [r3, #0]
  404e5c:	2b00      	cmp	r3, #0
  404e5e:	d103      	bne.n	404e68 <test_led_driver_channels+0xe0>
  404e60:	4b3e      	ldr	r3, [pc, #248]	; (404f5c <test_led_driver_channels+0x1d4>)
  404e62:	781b      	ldrb	r3, [r3, #0]
  404e64:	2b00      	cmp	r3, #0
  404e66:	d00c      	beq.n	404e82 <test_led_driver_channels+0xfa>
				{
					if (!firstTimeThroughPCA9952)
  404e68:	4b3d      	ldr	r3, [pc, #244]	; (404f60 <test_led_driver_channels+0x1d8>)
  404e6a:	781b      	ldrb	r3, [r3, #0]
  404e6c:	2b00      	cmp	r3, #0
  404e6e:	d108      	bne.n	404e82 <test_led_driver_channels+0xfa>
					{
						print_pca9952_errors(TOP, topEflag0, topEflag1);
  404e70:	4b39      	ldr	r3, [pc, #228]	; (404f58 <test_led_driver_channels+0x1d0>)
  404e72:	781a      	ldrb	r2, [r3, #0]
  404e74:	4b39      	ldr	r3, [pc, #228]	; (404f5c <test_led_driver_channels+0x1d4>)
  404e76:	781b      	ldrb	r3, [r3, #0]
  404e78:	2001      	movs	r0, #1
  404e7a:	4611      	mov	r1, r2
  404e7c:	461a      	mov	r2, r3
  404e7e:	4b39      	ldr	r3, [pc, #228]	; (404f64 <test_led_driver_channels+0x1dc>)
  404e80:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_TOP strings is complete
  404e82:	e000      	b.n	404e86 <test_led_driver_channels+0xfe>
			}
			
		}
  404e84:	e7cd      	b.n	404e22 <test_led_driver_channels+0x9a>
		
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
  404e86:	2001      	movs	r0, #1
  404e88:	2101      	movs	r1, #1
  404e8a:	4b32      	ldr	r3, [pc, #200]	; (404f54 <test_led_driver_channels+0x1cc>)
  404e8c:	4798      	blx	r3
  404e8e:	4603      	mov	r3, r0
  404e90:	71bb      	strb	r3, [r7, #6]
			
			if ((tmp2 & 0x40) == 0)
  404e92:	79bb      	ldrb	r3, [r7, #6]
  404e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404e98:	2b00      	cmp	r3, #0
  404e9a:	d126      	bne.n	404eea <test_led_driver_channels+0x162>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
  404e9c:	2001      	movs	r0, #1
  404e9e:	2144      	movs	r1, #68	; 0x44
  404ea0:	4b2c      	ldr	r3, [pc, #176]	; (404f54 <test_led_driver_channels+0x1cc>)
  404ea2:	4798      	blx	r3
  404ea4:	4603      	mov	r3, r0
  404ea6:	461a      	mov	r2, r3
  404ea8:	4b2f      	ldr	r3, [pc, #188]	; (404f68 <test_led_driver_channels+0x1e0>)
  404eaa:	701a      	strb	r2, [r3, #0]
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  404eac:	2001      	movs	r0, #1
  404eae:	2145      	movs	r1, #69	; 0x45
  404eb0:	4b28      	ldr	r3, [pc, #160]	; (404f54 <test_led_driver_channels+0x1cc>)
  404eb2:	4798      	blx	r3
  404eb4:	4603      	mov	r3, r0
  404eb6:	461a      	mov	r2, r3
  404eb8:	4b2c      	ldr	r3, [pc, #176]	; (404f6c <test_led_driver_channels+0x1e4>)
  404eba:	701a      	strb	r2, [r3, #0]
				
				if ((botEflag0 != 0) || (botEflag1 != 0))
  404ebc:	4b2a      	ldr	r3, [pc, #168]	; (404f68 <test_led_driver_channels+0x1e0>)
  404ebe:	781b      	ldrb	r3, [r3, #0]
  404ec0:	2b00      	cmp	r3, #0
  404ec2:	d103      	bne.n	404ecc <test_led_driver_channels+0x144>
  404ec4:	4b29      	ldr	r3, [pc, #164]	; (404f6c <test_led_driver_channels+0x1e4>)
  404ec6:	781b      	ldrb	r3, [r3, #0]
  404ec8:	2b00      	cmp	r3, #0
  404eca:	d00d      	beq.n	404ee8 <test_led_driver_channels+0x160>
				{
					if (!firstTimeThroughPCA9952)
  404ecc:	4b24      	ldr	r3, [pc, #144]	; (404f60 <test_led_driver_channels+0x1d8>)
  404ece:	781b      	ldrb	r3, [r3, #0]
  404ed0:	2b00      	cmp	r3, #0
  404ed2:	d109      	bne.n	404ee8 <test_led_driver_channels+0x160>
					{
						print_pca9952_errors(BOTTOM, botEflag0, botEflag1);
  404ed4:	4b24      	ldr	r3, [pc, #144]	; (404f68 <test_led_driver_channels+0x1e0>)
  404ed6:	781a      	ldrb	r2, [r3, #0]
  404ed8:	4b24      	ldr	r3, [pc, #144]	; (404f6c <test_led_driver_channels+0x1e4>)
  404eda:	781b      	ldrb	r3, [r3, #0]
  404edc:	2000      	movs	r0, #0
  404ede:	4611      	mov	r1, r2
  404ee0:	461a      	mov	r2, r3
  404ee2:	4b20      	ldr	r3, [pc, #128]	; (404f64 <test_led_driver_channels+0x1dc>)
  404ee4:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_BOTTOM strings is complete
  404ee6:	e001      	b.n	404eec <test_led_driver_channels+0x164>
  404ee8:	e000      	b.n	404eec <test_led_driver_channels+0x164>
			}
			
		}
  404eea:	e7cc      	b.n	404e86 <test_led_driver_channels+0xfe>
		
		for (int i=0; i<NUM_SHELVES; i++)
  404eec:	2300      	movs	r3, #0
  404eee:	60bb      	str	r3, [r7, #8]
  404ef0:	e008      	b.n	404f04 <test_led_driver_channels+0x17c>
		{
			led_shelf(i, LED_OFF);
  404ef2:	68bb      	ldr	r3, [r7, #8]
  404ef4:	b2db      	uxtb	r3, r3
  404ef6:	4618      	mov	r0, r3
  404ef8:	2100      	movs	r1, #0
  404efa:	4b14      	ldr	r3, [pc, #80]	; (404f4c <test_led_driver_channels+0x1c4>)
  404efc:	4798      	blx	r3
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
  404efe:	68bb      	ldr	r3, [r7, #8]
  404f00:	3301      	adds	r3, #1
  404f02:	60bb      	str	r3, [r7, #8]
  404f04:	68bb      	ldr	r3, [r7, #8]
  404f06:	2b03      	cmp	r3, #3
  404f08:	ddf3      	ble.n	404ef2 <test_led_driver_channels+0x16a>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  404f0a:	2000      	movs	r0, #0
  404f0c:	2143      	movs	r1, #67	; 0x43
  404f0e:	22c8      	movs	r2, #200	; 0xc8
  404f10:	4b0d      	ldr	r3, [pc, #52]	; (404f48 <test_led_driver_channels+0x1c0>)
  404f12:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  404f14:	2001      	movs	r0, #1
  404f16:	2143      	movs	r1, #67	; 0x43
  404f18:	22c8      	movs	r2, #200	; 0xc8
  404f1a:	4b0b      	ldr	r3, [pc, #44]	; (404f48 <test_led_driver_channels+0x1c0>)
  404f1c:	4798      	blx	r3
	}
	
	sysErr.topdrive = topEflag0;
  404f1e:	4b0e      	ldr	r3, [pc, #56]	; (404f58 <test_led_driver_channels+0x1d0>)
  404f20:	781a      	ldrb	r2, [r3, #0]
  404f22:	4b13      	ldr	r3, [pc, #76]	; (404f70 <test_led_driver_channels+0x1e8>)
  404f24:	701a      	strb	r2, [r3, #0]
	sysErr.botdrive = (botEflag1 << 8) | botEflag0;
  404f26:	4b11      	ldr	r3, [pc, #68]	; (404f6c <test_led_driver_channels+0x1e4>)
  404f28:	781b      	ldrb	r3, [r3, #0]
  404f2a:	021b      	lsls	r3, r3, #8
  404f2c:	4a0e      	ldr	r2, [pc, #56]	; (404f68 <test_led_driver_channels+0x1e0>)
  404f2e:	7812      	ldrb	r2, [r2, #0]
  404f30:	4313      	orrs	r3, r2
  404f32:	461a      	mov	r2, r3
  404f34:	4b0e      	ldr	r3, [pc, #56]	; (404f70 <test_led_driver_channels+0x1e8>)
  404f36:	605a      	str	r2, [r3, #4]
	firstTimeThroughPCA9952 = 0;
  404f38:	4b09      	ldr	r3, [pc, #36]	; (404f60 <test_led_driver_channels+0x1d8>)
  404f3a:	2200      	movs	r2, #0
  404f3c:	701a      	strb	r2, [r3, #0]
}
  404f3e:	3718      	adds	r7, #24
  404f40:	46bd      	mov	sp, r7
  404f42:	bd80      	pop	{r7, pc}
  404f44:	2040168c 	.word	0x2040168c
  404f48:	004026d9 	.word	0x004026d9
  404f4c:	00402a45 	.word	0x00402a45
  404f50:	00402cbd 	.word	0x00402cbd
  404f54:	00402749 	.word	0x00402749
  404f58:	204009cd 	.word	0x204009cd
  404f5c:	204009ce 	.word	0x204009ce
  404f60:	20400015 	.word	0x20400015
  404f64:	00404c11 	.word	0x00404c11
  404f68:	204009cf 	.word	0x204009cf
  404f6c:	204009d0 	.word	0x204009d0
  404f70:	204016b4 	.word	0x204016b4

00404f74 <set_shelves_active_inactive>:

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
  404f74:	b580      	push	{r7, lr}
  404f76:	b082      	sub	sp, #8
  404f78:	af00      	add	r7, sp, #0

	test_led_driver_channels();
  404f7a:	4b53      	ldr	r3, [pc, #332]	; (4050c8 <set_shelves_active_inactive+0x154>)
  404f7c:	4798      	blx	r3
	
	numActiveShelves = 0;
  404f7e:	4b53      	ldr	r3, [pc, #332]	; (4050cc <set_shelves_active_inactive+0x158>)
  404f80:	2200      	movs	r2, #0
  404f82:	701a      	strb	r2, [r3, #0]
	numPresentShelves = 0;
  404f84:	4b52      	ldr	r3, [pc, #328]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  404f86:	2200      	movs	r2, #0
  404f88:	701a      	strb	r2, [r3, #0]
	
	for (int i=0; i<NUM_SHELVES; i++)
  404f8a:	2300      	movs	r3, #0
  404f8c:	607b      	str	r3, [r7, #4]
  404f8e:	e00a      	b.n	404fa6 <set_shelves_active_inactive+0x32>
	{
		shelf[i].active = SHELF_INACTIVE;
  404f90:	4950      	ldr	r1, [pc, #320]	; (4050d4 <set_shelves_active_inactive+0x160>)
  404f92:	687a      	ldr	r2, [r7, #4]
  404f94:	4613      	mov	r3, r2
  404f96:	009b      	lsls	r3, r3, #2
  404f98:	4413      	add	r3, r2
  404f9a:	440b      	add	r3, r1
  404f9c:	2200      	movs	r2, #0
  404f9e:	701a      	strb	r2, [r3, #0]
	test_led_driver_channels();
	
	numActiveShelves = 0;
	numPresentShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
  404fa0:	687b      	ldr	r3, [r7, #4]
  404fa2:	3301      	adds	r3, #1
  404fa4:	607b      	str	r3, [r7, #4]
  404fa6:	687b      	ldr	r3, [r7, #4]
  404fa8:	2b03      	cmp	r3, #3
  404faa:	ddf1      	ble.n	404f90 <set_shelves_active_inactive+0x1c>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  404fac:	4b49      	ldr	r3, [pc, #292]	; (4050d4 <set_shelves_active_inactive+0x160>)
  404fae:	791b      	ldrb	r3, [r3, #4]
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	d01d      	beq.n	404ff0 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  404fb4:	4b48      	ldr	r3, [pc, #288]	; (4050d8 <set_shelves_active_inactive+0x164>)
  404fb6:	789b      	ldrb	r3, [r3, #2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  404fb8:	2b00      	cmp	r3, #0
  404fba:	d119      	bne.n	404ff0 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
  404fbc:	4b46      	ldr	r3, [pc, #280]	; (4050d8 <set_shelves_active_inactive+0x164>)
  404fbe:	79db      	ldrb	r3, [r3, #7]
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  404fc0:	2b00      	cmp	r3, #0
  404fc2:	d115      	bne.n	404ff0 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  404fc4:	4b42      	ldr	r3, [pc, #264]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  404fc6:	781b      	ldrb	r3, [r3, #0]
  404fc8:	3301      	adds	r3, #1
  404fca:	b2da      	uxtb	r2, r3
  404fcc:	4b40      	ldr	r3, [pc, #256]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  404fce:	701a      	strb	r2, [r3, #0]
		
		if (shelf[0].devicesPresent)
  404fd0:	4b40      	ldr	r3, [pc, #256]	; (4050d4 <set_shelves_active_inactive+0x160>)
  404fd2:	78db      	ldrb	r3, [r3, #3]
  404fd4:	2b00      	cmp	r3, #0
  404fd6:	d00b      	beq.n	404ff0 <set_shelves_active_inactive+0x7c>
		{
			shelf[0].active = SHELF_ACTIVE;
  404fd8:	4b3e      	ldr	r3, [pc, #248]	; (4050d4 <set_shelves_active_inactive+0x160>)
  404fda:	2201      	movs	r2, #1
  404fdc:	701a      	strb	r2, [r3, #0]
			numActiveShelves++;
  404fde:	4b3b      	ldr	r3, [pc, #236]	; (4050cc <set_shelves_active_inactive+0x158>)
  404fe0:	781b      	ldrb	r3, [r3, #0]
  404fe2:	3301      	adds	r3, #1
  404fe4:	b2da      	uxtb	r2, r3
  404fe6:	4b39      	ldr	r3, [pc, #228]	; (4050cc <set_shelves_active_inactive+0x158>)
  404fe8:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 0 active\r\n");
  404fea:	483c      	ldr	r0, [pc, #240]	; (4050dc <set_shelves_active_inactive+0x168>)
  404fec:	4b3c      	ldr	r3, [pc, #240]	; (4050e0 <set_shelves_active_inactive+0x16c>)
  404fee:	4798      	blx	r3
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  404ff0:	4b38      	ldr	r3, [pc, #224]	; (4050d4 <set_shelves_active_inactive+0x160>)
  404ff2:	7a5b      	ldrb	r3, [r3, #9]
  404ff4:	2b00      	cmp	r3, #0
  404ff6:	d01d      	beq.n	405034 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  404ff8:	4b37      	ldr	r3, [pc, #220]	; (4050d8 <set_shelves_active_inactive+0x164>)
  404ffa:	7b1b      	ldrb	r3, [r3, #12]
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	d119      	bne.n	405034 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
  405000:	4b35      	ldr	r3, [pc, #212]	; (4050d8 <set_shelves_active_inactive+0x164>)
  405002:	7c5b      	ldrb	r3, [r3, #17]
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  405004:	2b00      	cmp	r3, #0
  405006:	d115      	bne.n	405034 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  405008:	4b31      	ldr	r3, [pc, #196]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  40500a:	781b      	ldrb	r3, [r3, #0]
  40500c:	3301      	adds	r3, #1
  40500e:	b2da      	uxtb	r2, r3
  405010:	4b2f      	ldr	r3, [pc, #188]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  405012:	701a      	strb	r2, [r3, #0]
		
		if (shelf[1].devicesPresent)
  405014:	4b2f      	ldr	r3, [pc, #188]	; (4050d4 <set_shelves_active_inactive+0x160>)
  405016:	7a1b      	ldrb	r3, [r3, #8]
  405018:	2b00      	cmp	r3, #0
  40501a:	d00b      	beq.n	405034 <set_shelves_active_inactive+0xc0>
		{
			shelf[1].active = SHELF_ACTIVE;
  40501c:	4b2d      	ldr	r3, [pc, #180]	; (4050d4 <set_shelves_active_inactive+0x160>)
  40501e:	2201      	movs	r2, #1
  405020:	715a      	strb	r2, [r3, #5]
			numActiveShelves++;
  405022:	4b2a      	ldr	r3, [pc, #168]	; (4050cc <set_shelves_active_inactive+0x158>)
  405024:	781b      	ldrb	r3, [r3, #0]
  405026:	3301      	adds	r3, #1
  405028:	b2da      	uxtb	r2, r3
  40502a:	4b28      	ldr	r3, [pc, #160]	; (4050cc <set_shelves_active_inactive+0x158>)
  40502c:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 1 active\r\n");
  40502e:	482d      	ldr	r0, [pc, #180]	; (4050e4 <set_shelves_active_inactive+0x170>)
  405030:	4b2b      	ldr	r3, [pc, #172]	; (4050e0 <set_shelves_active_inactive+0x16c>)
  405032:	4798      	blx	r3
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  405034:	4b27      	ldr	r3, [pc, #156]	; (4050d4 <set_shelves_active_inactive+0x160>)
  405036:	7b9b      	ldrb	r3, [r3, #14]
  405038:	2b00      	cmp	r3, #0
  40503a:	d01d      	beq.n	405078 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  40503c:	4b26      	ldr	r3, [pc, #152]	; (4050d8 <set_shelves_active_inactive+0x164>)
  40503e:	7d9b      	ldrb	r3, [r3, #22]
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  405040:	2b00      	cmp	r3, #0
  405042:	d119      	bne.n	405078 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
  405044:	4b24      	ldr	r3, [pc, #144]	; (4050d8 <set_shelves_active_inactive+0x164>)
  405046:	7edb      	ldrb	r3, [r3, #27]
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  405048:	2b00      	cmp	r3, #0
  40504a:	d115      	bne.n	405078 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  40504c:	4b20      	ldr	r3, [pc, #128]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  40504e:	781b      	ldrb	r3, [r3, #0]
  405050:	3301      	adds	r3, #1
  405052:	b2da      	uxtb	r2, r3
  405054:	4b1e      	ldr	r3, [pc, #120]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  405056:	701a      	strb	r2, [r3, #0]
		
		if (shelf[2].devicesPresent)
  405058:	4b1e      	ldr	r3, [pc, #120]	; (4050d4 <set_shelves_active_inactive+0x160>)
  40505a:	7b5b      	ldrb	r3, [r3, #13]
  40505c:	2b00      	cmp	r3, #0
  40505e:	d00b      	beq.n	405078 <set_shelves_active_inactive+0x104>
		{
			shelf[2].active = SHELF_ACTIVE;
  405060:	4b1c      	ldr	r3, [pc, #112]	; (4050d4 <set_shelves_active_inactive+0x160>)
  405062:	2201      	movs	r2, #1
  405064:	729a      	strb	r2, [r3, #10]
			numActiveShelves++;
  405066:	4b19      	ldr	r3, [pc, #100]	; (4050cc <set_shelves_active_inactive+0x158>)
  405068:	781b      	ldrb	r3, [r3, #0]
  40506a:	3301      	adds	r3, #1
  40506c:	b2da      	uxtb	r2, r3
  40506e:	4b17      	ldr	r3, [pc, #92]	; (4050cc <set_shelves_active_inactive+0x158>)
  405070:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 2 active\r\n");
  405072:	481d      	ldr	r0, [pc, #116]	; (4050e8 <set_shelves_active_inactive+0x174>)
  405074:	4b1a      	ldr	r3, [pc, #104]	; (4050e0 <set_shelves_active_inactive+0x16c>)
  405076:	4798      	blx	r3
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  405078:	4b16      	ldr	r3, [pc, #88]	; (4050d4 <set_shelves_active_inactive+0x160>)
  40507a:	7cdb      	ldrb	r3, [r3, #19]
  40507c:	2b00      	cmp	r3, #0
  40507e:	d01f      	beq.n	4050c0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  405080:	4b15      	ldr	r3, [pc, #84]	; (4050d8 <set_shelves_active_inactive+0x164>)
  405082:	f893 3020 	ldrb.w	r3, [r3, #32]
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  405086:	2b00      	cmp	r3, #0
  405088:	d11a      	bne.n	4050c0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
  40508a:	4b13      	ldr	r3, [pc, #76]	; (4050d8 <set_shelves_active_inactive+0x164>)
  40508c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  405090:	2b00      	cmp	r3, #0
  405092:	d115      	bne.n	4050c0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  405094:	4b0e      	ldr	r3, [pc, #56]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  405096:	781b      	ldrb	r3, [r3, #0]
  405098:	3301      	adds	r3, #1
  40509a:	b2da      	uxtb	r2, r3
  40509c:	4b0c      	ldr	r3, [pc, #48]	; (4050d0 <set_shelves_active_inactive+0x15c>)
  40509e:	701a      	strb	r2, [r3, #0]
		
		if (shelf[3].devicesPresent)
  4050a0:	4b0c      	ldr	r3, [pc, #48]	; (4050d4 <set_shelves_active_inactive+0x160>)
  4050a2:	7c9b      	ldrb	r3, [r3, #18]
  4050a4:	2b00      	cmp	r3, #0
  4050a6:	d00b      	beq.n	4050c0 <set_shelves_active_inactive+0x14c>
		{
			shelf[3].active = SHELF_ACTIVE;
  4050a8:	4b0a      	ldr	r3, [pc, #40]	; (4050d4 <set_shelves_active_inactive+0x160>)
  4050aa:	2201      	movs	r2, #1
  4050ac:	73da      	strb	r2, [r3, #15]
			numActiveShelves++;
  4050ae:	4b07      	ldr	r3, [pc, #28]	; (4050cc <set_shelves_active_inactive+0x158>)
  4050b0:	781b      	ldrb	r3, [r3, #0]
  4050b2:	3301      	adds	r3, #1
  4050b4:	b2da      	uxtb	r2, r3
  4050b6:	4b05      	ldr	r3, [pc, #20]	; (4050cc <set_shelves_active_inactive+0x158>)
  4050b8:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 3 active\r\n");
  4050ba:	480c      	ldr	r0, [pc, #48]	; (4050ec <set_shelves_active_inactive+0x178>)
  4050bc:	4b08      	ldr	r3, [pc, #32]	; (4050e0 <set_shelves_active_inactive+0x16c>)
  4050be:	4798      	blx	r3
		}
	}
}
  4050c0:	3708      	adds	r7, #8
  4050c2:	46bd      	mov	sp, r7
  4050c4:	bd80      	pop	{r7, pc}
  4050c6:	bf00      	nop
  4050c8:	00404d89 	.word	0x00404d89
  4050cc:	204017b6 	.word	0x204017b6
  4050d0:	2040168a 	.word	0x2040168a
  4050d4:	2040168c 	.word	0x2040168c
  4050d8:	204016c8 	.word	0x204016c8
  4050dc:	0040c788 	.word	0x0040c788
  4050e0:	004026b1 	.word	0x004026b1
  4050e4:	0040c79c 	.word	0x0040c79c
  4050e8:	0040c7b0 	.word	0x0040c7b0
  4050ec:	0040c7c4 	.word	0x0040c7c4

004050f0 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
  4050f0:	b480      	push	{r7}
  4050f2:	af00      	add	r7, sp, #0
	return numActiveShelves;
  4050f4:	4b03      	ldr	r3, [pc, #12]	; (405104 <num_active_shelves+0x14>)
  4050f6:	781b      	ldrb	r3, [r3, #0]
}
  4050f8:	4618      	mov	r0, r3
  4050fa:	46bd      	mov	sp, r7
  4050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405100:	4770      	bx	lr
  405102:	bf00      	nop
  405104:	204017b6 	.word	0x204017b6

00405108 <num_present_shelves>:

unsigned char num_present_shelves(void);
unsigned char num_present_shelves(void)
{
  405108:	b480      	push	{r7}
  40510a:	af00      	add	r7, sp, #0
	return numPresentShelves;
  40510c:	4b03      	ldr	r3, [pc, #12]	; (40511c <num_present_shelves+0x14>)
  40510e:	781b      	ldrb	r3, [r3, #0]
}
  405110:	4618      	mov	r0, r3
  405112:	46bd      	mov	sp, r7
  405114:	f85d 7b04 	ldr.w	r7, [sp], #4
  405118:	4770      	bx	lr
  40511a:	bf00      	nop
  40511c:	2040168a 	.word	0x2040168a

00405120 <calc_sanitize_time>:
volatile int32_t zoom_view_id;


unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
  405120:	b480      	push	{r7}
  405122:	b085      	sub	sp, #20
  405124:	af00      	add	r7, sp, #0
  405126:	4603      	mov	r3, r0
  405128:	71fb      	strb	r3, [r7, #7]
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
  40512a:	79fa      	ldrb	r2, [r7, #7]
  40512c:	491f      	ldr	r1, [pc, #124]	; (4051ac <calc_sanitize_time+0x8c>)
  40512e:	4613      	mov	r3, r2
  405130:	009b      	lsls	r3, r3, #2
  405132:	4413      	add	r3, r2
  405134:	440b      	add	r3, r1
  405136:	785b      	ldrb	r3, [r3, #1]
  405138:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
  40513a:	7bfa      	ldrb	r2, [r7, #15]
  40513c:	491c      	ldr	r1, [pc, #112]	; (4051b0 <calc_sanitize_time+0x90>)
  40513e:	4613      	mov	r3, r2
  405140:	00db      	lsls	r3, r3, #3
  405142:	1a9b      	subs	r3, r3, r2
  405144:	005b      	lsls	r3, r3, #1
  405146:	440b      	add	r3, r1
  405148:	3308      	adds	r3, #8
  40514a:	78db      	ldrb	r3, [r3, #3]
  40514c:	73bb      	strb	r3, [r7, #14]
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  40514e:	7bba      	ldrb	r2, [r7, #14]
  405150:	4918      	ldr	r1, [pc, #96]	; (4051b4 <calc_sanitize_time+0x94>)
  405152:	4613      	mov	r3, r2
  405154:	009b      	lsls	r3, r3, #2
  405156:	4413      	add	r3, r2
  405158:	440b      	add	r3, r1
  40515a:	781b      	ldrb	r3, [r3, #0]
  40515c:	737b      	strb	r3, [r7, #13]
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
  40515e:	79fa      	ldrb	r2, [r7, #7]
  405160:	4912      	ldr	r1, [pc, #72]	; (4051ac <calc_sanitize_time+0x8c>)
  405162:	4613      	mov	r3, r2
  405164:	009b      	lsls	r3, r3, #2
  405166:	4413      	add	r3, r2
  405168:	440b      	add	r3, r1
  40516a:	789b      	ldrb	r3, [r3, #2]
  40516c:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
  40516e:	7bfa      	ldrb	r2, [r7, #15]
  405170:	490f      	ldr	r1, [pc, #60]	; (4051b0 <calc_sanitize_time+0x90>)
  405172:	4613      	mov	r3, r2
  405174:	00db      	lsls	r3, r3, #3
  405176:	1a9b      	subs	r3, r3, r2
  405178:	005b      	lsls	r3, r3, #1
  40517a:	440b      	add	r3, r1
  40517c:	3308      	adds	r3, #8
  40517e:	789b      	ldrb	r3, [r3, #2]
  405180:	73bb      	strb	r3, [r7, #14]
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  405182:	7bba      	ldrb	r2, [r7, #14]
  405184:	490b      	ldr	r1, [pc, #44]	; (4051b4 <calc_sanitize_time+0x94>)
  405186:	4613      	mov	r3, r2
  405188:	009b      	lsls	r3, r3, #2
  40518a:	4413      	add	r3, r2
  40518c:	440b      	add	r3, r1
  40518e:	781b      	ldrb	r3, [r3, #0]
  405190:	733b      	strb	r3, [r7, #12]

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
  405192:	7b3a      	ldrb	r2, [r7, #12]
  405194:	7b7b      	ldrb	r3, [r7, #13]
  405196:	4293      	cmp	r3, r2
  405198:	bf38      	it	cc
  40519a:	4613      	movcc	r3, r2
  40519c:	72fb      	strb	r3, [r7, #11]
	
	return (minutes);
  40519e:	7afb      	ldrb	r3, [r7, #11]
	
}
  4051a0:	4618      	mov	r0, r3
  4051a2:	3714      	adds	r7, #20
  4051a4:	46bd      	mov	sp, r7
  4051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051aa:	4770      	bx	lr
  4051ac:	2040168c 	.word	0x2040168c
  4051b0:	20401644 	.word	0x20401644
  4051b4:	204016c8 	.word	0x204016c8

004051b8 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
  4051b8:	b580      	push	{r7, lr}
  4051ba:	af00      	add	r7, sp, #0
	led_shelf(0, LED_OFF);
  4051bc:	2000      	movs	r0, #0
  4051be:	2100      	movs	r1, #0
  4051c0:	4b08      	ldr	r3, [pc, #32]	; (4051e4 <door_latch_open_kill_all_shelves+0x2c>)
  4051c2:	4798      	blx	r3
	led_shelf(1, LED_OFF);
  4051c4:	2001      	movs	r0, #1
  4051c6:	2100      	movs	r1, #0
  4051c8:	4b06      	ldr	r3, [pc, #24]	; (4051e4 <door_latch_open_kill_all_shelves+0x2c>)
  4051ca:	4798      	blx	r3
	led_shelf(2, LED_OFF);
  4051cc:	2002      	movs	r0, #2
  4051ce:	2100      	movs	r1, #0
  4051d0:	4b04      	ldr	r3, [pc, #16]	; (4051e4 <door_latch_open_kill_all_shelves+0x2c>)
  4051d2:	4798      	blx	r3
	led_shelf(3, LED_OFF);
  4051d4:	2003      	movs	r0, #3
  4051d6:	2100      	movs	r1, #0
  4051d8:	4b02      	ldr	r3, [pc, #8]	; (4051e4 <door_latch_open_kill_all_shelves+0x2c>)
  4051da:	4798      	blx	r3
	
	print_ecdbg("Door latch opened, kill all shelves for safety.\r\n");
  4051dc:	4802      	ldr	r0, [pc, #8]	; (4051e8 <door_latch_open_kill_all_shelves+0x30>)
  4051de:	4b03      	ldr	r3, [pc, #12]	; (4051ec <door_latch_open_kill_all_shelves+0x34>)
  4051e0:	4798      	blx	r3
}
  4051e2:	bd80      	pop	{r7, pc}
  4051e4:	00402a45 	.word	0x00402a45
  4051e8:	0040c7d8 	.word	0x0040c7d8
  4051ec:	004026b1 	.word	0x004026b1

004051f0 <calc_region_checksum>:
}
#endif //22feb16 ignore for now

unsigned char calc_region_checksum(unsigned char sel);
unsigned char calc_region_checksum(unsigned char sel)
{
  4051f0:	b480      	push	{r7}
  4051f2:	b087      	sub	sp, #28
  4051f4:	af00      	add	r7, sp, #0
  4051f6:	4603      	mov	r3, r0
  4051f8:	71fb      	strb	r3, [r7, #7]
	unsigned char csum = 0;
  4051fa:	2300      	movs	r3, #0
  4051fc:	75fb      	strb	r3, [r7, #23]

	switch(sel)
  4051fe:	79fb      	ldrb	r3, [r7, #7]
  405200:	2b04      	cmp	r3, #4
  405202:	f200 80b5 	bhi.w	405370 <calc_region_checksum+0x180>
  405206:	a201      	add	r2, pc, #4	; (adr r2, 40520c <calc_region_checksum+0x1c>)
  405208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40520c:	00405221 	.word	0x00405221
  405210:	004052e5 	.word	0x004052e5
  405214:	004052f5 	.word	0x004052f5
  405218:	00405323 	.word	0x00405323
  40521c:	0040535b 	.word	0x0040535b
	{
		case 0: //serial ID and flags
			csum = 0;
  405220:	2300      	movs	r3, #0
  405222:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405224:	2300      	movs	r3, #0
  405226:	613b      	str	r3, [r7, #16]
  405228:	e055      	b.n	4052d6 <calc_region_checksum+0xe6>
			{
				csum += sf[i].id[0];
  40522a:	4a55      	ldr	r2, [pc, #340]	; (405380 <calc_region_checksum+0x190>)
  40522c:	693b      	ldr	r3, [r7, #16]
  40522e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
  405232:	7dfb      	ldrb	r3, [r7, #23]
  405234:	4413      	add	r3, r2
  405236:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[1];
  405238:	4a51      	ldr	r2, [pc, #324]	; (405380 <calc_region_checksum+0x190>)
  40523a:	693b      	ldr	r3, [r7, #16]
  40523c:	00db      	lsls	r3, r3, #3
  40523e:	4413      	add	r3, r2
  405240:	785a      	ldrb	r2, [r3, #1]
  405242:	7dfb      	ldrb	r3, [r7, #23]
  405244:	4413      	add	r3, r2
  405246:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[2];
  405248:	4a4d      	ldr	r2, [pc, #308]	; (405380 <calc_region_checksum+0x190>)
  40524a:	693b      	ldr	r3, [r7, #16]
  40524c:	00db      	lsls	r3, r3, #3
  40524e:	4413      	add	r3, r2
  405250:	789a      	ldrb	r2, [r3, #2]
  405252:	7dfb      	ldrb	r3, [r7, #23]
  405254:	4413      	add	r3, r2
  405256:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[3];
  405258:	4a49      	ldr	r2, [pc, #292]	; (405380 <calc_region_checksum+0x190>)
  40525a:	693b      	ldr	r3, [r7, #16]
  40525c:	00db      	lsls	r3, r3, #3
  40525e:	4413      	add	r3, r2
  405260:	78da      	ldrb	r2, [r3, #3]
  405262:	7dfb      	ldrb	r3, [r7, #23]
  405264:	4413      	add	r3, r2
  405266:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[4];
  405268:	4a45      	ldr	r2, [pc, #276]	; (405380 <calc_region_checksum+0x190>)
  40526a:	693b      	ldr	r3, [r7, #16]
  40526c:	00db      	lsls	r3, r3, #3
  40526e:	4413      	add	r3, r2
  405270:	791a      	ldrb	r2, [r3, #4]
  405272:	7dfb      	ldrb	r3, [r7, #23]
  405274:	4413      	add	r3, r2
  405276:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[5];
  405278:	4a41      	ldr	r2, [pc, #260]	; (405380 <calc_region_checksum+0x190>)
  40527a:	693b      	ldr	r3, [r7, #16]
  40527c:	00db      	lsls	r3, r3, #3
  40527e:	4413      	add	r3, r2
  405280:	795a      	ldrb	r2, [r3, #5]
  405282:	7dfb      	ldrb	r3, [r7, #23]
  405284:	4413      	add	r3, r2
  405286:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].maxUsageReached;
  405288:	4a3d      	ldr	r2, [pc, #244]	; (405380 <calc_region_checksum+0x190>)
  40528a:	693b      	ldr	r3, [r7, #16]
  40528c:	00db      	lsls	r3, r3, #3
  40528e:	4413      	add	r3, r2
  405290:	799b      	ldrb	r3, [r3, #6]
  405292:	f3c3 0340 	ubfx	r3, r3, #1, #1
  405296:	b2db      	uxtb	r3, r3
  405298:	461a      	mov	r2, r3
  40529a:	7dfb      	ldrb	r3, [r7, #23]
  40529c:	4413      	add	r3, r2
  40529e:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].slotFilled;
  4052a0:	4a37      	ldr	r2, [pc, #220]	; (405380 <calc_region_checksum+0x190>)
  4052a2:	693b      	ldr	r3, [r7, #16]
  4052a4:	00db      	lsls	r3, r3, #3
  4052a6:	4413      	add	r3, r2
  4052a8:	799b      	ldrb	r3, [r3, #6]
  4052aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4052ae:	b2db      	uxtb	r3, r3
  4052b0:	461a      	mov	r2, r3
  4052b2:	7dfb      	ldrb	r3, [r7, #23]
  4052b4:	4413      	add	r3, r2
  4052b6:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].top_botn;
  4052b8:	4a31      	ldr	r2, [pc, #196]	; (405380 <calc_region_checksum+0x190>)
  4052ba:	693b      	ldr	r3, [r7, #16]
  4052bc:	00db      	lsls	r3, r3, #3
  4052be:	4413      	add	r3, r2
  4052c0:	799b      	ldrb	r3, [r3, #6]
  4052c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
  4052c6:	b2db      	uxtb	r3, r3
  4052c8:	461a      	mov	r2, r3
  4052ca:	7dfb      	ldrb	r3, [r7, #23]
  4052cc:	4413      	add	r3, r2
  4052ce:	75fb      	strb	r3, [r7, #23]

	switch(sel)
	{
		case 0: //serial ID and flags
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4052d0:	693b      	ldr	r3, [r7, #16]
  4052d2:	3301      	adds	r3, #1
  4052d4:	613b      	str	r3, [r7, #16]
  4052d6:	693b      	ldr	r3, [r7, #16]
  4052d8:	2b5f      	cmp	r3, #95	; 0x5f
  4052da:	dda6      	ble.n	40522a <calc_region_checksum+0x3a>
				csum += sf[i].id[5];
				csum += sf[i].maxUsageReached;
				csum += sf[i].slotFilled;
				csum += sf[i].top_botn;
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  4052dc:	7dfb      	ldrb	r3, [r7, #23]
  4052de:	43db      	mvns	r3, r3
  4052e0:	75fb      	strb	r3, [r7, #23]
			break;
  4052e2:	e045      	b.n	405370 <calc_region_checksum+0x180>

		case 1: //san cycles
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
  4052e4:	4b27      	ldr	r3, [pc, #156]	; (405384 <calc_region_checksum+0x194>)
  4052e6:	681b      	ldr	r3, [r3, #0]
  4052e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4052ec:	b2db      	uxtb	r3, r3
  4052ee:	43db      	mvns	r3, r3
  4052f0:	75fb      	strb	r3, [r7, #23]
			break;
  4052f2:	e03d      	b.n	405370 <calc_region_checksum+0x180>

		case 2: //usage hours
			csum = 0;
  4052f4:	2300      	movs	r3, #0
  4052f6:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4052f8:	2300      	movs	r3, #0
  4052fa:	60fb      	str	r3, [r7, #12]
  4052fc:	e00a      	b.n	405314 <calc_region_checksum+0x124>
			{
				csum += h.hrs[i];
  4052fe:	4a22      	ldr	r2, [pc, #136]	; (405388 <calc_region_checksum+0x198>)
  405300:	68fb      	ldr	r3, [r7, #12]
  405302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405306:	b2da      	uxtb	r2, r3
  405308:	7dfb      	ldrb	r3, [r7, #23]
  40530a:	4413      	add	r3, r2
  40530c:	75fb      	strb	r3, [r7, #23]
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
			break;

		case 2: //usage hours
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  40530e:	68fb      	ldr	r3, [r7, #12]
  405310:	3301      	adds	r3, #1
  405312:	60fb      	str	r3, [r7, #12]
  405314:	68fb      	ldr	r3, [r7, #12]
  405316:	2b5f      	cmp	r3, #95	; 0x5f
  405318:	ddf1      	ble.n	4052fe <calc_region_checksum+0x10e>
			{
				csum += h.hrs[i];
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  40531a:	7dfb      	ldrb	r3, [r7, #23]
  40531c:	43db      	mvns	r3, r3
  40531e:	75fb      	strb	r3, [r7, #23]
			break;
  405320:	e026      	b.n	405370 <calc_region_checksum+0x180>

		case 3: //usage mins
			csum = 0;
  405322:	2300      	movs	r3, #0
  405324:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405326:	2300      	movs	r3, #0
  405328:	60bb      	str	r3, [r7, #8]
  40532a:	e009      	b.n	405340 <calc_region_checksum+0x150>
			{
				csum += m.mins[i];
  40532c:	4a17      	ldr	r2, [pc, #92]	; (40538c <calc_region_checksum+0x19c>)
  40532e:	68bb      	ldr	r3, [r7, #8]
  405330:	4413      	add	r3, r2
  405332:	781a      	ldrb	r2, [r3, #0]
  405334:	7dfb      	ldrb	r3, [r7, #23]
  405336:	4413      	add	r3, r2
  405338:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
			break;

		case 3: //usage mins
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  40533a:	68bb      	ldr	r3, [r7, #8]
  40533c:	3301      	adds	r3, #1
  40533e:	60bb      	str	r3, [r7, #8]
  405340:	68bb      	ldr	r3, [r7, #8]
  405342:	2b5f      	cmp	r3, #95	; 0x5f
  405344:	ddf2      	ble.n	40532c <calc_region_checksum+0x13c>
			{
				csum += m.mins[i];
			}
			csum += m.sanMins;
  405346:	4b11      	ldr	r3, [pc, #68]	; (40538c <calc_region_checksum+0x19c>)
  405348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  40534a:	b2da      	uxtb	r2, r3
  40534c:	7dfb      	ldrb	r3, [r7, #23]
  40534e:	4413      	add	r3, r2
  405350:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  405352:	7dfb      	ldrb	r3, [r7, #23]
  405354:	43db      	mvns	r3, r3
  405356:	75fb      	strb	r3, [r7, #23]
			break;
  405358:	e00a      	b.n	405370 <calc_region_checksum+0x180>
		case 4: //configuration
			csum = 0;
  40535a:	2300      	movs	r3, #0
  40535c:	75fb      	strb	r3, [r7, #23]
			csum += c.initialDTE;
  40535e:	4b0c      	ldr	r3, [pc, #48]	; (405390 <calc_region_checksum+0x1a0>)
  405360:	781a      	ldrb	r2, [r3, #0]
  405362:	7dfb      	ldrb	r3, [r7, #23]
  405364:	4413      	add	r3, r2
  405366:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  405368:	7dfb      	ldrb	r3, [r7, #23]
  40536a:	43db      	mvns	r3, r3
  40536c:	75fb      	strb	r3, [r7, #23]
			break;
  40536e:	bf00      	nop
	}
	
	return csum;	
  405370:	7dfb      	ldrb	r3, [r7, #23]
}
  405372:	4618      	mov	r0, r3
  405374:	371c      	adds	r7, #28
  405376:	46bd      	mov	sp, r7
  405378:	f85d 7b04 	ldr.w	r7, [sp], #4
  40537c:	4770      	bx	lr
  40537e:	bf00      	nop
  405380:	20401344 	.word	0x20401344
  405384:	204016f0 	.word	0x204016f0
  405388:	204016f4 	.word	0x204016f4
  40538c:	204017b8 	.word	0x204017b8
  405390:	204016c4 	.word	0x204016c4

00405394 <inc_sanMins>:
void increment_ledBoard_usage_min(void);


void inc_sanMins(void);
void inc_sanMins(void)
{
  405394:	b480      	push	{r7}
  405396:	af00      	add	r7, sp, #0
	m.sanMins++;
  405398:	4b04      	ldr	r3, [pc, #16]	; (4053ac <inc_sanMins+0x18>)
  40539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  40539c:	3301      	adds	r3, #1
  40539e:	4a03      	ldr	r2, [pc, #12]	; (4053ac <inc_sanMins+0x18>)
  4053a0:	6613      	str	r3, [r2, #96]	; 0x60
	
	//the rest of the update of the struct, calc'ing the csum, writing to flash etc will happen when the usage minutes get updated
}
  4053a2:	46bd      	mov	sp, r7
  4053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053a8:	4770      	bx	lr
  4053aa:	bf00      	nop
  4053ac:	204017b8 	.word	0x204017b8

004053b0 <inc_sanCycles>:

void inc_sanCycles(void);
void inc_sanCycles(void)
{
  4053b0:	b580      	push	{r7, lr}
  4053b2:	af00      	add	r7, sp, #0
	sanc.cycles++;
  4053b4:	4b11      	ldr	r3, [pc, #68]	; (4053fc <inc_sanCycles+0x4c>)
  4053b6:	681b      	ldr	r3, [r3, #0]
  4053b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4053bc:	1c5a      	adds	r2, r3, #1
  4053be:	f3c2 0213 	ubfx	r2, r2, #0, #20
  4053c2:	490e      	ldr	r1, [pc, #56]	; (4053fc <inc_sanCycles+0x4c>)
  4053c4:	680b      	ldr	r3, [r1, #0]
  4053c6:	f362 0313 	bfi	r3, r2, #0, #20
  4053ca:	600b      	str	r3, [r1, #0]
	sanCycleFlashIdx++;
  4053cc:	4b0c      	ldr	r3, [pc, #48]	; (405400 <inc_sanCycles+0x50>)
  4053ce:	681b      	ldr	r3, [r3, #0]
  4053d0:	3301      	adds	r3, #1
  4053d2:	4a0b      	ldr	r2, [pc, #44]	; (405400 <inc_sanCycles+0x50>)
  4053d4:	6013      	str	r3, [r2, #0]
	if (sanCycleFlashIdx >= (NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS))
  4053d6:	4b0a      	ldr	r3, [pc, #40]	; (405400 <inc_sanCycles+0x50>)
  4053d8:	681b      	ldr	r3, [r3, #0]
  4053da:	2b05      	cmp	r3, #5
  4053dc:	d902      	bls.n	4053e4 <inc_sanCycles+0x34>
	{
		sanCycleFlashIdx = 0;
  4053de:	4b08      	ldr	r3, [pc, #32]	; (405400 <inc_sanCycles+0x50>)
  4053e0:	2200      	movs	r2, #0
  4053e2:	601a      	str	r2, [r3, #0]
	}
	sanc.csum = calc_region_checksum(1);
  4053e4:	2001      	movs	r0, #1
  4053e6:	4b07      	ldr	r3, [pc, #28]	; (405404 <inc_sanCycles+0x54>)
  4053e8:	4798      	blx	r3
  4053ea:	4603      	mov	r3, r0
  4053ec:	4619      	mov	r1, r3
  4053ee:	4a03      	ldr	r2, [pc, #12]	; (4053fc <inc_sanCycles+0x4c>)
  4053f0:	8853      	ldrh	r3, [r2, #2]
  4053f2:	f361 130b 	bfi	r3, r1, #4, #8
  4053f6:	8053      	strh	r3, [r2, #2]
//skip for now 22feb16	write_region_to_flash(1, 0xFF, sanc.csum);
}
  4053f8:	bd80      	pop	{r7, pc}
  4053fa:	bf00      	nop
  4053fc:	204016f0 	.word	0x204016f0
  405400:	204009bc 	.word	0x204009bc
  405404:	004051f1 	.word	0x004051f1

00405408 <store_config>:

void store_config(void);
void store_config(void)
{
  405408:	b580      	push	{r7, lr}
  40540a:	af00      	add	r7, sp, #0
	/* initialDTE set in the serial user interface */
	configFlashIdx++;
  40540c:	4b09      	ldr	r3, [pc, #36]	; (405434 <store_config+0x2c>)
  40540e:	681b      	ldr	r3, [r3, #0]
  405410:	3301      	adds	r3, #1
  405412:	4a08      	ldr	r2, [pc, #32]	; (405434 <store_config+0x2c>)
  405414:	6013      	str	r3, [r2, #0]
	if (configFlashIdx >= (NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS))
  405416:	4b07      	ldr	r3, [pc, #28]	; (405434 <store_config+0x2c>)
  405418:	681b      	ldr	r3, [r3, #0]
  40541a:	2b01      	cmp	r3, #1
  40541c:	d902      	bls.n	405424 <store_config+0x1c>
	{
		configFlashIdx = 0;
  40541e:	4b05      	ldr	r3, [pc, #20]	; (405434 <store_config+0x2c>)
  405420:	2200      	movs	r2, #0
  405422:	601a      	str	r2, [r3, #0]
	}
	c.csum = calc_region_checksum(4);
  405424:	2004      	movs	r0, #4
  405426:	4b04      	ldr	r3, [pc, #16]	; (405438 <store_config+0x30>)
  405428:	4798      	blx	r3
  40542a:	4603      	mov	r3, r0
  40542c:	461a      	mov	r2, r3
  40542e:	4b03      	ldr	r3, [pc, #12]	; (40543c <store_config+0x34>)
  405430:	705a      	strb	r2, [r3, #1]
//skip for now 22feb16	write_region_to_flash(4, 0xFF, c.csum);
}
  405432:	bd80      	pop	{r7, pc}
  405434:	204009c8 	.word	0x204009c8
  405438:	004051f1 	.word	0x004051f1
  40543c:	204016c4 	.word	0x204016c4

00405440 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void)
{
  405440:	b580      	push	{r7, lr}
  405442:	b082      	sub	sp, #8
  405444:	af00      	add	r7, sp, #0
	unsigned char idx;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
  405446:	2300      	movs	r3, #0
  405448:	71bb      	strb	r3, [r7, #6]
	
	inc_sanMins();
  40544a:	4b5c      	ldr	r3, [pc, #368]	; (4055bc <increment_ledBoard_usage_min+0x17c>)
  40544c:	4798      	blx	r3

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  40544e:	2300      	movs	r3, #0
  405450:	717b      	strb	r3, [r7, #5]
  405452:	e07f      	b.n	405554 <increment_ledBoard_usage_min+0x114>
	{
		if (shelf[i].active == SHELF_ACTIVE)
  405454:	797a      	ldrb	r2, [r7, #5]
  405456:	495a      	ldr	r1, [pc, #360]	; (4055c0 <increment_ledBoard_usage_min+0x180>)
  405458:	4613      	mov	r3, r2
  40545a:	009b      	lsls	r3, r3, #2
  40545c:	4413      	add	r3, r2
  40545e:	440b      	add	r3, r1
  405460:	781b      	ldrb	r3, [r3, #0]
  405462:	2b01      	cmp	r3, #1
  405464:	d173      	bne.n	40554e <increment_ledBoard_usage_min+0x10e>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
  405466:	797a      	ldrb	r2, [r7, #5]
  405468:	4955      	ldr	r1, [pc, #340]	; (4055c0 <increment_ledBoard_usage_min+0x180>)
  40546a:	4613      	mov	r3, r2
  40546c:	009b      	lsls	r3, r3, #2
  40546e:	4413      	add	r3, r2
  405470:	440b      	add	r3, r1
  405472:	785b      	ldrb	r3, [r3, #1]
  405474:	4619      	mov	r1, r3
  405476:	4a53      	ldr	r2, [pc, #332]	; (4055c4 <increment_ledBoard_usage_min+0x184>)
  405478:	460b      	mov	r3, r1
  40547a:	00db      	lsls	r3, r3, #3
  40547c:	1a5b      	subs	r3, r3, r1
  40547e:	005b      	lsls	r3, r3, #1
  405480:	4413      	add	r3, r2
  405482:	3308      	adds	r3, #8
  405484:	78db      	ldrb	r3, [r3, #3]
  405486:	70fb      	strb	r3, [r7, #3]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
  405488:	797a      	ldrb	r2, [r7, #5]
  40548a:	494d      	ldr	r1, [pc, #308]	; (4055c0 <increment_ledBoard_usage_min+0x180>)
  40548c:	4613      	mov	r3, r2
  40548e:	009b      	lsls	r3, r3, #2
  405490:	4413      	add	r3, r2
  405492:	440b      	add	r3, r1
  405494:	789b      	ldrb	r3, [r3, #2]
  405496:	4619      	mov	r1, r3
  405498:	4a4a      	ldr	r2, [pc, #296]	; (4055c4 <increment_ledBoard_usage_min+0x184>)
  40549a:	460b      	mov	r3, r1
  40549c:	00db      	lsls	r3, r3, #3
  40549e:	1a5b      	subs	r3, r3, r1
  4054a0:	005b      	lsls	r3, r3, #1
  4054a2:	4413      	add	r3, r2
  4054a4:	3308      	adds	r3, #8
  4054a6:	789b      	ldrb	r3, [r3, #2]
  4054a8:	70bb      	strb	r3, [r7, #2]
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
  4054aa:	78fa      	ldrb	r2, [r7, #3]
  4054ac:	4946      	ldr	r1, [pc, #280]	; (4055c8 <increment_ledBoard_usage_min+0x188>)
  4054ae:	4613      	mov	r3, r2
  4054b0:	009b      	lsls	r3, r3, #2
  4054b2:	4413      	add	r3, r2
  4054b4:	440b      	add	r3, r1
  4054b6:	785b      	ldrb	r3, [r3, #1]
  4054b8:	707b      	strb	r3, [r7, #1]
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
  4054ba:	78ba      	ldrb	r2, [r7, #2]
  4054bc:	4942      	ldr	r1, [pc, #264]	; (4055c8 <increment_ledBoard_usage_min+0x188>)
  4054be:	4613      	mov	r3, r2
  4054c0:	009b      	lsls	r3, r3, #2
  4054c2:	4413      	add	r3, r2
  4054c4:	440b      	add	r3, r1
  4054c6:	785b      	ldrb	r3, [r3, #1]
  4054c8:	703b      	strb	r3, [r7, #0]
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  4054ca:	2300      	movs	r3, #0
  4054cc:	713b      	strb	r3, [r7, #4]
  4054ce:	e03b      	b.n	405548 <increment_ledBoard_usage_min+0x108>
			{
				switch (k)
  4054d0:	793b      	ldrb	r3, [r7, #4]
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d002      	beq.n	4054dc <increment_ledBoard_usage_min+0x9c>
  4054d6:	2b01      	cmp	r3, #1
  4054d8:	d003      	beq.n	4054e2 <increment_ledBoard_usage_min+0xa2>
  4054da:	e005      	b.n	4054e8 <increment_ledBoard_usage_min+0xa8>
				{
					case 0:
						idx = topUIdx;
  4054dc:	787b      	ldrb	r3, [r7, #1]
  4054de:	71fb      	strb	r3, [r7, #7]
						break;
  4054e0:	e002      	b.n	4054e8 <increment_ledBoard_usage_min+0xa8>
					case 1:
						idx = bottomUIdx;
  4054e2:	783b      	ldrb	r3, [r7, #0]
  4054e4:	71fb      	strb	r3, [r7, #7]
						break;
  4054e6:	bf00      	nop

				}

				m.mins[idx] = m.mins[idx] + 1;
  4054e8:	79fb      	ldrb	r3, [r7, #7]
  4054ea:	79fa      	ldrb	r2, [r7, #7]
  4054ec:	4937      	ldr	r1, [pc, #220]	; (4055cc <increment_ledBoard_usage_min+0x18c>)
  4054ee:	5c8a      	ldrb	r2, [r1, r2]
  4054f0:	3201      	adds	r2, #1
  4054f2:	b2d1      	uxtb	r1, r2
  4054f4:	4a35      	ldr	r2, [pc, #212]	; (4055cc <increment_ledBoard_usage_min+0x18c>)
  4054f6:	54d1      	strb	r1, [r2, r3]
				if (m.mins[idx] > 59)
  4054f8:	79fb      	ldrb	r3, [r7, #7]
  4054fa:	4a34      	ldr	r2, [pc, #208]	; (4055cc <increment_ledBoard_usage_min+0x18c>)
  4054fc:	5cd3      	ldrb	r3, [r2, r3]
  4054fe:	2b3b      	cmp	r3, #59	; 0x3b
  405500:	d91f      	bls.n	405542 <increment_ledBoard_usage_min+0x102>
				{
					m.mins[idx] = 0;
  405502:	79fb      	ldrb	r3, [r7, #7]
  405504:	4a31      	ldr	r2, [pc, #196]	; (4055cc <increment_ledBoard_usage_min+0x18c>)
  405506:	2100      	movs	r1, #0
  405508:	54d1      	strb	r1, [r2, r3]
					hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
  40550a:	79bb      	ldrb	r3, [r7, #6]
  40550c:	3301      	adds	r3, #1
  40550e:	71bb      	strb	r3, [r7, #6]
					h.hrs[idx] = h.hrs[idx] + 1;
  405510:	79fb      	ldrb	r3, [r7, #7]
  405512:	79fa      	ldrb	r2, [r7, #7]
  405514:	492e      	ldr	r1, [pc, #184]	; (4055d0 <increment_ledBoard_usage_min+0x190>)
  405516:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40551a:	3201      	adds	r2, #1
  40551c:	b291      	uxth	r1, r2
  40551e:	4a2c      	ldr	r2, [pc, #176]	; (4055d0 <increment_ledBoard_usage_min+0x190>)
  405520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						
					if ((h.hrs[idx]) >= 2000) //2000 hours * 60 minutes per hour
  405524:	79fb      	ldrb	r3, [r7, #7]
  405526:	4a2a      	ldr	r2, [pc, #168]	; (4055d0 <increment_ledBoard_usage_min+0x190>)
  405528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40552c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  405530:	d307      	bcc.n	405542 <increment_ledBoard_usage_min+0x102>
					{
						sf[idx].maxUsageReached = 1; //And...we're done. Reached 2000 hours.
  405532:	79fb      	ldrb	r3, [r7, #7]
  405534:	4a27      	ldr	r2, [pc, #156]	; (4055d4 <increment_ledBoard_usage_min+0x194>)
  405536:	00db      	lsls	r3, r3, #3
  405538:	4413      	add	r3, r2
  40553a:	799a      	ldrb	r2, [r3, #6]
  40553c:	f042 0202 	orr.w	r2, r2, #2
  405540:	719a      	strb	r2, [r3, #6]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  405542:	793b      	ldrb	r3, [r7, #4]
  405544:	3301      	adds	r3, #1
  405546:	713b      	strb	r3, [r7, #4]
  405548:	793b      	ldrb	r3, [r7, #4]
  40554a:	2b01      	cmp	r3, #1
  40554c:	d9c0      	bls.n	4054d0 <increment_ledBoard_usage_min+0x90>
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	inc_sanMins();

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  40554e:	797b      	ldrb	r3, [r7, #5]
  405550:	3301      	adds	r3, #1
  405552:	717b      	strb	r3, [r7, #5]
  405554:	797b      	ldrb	r3, [r7, #5]
  405556:	2b03      	cmp	r3, #3
  405558:	f67f af7c 	bls.w	405454 <increment_ledBoard_usage_min+0x14>
				}//if ((minutes %60) == 0)
			} //for each board side in the shelf (k)
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	mFlashIdx++;
  40555c:	4b1e      	ldr	r3, [pc, #120]	; (4055d8 <increment_ledBoard_usage_min+0x198>)
  40555e:	681b      	ldr	r3, [r3, #0]
  405560:	3301      	adds	r3, #1
  405562:	4a1d      	ldr	r2, [pc, #116]	; (4055d8 <increment_ledBoard_usage_min+0x198>)
  405564:	6013      	str	r3, [r2, #0]
	if (mFlashIdx >= NUM_USAGE_MINS_BUFS_SECTORS)
  405566:	4b1c      	ldr	r3, [pc, #112]	; (4055d8 <increment_ledBoard_usage_min+0x198>)
  405568:	681b      	ldr	r3, [r3, #0]
  40556a:	2b73      	cmp	r3, #115	; 0x73
  40556c:	d902      	bls.n	405574 <increment_ledBoard_usage_min+0x134>
	{
		mFlashIdx = 0;
  40556e:	4b1a      	ldr	r3, [pc, #104]	; (4055d8 <increment_ledBoard_usage_min+0x198>)
  405570:	2200      	movs	r2, #0
  405572:	601a      	str	r2, [r3, #0]
	}
	m.csum = calc_region_checksum(3);
  405574:	2003      	movs	r0, #3
  405576:	4b19      	ldr	r3, [pc, #100]	; (4055dc <increment_ledBoard_usage_min+0x19c>)
  405578:	4798      	blx	r3
  40557a:	4603      	mov	r3, r0
  40557c:	461a      	mov	r2, r3
  40557e:	4b13      	ldr	r3, [pc, #76]	; (4055cc <increment_ledBoard_usage_min+0x18c>)
  405580:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
//skip for now 22feb16	write_region_to_flash(3, 0xFF, m.csum);
//skip for now 22feb16	copy_region_to_another_sector(3);
//skip for now 22feb16	disrupt_prior_m_sector();

	if (hourRollover)
  405584:	79bb      	ldrb	r3, [r7, #6]
  405586:	2b00      	cmp	r3, #0
  405588:	d015      	beq.n	4055b6 <increment_ledBoard_usage_min+0x176>
	{
		hFlashIdx++;
  40558a:	4b15      	ldr	r3, [pc, #84]	; (4055e0 <increment_ledBoard_usage_min+0x1a0>)
  40558c:	681b      	ldr	r3, [r3, #0]
  40558e:	3301      	adds	r3, #1
  405590:	4a13      	ldr	r2, [pc, #76]	; (4055e0 <increment_ledBoard_usage_min+0x1a0>)
  405592:	6013      	str	r3, [r2, #0]
		if (hFlashIdx >= (NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF))
  405594:	4b12      	ldr	r3, [pc, #72]	; (4055e0 <increment_ledBoard_usage_min+0x1a0>)
  405596:	681b      	ldr	r3, [r3, #0]
  405598:	2b01      	cmp	r3, #1
  40559a:	d902      	bls.n	4055a2 <increment_ledBoard_usage_min+0x162>
		{
			hFlashIdx = 0;
  40559c:	4b10      	ldr	r3, [pc, #64]	; (4055e0 <increment_ledBoard_usage_min+0x1a0>)
  40559e:	2200      	movs	r2, #0
  4055a0:	601a      	str	r2, [r3, #0]
		}
		h.csum = calc_region_checksum(2);
  4055a2:	2002      	movs	r0, #2
  4055a4:	4b0d      	ldr	r3, [pc, #52]	; (4055dc <increment_ledBoard_usage_min+0x19c>)
  4055a6:	4798      	blx	r3
  4055a8:	4603      	mov	r3, r0
  4055aa:	461a      	mov	r2, r3
  4055ac:	4b08      	ldr	r3, [pc, #32]	; (4055d0 <increment_ledBoard_usage_min+0x190>)
  4055ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
//skip for now 22feb16		write_region_to_flash(2, 0xFF, h.csum);

		hourRollover = 0; //reset for next pass
  4055b2:	2300      	movs	r3, #0
  4055b4:	71bb      	strb	r3, [r7, #6]
	}
}
  4055b6:	3708      	adds	r7, #8
  4055b8:	46bd      	mov	sp, r7
  4055ba:	bd80      	pop	{r7, pc}
  4055bc:	00405395 	.word	0x00405395
  4055c0:	2040168c 	.word	0x2040168c
  4055c4:	20401644 	.word	0x20401644
  4055c8:	204016c8 	.word	0x204016c8
  4055cc:	204017b8 	.word	0x204017b8
  4055d0:	204016f4 	.word	0x204016f4
  4055d4:	20401344 	.word	0x20401344
  4055d8:	204009c4 	.word	0x204009c4
  4055dc:	004051f1 	.word	0x004051f1
  4055e0:	204009c0 	.word	0x204009c0

004055e4 <init_shelf_n_ledBrd_structs>:



void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
  4055e4:	b480      	push	{r7}
  4055e6:	b085      	sub	sp, #20
  4055e8:	af00      	add	r7, sp, #0
	
	for (int i=0; i<NUM_SHELVES; i++)
  4055ea:	2300      	movs	r3, #0
  4055ec:	60fb      	str	r3, [r7, #12]
  4055ee:	e01a      	b.n	405626 <init_shelf_n_ledBrd_structs+0x42>
	{
		shelf[i].present = 0;
  4055f0:	497c      	ldr	r1, [pc, #496]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  4055f2:	68fa      	ldr	r2, [r7, #12]
  4055f4:	4613      	mov	r3, r2
  4055f6:	009b      	lsls	r3, r3, #2
  4055f8:	4413      	add	r3, r2
  4055fa:	440b      	add	r3, r1
  4055fc:	2200      	movs	r2, #0
  4055fe:	711a      	strb	r2, [r3, #4]
		shelf[i].devicesPresent = 0;
  405600:	4978      	ldr	r1, [pc, #480]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405602:	68fa      	ldr	r2, [r7, #12]
  405604:	4613      	mov	r3, r2
  405606:	009b      	lsls	r3, r3, #2
  405608:	4413      	add	r3, r2
  40560a:	440b      	add	r3, r1
  40560c:	2200      	movs	r2, #0
  40560e:	70da      	strb	r2, [r3, #3]
		shelf[i].active = 0;
  405610:	4974      	ldr	r1, [pc, #464]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405612:	68fa      	ldr	r2, [r7, #12]
  405614:	4613      	mov	r3, r2
  405616:	009b      	lsls	r3, r3, #2
  405618:	4413      	add	r3, r2
  40561a:	440b      	add	r3, r1
  40561c:	2200      	movs	r2, #0
  40561e:	701a      	strb	r2, [r3, #0]

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
  405620:	68fb      	ldr	r3, [r7, #12]
  405622:	3301      	adds	r3, #1
  405624:	60fb      	str	r3, [r7, #12]
  405626:	68fb      	ldr	r3, [r7, #12]
  405628:	2b03      	cmp	r3, #3
  40562a:	dde1      	ble.n	4055f0 <init_shelf_n_ledBrd_structs+0xc>
		shelf[i].present = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].active = 0;
	}
	
	shelf[0].tLedIdx = 0;
  40562c:	4b6d      	ldr	r3, [pc, #436]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  40562e:	2200      	movs	r2, #0
  405630:	705a      	strb	r2, [r3, #1]
	shelf[0].bLedIdx = 1;
  405632:	4b6c      	ldr	r3, [pc, #432]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405634:	2201      	movs	r2, #1
  405636:	709a      	strb	r2, [r3, #2]
	shelf[1].tLedIdx = 1;
  405638:	4b6a      	ldr	r3, [pc, #424]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  40563a:	2201      	movs	r2, #1
  40563c:	719a      	strb	r2, [r3, #6]
	shelf[1].bLedIdx = 2;
  40563e:	4b69      	ldr	r3, [pc, #420]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405640:	2202      	movs	r2, #2
  405642:	71da      	strb	r2, [r3, #7]
	shelf[2].tLedIdx = 2;
  405644:	4b67      	ldr	r3, [pc, #412]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405646:	2202      	movs	r2, #2
  405648:	72da      	strb	r2, [r3, #11]
	shelf[2].bLedIdx = 3;
  40564a:	4b66      	ldr	r3, [pc, #408]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  40564c:	2203      	movs	r2, #3
  40564e:	731a      	strb	r2, [r3, #12]
	shelf[3].tLedIdx = 3;
  405650:	4b64      	ldr	r3, [pc, #400]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405652:	2203      	movs	r2, #3
  405654:	741a      	strb	r2, [r3, #16]
	shelf[3].bLedIdx = 4;
  405656:	4b63      	ldr	r3, [pc, #396]	; (4057e4 <init_shelf_n_ledBrd_structs+0x200>)
  405658:	2204      	movs	r2, #4
  40565a:	745a      	strb	r2, [r3, #17]
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  40565c:	2300      	movs	r3, #0
  40565e:	60bb      	str	r3, [r7, #8]
  405660:	e00c      	b.n	40567c <init_shelf_n_ledBrd_structs+0x98>
	{
		ledBrd[i].present = 0;
  405662:	4961      	ldr	r1, [pc, #388]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  405664:	68ba      	ldr	r2, [r7, #8]
  405666:	4613      	mov	r3, r2
  405668:	00db      	lsls	r3, r3, #3
  40566a:	1a9b      	subs	r3, r3, r2
  40566c:	005b      	lsls	r3, r3, #1
  40566e:	440b      	add	r3, r1
  405670:	3308      	adds	r3, #8
  405672:	2200      	movs	r2, #0
  405674:	701a      	strb	r2, [r3, #0]
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405676:	68bb      	ldr	r3, [r7, #8]
  405678:	3301      	adds	r3, #1
  40567a:	60bb      	str	r3, [r7, #8]
  40567c:	68bb      	ldr	r3, [r7, #8]
  40567e:	2b04      	cmp	r3, #4
  405680:	ddef      	ble.n	405662 <init_shelf_n_ledBrd_structs+0x7e>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
  405682:	4b59      	ldr	r3, [pc, #356]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  405684:	22ff      	movs	r2, #255	; 0xff
  405686:	729a      	strb	r2, [r3, #10]
	ledBrd[0].lSideIdx = 0;
  405688:	4b57      	ldr	r3, [pc, #348]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  40568a:	2200      	movs	r2, #0
  40568c:	72da      	strb	r2, [r3, #11]
	ledBrd[1].uSideIdx = 1;
  40568e:	4b56      	ldr	r3, [pc, #344]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  405690:	2201      	movs	r2, #1
  405692:	761a      	strb	r2, [r3, #24]
	ledBrd[1].lSideIdx = 2;
  405694:	4b54      	ldr	r3, [pc, #336]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  405696:	2202      	movs	r2, #2
  405698:	765a      	strb	r2, [r3, #25]
	ledBrd[2].uSideIdx = 3;
  40569a:	4b53      	ldr	r3, [pc, #332]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  40569c:	2203      	movs	r2, #3
  40569e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ledBrd[2].lSideIdx = 4;
  4056a2:	4b51      	ldr	r3, [pc, #324]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056a4:	2204      	movs	r2, #4
  4056a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ledBrd[3].uSideIdx = 5;
  4056aa:	4b4f      	ldr	r3, [pc, #316]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056ac:	2205      	movs	r2, #5
  4056ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	ledBrd[3].lSideIdx = 6;
  4056b2:	4b4d      	ldr	r3, [pc, #308]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056b4:	2206      	movs	r2, #6
  4056b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	ledBrd[4].uSideIdx = 7;
  4056ba:	4b4b      	ldr	r3, [pc, #300]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056bc:	2207      	movs	r2, #7
  4056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ledBrd[4].lSideIdx = 0xFF;
  4056c2:	4b49      	ldr	r3, [pc, #292]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056c4:	22ff      	movs	r2, #255	; 0xff
  4056c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	ledBrd[0].uSideShelfIdx = 0xFF;
  4056ca:	4b47      	ldr	r3, [pc, #284]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056cc:	22ff      	movs	r2, #255	; 0xff
  4056ce:	731a      	strb	r2, [r3, #12]
	ledBrd[1].uSideShelfIdx = 0;
  4056d0:	4b45      	ldr	r3, [pc, #276]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056d2:	2200      	movs	r2, #0
  4056d4:	769a      	strb	r2, [r3, #26]
	ledBrd[2].uSideShelfIdx = 1;
  4056d6:	4b44      	ldr	r3, [pc, #272]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056d8:	2201      	movs	r2, #1
  4056da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ledBrd[3].uSideShelfIdx = 2;
  4056de:	4b42      	ldr	r3, [pc, #264]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056e0:	2202      	movs	r2, #2
  4056e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ledBrd[4].uSideShelfIdx = 3;
  4056e6:	4b40      	ldr	r3, [pc, #256]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056e8:	2203      	movs	r2, #3
  4056ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 
	ledBrd[0].lSideShelfIdx = 0;
  4056ee:	4b3e      	ldr	r3, [pc, #248]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056f0:	2200      	movs	r2, #0
  4056f2:	735a      	strb	r2, [r3, #13]
	ledBrd[1].lSideShelfIdx = 1;
  4056f4:	4b3c      	ldr	r3, [pc, #240]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056f6:	2201      	movs	r2, #1
  4056f8:	76da      	strb	r2, [r3, #27]
	ledBrd[2].lSideShelfIdx = 2;
  4056fa:	4b3b      	ldr	r3, [pc, #236]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  4056fc:	2202      	movs	r2, #2
  4056fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ledBrd[3].lSideShelfIdx = 3;
  405702:	4b39      	ldr	r3, [pc, #228]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  405704:	2203      	movs	r2, #3
  405706:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ledBrd[4].lSideShelfIdx = 0xFF;
  40570a:	4b37      	ldr	r3, [pc, #220]	; (4057e8 <init_shelf_n_ledBrd_structs+0x204>)
  40570c:	22ff      	movs	r2, #255	; 0xff
  40570e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405712:	2300      	movs	r3, #0
  405714:	607b      	str	r3, [r7, #4]
  405716:	e01a      	b.n	40574e <init_shelf_n_ledBrd_structs+0x16a>
	{
		ledBrdSide[i].maxUsageReached = 0;
  405718:	4934      	ldr	r1, [pc, #208]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40571a:	687a      	ldr	r2, [r7, #4]
  40571c:	4613      	mov	r3, r2
  40571e:	009b      	lsls	r3, r3, #2
  405720:	4413      	add	r3, r2
  405722:	440b      	add	r3, r1
  405724:	2200      	movs	r2, #0
  405726:	709a      	strb	r2, [r3, #2]
		ledBrdSide[i].sanitizeMinutes = 0;
  405728:	4930      	ldr	r1, [pc, #192]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40572a:	687a      	ldr	r2, [r7, #4]
  40572c:	4613      	mov	r3, r2
  40572e:	009b      	lsls	r3, r3, #2
  405730:	4413      	add	r3, r2
  405732:	440b      	add	r3, r1
  405734:	2200      	movs	r2, #0
  405736:	701a      	strb	r2, [r3, #0]
		ledBrdSide[i].ushdwIdx = 0xFF;
  405738:	492c      	ldr	r1, [pc, #176]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40573a:	687a      	ldr	r2, [r7, #4]
  40573c:	4613      	mov	r3, r2
  40573e:	009b      	lsls	r3, r3, #2
  405740:	4413      	add	r3, r2
  405742:	440b      	add	r3, r1
  405744:	22ff      	movs	r2, #255	; 0xff
  405746:	705a      	strb	r2, [r3, #1]
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405748:	687b      	ldr	r3, [r7, #4]
  40574a:	3301      	adds	r3, #1
  40574c:	607b      	str	r3, [r7, #4]
  40574e:	687b      	ldr	r3, [r7, #4]
  405750:	2b07      	cmp	r3, #7
  405752:	dde1      	ble.n	405718 <init_shelf_n_ledBrd_structs+0x134>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
  405754:	4b25      	ldr	r3, [pc, #148]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405756:	2200      	movs	r2, #0
  405758:	711a      	strb	r2, [r3, #4]
	ledBrdSide[1].boardIdx = 1;
  40575a:	4b24      	ldr	r3, [pc, #144]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40575c:	2201      	movs	r2, #1
  40575e:	725a      	strb	r2, [r3, #9]
	ledBrdSide[2].boardIdx = 1;
  405760:	4b22      	ldr	r3, [pc, #136]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405762:	2201      	movs	r2, #1
  405764:	739a      	strb	r2, [r3, #14]
	ledBrdSide[3].boardIdx = 2;
  405766:	4b21      	ldr	r3, [pc, #132]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405768:	2202      	movs	r2, #2
  40576a:	74da      	strb	r2, [r3, #19]
	ledBrdSide[4].boardIdx = 2;
  40576c:	4b1f      	ldr	r3, [pc, #124]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40576e:	2202      	movs	r2, #2
  405770:	761a      	strb	r2, [r3, #24]
	ledBrdSide[5].boardIdx = 3;
  405772:	4b1e      	ldr	r3, [pc, #120]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405774:	2203      	movs	r2, #3
  405776:	775a      	strb	r2, [r3, #29]
	ledBrdSide[6].boardIdx = 3;
  405778:	4b1c      	ldr	r3, [pc, #112]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40577a:	2203      	movs	r2, #3
  40577c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ledBrdSide[7].boardIdx = 4;
  405780:	4b1a      	ldr	r3, [pc, #104]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405782:	2204      	movs	r2, #4
  405784:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	

	ledBrdSide[0].shelfIdx = 0;
  405788:	4b18      	ldr	r3, [pc, #96]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40578a:	2200      	movs	r2, #0
  40578c:	70da      	strb	r2, [r3, #3]
	ledBrdSide[1].shelfIdx = 0;
  40578e:	4b17      	ldr	r3, [pc, #92]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405790:	2200      	movs	r2, #0
  405792:	721a      	strb	r2, [r3, #8]
	ledBrdSide[2].shelfIdx = 1;
  405794:	4b15      	ldr	r3, [pc, #84]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  405796:	2201      	movs	r2, #1
  405798:	735a      	strb	r2, [r3, #13]
	ledBrdSide[3].shelfIdx = 1;
  40579a:	4b14      	ldr	r3, [pc, #80]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  40579c:	2201      	movs	r2, #1
  40579e:	749a      	strb	r2, [r3, #18]
	ledBrdSide[4].shelfIdx = 2;
  4057a0:	4b12      	ldr	r3, [pc, #72]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  4057a2:	2202      	movs	r2, #2
  4057a4:	75da      	strb	r2, [r3, #23]
	ledBrdSide[5].shelfIdx = 2;
  4057a6:	4b11      	ldr	r3, [pc, #68]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  4057a8:	2202      	movs	r2, #2
  4057aa:	771a      	strb	r2, [r3, #28]
	ledBrdSide[6].shelfIdx = 3;
  4057ac:	4b0f      	ldr	r3, [pc, #60]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  4057ae:	2203      	movs	r2, #3
  4057b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ledBrdSide[7].shelfIdx = 3;
  4057b4:	4b0d      	ldr	r3, [pc, #52]	; (4057ec <init_shelf_n_ledBrd_structs+0x208>)
  4057b6:	2203      	movs	r2, #3
  4057b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  4057bc:	2300      	movs	r3, #0
  4057be:	603b      	str	r3, [r7, #0]
  4057c0:	e007      	b.n	4057d2 <init_shelf_n_ledBrd_structs+0x1ee>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
  4057c2:	4a0b      	ldr	r2, [pc, #44]	; (4057f0 <init_shelf_n_ledBrd_structs+0x20c>)
  4057c4:	683b      	ldr	r3, [r7, #0]
  4057c6:	4413      	add	r3, r2
  4057c8:	22ff      	movs	r2, #255	; 0xff
  4057ca:	701a      	strb	r2, [r3, #0]
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  4057cc:	683b      	ldr	r3, [r7, #0]
  4057ce:	3301      	adds	r3, #1
  4057d0:	603b      	str	r3, [r7, #0]
  4057d2:	683b      	ldr	r3, [r7, #0]
  4057d4:	2b07      	cmp	r3, #7
  4057d6:	ddf4      	ble.n	4057c2 <init_shelf_n_ledBrd_structs+0x1de>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
	}

}
  4057d8:	3714      	adds	r7, #20
  4057da:	46bd      	mov	sp, r7
  4057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057e0:	4770      	bx	lr
  4057e2:	bf00      	nop
  4057e4:	2040168c 	.word	0x2040168c
  4057e8:	20401644 	.word	0x20401644
  4057ec:	204016c8 	.word	0x204016c8
  4057f0:	204016ac 	.word	0x204016ac

004057f4 <init_led_board_info>:
}


void init_led_board_info(void);
void init_led_board_info(void)
{
  4057f4:	b480      	push	{r7}
  4057f6:	b083      	sub	sp, #12
  4057f8:	af00      	add	r7, sp, #0
//skip for now 22feb16			write_region_to_flash(i,  0xFF, csum);
//skip for now 22feb16			copy_region_to_another_sector(i);
		}
	}
#endif //skip flash stuff for now 23feb16
}
  4057fa:	370c      	adds	r7, #12
  4057fc:	46bd      	mov	sp, r7
  4057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405802:	4770      	bx	lr

00405804 <show_sw_version>:


void show_sw_version(void);
void show_sw_version(void)
{
  405804:	b580      	push	{r7, lr}
  405806:	af00      	add	r7, sp, #0
	print_ecdbg("\r\n*---------------------------------------------------*\r\n");
  405808:	4804      	ldr	r0, [pc, #16]	; (40581c <show_sw_version+0x18>)
  40580a:	4b05      	ldr	r3, [pc, #20]	; (405820 <show_sw_version+0x1c>)
  40580c:	4798      	blx	r3
	print_ecdbg(    "ELECTROCLAVE\r\nCopyright (c) 2016 Seal Shield, Inc. \r\n");
  40580e:	4805      	ldr	r0, [pc, #20]	; (405824 <show_sw_version+0x20>)
  405810:	4b03      	ldr	r3, [pc, #12]	; (405820 <show_sw_version+0x1c>)
  405812:	4798      	blx	r3
	print_ecdbg(    "Hardware Version: Classic +++ Software Version: 0.077\r\n");
  405814:	4804      	ldr	r0, [pc, #16]	; (405828 <show_sw_version+0x24>)
  405816:	4b02      	ldr	r3, [pc, #8]	; (405820 <show_sw_version+0x1c>)
  405818:	4798      	blx	r3

}
  40581a:	bd80      	pop	{r7, pc}
  40581c:	0040c860 	.word	0x0040c860
  405820:	004026b1 	.word	0x004026b1
  405824:	0040c89c 	.word	0x0040c89c
  405828:	0040c8d4 	.word	0x0040c8d4

0040582c <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
  40582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405830:	b0a7      	sub	sp, #156	; 0x9c
  405832:	af0c      	add	r7, sp, #48	; 0x30
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx;
	unsigned char sanMinutesMax = 0, sanMinutesMin = 0xFF, sanMinutesUpper, sanMinutesLower, uMins, lMins;
  405834:	2300      	movs	r3, #0
  405836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  40583a:	23ff      	movs	r3, #255	; 0xff
  40583c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned int uHrs, lHrs;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
  405840:	4856      	ldr	r0, [pc, #344]	; (40599c <show_chassis_status_info+0x170>)
  405842:	4b57      	ldr	r3, [pc, #348]	; (4059a0 <show_chassis_status_info+0x174>)
  405844:	4798      	blx	r3
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
  405846:	4857      	ldr	r0, [pc, #348]	; (4059a4 <show_chassis_status_info+0x178>)
  405848:	4b55      	ldr	r3, [pc, #340]	; (4059a0 <show_chassis_status_info+0x174>)
  40584a:	4798      	blx	r3
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
  40584c:	4856      	ldr	r0, [pc, #344]	; (4059a8 <show_chassis_status_info+0x17c>)
  40584e:	4b54      	ldr	r3, [pc, #336]	; (4059a0 <show_chassis_status_info+0x174>)
  405850:	4798      	blx	r3
	print_ecdbg("----------------------------------------------------------\r\n");
  405852:	4856      	ldr	r0, [pc, #344]	; (4059ac <show_chassis_status_info+0x180>)
  405854:	4b52      	ldr	r3, [pc, #328]	; (4059a0 <show_chassis_status_info+0x174>)
  405856:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405858:	2300      	movs	r3, #0
  40585a:	657b      	str	r3, [r7, #84]	; 0x54
  40585c:	e153      	b.n	405b06 <show_chassis_status_info+0x2da>
	{
		if (ledBrd[i].present)
  40585e:	4954      	ldr	r1, [pc, #336]	; (4059b0 <show_chassis_status_info+0x184>)
  405860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405862:	4613      	mov	r3, r2
  405864:	00db      	lsls	r3, r3, #3
  405866:	1a9b      	subs	r3, r3, r2
  405868:	005b      	lsls	r3, r3, #1
  40586a:	440b      	add	r3, r1
  40586c:	3308      	adds	r3, #8
  40586e:	781b      	ldrb	r3, [r3, #0]
  405870:	2b00      	cmp	r3, #0
  405872:	f000 8145 	beq.w	405b00 <show_chassis_status_info+0x2d4>
		{
			uSideIdx = ledBrd[i].uSideIdx;
  405876:	494e      	ldr	r1, [pc, #312]	; (4059b0 <show_chassis_status_info+0x184>)
  405878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  40587a:	4613      	mov	r3, r2
  40587c:	00db      	lsls	r3, r3, #3
  40587e:	1a9b      	subs	r3, r3, r2
  405880:	005b      	lsls	r3, r3, #1
  405882:	440b      	add	r3, r1
  405884:	3308      	adds	r3, #8
  405886:	789b      	ldrb	r3, [r3, #2]
  405888:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			lSideIdx = ledBrd[i].lSideIdx;
  40588c:	4948      	ldr	r1, [pc, #288]	; (4059b0 <show_chassis_status_info+0x184>)
  40588e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405890:	4613      	mov	r3, r2
  405892:	00db      	lsls	r3, r3, #3
  405894:	1a9b      	subs	r3, r3, r2
  405896:	005b      	lsls	r3, r3, #1
  405898:	440b      	add	r3, r1
  40589a:	3308      	adds	r3, #8
  40589c:	78db      	ldrb	r3, [r3, #3]
  40589e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			
			if (uSideIdx != NO_LED_BOARD_PRESENT)
  4058a2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  4058a6:	2bff      	cmp	r3, #255	; 0xff
  4058a8:	d035      	beq.n	405916 <show_chassis_status_info+0xea>
			{
				uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;	
  4058aa:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  4058ae:	4941      	ldr	r1, [pc, #260]	; (4059b4 <show_chassis_status_info+0x188>)
  4058b0:	4613      	mov	r3, r2
  4058b2:	009b      	lsls	r3, r3, #2
  4058b4:	4413      	add	r3, r2
  4058b6:	440b      	add	r3, r1
  4058b8:	785b      	ldrb	r3, [r3, #1]
  4058ba:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(uSideIdx);
  4058be:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
  4058c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  4058c6:	4618      	mov	r0, r3
  4058c8:	4b3b      	ldr	r3, [pc, #236]	; (4059b8 <show_chassis_status_info+0x18c>)
  4058ca:	4798      	blx	r3
  4058cc:	4603      	mov	r3, r0
  4058ce:	2b00      	cmp	r3, #0
  4058d0:	bf0c      	ite	eq
  4058d2:	2301      	moveq	r3, #1
  4058d4:	2300      	movne	r3, #0
  4058d6:	b2db      	uxtb	r3, r3
  4058d8:	4619      	mov	r1, r3
  4058da:	4a36      	ldr	r2, [pc, #216]	; (4059b4 <show_chassis_status_info+0x188>)
  4058dc:	4623      	mov	r3, r4
  4058de:	009b      	lsls	r3, r3, #2
  4058e0:	4423      	add	r3, r4
  4058e2:	4413      	add	r3, r2
  4058e4:	460a      	mov	r2, r1
  4058e6:	709a      	strb	r2, [r3, #2]
				sanMinutesUpper = ledBrdSide[uSideIdx].sanitizeMinutes;
  4058e8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  4058ec:	4931      	ldr	r1, [pc, #196]	; (4059b4 <show_chassis_status_info+0x188>)
  4058ee:	4613      	mov	r3, r2
  4058f0:	009b      	lsls	r3, r3, #2
  4058f2:	4413      	add	r3, r2
  4058f4:	440b      	add	r3, r1
  4058f6:	781b      	ldrb	r3, [r3, #0]
  4058f8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				uHrs = h.hrs[uSideUsageIdx];
  4058fc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  405900:	4a2e      	ldr	r2, [pc, #184]	; (4059bc <show_chassis_status_info+0x190>)
  405902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405906:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = m.mins[uSideUsageIdx];
  405908:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  40590c:	4a2c      	ldr	r2, [pc, #176]	; (4059c0 <show_chassis_status_info+0x194>)
  40590e:	5cd3      	ldrb	r3, [r2, r3]
  405910:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  405914:	e007      	b.n	405926 <show_chassis_status_info+0xfa>
			}
			else
			{
				uHrs = 0;
  405916:	2300      	movs	r3, #0
  405918:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = 0;
  40591a:	2300      	movs	r3, #0
  40591c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				sanMinutesUpper = 0;
  405920:	2300      	movs	r3, #0
  405922:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			
			if (lSideIdx != NO_LED_BOARD_PRESENT)
  405926:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  40592a:	2bff      	cmp	r3, #255	; 0xff
  40592c:	d04a      	beq.n	4059c4 <show_chassis_status_info+0x198>
			{
				lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;	
  40592e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405932:	4920      	ldr	r1, [pc, #128]	; (4059b4 <show_chassis_status_info+0x188>)
  405934:	4613      	mov	r3, r2
  405936:	009b      	lsls	r3, r3, #2
  405938:	4413      	add	r3, r2
  40593a:	440b      	add	r3, r1
  40593c:	785b      	ldrb	r3, [r3, #1]
  40593e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				ledBrdSide[lSideIdx].maxUsageReached = !check_led_brd_side_lifetime(lSideIdx);
  405942:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
  405946:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  40594a:	4618      	mov	r0, r3
  40594c:	4b1a      	ldr	r3, [pc, #104]	; (4059b8 <show_chassis_status_info+0x18c>)
  40594e:	4798      	blx	r3
  405950:	4603      	mov	r3, r0
  405952:	2b00      	cmp	r3, #0
  405954:	bf0c      	ite	eq
  405956:	2301      	moveq	r3, #1
  405958:	2300      	movne	r3, #0
  40595a:	b2db      	uxtb	r3, r3
  40595c:	4619      	mov	r1, r3
  40595e:	4a15      	ldr	r2, [pc, #84]	; (4059b4 <show_chassis_status_info+0x188>)
  405960:	4623      	mov	r3, r4
  405962:	009b      	lsls	r3, r3, #2
  405964:	4423      	add	r3, r4
  405966:	4413      	add	r3, r2
  405968:	460a      	mov	r2, r1
  40596a:	709a      	strb	r2, [r3, #2]
				sanMinutesLower = ledBrdSide[lSideIdx].sanitizeMinutes;
  40596c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405970:	4910      	ldr	r1, [pc, #64]	; (4059b4 <show_chassis_status_info+0x188>)
  405972:	4613      	mov	r3, r2
  405974:	009b      	lsls	r3, r3, #2
  405976:	4413      	add	r3, r2
  405978:	440b      	add	r3, r1
  40597a:	781b      	ldrb	r3, [r3, #0]
  40597c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				lHrs = h.hrs[lSideUsageIdx];
  405980:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405984:	4a0d      	ldr	r2, [pc, #52]	; (4059bc <show_chassis_status_info+0x190>)
  405986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40598a:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = m.mins[lSideUsageIdx];
  40598c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405990:	4a0b      	ldr	r2, [pc, #44]	; (4059c0 <show_chassis_status_info+0x194>)
  405992:	5cd3      	ldrb	r3, [r2, r3]
  405994:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  405998:	e01c      	b.n	4059d4 <show_chassis_status_info+0x1a8>
  40599a:	bf00      	nop
  40599c:	0040c90c 	.word	0x0040c90c
  4059a0:	004026b1 	.word	0x004026b1
  4059a4:	0040c930 	.word	0x0040c930
  4059a8:	0040c96c 	.word	0x0040c96c
  4059ac:	0040c9ac 	.word	0x0040c9ac
  4059b0:	20401644 	.word	0x20401644
  4059b4:	204016c8 	.word	0x204016c8
  4059b8:	00404739 	.word	0x00404739
  4059bc:	204016f4 	.word	0x204016f4
  4059c0:	204017b8 	.word	0x204017b8
			}
			else
			{
				lHrs = 0;
  4059c4:	2300      	movs	r3, #0
  4059c6:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = 0;
  4059c8:	2300      	movs	r3, #0
  4059ca:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				sanMinutesLower = 0;
  4059ce:	2300      	movs	r3, #0
  4059d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  4059d4:	497a      	ldr	r1, [pc, #488]	; (405bc0 <show_chassis_status_info+0x394>)
  4059d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4059d8:	4613      	mov	r3, r2
  4059da:	00db      	lsls	r3, r3, #3
  4059dc:	1a9b      	subs	r3, r3, r2
  4059de:	005b      	lsls	r3, r3, #1
  4059e0:	440b      	add	r3, r1
  4059e2:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  4059e4:	4699      	mov	r9, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  4059e6:	4976      	ldr	r1, [pc, #472]	; (405bc0 <show_chassis_status_info+0x394>)
  4059e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4059ea:	4613      	mov	r3, r2
  4059ec:	00db      	lsls	r3, r3, #3
  4059ee:	1a9b      	subs	r3, r3, r2
  4059f0:	005b      	lsls	r3, r3, #1
  4059f2:	440b      	add	r3, r1
  4059f4:	3301      	adds	r3, #1
  4059f6:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  4059f8:	4698      	mov	r8, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  4059fa:	4971      	ldr	r1, [pc, #452]	; (405bc0 <show_chassis_status_info+0x394>)
  4059fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4059fe:	4613      	mov	r3, r2
  405a00:	00db      	lsls	r3, r3, #3
  405a02:	1a9b      	subs	r3, r3, r2
  405a04:	005b      	lsls	r3, r3, #1
  405a06:	440b      	add	r3, r1
  405a08:	3302      	adds	r3, #2
  405a0a:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405a0c:	469c      	mov	ip, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405a0e:	496c      	ldr	r1, [pc, #432]	; (405bc0 <show_chassis_status_info+0x394>)
  405a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405a12:	4613      	mov	r3, r2
  405a14:	00db      	lsls	r3, r3, #3
  405a16:	1a9b      	subs	r3, r3, r2
  405a18:	005b      	lsls	r3, r3, #1
  405a1a:	440b      	add	r3, r1
  405a1c:	3303      	adds	r3, #3
  405a1e:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405a20:	469e      	mov	lr, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405a22:	4967      	ldr	r1, [pc, #412]	; (405bc0 <show_chassis_status_info+0x394>)
  405a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405a26:	4613      	mov	r3, r2
  405a28:	00db      	lsls	r3, r3, #3
  405a2a:	1a9b      	subs	r3, r3, r2
  405a2c:	005b      	lsls	r3, r3, #1
  405a2e:	440b      	add	r3, r1
  405a30:	3304      	adds	r3, #4
  405a32:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405a34:	461e      	mov	r6, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405a36:	4962      	ldr	r1, [pc, #392]	; (405bc0 <show_chassis_status_info+0x394>)
  405a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405a3a:	4613      	mov	r3, r2
  405a3c:	00db      	lsls	r3, r3, #3
  405a3e:	1a9b      	subs	r3, r3, r2
  405a40:	005b      	lsls	r3, r3, #1
  405a42:	440b      	add	r3, r1
  405a44:	3305      	adds	r3, #5
  405a46:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405a48:	461c      	mov	r4, r3
  405a4a:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
  405a4e:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
  405a52:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
  405a56:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405a5a:	463d      	mov	r5, r7
  405a5c:	f8cd 8000 	str.w	r8, [sp]
  405a60:	f8cd c004 	str.w	ip, [sp, #4]
  405a64:	f8cd e008 	str.w	lr, [sp, #8]
  405a68:	9603      	str	r6, [sp, #12]
  405a6a:	9404      	str	r4, [sp, #16]
  405a6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
  405a6e:	9405      	str	r4, [sp, #20]
  405a70:	9006      	str	r0, [sp, #24]
  405a72:	9107      	str	r1, [sp, #28]
  405a74:	6db9      	ldr	r1, [r7, #88]	; 0x58
  405a76:	9108      	str	r1, [sp, #32]
  405a78:	9209      	str	r2, [sp, #36]	; 0x24
  405a7a:	930a      	str	r3, [sp, #40]	; 0x28
  405a7c:	4628      	mov	r0, r5
  405a7e:	4951      	ldr	r1, [pc, #324]	; (405bc4 <show_chassis_status_info+0x398>)
  405a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405a82:	464b      	mov	r3, r9
  405a84:	4c50      	ldr	r4, [pc, #320]	; (405bc8 <show_chassis_status_info+0x39c>)
  405a86:	47a0      	blx	r4
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				uHrs, uMins,
				sanMinutesUpper,
				lHrs, lMins,
				sanMinutesLower);
			print_ecdbg(pStr);
  405a88:	463b      	mov	r3, r7
  405a8a:	4618      	mov	r0, r3
  405a8c:	4b4f      	ldr	r3, [pc, #316]	; (405bcc <show_chassis_status_info+0x3a0>)
  405a8e:	4798      	blx	r3
			

			/* 
			 * Determine the min and max sanitize times for the LED boards that are currently installed
			 */
			if ((sanMinutesMax < sanMinutesUpper) && (sanMinutesUpper != 0))
  405a90:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  405a94:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405a98:	429a      	cmp	r2, r3
  405a9a:	d207      	bcs.n	405aac <show_chassis_status_info+0x280>
  405a9c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405aa0:	2b00      	cmp	r3, #0
  405aa2:	d003      	beq.n	405aac <show_chassis_status_info+0x280>
			{
				sanMinutesMax = sanMinutesUpper;
  405aa4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMax < sanMinutesLower) && (sanMinutesLower != 0))
  405aac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  405ab0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405ab4:	429a      	cmp	r2, r3
  405ab6:	d207      	bcs.n	405ac8 <show_chassis_status_info+0x29c>
  405ab8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405abc:	2b00      	cmp	r3, #0
  405abe:	d003      	beq.n	405ac8 <show_chassis_status_info+0x29c>
			{
				sanMinutesMax = sanMinutesLower;
  405ac0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405ac4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMin > sanMinutesUpper) && (sanMinutesUpper != 0))
  405ac8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  405acc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405ad0:	429a      	cmp	r2, r3
  405ad2:	d907      	bls.n	405ae4 <show_chassis_status_info+0x2b8>
  405ad4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405ad8:	2b00      	cmp	r3, #0
  405ada:	d003      	beq.n	405ae4 <show_chassis_status_info+0x2b8>
			{
				sanMinutesMin = sanMinutesUpper;
  405adc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405ae0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			}
			if ((sanMinutesMin > sanMinutesLower) && (sanMinutesLower != 0))
  405ae4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  405ae8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405aec:	429a      	cmp	r2, r3
  405aee:	d907      	bls.n	405b00 <show_chassis_status_info+0x2d4>
  405af0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405af4:	2b00      	cmp	r3, #0
  405af6:	d003      	beq.n	405b00 <show_chassis_status_info+0x2d4>
			{
				sanMinutesMin = sanMinutesLower;
  405af8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405afc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
	print_ecdbg("----------------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405b02:	3301      	adds	r3, #1
  405b04:	657b      	str	r3, [r7, #84]	; 0x54
  405b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405b08:	2b04      	cmp	r3, #4
  405b0a:	f77f aea8 	ble.w	40585e <show_chassis_status_info+0x32>
				sanMinutesMin = sanMinutesLower;
			}
		}
	}
	
	print_ecdbg("MAX DTE: ");
  405b0e:	4830      	ldr	r0, [pc, #192]	; (405bd0 <show_chassis_status_info+0x3a4>)
  405b10:	4b2e      	ldr	r3, [pc, #184]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b12:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMax);
  405b14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  405b18:	4618      	mov	r0, r3
  405b1a:	4b2e      	ldr	r3, [pc, #184]	; (405bd4 <show_chassis_status_info+0x3a8>)
  405b1c:	4798      	blx	r3
	print_ecdbg(" MIN DTE: ");
  405b1e:	482e      	ldr	r0, [pc, #184]	; (405bd8 <show_chassis_status_info+0x3ac>)
  405b20:	4b2a      	ldr	r3, [pc, #168]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b22:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMin);
  405b24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
  405b28:	4618      	mov	r0, r3
  405b2a:	4b2a      	ldr	r3, [pc, #168]	; (405bd4 <show_chassis_status_info+0x3a8>)
  405b2c:	4798      	blx	r3
	print_ecdbg("\r\n");
  405b2e:	482b      	ldr	r0, [pc, #172]	; (405bdc <show_chassis_status_info+0x3b0>)
  405b30:	4b26      	ldr	r3, [pc, #152]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b32:	4798      	blx	r3
	
	print_ecdbg("TOTAL SANITIZE TIME: ");
  405b34:	482a      	ldr	r0, [pc, #168]	; (405be0 <show_chassis_status_info+0x3b4>)
  405b36:	4b25      	ldr	r3, [pc, #148]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b38:	4798      	blx	r3
	if ((m.sanMins/60) < 10)
  405b3a:	4b2a      	ldr	r3, [pc, #168]	; (405be4 <show_chassis_status_info+0x3b8>)
  405b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405b3e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
  405b42:	d202      	bcs.n	405b4a <show_chassis_status_info+0x31e>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  405b44:	4828      	ldr	r0, [pc, #160]	; (405be8 <show_chassis_status_info+0x3bc>)
  405b46:	4b21      	ldr	r3, [pc, #132]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b48:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins/60));
  405b4a:	4b26      	ldr	r3, [pc, #152]	; (405be4 <show_chassis_status_info+0x3b8>)
  405b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405b4e:	4a27      	ldr	r2, [pc, #156]	; (405bec <show_chassis_status_info+0x3c0>)
  405b50:	fba2 2303 	umull	r2, r3, r2, r3
  405b54:	095b      	lsrs	r3, r3, #5
  405b56:	4618      	mov	r0, r3
  405b58:	4b1e      	ldr	r3, [pc, #120]	; (405bd4 <show_chassis_status_info+0x3a8>)
  405b5a:	4798      	blx	r3
	print_ecdbg(":");
  405b5c:	4824      	ldr	r0, [pc, #144]	; (405bf0 <show_chassis_status_info+0x3c4>)
  405b5e:	4b1b      	ldr	r3, [pc, #108]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b60:	4798      	blx	r3

	if ((m.sanMins%60) < 10)
  405b62:	4b20      	ldr	r3, [pc, #128]	; (405be4 <show_chassis_status_info+0x3b8>)
  405b64:	6e19      	ldr	r1, [r3, #96]	; 0x60
  405b66:	4b21      	ldr	r3, [pc, #132]	; (405bec <show_chassis_status_info+0x3c0>)
  405b68:	fba3 2301 	umull	r2, r3, r3, r1
  405b6c:	095a      	lsrs	r2, r3, #5
  405b6e:	4613      	mov	r3, r2
  405b70:	011b      	lsls	r3, r3, #4
  405b72:	1a9b      	subs	r3, r3, r2
  405b74:	009b      	lsls	r3, r3, #2
  405b76:	1aca      	subs	r2, r1, r3
  405b78:	2a09      	cmp	r2, #9
  405b7a:	d802      	bhi.n	405b82 <show_chassis_status_info+0x356>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  405b7c:	481a      	ldr	r0, [pc, #104]	; (405be8 <show_chassis_status_info+0x3bc>)
  405b7e:	4b13      	ldr	r3, [pc, #76]	; (405bcc <show_chassis_status_info+0x3a0>)
  405b80:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins%60));
  405b82:	4b18      	ldr	r3, [pc, #96]	; (405be4 <show_chassis_status_info+0x3b8>)
  405b84:	6e19      	ldr	r1, [r3, #96]	; 0x60
  405b86:	4b19      	ldr	r3, [pc, #100]	; (405bec <show_chassis_status_info+0x3c0>)
  405b88:	fba3 2301 	umull	r2, r3, r3, r1
  405b8c:	095a      	lsrs	r2, r3, #5
  405b8e:	4613      	mov	r3, r2
  405b90:	011b      	lsls	r3, r3, #4
  405b92:	1a9b      	subs	r3, r3, r2
  405b94:	009b      	lsls	r3, r3, #2
  405b96:	1aca      	subs	r2, r1, r3
  405b98:	4610      	mov	r0, r2
  405b9a:	4b0e      	ldr	r3, [pc, #56]	; (405bd4 <show_chassis_status_info+0x3a8>)
  405b9c:	4798      	blx	r3

	print_ecdbg("  TOTAL SANITIZE CYCLES: ");
  405b9e:	4815      	ldr	r0, [pc, #84]	; (405bf4 <show_chassis_status_info+0x3c8>)
  405ba0:	4b0a      	ldr	r3, [pc, #40]	; (405bcc <show_chassis_status_info+0x3a0>)
  405ba2:	4798      	blx	r3
	print_ecdbg_num(sanc.cycles);
  405ba4:	4b14      	ldr	r3, [pc, #80]	; (405bf8 <show_chassis_status_info+0x3cc>)
  405ba6:	681b      	ldr	r3, [r3, #0]
  405ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405bac:	4618      	mov	r0, r3
  405bae:	4b09      	ldr	r3, [pc, #36]	; (405bd4 <show_chassis_status_info+0x3a8>)
  405bb0:	4798      	blx	r3

	print_ecdbg("\r\n");
  405bb2:	480a      	ldr	r0, [pc, #40]	; (405bdc <show_chassis_status_info+0x3b0>)
  405bb4:	4b05      	ldr	r3, [pc, #20]	; (405bcc <show_chassis_status_info+0x3a0>)
  405bb6:	4798      	blx	r3
	
}
  405bb8:	376c      	adds	r7, #108	; 0x6c
  405bba:	46bd      	mov	sp, r7
  405bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405bc0:	20401644 	.word	0x20401644
  405bc4:	0040c9ec 	.word	0x0040c9ec
  405bc8:	00407725 	.word	0x00407725
  405bcc:	004026b1 	.word	0x004026b1
  405bd0:	0040ca3c 	.word	0x0040ca3c
  405bd4:	00404481 	.word	0x00404481
  405bd8:	0040ca48 	.word	0x0040ca48
  405bdc:	0040c61c 	.word	0x0040c61c
  405be0:	0040ca54 	.word	0x0040ca54
  405be4:	204017b8 	.word	0x204017b8
  405be8:	0040ca6c 	.word	0x0040ca6c
  405bec:	88888889 	.word	0x88888889
  405bf0:	0040ca70 	.word	0x0040ca70
  405bf4:	0040ca74 	.word	0x0040ca74
  405bf8:	204016f0 	.word	0x204016f0

00405bfc <show_chassis_sysErr>:


void show_chassis_sysErr(void);
void show_chassis_sysErr(void)
{
  405bfc:	b5b0      	push	{r4, r5, r7, lr}
  405bfe:	b09a      	sub	sp, #104	; 0x68
  405c00:	af00      	add	r7, sp, #0
	char str[80];
	

	print_ecdbg("\r\n***SYSTEM TESTS***\r\n\r\n");
  405c02:	4898      	ldr	r0, [pc, #608]	; (405e64 <show_chassis_sysErr+0x268>)
  405c04:	4b98      	ldr	r3, [pc, #608]	; (405e68 <show_chassis_sysErr+0x26c>)
  405c06:	4798      	blx	r3


/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
  405c08:	1d3b      	adds	r3, r7, #4
  405c0a:	4a98      	ldr	r2, [pc, #608]	; (405e6c <show_chassis_sysErr+0x270>)
  405c0c:	461c      	mov	r4, r3
  405c0e:	4615      	mov	r5, r2
  405c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405c18:	e895 0003 	ldmia.w	r5, {r0, r1}
  405c1c:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<8; i++)
  405c20:	2300      	movs	r3, #0
  405c22:	667b      	str	r3, [r7, #100]	; 0x64
  405c24:	e027      	b.n	405c76 <show_chassis_sysErr+0x7a>
	{
		if ((sysErr.topdrive & BIT(i)))
  405c26:	4b92      	ldr	r3, [pc, #584]	; (405e70 <show_chassis_sysErr+0x274>)
  405c28:	781b      	ldrb	r3, [r3, #0]
  405c2a:	461a      	mov	r2, r3
  405c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405c2e:	fa42 f303 	asr.w	r3, r2, r3
  405c32:	f003 0301 	and.w	r3, r3, #1
  405c36:	2b00      	cmp	r3, #0
  405c38:	d00d      	beq.n	405c56 <show_chassis_sysErr+0x5a>
		{
			strcat(str,"F ");			
  405c3a:	1d3b      	adds	r3, r7, #4
  405c3c:	4618      	mov	r0, r3
  405c3e:	4b8d      	ldr	r3, [pc, #564]	; (405e74 <show_chassis_sysErr+0x278>)
  405c40:	4798      	blx	r3
  405c42:	4603      	mov	r3, r0
  405c44:	461a      	mov	r2, r3
  405c46:	1d3b      	adds	r3, r7, #4
  405c48:	4413      	add	r3, r2
  405c4a:	4a8b      	ldr	r2, [pc, #556]	; (405e78 <show_chassis_sysErr+0x27c>)
  405c4c:	8811      	ldrh	r1, [r2, #0]
  405c4e:	7892      	ldrb	r2, [r2, #2]
  405c50:	8019      	strh	r1, [r3, #0]
  405c52:	709a      	strb	r2, [r3, #2]
  405c54:	e00c      	b.n	405c70 <show_chassis_sysErr+0x74>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  405c56:	1d3b      	adds	r3, r7, #4
  405c58:	4618      	mov	r0, r3
  405c5a:	4b86      	ldr	r3, [pc, #536]	; (405e74 <show_chassis_sysErr+0x278>)
  405c5c:	4798      	blx	r3
  405c5e:	4603      	mov	r3, r0
  405c60:	461a      	mov	r2, r3
  405c62:	1d3b      	adds	r3, r7, #4
  405c64:	4413      	add	r3, r2
  405c66:	4a85      	ldr	r2, [pc, #532]	; (405e7c <show_chassis_sysErr+0x280>)
  405c68:	8811      	ldrh	r1, [r2, #0]
  405c6a:	7892      	ldrb	r2, [r2, #2]
  405c6c:	8019      	strh	r1, [r3, #0]
  405c6e:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
	
	for (int i=0; i<8; i++)
  405c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405c72:	3301      	adds	r3, #1
  405c74:	667b      	str	r3, [r7, #100]	; 0x64
  405c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405c78:	2b07      	cmp	r3, #7
  405c7a:	ddd4      	ble.n	405c26 <show_chassis_sysErr+0x2a>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  405c7c:	1d3b      	adds	r3, r7, #4
  405c7e:	4618      	mov	r0, r3
  405c80:	4b79      	ldr	r3, [pc, #484]	; (405e68 <show_chassis_sysErr+0x26c>)
  405c82:	4798      	blx	r3
	print_ecdbg("\r\n");
  405c84:	487e      	ldr	r0, [pc, #504]	; (405e80 <show_chassis_sysErr+0x284>)
  405c86:	4b78      	ldr	r3, [pc, #480]	; (405e68 <show_chassis_sysErr+0x26c>)
  405c88:	4798      	blx	r3
	
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
  405c8a:	1d3b      	adds	r3, r7, #4
  405c8c:	4a7d      	ldr	r2, [pc, #500]	; (405e84 <show_chassis_sysErr+0x288>)
  405c8e:	461c      	mov	r4, r3
  405c90:	4615      	mov	r5, r2
  405c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405c9a:	e895 0003 	ldmia.w	r5, {r0, r1}
  405c9e:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<12; i++)
  405ca2:	2300      	movs	r3, #0
  405ca4:	663b      	str	r3, [r7, #96]	; 0x60
  405ca6:	e026      	b.n	405cf6 <show_chassis_sysErr+0xfa>
	{
		if ((sysErr.botdrive & BIT(i)))
  405ca8:	4b71      	ldr	r3, [pc, #452]	; (405e70 <show_chassis_sysErr+0x274>)
  405caa:	685b      	ldr	r3, [r3, #4]
  405cac:	2101      	movs	r1, #1
  405cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
  405cb0:	fa01 f202 	lsl.w	r2, r1, r2
  405cb4:	4013      	ands	r3, r2
  405cb6:	2b00      	cmp	r3, #0
  405cb8:	d00d      	beq.n	405cd6 <show_chassis_sysErr+0xda>
		{
			strcat(str,"F ");			
  405cba:	1d3b      	adds	r3, r7, #4
  405cbc:	4618      	mov	r0, r3
  405cbe:	4b6d      	ldr	r3, [pc, #436]	; (405e74 <show_chassis_sysErr+0x278>)
  405cc0:	4798      	blx	r3
  405cc2:	4603      	mov	r3, r0
  405cc4:	461a      	mov	r2, r3
  405cc6:	1d3b      	adds	r3, r7, #4
  405cc8:	4413      	add	r3, r2
  405cca:	4a6b      	ldr	r2, [pc, #428]	; (405e78 <show_chassis_sysErr+0x27c>)
  405ccc:	8811      	ldrh	r1, [r2, #0]
  405cce:	7892      	ldrb	r2, [r2, #2]
  405cd0:	8019      	strh	r1, [r3, #0]
  405cd2:	709a      	strb	r2, [r3, #2]
  405cd4:	e00c      	b.n	405cf0 <show_chassis_sysErr+0xf4>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  405cd6:	1d3b      	adds	r3, r7, #4
  405cd8:	4618      	mov	r0, r3
  405cda:	4b66      	ldr	r3, [pc, #408]	; (405e74 <show_chassis_sysErr+0x278>)
  405cdc:	4798      	blx	r3
  405cde:	4603      	mov	r3, r0
  405ce0:	461a      	mov	r2, r3
  405ce2:	1d3b      	adds	r3, r7, #4
  405ce4:	4413      	add	r3, r2
  405ce6:	4a65      	ldr	r2, [pc, #404]	; (405e7c <show_chassis_sysErr+0x280>)
  405ce8:	8811      	ldrh	r1, [r2, #0]
  405cea:	7892      	ldrb	r2, [r2, #2]
  405cec:	8019      	strh	r1, [r3, #0]
  405cee:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
	
	for (int i=0; i<12; i++)
  405cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  405cf2:	3301      	adds	r3, #1
  405cf4:	663b      	str	r3, [r7, #96]	; 0x60
  405cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  405cf8:	2b0b      	cmp	r3, #11
  405cfa:	ddd5      	ble.n	405ca8 <show_chassis_sysErr+0xac>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  405cfc:	1d3b      	adds	r3, r7, #4
  405cfe:	4618      	mov	r0, r3
  405d00:	4b59      	ldr	r3, [pc, #356]	; (405e68 <show_chassis_sysErr+0x26c>)
  405d02:	4798      	blx	r3
	print_ecdbg("\r\n");
  405d04:	485e      	ldr	r0, [pc, #376]	; (405e80 <show_chassis_sysErr+0x284>)
  405d06:	4b58      	ldr	r3, [pc, #352]	; (405e68 <show_chassis_sysErr+0x26c>)
  405d08:	4798      	blx	r3
	
/*
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
  405d0a:	1d3b      	adds	r3, r7, #4
  405d0c:	4a5e      	ldr	r2, [pc, #376]	; (405e88 <show_chassis_sysErr+0x28c>)
  405d0e:	461c      	mov	r4, r3
  405d10:	4615      	mov	r5, r2
  405d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405d1a:	e895 0003 	ldmia.w	r5, {r0, r1}
  405d1e:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<5; i++)
  405d22:	2300      	movs	r3, #0
  405d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  405d26:	e029      	b.n	405d7c <show_chassis_sysErr+0x180>
	{
		if ((sysErr.flashArea & BIT(i)) == SE_FAIL)
  405d28:	4b51      	ldr	r3, [pc, #324]	; (405e70 <show_chassis_sysErr+0x274>)
  405d2a:	689b      	ldr	r3, [r3, #8]
  405d2c:	2101      	movs	r1, #1
  405d2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  405d30:	fa01 f202 	lsl.w	r2, r1, r2
  405d34:	4013      	ands	r3, r2
  405d36:	2b01      	cmp	r3, #1
  405d38:	d110      	bne.n	405d5c <show_chassis_sysErr+0x160>
		{
			strcat(str, "F ");
  405d3a:	1d3b      	adds	r3, r7, #4
  405d3c:	4618      	mov	r0, r3
  405d3e:	4b4d      	ldr	r3, [pc, #308]	; (405e74 <show_chassis_sysErr+0x278>)
  405d40:	4798      	blx	r3
  405d42:	4603      	mov	r3, r0
  405d44:	461a      	mov	r2, r3
  405d46:	1d3b      	adds	r3, r7, #4
  405d48:	4413      	add	r3, r2
  405d4a:	4a4b      	ldr	r2, [pc, #300]	; (405e78 <show_chassis_sysErr+0x27c>)
  405d4c:	8811      	ldrh	r1, [r2, #0]
  405d4e:	7892      	ldrb	r2, [r2, #2]
  405d50:	8019      	strh	r1, [r3, #0]
  405d52:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  405d54:	4b4d      	ldr	r3, [pc, #308]	; (405e8c <show_chassis_sysErr+0x290>)
  405d56:	2207      	movs	r2, #7
  405d58:	701a      	strb	r2, [r3, #0]
  405d5a:	e00c      	b.n	405d76 <show_chassis_sysErr+0x17a>
		}
		else
		{
			strcat(str, "P ");
  405d5c:	1d3b      	adds	r3, r7, #4
  405d5e:	4618      	mov	r0, r3
  405d60:	4b44      	ldr	r3, [pc, #272]	; (405e74 <show_chassis_sysErr+0x278>)
  405d62:	4798      	blx	r3
  405d64:	4603      	mov	r3, r0
  405d66:	461a      	mov	r2, r3
  405d68:	1d3b      	adds	r3, r7, #4
  405d6a:	4413      	add	r3, r2
  405d6c:	4a43      	ldr	r2, [pc, #268]	; (405e7c <show_chassis_sysErr+0x280>)
  405d6e:	8811      	ldrh	r1, [r2, #0]
  405d70:	7892      	ldrb	r2, [r2, #2]
  405d72:	8019      	strh	r1, [r3, #0]
  405d74:	709a      	strb	r2, [r3, #2]
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
	
	for (int i=0; i<5; i++)
  405d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  405d78:	3301      	adds	r3, #1
  405d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  405d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  405d7e:	2b04      	cmp	r3, #4
  405d80:	ddd2      	ble.n	405d28 <show_chassis_sysErr+0x12c>
		{
			strcat(str, "P ");
		}
	}
	
	print_ecdbg(str);
  405d82:	1d3b      	adds	r3, r7, #4
  405d84:	4618      	mov	r0, r3
  405d86:	4b38      	ldr	r3, [pc, #224]	; (405e68 <show_chassis_sysErr+0x26c>)
  405d88:	4798      	blx	r3
	print_ecdbg("\r\n");
  405d8a:	483d      	ldr	r0, [pc, #244]	; (405e80 <show_chassis_sysErr+0x284>)
  405d8c:	4b36      	ldr	r3, [pc, #216]	; (405e68 <show_chassis_sysErr+0x26c>)
  405d8e:	4798      	blx	r3
	
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
  405d90:	1d3b      	adds	r3, r7, #4
  405d92:	4a3f      	ldr	r2, [pc, #252]	; (405e90 <show_chassis_sysErr+0x294>)
  405d94:	461c      	mov	r4, r3
  405d96:	4615      	mov	r5, r2
  405d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405da0:	e895 0003 	ldmia.w	r5, {r0, r1}
  405da4:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405da8:	2300      	movs	r3, #0
  405daa:	65bb      	str	r3, [r7, #88]	; 0x58
  405dac:	e02a      	b.n	405e04 <show_chassis_sysErr+0x208>
	{
		if ((sysErr.ledBrdSerialIdCsum & BIT(i)) == SE_FAIL)
  405dae:	4b30      	ldr	r3, [pc, #192]	; (405e70 <show_chassis_sysErr+0x274>)
  405db0:	7b1b      	ldrb	r3, [r3, #12]
  405db2:	4619      	mov	r1, r3
  405db4:	2201      	movs	r2, #1
  405db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405db8:	fa02 f303 	lsl.w	r3, r2, r3
  405dbc:	400b      	ands	r3, r1
  405dbe:	2b01      	cmp	r3, #1
  405dc0:	d110      	bne.n	405de4 <show_chassis_sysErr+0x1e8>
		{
			strcat(str, "F ");
  405dc2:	1d3b      	adds	r3, r7, #4
  405dc4:	4618      	mov	r0, r3
  405dc6:	4b2b      	ldr	r3, [pc, #172]	; (405e74 <show_chassis_sysErr+0x278>)
  405dc8:	4798      	blx	r3
  405dca:	4603      	mov	r3, r0
  405dcc:	461a      	mov	r2, r3
  405dce:	1d3b      	adds	r3, r7, #4
  405dd0:	4413      	add	r3, r2
  405dd2:	4a29      	ldr	r2, [pc, #164]	; (405e78 <show_chassis_sysErr+0x27c>)
  405dd4:	8811      	ldrh	r1, [r2, #0]
  405dd6:	7892      	ldrb	r2, [r2, #2]
  405dd8:	8019      	strh	r1, [r3, #0]
  405dda:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  405ddc:	4b2b      	ldr	r3, [pc, #172]	; (405e8c <show_chassis_sysErr+0x290>)
  405dde:	2207      	movs	r2, #7
  405de0:	701a      	strb	r2, [r3, #0]
  405de2:	e00c      	b.n	405dfe <show_chassis_sysErr+0x202>
		}
		else
		{
			strcat(str, "P ");
  405de4:	1d3b      	adds	r3, r7, #4
  405de6:	4618      	mov	r0, r3
  405de8:	4b22      	ldr	r3, [pc, #136]	; (405e74 <show_chassis_sysErr+0x278>)
  405dea:	4798      	blx	r3
  405dec:	4603      	mov	r3, r0
  405dee:	461a      	mov	r2, r3
  405df0:	1d3b      	adds	r3, r7, #4
  405df2:	4413      	add	r3, r2
  405df4:	4a21      	ldr	r2, [pc, #132]	; (405e7c <show_chassis_sysErr+0x280>)
  405df6:	8811      	ldrh	r1, [r2, #0]
  405df8:	7892      	ldrb	r2, [r2, #2]
  405dfa:	8019      	strh	r1, [r3, #0]
  405dfc:	709a      	strb	r2, [r3, #2]
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405e00:	3301      	adds	r3, #1
  405e02:	65bb      	str	r3, [r7, #88]	; 0x58
  405e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405e06:	2b04      	cmp	r3, #4
  405e08:	ddd1      	ble.n	405dae <show_chassis_sysErr+0x1b2>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  405e0a:	1d3b      	adds	r3, r7, #4
  405e0c:	4618      	mov	r0, r3
  405e0e:	4b16      	ldr	r3, [pc, #88]	; (405e68 <show_chassis_sysErr+0x26c>)
  405e10:	4798      	blx	r3
	print_ecdbg("\r\n");
  405e12:	481b      	ldr	r0, [pc, #108]	; (405e80 <show_chassis_sysErr+0x284>)
  405e14:	4b14      	ldr	r3, [pc, #80]	; (405e68 <show_chassis_sysErr+0x26c>)
  405e16:	4798      	blx	r3
	

/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
  405e18:	1d3b      	adds	r3, r7, #4
  405e1a:	4a1e      	ldr	r2, [pc, #120]	; (405e94 <show_chassis_sysErr+0x298>)
  405e1c:	461c      	mov	r4, r3
  405e1e:	4615      	mov	r5, r2
  405e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405e28:	e895 0003 	ldmia.w	r5, {r0, r1}
  405e2c:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405e30:	2300      	movs	r3, #0
  405e32:	657b      	str	r3, [r7, #84]	; 0x54
  405e34:	e042      	b.n	405ebc <show_chassis_sysErr+0x2c0>
	{
		if (ledBrdSide[i].maxUsageReached)
  405e36:	4918      	ldr	r1, [pc, #96]	; (405e98 <show_chassis_sysErr+0x29c>)
  405e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405e3a:	4613      	mov	r3, r2
  405e3c:	009b      	lsls	r3, r3, #2
  405e3e:	4413      	add	r3, r2
  405e40:	440b      	add	r3, r1
  405e42:	789b      	ldrb	r3, [r3, #2]
  405e44:	2b00      	cmp	r3, #0
  405e46:	d029      	beq.n	405e9c <show_chassis_sysErr+0x2a0>
		{
			strcat(str, "F ");
  405e48:	1d3b      	adds	r3, r7, #4
  405e4a:	4618      	mov	r0, r3
  405e4c:	4b09      	ldr	r3, [pc, #36]	; (405e74 <show_chassis_sysErr+0x278>)
  405e4e:	4798      	blx	r3
  405e50:	4603      	mov	r3, r0
  405e52:	461a      	mov	r2, r3
  405e54:	1d3b      	adds	r3, r7, #4
  405e56:	4413      	add	r3, r2
  405e58:	4a07      	ldr	r2, [pc, #28]	; (405e78 <show_chassis_sysErr+0x27c>)
  405e5a:	8811      	ldrh	r1, [r2, #0]
  405e5c:	7892      	ldrb	r2, [r2, #2]
  405e5e:	8019      	strh	r1, [r3, #0]
  405e60:	709a      	strb	r2, [r3, #2]
  405e62:	e028      	b.n	405eb6 <show_chassis_sysErr+0x2ba>
  405e64:	0040ca90 	.word	0x0040ca90
  405e68:	004026b1 	.word	0x004026b1
  405e6c:	0040caac 	.word	0x0040caac
  405e70:	204016b4 	.word	0x204016b4
  405e74:	00407771 	.word	0x00407771
  405e78:	0040cad4 	.word	0x0040cad4
  405e7c:	0040cad8 	.word	0x0040cad8
  405e80:	0040c61c 	.word	0x0040c61c
  405e84:	0040cadc 	.word	0x0040cadc
  405e88:	0040cb04 	.word	0x0040cb04
  405e8c:	204009b9 	.word	0x204009b9
  405e90:	0040cb2c 	.word	0x0040cb2c
  405e94:	0040cb54 	.word	0x0040cb54
  405e98:	204016c8 	.word	0x204016c8
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str, "P ");
  405e9c:	1d3b      	adds	r3, r7, #4
  405e9e:	4618      	mov	r0, r3
  405ea0:	4b27      	ldr	r3, [pc, #156]	; (405f40 <show_chassis_sysErr+0x344>)
  405ea2:	4798      	blx	r3
  405ea4:	4603      	mov	r3, r0
  405ea6:	461a      	mov	r2, r3
  405ea8:	1d3b      	adds	r3, r7, #4
  405eaa:	4413      	add	r3, r2
  405eac:	4a25      	ldr	r2, [pc, #148]	; (405f44 <show_chassis_sysErr+0x348>)
  405eae:	8811      	ldrh	r1, [r2, #0]
  405eb0:	7892      	ldrb	r2, [r2, #2]
  405eb2:	8019      	strh	r1, [r3, #0]
  405eb4:	709a      	strb	r2, [r3, #2]
/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405eb8:	3301      	adds	r3, #1
  405eba:	657b      	str	r3, [r7, #84]	; 0x54
  405ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405ebe:	2b07      	cmp	r3, #7
  405ec0:	ddb9      	ble.n	405e36 <show_chassis_sysErr+0x23a>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  405ec2:	1d3b      	adds	r3, r7, #4
  405ec4:	4618      	mov	r0, r3
  405ec6:	4b20      	ldr	r3, [pc, #128]	; (405f48 <show_chassis_sysErr+0x34c>)
  405ec8:	4798      	blx	r3
	print_ecdbg("\r\n");
  405eca:	4820      	ldr	r0, [pc, #128]	; (405f4c <show_chassis_sysErr+0x350>)
  405ecc:	4b1e      	ldr	r3, [pc, #120]	; (405f48 <show_chassis_sysErr+0x34c>)
  405ece:	4798      	blx	r3

/*
 * Usage Struct Full
 */

	sprintf(str, "Usage Struct Open Slots                ");
  405ed0:	1d3b      	adds	r3, r7, #4
  405ed2:	4a1f      	ldr	r2, [pc, #124]	; (405f50 <show_chassis_sysErr+0x354>)
  405ed4:	461c      	mov	r4, r3
  405ed6:	4615      	mov	r5, r2
  405ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
  405ee4:	e884 0003 	stmia.w	r4, {r0, r1}
	if (sysErr.usageStructsFull == SE_FAIL)
  405ee8:	4b1a      	ldr	r3, [pc, #104]	; (405f54 <show_chassis_sysErr+0x358>)
  405eea:	7b9b      	ldrb	r3, [r3, #14]
  405eec:	2b01      	cmp	r3, #1
  405eee:	d110      	bne.n	405f12 <show_chassis_sysErr+0x316>
	{
		strcat(str, "F \r\n");
  405ef0:	1d3b      	adds	r3, r7, #4
  405ef2:	4618      	mov	r0, r3
  405ef4:	4b12      	ldr	r3, [pc, #72]	; (405f40 <show_chassis_sysErr+0x344>)
  405ef6:	4798      	blx	r3
  405ef8:	4603      	mov	r3, r0
  405efa:	461a      	mov	r2, r3
  405efc:	1d3b      	adds	r3, r7, #4
  405efe:	4413      	add	r3, r2
  405f00:	4a15      	ldr	r2, [pc, #84]	; (405f58 <show_chassis_sysErr+0x35c>)
  405f02:	6810      	ldr	r0, [r2, #0]
  405f04:	6018      	str	r0, [r3, #0]
  405f06:	7912      	ldrb	r2, [r2, #4]
  405f08:	711a      	strb	r2, [r3, #4]
		electroclaveState = STATE_CHASSIS_ERROR;
  405f0a:	4b14      	ldr	r3, [pc, #80]	; (405f5c <show_chassis_sysErr+0x360>)
  405f0c:	2207      	movs	r2, #7
  405f0e:	701a      	strb	r2, [r3, #0]
  405f10:	e00c      	b.n	405f2c <show_chassis_sysErr+0x330>
	}
	else
	{
		strcat(str, "P \r\n");
  405f12:	1d3b      	adds	r3, r7, #4
  405f14:	4618      	mov	r0, r3
  405f16:	4b0a      	ldr	r3, [pc, #40]	; (405f40 <show_chassis_sysErr+0x344>)
  405f18:	4798      	blx	r3
  405f1a:	4603      	mov	r3, r0
  405f1c:	461a      	mov	r2, r3
  405f1e:	1d3b      	adds	r3, r7, #4
  405f20:	4413      	add	r3, r2
  405f22:	4a0f      	ldr	r2, [pc, #60]	; (405f60 <show_chassis_sysErr+0x364>)
  405f24:	6810      	ldr	r0, [r2, #0]
  405f26:	6018      	str	r0, [r3, #0]
  405f28:	7912      	ldrb	r2, [r2, #4]
  405f2a:	711a      	strb	r2, [r3, #4]
	}
	
	print_ecdbg(str);
  405f2c:	1d3b      	adds	r3, r7, #4
  405f2e:	4618      	mov	r0, r3
  405f30:	4b05      	ldr	r3, [pc, #20]	; (405f48 <show_chassis_sysErr+0x34c>)
  405f32:	4798      	blx	r3
	print_ecdbg("\r\n");
  405f34:	4805      	ldr	r0, [pc, #20]	; (405f4c <show_chassis_sysErr+0x350>)
  405f36:	4b04      	ldr	r3, [pc, #16]	; (405f48 <show_chassis_sysErr+0x34c>)
  405f38:	4798      	blx	r3

}
  405f3a:	3768      	adds	r7, #104	; 0x68
  405f3c:	46bd      	mov	sp, r7
  405f3e:	bdb0      	pop	{r4, r5, r7, pc}
  405f40:	00407771 	.word	0x00407771
  405f44:	0040cad8 	.word	0x0040cad8
  405f48:	004026b1 	.word	0x004026b1
  405f4c:	0040c61c 	.word	0x0040c61c
  405f50:	0040cb7c 	.word	0x0040cb7c
  405f54:	204016b4 	.word	0x204016b4
  405f58:	0040cba4 	.word	0x0040cba4
  405f5c:	204009b9 	.word	0x204009b9
  405f60:	0040cbac 	.word	0x0040cbac

00405f64 <show_chassis_all_LED_boards>:

void show_chassis_all_LED_boards(void);
void show_chassis_all_LED_boards(void)
{
  405f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f66:	b09d      	sub	sp, #116	; 0x74
  405f68:	af06      	add	r7, sp, #24
	char str[80];
	int i = 0;
  405f6a:	2300      	movs	r3, #0
  405f6c:	657b      	str	r3, [r7, #84]	; 0x54

	print_ecdbg("\r\n***LED BOARDS MASTER LIST***\r\n\r\n");
  405f6e:	483a      	ldr	r0, [pc, #232]	; (406058 <show_chassis_all_LED_boards+0xf4>)
  405f70:	4b3a      	ldr	r3, [pc, #232]	; (40605c <show_chassis_all_LED_boards+0xf8>)
  405f72:	4798      	blx	r3
	
	while(1)
	{
		if (sf[i].slotFilled)
  405f74:	4a3a      	ldr	r2, [pc, #232]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405f78:	00db      	lsls	r3, r3, #3
  405f7a:	4413      	add	r3, r2
  405f7c:	799b      	ldrb	r3, [r3, #6]
  405f7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  405f82:	b2db      	uxtb	r3, r3
  405f84:	2b00      	cmp	r3, #0
  405f86:	d05c      	beq.n	406042 <show_chassis_all_LED_boards+0xde>
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405f88:	4a35      	ldr	r2, [pc, #212]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405f8c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405f90:	461e      	mov	r6, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405f92:	4a33      	ldr	r2, [pc, #204]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405f96:	00db      	lsls	r3, r3, #3
  405f98:	4413      	add	r3, r2
  405f9a:	785b      	ldrb	r3, [r3, #1]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405f9c:	461d      	mov	r5, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405f9e:	4a30      	ldr	r2, [pc, #192]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405fa2:	00db      	lsls	r3, r3, #3
  405fa4:	4413      	add	r3, r2
  405fa6:	789b      	ldrb	r3, [r3, #2]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405fa8:	461c      	mov	r4, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405faa:	4a2d      	ldr	r2, [pc, #180]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405fae:	00db      	lsls	r3, r3, #3
  405fb0:	4413      	add	r3, r2
  405fb2:	78db      	ldrb	r3, [r3, #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405fb4:	4618      	mov	r0, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405fb6:	4a2a      	ldr	r2, [pc, #168]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405fba:	00db      	lsls	r3, r3, #3
  405fbc:	4413      	add	r3, r2
  405fbe:	791b      	ldrb	r3, [r3, #4]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405fc0:	4619      	mov	r1, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  405fc2:	4a27      	ldr	r2, [pc, #156]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405fc6:	00db      	lsls	r3, r3, #3
  405fc8:	4413      	add	r3, r2
  405fca:	795b      	ldrb	r3, [r3, #5]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  405fcc:	461a      	mov	r2, r3
  405fce:	1d3b      	adds	r3, r7, #4
  405fd0:	9500      	str	r5, [sp, #0]
  405fd2:	9401      	str	r4, [sp, #4]
  405fd4:	9002      	str	r0, [sp, #8]
  405fd6:	9103      	str	r1, [sp, #12]
  405fd8:	9204      	str	r2, [sp, #16]
  405fda:	4618      	mov	r0, r3
  405fdc:	4921      	ldr	r1, [pc, #132]	; (406064 <show_chassis_all_LED_boards+0x100>)
  405fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405fe0:	4633      	mov	r3, r6
  405fe2:	4c21      	ldr	r4, [pc, #132]	; (406068 <show_chassis_all_LED_boards+0x104>)
  405fe4:	47a0      	blx	r4
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
			
			if (sf[i].top_botn)
  405fe6:	4a1e      	ldr	r2, [pc, #120]	; (406060 <show_chassis_all_LED_boards+0xfc>)
  405fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405fea:	00db      	lsls	r3, r3, #3
  405fec:	4413      	add	r3, r2
  405fee:	799b      	ldrb	r3, [r3, #6]
  405ff0:	f3c3 0300 	ubfx	r3, r3, #0, #1
  405ff4:	b2db      	uxtb	r3, r3
  405ff6:	2b00      	cmp	r3, #0
  405ff8:	d00f      	beq.n	40601a <show_chassis_all_LED_boards+0xb6>
			{
				strcat(str, " TOP\r\n");
  405ffa:	1d3b      	adds	r3, r7, #4
  405ffc:	4618      	mov	r0, r3
  405ffe:	4b1b      	ldr	r3, [pc, #108]	; (40606c <show_chassis_all_LED_boards+0x108>)
  406000:	4798      	blx	r3
  406002:	4603      	mov	r3, r0
  406004:	461a      	mov	r2, r3
  406006:	1d3b      	adds	r3, r7, #4
  406008:	4413      	add	r3, r2
  40600a:	4a19      	ldr	r2, [pc, #100]	; (406070 <show_chassis_all_LED_boards+0x10c>)
  40600c:	6810      	ldr	r0, [r2, #0]
  40600e:	6018      	str	r0, [r3, #0]
  406010:	8891      	ldrh	r1, [r2, #4]
  406012:	7992      	ldrb	r2, [r2, #6]
  406014:	8099      	strh	r1, [r3, #4]
  406016:	719a      	strb	r2, [r3, #6]
  406018:	e00e      	b.n	406038 <show_chassis_all_LED_boards+0xd4>
			}
			else
			{
				strcat(str, " BOT\r\n");
  40601a:	1d3b      	adds	r3, r7, #4
  40601c:	4618      	mov	r0, r3
  40601e:	4b13      	ldr	r3, [pc, #76]	; (40606c <show_chassis_all_LED_boards+0x108>)
  406020:	4798      	blx	r3
  406022:	4603      	mov	r3, r0
  406024:	461a      	mov	r2, r3
  406026:	1d3b      	adds	r3, r7, #4
  406028:	4413      	add	r3, r2
  40602a:	4a12      	ldr	r2, [pc, #72]	; (406074 <show_chassis_all_LED_boards+0x110>)
  40602c:	6810      	ldr	r0, [r2, #0]
  40602e:	6018      	str	r0, [r3, #0]
  406030:	8891      	ldrh	r1, [r2, #4]
  406032:	7992      	ldrb	r2, [r2, #6]
  406034:	8099      	strh	r1, [r3, #4]
  406036:	719a      	strb	r2, [r3, #6]
			}
			
			print_ecdbg(str);
  406038:	1d3b      	adds	r3, r7, #4
  40603a:	4618      	mov	r0, r3
  40603c:	4b07      	ldr	r3, [pc, #28]	; (40605c <show_chassis_all_LED_boards+0xf8>)
  40603e:	4798      	blx	r3
  406040:	e000      	b.n	406044 <show_chassis_all_LED_boards+0xe0>
		}
		else
		{
			break; //LED boards are stored contiguously, so if we hit a blank spot we are done with the entries in the list
  406042:	e003      	b.n	40604c <show_chassis_all_LED_boards+0xe8>
		}
		i++;
  406044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406046:	3301      	adds	r3, #1
  406048:	657b      	str	r3, [r7, #84]	; 0x54
		
	}
  40604a:	e793      	b.n	405f74 <show_chassis_all_LED_boards+0x10>
	
	print_ecdbg("\r\n\r\n");
  40604c:	480a      	ldr	r0, [pc, #40]	; (406078 <show_chassis_all_LED_boards+0x114>)
  40604e:	4b03      	ldr	r3, [pc, #12]	; (40605c <show_chassis_all_LED_boards+0xf8>)
  406050:	4798      	blx	r3

}
  406052:	375c      	adds	r7, #92	; 0x5c
  406054:	46bd      	mov	sp, r7
  406056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406058:	0040cbb4 	.word	0x0040cbb4
  40605c:	004026b1 	.word	0x004026b1
  406060:	20401344 	.word	0x20401344
  406064:	0040cbd8 	.word	0x0040cbd8
  406068:	00407725 	.word	0x00407725
  40606c:	00407771 	.word	0x00407771
  406070:	0040cbf8 	.word	0x0040cbf8
  406074:	0040cc00 	.word	0x0040cc00
  406078:	0040cc08 	.word	0x0040cc08

0040607c <show_help_and_prompt>:

void show_help_and_prompt(void);
void show_help_and_prompt(void)
{
  40607c:	b580      	push	{r7, lr}
  40607e:	af00      	add	r7, sp, #0
	print_ecdbg("Type 'H' for help.\r\n\r\n");
  406080:	4801      	ldr	r0, [pc, #4]	; (406088 <show_help_and_prompt+0xc>)
  406082:	4b02      	ldr	r3, [pc, #8]	; (40608c <show_help_and_prompt+0x10>)
  406084:	4798      	blx	r3
}
  406086:	bd80      	pop	{r7, pc}
  406088:	0040cc10 	.word	0x0040cc10
  40608c:	004026b1 	.word	0x004026b1

00406090 <service_ecdbg_input>:
char cmd[20];
unsigned char cmdIdx = 0;

void service_ecdbg_input(void);
void service_ecdbg_input(void)
{
  406090:	b580      	push	{r7, lr}
  406092:	b084      	sub	sp, #16
  406094:	af00      	add	r7, sp, #0
	int rx_char;
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;
  406096:	2300      	movs	r3, #0
  406098:	72fb      	strb	r3, [r7, #11]
	
	
	if (usart_is_rx_ready(BOARD_USART)) {
  40609a:	489e      	ldr	r0, [pc, #632]	; (406314 <service_ecdbg_input+0x284>)
  40609c:	4b9e      	ldr	r3, [pc, #632]	; (406318 <service_ecdbg_input+0x288>)
  40609e:	4798      	blx	r3
  4060a0:	4603      	mov	r3, r0
  4060a2:	2b00      	cmp	r3, #0
  4060a4:	d009      	beq.n	4060ba <service_ecdbg_input+0x2a>
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
  4060a6:	1d3b      	adds	r3, r7, #4
  4060a8:	489a      	ldr	r0, [pc, #616]	; (406314 <service_ecdbg_input+0x284>)
  4060aa:	4619      	mov	r1, r3
  4060ac:	4b9b      	ldr	r3, [pc, #620]	; (40631c <service_ecdbg_input+0x28c>)
  4060ae:	4798      	blx	r3
	{
		return;
	}


	if (rx_char == USART_FAILURE)
  4060b0:	687b      	ldr	r3, [r7, #4]
  4060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4060b6:	d102      	bne.n	4060be <service_ecdbg_input+0x2e>
  4060b8:	e000      	b.n	4060bc <service_ecdbg_input+0x2c>
	if (usart_is_rx_ready(BOARD_USART)) {
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
	}
	else
	{
		return;
  4060ba:	e1d3      	b.n	406464 <service_ecdbg_input+0x3d4>


	if (rx_char == USART_FAILURE)
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
  4060bc:	e1d2      	b.n	406464 <service_ecdbg_input+0x3d4>
	}
	if (rx_char == '\x03')
  4060be:	687b      	ldr	r3, [r7, #4]
  4060c0:	2b03      	cmp	r3, #3
  4060c2:	d100      	bne.n	4060c6 <service_ecdbg_input+0x36>
	{
		return;
  4060c4:	e1ce      	b.n	406464 <service_ecdbg_input+0x3d4>
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
  4060c6:	687b      	ldr	r3, [r7, #4]
  4060c8:	2b09      	cmp	r3, #9
  4060ca:	dd02      	ble.n	4060d2 <service_ecdbg_input+0x42>
  4060cc:	687b      	ldr	r3, [r7, #4]
  4060ce:	2b7a      	cmp	r3, #122	; 0x7a
  4060d0:	dd00      	ble.n	4060d4 <service_ecdbg_input+0x44>
	{
		return; //completely out of range, ignore
  4060d2:	e1c7      	b.n	406464 <service_ecdbg_input+0x3d4>
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  4060d4:	687b      	ldr	r3, [r7, #4]
  4060d6:	2b0d      	cmp	r3, #13
  4060d8:	d017      	beq.n	40610a <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
  4060da:	687b      	ldr	r3, [r7, #4]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  4060dc:	2b0a      	cmp	r3, #10
  4060de:	d014      	beq.n	40610a <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  4060e0:	687b      	ldr	r3, [r7, #4]
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
  4060e2:	2b20      	cmp	r3, #32
  4060e4:	d011      	beq.n	40610a <service_ecdbg_input+0x7a>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  4060e6:	687b      	ldr	r3, [r7, #4]
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  4060e8:	2b2f      	cmp	r3, #47	; 0x2f
  4060ea:	dd02      	ble.n	4060f2 <service_ecdbg_input+0x62>
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  4060ec:	687b      	ldr	r3, [r7, #4]
  4060ee:	2b39      	cmp	r3, #57	; 0x39
  4060f0:	dd0b      	ble.n	40610a <service_ecdbg_input+0x7a>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  4060f2:	687b      	ldr	r3, [r7, #4]
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  4060f4:	2b40      	cmp	r3, #64	; 0x40
  4060f6:	dd02      	ble.n	4060fe <service_ecdbg_input+0x6e>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  4060f8:	687b      	ldr	r3, [r7, #4]
  4060fa:	2b5a      	cmp	r3, #90	; 0x5a
  4060fc:	dd05      	ble.n	40610a <service_ecdbg_input+0x7a>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  4060fe:	687b      	ldr	r3, [r7, #4]
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  406100:	2b60      	cmp	r3, #96	; 0x60
  406102:	dd1c      	ble.n	40613e <service_ecdbg_input+0xae>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  406104:	687b      	ldr	r3, [r7, #4]
  406106:	2b7a      	cmp	r3, #122	; 0x7a
  406108:	dc19      	bgt.n	40613e <service_ecdbg_input+0xae>
	{
		if (rx_char == 0x50)
  40610a:	687b      	ldr	r3, [r7, #4]
  40610c:	2b50      	cmp	r3, #80	; 0x50
  40610e:	d100      	bne.n	406112 <service_ecdbg_input+0x82>
		{
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
  406110:	e1a8      	b.n	406464 <service_ecdbg_input+0x3d4>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
  406112:	bf00      	nop
	{
		return;
	}


	cmd[cmdIdx++] = rx_char;
  406114:	4b82      	ldr	r3, [pc, #520]	; (406320 <service_ecdbg_input+0x290>)
  406116:	781b      	ldrb	r3, [r3, #0]
  406118:	1c5a      	adds	r2, r3, #1
  40611a:	b2d1      	uxtb	r1, r2
  40611c:	4a80      	ldr	r2, [pc, #512]	; (406320 <service_ecdbg_input+0x290>)
  40611e:	7011      	strb	r1, [r2, #0]
  406120:	461a      	mov	r2, r3
  406122:	687b      	ldr	r3, [r7, #4]
  406124:	b2d9      	uxtb	r1, r3
  406126:	4b7f      	ldr	r3, [pc, #508]	; (406324 <service_ecdbg_input+0x294>)
  406128:	5499      	strb	r1, [r3, r2]
	
	putchar(rx_char);
  40612a:	4b7f      	ldr	r3, [pc, #508]	; (406328 <service_ecdbg_input+0x298>)
  40612c:	681b      	ldr	r3, [r3, #0]
  40612e:	689b      	ldr	r3, [r3, #8]
  406130:	689a      	ldr	r2, [r3, #8]
  406132:	3a01      	subs	r2, #1
  406134:	609a      	str	r2, [r3, #8]
  406136:	689b      	ldr	r3, [r3, #8]
  406138:	2b00      	cmp	r3, #0
  40613a:	da37      	bge.n	4061ac <service_ecdbg_input+0x11c>
  40613c:	e000      	b.n	406140 <service_ecdbg_input+0xb0>
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
		}
	}
	else
	{
		return;
  40613e:	e191      	b.n	406464 <service_ecdbg_input+0x3d4>
	}


	cmd[cmdIdx++] = rx_char;
	
	putchar(rx_char);
  406140:	4b79      	ldr	r3, [pc, #484]	; (406328 <service_ecdbg_input+0x298>)
  406142:	681b      	ldr	r3, [r3, #0]
  406144:	689b      	ldr	r3, [r3, #8]
  406146:	689a      	ldr	r2, [r3, #8]
  406148:	4b77      	ldr	r3, [pc, #476]	; (406328 <service_ecdbg_input+0x298>)
  40614a:	681b      	ldr	r3, [r3, #0]
  40614c:	689b      	ldr	r3, [r3, #8]
  40614e:	699b      	ldr	r3, [r3, #24]
  406150:	429a      	cmp	r2, r3
  406152:	db1f      	blt.n	406194 <service_ecdbg_input+0x104>
  406154:	4b74      	ldr	r3, [pc, #464]	; (406328 <service_ecdbg_input+0x298>)
  406156:	681b      	ldr	r3, [r3, #0]
  406158:	689b      	ldr	r3, [r3, #8]
  40615a:	681b      	ldr	r3, [r3, #0]
  40615c:	687a      	ldr	r2, [r7, #4]
  40615e:	b2d2      	uxtb	r2, r2
  406160:	701a      	strb	r2, [r3, #0]
  406162:	4b71      	ldr	r3, [pc, #452]	; (406328 <service_ecdbg_input+0x298>)
  406164:	681b      	ldr	r3, [r3, #0]
  406166:	689b      	ldr	r3, [r3, #8]
  406168:	681b      	ldr	r3, [r3, #0]
  40616a:	781b      	ldrb	r3, [r3, #0]
  40616c:	2b0a      	cmp	r3, #10
  40616e:	d006      	beq.n	40617e <service_ecdbg_input+0xee>
  406170:	4b6d      	ldr	r3, [pc, #436]	; (406328 <service_ecdbg_input+0x298>)
  406172:	681b      	ldr	r3, [r3, #0]
  406174:	689b      	ldr	r3, [r3, #8]
  406176:	681a      	ldr	r2, [r3, #0]
  406178:	3201      	adds	r2, #1
  40617a:	601a      	str	r2, [r3, #0]
  40617c:	e023      	b.n	4061c6 <service_ecdbg_input+0x136>
  40617e:	4b6a      	ldr	r3, [pc, #424]	; (406328 <service_ecdbg_input+0x298>)
  406180:	681a      	ldr	r2, [r3, #0]
  406182:	4b69      	ldr	r3, [pc, #420]	; (406328 <service_ecdbg_input+0x298>)
  406184:	681b      	ldr	r3, [r3, #0]
  406186:	689b      	ldr	r3, [r3, #8]
  406188:	4610      	mov	r0, r2
  40618a:	210a      	movs	r1, #10
  40618c:	461a      	mov	r2, r3
  40618e:	4b67      	ldr	r3, [pc, #412]	; (40632c <service_ecdbg_input+0x29c>)
  406190:	4798      	blx	r3
  406192:	e018      	b.n	4061c6 <service_ecdbg_input+0x136>
  406194:	4b64      	ldr	r3, [pc, #400]	; (406328 <service_ecdbg_input+0x298>)
  406196:	6819      	ldr	r1, [r3, #0]
  406198:	687a      	ldr	r2, [r7, #4]
  40619a:	4b63      	ldr	r3, [pc, #396]	; (406328 <service_ecdbg_input+0x298>)
  40619c:	681b      	ldr	r3, [r3, #0]
  40619e:	689b      	ldr	r3, [r3, #8]
  4061a0:	4608      	mov	r0, r1
  4061a2:	4611      	mov	r1, r2
  4061a4:	461a      	mov	r2, r3
  4061a6:	4b61      	ldr	r3, [pc, #388]	; (40632c <service_ecdbg_input+0x29c>)
  4061a8:	4798      	blx	r3
  4061aa:	e00c      	b.n	4061c6 <service_ecdbg_input+0x136>
  4061ac:	4b5e      	ldr	r3, [pc, #376]	; (406328 <service_ecdbg_input+0x298>)
  4061ae:	681b      	ldr	r3, [r3, #0]
  4061b0:	689b      	ldr	r3, [r3, #8]
  4061b2:	681b      	ldr	r3, [r3, #0]
  4061b4:	687a      	ldr	r2, [r7, #4]
  4061b6:	b2d2      	uxtb	r2, r2
  4061b8:	701a      	strb	r2, [r3, #0]
  4061ba:	4b5b      	ldr	r3, [pc, #364]	; (406328 <service_ecdbg_input+0x298>)
  4061bc:	681b      	ldr	r3, [r3, #0]
  4061be:	689b      	ldr	r3, [r3, #8]
  4061c0:	681a      	ldr	r2, [r3, #0]
  4061c2:	3201      	adds	r2, #1
  4061c4:	601a      	str	r2, [r3, #0]
	if (rx_char == '\r')
  4061c6:	687b      	ldr	r3, [r7, #4]
  4061c8:	2b0d      	cmp	r3, #13
  4061ca:	f040 814b 	bne.w	406464 <service_ecdbg_input+0x3d4>
	{ 
		if (cmdIdx == 2)
  4061ce:	4b54      	ldr	r3, [pc, #336]	; (406320 <service_ecdbg_input+0x290>)
  4061d0:	781b      	ldrb	r3, [r3, #0]
  4061d2:	2b02      	cmp	r3, #2
  4061d4:	f040 80d0 	bne.w	406378 <service_ecdbg_input+0x2e8>
		{
			switch(cmd[0])
  4061d8:	4b52      	ldr	r3, [pc, #328]	; (406324 <service_ecdbg_input+0x294>)
  4061da:	781b      	ldrb	r3, [r3, #0]
  4061dc:	3b44      	subs	r3, #68	; 0x44
  4061de:	2b2f      	cmp	r3, #47	; 0x2f
  4061e0:	f200 8139 	bhi.w	406456 <service_ecdbg_input+0x3c6>
  4061e4:	a201      	add	r2, pc, #4	; (adr r2, 4061ec <service_ecdbg_input+0x15c>)
  4061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4061ea:	bf00      	nop
  4061ec:	004062e5 	.word	0x004062e5
  4061f0:	00406457 	.word	0x00406457
  4061f4:	00406457 	.word	0x00406457
  4061f8:	00406457 	.word	0x00406457
  4061fc:	004062ad 	.word	0x004062ad
  406200:	00406457 	.word	0x00406457
  406204:	00406457 	.word	0x00406457
  406208:	00406457 	.word	0x00406457
  40620c:	00406457 	.word	0x00406457
  406210:	00406457 	.word	0x00406457
  406214:	00406457 	.word	0x00406457
  406218:	00406457 	.word	0x00406457
  40621c:	00406457 	.word	0x00406457
  406220:	00406457 	.word	0x00406457
  406224:	00406457 	.word	0x00406457
  406228:	004062fd 	.word	0x004062fd
  40622c:	00406457 	.word	0x00406457
  406230:	00406457 	.word	0x00406457
  406234:	00406457 	.word	0x00406457
  406238:	00406457 	.word	0x00406457
  40623c:	00406457 	.word	0x00406457
  406240:	00406457 	.word	0x00406457
  406244:	00406457 	.word	0x00406457
  406248:	00406457 	.word	0x00406457
  40624c:	00406457 	.word	0x00406457
  406250:	00406457 	.word	0x00406457
  406254:	00406457 	.word	0x00406457
  406258:	00406457 	.word	0x00406457
  40625c:	00406457 	.word	0x00406457
  406260:	00406457 	.word	0x00406457
  406264:	00406457 	.word	0x00406457
  406268:	00406457 	.word	0x00406457
  40626c:	004062e5 	.word	0x004062e5
  406270:	00406457 	.word	0x00406457
  406274:	00406457 	.word	0x00406457
  406278:	00406457 	.word	0x00406457
  40627c:	004062ad 	.word	0x004062ad
  406280:	00406457 	.word	0x00406457
  406284:	00406457 	.word	0x00406457
  406288:	00406457 	.word	0x00406457
  40628c:	00406457 	.word	0x00406457
  406290:	00406457 	.word	0x00406457
  406294:	00406457 	.word	0x00406457
  406298:	00406457 	.word	0x00406457
  40629c:	00406457 	.word	0x00406457
  4062a0:	00406457 	.word	0x00406457
  4062a4:	00406457 	.word	0x00406457
  4062a8:	004062fd 	.word	0x004062fd
			{
				case 'H':
				case 'h':
					print_ecdbg("\r\n**-----------------**\r\n");
  4062ac:	4820      	ldr	r0, [pc, #128]	; (406330 <service_ecdbg_input+0x2a0>)
  4062ae:	4b21      	ldr	r3, [pc, #132]	; (406334 <service_ecdbg_input+0x2a4>)
  4062b0:	4798      	blx	r3
					print_ecdbg("  Electroclave HELP\r\n");
  4062b2:	4821      	ldr	r0, [pc, #132]	; (406338 <service_ecdbg_input+0x2a8>)
  4062b4:	4b1f      	ldr	r3, [pc, #124]	; (406334 <service_ecdbg_input+0x2a4>)
  4062b6:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  4062b8:	4820      	ldr	r0, [pc, #128]	; (40633c <service_ecdbg_input+0x2ac>)
  4062ba:	4b1e      	ldr	r3, [pc, #120]	; (406334 <service_ecdbg_input+0x2a4>)
  4062bc:	4798      	blx	r3
					print_ecdbg("    H        - This help menu\r\n");
  4062be:	4820      	ldr	r0, [pc, #128]	; (406340 <service_ecdbg_input+0x2b0>)
  4062c0:	4b1c      	ldr	r3, [pc, #112]	; (406334 <service_ecdbg_input+0x2a4>)
  4062c2:	4798      	blx	r3
					print_ecdbg("    D        - Show current DTE setting\r\n");
  4062c4:	481f      	ldr	r0, [pc, #124]	; (406344 <service_ecdbg_input+0x2b4>)
  4062c6:	4b1b      	ldr	r3, [pc, #108]	; (406334 <service_ecdbg_input+0x2a4>)
  4062c8:	4798      	blx	r3
					print_ecdbg("    D  xx    - Change initial DTE to xx minutes where 2 >= xx >= 59.\r\n");
  4062ca:	481f      	ldr	r0, [pc, #124]	; (406348 <service_ecdbg_input+0x2b8>)
  4062cc:	4b19      	ldr	r3, [pc, #100]	; (406334 <service_ecdbg_input+0x2a4>)
  4062ce:	4798      	blx	r3
					print_ecdbg("    S        - System status\r\n");
  4062d0:	481e      	ldr	r0, [pc, #120]	; (40634c <service_ecdbg_input+0x2bc>)
  4062d2:	4b18      	ldr	r3, [pc, #96]	; (406334 <service_ecdbg_input+0x2a4>)
  4062d4:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  4062d6:	4819      	ldr	r0, [pc, #100]	; (40633c <service_ecdbg_input+0x2ac>)
  4062d8:	4b16      	ldr	r3, [pc, #88]	; (406334 <service_ecdbg_input+0x2a4>)
  4062da:	4798      	blx	r3
					print_ecdbg(">");
  4062dc:	481c      	ldr	r0, [pc, #112]	; (406350 <service_ecdbg_input+0x2c0>)
  4062de:	4b15      	ldr	r3, [pc, #84]	; (406334 <service_ecdbg_input+0x2a4>)
  4062e0:	4798      	blx	r3
					break;
  4062e2:	e016      	b.n	406312 <service_ecdbg_input+0x282>
				case 'D':
				case 'd':
					print_ecdbg("Initial DTE set to: ");
  4062e4:	481b      	ldr	r0, [pc, #108]	; (406354 <service_ecdbg_input+0x2c4>)
  4062e6:	4b13      	ldr	r3, [pc, #76]	; (406334 <service_ecdbg_input+0x2a4>)
  4062e8:	4798      	blx	r3
					print_ecdbg_num(c.initialDTE);
  4062ea:	4b1b      	ldr	r3, [pc, #108]	; (406358 <service_ecdbg_input+0x2c8>)
  4062ec:	781b      	ldrb	r3, [r3, #0]
  4062ee:	4618      	mov	r0, r3
  4062f0:	4b1a      	ldr	r3, [pc, #104]	; (40635c <service_ecdbg_input+0x2cc>)
  4062f2:	4798      	blx	r3
					print_ecdbg(" minutes.\r\n>");
  4062f4:	481a      	ldr	r0, [pc, #104]	; (406360 <service_ecdbg_input+0x2d0>)
  4062f6:	4b0f      	ldr	r3, [pc, #60]	; (406334 <service_ecdbg_input+0x2a4>)
  4062f8:	4798      	blx	r3
					break;
  4062fa:	e00a      	b.n	406312 <service_ecdbg_input+0x282>
				case 'S':
				case 's':
					show_sw_version();
  4062fc:	4b19      	ldr	r3, [pc, #100]	; (406364 <service_ecdbg_input+0x2d4>)
  4062fe:	4798      	blx	r3
					show_chassis_status_info();
  406300:	4b19      	ldr	r3, [pc, #100]	; (406368 <service_ecdbg_input+0x2d8>)
  406302:	4798      	blx	r3
					show_chassis_sysErr();
  406304:	4b19      	ldr	r3, [pc, #100]	; (40636c <service_ecdbg_input+0x2dc>)
  406306:	4798      	blx	r3
					show_chassis_all_LED_boards();
  406308:	4b19      	ldr	r3, [pc, #100]	; (406370 <service_ecdbg_input+0x2e0>)
  40630a:	4798      	blx	r3
					show_help_and_prompt();
  40630c:	4b19      	ldr	r3, [pc, #100]	; (406374 <service_ecdbg_input+0x2e4>)
  40630e:	4798      	blx	r3
					break;
  406310:	bf00      	nop
  406312:	e0a0      	b.n	406456 <service_ecdbg_input+0x3c6>
  406314:	40024000 	.word	0x40024000
  406318:	004022b5 	.word	0x004022b5
  40631c:	00402311 	.word	0x00402311
  406320:	204009d1 	.word	0x204009d1
  406324:	20401824 	.word	0x20401824
  406328:	204004c0 	.word	0x204004c0
  40632c:	00408cdd 	.word	0x00408cdd
  406330:	0040cc28 	.word	0x0040cc28
  406334:	004026b1 	.word	0x004026b1
  406338:	0040cc44 	.word	0x0040cc44
  40633c:	0040cc5c 	.word	0x0040cc5c
  406340:	0040cc74 	.word	0x0040cc74
  406344:	0040cc94 	.word	0x0040cc94
  406348:	0040ccc0 	.word	0x0040ccc0
  40634c:	0040cd08 	.word	0x0040cd08
  406350:	0040cd28 	.word	0x0040cd28
  406354:	0040cd2c 	.word	0x0040cd2c
  406358:	204016c4 	.word	0x204016c4
  40635c:	00404481 	.word	0x00404481
  406360:	0040cd44 	.word	0x0040cd44
  406364:	00405805 	.word	0x00405805
  406368:	0040582d 	.word	0x0040582d
  40636c:	00405bfd 	.word	0x00405bfd
  406370:	00405f65 	.word	0x00405f65
  406374:	0040607d 	.word	0x0040607d
			}
		}
		else if (cmd[1] == ' ')
  406378:	4b3c      	ldr	r3, [pc, #240]	; (40646c <service_ecdbg_input+0x3dc>)
  40637a:	785b      	ldrb	r3, [r3, #1]
  40637c:	2b20      	cmp	r3, #32
  40637e:	d16a      	bne.n	406456 <service_ecdbg_input+0x3c6>
		{
			if ((cmd[0] == 'D') || (cmd[0] == 'd'))
  406380:	4b3a      	ldr	r3, [pc, #232]	; (40646c <service_ecdbg_input+0x3dc>)
  406382:	781b      	ldrb	r3, [r3, #0]
  406384:	2b44      	cmp	r3, #68	; 0x44
  406386:	d003      	beq.n	406390 <service_ecdbg_input+0x300>
  406388:	4b38      	ldr	r3, [pc, #224]	; (40646c <service_ecdbg_input+0x3dc>)
  40638a:	781b      	ldrb	r3, [r3, #0]
  40638c:	2b64      	cmp	r3, #100	; 0x64
  40638e:	d162      	bne.n	406456 <service_ecdbg_input+0x3c6>
			{
				if (cmdIdx == 4)
  406390:	4b37      	ldr	r3, [pc, #220]	; (406470 <service_ecdbg_input+0x3e0>)
  406392:	781b      	ldrb	r3, [r3, #0]
  406394:	2b04      	cmp	r3, #4
  406396:	d111      	bne.n	4063bc <service_ecdbg_input+0x32c>
				{
					if (isdigit(cmd[2]))
  406398:	4b36      	ldr	r3, [pc, #216]	; (406474 <service_ecdbg_input+0x3e4>)
  40639a:	681a      	ldr	r2, [r3, #0]
  40639c:	4b33      	ldr	r3, [pc, #204]	; (40646c <service_ecdbg_input+0x3dc>)
  40639e:	789b      	ldrb	r3, [r3, #2]
  4063a0:	3301      	adds	r3, #1
  4063a2:	4413      	add	r3, r2
  4063a4:	781b      	ldrb	r3, [r3, #0]
  4063a6:	f003 0304 	and.w	r3, r3, #4
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	d032      	beq.n	406414 <service_ecdbg_input+0x384>
					{
						tmpNewDte = cmd[2] - 0x30;
  4063ae:	4b2f      	ldr	r3, [pc, #188]	; (40646c <service_ecdbg_input+0x3dc>)
  4063b0:	789b      	ldrb	r3, [r3, #2]
  4063b2:	3b30      	subs	r3, #48	; 0x30
  4063b4:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  4063b6:	2301      	movs	r3, #1
  4063b8:	72fb      	strb	r3, [r7, #11]
  4063ba:	e02b      	b.n	406414 <service_ecdbg_input+0x384>
					}					
				}
				else if (cmdIdx == 5)
  4063bc:	4b2c      	ldr	r3, [pc, #176]	; (406470 <service_ecdbg_input+0x3e0>)
  4063be:	781b      	ldrb	r3, [r3, #0]
  4063c0:	2b05      	cmp	r3, #5
  4063c2:	d127      	bne.n	406414 <service_ecdbg_input+0x384>
				{
					if (isdigit(cmd[2]) && (isdigit(cmd[3])))
  4063c4:	4b2b      	ldr	r3, [pc, #172]	; (406474 <service_ecdbg_input+0x3e4>)
  4063c6:	681a      	ldr	r2, [r3, #0]
  4063c8:	4b28      	ldr	r3, [pc, #160]	; (40646c <service_ecdbg_input+0x3dc>)
  4063ca:	789b      	ldrb	r3, [r3, #2]
  4063cc:	3301      	adds	r3, #1
  4063ce:	4413      	add	r3, r2
  4063d0:	781b      	ldrb	r3, [r3, #0]
  4063d2:	f003 0304 	and.w	r3, r3, #4
  4063d6:	2b00      	cmp	r3, #0
  4063d8:	d01c      	beq.n	406414 <service_ecdbg_input+0x384>
  4063da:	4b26      	ldr	r3, [pc, #152]	; (406474 <service_ecdbg_input+0x3e4>)
  4063dc:	681a      	ldr	r2, [r3, #0]
  4063de:	4b23      	ldr	r3, [pc, #140]	; (40646c <service_ecdbg_input+0x3dc>)
  4063e0:	78db      	ldrb	r3, [r3, #3]
  4063e2:	3301      	adds	r3, #1
  4063e4:	4413      	add	r3, r2
  4063e6:	781b      	ldrb	r3, [r3, #0]
  4063e8:	f003 0304 	and.w	r3, r3, #4
  4063ec:	2b00      	cmp	r3, #0
  4063ee:	d011      	beq.n	406414 <service_ecdbg_input+0x384>
					{
						tmpNewDte = (cmd[2]-0x30) * 10;
  4063f0:	4b1e      	ldr	r3, [pc, #120]	; (40646c <service_ecdbg_input+0x3dc>)
  4063f2:	789b      	ldrb	r3, [r3, #2]
  4063f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4063f8:	4613      	mov	r3, r2
  4063fa:	009b      	lsls	r3, r3, #2
  4063fc:	4413      	add	r3, r2
  4063fe:	005b      	lsls	r3, r3, #1
  406400:	60fb      	str	r3, [r7, #12]
						tmpNewDte += (cmd[3] - 0x30);
  406402:	4b1a      	ldr	r3, [pc, #104]	; (40646c <service_ecdbg_input+0x3dc>)
  406404:	78db      	ldrb	r3, [r3, #3]
  406406:	461a      	mov	r2, r3
  406408:	68fb      	ldr	r3, [r7, #12]
  40640a:	4413      	add	r3, r2
  40640c:	3b30      	subs	r3, #48	; 0x30
  40640e:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  406410:	2301      	movs	r3, #1
  406412:	72fb      	strb	r3, [r7, #11]
					}
				}
				if (tryToChangeDte)
  406414:	7afb      	ldrb	r3, [r7, #11]
  406416:	2b00      	cmp	r3, #0
  406418:	d01d      	beq.n	406456 <service_ecdbg_input+0x3c6>
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
  40641a:	68fb      	ldr	r3, [r7, #12]
  40641c:	2b3b      	cmp	r3, #59	; 0x3b
  40641e:	d814      	bhi.n	40644a <service_ecdbg_input+0x3ba>
  406420:	68fb      	ldr	r3, [r7, #12]
  406422:	2b01      	cmp	r3, #1
  406424:	d911      	bls.n	40644a <service_ecdbg_input+0x3ba>
					{
						print_ecdbg("Initial DTE now set to: ");
  406426:	4814      	ldr	r0, [pc, #80]	; (406478 <service_ecdbg_input+0x3e8>)
  406428:	4b14      	ldr	r3, [pc, #80]	; (40647c <service_ecdbg_input+0x3ec>)
  40642a:	4798      	blx	r3
						print_ecdbg_num(tmpNewDte);
  40642c:	68f8      	ldr	r0, [r7, #12]
  40642e:	4b14      	ldr	r3, [pc, #80]	; (406480 <service_ecdbg_input+0x3f0>)
  406430:	4798      	blx	r3
						print_ecdbg("\r\n>");
  406432:	4814      	ldr	r0, [pc, #80]	; (406484 <service_ecdbg_input+0x3f4>)
  406434:	4b11      	ldr	r3, [pc, #68]	; (40647c <service_ecdbg_input+0x3ec>)
  406436:	4798      	blx	r3
						
						c.initialDTE = tmpNewDte;
  406438:	68fb      	ldr	r3, [r7, #12]
  40643a:	b2da      	uxtb	r2, r3
  40643c:	4b12      	ldr	r3, [pc, #72]	; (406488 <service_ecdbg_input+0x3f8>)
  40643e:	701a      	strb	r2, [r3, #0]
						
						store_config();
  406440:	4b12      	ldr	r3, [pc, #72]	; (40648c <service_ecdbg_input+0x3fc>)
  406442:	4798      	blx	r3
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
  406444:	4b11      	ldr	r3, [pc, #68]	; (40648c <service_ecdbg_input+0x3fc>)
  406446:	4798      	blx	r3
  406448:	e005      	b.n	406456 <service_ecdbg_input+0x3c6>
						
					}
					else
					{
						print_ecdbg("Error. Initial DTE not modified. \r\n");
  40644a:	4811      	ldr	r0, [pc, #68]	; (406490 <service_ecdbg_input+0x400>)
  40644c:	4b0b      	ldr	r3, [pc, #44]	; (40647c <service_ecdbg_input+0x3ec>)
  40644e:	4798      	blx	r3
						print_ecdbg("Must be a value between 2 and 59.\r\n>");
  406450:	4810      	ldr	r0, [pc, #64]	; (406494 <service_ecdbg_input+0x404>)
  406452:	4b0a      	ldr	r3, [pc, #40]	; (40647c <service_ecdbg_input+0x3ec>)
  406454:	4798      	blx	r3
				}
			}
		}
		
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
  406456:	480b      	ldr	r0, [pc, #44]	; (406484 <service_ecdbg_input+0x3f4>)
  406458:	4b08      	ldr	r3, [pc, #32]	; (40647c <service_ecdbg_input+0x3ec>)
  40645a:	4798      	blx	r3
		cmdIdx = 0;
  40645c:	4b04      	ldr	r3, [pc, #16]	; (406470 <service_ecdbg_input+0x3e0>)
  40645e:	2200      	movs	r2, #0
  406460:	701a      	strb	r2, [r3, #0]
		return;
  406462:	bf00      	nop
	}
}
  406464:	3710      	adds	r7, #16
  406466:	46bd      	mov	sp, r7
  406468:	bd80      	pop	{r7, pc}
  40646a:	bf00      	nop
  40646c:	20401824 	.word	0x20401824
  406470:	204009d1 	.word	0x204009d1
  406474:	20400090 	.word	0x20400090
  406478:	0040cd54 	.word	0x0040cd54
  40647c:	004026b1 	.word	0x004026b1
  406480:	00404481 	.word	0x00404481
  406484:	0040cd70 	.word	0x0040cd70
  406488:	204016c4 	.word	0x204016c4
  40648c:	00405409 	.word	0x00405409
  406490:	0040cd74 	.word	0x0040cd74
  406494:	0040cd98 	.word	0x0040cd98

00406498 <main>:


/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void){
  406498:	b590      	push	{r4, r7, lr}
  40649a:	b099      	sub	sp, #100	; 0x64
  40649c:	af00      	add	r7, sp, #0
	static unsigned char displayIdx = 0;
	char mainStr[80];
	
	/* Initialize the SAM system. */
	sysclk_init();
  40649e:	4b91      	ldr	r3, [pc, #580]	; (4066e4 <main+0x24c>)
  4064a0:	4798      	blx	r3
	board_init();
  4064a2:	4b91      	ldr	r3, [pc, #580]	; (4066e8 <main+0x250>)
  4064a4:	4798      	blx	r3

	init_io();
  4064a6:	4b91      	ldr	r3, [pc, #580]	; (4066ec <main+0x254>)
  4064a8:	4798      	blx	r3
	
	/* Configure UART for blue scrolling display */
	configure_console();
  4064aa:	4b91      	ldr	r3, [pc, #580]	; (4066f0 <main+0x258>)
  4064ac:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  4064ae:	4b91      	ldr	r3, [pc, #580]	; (4066f4 <main+0x25c>)
  4064b0:	4798      	blx	r3

	/* 1ms tick. */
	configure_systick();
  4064b2:	4b91      	ldr	r3, [pc, #580]	; (4066f8 <main+0x260>)
  4064b4:	4798      	blx	r3

	init_pwm();
  4064b6:	4b91      	ldr	r3, [pc, #580]	; (4066fc <main+0x264>)
  4064b8:	4798      	blx	r3
	
	init_sysErr();
  4064ba:	4b91      	ldr	r3, [pc, #580]	; (406700 <main+0x268>)
  4064bc:	4798      	blx	r3
	
	init_shelf_n_ledBrd_structs();
  4064be:	4b91      	ldr	r3, [pc, #580]	; (406704 <main+0x26c>)
  4064c0:	4798      	blx	r3
	read_led_board_serial_ids();
  4064c2:	4b91      	ldr	r3, [pc, #580]	; (406708 <main+0x270>)
  4064c4:	4798      	blx	r3
		
	twi_init();
  4064c6:	4b91      	ldr	r3, [pc, #580]	; (40670c <main+0x274>)
  4064c8:	4798      	blx	r3

//make this ecII jsi 7feb16	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level

	PCA9952_init();
  4064ca:	4b91      	ldr	r3, [pc, #580]	; (406710 <main+0x278>)
  4064cc:	4798      	blx	r3

	init_adc();
  4064ce:	4b91      	ldr	r3, [pc, #580]	; (406714 <main+0x27c>)
  4064d0:	4798      	blx	r3
	
	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  4064d2:	4891      	ldr	r0, [pc, #580]	; (406718 <main+0x280>)
  4064d4:	4b91      	ldr	r3, [pc, #580]	; (40671c <main+0x284>)
  4064d6:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4064d8:	488f      	ldr	r0, [pc, #572]	; (406718 <main+0x280>)
  4064da:	4b91      	ldr	r3, [pc, #580]	; (406720 <main+0x288>)
  4064dc:	4798      	blx	r3



	show_sw_version();
  4064de:	4b91      	ldr	r3, [pc, #580]	; (406724 <main+0x28c>)
  4064e0:	4798      	blx	r3

	// Print Startup Message
	display_text(IDX_READY);
  4064e2:	2000      	movs	r0, #0
  4064e4:	4b90      	ldr	r3, [pc, #576]	; (406728 <main+0x290>)
  4064e6:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH); //make sure outputs are disabled at the chip level
  4064e8:	2001      	movs	r0, #1
  4064ea:	2101      	movs	r1, #1
  4064ec:	4b8f      	ldr	r3, [pc, #572]	; (40672c <main+0x294>)
  4064ee:	4798      	blx	r3

	PCA9952_init();
  4064f0:	4b87      	ldr	r3, [pc, #540]	; (406710 <main+0x278>)
  4064f2:	4798      	blx	r3
	test_led_driver_channels();
  4064f4:	4b8e      	ldr	r3, [pc, #568]	; (406730 <main+0x298>)
  4064f6:	4798      	blx	r3
	
	
	init_led_board_info();
  4064f8:	4b8e      	ldr	r3, [pc, #568]	; (406734 <main+0x29c>)
  4064fa:	4798      	blx	r3

	show_chassis_status_info();
  4064fc:	4b8e      	ldr	r3, [pc, #568]	; (406738 <main+0x2a0>)
  4064fe:	4798      	blx	r3
	show_chassis_sysErr();
  406500:	4b8e      	ldr	r3, [pc, #568]	; (40673c <main+0x2a4>)
  406502:	4798      	blx	r3
	show_chassis_all_LED_boards();
  406504:	4b8e      	ldr	r3, [pc, #568]	; (406740 <main+0x2a8>)
  406506:	4798      	blx	r3
	show_help_and_prompt();
  406508:	4b8e      	ldr	r3, [pc, #568]	; (406744 <main+0x2ac>)
  40650a:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_LOW); //...and we are live!
  40650c:	2001      	movs	r0, #1
  40650e:	2100      	movs	r1, #0
  406510:	4b86      	ldr	r3, [pc, #536]	; (40672c <main+0x294>)
  406512:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_LOW);
  406514:	2002      	movs	r0, #2
  406516:	2100      	movs	r1, #0
  406518:	4b84      	ldr	r3, [pc, #528]	; (40672c <main+0x294>)
  40651a:	4798      	blx	r3
	
	start_timer(TMR_DEBUG, ((1*SECONDS)/2));
  40651c:	2000      	movs	r0, #0
  40651e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  406522:	4b89      	ldr	r3, [pc, #548]	; (406748 <main+0x2b0>)
  406524:	4798      	blx	r3


	// Main loop
	while (true) 
	{
		switch(electroclaveState)
  406526:	4b89      	ldr	r3, [pc, #548]	; (40674c <main+0x2b4>)
  406528:	781b      	ldrb	r3, [r3, #0]
  40652a:	2b08      	cmp	r3, #8
  40652c:	f200 8323 	bhi.w	406b76 <main+0x6de>
  406530:	a201      	add	r2, pc, #4	; (adr r2, 406538 <main+0xa0>)
  406532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406536:	bf00      	nop
  406538:	0040655d 	.word	0x0040655d
  40653c:	0040659f 	.word	0x0040659f
  406540:	004065bd 	.word	0x004065bd
  406544:	0040662d 	.word	0x0040662d
  406548:	004067b1 	.word	0x004067b1
  40654c:	0040689f 	.word	0x0040689f
  406550:	004068b7 	.word	0x004068b7
  406554:	004068d3 	.word	0x004068d3
  406558:	00406b51 	.word	0x00406b51
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
  40655c:	204d      	movs	r0, #77	; 0x4d
  40655e:	4b7c      	ldr	r3, [pc, #496]	; (406750 <main+0x2b8>)
  406560:	4798      	blx	r3
  406562:	4603      	mov	r3, r0
  406564:	2b00      	cmp	r3, #0
  406566:	d019      	beq.n	40659c <main+0x104>
  406568:	204e      	movs	r0, #78	; 0x4e
  40656a:	4b79      	ldr	r3, [pc, #484]	; (406750 <main+0x2b8>)
  40656c:	4798      	blx	r3
  40656e:	4603      	mov	r3, r0
  406570:	2b00      	cmp	r3, #0
  406572:	d013      	beq.n	40659c <main+0x104>
					ioport_set_pin_level(EXAMPLE_LED_GPIO, IOPORT_PIN_LEVEL_LOW);
  406574:	2050      	movs	r0, #80	; 0x50
  406576:	2100      	movs	r1, #0
  406578:	4b6c      	ldr	r3, [pc, #432]	; (40672c <main+0x294>)
  40657a:	4798      	blx	r3
					print_ecdbg("Door latch detected\r\n");
  40657c:	4875      	ldr	r0, [pc, #468]	; (406754 <main+0x2bc>)
  40657e:	4b76      	ldr	r3, [pc, #472]	; (406758 <main+0x2c0>)
  406580:	4798      	blx	r3
					firstTimeSinceDoorLatched = 1;
  406582:	4b76      	ldr	r3, [pc, #472]	; (40675c <main+0x2c4>)
  406584:	2201      	movs	r2, #1
  406586:	701a      	strb	r2, [r3, #0]
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
  406588:	2000      	movs	r0, #0
  40658a:	4b67      	ldr	r3, [pc, #412]	; (406728 <main+0x290>)
  40658c:	4798      	blx	r3
					electroclaveState = STATE_DOOR_LATCHED;
  40658e:	4b6f      	ldr	r3, [pc, #444]	; (40674c <main+0x2b4>)
  406590:	2201      	movs	r2, #1
  406592:	701a      	strb	r2, [r3, #0]
					firstDoorOpenSinceIdle = 1;
  406594:	4b72      	ldr	r3, [pc, #456]	; (406760 <main+0x2c8>)
  406596:	2201      	movs	r2, #1
  406598:	701a      	strb	r2, [r3, #0]
				}
				break;
  40659a:	e2ec      	b.n	406b76 <main+0x6de>
  40659c:	e2eb      	b.n	406b76 <main+0x6de>
				
			case STATE_DOOR_LATCHED:
				if (validKeypadCode) {
  40659e:	4b71      	ldr	r3, [pc, #452]	; (406764 <main+0x2cc>)
  4065a0:	781b      	ldrb	r3, [r3, #0]
  4065a2:	2b00      	cmp	r3, #0
  4065a4:	d009      	beq.n	4065ba <main+0x122>
					print_ecdbg("Valid keypad code detected\r\n");
  4065a6:	4870      	ldr	r0, [pc, #448]	; (406768 <main+0x2d0>)
  4065a8:	4b6b      	ldr	r3, [pc, #428]	; (406758 <main+0x2c0>)
  4065aa:	4798      	blx	r3
					electroclaveState = STATE_VALID_KEYPAD_CODE;
  4065ac:	4b67      	ldr	r3, [pc, #412]	; (40674c <main+0x2b4>)
  4065ae:	2202      	movs	r2, #2
  4065b0:	701a      	strb	r2, [r3, #0]
					validKeypadCode = 0; //reset
  4065b2:	4b6c      	ldr	r3, [pc, #432]	; (406764 <main+0x2cc>)
  4065b4:	2200      	movs	r2, #0
  4065b6:	701a      	strb	r2, [r3, #0]
				}
				break;
  4065b8:	e2dd      	b.n	406b76 <main+0x6de>
  4065ba:	e2dc      	b.n	406b76 <main+0x6de>
				
			case STATE_VALID_KEYPAD_CODE:

				if (firstTimeSinceDoorLatched)
  4065bc:	4b67      	ldr	r3, [pc, #412]	; (40675c <main+0x2c4>)
  4065be:	781b      	ldrb	r3, [r3, #0]
  4065c0:	2b00      	cmp	r3, #0
  4065c2:	d008      	beq.n	4065d6 <main+0x13e>
				{
					check_led_brd_side_lifetimes();
  4065c4:	4b69      	ldr	r3, [pc, #420]	; (40676c <main+0x2d4>)
  4065c6:	4798      	blx	r3
					check_shelves_for_devices();
  4065c8:	4b69      	ldr	r3, [pc, #420]	; (406770 <main+0x2d8>)
  4065ca:	4798      	blx	r3
					set_shelves_active_inactive();
  4065cc:	4b69      	ldr	r3, [pc, #420]	; (406774 <main+0x2dc>)
  4065ce:	4798      	blx	r3
					
					firstTimeSinceDoorLatched = 0;
  4065d0:	4b62      	ldr	r3, [pc, #392]	; (40675c <main+0x2c4>)
  4065d2:	2200      	movs	r2, #0
  4065d4:	701a      	strb	r2, [r3, #0]
				}

				if (num_active_shelves() != 0) {
  4065d6:	4b68      	ldr	r3, [pc, #416]	; (406778 <main+0x2e0>)
  4065d8:	4798      	blx	r3
  4065da:	4603      	mov	r3, r0
  4065dc:	2b00      	cmp	r3, #0
  4065de:	d00e      	beq.n	4065fe <main+0x166>
					electroclaveState = STATE_START_SANITIZE;
  4065e0:	4b5a      	ldr	r3, [pc, #360]	; (40674c <main+0x2b4>)
  4065e2:	2203      	movs	r2, #3
  4065e4:	701a      	strb	r2, [r3, #0]
					print_ecdbg("Sanitizing\r\n");
  4065e6:	4865      	ldr	r0, [pc, #404]	; (40677c <main+0x2e4>)
  4065e8:	4b5b      	ldr	r3, [pc, #364]	; (406758 <main+0x2c0>)
  4065ea:	4798      	blx	r3
//13jun15					display_text(IDX_CLEAR);
//13jun15					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
  4065ec:	2002      	movs	r0, #2
  4065ee:	4b4e      	ldr	r3, [pc, #312]	; (406728 <main+0x290>)
  4065f0:	4798      	blx	r3
					start_timer(TMR_DISPLAY, (8 * SECONDS));
  4065f2:	2001      	movs	r0, #1
  4065f4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4065f8:	4b53      	ldr	r3, [pc, #332]	; (406748 <main+0x2b0>)
  4065fa:	4798      	blx	r3
  4065fc:	e015      	b.n	40662a <main+0x192>
				}
				else if (num_present_shelves() != 0){
  4065fe:	4b60      	ldr	r3, [pc, #384]	; (406780 <main+0x2e8>)
  406600:	4798      	blx	r3
  406602:	4603      	mov	r3, r0
  406604:	2b00      	cmp	r3, #0
  406606:	d009      	beq.n	40661c <main+0x184>
					electroclaveState = STATE_EC_IDLE;
  406608:	4b50      	ldr	r3, [pc, #320]	; (40674c <main+0x2b4>)
  40660a:	2200      	movs	r2, #0
  40660c:	701a      	strb	r2, [r3, #0]
					print_ecdbg("At least one shelf is present, but no devices to be cleaned.\r\n");
  40660e:	485d      	ldr	r0, [pc, #372]	; (406784 <main+0x2ec>)
  406610:	4b51      	ldr	r3, [pc, #324]	; (406758 <main+0x2c0>)
  406612:	4798      	blx	r3
					display_text(IDX_READY);
  406614:	2000      	movs	r0, #0
  406616:	4b44      	ldr	r3, [pc, #272]	; (406728 <main+0x290>)
  406618:	4798      	blx	r3
  40661a:	e006      	b.n	40662a <main+0x192>
				}
				else
				{
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
  40661c:	485a      	ldr	r0, [pc, #360]	; (406788 <main+0x2f0>)
  40661e:	4b4e      	ldr	r3, [pc, #312]	; (406758 <main+0x2c0>)
  406620:	4798      	blx	r3
					display_text(IDX_ERROR);
  406622:	2004      	movs	r0, #4
  406624:	4b40      	ldr	r3, [pc, #256]	; (406728 <main+0x290>)
  406626:	4798      	blx	r3
				}
				break;
  406628:	e2a5      	b.n	406b76 <main+0x6de>
  40662a:	e2a4      	b.n	406b76 <main+0x6de>
				
			case STATE_START_SANITIZE:
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
  40662c:	4b57      	ldr	r3, [pc, #348]	; (40678c <main+0x2f4>)
  40662e:	22ff      	movs	r2, #255	; 0xff
  406630:	701a      	strb	r2, [r3, #0]
				sanitizeMinutes = 0;
  406632:	4b57      	ldr	r3, [pc, #348]	; (406790 <main+0x2f8>)
  406634:	2200      	movs	r2, #0
  406636:	601a      	str	r2, [r3, #0]
				for (int i = 0; i<NUM_SHELVES; i++) {
  406638:	2300      	movs	r3, #0
  40663a:	65fb      	str	r3, [r7, #92]	; 0x5c
  40663c:	e02c      	b.n	406698 <main+0x200>
					if (shelf[i].active == SHELF_ACTIVE) {
  40663e:	4955      	ldr	r1, [pc, #340]	; (406794 <main+0x2fc>)
  406640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  406642:	4613      	mov	r3, r2
  406644:	009b      	lsls	r3, r3, #2
  406646:	4413      	add	r3, r2
  406648:	440b      	add	r3, r1
  40664a:	781b      	ldrb	r3, [r3, #0]
  40664c:	2b01      	cmp	r3, #1
  40664e:	d120      	bne.n	406692 <main+0x1fa>
						tmpSanitizeMinutes = calc_sanitize_time(i);
  406650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406652:	b2db      	uxtb	r3, r3
  406654:	4618      	mov	r0, r3
  406656:	4b50      	ldr	r3, [pc, #320]	; (406798 <main+0x300>)
  406658:	4798      	blx	r3
  40665a:	4603      	mov	r3, r0
  40665c:	461a      	mov	r2, r3
  40665e:	4b4f      	ldr	r3, [pc, #316]	; (40679c <main+0x304>)
  406660:	601a      	str	r2, [r3, #0]
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
  406662:	4b4e      	ldr	r3, [pc, #312]	; (40679c <main+0x304>)
  406664:	681a      	ldr	r2, [r3, #0]
  406666:	4b4a      	ldr	r3, [pc, #296]	; (406790 <main+0x2f8>)
  406668:	681b      	ldr	r3, [r3, #0]
  40666a:	429a      	cmp	r2, r3
  40666c:	d903      	bls.n	406676 <main+0x1de>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
  40666e:	4b4b      	ldr	r3, [pc, #300]	; (40679c <main+0x304>)
  406670:	681b      	ldr	r3, [r3, #0]
  406672:	4a47      	ldr	r2, [pc, #284]	; (406790 <main+0x2f8>)
  406674:	6013      	str	r3, [r2, #0]
						}
						
						led_shelf(i, LED_ON);
  406676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406678:	b2db      	uxtb	r3, r3
  40667a:	4618      	mov	r0, r3
  40667c:	2101      	movs	r1, #1
  40667e:	4b48      	ldr	r3, [pc, #288]	; (4067a0 <main+0x308>)
  406680:	4798      	blx	r3
						
						if (displayIdx == 0xFF)
  406682:	4b42      	ldr	r3, [pc, #264]	; (40678c <main+0x2f4>)
  406684:	781b      	ldrb	r3, [r3, #0]
  406686:	2bff      	cmp	r3, #255	; 0xff
  406688:	d103      	bne.n	406692 <main+0x1fa>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
  40668a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40668c:	b2da      	uxtb	r2, r3
  40668e:	4b3f      	ldr	r3, [pc, #252]	; (40678c <main+0x2f4>)
  406690:	701a      	strb	r2, [r3, #0]
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
  406692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406694:	3301      	adds	r3, #1
  406696:	65fb      	str	r3, [r7, #92]	; 0x5c
  406698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40669a:	2b03      	cmp	r3, #3
  40669c:	ddcf      	ble.n	40663e <main+0x1a6>
					}
				}
				
				
//16jan16 #if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15
				start_timer(TMR_SANITIZE, (sanitizeMinutes*MINUTES));
  40669e:	4b3c      	ldr	r3, [pc, #240]	; (406790 <main+0x2f8>)
  4066a0:	681b      	ldr	r3, [r3, #0]
  4066a2:	f64e 2260 	movw	r2, #60000	; 0xea60
  4066a6:	fb02 f303 	mul.w	r3, r2, r3
  4066aa:	2002      	movs	r0, #2
  4066ac:	4619      	mov	r1, r3
  4066ae:	4b26      	ldr	r3, [pc, #152]	; (406748 <main+0x2b0>)
  4066b0:	4798      	blx	r3
//16jan16 #endif
//16jan16 we really want minutes right now				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
				
				sprintf(mainStr, "sanitizeMinutes: %ld tmpSanitizeMinutes: %ld\r\n", sanitizeMinutes, tmpSanitizeMinutes);
  4066b2:	4b37      	ldr	r3, [pc, #220]	; (406790 <main+0x2f8>)
  4066b4:	681a      	ldr	r2, [r3, #0]
  4066b6:	4b39      	ldr	r3, [pc, #228]	; (40679c <main+0x304>)
  4066b8:	681b      	ldr	r3, [r3, #0]
  4066ba:	4639      	mov	r1, r7
  4066bc:	4608      	mov	r0, r1
  4066be:	4939      	ldr	r1, [pc, #228]	; (4067a4 <main+0x30c>)
  4066c0:	4c39      	ldr	r4, [pc, #228]	; (4067a8 <main+0x310>)
  4066c2:	47a0      	blx	r4
				print_ecdbg(mainStr);
  4066c4:	463b      	mov	r3, r7
  4066c6:	4618      	mov	r0, r3
  4066c8:	4b23      	ldr	r3, [pc, #140]	; (406758 <main+0x2c0>)
  4066ca:	4798      	blx	r3


				inc_sanCycles();
  4066cc:	4b37      	ldr	r3, [pc, #220]	; (4067ac <main+0x314>)
  4066ce:	4798      	blx	r3

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				start_timer(TMR_ONE_MINUTE, (1*SECONDS)); //once per second for debug
  4066d0:	2003      	movs	r0, #3
  4066d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4066d6:	4b1c      	ldr	r3, [pc, #112]	; (406748 <main+0x2b0>)
  4066d8:	4798      	blx	r3
				electroclaveState = STATE_SANITIZE;
  4066da:	4b1c      	ldr	r3, [pc, #112]	; (40674c <main+0x2b4>)
  4066dc:	2204      	movs	r2, #4
  4066de:	701a      	strb	r2, [r3, #0]
				
				break;
  4066e0:	e249      	b.n	406b76 <main+0x6de>
  4066e2:	bf00      	nop
  4066e4:	00400491 	.word	0x00400491
  4066e8:	00400a6d 	.word	0x00400a6d
  4066ec:	00404421 	.word	0x00404421
  4066f0:	00403d0d 	.word	0x00403d0d
  4066f4:	00403c49 	.word	0x00403c49
  4066f8:	00403cc9 	.word	0x00403cc9
  4066fc:	00403fa9 	.word	0x00403fa9
  406700:	00404321 	.word	0x00404321
  406704:	004055e5 	.word	0x004055e5
  406708:	004044b5 	.word	0x004044b5
  40670c:	00403da9 	.word	0x00403da9
  406710:	004027dd 	.word	0x004027dd
  406714:	00403e3d 	.word	0x00403e3d
  406718:	40024000 	.word	0x40024000
  40671c:	00402189 	.word	0x00402189
  406720:	004021d5 	.word	0x004021d5
  406724:	00405805 	.word	0x00405805
  406728:	00404339 	.word	0x00404339
  40672c:	004041f9 	.word	0x004041f9
  406730:	00404d89 	.word	0x00404d89
  406734:	004057f5 	.word	0x004057f5
  406738:	0040582d 	.word	0x0040582d
  40673c:	00405bfd 	.word	0x00405bfd
  406740:	00405f65 	.word	0x00405f65
  406744:	0040607d 	.word	0x0040607d
  406748:	0040320d 	.word	0x0040320d
  40674c:	204009b9 	.word	0x204009b9
  406750:	00404265 	.word	0x00404265
  406754:	0040cdc0 	.word	0x0040cdc0
  406758:	004026b1 	.word	0x004026b1
  40675c:	204009b8 	.word	0x204009b8
  406760:	20400014 	.word	0x20400014
  406764:	204009cc 	.word	0x204009cc
  406768:	0040cdd8 	.word	0x0040cdd8
  40676c:	00404879 	.word	0x00404879
  406770:	00404b85 	.word	0x00404b85
  406774:	00404f75 	.word	0x00404f75
  406778:	004050f1 	.word	0x004050f1
  40677c:	0040cdf8 	.word	0x0040cdf8
  406780:	00405109 	.word	0x00405109
  406784:	0040ce08 	.word	0x0040ce08
  406788:	0040ce48 	.word	0x0040ce48
  40678c:	204009d2 	.word	0x204009d2
  406790:	204016a0 	.word	0x204016a0
  406794:	2040168c 	.word	0x2040168c
  406798:	00405121 	.word	0x00405121
  40679c:	204016a8 	.word	0x204016a8
  4067a0:	00402a45 	.word	0x00402a45
  4067a4:	0040ce74 	.word	0x0040ce74
  4067a8:	00407725 	.word	0x00407725
  4067ac:	004053b1 	.word	0x004053b1
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (timer_done(TMR_DISPLAY))
  4067b0:	2001      	movs	r0, #1
  4067b2:	4b9a      	ldr	r3, [pc, #616]	; (406a1c <main+0x584>)
  4067b4:	4798      	blx	r3
  4067b6:	4603      	mov	r3, r0
  4067b8:	2b00      	cmp	r3, #0
  4067ba:	d046      	beq.n	40684a <main+0x3b2>
				{
					end_timer(TMR_DISPLAY);
  4067bc:	2001      	movs	r0, #1
  4067be:	4b98      	ldr	r3, [pc, #608]	; (406a20 <main+0x588>)
  4067c0:	4798      	blx	r3
					switch (displayIdx)
  4067c2:	4b98      	ldr	r3, [pc, #608]	; (406a24 <main+0x58c>)
  4067c4:	781b      	ldrb	r3, [r3, #0]
  4067c6:	2b03      	cmp	r3, #3
  4067c8:	d81a      	bhi.n	406800 <main+0x368>
  4067ca:	a201      	add	r2, pc, #4	; (adr r2, 4067d0 <main+0x338>)
  4067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4067d0:	004067e1 	.word	0x004067e1
  4067d4:	004067e9 	.word	0x004067e9
  4067d8:	004067f1 	.word	0x004067f1
  4067dc:	004067f9 	.word	0x004067f9
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
  4067e0:	2005      	movs	r0, #5
  4067e2:	4b91      	ldr	r3, [pc, #580]	; (406a28 <main+0x590>)
  4067e4:	4798      	blx	r3
							break;
  4067e6:	e00b      	b.n	406800 <main+0x368>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
  4067e8:	2006      	movs	r0, #6
  4067ea:	4b8f      	ldr	r3, [pc, #572]	; (406a28 <main+0x590>)
  4067ec:	4798      	blx	r3
							break;
  4067ee:	e007      	b.n	406800 <main+0x368>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
  4067f0:	2007      	movs	r0, #7
  4067f2:	4b8d      	ldr	r3, [pc, #564]	; (406a28 <main+0x590>)
  4067f4:	4798      	blx	r3
							break;
  4067f6:	e003      	b.n	406800 <main+0x368>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
  4067f8:	2008      	movs	r0, #8
  4067fa:	4b8b      	ldr	r3, [pc, #556]	; (406a28 <main+0x590>)
  4067fc:	4798      	blx	r3
							break;
  4067fe:	bf00      	nop
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
  406800:	4b88      	ldr	r3, [pc, #544]	; (406a24 <main+0x58c>)
  406802:	781b      	ldrb	r3, [r3, #0]
  406804:	3301      	adds	r3, #1
  406806:	b2da      	uxtb	r2, r3
  406808:	4b86      	ldr	r3, [pc, #536]	; (406a24 <main+0x58c>)
  40680a:	701a      	strb	r2, [r3, #0]
  40680c:	4b85      	ldr	r3, [pc, #532]	; (406a24 <main+0x58c>)
  40680e:	781b      	ldrb	r3, [r3, #0]
  406810:	2b03      	cmp	r3, #3
  406812:	d902      	bls.n	40681a <main+0x382>
						{
							displayIdx = 0; //12apr15 wrap around
  406814:	4b83      	ldr	r3, [pc, #524]	; (406a24 <main+0x58c>)
  406816:	2200      	movs	r2, #0
  406818:	701a      	strb	r2, [r3, #0]
						}
						
						if (shelf[displayIdx].active)
  40681a:	4b82      	ldr	r3, [pc, #520]	; (406a24 <main+0x58c>)
  40681c:	781b      	ldrb	r3, [r3, #0]
  40681e:	4619      	mov	r1, r3
  406820:	4a82      	ldr	r2, [pc, #520]	; (406a2c <main+0x594>)
  406822:	460b      	mov	r3, r1
  406824:	009b      	lsls	r3, r3, #2
  406826:	440b      	add	r3, r1
  406828:	4413      	add	r3, r2
  40682a:	781b      	ldrb	r3, [r3, #0]
  40682c:	2b00      	cmp	r3, #0
  40682e:	d00b      	beq.n	406848 <main+0x3b0>
						{
							break; //this shelf is active, we don't need to look for another one
  406830:	bf00      	nop
						}
						
					}

					start_timer(TMR_DISPLAY, displayTimerSeconds * SECONDS);
  406832:	4b7f      	ldr	r3, [pc, #508]	; (406a30 <main+0x598>)
  406834:	681b      	ldr	r3, [r3, #0]
  406836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40683a:	fb02 f303 	mul.w	r3, r2, r3
  40683e:	2001      	movs	r0, #1
  406840:	4619      	mov	r1, r3
  406842:	4b7c      	ldr	r3, [pc, #496]	; (406a34 <main+0x59c>)
  406844:	4798      	blx	r3
  406846:	e000      	b.n	40684a <main+0x3b2>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
  406848:	e7da      	b.n	406800 <main+0x368>
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (timer_done(TMR_ONE_MINUTE))
  40684a:	2003      	movs	r0, #3
  40684c:	4b73      	ldr	r3, [pc, #460]	; (406a1c <main+0x584>)
  40684e:	4798      	blx	r3
  406850:	4603      	mov	r3, r0
  406852:	2b00      	cmp	r3, #0
  406854:	d009      	beq.n	40686a <main+0x3d2>
				{
					end_timer(TMR_ONE_MINUTE);
  406856:	2003      	movs	r0, #3
  406858:	4b71      	ldr	r3, [pc, #452]	; (406a20 <main+0x588>)
  40685a:	4798      	blx	r3
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
  40685c:	4b76      	ldr	r3, [pc, #472]	; (406a38 <main+0x5a0>)
  40685e:	4798      	blx	r3
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					start_timer(TMR_ONE_MINUTE, (1 * SECONDS));
  406860:	2003      	movs	r0, #3
  406862:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  406866:	4b73      	ldr	r3, [pc, #460]	; (406a34 <main+0x59c>)
  406868:	4798      	blx	r3
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (timer_done(TMR_SANITIZE)) {
  40686a:	2002      	movs	r0, #2
  40686c:	4b6b      	ldr	r3, [pc, #428]	; (406a1c <main+0x584>)
  40686e:	4798      	blx	r3
  406870:	4603      	mov	r3, r0
  406872:	2b00      	cmp	r3, #0
  406874:	d012      	beq.n	40689c <main+0x404>
					
					for (int i=0; i< NUM_SHELVES; i++)
  406876:	2300      	movs	r3, #0
  406878:	65bb      	str	r3, [r7, #88]	; 0x58
  40687a:	e002      	b.n	406882 <main+0x3ea>
  40687c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  40687e:	3301      	adds	r3, #1
  406880:	65bb      	str	r3, [r7, #88]	; 0x58
  406882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406884:	2b03      	cmp	r3, #3
  406886:	ddf9      	ble.n	40687c <main+0x3e4>
					{
//DEBUG 16jan16 THIS IS REALLY SLOPPY, WANT TO KEEP THE LEDS ON FOR 30 MINUTES BUT THE TIMER STUFF DOESN'T SEEM TO WORK THAT LONG, SO WE ARE JUST NOT GOING TO TURN THE SHELVES OFF						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					end_timer(TMR_SANITIZE);
  406888:	2002      	movs	r0, #2
  40688a:	4b65      	ldr	r3, [pc, #404]	; (406a20 <main+0x588>)
  40688c:	4798      	blx	r3
					print_ecdbg("Shelf clean\r\n");
  40688e:	486b      	ldr	r0, [pc, #428]	; (406a3c <main+0x5a4>)
  406890:	4b6b      	ldr	r3, [pc, #428]	; (406a40 <main+0x5a8>)
  406892:	4798      	blx	r3
					electroclaveState = STATE_START_CLEAN;
  406894:	4b6b      	ldr	r3, [pc, #428]	; (406a44 <main+0x5ac>)
  406896:	2205      	movs	r2, #5
  406898:	701a      	strb	r2, [r3, #0]
				}
				break;
  40689a:	e16c      	b.n	406b76 <main+0x6de>
  40689c:	e16b      	b.n	406b76 <main+0x6de>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
  40689e:	2001      	movs	r0, #1
  4068a0:	4b61      	ldr	r3, [pc, #388]	; (406a28 <main+0x590>)
  4068a2:	4798      	blx	r3
				electroclaveState = STATE_CLEAN;
  4068a4:	4b67      	ldr	r3, [pc, #412]	; (406a44 <main+0x5ac>)
  4068a6:	2206      	movs	r2, #6
  4068a8:	701a      	strb	r2, [r3, #0]
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer);
#endif
//DEBUG 24jun15 change to 60 seconds for demo, put this line back in later				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 

//				cpu_set_timeout((60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 24jun15 change to 60 seconds for demo, remove later
				start_timer(TMR_CLEAN, (3 * SECONDS));
  4068aa:	2004      	movs	r0, #4
  4068ac:	f640 31b8 	movw	r1, #3000	; 0xbb8
  4068b0:	4b60      	ldr	r3, [pc, #384]	; (406a34 <main+0x59c>)
  4068b2:	4798      	blx	r3
				break;	
  4068b4:	e15f      	b.n	406b76 <main+0x6de>
				
			case STATE_CLEAN:
				if (timer_done(TMR_CLEAN)) {
  4068b6:	2004      	movs	r0, #4
  4068b8:	4b58      	ldr	r3, [pc, #352]	; (406a1c <main+0x584>)
  4068ba:	4798      	blx	r3
  4068bc:	4603      	mov	r3, r0
  4068be:	2b00      	cmp	r3, #0
  4068c0:	d006      	beq.n	4068d0 <main+0x438>
					end_timer(TMR_CLEAN);
  4068c2:	2004      	movs	r0, #4
  4068c4:	4b56      	ldr	r3, [pc, #344]	; (406a20 <main+0x588>)
  4068c6:	4798      	blx	r3
					electroclaveState = STATE_VALID_KEYPAD_CODE;	
  4068c8:	4b5e      	ldr	r3, [pc, #376]	; (406a44 <main+0x5ac>)
  4068ca:	2202      	movs	r2, #2
  4068cc:	701a      	strb	r2, [r3, #0]
				}
				break;
  4068ce:	e152      	b.n	406b76 <main+0x6de>
  4068d0:	e151      	b.n	406b76 <main+0x6de>
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4068d2:	2300      	movs	r3, #0
  4068d4:	657b      	str	r3, [r7, #84]	; 0x54
  4068d6:	e008      	b.n	4068ea <main+0x452>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  4068d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4068da:	b2db      	uxtb	r3, r3
  4068dc:	4618      	mov	r0, r3
  4068de:	2100      	movs	r1, #0
  4068e0:	4b59      	ldr	r3, [pc, #356]	; (406a48 <main+0x5b0>)
  4068e2:	4798      	blx	r3
				break;
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4068e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4068e6:	3301      	adds	r3, #1
  4068e8:	657b      	str	r3, [r7, #84]	; 0x54
  4068ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4068ec:	2b03      	cmp	r3, #3
  4068ee:	ddf3      	ble.n	4068d8 <main+0x440>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				
				
				if (timer_done(TMR_ERROR_DISPLAY))
  4068f0:	2005      	movs	r0, #5
  4068f2:	4b4a      	ldr	r3, [pc, #296]	; (406a1c <main+0x584>)
  4068f4:	4798      	blx	r3
  4068f6:	4603      	mov	r3, r0
  4068f8:	2b00      	cmp	r3, #0
  4068fa:	f000 8128 	beq.w	406b4e <main+0x6b6>
				{
					end_timer(TMR_ERROR_DISPLAY);
  4068fe:	2005      	movs	r0, #5
  406900:	4b47      	ldr	r3, [pc, #284]	; (406a20 <main+0x588>)
  406902:	4798      	blx	r3

					while(1)
					{
						switch(errorDisplayState)
  406904:	4b51      	ldr	r3, [pc, #324]	; (406a4c <main+0x5b4>)
  406906:	781b      	ldrb	r3, [r3, #0]
  406908:	2b04      	cmp	r3, #4
  40690a:	f200 8113 	bhi.w	406b34 <main+0x69c>
  40690e:	a201      	add	r2, pc, #4	; (adr r2, 406914 <main+0x47c>)
  406910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406914:	00406929 	.word	0x00406929
  406918:	00406947 	.word	0x00406947
  40691c:	004069b1 	.word	0x004069b1
  406920:	00406a5d 	.word	0x00406a5d
  406924:	00406ac7 	.word	0x00406ac7
						{
							case 0:
								display_text(IDX_ERROR);
  406928:	2004      	movs	r0, #4
  40692a:	4b3f      	ldr	r3, [pc, #252]	; (406a28 <main+0x590>)
  40692c:	4798      	blx	r3
								displayChanged = 1;
  40692e:	4b48      	ldr	r3, [pc, #288]	; (406a50 <main+0x5b8>)
  406930:	2201      	movs	r2, #1
  406932:	701a      	strb	r2, [r3, #0]
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406934:	2005      	movs	r0, #5
  406936:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  40693a:	4b3e      	ldr	r3, [pc, #248]	; (406a34 <main+0x59c>)
  40693c:	4798      	blx	r3
								errorDisplayState = 1;
  40693e:	4b43      	ldr	r3, [pc, #268]	; (406a4c <main+0x5b4>)
  406940:	2201      	movs	r2, #1
  406942:	701a      	strb	r2, [r3, #0]
								break;
  406944:	e0fa      	b.n	406b3c <main+0x6a4>
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  406946:	4b43      	ldr	r3, [pc, #268]	; (406a54 <main+0x5bc>)
  406948:	789b      	ldrb	r3, [r3, #2]
  40694a:	2b00      	cmp	r3, #0
  40694c:	d121      	bne.n	406992 <main+0x4fa>
  40694e:	4b41      	ldr	r3, [pc, #260]	; (406a54 <main+0x5bc>)
  406950:	79db      	ldrb	r3, [r3, #7]
  406952:	2b00      	cmp	r3, #0
  406954:	d11d      	bne.n	406992 <main+0x4fa>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406956:	4b40      	ldr	r3, [pc, #256]	; (406a58 <main+0x5c0>)
  406958:	781b      	ldrb	r3, [r3, #0]
  40695a:	f003 0301 	and.w	r3, r3, #1
								displayChanged = 1;
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  40695e:	2b00      	cmp	r3, #0
  406960:	d117      	bne.n	406992 <main+0x4fa>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406962:	4b3d      	ldr	r3, [pc, #244]	; (406a58 <main+0x5c0>)
  406964:	781b      	ldrb	r3, [r3, #0]
  406966:	f003 0302 	and.w	r3, r3, #2
  40696a:	2b00      	cmp	r3, #0
  40696c:	d111      	bne.n	406992 <main+0x4fa>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  40696e:	4b3a      	ldr	r3, [pc, #232]	; (406a58 <main+0x5c0>)
  406970:	685b      	ldr	r3, [r3, #4]
  406972:	f003 0301 	and.w	r3, r3, #1
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406976:	2b00      	cmp	r3, #0
  406978:	d10b      	bne.n	406992 <main+0x4fa>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  40697a:	4b37      	ldr	r3, [pc, #220]	; (406a58 <main+0x5c0>)
  40697c:	685b      	ldr	r3, [r3, #4]
  40697e:	f003 0302 	and.w	r3, r3, #2
  406982:	2b00      	cmp	r3, #0
  406984:	d105      	bne.n	406992 <main+0x4fa>
  406986:	4b34      	ldr	r3, [pc, #208]	; (406a58 <main+0x5c0>)
  406988:	685b      	ldr	r3, [r3, #4]
  40698a:	f003 0304 	and.w	r3, r3, #4
  40698e:	2b00      	cmp	r3, #0
  406990:	d00a      	beq.n	4069a8 <main+0x510>
								{
									display_text(IDX_SHELF1);
  406992:	2005      	movs	r0, #5
  406994:	4b24      	ldr	r3, [pc, #144]	; (406a28 <main+0x590>)
  406996:	4798      	blx	r3
									displayChanged = 1;
  406998:	4b2d      	ldr	r3, [pc, #180]	; (406a50 <main+0x5b8>)
  40699a:	2201      	movs	r2, #1
  40699c:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  40699e:	2005      	movs	r0, #5
  4069a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4069a4:	4b23      	ldr	r3, [pc, #140]	; (406a34 <main+0x59c>)
  4069a6:	4798      	blx	r3
								}
								errorDisplayState = 2;
  4069a8:	4b28      	ldr	r3, [pc, #160]	; (406a4c <main+0x5b4>)
  4069aa:	2202      	movs	r2, #2
  4069ac:	701a      	strb	r2, [r3, #0]
								break;
  4069ae:	e0c5      	b.n	406b3c <main+0x6a4>
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  4069b0:	4b28      	ldr	r3, [pc, #160]	; (406a54 <main+0x5bc>)
  4069b2:	7b1b      	ldrb	r3, [r3, #12]
  4069b4:	2b00      	cmp	r3, #0
  4069b6:	d121      	bne.n	4069fc <main+0x564>
  4069b8:	4b26      	ldr	r3, [pc, #152]	; (406a54 <main+0x5bc>)
  4069ba:	7c5b      	ldrb	r3, [r3, #17]
  4069bc:	2b00      	cmp	r3, #0
  4069be:	d11d      	bne.n	4069fc <main+0x564>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  4069c0:	4b25      	ldr	r3, [pc, #148]	; (406a58 <main+0x5c0>)
  4069c2:	781b      	ldrb	r3, [r3, #0]
  4069c4:	f003 0304 	and.w	r3, r3, #4
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  4069c8:	2b00      	cmp	r3, #0
  4069ca:	d117      	bne.n	4069fc <main+0x564>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  4069cc:	4b22      	ldr	r3, [pc, #136]	; (406a58 <main+0x5c0>)
  4069ce:	781b      	ldrb	r3, [r3, #0]
  4069d0:	f003 0308 	and.w	r3, r3, #8
  4069d4:	2b00      	cmp	r3, #0
  4069d6:	d111      	bne.n	4069fc <main+0x564>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  4069d8:	4b1f      	ldr	r3, [pc, #124]	; (406a58 <main+0x5c0>)
  4069da:	685b      	ldr	r3, [r3, #4]
  4069dc:	f003 0308 	and.w	r3, r3, #8
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  4069e0:	2b00      	cmp	r3, #0
  4069e2:	d10b      	bne.n	4069fc <main+0x564>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  4069e4:	4b1c      	ldr	r3, [pc, #112]	; (406a58 <main+0x5c0>)
  4069e6:	685b      	ldr	r3, [r3, #4]
  4069e8:	f003 0310 	and.w	r3, r3, #16
  4069ec:	2b00      	cmp	r3, #0
  4069ee:	d105      	bne.n	4069fc <main+0x564>
  4069f0:	4b19      	ldr	r3, [pc, #100]	; (406a58 <main+0x5c0>)
  4069f2:	685b      	ldr	r3, [r3, #4]
  4069f4:	f003 0320 	and.w	r3, r3, #32
  4069f8:	2b00      	cmp	r3, #0
  4069fa:	d00a      	beq.n	406a12 <main+0x57a>
								{
									display_text(IDX_SHELF2);
  4069fc:	2006      	movs	r0, #6
  4069fe:	4b0a      	ldr	r3, [pc, #40]	; (406a28 <main+0x590>)
  406a00:	4798      	blx	r3
									displayChanged = 1;
  406a02:	4b13      	ldr	r3, [pc, #76]	; (406a50 <main+0x5b8>)
  406a04:	2201      	movs	r2, #1
  406a06:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406a08:	2005      	movs	r0, #5
  406a0a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406a0e:	4b09      	ldr	r3, [pc, #36]	; (406a34 <main+0x59c>)
  406a10:	4798      	blx	r3
								}
								errorDisplayState = 3;
  406a12:	4b0e      	ldr	r3, [pc, #56]	; (406a4c <main+0x5b4>)
  406a14:	2203      	movs	r2, #3
  406a16:	701a      	strb	r2, [r3, #0]
								break;
  406a18:	e090      	b.n	406b3c <main+0x6a4>
  406a1a:	bf00      	nop
  406a1c:	00403315 	.word	0x00403315
  406a20:	00403351 	.word	0x00403351
  406a24:	204009d2 	.word	0x204009d2
  406a28:	00404339 	.word	0x00404339
  406a2c:	2040168c 	.word	0x2040168c
  406a30:	20401334 	.word	0x20401334
  406a34:	0040320d 	.word	0x0040320d
  406a38:	00405441 	.word	0x00405441
  406a3c:	0040cea4 	.word	0x0040cea4
  406a40:	004026b1 	.word	0x004026b1
  406a44:	204009b9 	.word	0x204009b9
  406a48:	00402a45 	.word	0x00402a45
  406a4c:	204009ba 	.word	0x204009ba
  406a50:	204009bb 	.word	0x204009bb
  406a54:	204016c8 	.word	0x204016c8
  406a58:	204016b4 	.word	0x204016b4
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  406a5c:	4b78      	ldr	r3, [pc, #480]	; (406c40 <main+0x7a8>)
  406a5e:	7d9b      	ldrb	r3, [r3, #22]
  406a60:	2b00      	cmp	r3, #0
  406a62:	d121      	bne.n	406aa8 <main+0x610>
  406a64:	4b76      	ldr	r3, [pc, #472]	; (406c40 <main+0x7a8>)
  406a66:	7edb      	ldrb	r3, [r3, #27]
  406a68:	2b00      	cmp	r3, #0
  406a6a:	d11d      	bne.n	406aa8 <main+0x610>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406a6c:	4b75      	ldr	r3, [pc, #468]	; (406c44 <main+0x7ac>)
  406a6e:	781b      	ldrb	r3, [r3, #0]
  406a70:	f003 0310 	and.w	r3, r3, #16
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  406a74:	2b00      	cmp	r3, #0
  406a76:	d117      	bne.n	406aa8 <main+0x610>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406a78:	4b72      	ldr	r3, [pc, #456]	; (406c44 <main+0x7ac>)
  406a7a:	781b      	ldrb	r3, [r3, #0]
  406a7c:	f003 0320 	and.w	r3, r3, #32
  406a80:	2b00      	cmp	r3, #0
  406a82:	d111      	bne.n	406aa8 <main+0x610>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  406a84:	4b6f      	ldr	r3, [pc, #444]	; (406c44 <main+0x7ac>)
  406a86:	685b      	ldr	r3, [r3, #4]
  406a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406a8c:	2b00      	cmp	r3, #0
  406a8e:	d10b      	bne.n	406aa8 <main+0x610>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  406a90:	4b6c      	ldr	r3, [pc, #432]	; (406c44 <main+0x7ac>)
  406a92:	685b      	ldr	r3, [r3, #4]
  406a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406a98:	2b00      	cmp	r3, #0
  406a9a:	d105      	bne.n	406aa8 <main+0x610>
  406a9c:	4b69      	ldr	r3, [pc, #420]	; (406c44 <main+0x7ac>)
  406a9e:	685b      	ldr	r3, [r3, #4]
  406aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406aa4:	2b00      	cmp	r3, #0
  406aa6:	d00a      	beq.n	406abe <main+0x626>
								{
									display_text(IDX_SHELF3);
  406aa8:	2007      	movs	r0, #7
  406aaa:	4b67      	ldr	r3, [pc, #412]	; (406c48 <main+0x7b0>)
  406aac:	4798      	blx	r3
									displayChanged = 1;
  406aae:	4b67      	ldr	r3, [pc, #412]	; (406c4c <main+0x7b4>)
  406ab0:	2201      	movs	r2, #1
  406ab2:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406ab4:	2005      	movs	r0, #5
  406ab6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406aba:	4b65      	ldr	r3, [pc, #404]	; (406c50 <main+0x7b8>)
  406abc:	4798      	blx	r3
								}
								errorDisplayState = 4;
  406abe:	4b65      	ldr	r3, [pc, #404]	; (406c54 <main+0x7bc>)
  406ac0:	2204      	movs	r2, #4
  406ac2:	701a      	strb	r2, [r3, #0]
								break;
  406ac4:	e03a      	b.n	406b3c <main+0x6a4>
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  406ac6:	4b5e      	ldr	r3, [pc, #376]	; (406c40 <main+0x7a8>)
  406ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
  406acc:	2b00      	cmp	r3, #0
  406ace:	d122      	bne.n	406b16 <main+0x67e>
  406ad0:	4b5b      	ldr	r3, [pc, #364]	; (406c40 <main+0x7a8>)
  406ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  406ad6:	2b00      	cmp	r3, #0
  406ad8:	d11d      	bne.n	406b16 <main+0x67e>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406ada:	4b5a      	ldr	r3, [pc, #360]	; (406c44 <main+0x7ac>)
  406adc:	781b      	ldrb	r3, [r3, #0]
  406ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  406ae2:	2b00      	cmp	r3, #0
  406ae4:	d117      	bne.n	406b16 <main+0x67e>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406ae6:	4b57      	ldr	r3, [pc, #348]	; (406c44 <main+0x7ac>)
  406ae8:	781b      	ldrb	r3, [r3, #0]
  406aea:	b2db      	uxtb	r3, r3
  406aec:	b25b      	sxtb	r3, r3
  406aee:	2b00      	cmp	r3, #0
  406af0:	db11      	blt.n	406b16 <main+0x67e>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  406af2:	4b54      	ldr	r3, [pc, #336]	; (406c44 <main+0x7ac>)
  406af4:	685b      	ldr	r3, [r3, #4]
  406af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406afa:	2b00      	cmp	r3, #0
  406afc:	d10b      	bne.n	406b16 <main+0x67e>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  406afe:	4b51      	ldr	r3, [pc, #324]	; (406c44 <main+0x7ac>)
  406b00:	685b      	ldr	r3, [r3, #4]
  406b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  406b06:	2b00      	cmp	r3, #0
  406b08:	d105      	bne.n	406b16 <main+0x67e>
  406b0a:	4b4e      	ldr	r3, [pc, #312]	; (406c44 <main+0x7ac>)
  406b0c:	685b      	ldr	r3, [r3, #4]
  406b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  406b12:	2b00      	cmp	r3, #0
  406b14:	d00a      	beq.n	406b2c <main+0x694>
								{
									display_text(IDX_SHELF4);
  406b16:	2008      	movs	r0, #8
  406b18:	4b4b      	ldr	r3, [pc, #300]	; (406c48 <main+0x7b0>)
  406b1a:	4798      	blx	r3
									displayChanged = 1;
  406b1c:	4b4b      	ldr	r3, [pc, #300]	; (406c4c <main+0x7b4>)
  406b1e:	2201      	movs	r2, #1
  406b20:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406b22:	2005      	movs	r0, #5
  406b24:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406b28:	4b49      	ldr	r3, [pc, #292]	; (406c50 <main+0x7b8>)
  406b2a:	4798      	blx	r3
								}
								errorDisplayState = 0;
  406b2c:	4b49      	ldr	r3, [pc, #292]	; (406c54 <main+0x7bc>)
  406b2e:	2200      	movs	r2, #0
  406b30:	701a      	strb	r2, [r3, #0]
								break;
  406b32:	e003      	b.n	406b3c <main+0x6a4>
							default:
								errorDisplayState = 0;
  406b34:	4b47      	ldr	r3, [pc, #284]	; (406c54 <main+0x7bc>)
  406b36:	2200      	movs	r2, #0
  406b38:	701a      	strb	r2, [r3, #0]
								break;
  406b3a:	bf00      	nop
						} //switch(errorDisplayState)
						
						if (displayChanged)
  406b3c:	4b43      	ldr	r3, [pc, #268]	; (406c4c <main+0x7b4>)
  406b3e:	781b      	ldrb	r3, [r3, #0]
  406b40:	2b00      	cmp	r3, #0
  406b42:	d003      	beq.n	406b4c <main+0x6b4>
						{
							displayChanged = 0;
  406b44:	4b41      	ldr	r3, [pc, #260]	; (406c4c <main+0x7b4>)
  406b46:	2200      	movs	r2, #0
  406b48:	701a      	strb	r2, [r3, #0]
							break; //get out of while loop and wait until we need to update the display again
  406b4a:	e000      	b.n	406b4e <main+0x6b6>
						}
						
					} //while(1)
  406b4c:	e6da      	b.n	406904 <main+0x46c>

				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
  406b4e:	e012      	b.n	406b76 <main+0x6de>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406b50:	2300      	movs	r3, #0
  406b52:	653b      	str	r3, [r7, #80]	; 0x50
  406b54:	e008      	b.n	406b68 <main+0x6d0>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  406b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406b58:	b2db      	uxtb	r3, r3
  406b5a:	4618      	mov	r0, r3
  406b5c:	2100      	movs	r1, #0
  406b5e:	4b3e      	ldr	r3, [pc, #248]	; (406c58 <main+0x7c0>)
  406b60:	4798      	blx	r3
				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406b64:	3301      	adds	r3, #1
  406b66:	653b      	str	r3, [r7, #80]	; 0x50
  406b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406b6a:	2b03      	cmp	r3, #3
  406b6c:	ddf3      	ble.n	406b56 <main+0x6be>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
  406b6e:	4b3b      	ldr	r3, [pc, #236]	; (406c5c <main+0x7c4>)
  406b70:	2200      	movs	r2, #0
  406b72:	701a      	strb	r2, [r3, #0]
				break;
  406b74:	bf00      	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
  406b76:	204d      	movs	r0, #77	; 0x4d
  406b78:	4b39      	ldr	r3, [pc, #228]	; (406c60 <main+0x7c8>)
  406b7a:	4798      	blx	r3
  406b7c:	4603      	mov	r3, r0
  406b7e:	f083 0301 	eor.w	r3, r3, #1
  406b82:	b2db      	uxtb	r3, r3
  406b84:	2b00      	cmp	r3, #0
  406b86:	d108      	bne.n	406b9a <main+0x702>
  406b88:	204e      	movs	r0, #78	; 0x4e
  406b8a:	4b35      	ldr	r3, [pc, #212]	; (406c60 <main+0x7c8>)
  406b8c:	4798      	blx	r3
  406b8e:	4603      	mov	r3, r0
  406b90:	f083 0301 	eor.w	r3, r3, #1
  406b94:	b2db      	uxtb	r3, r3
  406b96:	2b00      	cmp	r3, #0
  406b98:	d03d      	beq.n	406c16 <main+0x77e>
		
			if (firstDoorOpenSinceIdle)
  406b9a:	4b32      	ldr	r3, [pc, #200]	; (406c64 <main+0x7cc>)
  406b9c:	781b      	ldrb	r3, [r3, #0]
  406b9e:	2b00      	cmp	r3, #0
  406ba0:	d039      	beq.n	406c16 <main+0x77e>
			{
				door_latch_open_kill_all_shelves();
  406ba2:	4b31      	ldr	r3, [pc, #196]	; (406c68 <main+0x7d0>)
  406ba4:	4798      	blx	r3

//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
  406ba6:	4b2d      	ldr	r3, [pc, #180]	; (406c5c <main+0x7c4>)
  406ba8:	781b      	ldrb	r3, [r3, #0]
  406baa:	3b03      	subs	r3, #3
  406bac:	2b04      	cmp	r3, #4
  406bae:	d825      	bhi.n	406bfc <main+0x764>
  406bb0:	a201      	add	r2, pc, #4	; (adr r2, 406bb8 <main+0x720>)
  406bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406bb6:	bf00      	nop
  406bb8:	00406bcd 	.word	0x00406bcd
  406bbc:	00406bcd 	.word	0x00406bcd
  406bc0:	00406be1 	.word	0x00406be1
  406bc4:	00406be1 	.word	0x00406be1
  406bc8:	00406bf5 	.word	0x00406bf5
				{
					case STATE_START_SANITIZE:
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
  406bcc:	2003      	movs	r0, #3
  406bce:	4b1e      	ldr	r3, [pc, #120]	; (406c48 <main+0x7b0>)
  406bd0:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406bd2:	4b22      	ldr	r3, [pc, #136]	; (406c5c <main+0x7c4>)
  406bd4:	2208      	movs	r2, #8
  406bd6:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406bd8:	4824      	ldr	r0, [pc, #144]	; (406c6c <main+0x7d4>)
  406bda:	4b25      	ldr	r3, [pc, #148]	; (406c70 <main+0x7d8>)
  406bdc:	4798      	blx	r3
						break;
  406bde:	e017      	b.n	406c10 <main+0x778>
						
					case STATE_START_CLEAN:
					case STATE_CLEAN:
						display_text(IDX_CLEAN);
  406be0:	2001      	movs	r0, #1
  406be2:	4b19      	ldr	r3, [pc, #100]	; (406c48 <main+0x7b0>)
  406be4:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406be6:	4b1d      	ldr	r3, [pc, #116]	; (406c5c <main+0x7c4>)
  406be8:	2208      	movs	r2, #8
  406bea:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406bec:	481f      	ldr	r0, [pc, #124]	; (406c6c <main+0x7d4>)
  406bee:	4b20      	ldr	r3, [pc, #128]	; (406c70 <main+0x7d8>)
  406bf0:	4798      	blx	r3
						break;
  406bf2:	e00d      	b.n	406c10 <main+0x778>
						
					case STATE_CHASSIS_ERROR:
						display_text(IDX_ERROR);
  406bf4:	2004      	movs	r0, #4
  406bf6:	4b14      	ldr	r3, [pc, #80]	; (406c48 <main+0x7b0>)
  406bf8:	4798      	blx	r3
						break;
  406bfa:	e009      	b.n	406c10 <main+0x778>
					
					default:
						display_text(IDX_READY);
  406bfc:	2000      	movs	r0, #0
  406bfe:	4b12      	ldr	r3, [pc, #72]	; (406c48 <main+0x7b0>)
  406c00:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406c02:	4b16      	ldr	r3, [pc, #88]	; (406c5c <main+0x7c4>)
  406c04:	2208      	movs	r2, #8
  406c06:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406c08:	4818      	ldr	r0, [pc, #96]	; (406c6c <main+0x7d4>)
  406c0a:	4b19      	ldr	r3, [pc, #100]	; (406c70 <main+0x7d8>)
  406c0c:	4798      	blx	r3
						break;
  406c0e:	bf00      	nop
				}

				firstDoorOpenSinceIdle = 0;
  406c10:	4b14      	ldr	r3, [pc, #80]	; (406c64 <main+0x7cc>)
  406c12:	2200      	movs	r2, #0
  406c14:	701a      	strb	r2, [r3, #0]
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (timer_done(TMR_DEBUG))
  406c16:	2000      	movs	r0, #0
  406c18:	4b16      	ldr	r3, [pc, #88]	; (406c74 <main+0x7dc>)
  406c1a:	4798      	blx	r3
  406c1c:	4603      	mov	r3, r0
  406c1e:	2b00      	cmp	r3, #0
  406c20:	d00a      	beq.n	406c38 <main+0x7a0>
		{
			end_timer(TMR_DEBUG);
  406c22:	2000      	movs	r0, #0
  406c24:	4b14      	ldr	r3, [pc, #80]	; (406c78 <main+0x7e0>)
  406c26:	4798      	blx	r3
			start_timer(TMR_DEBUG, ((1 * SECONDS)/2));
  406c28:	2000      	movs	r0, #0
  406c2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  406c2e:	4b08      	ldr	r3, [pc, #32]	; (406c50 <main+0x7b8>)
  406c30:	4798      	blx	r3
			ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  406c32:	2050      	movs	r0, #80	; 0x50
  406c34:	4b11      	ldr	r3, [pc, #68]	; (406c7c <main+0x7e4>)
  406c36:	4798      	blx	r3
		}
		
		service_ecdbg_input();
  406c38:	4b11      	ldr	r3, [pc, #68]	; (406c80 <main+0x7e8>)
  406c3a:	4798      	blx	r3

	} //while(true)
  406c3c:	e473      	b.n	406526 <main+0x8e>
  406c3e:	bf00      	nop
  406c40:	204016c8 	.word	0x204016c8
  406c44:	204016b4 	.word	0x204016b4
  406c48:	00404339 	.word	0x00404339
  406c4c:	204009bb 	.word	0x204009bb
  406c50:	0040320d 	.word	0x0040320d
  406c54:	204009ba 	.word	0x204009ba
  406c58:	00402a45 	.word	0x00402a45
  406c5c:	204009b9 	.word	0x204009b9
  406c60:	00404265 	.word	0x00404265
  406c64:	20400014 	.word	0x20400014
  406c68:	004051b9 	.word	0x004051b9
  406c6c:	0040ceb4 	.word	0x0040ceb4
  406c70:	004026b1 	.word	0x004026b1
  406c74:	00403315 	.word	0x00403315
  406c78:	00403351 	.word	0x00403351
  406c7c:	004042b5 	.word	0x004042b5
  406c80:	00406091 	.word	0x00406091

00406c84 <__aeabi_drsub>:
  406c84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406c88:	e002      	b.n	406c90 <__adddf3>
  406c8a:	bf00      	nop

00406c8c <__aeabi_dsub>:
  406c8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406c90 <__adddf3>:
  406c90:	b530      	push	{r4, r5, lr}
  406c92:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406c96:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406c9a:	ea94 0f05 	teq	r4, r5
  406c9e:	bf08      	it	eq
  406ca0:	ea90 0f02 	teqeq	r0, r2
  406ca4:	bf1f      	itttt	ne
  406ca6:	ea54 0c00 	orrsne.w	ip, r4, r0
  406caa:	ea55 0c02 	orrsne.w	ip, r5, r2
  406cae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406cb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406cb6:	f000 80e2 	beq.w	406e7e <__adddf3+0x1ee>
  406cba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406cbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406cc2:	bfb8      	it	lt
  406cc4:	426d      	neglt	r5, r5
  406cc6:	dd0c      	ble.n	406ce2 <__adddf3+0x52>
  406cc8:	442c      	add	r4, r5
  406cca:	ea80 0202 	eor.w	r2, r0, r2
  406cce:	ea81 0303 	eor.w	r3, r1, r3
  406cd2:	ea82 0000 	eor.w	r0, r2, r0
  406cd6:	ea83 0101 	eor.w	r1, r3, r1
  406cda:	ea80 0202 	eor.w	r2, r0, r2
  406cde:	ea81 0303 	eor.w	r3, r1, r3
  406ce2:	2d36      	cmp	r5, #54	; 0x36
  406ce4:	bf88      	it	hi
  406ce6:	bd30      	pophi	{r4, r5, pc}
  406ce8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406cec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406cf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406cf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406cf8:	d002      	beq.n	406d00 <__adddf3+0x70>
  406cfa:	4240      	negs	r0, r0
  406cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406d00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406d04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406d08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406d0c:	d002      	beq.n	406d14 <__adddf3+0x84>
  406d0e:	4252      	negs	r2, r2
  406d10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406d14:	ea94 0f05 	teq	r4, r5
  406d18:	f000 80a7 	beq.w	406e6a <__adddf3+0x1da>
  406d1c:	f1a4 0401 	sub.w	r4, r4, #1
  406d20:	f1d5 0e20 	rsbs	lr, r5, #32
  406d24:	db0d      	blt.n	406d42 <__adddf3+0xb2>
  406d26:	fa02 fc0e 	lsl.w	ip, r2, lr
  406d2a:	fa22 f205 	lsr.w	r2, r2, r5
  406d2e:	1880      	adds	r0, r0, r2
  406d30:	f141 0100 	adc.w	r1, r1, #0
  406d34:	fa03 f20e 	lsl.w	r2, r3, lr
  406d38:	1880      	adds	r0, r0, r2
  406d3a:	fa43 f305 	asr.w	r3, r3, r5
  406d3e:	4159      	adcs	r1, r3
  406d40:	e00e      	b.n	406d60 <__adddf3+0xd0>
  406d42:	f1a5 0520 	sub.w	r5, r5, #32
  406d46:	f10e 0e20 	add.w	lr, lr, #32
  406d4a:	2a01      	cmp	r2, #1
  406d4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  406d50:	bf28      	it	cs
  406d52:	f04c 0c02 	orrcs.w	ip, ip, #2
  406d56:	fa43 f305 	asr.w	r3, r3, r5
  406d5a:	18c0      	adds	r0, r0, r3
  406d5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406d60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406d64:	d507      	bpl.n	406d76 <__adddf3+0xe6>
  406d66:	f04f 0e00 	mov.w	lr, #0
  406d6a:	f1dc 0c00 	rsbs	ip, ip, #0
  406d6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  406d72:	eb6e 0101 	sbc.w	r1, lr, r1
  406d76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406d7a:	d31b      	bcc.n	406db4 <__adddf3+0x124>
  406d7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406d80:	d30c      	bcc.n	406d9c <__adddf3+0x10c>
  406d82:	0849      	lsrs	r1, r1, #1
  406d84:	ea5f 0030 	movs.w	r0, r0, rrx
  406d88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406d8c:	f104 0401 	add.w	r4, r4, #1
  406d90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406d94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406d98:	f080 809a 	bcs.w	406ed0 <__adddf3+0x240>
  406d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406da0:	bf08      	it	eq
  406da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406da6:	f150 0000 	adcs.w	r0, r0, #0
  406daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406dae:	ea41 0105 	orr.w	r1, r1, r5
  406db2:	bd30      	pop	{r4, r5, pc}
  406db4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406db8:	4140      	adcs	r0, r0
  406dba:	eb41 0101 	adc.w	r1, r1, r1
  406dbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406dc2:	f1a4 0401 	sub.w	r4, r4, #1
  406dc6:	d1e9      	bne.n	406d9c <__adddf3+0x10c>
  406dc8:	f091 0f00 	teq	r1, #0
  406dcc:	bf04      	itt	eq
  406dce:	4601      	moveq	r1, r0
  406dd0:	2000      	moveq	r0, #0
  406dd2:	fab1 f381 	clz	r3, r1
  406dd6:	bf08      	it	eq
  406dd8:	3320      	addeq	r3, #32
  406dda:	f1a3 030b 	sub.w	r3, r3, #11
  406dde:	f1b3 0220 	subs.w	r2, r3, #32
  406de2:	da0c      	bge.n	406dfe <__adddf3+0x16e>
  406de4:	320c      	adds	r2, #12
  406de6:	dd08      	ble.n	406dfa <__adddf3+0x16a>
  406de8:	f102 0c14 	add.w	ip, r2, #20
  406dec:	f1c2 020c 	rsb	r2, r2, #12
  406df0:	fa01 f00c 	lsl.w	r0, r1, ip
  406df4:	fa21 f102 	lsr.w	r1, r1, r2
  406df8:	e00c      	b.n	406e14 <__adddf3+0x184>
  406dfa:	f102 0214 	add.w	r2, r2, #20
  406dfe:	bfd8      	it	le
  406e00:	f1c2 0c20 	rsble	ip, r2, #32
  406e04:	fa01 f102 	lsl.w	r1, r1, r2
  406e08:	fa20 fc0c 	lsr.w	ip, r0, ip
  406e0c:	bfdc      	itt	le
  406e0e:	ea41 010c 	orrle.w	r1, r1, ip
  406e12:	4090      	lslle	r0, r2
  406e14:	1ae4      	subs	r4, r4, r3
  406e16:	bfa2      	ittt	ge
  406e18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406e1c:	4329      	orrge	r1, r5
  406e1e:	bd30      	popge	{r4, r5, pc}
  406e20:	ea6f 0404 	mvn.w	r4, r4
  406e24:	3c1f      	subs	r4, #31
  406e26:	da1c      	bge.n	406e62 <__adddf3+0x1d2>
  406e28:	340c      	adds	r4, #12
  406e2a:	dc0e      	bgt.n	406e4a <__adddf3+0x1ba>
  406e2c:	f104 0414 	add.w	r4, r4, #20
  406e30:	f1c4 0220 	rsb	r2, r4, #32
  406e34:	fa20 f004 	lsr.w	r0, r0, r4
  406e38:	fa01 f302 	lsl.w	r3, r1, r2
  406e3c:	ea40 0003 	orr.w	r0, r0, r3
  406e40:	fa21 f304 	lsr.w	r3, r1, r4
  406e44:	ea45 0103 	orr.w	r1, r5, r3
  406e48:	bd30      	pop	{r4, r5, pc}
  406e4a:	f1c4 040c 	rsb	r4, r4, #12
  406e4e:	f1c4 0220 	rsb	r2, r4, #32
  406e52:	fa20 f002 	lsr.w	r0, r0, r2
  406e56:	fa01 f304 	lsl.w	r3, r1, r4
  406e5a:	ea40 0003 	orr.w	r0, r0, r3
  406e5e:	4629      	mov	r1, r5
  406e60:	bd30      	pop	{r4, r5, pc}
  406e62:	fa21 f004 	lsr.w	r0, r1, r4
  406e66:	4629      	mov	r1, r5
  406e68:	bd30      	pop	{r4, r5, pc}
  406e6a:	f094 0f00 	teq	r4, #0
  406e6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406e72:	bf06      	itte	eq
  406e74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406e78:	3401      	addeq	r4, #1
  406e7a:	3d01      	subne	r5, #1
  406e7c:	e74e      	b.n	406d1c <__adddf3+0x8c>
  406e7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406e82:	bf18      	it	ne
  406e84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406e88:	d029      	beq.n	406ede <__adddf3+0x24e>
  406e8a:	ea94 0f05 	teq	r4, r5
  406e8e:	bf08      	it	eq
  406e90:	ea90 0f02 	teqeq	r0, r2
  406e94:	d005      	beq.n	406ea2 <__adddf3+0x212>
  406e96:	ea54 0c00 	orrs.w	ip, r4, r0
  406e9a:	bf04      	itt	eq
  406e9c:	4619      	moveq	r1, r3
  406e9e:	4610      	moveq	r0, r2
  406ea0:	bd30      	pop	{r4, r5, pc}
  406ea2:	ea91 0f03 	teq	r1, r3
  406ea6:	bf1e      	ittt	ne
  406ea8:	2100      	movne	r1, #0
  406eaa:	2000      	movne	r0, #0
  406eac:	bd30      	popne	{r4, r5, pc}
  406eae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406eb2:	d105      	bne.n	406ec0 <__adddf3+0x230>
  406eb4:	0040      	lsls	r0, r0, #1
  406eb6:	4149      	adcs	r1, r1
  406eb8:	bf28      	it	cs
  406eba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406ebe:	bd30      	pop	{r4, r5, pc}
  406ec0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406ec4:	bf3c      	itt	cc
  406ec6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406eca:	bd30      	popcc	{r4, r5, pc}
  406ecc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406ed0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406ed4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406ed8:	f04f 0000 	mov.w	r0, #0
  406edc:	bd30      	pop	{r4, r5, pc}
  406ede:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406ee2:	bf1a      	itte	ne
  406ee4:	4619      	movne	r1, r3
  406ee6:	4610      	movne	r0, r2
  406ee8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406eec:	bf1c      	itt	ne
  406eee:	460b      	movne	r3, r1
  406ef0:	4602      	movne	r2, r0
  406ef2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406ef6:	bf06      	itte	eq
  406ef8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406efc:	ea91 0f03 	teqeq	r1, r3
  406f00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406f04:	bd30      	pop	{r4, r5, pc}
  406f06:	bf00      	nop

00406f08 <__aeabi_ui2d>:
  406f08:	f090 0f00 	teq	r0, #0
  406f0c:	bf04      	itt	eq
  406f0e:	2100      	moveq	r1, #0
  406f10:	4770      	bxeq	lr
  406f12:	b530      	push	{r4, r5, lr}
  406f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f1c:	f04f 0500 	mov.w	r5, #0
  406f20:	f04f 0100 	mov.w	r1, #0
  406f24:	e750      	b.n	406dc8 <__adddf3+0x138>
  406f26:	bf00      	nop

00406f28 <__aeabi_i2d>:
  406f28:	f090 0f00 	teq	r0, #0
  406f2c:	bf04      	itt	eq
  406f2e:	2100      	moveq	r1, #0
  406f30:	4770      	bxeq	lr
  406f32:	b530      	push	{r4, r5, lr}
  406f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406f40:	bf48      	it	mi
  406f42:	4240      	negmi	r0, r0
  406f44:	f04f 0100 	mov.w	r1, #0
  406f48:	e73e      	b.n	406dc8 <__adddf3+0x138>
  406f4a:	bf00      	nop

00406f4c <__aeabi_f2d>:
  406f4c:	0042      	lsls	r2, r0, #1
  406f4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406f52:	ea4f 0131 	mov.w	r1, r1, rrx
  406f56:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406f5a:	bf1f      	itttt	ne
  406f5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406f60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406f64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406f68:	4770      	bxne	lr
  406f6a:	f092 0f00 	teq	r2, #0
  406f6e:	bf14      	ite	ne
  406f70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406f74:	4770      	bxeq	lr
  406f76:	b530      	push	{r4, r5, lr}
  406f78:	f44f 7460 	mov.w	r4, #896	; 0x380
  406f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406f84:	e720      	b.n	406dc8 <__adddf3+0x138>
  406f86:	bf00      	nop

00406f88 <__aeabi_ul2d>:
  406f88:	ea50 0201 	orrs.w	r2, r0, r1
  406f8c:	bf08      	it	eq
  406f8e:	4770      	bxeq	lr
  406f90:	b530      	push	{r4, r5, lr}
  406f92:	f04f 0500 	mov.w	r5, #0
  406f96:	e00a      	b.n	406fae <__aeabi_l2d+0x16>

00406f98 <__aeabi_l2d>:
  406f98:	ea50 0201 	orrs.w	r2, r0, r1
  406f9c:	bf08      	it	eq
  406f9e:	4770      	bxeq	lr
  406fa0:	b530      	push	{r4, r5, lr}
  406fa2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406fa6:	d502      	bpl.n	406fae <__aeabi_l2d+0x16>
  406fa8:	4240      	negs	r0, r0
  406faa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406fae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406fb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406fba:	f43f aedc 	beq.w	406d76 <__adddf3+0xe6>
  406fbe:	f04f 0203 	mov.w	r2, #3
  406fc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406fc6:	bf18      	it	ne
  406fc8:	3203      	addne	r2, #3
  406fca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406fce:	bf18      	it	ne
  406fd0:	3203      	addne	r2, #3
  406fd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  406fd6:	f1c2 0320 	rsb	r3, r2, #32
  406fda:	fa00 fc03 	lsl.w	ip, r0, r3
  406fde:	fa20 f002 	lsr.w	r0, r0, r2
  406fe2:	fa01 fe03 	lsl.w	lr, r1, r3
  406fe6:	ea40 000e 	orr.w	r0, r0, lr
  406fea:	fa21 f102 	lsr.w	r1, r1, r2
  406fee:	4414      	add	r4, r2
  406ff0:	e6c1      	b.n	406d76 <__adddf3+0xe6>
  406ff2:	bf00      	nop

00406ff4 <__aeabi_dmul>:
  406ff4:	b570      	push	{r4, r5, r6, lr}
  406ff6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406ffa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406ffe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407002:	bf1d      	ittte	ne
  407004:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407008:	ea94 0f0c 	teqne	r4, ip
  40700c:	ea95 0f0c 	teqne	r5, ip
  407010:	f000 f8de 	bleq	4071d0 <__aeabi_dmul+0x1dc>
  407014:	442c      	add	r4, r5
  407016:	ea81 0603 	eor.w	r6, r1, r3
  40701a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40701e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407022:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407026:	bf18      	it	ne
  407028:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40702c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407034:	d038      	beq.n	4070a8 <__aeabi_dmul+0xb4>
  407036:	fba0 ce02 	umull	ip, lr, r0, r2
  40703a:	f04f 0500 	mov.w	r5, #0
  40703e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407042:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407046:	fbe0 e503 	umlal	lr, r5, r0, r3
  40704a:	f04f 0600 	mov.w	r6, #0
  40704e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407052:	f09c 0f00 	teq	ip, #0
  407056:	bf18      	it	ne
  407058:	f04e 0e01 	orrne.w	lr, lr, #1
  40705c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407060:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407064:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407068:	d204      	bcs.n	407074 <__aeabi_dmul+0x80>
  40706a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40706e:	416d      	adcs	r5, r5
  407070:	eb46 0606 	adc.w	r6, r6, r6
  407074:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407078:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40707c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407080:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407084:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407088:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40708c:	bf88      	it	hi
  40708e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407092:	d81e      	bhi.n	4070d2 <__aeabi_dmul+0xde>
  407094:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407098:	bf08      	it	eq
  40709a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40709e:	f150 0000 	adcs.w	r0, r0, #0
  4070a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4070a6:	bd70      	pop	{r4, r5, r6, pc}
  4070a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4070ac:	ea46 0101 	orr.w	r1, r6, r1
  4070b0:	ea40 0002 	orr.w	r0, r0, r2
  4070b4:	ea81 0103 	eor.w	r1, r1, r3
  4070b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4070bc:	bfc2      	ittt	gt
  4070be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4070c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4070c6:	bd70      	popgt	{r4, r5, r6, pc}
  4070c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4070cc:	f04f 0e00 	mov.w	lr, #0
  4070d0:	3c01      	subs	r4, #1
  4070d2:	f300 80ab 	bgt.w	40722c <__aeabi_dmul+0x238>
  4070d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4070da:	bfde      	ittt	le
  4070dc:	2000      	movle	r0, #0
  4070de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4070e2:	bd70      	pople	{r4, r5, r6, pc}
  4070e4:	f1c4 0400 	rsb	r4, r4, #0
  4070e8:	3c20      	subs	r4, #32
  4070ea:	da35      	bge.n	407158 <__aeabi_dmul+0x164>
  4070ec:	340c      	adds	r4, #12
  4070ee:	dc1b      	bgt.n	407128 <__aeabi_dmul+0x134>
  4070f0:	f104 0414 	add.w	r4, r4, #20
  4070f4:	f1c4 0520 	rsb	r5, r4, #32
  4070f8:	fa00 f305 	lsl.w	r3, r0, r5
  4070fc:	fa20 f004 	lsr.w	r0, r0, r4
  407100:	fa01 f205 	lsl.w	r2, r1, r5
  407104:	ea40 0002 	orr.w	r0, r0, r2
  407108:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40710c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407110:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407114:	fa21 f604 	lsr.w	r6, r1, r4
  407118:	eb42 0106 	adc.w	r1, r2, r6
  40711c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407120:	bf08      	it	eq
  407122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407126:	bd70      	pop	{r4, r5, r6, pc}
  407128:	f1c4 040c 	rsb	r4, r4, #12
  40712c:	f1c4 0520 	rsb	r5, r4, #32
  407130:	fa00 f304 	lsl.w	r3, r0, r4
  407134:	fa20 f005 	lsr.w	r0, r0, r5
  407138:	fa01 f204 	lsl.w	r2, r1, r4
  40713c:	ea40 0002 	orr.w	r0, r0, r2
  407140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407144:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407148:	f141 0100 	adc.w	r1, r1, #0
  40714c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407150:	bf08      	it	eq
  407152:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407156:	bd70      	pop	{r4, r5, r6, pc}
  407158:	f1c4 0520 	rsb	r5, r4, #32
  40715c:	fa00 f205 	lsl.w	r2, r0, r5
  407160:	ea4e 0e02 	orr.w	lr, lr, r2
  407164:	fa20 f304 	lsr.w	r3, r0, r4
  407168:	fa01 f205 	lsl.w	r2, r1, r5
  40716c:	ea43 0302 	orr.w	r3, r3, r2
  407170:	fa21 f004 	lsr.w	r0, r1, r4
  407174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407178:	fa21 f204 	lsr.w	r2, r1, r4
  40717c:	ea20 0002 	bic.w	r0, r0, r2
  407180:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407188:	bf08      	it	eq
  40718a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40718e:	bd70      	pop	{r4, r5, r6, pc}
  407190:	f094 0f00 	teq	r4, #0
  407194:	d10f      	bne.n	4071b6 <__aeabi_dmul+0x1c2>
  407196:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40719a:	0040      	lsls	r0, r0, #1
  40719c:	eb41 0101 	adc.w	r1, r1, r1
  4071a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4071a4:	bf08      	it	eq
  4071a6:	3c01      	subeq	r4, #1
  4071a8:	d0f7      	beq.n	40719a <__aeabi_dmul+0x1a6>
  4071aa:	ea41 0106 	orr.w	r1, r1, r6
  4071ae:	f095 0f00 	teq	r5, #0
  4071b2:	bf18      	it	ne
  4071b4:	4770      	bxne	lr
  4071b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4071ba:	0052      	lsls	r2, r2, #1
  4071bc:	eb43 0303 	adc.w	r3, r3, r3
  4071c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4071c4:	bf08      	it	eq
  4071c6:	3d01      	subeq	r5, #1
  4071c8:	d0f7      	beq.n	4071ba <__aeabi_dmul+0x1c6>
  4071ca:	ea43 0306 	orr.w	r3, r3, r6
  4071ce:	4770      	bx	lr
  4071d0:	ea94 0f0c 	teq	r4, ip
  4071d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4071d8:	bf18      	it	ne
  4071da:	ea95 0f0c 	teqne	r5, ip
  4071de:	d00c      	beq.n	4071fa <__aeabi_dmul+0x206>
  4071e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4071e4:	bf18      	it	ne
  4071e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4071ea:	d1d1      	bne.n	407190 <__aeabi_dmul+0x19c>
  4071ec:	ea81 0103 	eor.w	r1, r1, r3
  4071f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071f4:	f04f 0000 	mov.w	r0, #0
  4071f8:	bd70      	pop	{r4, r5, r6, pc}
  4071fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4071fe:	bf06      	itte	eq
  407200:	4610      	moveq	r0, r2
  407202:	4619      	moveq	r1, r3
  407204:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407208:	d019      	beq.n	40723e <__aeabi_dmul+0x24a>
  40720a:	ea94 0f0c 	teq	r4, ip
  40720e:	d102      	bne.n	407216 <__aeabi_dmul+0x222>
  407210:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407214:	d113      	bne.n	40723e <__aeabi_dmul+0x24a>
  407216:	ea95 0f0c 	teq	r5, ip
  40721a:	d105      	bne.n	407228 <__aeabi_dmul+0x234>
  40721c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407220:	bf1c      	itt	ne
  407222:	4610      	movne	r0, r2
  407224:	4619      	movne	r1, r3
  407226:	d10a      	bne.n	40723e <__aeabi_dmul+0x24a>
  407228:	ea81 0103 	eor.w	r1, r1, r3
  40722c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407230:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407234:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407238:	f04f 0000 	mov.w	r0, #0
  40723c:	bd70      	pop	{r4, r5, r6, pc}
  40723e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407242:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407246:	bd70      	pop	{r4, r5, r6, pc}

00407248 <__aeabi_ddiv>:
  407248:	b570      	push	{r4, r5, r6, lr}
  40724a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40724e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407252:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407256:	bf1d      	ittte	ne
  407258:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40725c:	ea94 0f0c 	teqne	r4, ip
  407260:	ea95 0f0c 	teqne	r5, ip
  407264:	f000 f8a7 	bleq	4073b6 <__aeabi_ddiv+0x16e>
  407268:	eba4 0405 	sub.w	r4, r4, r5
  40726c:	ea81 0e03 	eor.w	lr, r1, r3
  407270:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407274:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407278:	f000 8088 	beq.w	40738c <__aeabi_ddiv+0x144>
  40727c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407280:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407284:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407288:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40728c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407290:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407294:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407298:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40729c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4072a0:	429d      	cmp	r5, r3
  4072a2:	bf08      	it	eq
  4072a4:	4296      	cmpeq	r6, r2
  4072a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4072aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4072ae:	d202      	bcs.n	4072b6 <__aeabi_ddiv+0x6e>
  4072b0:	085b      	lsrs	r3, r3, #1
  4072b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4072b6:	1ab6      	subs	r6, r6, r2
  4072b8:	eb65 0503 	sbc.w	r5, r5, r3
  4072bc:	085b      	lsrs	r3, r3, #1
  4072be:	ea4f 0232 	mov.w	r2, r2, rrx
  4072c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4072c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4072ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4072ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4072d2:	bf22      	ittt	cs
  4072d4:	1ab6      	subcs	r6, r6, r2
  4072d6:	4675      	movcs	r5, lr
  4072d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4072dc:	085b      	lsrs	r3, r3, #1
  4072de:	ea4f 0232 	mov.w	r2, r2, rrx
  4072e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4072e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4072ea:	bf22      	ittt	cs
  4072ec:	1ab6      	subcs	r6, r6, r2
  4072ee:	4675      	movcs	r5, lr
  4072f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4072f4:	085b      	lsrs	r3, r3, #1
  4072f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4072fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4072fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407302:	bf22      	ittt	cs
  407304:	1ab6      	subcs	r6, r6, r2
  407306:	4675      	movcs	r5, lr
  407308:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40730c:	085b      	lsrs	r3, r3, #1
  40730e:	ea4f 0232 	mov.w	r2, r2, rrx
  407312:	ebb6 0e02 	subs.w	lr, r6, r2
  407316:	eb75 0e03 	sbcs.w	lr, r5, r3
  40731a:	bf22      	ittt	cs
  40731c:	1ab6      	subcs	r6, r6, r2
  40731e:	4675      	movcs	r5, lr
  407320:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407324:	ea55 0e06 	orrs.w	lr, r5, r6
  407328:	d018      	beq.n	40735c <__aeabi_ddiv+0x114>
  40732a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40732e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407332:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407336:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40733a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40733e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407342:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407346:	d1c0      	bne.n	4072ca <__aeabi_ddiv+0x82>
  407348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40734c:	d10b      	bne.n	407366 <__aeabi_ddiv+0x11e>
  40734e:	ea41 0100 	orr.w	r1, r1, r0
  407352:	f04f 0000 	mov.w	r0, #0
  407356:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40735a:	e7b6      	b.n	4072ca <__aeabi_ddiv+0x82>
  40735c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407360:	bf04      	itt	eq
  407362:	4301      	orreq	r1, r0
  407364:	2000      	moveq	r0, #0
  407366:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40736a:	bf88      	it	hi
  40736c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407370:	f63f aeaf 	bhi.w	4070d2 <__aeabi_dmul+0xde>
  407374:	ebb5 0c03 	subs.w	ip, r5, r3
  407378:	bf04      	itt	eq
  40737a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40737e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407382:	f150 0000 	adcs.w	r0, r0, #0
  407386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40738a:	bd70      	pop	{r4, r5, r6, pc}
  40738c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407390:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407394:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407398:	bfc2      	ittt	gt
  40739a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40739e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4073a2:	bd70      	popgt	{r4, r5, r6, pc}
  4073a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4073a8:	f04f 0e00 	mov.w	lr, #0
  4073ac:	3c01      	subs	r4, #1
  4073ae:	e690      	b.n	4070d2 <__aeabi_dmul+0xde>
  4073b0:	ea45 0e06 	orr.w	lr, r5, r6
  4073b4:	e68d      	b.n	4070d2 <__aeabi_dmul+0xde>
  4073b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4073ba:	ea94 0f0c 	teq	r4, ip
  4073be:	bf08      	it	eq
  4073c0:	ea95 0f0c 	teqeq	r5, ip
  4073c4:	f43f af3b 	beq.w	40723e <__aeabi_dmul+0x24a>
  4073c8:	ea94 0f0c 	teq	r4, ip
  4073cc:	d10a      	bne.n	4073e4 <__aeabi_ddiv+0x19c>
  4073ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4073d2:	f47f af34 	bne.w	40723e <__aeabi_dmul+0x24a>
  4073d6:	ea95 0f0c 	teq	r5, ip
  4073da:	f47f af25 	bne.w	407228 <__aeabi_dmul+0x234>
  4073de:	4610      	mov	r0, r2
  4073e0:	4619      	mov	r1, r3
  4073e2:	e72c      	b.n	40723e <__aeabi_dmul+0x24a>
  4073e4:	ea95 0f0c 	teq	r5, ip
  4073e8:	d106      	bne.n	4073f8 <__aeabi_ddiv+0x1b0>
  4073ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4073ee:	f43f aefd 	beq.w	4071ec <__aeabi_dmul+0x1f8>
  4073f2:	4610      	mov	r0, r2
  4073f4:	4619      	mov	r1, r3
  4073f6:	e722      	b.n	40723e <__aeabi_dmul+0x24a>
  4073f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4073fc:	bf18      	it	ne
  4073fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407402:	f47f aec5 	bne.w	407190 <__aeabi_dmul+0x19c>
  407406:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40740a:	f47f af0d 	bne.w	407228 <__aeabi_dmul+0x234>
  40740e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407412:	f47f aeeb 	bne.w	4071ec <__aeabi_dmul+0x1f8>
  407416:	e712      	b.n	40723e <__aeabi_dmul+0x24a>

00407418 <__aeabi_d2f>:
  407418:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40741c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407420:	bf24      	itt	cs
  407422:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  407426:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40742a:	d90d      	bls.n	407448 <__aeabi_d2f+0x30>
  40742c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407430:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  407434:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  407438:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40743c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  407440:	bf08      	it	eq
  407442:	f020 0001 	biceq.w	r0, r0, #1
  407446:	4770      	bx	lr
  407448:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40744c:	d121      	bne.n	407492 <__aeabi_d2f+0x7a>
  40744e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  407452:	bfbc      	itt	lt
  407454:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  407458:	4770      	bxlt	lr
  40745a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40745e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  407462:	f1c2 0218 	rsb	r2, r2, #24
  407466:	f1c2 0c20 	rsb	ip, r2, #32
  40746a:	fa10 f30c 	lsls.w	r3, r0, ip
  40746e:	fa20 f002 	lsr.w	r0, r0, r2
  407472:	bf18      	it	ne
  407474:	f040 0001 	orrne.w	r0, r0, #1
  407478:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40747c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407480:	fa03 fc0c 	lsl.w	ip, r3, ip
  407484:	ea40 000c 	orr.w	r0, r0, ip
  407488:	fa23 f302 	lsr.w	r3, r3, r2
  40748c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407490:	e7cc      	b.n	40742c <__aeabi_d2f+0x14>
  407492:	ea7f 5362 	mvns.w	r3, r2, asr #21
  407496:	d107      	bne.n	4074a8 <__aeabi_d2f+0x90>
  407498:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40749c:	bf1e      	ittt	ne
  40749e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4074a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4074a6:	4770      	bxne	lr
  4074a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4074ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4074b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4074b4:	4770      	bx	lr
  4074b6:	bf00      	nop

004074b8 <__libc_init_array>:
  4074b8:	b570      	push	{r4, r5, r6, lr}
  4074ba:	4e0f      	ldr	r6, [pc, #60]	; (4074f8 <__libc_init_array+0x40>)
  4074bc:	4d0f      	ldr	r5, [pc, #60]	; (4074fc <__libc_init_array+0x44>)
  4074be:	1b76      	subs	r6, r6, r5
  4074c0:	10b6      	asrs	r6, r6, #2
  4074c2:	bf18      	it	ne
  4074c4:	2400      	movne	r4, #0
  4074c6:	d005      	beq.n	4074d4 <__libc_init_array+0x1c>
  4074c8:	3401      	adds	r4, #1
  4074ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4074ce:	4798      	blx	r3
  4074d0:	42a6      	cmp	r6, r4
  4074d2:	d1f9      	bne.n	4074c8 <__libc_init_array+0x10>
  4074d4:	4e0a      	ldr	r6, [pc, #40]	; (407500 <__libc_init_array+0x48>)
  4074d6:	f005 fe4f 	bl	40d178 <_init>
  4074da:	4d0a      	ldr	r5, [pc, #40]	; (407504 <__libc_init_array+0x4c>)
  4074dc:	1b76      	subs	r6, r6, r5
  4074de:	10b6      	asrs	r6, r6, #2
  4074e0:	bf18      	it	ne
  4074e2:	2400      	movne	r4, #0
  4074e4:	d006      	beq.n	4074f4 <__libc_init_array+0x3c>
  4074e6:	3401      	adds	r4, #1
  4074e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4074ec:	4798      	blx	r3
  4074ee:	42a6      	cmp	r6, r4
  4074f0:	d1f9      	bne.n	4074e6 <__libc_init_array+0x2e>
  4074f2:	bd70      	pop	{r4, r5, r6, pc}
  4074f4:	bd70      	pop	{r4, r5, r6, pc}
  4074f6:	bf00      	nop
  4074f8:	0040d184 	.word	0x0040d184
  4074fc:	0040d184 	.word	0x0040d184
  407500:	0040d18c 	.word	0x0040d18c
  407504:	0040d184 	.word	0x0040d184

00407508 <memset>:
  407508:	0783      	lsls	r3, r0, #30
  40750a:	b470      	push	{r4, r5, r6}
  40750c:	d049      	beq.n	4075a2 <memset+0x9a>
  40750e:	1e54      	subs	r4, r2, #1
  407510:	2a00      	cmp	r2, #0
  407512:	d044      	beq.n	40759e <memset+0x96>
  407514:	b2cd      	uxtb	r5, r1
  407516:	4603      	mov	r3, r0
  407518:	e002      	b.n	407520 <memset+0x18>
  40751a:	2c00      	cmp	r4, #0
  40751c:	d03f      	beq.n	40759e <memset+0x96>
  40751e:	4614      	mov	r4, r2
  407520:	f803 5b01 	strb.w	r5, [r3], #1
  407524:	f013 0f03 	tst.w	r3, #3
  407528:	f104 32ff 	add.w	r2, r4, #4294967295
  40752c:	d1f5      	bne.n	40751a <memset+0x12>
  40752e:	2c03      	cmp	r4, #3
  407530:	d92e      	bls.n	407590 <memset+0x88>
  407532:	b2cd      	uxtb	r5, r1
  407534:	2c0f      	cmp	r4, #15
  407536:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40753a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40753e:	d919      	bls.n	407574 <memset+0x6c>
  407540:	f103 0210 	add.w	r2, r3, #16
  407544:	4626      	mov	r6, r4
  407546:	3e10      	subs	r6, #16
  407548:	f842 5c10 	str.w	r5, [r2, #-16]
  40754c:	f842 5c0c 	str.w	r5, [r2, #-12]
  407550:	3210      	adds	r2, #16
  407552:	2e0f      	cmp	r6, #15
  407554:	f842 5c18 	str.w	r5, [r2, #-24]
  407558:	f842 5c14 	str.w	r5, [r2, #-20]
  40755c:	d8f3      	bhi.n	407546 <memset+0x3e>
  40755e:	f1a4 0210 	sub.w	r2, r4, #16
  407562:	f004 040f 	and.w	r4, r4, #15
  407566:	f022 020f 	bic.w	r2, r2, #15
  40756a:	2c03      	cmp	r4, #3
  40756c:	f102 0210 	add.w	r2, r2, #16
  407570:	4413      	add	r3, r2
  407572:	d90d      	bls.n	407590 <memset+0x88>
  407574:	461e      	mov	r6, r3
  407576:	4622      	mov	r2, r4
  407578:	3a04      	subs	r2, #4
  40757a:	f846 5b04 	str.w	r5, [r6], #4
  40757e:	2a03      	cmp	r2, #3
  407580:	d8fa      	bhi.n	407578 <memset+0x70>
  407582:	1f22      	subs	r2, r4, #4
  407584:	f004 0403 	and.w	r4, r4, #3
  407588:	f022 0203 	bic.w	r2, r2, #3
  40758c:	3204      	adds	r2, #4
  40758e:	4413      	add	r3, r2
  407590:	b12c      	cbz	r4, 40759e <memset+0x96>
  407592:	b2c9      	uxtb	r1, r1
  407594:	441c      	add	r4, r3
  407596:	f803 1b01 	strb.w	r1, [r3], #1
  40759a:	42a3      	cmp	r3, r4
  40759c:	d1fb      	bne.n	407596 <memset+0x8e>
  40759e:	bc70      	pop	{r4, r5, r6}
  4075a0:	4770      	bx	lr
  4075a2:	4614      	mov	r4, r2
  4075a4:	4603      	mov	r3, r0
  4075a6:	e7c2      	b.n	40752e <memset+0x26>

004075a8 <_puts_r>:
  4075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075aa:	4604      	mov	r4, r0
  4075ac:	b089      	sub	sp, #36	; 0x24
  4075ae:	4608      	mov	r0, r1
  4075b0:	460d      	mov	r5, r1
  4075b2:	f000 f8dd 	bl	407770 <strlen>
  4075b6:	68a3      	ldr	r3, [r4, #8]
  4075b8:	2701      	movs	r7, #1
  4075ba:	2102      	movs	r1, #2
  4075bc:	899a      	ldrh	r2, [r3, #12]
  4075be:	ae04      	add	r6, sp, #16
  4075c0:	eb00 0c07 	add.w	ip, r0, r7
  4075c4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 407604 <_puts_r+0x5c>
  4075c8:	9102      	str	r1, [sp, #8]
  4075ca:	0491      	lsls	r1, r2, #18
  4075cc:	9504      	str	r5, [sp, #16]
  4075ce:	9005      	str	r0, [sp, #20]
  4075d0:	f8cd c00c 	str.w	ip, [sp, #12]
  4075d4:	f8cd e018 	str.w	lr, [sp, #24]
  4075d8:	9707      	str	r7, [sp, #28]
  4075da:	9601      	str	r6, [sp, #4]
  4075dc:	d406      	bmi.n	4075ec <_puts_r+0x44>
  4075de:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4075e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4075e4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4075e8:	819a      	strh	r2, [r3, #12]
  4075ea:	6659      	str	r1, [r3, #100]	; 0x64
  4075ec:	4620      	mov	r0, r4
  4075ee:	4619      	mov	r1, r3
  4075f0:	aa01      	add	r2, sp, #4
  4075f2:	f002 fed1 	bl	40a398 <__sfvwrite_r>
  4075f6:	2800      	cmp	r0, #0
  4075f8:	bf14      	ite	ne
  4075fa:	f04f 30ff 	movne.w	r0, #4294967295
  4075fe:	200a      	moveq	r0, #10
  407600:	b009      	add	sp, #36	; 0x24
  407602:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407604:	0040cff4 	.word	0x0040cff4

00407608 <puts>:
  407608:	4b02      	ldr	r3, [pc, #8]	; (407614 <puts+0xc>)
  40760a:	4601      	mov	r1, r0
  40760c:	6818      	ldr	r0, [r3, #0]
  40760e:	f7ff bfcb 	b.w	4075a8 <_puts_r>
  407612:	bf00      	nop
  407614:	204004c0 	.word	0x204004c0

00407618 <setbuf>:
  407618:	2900      	cmp	r1, #0
  40761a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40761e:	bf0c      	ite	eq
  407620:	2202      	moveq	r2, #2
  407622:	2200      	movne	r2, #0
  407624:	f000 b800 	b.w	407628 <setvbuf>

00407628 <setvbuf>:
  407628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40762c:	4e3b      	ldr	r6, [pc, #236]	; (40771c <setvbuf+0xf4>)
  40762e:	4604      	mov	r4, r0
  407630:	460d      	mov	r5, r1
  407632:	4690      	mov	r8, r2
  407634:	6837      	ldr	r7, [r6, #0]
  407636:	461e      	mov	r6, r3
  407638:	b117      	cbz	r7, 407640 <setvbuf+0x18>
  40763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40763c:	2b00      	cmp	r3, #0
  40763e:	d03f      	beq.n	4076c0 <setvbuf+0x98>
  407640:	f1b8 0f02 	cmp.w	r8, #2
  407644:	d832      	bhi.n	4076ac <setvbuf+0x84>
  407646:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  40764a:	d12f      	bne.n	4076ac <setvbuf+0x84>
  40764c:	4621      	mov	r1, r4
  40764e:	4638      	mov	r0, r7
  407650:	f002 fcc2 	bl	409fd8 <_fflush_r>
  407654:	89a1      	ldrh	r1, [r4, #12]
  407656:	f8c4 9004 	str.w	r9, [r4, #4]
  40765a:	060b      	lsls	r3, r1, #24
  40765c:	f8c4 9018 	str.w	r9, [r4, #24]
  407660:	d428      	bmi.n	4076b4 <setvbuf+0x8c>
  407662:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  407666:	f1b8 0f02 	cmp.w	r8, #2
  40766a:	b289      	uxth	r1, r1
  40766c:	81a1      	strh	r1, [r4, #12]
  40766e:	d02b      	beq.n	4076c8 <setvbuf+0xa0>
  407670:	2d00      	cmp	r5, #0
  407672:	d037      	beq.n	4076e4 <setvbuf+0xbc>
  407674:	f1b8 0f01 	cmp.w	r8, #1
  407678:	d012      	beq.n	4076a0 <setvbuf+0x78>
  40767a:	b289      	uxth	r1, r1
  40767c:	4b28      	ldr	r3, [pc, #160]	; (407720 <setvbuf+0xf8>)
  40767e:	f001 0008 	and.w	r0, r1, #8
  407682:	63fb      	str	r3, [r7, #60]	; 0x3c
  407684:	6025      	str	r5, [r4, #0]
  407686:	b280      	uxth	r0, r0
  407688:	6125      	str	r5, [r4, #16]
  40768a:	6166      	str	r6, [r4, #20]
  40768c:	b180      	cbz	r0, 4076b0 <setvbuf+0x88>
  40768e:	f011 0f03 	tst.w	r1, #3
  407692:	f04f 0000 	mov.w	r0, #0
  407696:	bf18      	it	ne
  407698:	4606      	movne	r6, r0
  40769a:	60a6      	str	r6, [r4, #8]
  40769c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076a0:	f041 0101 	orr.w	r1, r1, #1
  4076a4:	4273      	negs	r3, r6
  4076a6:	81a1      	strh	r1, [r4, #12]
  4076a8:	61a3      	str	r3, [r4, #24]
  4076aa:	e7e6      	b.n	40767a <setvbuf+0x52>
  4076ac:	f04f 30ff 	mov.w	r0, #4294967295
  4076b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076b4:	6921      	ldr	r1, [r4, #16]
  4076b6:	4638      	mov	r0, r7
  4076b8:	f002 fd96 	bl	40a1e8 <_free_r>
  4076bc:	89a1      	ldrh	r1, [r4, #12]
  4076be:	e7d0      	b.n	407662 <setvbuf+0x3a>
  4076c0:	4638      	mov	r0, r7
  4076c2:	f002 fd23 	bl	40a10c <__sinit>
  4076c6:	e7bb      	b.n	407640 <setvbuf+0x18>
  4076c8:	2000      	movs	r0, #0
  4076ca:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4076ce:	f041 0102 	orr.w	r1, r1, #2
  4076d2:	2500      	movs	r5, #0
  4076d4:	2201      	movs	r2, #1
  4076d6:	81a1      	strh	r1, [r4, #12]
  4076d8:	60a5      	str	r5, [r4, #8]
  4076da:	6023      	str	r3, [r4, #0]
  4076dc:	6123      	str	r3, [r4, #16]
  4076de:	6162      	str	r2, [r4, #20]
  4076e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4076e4:	2e00      	cmp	r6, #0
  4076e6:	bf08      	it	eq
  4076e8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4076ec:	4630      	mov	r0, r6
  4076ee:	f003 f883 	bl	40a7f8 <malloc>
  4076f2:	4605      	mov	r5, r0
  4076f4:	b128      	cbz	r0, 407702 <setvbuf+0xda>
  4076f6:	89a1      	ldrh	r1, [r4, #12]
  4076f8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4076fc:	b289      	uxth	r1, r1
  4076fe:	81a1      	strh	r1, [r4, #12]
  407700:	e7b8      	b.n	407674 <setvbuf+0x4c>
  407702:	f44f 6080 	mov.w	r0, #1024	; 0x400
  407706:	f003 f877 	bl	40a7f8 <malloc>
  40770a:	4605      	mov	r5, r0
  40770c:	b918      	cbnz	r0, 407716 <setvbuf+0xee>
  40770e:	89a1      	ldrh	r1, [r4, #12]
  407710:	f04f 30ff 	mov.w	r0, #4294967295
  407714:	e7d9      	b.n	4076ca <setvbuf+0xa2>
  407716:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40771a:	e7ec      	b.n	4076f6 <setvbuf+0xce>
  40771c:	204004c0 	.word	0x204004c0
  407720:	0040a005 	.word	0x0040a005

00407724 <sprintf>:
  407724:	b40e      	push	{r1, r2, r3}
  407726:	b5f0      	push	{r4, r5, r6, r7, lr}
  407728:	b09c      	sub	sp, #112	; 0x70
  40772a:	4b10      	ldr	r3, [pc, #64]	; (40776c <sprintf+0x48>)
  40772c:	4606      	mov	r6, r0
  40772e:	f44f 7e02 	mov.w	lr, #520	; 0x208
  407732:	ac21      	add	r4, sp, #132	; 0x84
  407734:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  407738:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40773c:	6818      	ldr	r0, [r3, #0]
  40773e:	f854 2b04 	ldr.w	r2, [r4], #4
  407742:	a902      	add	r1, sp, #8
  407744:	9602      	str	r6, [sp, #8]
  407746:	4623      	mov	r3, r4
  407748:	9606      	str	r6, [sp, #24]
  40774a:	9401      	str	r4, [sp, #4]
  40774c:	f8ad e014 	strh.w	lr, [sp, #20]
  407750:	9504      	str	r5, [sp, #16]
  407752:	9507      	str	r5, [sp, #28]
  407754:	f8ad 7016 	strh.w	r7, [sp, #22]
  407758:	f000 f838 	bl	4077cc <_svfprintf_r>
  40775c:	9b02      	ldr	r3, [sp, #8]
  40775e:	2200      	movs	r2, #0
  407760:	701a      	strb	r2, [r3, #0]
  407762:	b01c      	add	sp, #112	; 0x70
  407764:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407768:	b003      	add	sp, #12
  40776a:	4770      	bx	lr
  40776c:	204004c0 	.word	0x204004c0

00407770 <strlen>:
  407770:	f020 0103 	bic.w	r1, r0, #3
  407774:	f010 0003 	ands.w	r0, r0, #3
  407778:	f1c0 0000 	rsb	r0, r0, #0
  40777c:	f851 3b04 	ldr.w	r3, [r1], #4
  407780:	f100 0c04 	add.w	ip, r0, #4
  407784:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  407788:	f06f 0200 	mvn.w	r2, #0
  40778c:	bf1c      	itt	ne
  40778e:	fa22 f20c 	lsrne.w	r2, r2, ip
  407792:	4313      	orrne	r3, r2
  407794:	f04f 0c01 	mov.w	ip, #1
  407798:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40779c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4077a0:	eba3 020c 	sub.w	r2, r3, ip
  4077a4:	ea22 0203 	bic.w	r2, r2, r3
  4077a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4077ac:	bf04      	itt	eq
  4077ae:	f851 3b04 	ldreq.w	r3, [r1], #4
  4077b2:	3004      	addeq	r0, #4
  4077b4:	d0f4      	beq.n	4077a0 <strlen+0x30>
  4077b6:	f1c2 0100 	rsb	r1, r2, #0
  4077ba:	ea02 0201 	and.w	r2, r2, r1
  4077be:	fab2 f282 	clz	r2, r2
  4077c2:	f1c2 021f 	rsb	r2, r2, #31
  4077c6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4077ca:	4770      	bx	lr

004077cc <_svfprintf_r>:
  4077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077d0:	b0c1      	sub	sp, #260	; 0x104
  4077d2:	4689      	mov	r9, r1
  4077d4:	9208      	str	r2, [sp, #32]
  4077d6:	930c      	str	r3, [sp, #48]	; 0x30
  4077d8:	9009      	str	r0, [sp, #36]	; 0x24
  4077da:	f002 ff97 	bl	40a70c <_localeconv_r>
  4077de:	6803      	ldr	r3, [r0, #0]
  4077e0:	4618      	mov	r0, r3
  4077e2:	9316      	str	r3, [sp, #88]	; 0x58
  4077e4:	f7ff ffc4 	bl	407770 <strlen>
  4077e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4077ec:	9017      	str	r0, [sp, #92]	; 0x5c
  4077ee:	061d      	lsls	r5, r3, #24
  4077f0:	d504      	bpl.n	4077fc <_svfprintf_r+0x30>
  4077f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4077f6:	2b00      	cmp	r3, #0
  4077f8:	f001 8080 	beq.w	4088fc <_svfprintf_r+0x1130>
  4077fc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407800:	2300      	movs	r3, #0
  407802:	46c3      	mov	fp, r8
  407804:	9313      	str	r3, [sp, #76]	; 0x4c
  407806:	9314      	str	r3, [sp, #80]	; 0x50
  407808:	9312      	str	r3, [sp, #72]	; 0x48
  40780a:	9315      	str	r3, [sp, #84]	; 0x54
  40780c:	9319      	str	r3, [sp, #100]	; 0x64
  40780e:	930a      	str	r3, [sp, #40]	; 0x28
  407810:	9325      	str	r3, [sp, #148]	; 0x94
  407812:	9324      	str	r3, [sp, #144]	; 0x90
  407814:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  407818:	9a08      	ldr	r2, [sp, #32]
  40781a:	7813      	ldrb	r3, [r2, #0]
  40781c:	2b25      	cmp	r3, #37	; 0x25
  40781e:	f000 80a6 	beq.w	40796e <_svfprintf_r+0x1a2>
  407822:	b90b      	cbnz	r3, 407828 <_svfprintf_r+0x5c>
  407824:	e0a3      	b.n	40796e <_svfprintf_r+0x1a2>
  407826:	b11b      	cbz	r3, 407830 <_svfprintf_r+0x64>
  407828:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40782c:	2b25      	cmp	r3, #37	; 0x25
  40782e:	d1fa      	bne.n	407826 <_svfprintf_r+0x5a>
  407830:	9908      	ldr	r1, [sp, #32]
  407832:	4614      	mov	r4, r2
  407834:	1a55      	subs	r5, r2, r1
  407836:	d010      	beq.n	40785a <_svfprintf_r+0x8e>
  407838:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40783a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40783c:	3301      	adds	r3, #1
  40783e:	f8cb 1000 	str.w	r1, [fp]
  407842:	442a      	add	r2, r5
  407844:	f8cb 5004 	str.w	r5, [fp, #4]
  407848:	2b07      	cmp	r3, #7
  40784a:	9324      	str	r3, [sp, #144]	; 0x90
  40784c:	9225      	str	r2, [sp, #148]	; 0x94
  40784e:	dc73      	bgt.n	407938 <_svfprintf_r+0x16c>
  407850:	f10b 0b08 	add.w	fp, fp, #8
  407854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407856:	442b      	add	r3, r5
  407858:	930a      	str	r3, [sp, #40]	; 0x28
  40785a:	7823      	ldrb	r3, [r4, #0]
  40785c:	2b00      	cmp	r3, #0
  40785e:	d073      	beq.n	407948 <_svfprintf_r+0x17c>
  407860:	2300      	movs	r3, #0
  407862:	f04f 3cff 	mov.w	ip, #4294967295
  407866:	1c61      	adds	r1, r4, #1
  407868:	7866      	ldrb	r6, [r4, #1]
  40786a:	461a      	mov	r2, r3
  40786c:	4664      	mov	r4, ip
  40786e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407872:	930b      	str	r3, [sp, #44]	; 0x2c
  407874:	9306      	str	r3, [sp, #24]
  407876:	1c4b      	adds	r3, r1, #1
  407878:	f1a6 0120 	sub.w	r1, r6, #32
  40787c:	2958      	cmp	r1, #88	; 0x58
  40787e:	f200 83b2 	bhi.w	407fe6 <_svfprintf_r+0x81a>
  407882:	e8df f011 	tbh	[pc, r1, lsl #1]
  407886:	0319      	.short	0x0319
  407888:	03b003b0 	.word	0x03b003b0
  40788c:	03b00320 	.word	0x03b00320
  407890:	03b003b0 	.word	0x03b003b0
  407894:	03b003b0 	.word	0x03b003b0
  407898:	024003b0 	.word	0x024003b0
  40789c:	03b001fb 	.word	0x03b001fb
  4078a0:	01ff01e2 	.word	0x01ff01e2
  4078a4:	032703b0 	.word	0x032703b0
  4078a8:	032e032e 	.word	0x032e032e
  4078ac:	032e032e 	.word	0x032e032e
  4078b0:	032e032e 	.word	0x032e032e
  4078b4:	032e032e 	.word	0x032e032e
  4078b8:	03b0032e 	.word	0x03b0032e
  4078bc:	03b003b0 	.word	0x03b003b0
  4078c0:	03b003b0 	.word	0x03b003b0
  4078c4:	03b003b0 	.word	0x03b003b0
  4078c8:	03b003b0 	.word	0x03b003b0
  4078cc:	033d03b0 	.word	0x033d03b0
  4078d0:	03b00365 	.word	0x03b00365
  4078d4:	03b00365 	.word	0x03b00365
  4078d8:	03b003b0 	.word	0x03b003b0
  4078dc:	02fe03b0 	.word	0x02fe03b0
  4078e0:	03b003b0 	.word	0x03b003b0
  4078e4:	03b00293 	.word	0x03b00293
  4078e8:	03b003b0 	.word	0x03b003b0
  4078ec:	03b003b0 	.word	0x03b003b0
  4078f0:	03b002b0 	.word	0x03b002b0
  4078f4:	02c603b0 	.word	0x02c603b0
  4078f8:	03b003b0 	.word	0x03b003b0
  4078fc:	03b003b0 	.word	0x03b003b0
  407900:	03b003b0 	.word	0x03b003b0
  407904:	03b003b0 	.word	0x03b003b0
  407908:	03b003b0 	.word	0x03b003b0
  40790c:	021802eb 	.word	0x021802eb
  407910:	03650365 	.word	0x03650365
  407914:	024e0365 	.word	0x024e0365
  407918:	03b00218 	.word	0x03b00218
  40791c:	023603b0 	.word	0x023603b0
  407920:	026003b0 	.word	0x026003b0
  407924:	039901e9 	.word	0x039901e9
  407928:	03b00259 	.word	0x03b00259
  40792c:	03b00272 	.word	0x03b00272
  407930:	03b00076 	.word	0x03b00076
  407934:	030503b0 	.word	0x030503b0
  407938:	9809      	ldr	r0, [sp, #36]	; 0x24
  40793a:	4649      	mov	r1, r9
  40793c:	aa23      	add	r2, sp, #140	; 0x8c
  40793e:	f004 f8d3 	bl	40bae8 <__ssprint_r>
  407942:	b940      	cbnz	r0, 407956 <_svfprintf_r+0x18a>
  407944:	46c3      	mov	fp, r8
  407946:	e785      	b.n	407854 <_svfprintf_r+0x88>
  407948:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40794a:	b123      	cbz	r3, 407956 <_svfprintf_r+0x18a>
  40794c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40794e:	4649      	mov	r1, r9
  407950:	aa23      	add	r2, sp, #140	; 0x8c
  407952:	f004 f8c9 	bl	40bae8 <__ssprint_r>
  407956:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40795a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407960:	bf18      	it	ne
  407962:	f04f 33ff 	movne.w	r3, #4294967295
  407966:	4618      	mov	r0, r3
  407968:	b041      	add	sp, #260	; 0x104
  40796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40796e:	9c08      	ldr	r4, [sp, #32]
  407970:	e773      	b.n	40785a <_svfprintf_r+0x8e>
  407972:	9308      	str	r3, [sp, #32]
  407974:	46a4      	mov	ip, r4
  407976:	9b06      	ldr	r3, [sp, #24]
  407978:	0698      	lsls	r0, r3, #26
  40797a:	f140 823e 	bpl.w	407dfa <_svfprintf_r+0x62e>
  40797e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407980:	2301      	movs	r3, #1
  407982:	3707      	adds	r7, #7
  407984:	f027 0207 	bic.w	r2, r7, #7
  407988:	f102 0108 	add.w	r1, r2, #8
  40798c:	e9d2 4500 	ldrd	r4, r5, [r2]
  407990:	910c      	str	r1, [sp, #48]	; 0x30
  407992:	2200      	movs	r2, #0
  407994:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407998:	4617      	mov	r7, r2
  40799a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40799e:	f1bc 0f00 	cmp.w	ip, #0
  4079a2:	db03      	blt.n	4079ac <_svfprintf_r+0x1e0>
  4079a4:	9a06      	ldr	r2, [sp, #24]
  4079a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4079aa:	9206      	str	r2, [sp, #24]
  4079ac:	f1bc 0f00 	cmp.w	ip, #0
  4079b0:	f040 83ac 	bne.w	40810c <_svfprintf_r+0x940>
  4079b4:	ea54 0205 	orrs.w	r2, r4, r5
  4079b8:	bf14      	ite	ne
  4079ba:	2201      	movne	r2, #1
  4079bc:	2200      	moveq	r2, #0
  4079be:	2a00      	cmp	r2, #0
  4079c0:	f040 83a4 	bne.w	40810c <_svfprintf_r+0x940>
  4079c4:	2b00      	cmp	r3, #0
  4079c6:	f040 8460 	bne.w	40828a <_svfprintf_r+0xabe>
  4079ca:	9a06      	ldr	r2, [sp, #24]
  4079cc:	07d2      	lsls	r2, r2, #31
  4079ce:	f140 84fd 	bpl.w	4083cc <_svfprintf_r+0xc00>
  4079d2:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4079d6:	2330      	movs	r3, #48	; 0x30
  4079d8:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  4079dc:	ebca 0408 	rsb	r4, sl, r8
  4079e0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4079e4:	45a4      	cmp	ip, r4
  4079e6:	4663      	mov	r3, ip
  4079e8:	bfb8      	it	lt
  4079ea:	4623      	movlt	r3, r4
  4079ec:	9307      	str	r3, [sp, #28]
  4079ee:	2300      	movs	r3, #0
  4079f0:	9311      	str	r3, [sp, #68]	; 0x44
  4079f2:	b117      	cbz	r7, 4079fa <_svfprintf_r+0x22e>
  4079f4:	9b07      	ldr	r3, [sp, #28]
  4079f6:	3301      	adds	r3, #1
  4079f8:	9307      	str	r3, [sp, #28]
  4079fa:	9b06      	ldr	r3, [sp, #24]
  4079fc:	f013 0302 	ands.w	r3, r3, #2
  407a00:	930d      	str	r3, [sp, #52]	; 0x34
  407a02:	d002      	beq.n	407a0a <_svfprintf_r+0x23e>
  407a04:	9b07      	ldr	r3, [sp, #28]
  407a06:	3302      	adds	r3, #2
  407a08:	9307      	str	r3, [sp, #28]
  407a0a:	9b06      	ldr	r3, [sp, #24]
  407a0c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407a10:	930e      	str	r3, [sp, #56]	; 0x38
  407a12:	f040 8307 	bne.w	408024 <_svfprintf_r+0x858>
  407a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a18:	9a07      	ldr	r2, [sp, #28]
  407a1a:	ebc2 0a03 	rsb	sl, r2, r3
  407a1e:	f1ba 0f00 	cmp.w	sl, #0
  407a22:	f340 82ff 	ble.w	408024 <_svfprintf_r+0x858>
  407a26:	f1ba 0f10 	cmp.w	sl, #16
  407a2a:	9925      	ldr	r1, [sp, #148]	; 0x94
  407a2c:	f340 87dd 	ble.w	4089ea <_svfprintf_r+0x121e>
  407a30:	4fbf      	ldr	r7, [pc, #764]	; (407d30 <_svfprintf_r+0x564>)
  407a32:	2510      	movs	r5, #16
  407a34:	9618      	str	r6, [sp, #96]	; 0x60
  407a36:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407a38:	463e      	mov	r6, r7
  407a3a:	4627      	mov	r7, r4
  407a3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407a3e:	e004      	b.n	407a4a <_svfprintf_r+0x27e>
  407a40:	f1aa 0a10 	sub.w	sl, sl, #16
  407a44:	f1ba 0f10 	cmp.w	sl, #16
  407a48:	dd1b      	ble.n	407a82 <_svfprintf_r+0x2b6>
  407a4a:	3201      	adds	r2, #1
  407a4c:	3110      	adds	r1, #16
  407a4e:	f8cb 6000 	str.w	r6, [fp]
  407a52:	f10b 0b08 	add.w	fp, fp, #8
  407a56:	2a07      	cmp	r2, #7
  407a58:	f84b 5c04 	str.w	r5, [fp, #-4]
  407a5c:	9125      	str	r1, [sp, #148]	; 0x94
  407a5e:	9224      	str	r2, [sp, #144]	; 0x90
  407a60:	ddee      	ble.n	407a40 <_svfprintf_r+0x274>
  407a62:	4620      	mov	r0, r4
  407a64:	4649      	mov	r1, r9
  407a66:	aa23      	add	r2, sp, #140	; 0x8c
  407a68:	46c3      	mov	fp, r8
  407a6a:	f004 f83d 	bl	40bae8 <__ssprint_r>
  407a6e:	2800      	cmp	r0, #0
  407a70:	f47f af71 	bne.w	407956 <_svfprintf_r+0x18a>
  407a74:	f1aa 0a10 	sub.w	sl, sl, #16
  407a78:	9925      	ldr	r1, [sp, #148]	; 0x94
  407a7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407a7c:	f1ba 0f10 	cmp.w	sl, #16
  407a80:	dce3      	bgt.n	407a4a <_svfprintf_r+0x27e>
  407a82:	463c      	mov	r4, r7
  407a84:	4637      	mov	r7, r6
  407a86:	9e18      	ldr	r6, [sp, #96]	; 0x60
  407a88:	3201      	adds	r2, #1
  407a8a:	eb0a 0c01 	add.w	ip, sl, r1
  407a8e:	f8cb 7000 	str.w	r7, [fp]
  407a92:	2a07      	cmp	r2, #7
  407a94:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407a98:	9224      	str	r2, [sp, #144]	; 0x90
  407a9a:	f8cb a004 	str.w	sl, [fp, #4]
  407a9e:	f300 82b6 	bgt.w	40800e <_svfprintf_r+0x842>
  407aa2:	f10b 0b08 	add.w	fp, fp, #8
  407aa6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407aaa:	b197      	cbz	r7, 407ad2 <_svfprintf_r+0x306>
  407aac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407aae:	2201      	movs	r2, #1
  407ab0:	f10c 0c01 	add.w	ip, ip, #1
  407ab4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  407ab8:	4413      	add	r3, r2
  407aba:	f8cb 2004 	str.w	r2, [fp, #4]
  407abe:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407ac2:	2b07      	cmp	r3, #7
  407ac4:	f8cb 1000 	str.w	r1, [fp]
  407ac8:	9324      	str	r3, [sp, #144]	; 0x90
  407aca:	f300 83fb 	bgt.w	4082c4 <_svfprintf_r+0xaf8>
  407ace:	f10b 0b08 	add.w	fp, fp, #8
  407ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407ad4:	b18b      	cbz	r3, 407afa <_svfprintf_r+0x32e>
  407ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ad8:	f10c 0c02 	add.w	ip, ip, #2
  407adc:	a91c      	add	r1, sp, #112	; 0x70
  407ade:	2202      	movs	r2, #2
  407ae0:	3301      	adds	r3, #1
  407ae2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407ae6:	f8cb 1000 	str.w	r1, [fp]
  407aea:	2b07      	cmp	r3, #7
  407aec:	9324      	str	r3, [sp, #144]	; 0x90
  407aee:	f8cb 2004 	str.w	r2, [fp, #4]
  407af2:	f300 83db 	bgt.w	4082ac <_svfprintf_r+0xae0>
  407af6:	f10b 0b08 	add.w	fp, fp, #8
  407afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407afc:	2b80      	cmp	r3, #128	; 0x80
  407afe:	f000 8321 	beq.w	408144 <_svfprintf_r+0x978>
  407b02:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407b04:	1b1f      	subs	r7, r3, r4
  407b06:	2f00      	cmp	r7, #0
  407b08:	dd37      	ble.n	407b7a <_svfprintf_r+0x3ae>
  407b0a:	2f10      	cmp	r7, #16
  407b0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b0e:	f340 85ec 	ble.w	4086ea <_svfprintf_r+0xf1e>
  407b12:	940d      	str	r4, [sp, #52]	; 0x34
  407b14:	f04f 0a10 	mov.w	sl, #16
  407b18:	4d86      	ldr	r5, [pc, #536]	; (407d34 <_svfprintf_r+0x568>)
  407b1a:	4662      	mov	r2, ip
  407b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407b1e:	e002      	b.n	407b26 <_svfprintf_r+0x35a>
  407b20:	3f10      	subs	r7, #16
  407b22:	2f10      	cmp	r7, #16
  407b24:	dd19      	ble.n	407b5a <_svfprintf_r+0x38e>
  407b26:	3301      	adds	r3, #1
  407b28:	3210      	adds	r2, #16
  407b2a:	f8cb 5000 	str.w	r5, [fp]
  407b2e:	f10b 0b08 	add.w	fp, fp, #8
  407b32:	2b07      	cmp	r3, #7
  407b34:	f84b ac04 	str.w	sl, [fp, #-4]
  407b38:	9225      	str	r2, [sp, #148]	; 0x94
  407b3a:	9324      	str	r3, [sp, #144]	; 0x90
  407b3c:	ddf0      	ble.n	407b20 <_svfprintf_r+0x354>
  407b3e:	4620      	mov	r0, r4
  407b40:	4649      	mov	r1, r9
  407b42:	aa23      	add	r2, sp, #140	; 0x8c
  407b44:	46c3      	mov	fp, r8
  407b46:	f003 ffcf 	bl	40bae8 <__ssprint_r>
  407b4a:	2800      	cmp	r0, #0
  407b4c:	f47f af03 	bne.w	407956 <_svfprintf_r+0x18a>
  407b50:	3f10      	subs	r7, #16
  407b52:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407b54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b56:	2f10      	cmp	r7, #16
  407b58:	dce5      	bgt.n	407b26 <_svfprintf_r+0x35a>
  407b5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407b5c:	4694      	mov	ip, r2
  407b5e:	3301      	adds	r3, #1
  407b60:	44bc      	add	ip, r7
  407b62:	f8cb 5000 	str.w	r5, [fp]
  407b66:	2b07      	cmp	r3, #7
  407b68:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407b6c:	9324      	str	r3, [sp, #144]	; 0x90
  407b6e:	f8cb 7004 	str.w	r7, [fp, #4]
  407b72:	f300 838f 	bgt.w	408294 <_svfprintf_r+0xac8>
  407b76:	f10b 0b08 	add.w	fp, fp, #8
  407b7a:	9b06      	ldr	r3, [sp, #24]
  407b7c:	05df      	lsls	r7, r3, #23
  407b7e:	f100 8254 	bmi.w	40802a <_svfprintf_r+0x85e>
  407b82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b84:	44a4      	add	ip, r4
  407b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b88:	3301      	adds	r3, #1
  407b8a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407b8e:	f8cb 2000 	str.w	r2, [fp]
  407b92:	2b07      	cmp	r3, #7
  407b94:	f8cb 4004 	str.w	r4, [fp, #4]
  407b98:	9324      	str	r3, [sp, #144]	; 0x90
  407b9a:	f300 8360 	bgt.w	40825e <_svfprintf_r+0xa92>
  407b9e:	f10b 0b08 	add.w	fp, fp, #8
  407ba2:	9b06      	ldr	r3, [sp, #24]
  407ba4:	075a      	lsls	r2, r3, #29
  407ba6:	d540      	bpl.n	407c2a <_svfprintf_r+0x45e>
  407ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407baa:	9a07      	ldr	r2, [sp, #28]
  407bac:	1a9c      	subs	r4, r3, r2
  407bae:	2c00      	cmp	r4, #0
  407bb0:	dd3b      	ble.n	407c2a <_svfprintf_r+0x45e>
  407bb2:	2c10      	cmp	r4, #16
  407bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bb6:	f340 876b 	ble.w	408a90 <_svfprintf_r+0x12c4>
  407bba:	2510      	movs	r5, #16
  407bbc:	4f5c      	ldr	r7, [pc, #368]	; (407d30 <_svfprintf_r+0x564>)
  407bbe:	4662      	mov	r2, ip
  407bc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407bc2:	e002      	b.n	407bca <_svfprintf_r+0x3fe>
  407bc4:	3c10      	subs	r4, #16
  407bc6:	2c10      	cmp	r4, #16
  407bc8:	dd19      	ble.n	407bfe <_svfprintf_r+0x432>
  407bca:	3301      	adds	r3, #1
  407bcc:	3210      	adds	r2, #16
  407bce:	f8cb 7000 	str.w	r7, [fp]
  407bd2:	f10b 0b08 	add.w	fp, fp, #8
  407bd6:	2b07      	cmp	r3, #7
  407bd8:	f84b 5c04 	str.w	r5, [fp, #-4]
  407bdc:	9225      	str	r2, [sp, #148]	; 0x94
  407bde:	9324      	str	r3, [sp, #144]	; 0x90
  407be0:	ddf0      	ble.n	407bc4 <_svfprintf_r+0x3f8>
  407be2:	4630      	mov	r0, r6
  407be4:	4649      	mov	r1, r9
  407be6:	aa23      	add	r2, sp, #140	; 0x8c
  407be8:	46c3      	mov	fp, r8
  407bea:	f003 ff7d 	bl	40bae8 <__ssprint_r>
  407bee:	2800      	cmp	r0, #0
  407bf0:	f47f aeb1 	bne.w	407956 <_svfprintf_r+0x18a>
  407bf4:	3c10      	subs	r4, #16
  407bf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407bf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bfa:	2c10      	cmp	r4, #16
  407bfc:	dce5      	bgt.n	407bca <_svfprintf_r+0x3fe>
  407bfe:	4694      	mov	ip, r2
  407c00:	3301      	adds	r3, #1
  407c02:	44a4      	add	ip, r4
  407c04:	f8cb 7000 	str.w	r7, [fp]
  407c08:	2b07      	cmp	r3, #7
  407c0a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407c0e:	9324      	str	r3, [sp, #144]	; 0x90
  407c10:	f8cb 4004 	str.w	r4, [fp, #4]
  407c14:	dd09      	ble.n	407c2a <_svfprintf_r+0x45e>
  407c16:	9809      	ldr	r0, [sp, #36]	; 0x24
  407c18:	4649      	mov	r1, r9
  407c1a:	aa23      	add	r2, sp, #140	; 0x8c
  407c1c:	f003 ff64 	bl	40bae8 <__ssprint_r>
  407c20:	2800      	cmp	r0, #0
  407c22:	f47f ae98 	bne.w	407956 <_svfprintf_r+0x18a>
  407c26:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c2c:	9a07      	ldr	r2, [sp, #28]
  407c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c30:	428a      	cmp	r2, r1
  407c32:	bfac      	ite	ge
  407c34:	189b      	addge	r3, r3, r2
  407c36:	185b      	addlt	r3, r3, r1
  407c38:	930a      	str	r3, [sp, #40]	; 0x28
  407c3a:	f1bc 0f00 	cmp.w	ip, #0
  407c3e:	f040 831a 	bne.w	408276 <_svfprintf_r+0xaaa>
  407c42:	2300      	movs	r3, #0
  407c44:	46c3      	mov	fp, r8
  407c46:	9324      	str	r3, [sp, #144]	; 0x90
  407c48:	e5e6      	b.n	407818 <_svfprintf_r+0x4c>
  407c4a:	4619      	mov	r1, r3
  407c4c:	9806      	ldr	r0, [sp, #24]
  407c4e:	781e      	ldrb	r6, [r3, #0]
  407c50:	f040 0004 	orr.w	r0, r0, #4
  407c54:	9006      	str	r0, [sp, #24]
  407c56:	e60e      	b.n	407876 <_svfprintf_r+0xaa>
  407c58:	9308      	str	r3, [sp, #32]
  407c5a:	46a4      	mov	ip, r4
  407c5c:	9b06      	ldr	r3, [sp, #24]
  407c5e:	f013 0320 	ands.w	r3, r3, #32
  407c62:	f000 80ae 	beq.w	407dc2 <_svfprintf_r+0x5f6>
  407c66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407c68:	2300      	movs	r3, #0
  407c6a:	3707      	adds	r7, #7
  407c6c:	f027 0207 	bic.w	r2, r7, #7
  407c70:	f102 0108 	add.w	r1, r2, #8
  407c74:	e9d2 4500 	ldrd	r4, r5, [r2]
  407c78:	910c      	str	r1, [sp, #48]	; 0x30
  407c7a:	e68a      	b.n	407992 <_svfprintf_r+0x1c6>
  407c7c:	781e      	ldrb	r6, [r3, #0]
  407c7e:	4619      	mov	r1, r3
  407c80:	222b      	movs	r2, #43	; 0x2b
  407c82:	e5f8      	b.n	407876 <_svfprintf_r+0xaa>
  407c84:	781e      	ldrb	r6, [r3, #0]
  407c86:	1c59      	adds	r1, r3, #1
  407c88:	2e2a      	cmp	r6, #42	; 0x2a
  407c8a:	f001 8006 	beq.w	408c9a <_svfprintf_r+0x14ce>
  407c8e:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407c92:	460b      	mov	r3, r1
  407c94:	2400      	movs	r4, #0
  407c96:	2809      	cmp	r0, #9
  407c98:	f63f adee 	bhi.w	407878 <_svfprintf_r+0xac>
  407c9c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407ca0:	f813 6b01 	ldrb.w	r6, [r3], #1
  407ca4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407ca8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407cac:	2809      	cmp	r0, #9
  407cae:	d9f5      	bls.n	407c9c <_svfprintf_r+0x4d0>
  407cb0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  407cb4:	e5e0      	b.n	407878 <_svfprintf_r+0xac>
  407cb6:	9308      	str	r3, [sp, #32]
  407cb8:	46a4      	mov	ip, r4
  407cba:	9b06      	ldr	r3, [sp, #24]
  407cbc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407cc0:	069c      	lsls	r4, r3, #26
  407cc2:	f140 8129 	bpl.w	407f18 <_svfprintf_r+0x74c>
  407cc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407cc8:	3707      	adds	r7, #7
  407cca:	f027 0707 	bic.w	r7, r7, #7
  407cce:	e9d7 2300 	ldrd	r2, r3, [r7]
  407cd2:	f107 0108 	add.w	r1, r7, #8
  407cd6:	4614      	mov	r4, r2
  407cd8:	461d      	mov	r5, r3
  407cda:	910c      	str	r1, [sp, #48]	; 0x30
  407cdc:	2a00      	cmp	r2, #0
  407cde:	f173 0300 	sbcs.w	r3, r3, #0
  407ce2:	f2c0 812a 	blt.w	407f3a <_svfprintf_r+0x76e>
  407ce6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407cea:	2301      	movs	r3, #1
  407cec:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407cf0:	e655      	b.n	40799e <_svfprintf_r+0x1d2>
  407cf2:	781e      	ldrb	r6, [r3, #0]
  407cf4:	9906      	ldr	r1, [sp, #24]
  407cf6:	2e6c      	cmp	r6, #108	; 0x6c
  407cf8:	f000 8557 	beq.w	4087aa <_svfprintf_r+0xfde>
  407cfc:	f041 0110 	orr.w	r1, r1, #16
  407d00:	9106      	str	r1, [sp, #24]
  407d02:	4619      	mov	r1, r3
  407d04:	e5b7      	b.n	407876 <_svfprintf_r+0xaa>
  407d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  407d08:	6829      	ldr	r1, [r5, #0]
  407d0a:	4608      	mov	r0, r1
  407d0c:	910b      	str	r1, [sp, #44]	; 0x2c
  407d0e:	4629      	mov	r1, r5
  407d10:	2800      	cmp	r0, #0
  407d12:	f101 0104 	add.w	r1, r1, #4
  407d16:	f2c0 854f 	blt.w	4087b8 <_svfprintf_r+0xfec>
  407d1a:	910c      	str	r1, [sp, #48]	; 0x30
  407d1c:	4619      	mov	r1, r3
  407d1e:	781e      	ldrb	r6, [r3, #0]
  407d20:	e5a9      	b.n	407876 <_svfprintf_r+0xaa>
  407d22:	9906      	ldr	r1, [sp, #24]
  407d24:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  407d28:	9106      	str	r1, [sp, #24]
  407d2a:	4619      	mov	r1, r3
  407d2c:	781e      	ldrb	r6, [r3, #0]
  407d2e:	e5a2      	b.n	407876 <_svfprintf_r+0xaa>
  407d30:	0040d008 	.word	0x0040d008
  407d34:	0040cff8 	.word	0x0040cff8
  407d38:	9906      	ldr	r1, [sp, #24]
  407d3a:	f041 0120 	orr.w	r1, r1, #32
  407d3e:	9106      	str	r1, [sp, #24]
  407d40:	4619      	mov	r1, r3
  407d42:	781e      	ldrb	r6, [r3, #0]
  407d44:	e597      	b.n	407876 <_svfprintf_r+0xaa>
  407d46:	9308      	str	r3, [sp, #32]
  407d48:	9b06      	ldr	r3, [sp, #24]
  407d4a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407d4e:	069e      	lsls	r6, r3, #26
  407d50:	f140 84a4 	bpl.w	40869c <_svfprintf_r+0xed0>
  407d54:	990a      	ldr	r1, [sp, #40]	; 0x28
  407d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407d58:	17cd      	asrs	r5, r1, #31
  407d5a:	4608      	mov	r0, r1
  407d5c:	6813      	ldr	r3, [r2, #0]
  407d5e:	3204      	adds	r2, #4
  407d60:	4629      	mov	r1, r5
  407d62:	920c      	str	r2, [sp, #48]	; 0x30
  407d64:	e9c3 0100 	strd	r0, r1, [r3]
  407d68:	e556      	b.n	407818 <_svfprintf_r+0x4c>
  407d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407d6c:	2500      	movs	r5, #0
  407d6e:	9308      	str	r3, [sp, #32]
  407d70:	6813      	ldr	r3, [r2, #0]
  407d72:	1d17      	adds	r7, r2, #4
  407d74:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  407d78:	930f      	str	r3, [sp, #60]	; 0x3c
  407d7a:	2b00      	cmp	r3, #0
  407d7c:	f000 867a 	beq.w	408a74 <_svfprintf_r+0x12a8>
  407d80:	2c00      	cmp	r4, #0
  407d82:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407d84:	f2c0 8624 	blt.w	4089d0 <_svfprintf_r+0x1204>
  407d88:	4629      	mov	r1, r5
  407d8a:	4622      	mov	r2, r4
  407d8c:	f002 ffe8 	bl	40ad60 <memchr>
  407d90:	2800      	cmp	r0, #0
  407d92:	f000 86df 	beq.w	408b54 <_svfprintf_r+0x1388>
  407d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407d98:	970c      	str	r7, [sp, #48]	; 0x30
  407d9a:	1ac4      	subs	r4, r0, r3
  407d9c:	9510      	str	r5, [sp, #64]	; 0x40
  407d9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407da2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  407da6:	9511      	str	r5, [sp, #68]	; 0x44
  407da8:	9307      	str	r3, [sp, #28]
  407daa:	e622      	b.n	4079f2 <_svfprintf_r+0x226>
  407dac:	9308      	str	r3, [sp, #32]
  407dae:	46a4      	mov	ip, r4
  407db0:	9b06      	ldr	r3, [sp, #24]
  407db2:	f043 0310 	orr.w	r3, r3, #16
  407db6:	9306      	str	r3, [sp, #24]
  407db8:	9b06      	ldr	r3, [sp, #24]
  407dba:	f013 0320 	ands.w	r3, r3, #32
  407dbe:	f47f af52 	bne.w	407c66 <_svfprintf_r+0x49a>
  407dc2:	9a06      	ldr	r2, [sp, #24]
  407dc4:	f012 0210 	ands.w	r2, r2, #16
  407dc8:	f040 8352 	bne.w	408470 <_svfprintf_r+0xca4>
  407dcc:	9b06      	ldr	r3, [sp, #24]
  407dce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  407dd2:	f000 834d 	beq.w	408470 <_svfprintf_r+0xca4>
  407dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
  407dd8:	4613      	mov	r3, r2
  407dda:	2500      	movs	r5, #0
  407ddc:	460a      	mov	r2, r1
  407dde:	880c      	ldrh	r4, [r1, #0]
  407de0:	3204      	adds	r2, #4
  407de2:	920c      	str	r2, [sp, #48]	; 0x30
  407de4:	e5d5      	b.n	407992 <_svfprintf_r+0x1c6>
  407de6:	9308      	str	r3, [sp, #32]
  407de8:	46a4      	mov	ip, r4
  407dea:	9b06      	ldr	r3, [sp, #24]
  407dec:	f043 0310 	orr.w	r3, r3, #16
  407df0:	9306      	str	r3, [sp, #24]
  407df2:	9b06      	ldr	r3, [sp, #24]
  407df4:	0698      	lsls	r0, r3, #26
  407df6:	f53f adc2 	bmi.w	40797e <_svfprintf_r+0x1b2>
  407dfa:	9b06      	ldr	r3, [sp, #24]
  407dfc:	06d9      	lsls	r1, r3, #27
  407dfe:	f140 8432 	bpl.w	408666 <_svfprintf_r+0xe9a>
  407e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e04:	4613      	mov	r3, r2
  407e06:	3204      	adds	r2, #4
  407e08:	681c      	ldr	r4, [r3, #0]
  407e0a:	2500      	movs	r5, #0
  407e0c:	2301      	movs	r3, #1
  407e0e:	920c      	str	r2, [sp, #48]	; 0x30
  407e10:	e5bf      	b.n	407992 <_svfprintf_r+0x1c6>
  407e12:	9308      	str	r3, [sp, #32]
  407e14:	46a4      	mov	ip, r4
  407e16:	4bb7      	ldr	r3, [pc, #732]	; (4080f4 <_svfprintf_r+0x928>)
  407e18:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407e1c:	9315      	str	r3, [sp, #84]	; 0x54
  407e1e:	9b06      	ldr	r3, [sp, #24]
  407e20:	069a      	lsls	r2, r3, #26
  407e22:	d53e      	bpl.n	407ea2 <_svfprintf_r+0x6d6>
  407e24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407e26:	3707      	adds	r7, #7
  407e28:	f027 0307 	bic.w	r3, r7, #7
  407e2c:	f103 0208 	add.w	r2, r3, #8
  407e30:	e9d3 4500 	ldrd	r4, r5, [r3]
  407e34:	920c      	str	r2, [sp, #48]	; 0x30
  407e36:	9b06      	ldr	r3, [sp, #24]
  407e38:	07df      	lsls	r7, r3, #31
  407e3a:	f140 8268 	bpl.w	40830e <_svfprintf_r+0xb42>
  407e3e:	ea54 0305 	orrs.w	r3, r4, r5
  407e42:	f000 8264 	beq.w	40830e <_svfprintf_r+0xb42>
  407e46:	9b06      	ldr	r3, [sp, #24]
  407e48:	2230      	movs	r2, #48	; 0x30
  407e4a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407e4e:	f043 0302 	orr.w	r3, r3, #2
  407e52:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407e56:	9306      	str	r3, [sp, #24]
  407e58:	2302      	movs	r3, #2
  407e5a:	e59a      	b.n	407992 <_svfprintf_r+0x1c6>
  407e5c:	990c      	ldr	r1, [sp, #48]	; 0x30
  407e5e:	2001      	movs	r0, #1
  407e60:	9308      	str	r3, [sp, #32]
  407e62:	2300      	movs	r3, #0
  407e64:	680a      	ldr	r2, [r1, #0]
  407e66:	3104      	adds	r1, #4
  407e68:	461f      	mov	r7, r3
  407e6a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407e6e:	9310      	str	r3, [sp, #64]	; 0x40
  407e70:	4604      	mov	r4, r0
  407e72:	9311      	str	r3, [sp, #68]	; 0x44
  407e74:	ab26      	add	r3, sp, #152	; 0x98
  407e76:	9007      	str	r0, [sp, #28]
  407e78:	910c      	str	r1, [sp, #48]	; 0x30
  407e7a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  407e7e:	930f      	str	r3, [sp, #60]	; 0x3c
  407e80:	e5bb      	b.n	4079fa <_svfprintf_r+0x22e>
  407e82:	9906      	ldr	r1, [sp, #24]
  407e84:	f041 0108 	orr.w	r1, r1, #8
  407e88:	9106      	str	r1, [sp, #24]
  407e8a:	4619      	mov	r1, r3
  407e8c:	781e      	ldrb	r6, [r3, #0]
  407e8e:	e4f2      	b.n	407876 <_svfprintf_r+0xaa>
  407e90:	9308      	str	r3, [sp, #32]
  407e92:	46a4      	mov	ip, r4
  407e94:	4b98      	ldr	r3, [pc, #608]	; (4080f8 <_svfprintf_r+0x92c>)
  407e96:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407e9a:	9315      	str	r3, [sp, #84]	; 0x54
  407e9c:	9b06      	ldr	r3, [sp, #24]
  407e9e:	069a      	lsls	r2, r3, #26
  407ea0:	d4c0      	bmi.n	407e24 <_svfprintf_r+0x658>
  407ea2:	9b06      	ldr	r3, [sp, #24]
  407ea4:	06db      	lsls	r3, r3, #27
  407ea6:	f140 83ec 	bpl.w	408682 <_svfprintf_r+0xeb6>
  407eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407eac:	2500      	movs	r5, #0
  407eae:	4613      	mov	r3, r2
  407eb0:	6814      	ldr	r4, [r2, #0]
  407eb2:	3304      	adds	r3, #4
  407eb4:	930c      	str	r3, [sp, #48]	; 0x30
  407eb6:	e7be      	b.n	407e36 <_svfprintf_r+0x66a>
  407eb8:	781e      	ldrb	r6, [r3, #0]
  407eba:	4619      	mov	r1, r3
  407ebc:	2a00      	cmp	r2, #0
  407ebe:	f47f acda 	bne.w	407876 <_svfprintf_r+0xaa>
  407ec2:	2220      	movs	r2, #32
  407ec4:	e4d7      	b.n	407876 <_svfprintf_r+0xaa>
  407ec6:	9906      	ldr	r1, [sp, #24]
  407ec8:	f041 0101 	orr.w	r1, r1, #1
  407ecc:	9106      	str	r1, [sp, #24]
  407ece:	4619      	mov	r1, r3
  407ed0:	781e      	ldrb	r6, [r3, #0]
  407ed2:	e4d0      	b.n	407876 <_svfprintf_r+0xaa>
  407ed4:	9906      	ldr	r1, [sp, #24]
  407ed6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  407eda:	9106      	str	r1, [sp, #24]
  407edc:	4619      	mov	r1, r3
  407ede:	781e      	ldrb	r6, [r3, #0]
  407ee0:	e4c9      	b.n	407876 <_svfprintf_r+0xaa>
  407ee2:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407ee6:	2100      	movs	r1, #0
  407ee8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407eec:	f813 6b01 	ldrb.w	r6, [r3], #1
  407ef0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  407ef4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407ef8:	2809      	cmp	r0, #9
  407efa:	d9f5      	bls.n	407ee8 <_svfprintf_r+0x71c>
  407efc:	910b      	str	r1, [sp, #44]	; 0x2c
  407efe:	e4bb      	b.n	407878 <_svfprintf_r+0xac>
  407f00:	9308      	str	r3, [sp, #32]
  407f02:	46a4      	mov	ip, r4
  407f04:	9b06      	ldr	r3, [sp, #24]
  407f06:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407f0a:	f043 0310 	orr.w	r3, r3, #16
  407f0e:	9306      	str	r3, [sp, #24]
  407f10:	9b06      	ldr	r3, [sp, #24]
  407f12:	069c      	lsls	r4, r3, #26
  407f14:	f53f aed7 	bmi.w	407cc6 <_svfprintf_r+0x4fa>
  407f18:	9b06      	ldr	r3, [sp, #24]
  407f1a:	06d8      	lsls	r0, r3, #27
  407f1c:	f140 83d5 	bpl.w	4086ca <_svfprintf_r+0xefe>
  407f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407f22:	4613      	mov	r3, r2
  407f24:	681c      	ldr	r4, [r3, #0]
  407f26:	3304      	adds	r3, #4
  407f28:	17e5      	asrs	r5, r4, #31
  407f2a:	4622      	mov	r2, r4
  407f2c:	930c      	str	r3, [sp, #48]	; 0x30
  407f2e:	2a00      	cmp	r2, #0
  407f30:	462b      	mov	r3, r5
  407f32:	f173 0300 	sbcs.w	r3, r3, #0
  407f36:	f6bf aed6 	bge.w	407ce6 <_svfprintf_r+0x51a>
  407f3a:	272d      	movs	r7, #45	; 0x2d
  407f3c:	4264      	negs	r4, r4
  407f3e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407f42:	f04f 0301 	mov.w	r3, #1
  407f46:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407f4a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407f4e:	e526      	b.n	40799e <_svfprintf_r+0x1d2>
  407f50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407f52:	9308      	str	r3, [sp, #32]
  407f54:	3707      	adds	r7, #7
  407f56:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407f5a:	f027 0307 	bic.w	r3, r7, #7
  407f5e:	f103 0208 	add.w	r2, r3, #8
  407f62:	920c      	str	r2, [sp, #48]	; 0x30
  407f64:	681a      	ldr	r2, [r3, #0]
  407f66:	9213      	str	r2, [sp, #76]	; 0x4c
  407f68:	685b      	ldr	r3, [r3, #4]
  407f6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407f6c:	9314      	str	r3, [sp, #80]	; 0x50
  407f6e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407f70:	9407      	str	r4, [sp, #28]
  407f72:	f003 fd41 	bl	40b9f8 <__fpclassifyd>
  407f76:	2801      	cmp	r0, #1
  407f78:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407f7c:	f040 8355 	bne.w	40862a <_svfprintf_r+0xe5e>
  407f80:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407f82:	2200      	movs	r2, #0
  407f84:	2300      	movs	r3, #0
  407f86:	9914      	ldr	r1, [sp, #80]	; 0x50
  407f88:	f003 ffd0 	bl	40bf2c <__aeabi_dcmplt>
  407f8c:	2800      	cmp	r0, #0
  407f8e:	f040 8582 	bne.w	408a96 <_svfprintf_r+0x12ca>
  407f92:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407f96:	2303      	movs	r3, #3
  407f98:	9806      	ldr	r0, [sp, #24]
  407f9a:	4a58      	ldr	r2, [pc, #352]	; (4080fc <_svfprintf_r+0x930>)
  407f9c:	2100      	movs	r1, #0
  407f9e:	461c      	mov	r4, r3
  407fa0:	9307      	str	r3, [sp, #28]
  407fa2:	4b57      	ldr	r3, [pc, #348]	; (408100 <_svfprintf_r+0x934>)
  407fa4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  407fa8:	9110      	str	r1, [sp, #64]	; 0x40
  407faa:	2e47      	cmp	r6, #71	; 0x47
  407fac:	bfd8      	it	le
  407fae:	461a      	movle	r2, r3
  407fb0:	9006      	str	r0, [sp, #24]
  407fb2:	9111      	str	r1, [sp, #68]	; 0x44
  407fb4:	920f      	str	r2, [sp, #60]	; 0x3c
  407fb6:	e51c      	b.n	4079f2 <_svfprintf_r+0x226>
  407fb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  407fba:	2230      	movs	r2, #48	; 0x30
  407fbc:	9806      	ldr	r0, [sp, #24]
  407fbe:	46a4      	mov	ip, r4
  407fc0:	4629      	mov	r1, r5
  407fc2:	9308      	str	r3, [sp, #32]
  407fc4:	2378      	movs	r3, #120	; 0x78
  407fc6:	f040 0002 	orr.w	r0, r0, #2
  407fca:	3104      	adds	r1, #4
  407fcc:	682c      	ldr	r4, [r5, #0]
  407fce:	461e      	mov	r6, r3
  407fd0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  407fd4:	4b48      	ldr	r3, [pc, #288]	; (4080f8 <_svfprintf_r+0x92c>)
  407fd6:	2500      	movs	r5, #0
  407fd8:	9006      	str	r0, [sp, #24]
  407fda:	9315      	str	r3, [sp, #84]	; 0x54
  407fdc:	2302      	movs	r3, #2
  407fde:	910c      	str	r1, [sp, #48]	; 0x30
  407fe0:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407fe4:	e4d5      	b.n	407992 <_svfprintf_r+0x1c6>
  407fe6:	9308      	str	r3, [sp, #32]
  407fe8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407fec:	2e00      	cmp	r6, #0
  407fee:	f43f acab 	beq.w	407948 <_svfprintf_r+0x17c>
  407ff2:	2300      	movs	r3, #0
  407ff4:	2201      	movs	r2, #1
  407ff6:	a926      	add	r1, sp, #152	; 0x98
  407ff8:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  407ffc:	9207      	str	r2, [sp, #28]
  407ffe:	461f      	mov	r7, r3
  408000:	910f      	str	r1, [sp, #60]	; 0x3c
  408002:	4614      	mov	r4, r2
  408004:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408008:	9310      	str	r3, [sp, #64]	; 0x40
  40800a:	9311      	str	r3, [sp, #68]	; 0x44
  40800c:	e4f5      	b.n	4079fa <_svfprintf_r+0x22e>
  40800e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408010:	4649      	mov	r1, r9
  408012:	aa23      	add	r2, sp, #140	; 0x8c
  408014:	f003 fd68 	bl	40bae8 <__ssprint_r>
  408018:	2800      	cmp	r0, #0
  40801a:	f47f ac9c 	bne.w	407956 <_svfprintf_r+0x18a>
  40801e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408022:	46c3      	mov	fp, r8
  408024:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408028:	e53f      	b.n	407aaa <_svfprintf_r+0x2de>
  40802a:	2e65      	cmp	r6, #101	; 0x65
  40802c:	f340 80c9 	ble.w	4081c2 <_svfprintf_r+0x9f6>
  408030:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408032:	2200      	movs	r2, #0
  408034:	2300      	movs	r3, #0
  408036:	9914      	ldr	r1, [sp, #80]	; 0x50
  408038:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40803c:	f003 ff6c 	bl	40bf18 <__aeabi_dcmpeq>
  408040:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  408044:	2800      	cmp	r0, #0
  408046:	f000 8165 	beq.w	408314 <_svfprintf_r+0xb48>
  40804a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40804c:	2201      	movs	r2, #1
  40804e:	f10c 0c01 	add.w	ip, ip, #1
  408052:	492c      	ldr	r1, [pc, #176]	; (408104 <_svfprintf_r+0x938>)
  408054:	4413      	add	r3, r2
  408056:	f8cb 2004 	str.w	r2, [fp, #4]
  40805a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40805e:	2b07      	cmp	r3, #7
  408060:	f8cb 1000 	str.w	r1, [fp]
  408064:	9324      	str	r3, [sp, #144]	; 0x90
  408066:	f300 8343 	bgt.w	4086f0 <_svfprintf_r+0xf24>
  40806a:	f10b 0b08 	add.w	fp, fp, #8
  40806e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408070:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408072:	4293      	cmp	r3, r2
  408074:	db03      	blt.n	40807e <_svfprintf_r+0x8b2>
  408076:	9b06      	ldr	r3, [sp, #24]
  408078:	07de      	lsls	r6, r3, #31
  40807a:	f57f ad92 	bpl.w	407ba2 <_svfprintf_r+0x3d6>
  40807e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408080:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408082:	3301      	adds	r3, #1
  408084:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408086:	448c      	add	ip, r1
  408088:	f8cb 1004 	str.w	r1, [fp, #4]
  40808c:	2b07      	cmp	r3, #7
  40808e:	f8cb 2000 	str.w	r2, [fp]
  408092:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408096:	9324      	str	r3, [sp, #144]	; 0x90
  408098:	f300 841d 	bgt.w	4088d6 <_svfprintf_r+0x110a>
  40809c:	f10b 0b08 	add.w	fp, fp, #8
  4080a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4080a2:	1e5c      	subs	r4, r3, #1
  4080a4:	2c00      	cmp	r4, #0
  4080a6:	f77f ad7c 	ble.w	407ba2 <_svfprintf_r+0x3d6>
  4080aa:	2c10      	cmp	r4, #16
  4080ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080ae:	f340 85bc 	ble.w	408c2a <_svfprintf_r+0x145e>
  4080b2:	2610      	movs	r6, #16
  4080b4:	4d14      	ldr	r5, [pc, #80]	; (408108 <_svfprintf_r+0x93c>)
  4080b6:	4662      	mov	r2, ip
  4080b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4080ba:	e003      	b.n	4080c4 <_svfprintf_r+0x8f8>
  4080bc:	3c10      	subs	r4, #16
  4080be:	2c10      	cmp	r4, #16
  4080c0:	f340 81c8 	ble.w	408454 <_svfprintf_r+0xc88>
  4080c4:	3301      	adds	r3, #1
  4080c6:	3210      	adds	r2, #16
  4080c8:	f8cb 5000 	str.w	r5, [fp]
  4080cc:	f10b 0b08 	add.w	fp, fp, #8
  4080d0:	2b07      	cmp	r3, #7
  4080d2:	f84b 6c04 	str.w	r6, [fp, #-4]
  4080d6:	9225      	str	r2, [sp, #148]	; 0x94
  4080d8:	9324      	str	r3, [sp, #144]	; 0x90
  4080da:	ddef      	ble.n	4080bc <_svfprintf_r+0x8f0>
  4080dc:	4638      	mov	r0, r7
  4080de:	4649      	mov	r1, r9
  4080e0:	aa23      	add	r2, sp, #140	; 0x8c
  4080e2:	46c3      	mov	fp, r8
  4080e4:	f003 fd00 	bl	40bae8 <__ssprint_r>
  4080e8:	2800      	cmp	r0, #0
  4080ea:	f47f ac34 	bne.w	407956 <_svfprintf_r+0x18a>
  4080ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080f2:	e7e3      	b.n	4080bc <_svfprintf_r+0x8f0>
  4080f4:	0040d028 	.word	0x0040d028
  4080f8:	0040d03c 	.word	0x0040d03c
  4080fc:	0040d01c 	.word	0x0040d01c
  408100:	0040d018 	.word	0x0040d018
  408104:	0040d058 	.word	0x0040d058
  408108:	0040cff8 	.word	0x0040cff8
  40810c:	2b01      	cmp	r3, #1
  40810e:	f000 814d 	beq.w	4083ac <_svfprintf_r+0xbe0>
  408112:	2b02      	cmp	r3, #2
  408114:	f040 80e3 	bne.w	4082de <_svfprintf_r+0xb12>
  408118:	46c2      	mov	sl, r8
  40811a:	9815      	ldr	r0, [sp, #84]	; 0x54
  40811c:	0923      	lsrs	r3, r4, #4
  40811e:	f004 010f 	and.w	r1, r4, #15
  408122:	092a      	lsrs	r2, r5, #4
  408124:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408128:	4615      	mov	r5, r2
  40812a:	461c      	mov	r4, r3
  40812c:	5c43      	ldrb	r3, [r0, r1]
  40812e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  408132:	ea54 0305 	orrs.w	r3, r4, r5
  408136:	d1f1      	bne.n	40811c <_svfprintf_r+0x950>
  408138:	4653      	mov	r3, sl
  40813a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40813e:	ebc3 0408 	rsb	r4, r3, r8
  408142:	e44f      	b.n	4079e4 <_svfprintf_r+0x218>
  408144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408146:	9a07      	ldr	r2, [sp, #28]
  408148:	1a9f      	subs	r7, r3, r2
  40814a:	2f00      	cmp	r7, #0
  40814c:	f77f acd9 	ble.w	407b02 <_svfprintf_r+0x336>
  408150:	2f10      	cmp	r7, #16
  408152:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408154:	f340 84f9 	ble.w	408b4a <_svfprintf_r+0x137e>
  408158:	940d      	str	r4, [sp, #52]	; 0x34
  40815a:	f04f 0a10 	mov.w	sl, #16
  40815e:	4dc8      	ldr	r5, [pc, #800]	; (408480 <_svfprintf_r+0xcb4>)
  408160:	4662      	mov	r2, ip
  408162:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408164:	e002      	b.n	40816c <_svfprintf_r+0x9a0>
  408166:	3f10      	subs	r7, #16
  408168:	2f10      	cmp	r7, #16
  40816a:	dd19      	ble.n	4081a0 <_svfprintf_r+0x9d4>
  40816c:	3301      	adds	r3, #1
  40816e:	3210      	adds	r2, #16
  408170:	f8cb 5000 	str.w	r5, [fp]
  408174:	f10b 0b08 	add.w	fp, fp, #8
  408178:	2b07      	cmp	r3, #7
  40817a:	f84b ac04 	str.w	sl, [fp, #-4]
  40817e:	9225      	str	r2, [sp, #148]	; 0x94
  408180:	9324      	str	r3, [sp, #144]	; 0x90
  408182:	ddf0      	ble.n	408166 <_svfprintf_r+0x99a>
  408184:	4620      	mov	r0, r4
  408186:	4649      	mov	r1, r9
  408188:	aa23      	add	r2, sp, #140	; 0x8c
  40818a:	46c3      	mov	fp, r8
  40818c:	f003 fcac 	bl	40bae8 <__ssprint_r>
  408190:	2800      	cmp	r0, #0
  408192:	f47f abe0 	bne.w	407956 <_svfprintf_r+0x18a>
  408196:	3f10      	subs	r7, #16
  408198:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40819a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40819c:	2f10      	cmp	r7, #16
  40819e:	dce5      	bgt.n	40816c <_svfprintf_r+0x9a0>
  4081a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4081a2:	4694      	mov	ip, r2
  4081a4:	3301      	adds	r3, #1
  4081a6:	44bc      	add	ip, r7
  4081a8:	f8cb 5000 	str.w	r5, [fp]
  4081ac:	2b07      	cmp	r3, #7
  4081ae:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4081b2:	9324      	str	r3, [sp, #144]	; 0x90
  4081b4:	f8cb 7004 	str.w	r7, [fp, #4]
  4081b8:	f300 81fc 	bgt.w	4085b4 <_svfprintf_r+0xde8>
  4081bc:	f10b 0b08 	add.w	fp, fp, #8
  4081c0:	e49f      	b.n	407b02 <_svfprintf_r+0x336>
  4081c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081c4:	f10c 0601 	add.w	r6, ip, #1
  4081c8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4081ca:	2b01      	cmp	r3, #1
  4081cc:	f340 81c9 	ble.w	408562 <_svfprintf_r+0xd96>
  4081d0:	2301      	movs	r3, #1
  4081d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4081d4:	9625      	str	r6, [sp, #148]	; 0x94
  4081d6:	441c      	add	r4, r3
  4081d8:	f8cb 2000 	str.w	r2, [fp]
  4081dc:	f8cb 3004 	str.w	r3, [fp, #4]
  4081e0:	2c07      	cmp	r4, #7
  4081e2:	9424      	str	r4, [sp, #144]	; 0x90
  4081e4:	f300 81da 	bgt.w	40859c <_svfprintf_r+0xdd0>
  4081e8:	f10b 0b08 	add.w	fp, fp, #8
  4081ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4081ee:	3401      	adds	r4, #1
  4081f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4081f2:	4416      	add	r6, r2
  4081f4:	2c07      	cmp	r4, #7
  4081f6:	f8cb 3000 	str.w	r3, [fp]
  4081fa:	9625      	str	r6, [sp, #148]	; 0x94
  4081fc:	9424      	str	r4, [sp, #144]	; 0x90
  4081fe:	f8cb 2004 	str.w	r2, [fp, #4]
  408202:	f300 81bf 	bgt.w	408584 <_svfprintf_r+0xdb8>
  408206:	f10b 0b08 	add.w	fp, fp, #8
  40820a:	2300      	movs	r3, #0
  40820c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40820e:	2200      	movs	r2, #0
  408210:	9914      	ldr	r1, [sp, #80]	; 0x50
  408212:	f003 fe81 	bl	40bf18 <__aeabi_dcmpeq>
  408216:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408218:	2800      	cmp	r0, #0
  40821a:	f040 80dc 	bne.w	4083d6 <_svfprintf_r+0xc0a>
  40821e:	3b01      	subs	r3, #1
  408220:	3401      	adds	r4, #1
  408222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408224:	441e      	add	r6, r3
  408226:	2c07      	cmp	r4, #7
  408228:	f102 0201 	add.w	r2, r2, #1
  40822c:	9424      	str	r4, [sp, #144]	; 0x90
  40822e:	9625      	str	r6, [sp, #148]	; 0x94
  408230:	f8cb 2000 	str.w	r2, [fp]
  408234:	f8cb 3004 	str.w	r3, [fp, #4]
  408238:	f300 8100 	bgt.w	40843c <_svfprintf_r+0xc70>
  40823c:	f10b 0b08 	add.w	fp, fp, #8
  408240:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408242:	3401      	adds	r4, #1
  408244:	ab1f      	add	r3, sp, #124	; 0x7c
  408246:	eb06 0c02 	add.w	ip, r6, r2
  40824a:	2c07      	cmp	r4, #7
  40824c:	f8cb 2004 	str.w	r2, [fp, #4]
  408250:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408254:	9424      	str	r4, [sp, #144]	; 0x90
  408256:	f8cb 3000 	str.w	r3, [fp]
  40825a:	f77f aca0 	ble.w	407b9e <_svfprintf_r+0x3d2>
  40825e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408260:	4649      	mov	r1, r9
  408262:	aa23      	add	r2, sp, #140	; 0x8c
  408264:	f003 fc40 	bl	40bae8 <__ssprint_r>
  408268:	2800      	cmp	r0, #0
  40826a:	f47f ab74 	bne.w	407956 <_svfprintf_r+0x18a>
  40826e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408272:	46c3      	mov	fp, r8
  408274:	e495      	b.n	407ba2 <_svfprintf_r+0x3d6>
  408276:	9809      	ldr	r0, [sp, #36]	; 0x24
  408278:	4649      	mov	r1, r9
  40827a:	aa23      	add	r2, sp, #140	; 0x8c
  40827c:	f003 fc34 	bl	40bae8 <__ssprint_r>
  408280:	2800      	cmp	r0, #0
  408282:	f43f acde 	beq.w	407c42 <_svfprintf_r+0x476>
  408286:	f7ff bb66 	b.w	407956 <_svfprintf_r+0x18a>
  40828a:	4614      	mov	r4, r2
  40828c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  408290:	f7ff bba8 	b.w	4079e4 <_svfprintf_r+0x218>
  408294:	9809      	ldr	r0, [sp, #36]	; 0x24
  408296:	4649      	mov	r1, r9
  408298:	aa23      	add	r2, sp, #140	; 0x8c
  40829a:	f003 fc25 	bl	40bae8 <__ssprint_r>
  40829e:	2800      	cmp	r0, #0
  4082a0:	f47f ab59 	bne.w	407956 <_svfprintf_r+0x18a>
  4082a4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4082a8:	46c3      	mov	fp, r8
  4082aa:	e466      	b.n	407b7a <_svfprintf_r+0x3ae>
  4082ac:	9809      	ldr	r0, [sp, #36]	; 0x24
  4082ae:	4649      	mov	r1, r9
  4082b0:	aa23      	add	r2, sp, #140	; 0x8c
  4082b2:	f003 fc19 	bl	40bae8 <__ssprint_r>
  4082b6:	2800      	cmp	r0, #0
  4082b8:	f47f ab4d 	bne.w	407956 <_svfprintf_r+0x18a>
  4082bc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4082c0:	46c3      	mov	fp, r8
  4082c2:	e41a      	b.n	407afa <_svfprintf_r+0x32e>
  4082c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4082c6:	4649      	mov	r1, r9
  4082c8:	aa23      	add	r2, sp, #140	; 0x8c
  4082ca:	f003 fc0d 	bl	40bae8 <__ssprint_r>
  4082ce:	2800      	cmp	r0, #0
  4082d0:	f47f ab41 	bne.w	407956 <_svfprintf_r+0x18a>
  4082d4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4082d8:	46c3      	mov	fp, r8
  4082da:	f7ff bbfa 	b.w	407ad2 <_svfprintf_r+0x306>
  4082de:	4641      	mov	r1, r8
  4082e0:	08e2      	lsrs	r2, r4, #3
  4082e2:	f004 0307 	and.w	r3, r4, #7
  4082e6:	08e8      	lsrs	r0, r5, #3
  4082e8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4082ec:	3330      	adds	r3, #48	; 0x30
  4082ee:	4605      	mov	r5, r0
  4082f0:	4614      	mov	r4, r2
  4082f2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  4082f6:	ea54 0205 	orrs.w	r2, r4, r5
  4082fa:	d1f1      	bne.n	4082e0 <_svfprintf_r+0xb14>
  4082fc:	9a06      	ldr	r2, [sp, #24]
  4082fe:	910f      	str	r1, [sp, #60]	; 0x3c
  408300:	07d0      	lsls	r0, r2, #31
  408302:	f100 8164 	bmi.w	4085ce <_svfprintf_r+0xe02>
  408306:	ebc1 0408 	rsb	r4, r1, r8
  40830a:	f7ff bb6b 	b.w	4079e4 <_svfprintf_r+0x218>
  40830e:	2302      	movs	r3, #2
  408310:	f7ff bb3f 	b.w	407992 <_svfprintf_r+0x1c6>
  408314:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408316:	2c00      	cmp	r4, #0
  408318:	f340 81f6 	ble.w	408708 <_svfprintf_r+0xf3c>
  40831c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40831e:	9911      	ldr	r1, [sp, #68]	; 0x44
  408320:	4613      	mov	r3, r2
  408322:	428a      	cmp	r2, r1
  408324:	bfa8      	it	ge
  408326:	460b      	movge	r3, r1
  408328:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40832a:	461c      	mov	r4, r3
  40832c:	188f      	adds	r7, r1, r2
  40832e:	2c00      	cmp	r4, #0
  408330:	dd0e      	ble.n	408350 <_svfprintf_r+0xb84>
  408332:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408334:	44a4      	add	ip, r4
  408336:	f8cb 1000 	str.w	r1, [fp]
  40833a:	3301      	adds	r3, #1
  40833c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408340:	f8cb 4004 	str.w	r4, [fp, #4]
  408344:	2b07      	cmp	r3, #7
  408346:	9324      	str	r3, [sp, #144]	; 0x90
  408348:	f300 8353 	bgt.w	4089f2 <_svfprintf_r+0x1226>
  40834c:	f10b 0b08 	add.w	fp, fp, #8
  408350:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408352:	2c00      	cmp	r4, #0
  408354:	bfa8      	it	ge
  408356:	1b1b      	subge	r3, r3, r4
  408358:	2b00      	cmp	r3, #0
  40835a:	461c      	mov	r4, r3
  40835c:	f340 80a1 	ble.w	4084a2 <_svfprintf_r+0xcd6>
  408360:	2c10      	cmp	r4, #16
  408362:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408364:	f340 846c 	ble.w	408c40 <_svfprintf_r+0x1474>
  408368:	2610      	movs	r6, #16
  40836a:	4d45      	ldr	r5, [pc, #276]	; (408480 <_svfprintf_r+0xcb4>)
  40836c:	4662      	mov	r2, ip
  40836e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  408372:	e003      	b.n	40837c <_svfprintf_r+0xbb0>
  408374:	3c10      	subs	r4, #16
  408376:	2c10      	cmp	r4, #16
  408378:	f340 8084 	ble.w	408484 <_svfprintf_r+0xcb8>
  40837c:	3301      	adds	r3, #1
  40837e:	3210      	adds	r2, #16
  408380:	f8cb 5000 	str.w	r5, [fp]
  408384:	f10b 0b08 	add.w	fp, fp, #8
  408388:	2b07      	cmp	r3, #7
  40838a:	f84b 6c04 	str.w	r6, [fp, #-4]
  40838e:	9225      	str	r2, [sp, #148]	; 0x94
  408390:	9324      	str	r3, [sp, #144]	; 0x90
  408392:	ddef      	ble.n	408374 <_svfprintf_r+0xba8>
  408394:	4650      	mov	r0, sl
  408396:	4649      	mov	r1, r9
  408398:	aa23      	add	r2, sp, #140	; 0x8c
  40839a:	46c3      	mov	fp, r8
  40839c:	f003 fba4 	bl	40bae8 <__ssprint_r>
  4083a0:	2800      	cmp	r0, #0
  4083a2:	f47f aad8 	bne.w	407956 <_svfprintf_r+0x18a>
  4083a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4083a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4083aa:	e7e3      	b.n	408374 <_svfprintf_r+0xba8>
  4083ac:	2d00      	cmp	r5, #0
  4083ae:	bf08      	it	eq
  4083b0:	2c0a      	cmpeq	r4, #10
  4083b2:	f080 811a 	bcs.w	4085ea <_svfprintf_r+0xe1e>
  4083b6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4083ba:	3430      	adds	r4, #48	; 0x30
  4083bc:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  4083c0:	ebca 0408 	rsb	r4, sl, r8
  4083c4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4083c8:	f7ff bb0c 	b.w	4079e4 <_svfprintf_r+0x218>
  4083cc:	461c      	mov	r4, r3
  4083ce:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4083d2:	f7ff bb07 	b.w	4079e4 <_svfprintf_r+0x218>
  4083d6:	1e5f      	subs	r7, r3, #1
  4083d8:	2f00      	cmp	r7, #0
  4083da:	f77f af31 	ble.w	408240 <_svfprintf_r+0xa74>
  4083de:	2f10      	cmp	r7, #16
  4083e0:	4d27      	ldr	r5, [pc, #156]	; (408480 <_svfprintf_r+0xcb4>)
  4083e2:	bfc8      	it	gt
  4083e4:	f04f 0a10 	movgt.w	sl, #16
  4083e8:	dc03      	bgt.n	4083f2 <_svfprintf_r+0xc26>
  4083ea:	e01c      	b.n	408426 <_svfprintf_r+0xc5a>
  4083ec:	3f10      	subs	r7, #16
  4083ee:	2f10      	cmp	r7, #16
  4083f0:	dd19      	ble.n	408426 <_svfprintf_r+0xc5a>
  4083f2:	3401      	adds	r4, #1
  4083f4:	3610      	adds	r6, #16
  4083f6:	f8cb 5000 	str.w	r5, [fp]
  4083fa:	f10b 0b08 	add.w	fp, fp, #8
  4083fe:	2c07      	cmp	r4, #7
  408400:	f84b ac04 	str.w	sl, [fp, #-4]
  408404:	9625      	str	r6, [sp, #148]	; 0x94
  408406:	9424      	str	r4, [sp, #144]	; 0x90
  408408:	ddf0      	ble.n	4083ec <_svfprintf_r+0xc20>
  40840a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40840c:	4649      	mov	r1, r9
  40840e:	aa23      	add	r2, sp, #140	; 0x8c
  408410:	46c3      	mov	fp, r8
  408412:	f003 fb69 	bl	40bae8 <__ssprint_r>
  408416:	2800      	cmp	r0, #0
  408418:	f47f aa9d 	bne.w	407956 <_svfprintf_r+0x18a>
  40841c:	3f10      	subs	r7, #16
  40841e:	9e25      	ldr	r6, [sp, #148]	; 0x94
  408420:	9c24      	ldr	r4, [sp, #144]	; 0x90
  408422:	2f10      	cmp	r7, #16
  408424:	dce5      	bgt.n	4083f2 <_svfprintf_r+0xc26>
  408426:	3401      	adds	r4, #1
  408428:	443e      	add	r6, r7
  40842a:	f8cb 5000 	str.w	r5, [fp]
  40842e:	2c07      	cmp	r4, #7
  408430:	9625      	str	r6, [sp, #148]	; 0x94
  408432:	9424      	str	r4, [sp, #144]	; 0x90
  408434:	f8cb 7004 	str.w	r7, [fp, #4]
  408438:	f77f af00 	ble.w	40823c <_svfprintf_r+0xa70>
  40843c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40843e:	4649      	mov	r1, r9
  408440:	aa23      	add	r2, sp, #140	; 0x8c
  408442:	f003 fb51 	bl	40bae8 <__ssprint_r>
  408446:	2800      	cmp	r0, #0
  408448:	f47f aa85 	bne.w	407956 <_svfprintf_r+0x18a>
  40844c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40844e:	46c3      	mov	fp, r8
  408450:	9c24      	ldr	r4, [sp, #144]	; 0x90
  408452:	e6f5      	b.n	408240 <_svfprintf_r+0xa74>
  408454:	4694      	mov	ip, r2
  408456:	3301      	adds	r3, #1
  408458:	44a4      	add	ip, r4
  40845a:	f8cb 5000 	str.w	r5, [fp]
  40845e:	2b07      	cmp	r3, #7
  408460:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408464:	9324      	str	r3, [sp, #144]	; 0x90
  408466:	f8cb 4004 	str.w	r4, [fp, #4]
  40846a:	f77f ab98 	ble.w	407b9e <_svfprintf_r+0x3d2>
  40846e:	e6f6      	b.n	40825e <_svfprintf_r+0xa92>
  408470:	990c      	ldr	r1, [sp, #48]	; 0x30
  408472:	2500      	movs	r5, #0
  408474:	460a      	mov	r2, r1
  408476:	680c      	ldr	r4, [r1, #0]
  408478:	3204      	adds	r2, #4
  40847a:	920c      	str	r2, [sp, #48]	; 0x30
  40847c:	f7ff ba89 	b.w	407992 <_svfprintf_r+0x1c6>
  408480:	0040cff8 	.word	0x0040cff8
  408484:	4694      	mov	ip, r2
  408486:	3301      	adds	r3, #1
  408488:	44a4      	add	ip, r4
  40848a:	f8cb 5000 	str.w	r5, [fp]
  40848e:	2b07      	cmp	r3, #7
  408490:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408494:	9324      	str	r3, [sp, #144]	; 0x90
  408496:	f8cb 4004 	str.w	r4, [fp, #4]
  40849a:	f300 82df 	bgt.w	408a5c <_svfprintf_r+0x1290>
  40849e:	f10b 0b08 	add.w	fp, fp, #8
  4084a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4084a4:	9911      	ldr	r1, [sp, #68]	; 0x44
  4084a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4084a8:	440a      	add	r2, r1
  4084aa:	4616      	mov	r6, r2
  4084ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084ae:	4293      	cmp	r3, r2
  4084b0:	db45      	blt.n	40853e <_svfprintf_r+0xd72>
  4084b2:	9a06      	ldr	r2, [sp, #24]
  4084b4:	07d0      	lsls	r0, r2, #31
  4084b6:	d442      	bmi.n	40853e <_svfprintf_r+0xd72>
  4084b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084ba:	1bbc      	subs	r4, r7, r6
  4084bc:	1ad3      	subs	r3, r2, r3
  4084be:	429c      	cmp	r4, r3
  4084c0:	bfa8      	it	ge
  4084c2:	461c      	movge	r4, r3
  4084c4:	2c00      	cmp	r4, #0
  4084c6:	4625      	mov	r5, r4
  4084c8:	dd0e      	ble.n	4084e8 <_svfprintf_r+0xd1c>
  4084ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4084cc:	44a4      	add	ip, r4
  4084ce:	f8cb 6000 	str.w	r6, [fp]
  4084d2:	3201      	adds	r2, #1
  4084d4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4084d8:	f8cb 4004 	str.w	r4, [fp, #4]
  4084dc:	2a07      	cmp	r2, #7
  4084de:	9224      	str	r2, [sp, #144]	; 0x90
  4084e0:	f300 82a0 	bgt.w	408a24 <_svfprintf_r+0x1258>
  4084e4:	f10b 0b08 	add.w	fp, fp, #8
  4084e8:	2d00      	cmp	r5, #0
  4084ea:	bfac      	ite	ge
  4084ec:	1b5c      	subge	r4, r3, r5
  4084ee:	461c      	movlt	r4, r3
  4084f0:	2c00      	cmp	r4, #0
  4084f2:	f77f ab56 	ble.w	407ba2 <_svfprintf_r+0x3d6>
  4084f6:	2c10      	cmp	r4, #16
  4084f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084fa:	f340 8396 	ble.w	408c2a <_svfprintf_r+0x145e>
  4084fe:	2610      	movs	r6, #16
  408500:	4db1      	ldr	r5, [pc, #708]	; (4087c8 <_svfprintf_r+0xffc>)
  408502:	4662      	mov	r2, ip
  408504:	9f09      	ldr	r7, [sp, #36]	; 0x24
  408506:	e002      	b.n	40850e <_svfprintf_r+0xd42>
  408508:	3c10      	subs	r4, #16
  40850a:	2c10      	cmp	r4, #16
  40850c:	dda2      	ble.n	408454 <_svfprintf_r+0xc88>
  40850e:	3301      	adds	r3, #1
  408510:	3210      	adds	r2, #16
  408512:	f8cb 5000 	str.w	r5, [fp]
  408516:	f10b 0b08 	add.w	fp, fp, #8
  40851a:	2b07      	cmp	r3, #7
  40851c:	f84b 6c04 	str.w	r6, [fp, #-4]
  408520:	9225      	str	r2, [sp, #148]	; 0x94
  408522:	9324      	str	r3, [sp, #144]	; 0x90
  408524:	ddf0      	ble.n	408508 <_svfprintf_r+0xd3c>
  408526:	4638      	mov	r0, r7
  408528:	4649      	mov	r1, r9
  40852a:	aa23      	add	r2, sp, #140	; 0x8c
  40852c:	46c3      	mov	fp, r8
  40852e:	f003 fadb 	bl	40bae8 <__ssprint_r>
  408532:	2800      	cmp	r0, #0
  408534:	f47f aa0f 	bne.w	407956 <_svfprintf_r+0x18a>
  408538:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40853a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40853c:	e7e4      	b.n	408508 <_svfprintf_r+0xd3c>
  40853e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408540:	9817      	ldr	r0, [sp, #92]	; 0x5c
  408542:	3201      	adds	r2, #1
  408544:	9916      	ldr	r1, [sp, #88]	; 0x58
  408546:	4484      	add	ip, r0
  408548:	f8cb 0004 	str.w	r0, [fp, #4]
  40854c:	2a07      	cmp	r2, #7
  40854e:	f8cb 1000 	str.w	r1, [fp]
  408552:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408556:	9224      	str	r2, [sp, #144]	; 0x90
  408558:	f300 8273 	bgt.w	408a42 <_svfprintf_r+0x1276>
  40855c:	f10b 0b08 	add.w	fp, fp, #8
  408560:	e7aa      	b.n	4084b8 <_svfprintf_r+0xcec>
  408562:	9b06      	ldr	r3, [sp, #24]
  408564:	07d9      	lsls	r1, r3, #31
  408566:	f53f ae33 	bmi.w	4081d0 <_svfprintf_r+0xa04>
  40856a:	2301      	movs	r3, #1
  40856c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40856e:	9625      	str	r6, [sp, #148]	; 0x94
  408570:	441c      	add	r4, r3
  408572:	f8cb 2000 	str.w	r2, [fp]
  408576:	f8cb 3004 	str.w	r3, [fp, #4]
  40857a:	2c07      	cmp	r4, #7
  40857c:	9424      	str	r4, [sp, #144]	; 0x90
  40857e:	f77f ae5d 	ble.w	40823c <_svfprintf_r+0xa70>
  408582:	e75b      	b.n	40843c <_svfprintf_r+0xc70>
  408584:	9809      	ldr	r0, [sp, #36]	; 0x24
  408586:	4649      	mov	r1, r9
  408588:	aa23      	add	r2, sp, #140	; 0x8c
  40858a:	f003 faad 	bl	40bae8 <__ssprint_r>
  40858e:	2800      	cmp	r0, #0
  408590:	f47f a9e1 	bne.w	407956 <_svfprintf_r+0x18a>
  408594:	9e25      	ldr	r6, [sp, #148]	; 0x94
  408596:	46c3      	mov	fp, r8
  408598:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40859a:	e636      	b.n	40820a <_svfprintf_r+0xa3e>
  40859c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40859e:	4649      	mov	r1, r9
  4085a0:	aa23      	add	r2, sp, #140	; 0x8c
  4085a2:	f003 faa1 	bl	40bae8 <__ssprint_r>
  4085a6:	2800      	cmp	r0, #0
  4085a8:	f47f a9d5 	bne.w	407956 <_svfprintf_r+0x18a>
  4085ac:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4085ae:	46c3      	mov	fp, r8
  4085b0:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4085b2:	e61b      	b.n	4081ec <_svfprintf_r+0xa20>
  4085b4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4085b6:	4649      	mov	r1, r9
  4085b8:	aa23      	add	r2, sp, #140	; 0x8c
  4085ba:	f003 fa95 	bl	40bae8 <__ssprint_r>
  4085be:	2800      	cmp	r0, #0
  4085c0:	f47f a9c9 	bne.w	407956 <_svfprintf_r+0x18a>
  4085c4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4085c8:	46c3      	mov	fp, r8
  4085ca:	f7ff ba9a 	b.w	407b02 <_svfprintf_r+0x336>
  4085ce:	2b30      	cmp	r3, #48	; 0x30
  4085d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4085d2:	f43f adb4 	beq.w	40813e <_svfprintf_r+0x972>
  4085d6:	3b01      	subs	r3, #1
  4085d8:	461a      	mov	r2, r3
  4085da:	930f      	str	r3, [sp, #60]	; 0x3c
  4085dc:	2330      	movs	r3, #48	; 0x30
  4085de:	ebc2 0408 	rsb	r4, r2, r8
  4085e2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4085e6:	f7ff b9fd 	b.w	4079e4 <_svfprintf_r+0x218>
  4085ea:	46c2      	mov	sl, r8
  4085ec:	f8cd c01c 	str.w	ip, [sp, #28]
  4085f0:	4620      	mov	r0, r4
  4085f2:	4629      	mov	r1, r5
  4085f4:	220a      	movs	r2, #10
  4085f6:	2300      	movs	r3, #0
  4085f8:	f003 fce8 	bl	40bfcc <__aeabi_uldivmod>
  4085fc:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  408600:	4620      	mov	r0, r4
  408602:	4629      	mov	r1, r5
  408604:	2300      	movs	r3, #0
  408606:	220a      	movs	r2, #10
  408608:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40860c:	f003 fcde 	bl	40bfcc <__aeabi_uldivmod>
  408610:	4604      	mov	r4, r0
  408612:	460d      	mov	r5, r1
  408614:	ea54 0305 	orrs.w	r3, r4, r5
  408618:	d1ea      	bne.n	4085f0 <_svfprintf_r+0xe24>
  40861a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40861e:	ebca 0408 	rsb	r4, sl, r8
  408622:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  408626:	f7ff b9dd 	b.w	4079e4 <_svfprintf_r+0x218>
  40862a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40862c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40862e:	f8cd c01c 	str.w	ip, [sp, #28]
  408632:	f003 f9e1 	bl	40b9f8 <__fpclassifyd>
  408636:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40863a:	2800      	cmp	r0, #0
  40863c:	f040 80cc 	bne.w	4087d8 <_svfprintf_r+0x100c>
  408640:	9c06      	ldr	r4, [sp, #24]
  408642:	2103      	movs	r1, #3
  408644:	4a61      	ldr	r2, [pc, #388]	; (4087cc <_svfprintf_r+0x1000>)
  408646:	4b62      	ldr	r3, [pc, #392]	; (4087d0 <_svfprintf_r+0x1004>)
  408648:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40864c:	9010      	str	r0, [sp, #64]	; 0x40
  40864e:	2e47      	cmp	r6, #71	; 0x47
  408650:	bfd8      	it	le
  408652:	461a      	movle	r2, r3
  408654:	9406      	str	r4, [sp, #24]
  408656:	9107      	str	r1, [sp, #28]
  408658:	460c      	mov	r4, r1
  40865a:	9011      	str	r0, [sp, #68]	; 0x44
  40865c:	920f      	str	r2, [sp, #60]	; 0x3c
  40865e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408662:	f7ff b9c6 	b.w	4079f2 <_svfprintf_r+0x226>
  408666:	9b06      	ldr	r3, [sp, #24]
  408668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40866a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40866e:	4613      	mov	r3, r2
  408670:	f43f abc9 	beq.w	407e06 <_svfprintf_r+0x63a>
  408674:	8814      	ldrh	r4, [r2, #0]
  408676:	3204      	adds	r2, #4
  408678:	2500      	movs	r5, #0
  40867a:	2301      	movs	r3, #1
  40867c:	920c      	str	r2, [sp, #48]	; 0x30
  40867e:	f7ff b988 	b.w	407992 <_svfprintf_r+0x1c6>
  408682:	9b06      	ldr	r3, [sp, #24]
  408684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408686:	f013 0f40 	tst.w	r3, #64	; 0x40
  40868a:	4613      	mov	r3, r2
  40868c:	f000 8130 	beq.w	4088f0 <_svfprintf_r+0x1124>
  408690:	3304      	adds	r3, #4
  408692:	8814      	ldrh	r4, [r2, #0]
  408694:	2500      	movs	r5, #0
  408696:	930c      	str	r3, [sp, #48]	; 0x30
  408698:	f7ff bbcd 	b.w	407e36 <_svfprintf_r+0x66a>
  40869c:	9b06      	ldr	r3, [sp, #24]
  40869e:	06dd      	lsls	r5, r3, #27
  4086a0:	d40b      	bmi.n	4086ba <_svfprintf_r+0xeee>
  4086a2:	9b06      	ldr	r3, [sp, #24]
  4086a4:	065c      	lsls	r4, r3, #25
  4086a6:	d508      	bpl.n	4086ba <_svfprintf_r+0xeee>
  4086a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4086aa:	6813      	ldr	r3, [r2, #0]
  4086ac:	3204      	adds	r2, #4
  4086ae:	920c      	str	r2, [sp, #48]	; 0x30
  4086b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  4086b4:	801a      	strh	r2, [r3, #0]
  4086b6:	f7ff b8af 	b.w	407818 <_svfprintf_r+0x4c>
  4086ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4086bc:	6813      	ldr	r3, [r2, #0]
  4086be:	3204      	adds	r2, #4
  4086c0:	920c      	str	r2, [sp, #48]	; 0x30
  4086c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4086c4:	601a      	str	r2, [r3, #0]
  4086c6:	f7ff b8a7 	b.w	407818 <_svfprintf_r+0x4c>
  4086ca:	9b06      	ldr	r3, [sp, #24]
  4086cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4086ce:	f013 0f40 	tst.w	r3, #64	; 0x40
  4086d2:	4613      	mov	r3, r2
  4086d4:	f43f ac26 	beq.w	407f24 <_svfprintf_r+0x758>
  4086d8:	f9b2 4000 	ldrsh.w	r4, [r2]
  4086dc:	3304      	adds	r3, #4
  4086de:	17e5      	asrs	r5, r4, #31
  4086e0:	930c      	str	r3, [sp, #48]	; 0x30
  4086e2:	4622      	mov	r2, r4
  4086e4:	462b      	mov	r3, r5
  4086e6:	f7ff baf9 	b.w	407cdc <_svfprintf_r+0x510>
  4086ea:	4d37      	ldr	r5, [pc, #220]	; (4087c8 <_svfprintf_r+0xffc>)
  4086ec:	f7ff ba37 	b.w	407b5e <_svfprintf_r+0x392>
  4086f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4086f2:	4649      	mov	r1, r9
  4086f4:	aa23      	add	r2, sp, #140	; 0x8c
  4086f6:	f003 f9f7 	bl	40bae8 <__ssprint_r>
  4086fa:	2800      	cmp	r0, #0
  4086fc:	f47f a92b 	bne.w	407956 <_svfprintf_r+0x18a>
  408700:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408704:	46c3      	mov	fp, r8
  408706:	e4b2      	b.n	40806e <_svfprintf_r+0x8a2>
  408708:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40870a:	2201      	movs	r2, #1
  40870c:	f10c 0c01 	add.w	ip, ip, #1
  408710:	4930      	ldr	r1, [pc, #192]	; (4087d4 <_svfprintf_r+0x1008>)
  408712:	4413      	add	r3, r2
  408714:	f8cb 2004 	str.w	r2, [fp, #4]
  408718:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40871c:	2b07      	cmp	r3, #7
  40871e:	f8cb 1000 	str.w	r1, [fp]
  408722:	9324      	str	r3, [sp, #144]	; 0x90
  408724:	f300 80fa 	bgt.w	40891c <_svfprintf_r+0x1150>
  408728:	f10b 0b08 	add.w	fp, fp, #8
  40872c:	b92c      	cbnz	r4, 40873a <_svfprintf_r+0xf6e>
  40872e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408730:	b91b      	cbnz	r3, 40873a <_svfprintf_r+0xf6e>
  408732:	9b06      	ldr	r3, [sp, #24]
  408734:	07dd      	lsls	r5, r3, #31
  408736:	f57f aa34 	bpl.w	407ba2 <_svfprintf_r+0x3d6>
  40873a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40873c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40873e:	3301      	adds	r3, #1
  408740:	9816      	ldr	r0, [sp, #88]	; 0x58
  408742:	eb0c 0201 	add.w	r2, ip, r1
  408746:	f8cb 1004 	str.w	r1, [fp, #4]
  40874a:	2b07      	cmp	r3, #7
  40874c:	f8cb 0000 	str.w	r0, [fp]
  408750:	9225      	str	r2, [sp, #148]	; 0x94
  408752:	9324      	str	r3, [sp, #144]	; 0x90
  408754:	f300 824c 	bgt.w	408bf0 <_svfprintf_r+0x1424>
  408758:	f10b 0b08 	add.w	fp, fp, #8
  40875c:	4264      	negs	r4, r4
  40875e:	2c00      	cmp	r4, #0
  408760:	f340 8126 	ble.w	4089b0 <_svfprintf_r+0x11e4>
  408764:	2c10      	cmp	r4, #16
  408766:	4d18      	ldr	r5, [pc, #96]	; (4087c8 <_svfprintf_r+0xffc>)
  408768:	f340 814f 	ble.w	408a0a <_svfprintf_r+0x123e>
  40876c:	2610      	movs	r6, #16
  40876e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  408770:	e003      	b.n	40877a <_svfprintf_r+0xfae>
  408772:	3c10      	subs	r4, #16
  408774:	2c10      	cmp	r4, #16
  408776:	f340 8148 	ble.w	408a0a <_svfprintf_r+0x123e>
  40877a:	3301      	adds	r3, #1
  40877c:	3210      	adds	r2, #16
  40877e:	f8cb 5000 	str.w	r5, [fp]
  408782:	f10b 0b08 	add.w	fp, fp, #8
  408786:	2b07      	cmp	r3, #7
  408788:	f84b 6c04 	str.w	r6, [fp, #-4]
  40878c:	9225      	str	r2, [sp, #148]	; 0x94
  40878e:	9324      	str	r3, [sp, #144]	; 0x90
  408790:	ddef      	ble.n	408772 <_svfprintf_r+0xfa6>
  408792:	4638      	mov	r0, r7
  408794:	4649      	mov	r1, r9
  408796:	aa23      	add	r2, sp, #140	; 0x8c
  408798:	46c3      	mov	fp, r8
  40879a:	f003 f9a5 	bl	40bae8 <__ssprint_r>
  40879e:	2800      	cmp	r0, #0
  4087a0:	f47f a8d9 	bne.w	407956 <_svfprintf_r+0x18a>
  4087a4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4087a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4087a8:	e7e3      	b.n	408772 <_svfprintf_r+0xfa6>
  4087aa:	f041 0120 	orr.w	r1, r1, #32
  4087ae:	785e      	ldrb	r6, [r3, #1]
  4087b0:	9106      	str	r1, [sp, #24]
  4087b2:	1c59      	adds	r1, r3, #1
  4087b4:	f7ff b85f 	b.w	407876 <_svfprintf_r+0xaa>
  4087b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4087ba:	910c      	str	r1, [sp, #48]	; 0x30
  4087bc:	4619      	mov	r1, r3
  4087be:	4240      	negs	r0, r0
  4087c0:	900b      	str	r0, [sp, #44]	; 0x2c
  4087c2:	f7ff ba43 	b.w	407c4c <_svfprintf_r+0x480>
  4087c6:	bf00      	nop
  4087c8:	0040cff8 	.word	0x0040cff8
  4087cc:	0040d024 	.word	0x0040d024
  4087d0:	0040d020 	.word	0x0040d020
  4087d4:	0040d058 	.word	0x0040d058
  4087d8:	f1bc 3fff 	cmp.w	ip, #4294967295
  4087dc:	f026 0a20 	bic.w	sl, r6, #32
  4087e0:	f000 80a9 	beq.w	408936 <_svfprintf_r+0x116a>
  4087e4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4087e8:	f040 80a7 	bne.w	40893a <_svfprintf_r+0x116e>
  4087ec:	f1bc 0f00 	cmp.w	ip, #0
  4087f0:	f040 80a3 	bne.w	40893a <_svfprintf_r+0x116e>
  4087f4:	9b06      	ldr	r3, [sp, #24]
  4087f6:	f04f 0a47 	mov.w	sl, #71	; 0x47
  4087fa:	f04f 0c01 	mov.w	ip, #1
  4087fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408802:	930e      	str	r3, [sp, #56]	; 0x38
  408804:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408806:	2b00      	cmp	r3, #0
  408808:	f2c0 81ff 	blt.w	408c0a <_svfprintf_r+0x143e>
  40880c:	461d      	mov	r5, r3
  40880e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408810:	2300      	movs	r3, #0
  408812:	930d      	str	r3, [sp, #52]	; 0x34
  408814:	2002      	movs	r0, #2
  408816:	a91d      	add	r1, sp, #116	; 0x74
  408818:	f8cd c004 	str.w	ip, [sp, #4]
  40881c:	463a      	mov	r2, r7
  40881e:	9000      	str	r0, [sp, #0]
  408820:	a81e      	add	r0, sp, #120	; 0x78
  408822:	9102      	str	r1, [sp, #8]
  408824:	a921      	add	r1, sp, #132	; 0x84
  408826:	9003      	str	r0, [sp, #12]
  408828:	462b      	mov	r3, r5
  40882a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40882c:	9104      	str	r1, [sp, #16]
  40882e:	f8cd c01c 	str.w	ip, [sp, #28]
  408832:	f000 fbb9 	bl	408fa8 <_dtoa_r>
  408836:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40883a:	900f      	str	r0, [sp, #60]	; 0x3c
  40883c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408840:	f040 8242 	bne.w	408cc8 <_svfprintf_r+0x14fc>
  408844:	9b06      	ldr	r3, [sp, #24]
  408846:	07db      	lsls	r3, r3, #31
  408848:	f140 81f3 	bpl.w	408c32 <_svfprintf_r+0x1466>
  40884c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40884e:	eb03 040c 	add.w	r4, r3, ip
  408852:	4638      	mov	r0, r7
  408854:	2200      	movs	r2, #0
  408856:	2300      	movs	r3, #0
  408858:	4629      	mov	r1, r5
  40885a:	f8cd c01c 	str.w	ip, [sp, #28]
  40885e:	f003 fb5b 	bl	40bf18 <__aeabi_dcmpeq>
  408862:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408866:	2800      	cmp	r0, #0
  408868:	f040 8172 	bne.w	408b50 <_svfprintf_r+0x1384>
  40886c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40886e:	429c      	cmp	r4, r3
  408870:	d906      	bls.n	408880 <_svfprintf_r+0x10b4>
  408872:	2130      	movs	r1, #48	; 0x30
  408874:	1c5a      	adds	r2, r3, #1
  408876:	9221      	str	r2, [sp, #132]	; 0x84
  408878:	7019      	strb	r1, [r3, #0]
  40887a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40887c:	429c      	cmp	r4, r3
  40887e:	d8f9      	bhi.n	408874 <_svfprintf_r+0x10a8>
  408880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408882:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  408886:	eba3 0302 	sub.w	r3, r3, r2
  40888a:	9312      	str	r3, [sp, #72]	; 0x48
  40888c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40888e:	f040 8113 	bne.w	408ab8 <_svfprintf_r+0x12ec>
  408892:	459c      	cmp	ip, r3
  408894:	f2c0 8168 	blt.w	408b68 <_svfprintf_r+0x139c>
  408898:	1cd9      	adds	r1, r3, #3
  40889a:	f2c0 8165 	blt.w	408b68 <_svfprintf_r+0x139c>
  40889e:	2667      	movs	r6, #103	; 0x67
  4088a0:	9311      	str	r3, [sp, #68]	; 0x44
  4088a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088a6:	4293      	cmp	r3, r2
  4088a8:	f300 81b6 	bgt.w	408c18 <_svfprintf_r+0x144c>
  4088ac:	9b06      	ldr	r3, [sp, #24]
  4088ae:	07df      	lsls	r7, r3, #31
  4088b0:	f100 81c1 	bmi.w	408c36 <_svfprintf_r+0x146a>
  4088b4:	4614      	mov	r4, r2
  4088b6:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  4088ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4088bc:	2b00      	cmp	r3, #0
  4088be:	f040 80f0 	bne.w	408aa2 <_svfprintf_r+0x12d6>
  4088c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4088c4:	f8cd c01c 	str.w	ip, [sp, #28]
  4088c8:	9306      	str	r3, [sp, #24]
  4088ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4088cc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4088d0:	9310      	str	r3, [sp, #64]	; 0x40
  4088d2:	f7ff b88e 	b.w	4079f2 <_svfprintf_r+0x226>
  4088d6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4088d8:	4649      	mov	r1, r9
  4088da:	aa23      	add	r2, sp, #140	; 0x8c
  4088dc:	f003 f904 	bl	40bae8 <__ssprint_r>
  4088e0:	2800      	cmp	r0, #0
  4088e2:	f47f a838 	bne.w	407956 <_svfprintf_r+0x18a>
  4088e6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4088ea:	46c3      	mov	fp, r8
  4088ec:	f7ff bbd8 	b.w	4080a0 <_svfprintf_r+0x8d4>
  4088f0:	3304      	adds	r3, #4
  4088f2:	6814      	ldr	r4, [r2, #0]
  4088f4:	2500      	movs	r5, #0
  4088f6:	930c      	str	r3, [sp, #48]	; 0x30
  4088f8:	f7ff ba9d 	b.w	407e36 <_svfprintf_r+0x66a>
  4088fc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4088fe:	2140      	movs	r1, #64	; 0x40
  408900:	f001 ff82 	bl	40a808 <_malloc_r>
  408904:	f8c9 0000 	str.w	r0, [r9]
  408908:	f8c9 0010 	str.w	r0, [r9, #16]
  40890c:	2800      	cmp	r0, #0
  40890e:	f000 81d4 	beq.w	408cba <_svfprintf_r+0x14ee>
  408912:	2340      	movs	r3, #64	; 0x40
  408914:	f8c9 3014 	str.w	r3, [r9, #20]
  408918:	f7fe bf70 	b.w	4077fc <_svfprintf_r+0x30>
  40891c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40891e:	4649      	mov	r1, r9
  408920:	aa23      	add	r2, sp, #140	; 0x8c
  408922:	f003 f8e1 	bl	40bae8 <__ssprint_r>
  408926:	2800      	cmp	r0, #0
  408928:	f47f a815 	bne.w	407956 <_svfprintf_r+0x18a>
  40892c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40892e:	46c3      	mov	fp, r8
  408930:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408934:	e6fa      	b.n	40872c <_svfprintf_r+0xf60>
  408936:	f04f 0c06 	mov.w	ip, #6
  40893a:	9b06      	ldr	r3, [sp, #24]
  40893c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408940:	930e      	str	r3, [sp, #56]	; 0x38
  408942:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408944:	2b00      	cmp	r3, #0
  408946:	f2c0 8160 	blt.w	408c0a <_svfprintf_r+0x143e>
  40894a:	461d      	mov	r5, r3
  40894c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40894e:	2300      	movs	r3, #0
  408950:	930d      	str	r3, [sp, #52]	; 0x34
  408952:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  408956:	f000 80c4 	beq.w	408ae2 <_svfprintf_r+0x1316>
  40895a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40895e:	f47f af59 	bne.w	408814 <_svfprintf_r+0x1048>
  408962:	f10c 0401 	add.w	r4, ip, #1
  408966:	f8cd c01c 	str.w	ip, [sp, #28]
  40896a:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  40896e:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  408972:	a81e      	add	r0, sp, #120	; 0x78
  408974:	2102      	movs	r1, #2
  408976:	f8cd c010 	str.w	ip, [sp, #16]
  40897a:	463a      	mov	r2, r7
  40897c:	9003      	str	r0, [sp, #12]
  40897e:	462b      	mov	r3, r5
  408980:	9401      	str	r4, [sp, #4]
  408982:	9100      	str	r1, [sp, #0]
  408984:	f8cd e008 	str.w	lr, [sp, #8]
  408988:	9809      	ldr	r0, [sp, #36]	; 0x24
  40898a:	f000 fb0d 	bl	408fa8 <_dtoa_r>
  40898e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408992:	900f      	str	r0, [sp, #60]	; 0x3c
  408994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408996:	441c      	add	r4, r3
  408998:	e75b      	b.n	408852 <_svfprintf_r+0x1086>
  40899a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40899c:	4649      	mov	r1, r9
  40899e:	aa23      	add	r2, sp, #140	; 0x8c
  4089a0:	f003 f8a2 	bl	40bae8 <__ssprint_r>
  4089a4:	2800      	cmp	r0, #0
  4089a6:	f47e afd6 	bne.w	407956 <_svfprintf_r+0x18a>
  4089aa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4089ac:	46c3      	mov	fp, r8
  4089ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089b0:	9812      	ldr	r0, [sp, #72]	; 0x48
  4089b2:	3301      	adds	r3, #1
  4089b4:	eb02 0c00 	add.w	ip, r2, r0
  4089b8:	2b07      	cmp	r3, #7
  4089ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4089bc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4089c0:	f8cb 2000 	str.w	r2, [fp]
  4089c4:	9324      	str	r3, [sp, #144]	; 0x90
  4089c6:	f8cb 0004 	str.w	r0, [fp, #4]
  4089ca:	f77f a8e8 	ble.w	407b9e <_svfprintf_r+0x3d2>
  4089ce:	e446      	b.n	40825e <_svfprintf_r+0xa92>
  4089d0:	9510      	str	r5, [sp, #64]	; 0x40
  4089d2:	f7fe fecd 	bl	407770 <strlen>
  4089d6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  4089da:	970c      	str	r7, [sp, #48]	; 0x30
  4089dc:	4604      	mov	r4, r0
  4089de:	9511      	str	r5, [sp, #68]	; 0x44
  4089e0:	9307      	str	r3, [sp, #28]
  4089e2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4089e6:	f7ff b804 	b.w	4079f2 <_svfprintf_r+0x226>
  4089ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4089ec:	4fb7      	ldr	r7, [pc, #732]	; (408ccc <_svfprintf_r+0x1500>)
  4089ee:	f7ff b84b 	b.w	407a88 <_svfprintf_r+0x2bc>
  4089f2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4089f4:	4649      	mov	r1, r9
  4089f6:	aa23      	add	r2, sp, #140	; 0x8c
  4089f8:	f003 f876 	bl	40bae8 <__ssprint_r>
  4089fc:	2800      	cmp	r0, #0
  4089fe:	f47e afaa 	bne.w	407956 <_svfprintf_r+0x18a>
  408a02:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408a06:	46c3      	mov	fp, r8
  408a08:	e4a2      	b.n	408350 <_svfprintf_r+0xb84>
  408a0a:	3301      	adds	r3, #1
  408a0c:	4422      	add	r2, r4
  408a0e:	f8cb 5000 	str.w	r5, [fp]
  408a12:	2b07      	cmp	r3, #7
  408a14:	9225      	str	r2, [sp, #148]	; 0x94
  408a16:	9324      	str	r3, [sp, #144]	; 0x90
  408a18:	f8cb 4004 	str.w	r4, [fp, #4]
  408a1c:	dcbd      	bgt.n	40899a <_svfprintf_r+0x11ce>
  408a1e:	f10b 0b08 	add.w	fp, fp, #8
  408a22:	e7c5      	b.n	4089b0 <_svfprintf_r+0x11e4>
  408a24:	9809      	ldr	r0, [sp, #36]	; 0x24
  408a26:	4649      	mov	r1, r9
  408a28:	aa23      	add	r2, sp, #140	; 0x8c
  408a2a:	f003 f85d 	bl	40bae8 <__ssprint_r>
  408a2e:	2800      	cmp	r0, #0
  408a30:	f47e af91 	bne.w	407956 <_svfprintf_r+0x18a>
  408a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a36:	46c3      	mov	fp, r8
  408a38:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408a3a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408a3e:	1ad3      	subs	r3, r2, r3
  408a40:	e552      	b.n	4084e8 <_svfprintf_r+0xd1c>
  408a42:	9809      	ldr	r0, [sp, #36]	; 0x24
  408a44:	4649      	mov	r1, r9
  408a46:	aa23      	add	r2, sp, #140	; 0x8c
  408a48:	f003 f84e 	bl	40bae8 <__ssprint_r>
  408a4c:	2800      	cmp	r0, #0
  408a4e:	f47e af82 	bne.w	407956 <_svfprintf_r+0x18a>
  408a52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408a54:	46c3      	mov	fp, r8
  408a56:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408a5a:	e52d      	b.n	4084b8 <_svfprintf_r+0xcec>
  408a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
  408a5e:	4649      	mov	r1, r9
  408a60:	aa23      	add	r2, sp, #140	; 0x8c
  408a62:	f003 f841 	bl	40bae8 <__ssprint_r>
  408a66:	2800      	cmp	r0, #0
  408a68:	f47e af75 	bne.w	407956 <_svfprintf_r+0x18a>
  408a6c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408a70:	46c3      	mov	fp, r8
  408a72:	e516      	b.n	4084a2 <_svfprintf_r+0xcd6>
  408a74:	2c06      	cmp	r4, #6
  408a76:	970c      	str	r7, [sp, #48]	; 0x30
  408a78:	9310      	str	r3, [sp, #64]	; 0x40
  408a7a:	461f      	mov	r7, r3
  408a7c:	bf28      	it	cs
  408a7e:	2406      	movcs	r4, #6
  408a80:	9711      	str	r7, [sp, #68]	; 0x44
  408a82:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  408a86:	9307      	str	r3, [sp, #28]
  408a88:	4b91      	ldr	r3, [pc, #580]	; (408cd0 <_svfprintf_r+0x1504>)
  408a8a:	930f      	str	r3, [sp, #60]	; 0x3c
  408a8c:	f7fe bfb1 	b.w	4079f2 <_svfprintf_r+0x226>
  408a90:	4f8e      	ldr	r7, [pc, #568]	; (408ccc <_svfprintf_r+0x1500>)
  408a92:	f7ff b8b5 	b.w	407c00 <_svfprintf_r+0x434>
  408a96:	232d      	movs	r3, #45	; 0x2d
  408a98:	461f      	mov	r7, r3
  408a9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408a9e:	f7ff ba7a 	b.w	407f96 <_svfprintf_r+0x7ca>
  408aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408aa4:	272d      	movs	r7, #45	; 0x2d
  408aa6:	f8cd c01c 	str.w	ip, [sp, #28]
  408aaa:	9306      	str	r3, [sp, #24]
  408aac:	2300      	movs	r3, #0
  408aae:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408ab2:	9310      	str	r3, [sp, #64]	; 0x40
  408ab4:	f7fe bf9e 	b.w	4079f4 <_svfprintf_r+0x228>
  408ab8:	2e65      	cmp	r6, #101	; 0x65
  408aba:	dd56      	ble.n	408b6a <_svfprintf_r+0x139e>
  408abc:	2e66      	cmp	r6, #102	; 0x66
  408abe:	9311      	str	r3, [sp, #68]	; 0x44
  408ac0:	f47f aeef 	bne.w	4088a2 <_svfprintf_r+0x10d6>
  408ac4:	2b00      	cmp	r3, #0
  408ac6:	f340 80d6 	ble.w	408c76 <_svfprintf_r+0x14aa>
  408aca:	f1bc 0f00 	cmp.w	ip, #0
  408ace:	f040 80c1 	bne.w	408c54 <_svfprintf_r+0x1488>
  408ad2:	9b06      	ldr	r3, [sp, #24]
  408ad4:	07da      	lsls	r2, r3, #31
  408ad6:	f100 80bd 	bmi.w	408c54 <_svfprintf_r+0x1488>
  408ada:	9c11      	ldr	r4, [sp, #68]	; 0x44
  408adc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408ae0:	e6eb      	b.n	4088ba <_svfprintf_r+0x10ee>
  408ae2:	2003      	movs	r0, #3
  408ae4:	a91d      	add	r1, sp, #116	; 0x74
  408ae6:	463a      	mov	r2, r7
  408ae8:	f8cd c004 	str.w	ip, [sp, #4]
  408aec:	9000      	str	r0, [sp, #0]
  408aee:	a81e      	add	r0, sp, #120	; 0x78
  408af0:	9102      	str	r1, [sp, #8]
  408af2:	a921      	add	r1, sp, #132	; 0x84
  408af4:	462b      	mov	r3, r5
  408af6:	9003      	str	r0, [sp, #12]
  408af8:	9104      	str	r1, [sp, #16]
  408afa:	9809      	ldr	r0, [sp, #36]	; 0x24
  408afc:	f8cd c01c 	str.w	ip, [sp, #28]
  408b00:	f000 fa52 	bl	408fa8 <_dtoa_r>
  408b04:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408b08:	4602      	mov	r2, r0
  408b0a:	7803      	ldrb	r3, [r0, #0]
  408b0c:	4462      	add	r2, ip
  408b0e:	900f      	str	r0, [sp, #60]	; 0x3c
  408b10:	2b30      	cmp	r3, #48	; 0x30
  408b12:	9207      	str	r2, [sp, #28]
  408b14:	f040 808b 	bne.w	408c2e <_svfprintf_r+0x1462>
  408b18:	4638      	mov	r0, r7
  408b1a:	2200      	movs	r2, #0
  408b1c:	2300      	movs	r3, #0
  408b1e:	4629      	mov	r1, r5
  408b20:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408b24:	f04f 0401 	mov.w	r4, #1
  408b28:	f003 f9f6 	bl	40bf18 <__aeabi_dcmpeq>
  408b2c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408b30:	b108      	cbz	r0, 408b36 <_svfprintf_r+0x136a>
  408b32:	f04f 0400 	mov.w	r4, #0
  408b36:	f014 0fff 	tst.w	r4, #255	; 0xff
  408b3a:	d078      	beq.n	408c2e <_svfprintf_r+0x1462>
  408b3c:	f1cc 0401 	rsb	r4, ip, #1
  408b40:	941d      	str	r4, [sp, #116]	; 0x74
  408b42:	9b07      	ldr	r3, [sp, #28]
  408b44:	4423      	add	r3, r4
  408b46:	461c      	mov	r4, r3
  408b48:	e683      	b.n	408852 <_svfprintf_r+0x1086>
  408b4a:	4d62      	ldr	r5, [pc, #392]	; (408cd4 <_svfprintf_r+0x1508>)
  408b4c:	f7ff bb2a 	b.w	4081a4 <_svfprintf_r+0x9d8>
  408b50:	4623      	mov	r3, r4
  408b52:	e695      	b.n	408880 <_svfprintf_r+0x10b4>
  408b54:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  408b58:	970c      	str	r7, [sp, #48]	; 0x30
  408b5a:	9010      	str	r0, [sp, #64]	; 0x40
  408b5c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408b60:	9307      	str	r3, [sp, #28]
  408b62:	9011      	str	r0, [sp, #68]	; 0x44
  408b64:	f7fe bf45 	b.w	4079f2 <_svfprintf_r+0x226>
  408b68:	3e02      	subs	r6, #2
  408b6a:	3b01      	subs	r3, #1
  408b6c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  408b70:	2b00      	cmp	r3, #0
  408b72:	931d      	str	r3, [sp, #116]	; 0x74
  408b74:	db75      	blt.n	408c62 <_svfprintf_r+0x1496>
  408b76:	222b      	movs	r2, #43	; 0x2b
  408b78:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408b7c:	2b09      	cmp	r3, #9
  408b7e:	dd61      	ble.n	408c44 <_svfprintf_r+0x1478>
  408b80:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  408b84:	4601      	mov	r1, r0
  408b86:	4a54      	ldr	r2, [pc, #336]	; (408cd8 <_svfprintf_r+0x150c>)
  408b88:	fb82 2403 	smull	r2, r4, r2, r3
  408b8c:	17da      	asrs	r2, r3, #31
  408b8e:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  408b92:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  408b96:	2c09      	cmp	r4, #9
  408b98:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408b9c:	4623      	mov	r3, r4
  408b9e:	f102 0230 	add.w	r2, r2, #48	; 0x30
  408ba2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  408ba6:	dcee      	bgt.n	408b86 <_svfprintf_r+0x13ba>
  408ba8:	3330      	adds	r3, #48	; 0x30
  408baa:	460a      	mov	r2, r1
  408bac:	b2db      	uxtb	r3, r3
  408bae:	f802 3d01 	strb.w	r3, [r2, #-1]!
  408bb2:	4290      	cmp	r0, r2
  408bb4:	d97e      	bls.n	408cb4 <_svfprintf_r+0x14e8>
  408bb6:	460a      	mov	r2, r1
  408bb8:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  408bbc:	e001      	b.n	408bc2 <_svfprintf_r+0x13f6>
  408bbe:	f812 3b01 	ldrb.w	r3, [r2], #1
  408bc2:	4282      	cmp	r2, r0
  408bc4:	f804 3b01 	strb.w	r3, [r4], #1
  408bc8:	d1f9      	bne.n	408bbe <_svfprintf_r+0x13f2>
  408bca:	ab23      	add	r3, sp, #140	; 0x8c
  408bcc:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408bd0:	1a5b      	subs	r3, r3, r1
  408bd2:	4413      	add	r3, r2
  408bd4:	aa1f      	add	r2, sp, #124	; 0x7c
  408bd6:	1a9b      	subs	r3, r3, r2
  408bd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408bda:	2a01      	cmp	r2, #1
  408bdc:	9319      	str	r3, [sp, #100]	; 0x64
  408bde:	eb02 0403 	add.w	r4, r2, r3
  408be2:	dd43      	ble.n	408c6c <_svfprintf_r+0x14a0>
  408be4:	3401      	adds	r4, #1
  408be6:	2300      	movs	r3, #0
  408be8:	9311      	str	r3, [sp, #68]	; 0x44
  408bea:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408bee:	e664      	b.n	4088ba <_svfprintf_r+0x10ee>
  408bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
  408bf2:	4649      	mov	r1, r9
  408bf4:	aa23      	add	r2, sp, #140	; 0x8c
  408bf6:	f002 ff77 	bl	40bae8 <__ssprint_r>
  408bfa:	2800      	cmp	r0, #0
  408bfc:	f47e aeab 	bne.w	407956 <_svfprintf_r+0x18a>
  408c00:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408c02:	46c3      	mov	fp, r8
  408c04:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c08:	e5a8      	b.n	40875c <_svfprintf_r+0xf90>
  408c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408c0c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408c0e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  408c12:	232d      	movs	r3, #45	; 0x2d
  408c14:	930d      	str	r3, [sp, #52]	; 0x34
  408c16:	e69c      	b.n	408952 <_svfprintf_r+0x1186>
  408c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c1a:	2b00      	cmp	r3, #0
  408c1c:	dd35      	ble.n	408c8a <_svfprintf_r+0x14be>
  408c1e:	2401      	movs	r4, #1
  408c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c22:	441c      	add	r4, r3
  408c24:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408c28:	e647      	b.n	4088ba <_svfprintf_r+0x10ee>
  408c2a:	4d2a      	ldr	r5, [pc, #168]	; (408cd4 <_svfprintf_r+0x1508>)
  408c2c:	e413      	b.n	408456 <_svfprintf_r+0xc8a>
  408c2e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408c30:	e787      	b.n	408b42 <_svfprintf_r+0x1376>
  408c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408c34:	e624      	b.n	408880 <_svfprintf_r+0x10b4>
  408c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c38:	1c5c      	adds	r4, r3, #1
  408c3a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408c3e:	e63c      	b.n	4088ba <_svfprintf_r+0x10ee>
  408c40:	4d24      	ldr	r5, [pc, #144]	; (408cd4 <_svfprintf_r+0x1508>)
  408c42:	e420      	b.n	408486 <_svfprintf_r+0xcba>
  408c44:	3330      	adds	r3, #48	; 0x30
  408c46:	2230      	movs	r2, #48	; 0x30
  408c48:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408c4c:	ab20      	add	r3, sp, #128	; 0x80
  408c4e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408c52:	e7bf      	b.n	408bd4 <_svfprintf_r+0x1408>
  408c54:	f10c 0401 	add.w	r4, ip, #1
  408c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c5a:	441c      	add	r4, r3
  408c5c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408c60:	e62b      	b.n	4088ba <_svfprintf_r+0x10ee>
  408c62:	222d      	movs	r2, #45	; 0x2d
  408c64:	425b      	negs	r3, r3
  408c66:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408c6a:	e787      	b.n	408b7c <_svfprintf_r+0x13b0>
  408c6c:	9b06      	ldr	r3, [sp, #24]
  408c6e:	f013 0301 	ands.w	r3, r3, #1
  408c72:	d0b9      	beq.n	408be8 <_svfprintf_r+0x141c>
  408c74:	e7b6      	b.n	408be4 <_svfprintf_r+0x1418>
  408c76:	f1bc 0f00 	cmp.w	ip, #0
  408c7a:	d109      	bne.n	408c90 <_svfprintf_r+0x14c4>
  408c7c:	9b06      	ldr	r3, [sp, #24]
  408c7e:	07db      	lsls	r3, r3, #31
  408c80:	d406      	bmi.n	408c90 <_svfprintf_r+0x14c4>
  408c82:	f04f 0c01 	mov.w	ip, #1
  408c86:	4664      	mov	r4, ip
  408c88:	e617      	b.n	4088ba <_svfprintf_r+0x10ee>
  408c8a:	f1c3 0402 	rsb	r4, r3, #2
  408c8e:	e7c7      	b.n	408c20 <_svfprintf_r+0x1454>
  408c90:	f10c 0402 	add.w	r4, ip, #2
  408c94:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408c98:	e60f      	b.n	4088ba <_svfprintf_r+0x10ee>
  408c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  408c9c:	785e      	ldrb	r6, [r3, #1]
  408c9e:	4628      	mov	r0, r5
  408ca0:	682c      	ldr	r4, [r5, #0]
  408ca2:	3004      	adds	r0, #4
  408ca4:	2c00      	cmp	r4, #0
  408ca6:	900c      	str	r0, [sp, #48]	; 0x30
  408ca8:	f6be ade5 	bge.w	407876 <_svfprintf_r+0xaa>
  408cac:	f04f 34ff 	mov.w	r4, #4294967295
  408cb0:	f7fe bde1 	b.w	407876 <_svfprintf_r+0xaa>
  408cb4:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408cb8:	e78c      	b.n	408bd4 <_svfprintf_r+0x1408>
  408cba:	230c      	movs	r3, #12
  408cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408cbe:	f04f 30ff 	mov.w	r0, #4294967295
  408cc2:	6013      	str	r3, [r2, #0]
  408cc4:	f7fe be50 	b.w	407968 <_svfprintf_r+0x19c>
  408cc8:	4664      	mov	r4, ip
  408cca:	e663      	b.n	408994 <_svfprintf_r+0x11c8>
  408ccc:	0040d008 	.word	0x0040d008
  408cd0:	0040d050 	.word	0x0040d050
  408cd4:	0040cff8 	.word	0x0040cff8
  408cd8:	66666667 	.word	0x66666667

00408cdc <__swbuf_r>:
  408cdc:	b570      	push	{r4, r5, r6, lr}
  408cde:	460d      	mov	r5, r1
  408ce0:	4614      	mov	r4, r2
  408ce2:	4606      	mov	r6, r0
  408ce4:	b110      	cbz	r0, 408cec <__swbuf_r+0x10>
  408ce6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408ce8:	2b00      	cmp	r3, #0
  408cea:	d048      	beq.n	408d7e <__swbuf_r+0xa2>
  408cec:	89a2      	ldrh	r2, [r4, #12]
  408cee:	69a3      	ldr	r3, [r4, #24]
  408cf0:	b291      	uxth	r1, r2
  408cf2:	60a3      	str	r3, [r4, #8]
  408cf4:	0708      	lsls	r0, r1, #28
  408cf6:	d538      	bpl.n	408d6a <__swbuf_r+0x8e>
  408cf8:	6923      	ldr	r3, [r4, #16]
  408cfa:	2b00      	cmp	r3, #0
  408cfc:	d035      	beq.n	408d6a <__swbuf_r+0x8e>
  408cfe:	0489      	lsls	r1, r1, #18
  408d00:	b2ed      	uxtb	r5, r5
  408d02:	d515      	bpl.n	408d30 <__swbuf_r+0x54>
  408d04:	6822      	ldr	r2, [r4, #0]
  408d06:	6961      	ldr	r1, [r4, #20]
  408d08:	1ad3      	subs	r3, r2, r3
  408d0a:	428b      	cmp	r3, r1
  408d0c:	da1c      	bge.n	408d48 <__swbuf_r+0x6c>
  408d0e:	3301      	adds	r3, #1
  408d10:	68a1      	ldr	r1, [r4, #8]
  408d12:	1c50      	adds	r0, r2, #1
  408d14:	3901      	subs	r1, #1
  408d16:	6020      	str	r0, [r4, #0]
  408d18:	60a1      	str	r1, [r4, #8]
  408d1a:	7015      	strb	r5, [r2, #0]
  408d1c:	6962      	ldr	r2, [r4, #20]
  408d1e:	429a      	cmp	r2, r3
  408d20:	d01a      	beq.n	408d58 <__swbuf_r+0x7c>
  408d22:	2d0a      	cmp	r5, #10
  408d24:	d102      	bne.n	408d2c <__swbuf_r+0x50>
  408d26:	7b23      	ldrb	r3, [r4, #12]
  408d28:	07db      	lsls	r3, r3, #31
  408d2a:	d415      	bmi.n	408d58 <__swbuf_r+0x7c>
  408d2c:	4628      	mov	r0, r5
  408d2e:	bd70      	pop	{r4, r5, r6, pc}
  408d30:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408d36:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408d3a:	81a2      	strh	r2, [r4, #12]
  408d3c:	6822      	ldr	r2, [r4, #0]
  408d3e:	6661      	str	r1, [r4, #100]	; 0x64
  408d40:	1ad3      	subs	r3, r2, r3
  408d42:	6961      	ldr	r1, [r4, #20]
  408d44:	428b      	cmp	r3, r1
  408d46:	dbe2      	blt.n	408d0e <__swbuf_r+0x32>
  408d48:	4630      	mov	r0, r6
  408d4a:	4621      	mov	r1, r4
  408d4c:	f001 f944 	bl	409fd8 <_fflush_r>
  408d50:	b940      	cbnz	r0, 408d64 <__swbuf_r+0x88>
  408d52:	6822      	ldr	r2, [r4, #0]
  408d54:	2301      	movs	r3, #1
  408d56:	e7db      	b.n	408d10 <__swbuf_r+0x34>
  408d58:	4630      	mov	r0, r6
  408d5a:	4621      	mov	r1, r4
  408d5c:	f001 f93c 	bl	409fd8 <_fflush_r>
  408d60:	2800      	cmp	r0, #0
  408d62:	d0e3      	beq.n	408d2c <__swbuf_r+0x50>
  408d64:	f04f 30ff 	mov.w	r0, #4294967295
  408d68:	bd70      	pop	{r4, r5, r6, pc}
  408d6a:	4630      	mov	r0, r6
  408d6c:	4621      	mov	r1, r4
  408d6e:	f000 f809 	bl	408d84 <__swsetup_r>
  408d72:	2800      	cmp	r0, #0
  408d74:	d1f6      	bne.n	408d64 <__swbuf_r+0x88>
  408d76:	89a2      	ldrh	r2, [r4, #12]
  408d78:	6923      	ldr	r3, [r4, #16]
  408d7a:	b291      	uxth	r1, r2
  408d7c:	e7bf      	b.n	408cfe <__swbuf_r+0x22>
  408d7e:	f001 f9c5 	bl	40a10c <__sinit>
  408d82:	e7b3      	b.n	408cec <__swbuf_r+0x10>

00408d84 <__swsetup_r>:
  408d84:	b538      	push	{r3, r4, r5, lr}
  408d86:	4b2f      	ldr	r3, [pc, #188]	; (408e44 <__swsetup_r+0xc0>)
  408d88:	4605      	mov	r5, r0
  408d8a:	460c      	mov	r4, r1
  408d8c:	6818      	ldr	r0, [r3, #0]
  408d8e:	b110      	cbz	r0, 408d96 <__swsetup_r+0x12>
  408d90:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408d92:	2b00      	cmp	r3, #0
  408d94:	d036      	beq.n	408e04 <__swsetup_r+0x80>
  408d96:	89a2      	ldrh	r2, [r4, #12]
  408d98:	b293      	uxth	r3, r2
  408d9a:	0718      	lsls	r0, r3, #28
  408d9c:	d50b      	bpl.n	408db6 <__swsetup_r+0x32>
  408d9e:	6920      	ldr	r0, [r4, #16]
  408da0:	b1a0      	cbz	r0, 408dcc <__swsetup_r+0x48>
  408da2:	f013 0201 	ands.w	r2, r3, #1
  408da6:	d11d      	bne.n	408de4 <__swsetup_r+0x60>
  408da8:	0799      	lsls	r1, r3, #30
  408daa:	d400      	bmi.n	408dae <__swsetup_r+0x2a>
  408dac:	6962      	ldr	r2, [r4, #20]
  408dae:	60a2      	str	r2, [r4, #8]
  408db0:	b1f8      	cbz	r0, 408df2 <__swsetup_r+0x6e>
  408db2:	2000      	movs	r0, #0
  408db4:	bd38      	pop	{r3, r4, r5, pc}
  408db6:	06d9      	lsls	r1, r3, #27
  408db8:	d53b      	bpl.n	408e32 <__swsetup_r+0xae>
  408dba:	0758      	lsls	r0, r3, #29
  408dbc:	d425      	bmi.n	408e0a <__swsetup_r+0x86>
  408dbe:	6920      	ldr	r0, [r4, #16]
  408dc0:	f042 0208 	orr.w	r2, r2, #8
  408dc4:	b293      	uxth	r3, r2
  408dc6:	81a2      	strh	r2, [r4, #12]
  408dc8:	2800      	cmp	r0, #0
  408dca:	d1ea      	bne.n	408da2 <__swsetup_r+0x1e>
  408dcc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408dd0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408dd4:	d0e5      	beq.n	408da2 <__swsetup_r+0x1e>
  408dd6:	4628      	mov	r0, r5
  408dd8:	4621      	mov	r1, r4
  408dda:	f001 fc9b 	bl	40a714 <__smakebuf_r>
  408dde:	89a3      	ldrh	r3, [r4, #12]
  408de0:	6920      	ldr	r0, [r4, #16]
  408de2:	e7de      	b.n	408da2 <__swsetup_r+0x1e>
  408de4:	6963      	ldr	r3, [r4, #20]
  408de6:	2200      	movs	r2, #0
  408de8:	425b      	negs	r3, r3
  408dea:	60a2      	str	r2, [r4, #8]
  408dec:	61a3      	str	r3, [r4, #24]
  408dee:	2800      	cmp	r0, #0
  408df0:	d1df      	bne.n	408db2 <__swsetup_r+0x2e>
  408df2:	89a3      	ldrh	r3, [r4, #12]
  408df4:	061a      	lsls	r2, r3, #24
  408df6:	d5dd      	bpl.n	408db4 <__swsetup_r+0x30>
  408df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408dfc:	f04f 30ff 	mov.w	r0, #4294967295
  408e00:	81a3      	strh	r3, [r4, #12]
  408e02:	bd38      	pop	{r3, r4, r5, pc}
  408e04:	f001 f982 	bl	40a10c <__sinit>
  408e08:	e7c5      	b.n	408d96 <__swsetup_r+0x12>
  408e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408e0c:	b149      	cbz	r1, 408e22 <__swsetup_r+0x9e>
  408e0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408e12:	4299      	cmp	r1, r3
  408e14:	d003      	beq.n	408e1e <__swsetup_r+0x9a>
  408e16:	4628      	mov	r0, r5
  408e18:	f001 f9e6 	bl	40a1e8 <_free_r>
  408e1c:	89a2      	ldrh	r2, [r4, #12]
  408e1e:	2300      	movs	r3, #0
  408e20:	6323      	str	r3, [r4, #48]	; 0x30
  408e22:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408e26:	2300      	movs	r3, #0
  408e28:	6920      	ldr	r0, [r4, #16]
  408e2a:	b292      	uxth	r2, r2
  408e2c:	e884 0009 	stmia.w	r4, {r0, r3}
  408e30:	e7c6      	b.n	408dc0 <__swsetup_r+0x3c>
  408e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408e36:	2309      	movs	r3, #9
  408e38:	f04f 30ff 	mov.w	r0, #4294967295
  408e3c:	602b      	str	r3, [r5, #0]
  408e3e:	81a2      	strh	r2, [r4, #12]
  408e40:	bd38      	pop	{r3, r4, r5, pc}
  408e42:	bf00      	nop
  408e44:	204004c0 	.word	0x204004c0

00408e48 <register_fini>:
  408e48:	4b02      	ldr	r3, [pc, #8]	; (408e54 <register_fini+0xc>)
  408e4a:	b113      	cbz	r3, 408e52 <register_fini+0xa>
  408e4c:	4802      	ldr	r0, [pc, #8]	; (408e58 <register_fini+0x10>)
  408e4e:	f000 b805 	b.w	408e5c <atexit>
  408e52:	4770      	bx	lr
  408e54:	00000000 	.word	0x00000000
  408e58:	0040a121 	.word	0x0040a121

00408e5c <atexit>:
  408e5c:	4601      	mov	r1, r0
  408e5e:	2000      	movs	r0, #0
  408e60:	4602      	mov	r2, r0
  408e62:	4603      	mov	r3, r0
  408e64:	f002 bedc 	b.w	40bc20 <__register_exitproc>

00408e68 <quorem>:
  408e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e6c:	6903      	ldr	r3, [r0, #16]
  408e6e:	b083      	sub	sp, #12
  408e70:	690f      	ldr	r7, [r1, #16]
  408e72:	429f      	cmp	r7, r3
  408e74:	f300 8093 	bgt.w	408f9e <quorem+0x136>
  408e78:	3f01      	subs	r7, #1
  408e7a:	f101 0614 	add.w	r6, r1, #20
  408e7e:	f100 0a14 	add.w	sl, r0, #20
  408e82:	00bb      	lsls	r3, r7, #2
  408e84:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  408e88:	461d      	mov	r5, r3
  408e8a:	9300      	str	r3, [sp, #0]
  408e8c:	3201      	adds	r2, #1
  408e8e:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  408e92:	eb0a 0405 	add.w	r4, sl, r5
  408e96:	eb06 0905 	add.w	r9, r6, r5
  408e9a:	fbb3 f8f2 	udiv	r8, r3, r2
  408e9e:	9401      	str	r4, [sp, #4]
  408ea0:	f1b8 0f00 	cmp.w	r8, #0
  408ea4:	d040      	beq.n	408f28 <quorem+0xc0>
  408ea6:	2500      	movs	r5, #0
  408ea8:	46b4      	mov	ip, r6
  408eaa:	46d6      	mov	lr, sl
  408eac:	462b      	mov	r3, r5
  408eae:	f85c bb04 	ldr.w	fp, [ip], #4
  408eb2:	f8de 2000 	ldr.w	r2, [lr]
  408eb6:	fa1f f48b 	uxth.w	r4, fp
  408eba:	45e1      	cmp	r9, ip
  408ebc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  408ec0:	fb04 5508 	mla	r5, r4, r8, r5
  408ec4:	fb0b fb08 	mul.w	fp, fp, r8
  408ec8:	b2ac      	uxth	r4, r5
  408eca:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  408ece:	eba3 0304 	sub.w	r3, r3, r4
  408ed2:	fa1f fb85 	uxth.w	fp, r5
  408ed6:	fa13 f482 	uxtah	r4, r3, r2
  408eda:	ea4f 4515 	mov.w	r5, r5, lsr #16
  408ede:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  408ee2:	fa1f fb84 	uxth.w	fp, r4
  408ee6:	eb02 4324 	add.w	r3, r2, r4, asr #16
  408eea:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  408eee:	ea4f 4323 	mov.w	r3, r3, asr #16
  408ef2:	f84e 2b04 	str.w	r2, [lr], #4
  408ef6:	d2da      	bcs.n	408eae <quorem+0x46>
  408ef8:	9b00      	ldr	r3, [sp, #0]
  408efa:	f85a 3003 	ldr.w	r3, [sl, r3]
  408efe:	b99b      	cbnz	r3, 408f28 <quorem+0xc0>
  408f00:	9c01      	ldr	r4, [sp, #4]
  408f02:	1f23      	subs	r3, r4, #4
  408f04:	459a      	cmp	sl, r3
  408f06:	d20e      	bcs.n	408f26 <quorem+0xbe>
  408f08:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408f0c:	b95b      	cbnz	r3, 408f26 <quorem+0xbe>
  408f0e:	f1a4 0308 	sub.w	r3, r4, #8
  408f12:	e001      	b.n	408f18 <quorem+0xb0>
  408f14:	6812      	ldr	r2, [r2, #0]
  408f16:	b932      	cbnz	r2, 408f26 <quorem+0xbe>
  408f18:	459a      	cmp	sl, r3
  408f1a:	461a      	mov	r2, r3
  408f1c:	f107 37ff 	add.w	r7, r7, #4294967295
  408f20:	f1a3 0304 	sub.w	r3, r3, #4
  408f24:	d3f6      	bcc.n	408f14 <quorem+0xac>
  408f26:	6107      	str	r7, [r0, #16]
  408f28:	4604      	mov	r4, r0
  408f2a:	f002 fa7f 	bl	40b42c <__mcmp>
  408f2e:	2800      	cmp	r0, #0
  408f30:	db31      	blt.n	408f96 <quorem+0x12e>
  408f32:	f108 0801 	add.w	r8, r8, #1
  408f36:	4655      	mov	r5, sl
  408f38:	2000      	movs	r0, #0
  408f3a:	f856 1b04 	ldr.w	r1, [r6], #4
  408f3e:	682a      	ldr	r2, [r5, #0]
  408f40:	b28b      	uxth	r3, r1
  408f42:	45b1      	cmp	r9, r6
  408f44:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408f48:	eba0 0303 	sub.w	r3, r0, r3
  408f4c:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  408f50:	fa13 f382 	uxtah	r3, r3, r2
  408f54:	eb01 4223 	add.w	r2, r1, r3, asr #16
  408f58:	b29b      	uxth	r3, r3
  408f5a:	ea4f 4022 	mov.w	r0, r2, asr #16
  408f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408f62:	f845 3b04 	str.w	r3, [r5], #4
  408f66:	d2e8      	bcs.n	408f3a <quorem+0xd2>
  408f68:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  408f6c:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  408f70:	b98a      	cbnz	r2, 408f96 <quorem+0x12e>
  408f72:	1f1a      	subs	r2, r3, #4
  408f74:	4592      	cmp	sl, r2
  408f76:	d20d      	bcs.n	408f94 <quorem+0x12c>
  408f78:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408f7c:	b952      	cbnz	r2, 408f94 <quorem+0x12c>
  408f7e:	3b08      	subs	r3, #8
  408f80:	e001      	b.n	408f86 <quorem+0x11e>
  408f82:	6812      	ldr	r2, [r2, #0]
  408f84:	b932      	cbnz	r2, 408f94 <quorem+0x12c>
  408f86:	459a      	cmp	sl, r3
  408f88:	461a      	mov	r2, r3
  408f8a:	f107 37ff 	add.w	r7, r7, #4294967295
  408f8e:	f1a3 0304 	sub.w	r3, r3, #4
  408f92:	d3f6      	bcc.n	408f82 <quorem+0x11a>
  408f94:	6127      	str	r7, [r4, #16]
  408f96:	4640      	mov	r0, r8
  408f98:	b003      	add	sp, #12
  408f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f9e:	2000      	movs	r0, #0
  408fa0:	b003      	add	sp, #12
  408fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fa6:	bf00      	nop

00408fa8 <_dtoa_r>:
  408fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408fac:	469b      	mov	fp, r3
  408fae:	b099      	sub	sp, #100	; 0x64
  408fb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  408fb2:	4604      	mov	r4, r0
  408fb4:	4692      	mov	sl, r2
  408fb6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  408fb8:	b14b      	cbz	r3, 408fce <_dtoa_r+0x26>
  408fba:	6c46      	ldr	r6, [r0, #68]	; 0x44
  408fbc:	2201      	movs	r2, #1
  408fbe:	4619      	mov	r1, r3
  408fc0:	40b2      	lsls	r2, r6
  408fc2:	605e      	str	r6, [r3, #4]
  408fc4:	609a      	str	r2, [r3, #8]
  408fc6:	f002 f83b 	bl	40b040 <_Bfree>
  408fca:	2300      	movs	r3, #0
  408fcc:	6423      	str	r3, [r4, #64]	; 0x40
  408fce:	f1bb 0f00 	cmp.w	fp, #0
  408fd2:	46d9      	mov	r9, fp
  408fd4:	db33      	blt.n	40903e <_dtoa_r+0x96>
  408fd6:	2300      	movs	r3, #0
  408fd8:	602b      	str	r3, [r5, #0]
  408fda:	4b99      	ldr	r3, [pc, #612]	; (409240 <_dtoa_r+0x298>)
  408fdc:	461a      	mov	r2, r3
  408fde:	ea09 0303 	and.w	r3, r9, r3
  408fe2:	4293      	cmp	r3, r2
  408fe4:	d014      	beq.n	409010 <_dtoa_r+0x68>
  408fe6:	2200      	movs	r2, #0
  408fe8:	2300      	movs	r3, #0
  408fea:	4650      	mov	r0, sl
  408fec:	4659      	mov	r1, fp
  408fee:	f002 ff93 	bl	40bf18 <__aeabi_dcmpeq>
  408ff2:	4680      	mov	r8, r0
  408ff4:	b348      	cbz	r0, 40904a <_dtoa_r+0xa2>
  408ff6:	2301      	movs	r3, #1
  408ff8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408ffa:	6013      	str	r3, [r2, #0]
  408ffc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408ffe:	2b00      	cmp	r3, #0
  409000:	f000 80cb 	beq.w	40919a <_dtoa_r+0x1f2>
  409004:	488f      	ldr	r0, [pc, #572]	; (409244 <_dtoa_r+0x29c>)
  409006:	6018      	str	r0, [r3, #0]
  409008:	3801      	subs	r0, #1
  40900a:	b019      	add	sp, #100	; 0x64
  40900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409010:	f242 730f 	movw	r3, #9999	; 0x270f
  409014:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409016:	6013      	str	r3, [r2, #0]
  409018:	f1ba 0f00 	cmp.w	sl, #0
  40901c:	f000 80a6 	beq.w	40916c <_dtoa_r+0x1c4>
  409020:	4889      	ldr	r0, [pc, #548]	; (409248 <_dtoa_r+0x2a0>)
  409022:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409024:	2b00      	cmp	r3, #0
  409026:	d0f0      	beq.n	40900a <_dtoa_r+0x62>
  409028:	78c3      	ldrb	r3, [r0, #3]
  40902a:	2b00      	cmp	r3, #0
  40902c:	f000 80b7 	beq.w	40919e <_dtoa_r+0x1f6>
  409030:	f100 0308 	add.w	r3, r0, #8
  409034:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409036:	6013      	str	r3, [r2, #0]
  409038:	b019      	add	sp, #100	; 0x64
  40903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40903e:	2301      	movs	r3, #1
  409040:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  409044:	602b      	str	r3, [r5, #0]
  409046:	46cb      	mov	fp, r9
  409048:	e7c7      	b.n	408fda <_dtoa_r+0x32>
  40904a:	ad17      	add	r5, sp, #92	; 0x5c
  40904c:	a916      	add	r1, sp, #88	; 0x58
  40904e:	4620      	mov	r0, r4
  409050:	4652      	mov	r2, sl
  409052:	9500      	str	r5, [sp, #0]
  409054:	465b      	mov	r3, fp
  409056:	9101      	str	r1, [sp, #4]
  409058:	f002 fa7e 	bl	40b558 <__d2b>
  40905c:	9006      	str	r0, [sp, #24]
  40905e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  409062:	f040 808c 	bne.w	40917e <_dtoa_r+0x1d6>
  409066:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40906a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40906e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  409070:	4445      	add	r5, r8
  409072:	429d      	cmp	r5, r3
  409074:	f2c0 81cc 	blt.w	409410 <_dtoa_r+0x468>
  409078:	331f      	adds	r3, #31
  40907a:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40907e:	1b5b      	subs	r3, r3, r5
  409080:	fa2a f002 	lsr.w	r0, sl, r2
  409084:	fa09 f903 	lsl.w	r9, r9, r3
  409088:	ea49 0000 	orr.w	r0, r9, r0
  40908c:	f7fd ff3c 	bl	406f08 <__aeabi_ui2d>
  409090:	3d01      	subs	r5, #1
  409092:	2301      	movs	r3, #1
  409094:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409098:	9311      	str	r3, [sp, #68]	; 0x44
  40909a:	2200      	movs	r2, #0
  40909c:	4b6b      	ldr	r3, [pc, #428]	; (40924c <_dtoa_r+0x2a4>)
  40909e:	f7fd fdf5 	bl	406c8c <__aeabi_dsub>
  4090a2:	a361      	add	r3, pc, #388	; (adr r3, 409228 <_dtoa_r+0x280>)
  4090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090a8:	f7fd ffa4 	bl	406ff4 <__aeabi_dmul>
  4090ac:	a360      	add	r3, pc, #384	; (adr r3, 409230 <_dtoa_r+0x288>)
  4090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090b2:	f7fd fded 	bl	406c90 <__adddf3>
  4090b6:	4606      	mov	r6, r0
  4090b8:	460f      	mov	r7, r1
  4090ba:	4628      	mov	r0, r5
  4090bc:	f7fd ff34 	bl	406f28 <__aeabi_i2d>
  4090c0:	a35d      	add	r3, pc, #372	; (adr r3, 409238 <_dtoa_r+0x290>)
  4090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090c6:	f7fd ff95 	bl	406ff4 <__aeabi_dmul>
  4090ca:	4602      	mov	r2, r0
  4090cc:	460b      	mov	r3, r1
  4090ce:	4630      	mov	r0, r6
  4090d0:	4639      	mov	r1, r7
  4090d2:	f7fd fddd 	bl	406c90 <__adddf3>
  4090d6:	4606      	mov	r6, r0
  4090d8:	460f      	mov	r7, r1
  4090da:	f002 ff4f 	bl	40bf7c <__aeabi_d2iz>
  4090de:	2200      	movs	r2, #0
  4090e0:	9002      	str	r0, [sp, #8]
  4090e2:	4639      	mov	r1, r7
  4090e4:	4630      	mov	r0, r6
  4090e6:	2300      	movs	r3, #0
  4090e8:	f002 ff20 	bl	40bf2c <__aeabi_dcmplt>
  4090ec:	2800      	cmp	r0, #0
  4090ee:	f040 8171 	bne.w	4093d4 <_dtoa_r+0x42c>
  4090f2:	9b02      	ldr	r3, [sp, #8]
  4090f4:	2b16      	cmp	r3, #22
  4090f6:	f200 8091 	bhi.w	40921c <_dtoa_r+0x274>
  4090fa:	9802      	ldr	r0, [sp, #8]
  4090fc:	4652      	mov	r2, sl
  4090fe:	4954      	ldr	r1, [pc, #336]	; (409250 <_dtoa_r+0x2a8>)
  409100:	465b      	mov	r3, fp
  409102:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  409106:	e9d1 0100 	ldrd	r0, r1, [r1]
  40910a:	f002 ff2d 	bl	40bf68 <__aeabi_dcmpgt>
  40910e:	2800      	cmp	r0, #0
  409110:	f000 817c 	beq.w	40940c <_dtoa_r+0x464>
  409114:	9b02      	ldr	r3, [sp, #8]
  409116:	3b01      	subs	r3, #1
  409118:	9302      	str	r3, [sp, #8]
  40911a:	2300      	movs	r3, #0
  40911c:	930d      	str	r3, [sp, #52]	; 0x34
  40911e:	ebc5 0508 	rsb	r5, r5, r8
  409122:	1e6b      	subs	r3, r5, #1
  409124:	9303      	str	r3, [sp, #12]
  409126:	f100 816c 	bmi.w	409402 <_dtoa_r+0x45a>
  40912a:	2300      	movs	r3, #0
  40912c:	9307      	str	r3, [sp, #28]
  40912e:	9b02      	ldr	r3, [sp, #8]
  409130:	2b00      	cmp	r3, #0
  409132:	f2c0 815d 	blt.w	4093f0 <_dtoa_r+0x448>
  409136:	9a03      	ldr	r2, [sp, #12]
  409138:	930c      	str	r3, [sp, #48]	; 0x30
  40913a:	4611      	mov	r1, r2
  40913c:	4419      	add	r1, r3
  40913e:	2300      	movs	r3, #0
  409140:	9103      	str	r1, [sp, #12]
  409142:	930a      	str	r3, [sp, #40]	; 0x28
  409144:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409146:	2b09      	cmp	r3, #9
  409148:	d82b      	bhi.n	4091a2 <_dtoa_r+0x1fa>
  40914a:	2b05      	cmp	r3, #5
  40914c:	f340 867e 	ble.w	409e4c <_dtoa_r+0xea4>
  409150:	3b04      	subs	r3, #4
  409152:	2500      	movs	r5, #0
  409154:	9322      	str	r3, [sp, #136]	; 0x88
  409156:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409158:	3b02      	subs	r3, #2
  40915a:	2b03      	cmp	r3, #3
  40915c:	f200 8679 	bhi.w	409e52 <_dtoa_r+0xeaa>
  409160:	e8df f013 	tbh	[pc, r3, lsl #1]
  409164:	0289029b 	.word	0x0289029b
  409168:	068d0180 	.word	0x068d0180
  40916c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  409170:	4b35      	ldr	r3, [pc, #212]	; (409248 <_dtoa_r+0x2a0>)
  409172:	4a38      	ldr	r2, [pc, #224]	; (409254 <_dtoa_r+0x2ac>)
  409174:	2800      	cmp	r0, #0
  409176:	bf14      	ite	ne
  409178:	4618      	movne	r0, r3
  40917a:	4610      	moveq	r0, r2
  40917c:	e751      	b.n	409022 <_dtoa_r+0x7a>
  40917e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409182:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  409186:	4650      	mov	r0, sl
  409188:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40918c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  409190:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  409194:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  409198:	e77f      	b.n	40909a <_dtoa_r+0xf2>
  40919a:	482f      	ldr	r0, [pc, #188]	; (409258 <_dtoa_r+0x2b0>)
  40919c:	e735      	b.n	40900a <_dtoa_r+0x62>
  40919e:	1cc3      	adds	r3, r0, #3
  4091a0:	e748      	b.n	409034 <_dtoa_r+0x8c>
  4091a2:	f04f 33ff 	mov.w	r3, #4294967295
  4091a6:	2100      	movs	r1, #0
  4091a8:	4620      	mov	r0, r4
  4091aa:	461d      	mov	r5, r3
  4091ac:	9310      	str	r3, [sp, #64]	; 0x40
  4091ae:	2301      	movs	r3, #1
  4091b0:	6461      	str	r1, [r4, #68]	; 0x44
  4091b2:	9123      	str	r1, [sp, #140]	; 0x8c
  4091b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4091b6:	f001 ff1b 	bl	40aff0 <_Balloc>
  4091ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4091bc:	9005      	str	r0, [sp, #20]
  4091be:	9322      	str	r3, [sp, #136]	; 0x88
  4091c0:	9504      	str	r5, [sp, #16]
  4091c2:	6420      	str	r0, [r4, #64]	; 0x40
  4091c4:	9a02      	ldr	r2, [sp, #8]
  4091c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4091c8:	2a0e      	cmp	r2, #14
  4091ca:	dc49      	bgt.n	409260 <_dtoa_r+0x2b8>
  4091cc:	2b00      	cmp	r3, #0
  4091ce:	db47      	blt.n	409260 <_dtoa_r+0x2b8>
  4091d0:	4b1f      	ldr	r3, [pc, #124]	; (409250 <_dtoa_r+0x2a8>)
  4091d2:	9a02      	ldr	r2, [sp, #8]
  4091d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4091d8:	e9d3 8900 	ldrd	r8, r9, [r3]
  4091dc:	9b04      	ldr	r3, [sp, #16]
  4091de:	2b00      	cmp	r3, #0
  4091e0:	f300 825e 	bgt.w	4096a0 <_dtoa_r+0x6f8>
  4091e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4091e6:	2b00      	cmp	r3, #0
  4091e8:	f280 825a 	bge.w	4096a0 <_dtoa_r+0x6f8>
  4091ec:	9b04      	ldr	r3, [sp, #16]
  4091ee:	2b00      	cmp	r3, #0
  4091f0:	f040 85bf 	bne.w	409d72 <_dtoa_r+0xdca>
  4091f4:	2200      	movs	r2, #0
  4091f6:	4b19      	ldr	r3, [pc, #100]	; (40925c <_dtoa_r+0x2b4>)
  4091f8:	4640      	mov	r0, r8
  4091fa:	4649      	mov	r1, r9
  4091fc:	f7fd fefa 	bl	406ff4 <__aeabi_dmul>
  409200:	4652      	mov	r2, sl
  409202:	465b      	mov	r3, fp
  409204:	f002 fea6 	bl	40bf54 <__aeabi_dcmpge>
  409208:	9f04      	ldr	r7, [sp, #16]
  40920a:	9708      	str	r7, [sp, #32]
  40920c:	2800      	cmp	r0, #0
  40920e:	f000 80bd 	beq.w	40938c <_dtoa_r+0x3e4>
  409212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409214:	9d05      	ldr	r5, [sp, #20]
  409216:	43db      	mvns	r3, r3
  409218:	9302      	str	r3, [sp, #8]
  40921a:	e0be      	b.n	40939a <_dtoa_r+0x3f2>
  40921c:	2301      	movs	r3, #1
  40921e:	930d      	str	r3, [sp, #52]	; 0x34
  409220:	e77d      	b.n	40911e <_dtoa_r+0x176>
  409222:	bf00      	nop
  409224:	f3af 8000 	nop.w
  409228:	636f4361 	.word	0x636f4361
  40922c:	3fd287a7 	.word	0x3fd287a7
  409230:	8b60c8b3 	.word	0x8b60c8b3
  409234:	3fc68a28 	.word	0x3fc68a28
  409238:	509f79fb 	.word	0x509f79fb
  40923c:	3fd34413 	.word	0x3fd34413
  409240:	7ff00000 	.word	0x7ff00000
  409244:	0040d059 	.word	0x0040d059
  409248:	0040d068 	.word	0x0040d068
  40924c:	3ff80000 	.word	0x3ff80000
  409250:	0040d078 	.word	0x0040d078
  409254:	0040d05c 	.word	0x0040d05c
  409258:	0040d058 	.word	0x0040d058
  40925c:	40140000 	.word	0x40140000
  409260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409262:	2a00      	cmp	r2, #0
  409264:	f040 80e1 	bne.w	40942a <_dtoa_r+0x482>
  409268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40926a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40926c:	9d07      	ldr	r5, [sp, #28]
  40926e:	9308      	str	r3, [sp, #32]
  409270:	9903      	ldr	r1, [sp, #12]
  409272:	2900      	cmp	r1, #0
  409274:	460b      	mov	r3, r1
  409276:	dd0a      	ble.n	40928e <_dtoa_r+0x2e6>
  409278:	2d00      	cmp	r5, #0
  40927a:	dd08      	ble.n	40928e <_dtoa_r+0x2e6>
  40927c:	42a9      	cmp	r1, r5
  40927e:	9a07      	ldr	r2, [sp, #28]
  409280:	bfa8      	it	ge
  409282:	462b      	movge	r3, r5
  409284:	1ad2      	subs	r2, r2, r3
  409286:	1aed      	subs	r5, r5, r3
  409288:	1acb      	subs	r3, r1, r3
  40928a:	9207      	str	r2, [sp, #28]
  40928c:	9303      	str	r3, [sp, #12]
  40928e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409290:	2b00      	cmp	r3, #0
  409292:	dd1b      	ble.n	4092cc <_dtoa_r+0x324>
  409294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409296:	2b00      	cmp	r3, #0
  409298:	f000 84ce 	beq.w	409c38 <_dtoa_r+0xc90>
  40929c:	2e00      	cmp	r6, #0
  40929e:	dd11      	ble.n	4092c4 <_dtoa_r+0x31c>
  4092a0:	9908      	ldr	r1, [sp, #32]
  4092a2:	4632      	mov	r2, r6
  4092a4:	4620      	mov	r0, r4
  4092a6:	f002 f817 	bl	40b2d8 <__pow5mult>
  4092aa:	9f06      	ldr	r7, [sp, #24]
  4092ac:	4601      	mov	r1, r0
  4092ae:	9008      	str	r0, [sp, #32]
  4092b0:	463a      	mov	r2, r7
  4092b2:	4620      	mov	r0, r4
  4092b4:	f001 ff6e 	bl	40b194 <__multiply>
  4092b8:	4603      	mov	r3, r0
  4092ba:	4639      	mov	r1, r7
  4092bc:	4620      	mov	r0, r4
  4092be:	9306      	str	r3, [sp, #24]
  4092c0:	f001 febe 	bl	40b040 <_Bfree>
  4092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4092c6:	1b9a      	subs	r2, r3, r6
  4092c8:	f040 84ff 	bne.w	409cca <_dtoa_r+0xd22>
  4092cc:	4620      	mov	r0, r4
  4092ce:	2101      	movs	r1, #1
  4092d0:	f001 ff56 	bl	40b180 <__i2b>
  4092d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4092d6:	4607      	mov	r7, r0
  4092d8:	2b00      	cmp	r3, #0
  4092da:	f340 8282 	ble.w	4097e2 <_dtoa_r+0x83a>
  4092de:	4601      	mov	r1, r0
  4092e0:	461a      	mov	r2, r3
  4092e2:	4620      	mov	r0, r4
  4092e4:	f001 fff8 	bl	40b2d8 <__pow5mult>
  4092e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4092ea:	4607      	mov	r7, r0
  4092ec:	2b01      	cmp	r3, #1
  4092ee:	f340 84f3 	ble.w	409cd8 <_dtoa_r+0xd30>
  4092f2:	f04f 0800 	mov.w	r8, #0
  4092f6:	693b      	ldr	r3, [r7, #16]
  4092f8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4092fc:	6918      	ldr	r0, [r3, #16]
  4092fe:	f001 feeb 	bl	40b0d8 <__hi0bits>
  409302:	f1c0 0020 	rsb	r0, r0, #32
  409306:	9b03      	ldr	r3, [sp, #12]
  409308:	4418      	add	r0, r3
  40930a:	f010 001f 	ands.w	r0, r0, #31
  40930e:	f000 82a0 	beq.w	409852 <_dtoa_r+0x8aa>
  409312:	f1c0 0320 	rsb	r3, r0, #32
  409316:	2b04      	cmp	r3, #4
  409318:	f340 8592 	ble.w	409e40 <_dtoa_r+0xe98>
  40931c:	f1c0 001c 	rsb	r0, r0, #28
  409320:	9b07      	ldr	r3, [sp, #28]
  409322:	4405      	add	r5, r0
  409324:	4403      	add	r3, r0
  409326:	9307      	str	r3, [sp, #28]
  409328:	9b03      	ldr	r3, [sp, #12]
  40932a:	4403      	add	r3, r0
  40932c:	9303      	str	r3, [sp, #12]
  40932e:	9b07      	ldr	r3, [sp, #28]
  409330:	2b00      	cmp	r3, #0
  409332:	dd05      	ble.n	409340 <_dtoa_r+0x398>
  409334:	9906      	ldr	r1, [sp, #24]
  409336:	461a      	mov	r2, r3
  409338:	4620      	mov	r0, r4
  40933a:	f002 f81d 	bl	40b378 <__lshift>
  40933e:	9006      	str	r0, [sp, #24]
  409340:	9b03      	ldr	r3, [sp, #12]
  409342:	2b00      	cmp	r3, #0
  409344:	dd05      	ble.n	409352 <_dtoa_r+0x3aa>
  409346:	4639      	mov	r1, r7
  409348:	461a      	mov	r2, r3
  40934a:	4620      	mov	r0, r4
  40934c:	f002 f814 	bl	40b378 <__lshift>
  409350:	4607      	mov	r7, r0
  409352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409354:	2b00      	cmp	r3, #0
  409356:	f040 838b 	bne.w	409a70 <_dtoa_r+0xac8>
  40935a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40935c:	2b02      	cmp	r3, #2
  40935e:	f340 827a 	ble.w	409856 <_dtoa_r+0x8ae>
  409362:	9b04      	ldr	r3, [sp, #16]
  409364:	2b00      	cmp	r3, #0
  409366:	f300 8276 	bgt.w	409856 <_dtoa_r+0x8ae>
  40936a:	9b04      	ldr	r3, [sp, #16]
  40936c:	2b00      	cmp	r3, #0
  40936e:	f47f af50 	bne.w	409212 <_dtoa_r+0x26a>
  409372:	4639      	mov	r1, r7
  409374:	2205      	movs	r2, #5
  409376:	4620      	mov	r0, r4
  409378:	f001 fe6c 	bl	40b054 <__multadd>
  40937c:	4607      	mov	r7, r0
  40937e:	9806      	ldr	r0, [sp, #24]
  409380:	4639      	mov	r1, r7
  409382:	f002 f853 	bl	40b42c <__mcmp>
  409386:	2800      	cmp	r0, #0
  409388:	f77f af43 	ble.w	409212 <_dtoa_r+0x26a>
  40938c:	9a02      	ldr	r2, [sp, #8]
  40938e:	2331      	movs	r3, #49	; 0x31
  409390:	3201      	adds	r2, #1
  409392:	9202      	str	r2, [sp, #8]
  409394:	9a05      	ldr	r2, [sp, #20]
  409396:	1c55      	adds	r5, r2, #1
  409398:	7013      	strb	r3, [r2, #0]
  40939a:	4639      	mov	r1, r7
  40939c:	4620      	mov	r0, r4
  40939e:	f001 fe4f 	bl	40b040 <_Bfree>
  4093a2:	9b08      	ldr	r3, [sp, #32]
  4093a4:	b11b      	cbz	r3, 4093ae <_dtoa_r+0x406>
  4093a6:	9908      	ldr	r1, [sp, #32]
  4093a8:	4620      	mov	r0, r4
  4093aa:	f001 fe49 	bl	40b040 <_Bfree>
  4093ae:	4620      	mov	r0, r4
  4093b0:	9906      	ldr	r1, [sp, #24]
  4093b2:	f001 fe45 	bl	40b040 <_Bfree>
  4093b6:	2200      	movs	r2, #0
  4093b8:	9b02      	ldr	r3, [sp, #8]
  4093ba:	702a      	strb	r2, [r5, #0]
  4093bc:	3301      	adds	r3, #1
  4093be:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4093c0:	6013      	str	r3, [r2, #0]
  4093c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4093c4:	2b00      	cmp	r3, #0
  4093c6:	f000 82a3 	beq.w	409910 <_dtoa_r+0x968>
  4093ca:	9805      	ldr	r0, [sp, #20]
  4093cc:	601d      	str	r5, [r3, #0]
  4093ce:	b019      	add	sp, #100	; 0x64
  4093d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093d4:	9802      	ldr	r0, [sp, #8]
  4093d6:	f7fd fda7 	bl	406f28 <__aeabi_i2d>
  4093da:	4632      	mov	r2, r6
  4093dc:	463b      	mov	r3, r7
  4093de:	f002 fd9b 	bl	40bf18 <__aeabi_dcmpeq>
  4093e2:	2800      	cmp	r0, #0
  4093e4:	f47f ae85 	bne.w	4090f2 <_dtoa_r+0x14a>
  4093e8:	9b02      	ldr	r3, [sp, #8]
  4093ea:	3b01      	subs	r3, #1
  4093ec:	9302      	str	r3, [sp, #8]
  4093ee:	e680      	b.n	4090f2 <_dtoa_r+0x14a>
  4093f0:	9a07      	ldr	r2, [sp, #28]
  4093f2:	9b02      	ldr	r3, [sp, #8]
  4093f4:	1ad2      	subs	r2, r2, r3
  4093f6:	425b      	negs	r3, r3
  4093f8:	930a      	str	r3, [sp, #40]	; 0x28
  4093fa:	2300      	movs	r3, #0
  4093fc:	9207      	str	r2, [sp, #28]
  4093fe:	930c      	str	r3, [sp, #48]	; 0x30
  409400:	e6a0      	b.n	409144 <_dtoa_r+0x19c>
  409402:	425b      	negs	r3, r3
  409404:	9307      	str	r3, [sp, #28]
  409406:	2300      	movs	r3, #0
  409408:	9303      	str	r3, [sp, #12]
  40940a:	e690      	b.n	40912e <_dtoa_r+0x186>
  40940c:	900d      	str	r0, [sp, #52]	; 0x34
  40940e:	e686      	b.n	40911e <_dtoa_r+0x176>
  409410:	4bbd      	ldr	r3, [pc, #756]	; (409708 <_dtoa_r+0x760>)
  409412:	1b5b      	subs	r3, r3, r5
  409414:	fa0a f003 	lsl.w	r0, sl, r3
  409418:	e638      	b.n	40908c <_dtoa_r+0xe4>
  40941a:	2100      	movs	r1, #0
  40941c:	f04f 32ff 	mov.w	r2, #4294967295
  409420:	9123      	str	r1, [sp, #140]	; 0x8c
  409422:	2101      	movs	r1, #1
  409424:	9204      	str	r2, [sp, #16]
  409426:	910b      	str	r1, [sp, #44]	; 0x2c
  409428:	9210      	str	r2, [sp, #64]	; 0x40
  40942a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40942c:	2a01      	cmp	r2, #1
  40942e:	f340 8460 	ble.w	409cf2 <_dtoa_r+0xd4a>
  409432:	9b04      	ldr	r3, [sp, #16]
  409434:	1e5e      	subs	r6, r3, #1
  409436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409438:	42b3      	cmp	r3, r6
  40943a:	f2c0 8405 	blt.w	409c48 <_dtoa_r+0xca0>
  40943e:	1b9e      	subs	r6, r3, r6
  409440:	9b04      	ldr	r3, [sp, #16]
  409442:	2b00      	cmp	r3, #0
  409444:	f2c0 8461 	blt.w	409d0a <_dtoa_r+0xd62>
  409448:	9d07      	ldr	r5, [sp, #28]
  40944a:	9b04      	ldr	r3, [sp, #16]
  40944c:	9a07      	ldr	r2, [sp, #28]
  40944e:	4620      	mov	r0, r4
  409450:	2101      	movs	r1, #1
  409452:	441a      	add	r2, r3
  409454:	9207      	str	r2, [sp, #28]
  409456:	9a03      	ldr	r2, [sp, #12]
  409458:	441a      	add	r2, r3
  40945a:	9203      	str	r2, [sp, #12]
  40945c:	f001 fe90 	bl	40b180 <__i2b>
  409460:	9008      	str	r0, [sp, #32]
  409462:	e705      	b.n	409270 <_dtoa_r+0x2c8>
  409464:	2301      	movs	r3, #1
  409466:	930b      	str	r3, [sp, #44]	; 0x2c
  409468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40946a:	2b00      	cmp	r3, #0
  40946c:	f340 83df 	ble.w	409c2e <_dtoa_r+0xc86>
  409470:	2b0e      	cmp	r3, #14
  409472:	bf8c      	ite	hi
  409474:	2500      	movhi	r5, #0
  409476:	f005 0501 	andls.w	r5, r5, #1
  40947a:	461e      	mov	r6, r3
  40947c:	9310      	str	r3, [sp, #64]	; 0x40
  40947e:	9304      	str	r3, [sp, #16]
  409480:	2100      	movs	r1, #0
  409482:	2e17      	cmp	r6, #23
  409484:	6461      	str	r1, [r4, #68]	; 0x44
  409486:	d909      	bls.n	40949c <_dtoa_r+0x4f4>
  409488:	2201      	movs	r2, #1
  40948a:	2304      	movs	r3, #4
  40948c:	005b      	lsls	r3, r3, #1
  40948e:	4611      	mov	r1, r2
  409490:	3201      	adds	r2, #1
  409492:	f103 0014 	add.w	r0, r3, #20
  409496:	42b0      	cmp	r0, r6
  409498:	d9f8      	bls.n	40948c <_dtoa_r+0x4e4>
  40949a:	6461      	str	r1, [r4, #68]	; 0x44
  40949c:	4620      	mov	r0, r4
  40949e:	f001 fda7 	bl	40aff0 <_Balloc>
  4094a2:	9005      	str	r0, [sp, #20]
  4094a4:	6420      	str	r0, [r4, #64]	; 0x40
  4094a6:	2d00      	cmp	r5, #0
  4094a8:	f43f ae8c 	beq.w	4091c4 <_dtoa_r+0x21c>
  4094ac:	9802      	ldr	r0, [sp, #8]
  4094ae:	2800      	cmp	r0, #0
  4094b0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  4094b4:	f340 8233 	ble.w	40991e <_dtoa_r+0x976>
  4094b8:	4a94      	ldr	r2, [pc, #592]	; (40970c <_dtoa_r+0x764>)
  4094ba:	f000 030f 	and.w	r3, r0, #15
  4094be:	1105      	asrs	r5, r0, #4
  4094c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4094c4:	06ea      	lsls	r2, r5, #27
  4094c6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4094ca:	f140 821c 	bpl.w	409906 <_dtoa_r+0x95e>
  4094ce:	4b90      	ldr	r3, [pc, #576]	; (409710 <_dtoa_r+0x768>)
  4094d0:	4650      	mov	r0, sl
  4094d2:	4659      	mov	r1, fp
  4094d4:	f005 050f 	and.w	r5, r5, #15
  4094d8:	f04f 0803 	mov.w	r8, #3
  4094dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4094e0:	f7fd feb2 	bl	407248 <__aeabi_ddiv>
  4094e4:	4682      	mov	sl, r0
  4094e6:	468b      	mov	fp, r1
  4094e8:	b18d      	cbz	r5, 40950e <_dtoa_r+0x566>
  4094ea:	f8df 9224 	ldr.w	r9, [pc, #548]	; 409710 <_dtoa_r+0x768>
  4094ee:	07eb      	lsls	r3, r5, #31
  4094f0:	4630      	mov	r0, r6
  4094f2:	4639      	mov	r1, r7
  4094f4:	d507      	bpl.n	409506 <_dtoa_r+0x55e>
  4094f6:	f108 0801 	add.w	r8, r8, #1
  4094fa:	e9d9 2300 	ldrd	r2, r3, [r9]
  4094fe:	f7fd fd79 	bl	406ff4 <__aeabi_dmul>
  409502:	4606      	mov	r6, r0
  409504:	460f      	mov	r7, r1
  409506:	106d      	asrs	r5, r5, #1
  409508:	f109 0908 	add.w	r9, r9, #8
  40950c:	d1ef      	bne.n	4094ee <_dtoa_r+0x546>
  40950e:	4650      	mov	r0, sl
  409510:	4659      	mov	r1, fp
  409512:	4632      	mov	r2, r6
  409514:	463b      	mov	r3, r7
  409516:	f7fd fe97 	bl	407248 <__aeabi_ddiv>
  40951a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40951e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409520:	b143      	cbz	r3, 409534 <_dtoa_r+0x58c>
  409522:	2200      	movs	r2, #0
  409524:	4b7b      	ldr	r3, [pc, #492]	; (409714 <_dtoa_r+0x76c>)
  409526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40952a:	f002 fcff 	bl	40bf2c <__aeabi_dcmplt>
  40952e:	2800      	cmp	r0, #0
  409530:	f040 8393 	bne.w	409c5a <_dtoa_r+0xcb2>
  409534:	4640      	mov	r0, r8
  409536:	f7fd fcf7 	bl	406f28 <__aeabi_i2d>
  40953a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40953e:	f7fd fd59 	bl	406ff4 <__aeabi_dmul>
  409542:	4b75      	ldr	r3, [pc, #468]	; (409718 <_dtoa_r+0x770>)
  409544:	2200      	movs	r2, #0
  409546:	f7fd fba3 	bl	406c90 <__adddf3>
  40954a:	9b04      	ldr	r3, [sp, #16]
  40954c:	4606      	mov	r6, r0
  40954e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  409552:	2b00      	cmp	r3, #0
  409554:	f000 8161 	beq.w	40981a <_dtoa_r+0x872>
  409558:	9b02      	ldr	r3, [sp, #8]
  40955a:	f8dd c010 	ldr.w	ip, [sp, #16]
  40955e:	9314      	str	r3, [sp, #80]	; 0x50
  409560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409562:	2b00      	cmp	r3, #0
  409564:	f000 820b 	beq.w	40997e <_dtoa_r+0x9d6>
  409568:	4b68      	ldr	r3, [pc, #416]	; (40970c <_dtoa_r+0x764>)
  40956a:	2000      	movs	r0, #0
  40956c:	9a05      	ldr	r2, [sp, #20]
  40956e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  409572:	496a      	ldr	r1, [pc, #424]	; (40971c <_dtoa_r+0x774>)
  409574:	1c55      	adds	r5, r2, #1
  409576:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40957a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40957e:	f7fd fe63 	bl	407248 <__aeabi_ddiv>
  409582:	4632      	mov	r2, r6
  409584:	463b      	mov	r3, r7
  409586:	f7fd fb81 	bl	406c8c <__aeabi_dsub>
  40958a:	4682      	mov	sl, r0
  40958c:	468b      	mov	fp, r1
  40958e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409592:	4649      	mov	r1, r9
  409594:	4640      	mov	r0, r8
  409596:	f002 fcf1 	bl	40bf7c <__aeabi_d2iz>
  40959a:	4606      	mov	r6, r0
  40959c:	f7fd fcc4 	bl	406f28 <__aeabi_i2d>
  4095a0:	4602      	mov	r2, r0
  4095a2:	3630      	adds	r6, #48	; 0x30
  4095a4:	460b      	mov	r3, r1
  4095a6:	4640      	mov	r0, r8
  4095a8:	4649      	mov	r1, r9
  4095aa:	f7fd fb6f 	bl	406c8c <__aeabi_dsub>
  4095ae:	9f05      	ldr	r7, [sp, #20]
  4095b0:	4680      	mov	r8, r0
  4095b2:	4689      	mov	r9, r1
  4095b4:	b2f6      	uxtb	r6, r6
  4095b6:	4650      	mov	r0, sl
  4095b8:	4659      	mov	r1, fp
  4095ba:	4642      	mov	r2, r8
  4095bc:	464b      	mov	r3, r9
  4095be:	703e      	strb	r6, [r7, #0]
  4095c0:	f002 fcd2 	bl	40bf68 <__aeabi_dcmpgt>
  4095c4:	2800      	cmp	r0, #0
  4095c6:	f040 8243 	bne.w	409a50 <_dtoa_r+0xaa8>
  4095ca:	4642      	mov	r2, r8
  4095cc:	464b      	mov	r3, r9
  4095ce:	2000      	movs	r0, #0
  4095d0:	4950      	ldr	r1, [pc, #320]	; (409714 <_dtoa_r+0x76c>)
  4095d2:	f7fd fb5b 	bl	406c8c <__aeabi_dsub>
  4095d6:	4602      	mov	r2, r0
  4095d8:	460b      	mov	r3, r1
  4095da:	4650      	mov	r0, sl
  4095dc:	4659      	mov	r1, fp
  4095de:	f002 fcc3 	bl	40bf68 <__aeabi_dcmpgt>
  4095e2:	2800      	cmp	r0, #0
  4095e4:	f040 80eb 	bne.w	4097be <_dtoa_r+0x816>
  4095e8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  4095ec:	f1bc 0f01 	cmp.w	ip, #1
  4095f0:	f340 8192 	ble.w	409918 <_dtoa_r+0x970>
  4095f4:	9f05      	ldr	r7, [sp, #20]
  4095f6:	9412      	str	r4, [sp, #72]	; 0x48
  4095f8:	4467      	add	r7, ip
  4095fa:	9708      	str	r7, [sp, #32]
  4095fc:	e00e      	b.n	40961c <_dtoa_r+0x674>
  4095fe:	2000      	movs	r0, #0
  409600:	4944      	ldr	r1, [pc, #272]	; (409714 <_dtoa_r+0x76c>)
  409602:	f7fd fb43 	bl	406c8c <__aeabi_dsub>
  409606:	4652      	mov	r2, sl
  409608:	465b      	mov	r3, fp
  40960a:	f002 fc8f 	bl	40bf2c <__aeabi_dcmplt>
  40960e:	2800      	cmp	r0, #0
  409610:	f040 83a1 	bne.w	409d56 <_dtoa_r+0xdae>
  409614:	9b08      	ldr	r3, [sp, #32]
  409616:	429d      	cmp	r5, r3
  409618:	f000 817d 	beq.w	409916 <_dtoa_r+0x96e>
  40961c:	4650      	mov	r0, sl
  40961e:	4659      	mov	r1, fp
  409620:	2200      	movs	r2, #0
  409622:	4b3f      	ldr	r3, [pc, #252]	; (409720 <_dtoa_r+0x778>)
  409624:	f7fd fce6 	bl	406ff4 <__aeabi_dmul>
  409628:	2200      	movs	r2, #0
  40962a:	4b3d      	ldr	r3, [pc, #244]	; (409720 <_dtoa_r+0x778>)
  40962c:	4682      	mov	sl, r0
  40962e:	468b      	mov	fp, r1
  409630:	4640      	mov	r0, r8
  409632:	4649      	mov	r1, r9
  409634:	f7fd fcde 	bl	406ff4 <__aeabi_dmul>
  409638:	4606      	mov	r6, r0
  40963a:	460f      	mov	r7, r1
  40963c:	f002 fc9e 	bl	40bf7c <__aeabi_d2iz>
  409640:	4604      	mov	r4, r0
  409642:	f7fd fc71 	bl	406f28 <__aeabi_i2d>
  409646:	4602      	mov	r2, r0
  409648:	460b      	mov	r3, r1
  40964a:	3430      	adds	r4, #48	; 0x30
  40964c:	4630      	mov	r0, r6
  40964e:	4639      	mov	r1, r7
  409650:	b2e6      	uxtb	r6, r4
  409652:	f7fd fb1b 	bl	406c8c <__aeabi_dsub>
  409656:	4680      	mov	r8, r0
  409658:	4689      	mov	r9, r1
  40965a:	4652      	mov	r2, sl
  40965c:	465b      	mov	r3, fp
  40965e:	f805 6b01 	strb.w	r6, [r5], #1
  409662:	f002 fc63 	bl	40bf2c <__aeabi_dcmplt>
  409666:	4642      	mov	r2, r8
  409668:	464b      	mov	r3, r9
  40966a:	2800      	cmp	r0, #0
  40966c:	d0c7      	beq.n	4095fe <_dtoa_r+0x656>
  40966e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409670:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409672:	9302      	str	r3, [sp, #8]
  409674:	e69b      	b.n	4093ae <_dtoa_r+0x406>
  409676:	2300      	movs	r3, #0
  409678:	930b      	str	r3, [sp, #44]	; 0x2c
  40967a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40967c:	9a02      	ldr	r2, [sp, #8]
  40967e:	4413      	add	r3, r2
  409680:	9310      	str	r3, [sp, #64]	; 0x40
  409682:	3301      	adds	r3, #1
  409684:	2b00      	cmp	r3, #0
  409686:	9304      	str	r3, [sp, #16]
  409688:	f340 82c9 	ble.w	409c1e <_dtoa_r+0xc76>
  40968c:	9e04      	ldr	r6, [sp, #16]
  40968e:	2e0e      	cmp	r6, #14
  409690:	bf8c      	ite	hi
  409692:	2500      	movhi	r5, #0
  409694:	f005 0501 	andls.w	r5, r5, #1
  409698:	e6f2      	b.n	409480 <_dtoa_r+0x4d8>
  40969a:	2300      	movs	r3, #0
  40969c:	930b      	str	r3, [sp, #44]	; 0x2c
  40969e:	e6e3      	b.n	409468 <_dtoa_r+0x4c0>
  4096a0:	9905      	ldr	r1, [sp, #20]
  4096a2:	4642      	mov	r2, r8
  4096a4:	464b      	mov	r3, r9
  4096a6:	4650      	mov	r0, sl
  4096a8:	1c4d      	adds	r5, r1, #1
  4096aa:	4659      	mov	r1, fp
  4096ac:	f7fd fdcc 	bl	407248 <__aeabi_ddiv>
  4096b0:	4656      	mov	r6, sl
  4096b2:	f002 fc63 	bl	40bf7c <__aeabi_d2iz>
  4096b6:	4682      	mov	sl, r0
  4096b8:	f7fd fc36 	bl	406f28 <__aeabi_i2d>
  4096bc:	4642      	mov	r2, r8
  4096be:	464b      	mov	r3, r9
  4096c0:	f7fd fc98 	bl	406ff4 <__aeabi_dmul>
  4096c4:	4602      	mov	r2, r0
  4096c6:	460b      	mov	r3, r1
  4096c8:	4630      	mov	r0, r6
  4096ca:	4659      	mov	r1, fp
  4096cc:	f7fd fade 	bl	406c8c <__aeabi_dsub>
  4096d0:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  4096d4:	9a05      	ldr	r2, [sp, #20]
  4096d6:	4606      	mov	r6, r0
  4096d8:	460f      	mov	r7, r1
  4096da:	7013      	strb	r3, [r2, #0]
  4096dc:	9b04      	ldr	r3, [sp, #16]
  4096de:	2b01      	cmp	r3, #1
  4096e0:	d04d      	beq.n	40977e <_dtoa_r+0x7d6>
  4096e2:	2200      	movs	r2, #0
  4096e4:	4b0e      	ldr	r3, [pc, #56]	; (409720 <_dtoa_r+0x778>)
  4096e6:	f7fd fc85 	bl	406ff4 <__aeabi_dmul>
  4096ea:	2200      	movs	r2, #0
  4096ec:	2300      	movs	r3, #0
  4096ee:	4606      	mov	r6, r0
  4096f0:	460f      	mov	r7, r1
  4096f2:	f002 fc11 	bl	40bf18 <__aeabi_dcmpeq>
  4096f6:	2800      	cmp	r0, #0
  4096f8:	f47f ae59 	bne.w	4093ae <_dtoa_r+0x406>
  4096fc:	9403      	str	r4, [sp, #12]
  4096fe:	f8dd b014 	ldr.w	fp, [sp, #20]
  409702:	9c04      	ldr	r4, [sp, #16]
  409704:	e019      	b.n	40973a <_dtoa_r+0x792>
  409706:	bf00      	nop
  409708:	fffffbee 	.word	0xfffffbee
  40970c:	0040d078 	.word	0x0040d078
  409710:	0040d150 	.word	0x0040d150
  409714:	3ff00000 	.word	0x3ff00000
  409718:	401c0000 	.word	0x401c0000
  40971c:	3fe00000 	.word	0x3fe00000
  409720:	40240000 	.word	0x40240000
  409724:	f7fd fc66 	bl	406ff4 <__aeabi_dmul>
  409728:	2200      	movs	r2, #0
  40972a:	2300      	movs	r3, #0
  40972c:	4606      	mov	r6, r0
  40972e:	460f      	mov	r7, r1
  409730:	f002 fbf2 	bl	40bf18 <__aeabi_dcmpeq>
  409734:	2800      	cmp	r0, #0
  409736:	f040 82e5 	bne.w	409d04 <_dtoa_r+0xd5c>
  40973a:	4642      	mov	r2, r8
  40973c:	464b      	mov	r3, r9
  40973e:	4630      	mov	r0, r6
  409740:	4639      	mov	r1, r7
  409742:	f7fd fd81 	bl	407248 <__aeabi_ddiv>
  409746:	f002 fc19 	bl	40bf7c <__aeabi_d2iz>
  40974a:	4682      	mov	sl, r0
  40974c:	f7fd fbec 	bl	406f28 <__aeabi_i2d>
  409750:	4642      	mov	r2, r8
  409752:	464b      	mov	r3, r9
  409754:	f7fd fc4e 	bl	406ff4 <__aeabi_dmul>
  409758:	4602      	mov	r2, r0
  40975a:	460b      	mov	r3, r1
  40975c:	4630      	mov	r0, r6
  40975e:	4639      	mov	r1, r7
  409760:	f7fd fa94 	bl	406c8c <__aeabi_dsub>
  409764:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  409768:	4606      	mov	r6, r0
  40976a:	460f      	mov	r7, r1
  40976c:	f805 eb01 	strb.w	lr, [r5], #1
  409770:	ebcb 0e05 	rsb	lr, fp, r5
  409774:	2200      	movs	r2, #0
  409776:	4bb8      	ldr	r3, [pc, #736]	; (409a58 <_dtoa_r+0xab0>)
  409778:	4574      	cmp	r4, lr
  40977a:	d1d3      	bne.n	409724 <_dtoa_r+0x77c>
  40977c:	9c03      	ldr	r4, [sp, #12]
  40977e:	4632      	mov	r2, r6
  409780:	463b      	mov	r3, r7
  409782:	4630      	mov	r0, r6
  409784:	4639      	mov	r1, r7
  409786:	f7fd fa83 	bl	406c90 <__adddf3>
  40978a:	4606      	mov	r6, r0
  40978c:	460f      	mov	r7, r1
  40978e:	4640      	mov	r0, r8
  409790:	4649      	mov	r1, r9
  409792:	4632      	mov	r2, r6
  409794:	463b      	mov	r3, r7
  409796:	f002 fbc9 	bl	40bf2c <__aeabi_dcmplt>
  40979a:	b960      	cbnz	r0, 4097b6 <_dtoa_r+0x80e>
  40979c:	4640      	mov	r0, r8
  40979e:	4649      	mov	r1, r9
  4097a0:	4632      	mov	r2, r6
  4097a2:	463b      	mov	r3, r7
  4097a4:	f002 fbb8 	bl	40bf18 <__aeabi_dcmpeq>
  4097a8:	2800      	cmp	r0, #0
  4097aa:	f43f ae00 	beq.w	4093ae <_dtoa_r+0x406>
  4097ae:	f01a 0f01 	tst.w	sl, #1
  4097b2:	f43f adfc 	beq.w	4093ae <_dtoa_r+0x406>
  4097b6:	9b02      	ldr	r3, [sp, #8]
  4097b8:	9314      	str	r3, [sp, #80]	; 0x50
  4097ba:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  4097be:	1e6a      	subs	r2, r5, #1
  4097c0:	9b05      	ldr	r3, [sp, #20]
  4097c2:	e004      	b.n	4097ce <_dtoa_r+0x826>
  4097c4:	429a      	cmp	r2, r3
  4097c6:	f000 8277 	beq.w	409cb8 <_dtoa_r+0xd10>
  4097ca:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  4097ce:	2e39      	cmp	r6, #57	; 0x39
  4097d0:	f102 0501 	add.w	r5, r2, #1
  4097d4:	d0f6      	beq.n	4097c4 <_dtoa_r+0x81c>
  4097d6:	1c73      	adds	r3, r6, #1
  4097d8:	9914      	ldr	r1, [sp, #80]	; 0x50
  4097da:	b2db      	uxtb	r3, r3
  4097dc:	9102      	str	r1, [sp, #8]
  4097de:	7013      	strb	r3, [r2, #0]
  4097e0:	e5e5      	b.n	4093ae <_dtoa_r+0x406>
  4097e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4097e4:	2b01      	cmp	r3, #1
  4097e6:	f340 8161 	ble.w	409aac <_dtoa_r+0xb04>
  4097ea:	f04f 0800 	mov.w	r8, #0
  4097ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4097f0:	2b00      	cmp	r3, #0
  4097f2:	f47f ad80 	bne.w	4092f6 <_dtoa_r+0x34e>
  4097f6:	2001      	movs	r0, #1
  4097f8:	e585      	b.n	409306 <_dtoa_r+0x35e>
  4097fa:	4640      	mov	r0, r8
  4097fc:	f7fd fb94 	bl	406f28 <__aeabi_i2d>
  409800:	4602      	mov	r2, r0
  409802:	460b      	mov	r3, r1
  409804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409808:	f7fd fbf4 	bl	406ff4 <__aeabi_dmul>
  40980c:	2200      	movs	r2, #0
  40980e:	4b93      	ldr	r3, [pc, #588]	; (409a5c <_dtoa_r+0xab4>)
  409810:	f7fd fa3e 	bl	406c90 <__adddf3>
  409814:	4606      	mov	r6, r0
  409816:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40981a:	2200      	movs	r2, #0
  40981c:	4b90      	ldr	r3, [pc, #576]	; (409a60 <_dtoa_r+0xab8>)
  40981e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409822:	f7fd fa33 	bl	406c8c <__aeabi_dsub>
  409826:	4632      	mov	r2, r6
  409828:	463b      	mov	r3, r7
  40982a:	4680      	mov	r8, r0
  40982c:	4689      	mov	r9, r1
  40982e:	f002 fb9b 	bl	40bf68 <__aeabi_dcmpgt>
  409832:	4605      	mov	r5, r0
  409834:	2800      	cmp	r0, #0
  409836:	f040 809f 	bne.w	409978 <_dtoa_r+0x9d0>
  40983a:	4632      	mov	r2, r6
  40983c:	4640      	mov	r0, r8
  40983e:	4649      	mov	r1, r9
  409840:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  409844:	f002 fb72 	bl	40bf2c <__aeabi_dcmplt>
  409848:	2800      	cmp	r0, #0
  40984a:	d065      	beq.n	409918 <_dtoa_r+0x970>
  40984c:	462f      	mov	r7, r5
  40984e:	9508      	str	r5, [sp, #32]
  409850:	e4df      	b.n	409212 <_dtoa_r+0x26a>
  409852:	201c      	movs	r0, #28
  409854:	e564      	b.n	409320 <_dtoa_r+0x378>
  409856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409858:	2b00      	cmp	r3, #0
  40985a:	f040 814f 	bne.w	409afc <_dtoa_r+0xb54>
  40985e:	f8dd a014 	ldr.w	sl, [sp, #20]
  409862:	9e06      	ldr	r6, [sp, #24]
  409864:	4655      	mov	r5, sl
  409866:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40986a:	e002      	b.n	409872 <_dtoa_r+0x8ca>
  40986c:	f001 fbf2 	bl	40b054 <__multadd>
  409870:	4606      	mov	r6, r0
  409872:	4639      	mov	r1, r7
  409874:	4630      	mov	r0, r6
  409876:	f7ff faf7 	bl	408e68 <quorem>
  40987a:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40987e:	4631      	mov	r1, r6
  409880:	4620      	mov	r0, r4
  409882:	f805 9b01 	strb.w	r9, [r5], #1
  409886:	ebca 0e05 	rsb	lr, sl, r5
  40988a:	220a      	movs	r2, #10
  40988c:	2300      	movs	r3, #0
  40988e:	45c6      	cmp	lr, r8
  409890:	dbec      	blt.n	40986c <_dtoa_r+0x8c4>
  409892:	9b05      	ldr	r3, [sp, #20]
  409894:	f04f 0a00 	mov.w	sl, #0
  409898:	9a04      	ldr	r2, [sp, #16]
  40989a:	9606      	str	r6, [sp, #24]
  40989c:	2a01      	cmp	r2, #1
  40989e:	bfac      	ite	ge
  4098a0:	189b      	addge	r3, r3, r2
  4098a2:	3301      	addlt	r3, #1
  4098a4:	461d      	mov	r5, r3
  4098a6:	9906      	ldr	r1, [sp, #24]
  4098a8:	2201      	movs	r2, #1
  4098aa:	4620      	mov	r0, r4
  4098ac:	f001 fd64 	bl	40b378 <__lshift>
  4098b0:	4639      	mov	r1, r7
  4098b2:	9006      	str	r0, [sp, #24]
  4098b4:	f001 fdba 	bl	40b42c <__mcmp>
  4098b8:	2800      	cmp	r0, #0
  4098ba:	f340 824e 	ble.w	409d5a <_dtoa_r+0xdb2>
  4098be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4098c2:	1e6b      	subs	r3, r5, #1
  4098c4:	9905      	ldr	r1, [sp, #20]
  4098c6:	e004      	b.n	4098d2 <_dtoa_r+0x92a>
  4098c8:	428b      	cmp	r3, r1
  4098ca:	f000 820b 	beq.w	409ce4 <_dtoa_r+0xd3c>
  4098ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4098d2:	2a39      	cmp	r2, #57	; 0x39
  4098d4:	f103 0501 	add.w	r5, r3, #1
  4098d8:	d0f6      	beq.n	4098c8 <_dtoa_r+0x920>
  4098da:	3201      	adds	r2, #1
  4098dc:	701a      	strb	r2, [r3, #0]
  4098de:	4639      	mov	r1, r7
  4098e0:	4620      	mov	r0, r4
  4098e2:	f001 fbad 	bl	40b040 <_Bfree>
  4098e6:	9b08      	ldr	r3, [sp, #32]
  4098e8:	2b00      	cmp	r3, #0
  4098ea:	f43f ad60 	beq.w	4093ae <_dtoa_r+0x406>
  4098ee:	459a      	cmp	sl, r3
  4098f0:	f43f ad59 	beq.w	4093a6 <_dtoa_r+0x3fe>
  4098f4:	f1ba 0f00 	cmp.w	sl, #0
  4098f8:	f43f ad55 	beq.w	4093a6 <_dtoa_r+0x3fe>
  4098fc:	4651      	mov	r1, sl
  4098fe:	4620      	mov	r0, r4
  409900:	f001 fb9e 	bl	40b040 <_Bfree>
  409904:	e54f      	b.n	4093a6 <_dtoa_r+0x3fe>
  409906:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40990a:	f04f 0802 	mov.w	r8, #2
  40990e:	e5eb      	b.n	4094e8 <_dtoa_r+0x540>
  409910:	9805      	ldr	r0, [sp, #20]
  409912:	f7ff bb7a 	b.w	40900a <_dtoa_r+0x62>
  409916:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409918:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40991c:	e452      	b.n	4091c4 <_dtoa_r+0x21c>
  40991e:	9b02      	ldr	r3, [sp, #8]
  409920:	425d      	negs	r5, r3
  409922:	2d00      	cmp	r5, #0
  409924:	f000 81c1 	beq.w	409caa <_dtoa_r+0xd02>
  409928:	f005 020f 	and.w	r2, r5, #15
  40992c:	4b4d      	ldr	r3, [pc, #308]	; (409a64 <_dtoa_r+0xabc>)
  40992e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409932:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409936:	e9d3 2300 	ldrd	r2, r3, [r3]
  40993a:	f7fd fb5b 	bl	406ff4 <__aeabi_dmul>
  40993e:	112d      	asrs	r5, r5, #4
  409940:	e9cd 0108 	strd	r0, r1, [sp, #32]
  409944:	f000 8275 	beq.w	409e32 <_dtoa_r+0xe8a>
  409948:	4e47      	ldr	r6, [pc, #284]	; (409a68 <_dtoa_r+0xac0>)
  40994a:	f04f 0802 	mov.w	r8, #2
  40994e:	4602      	mov	r2, r0
  409950:	460b      	mov	r3, r1
  409952:	07ef      	lsls	r7, r5, #31
  409954:	4610      	mov	r0, r2
  409956:	4619      	mov	r1, r3
  409958:	d507      	bpl.n	40996a <_dtoa_r+0x9c2>
  40995a:	f108 0801 	add.w	r8, r8, #1
  40995e:	e9d6 2300 	ldrd	r2, r3, [r6]
  409962:	f7fd fb47 	bl	406ff4 <__aeabi_dmul>
  409966:	4602      	mov	r2, r0
  409968:	460b      	mov	r3, r1
  40996a:	106d      	asrs	r5, r5, #1
  40996c:	f106 0608 	add.w	r6, r6, #8
  409970:	d1ef      	bne.n	409952 <_dtoa_r+0x9aa>
  409972:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409976:	e5d2      	b.n	40951e <_dtoa_r+0x576>
  409978:	2700      	movs	r7, #0
  40997a:	9708      	str	r7, [sp, #32]
  40997c:	e506      	b.n	40938c <_dtoa_r+0x3e4>
  40997e:	f10c 3bff 	add.w	fp, ip, #4294967295
  409982:	4938      	ldr	r1, [pc, #224]	; (409a64 <_dtoa_r+0xabc>)
  409984:	4632      	mov	r2, r6
  409986:	463b      	mov	r3, r7
  409988:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40998c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  409990:	9f05      	ldr	r7, [sp, #20]
  409992:	e9d1 0100 	ldrd	r0, r1, [r1]
  409996:	f7fd fb2d 	bl	406ff4 <__aeabi_dmul>
  40999a:	1c7d      	adds	r5, r7, #1
  40999c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4099a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4099a4:	4649      	mov	r1, r9
  4099a6:	4640      	mov	r0, r8
  4099a8:	f002 fae8 	bl	40bf7c <__aeabi_d2iz>
  4099ac:	4606      	mov	r6, r0
  4099ae:	f7fd fabb 	bl	406f28 <__aeabi_i2d>
  4099b2:	4602      	mov	r2, r0
  4099b4:	460b      	mov	r3, r1
  4099b6:	4640      	mov	r0, r8
  4099b8:	4649      	mov	r1, r9
  4099ba:	3630      	adds	r6, #48	; 0x30
  4099bc:	f7fd f966 	bl	406c8c <__aeabi_dsub>
  4099c0:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  4099c4:	4680      	mov	r8, r0
  4099c6:	4689      	mov	r9, r1
  4099c8:	f1bc 0f01 	cmp.w	ip, #1
  4099cc:	703e      	strb	r6, [r7, #0]
  4099ce:	d020      	beq.n	409a12 <_dtoa_r+0xa6a>
  4099d0:	9b05      	ldr	r3, [sp, #20]
  4099d2:	4640      	mov	r0, r8
  4099d4:	46aa      	mov	sl, r5
  4099d6:	46a8      	mov	r8, r5
  4099d8:	eb03 070c 	add.w	r7, r3, ip
  4099dc:	46b9      	mov	r9, r7
  4099de:	2200      	movs	r2, #0
  4099e0:	4b1d      	ldr	r3, [pc, #116]	; (409a58 <_dtoa_r+0xab0>)
  4099e2:	f7fd fb07 	bl	406ff4 <__aeabi_dmul>
  4099e6:	460f      	mov	r7, r1
  4099e8:	4606      	mov	r6, r0
  4099ea:	f002 fac7 	bl	40bf7c <__aeabi_d2iz>
  4099ee:	4605      	mov	r5, r0
  4099f0:	f7fd fa9a 	bl	406f28 <__aeabi_i2d>
  4099f4:	4602      	mov	r2, r0
  4099f6:	460b      	mov	r3, r1
  4099f8:	3530      	adds	r5, #48	; 0x30
  4099fa:	4630      	mov	r0, r6
  4099fc:	4639      	mov	r1, r7
  4099fe:	f7fd f945 	bl	406c8c <__aeabi_dsub>
  409a02:	f80a 5b01 	strb.w	r5, [sl], #1
  409a06:	45ca      	cmp	sl, r9
  409a08:	d1e9      	bne.n	4099de <_dtoa_r+0xa36>
  409a0a:	4645      	mov	r5, r8
  409a0c:	4689      	mov	r9, r1
  409a0e:	4680      	mov	r8, r0
  409a10:	445d      	add	r5, fp
  409a12:	2200      	movs	r2, #0
  409a14:	4b15      	ldr	r3, [pc, #84]	; (409a6c <_dtoa_r+0xac4>)
  409a16:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409a1a:	f7fd f939 	bl	406c90 <__adddf3>
  409a1e:	4642      	mov	r2, r8
  409a20:	464b      	mov	r3, r9
  409a22:	f002 fa83 	bl	40bf2c <__aeabi_dcmplt>
  409a26:	2800      	cmp	r0, #0
  409a28:	f47f aec7 	bne.w	4097ba <_dtoa_r+0x812>
  409a2c:	2000      	movs	r0, #0
  409a2e:	490f      	ldr	r1, [pc, #60]	; (409a6c <_dtoa_r+0xac4>)
  409a30:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  409a34:	f7fd f92a 	bl	406c8c <__aeabi_dsub>
  409a38:	4642      	mov	r2, r8
  409a3a:	464b      	mov	r3, r9
  409a3c:	f002 fa94 	bl	40bf68 <__aeabi_dcmpgt>
  409a40:	b908      	cbnz	r0, 409a46 <_dtoa_r+0xa9e>
  409a42:	e769      	b.n	409918 <_dtoa_r+0x970>
  409a44:	4615      	mov	r5, r2
  409a46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409a4a:	1e6a      	subs	r2, r5, #1
  409a4c:	2b30      	cmp	r3, #48	; 0x30
  409a4e:	d0f9      	beq.n	409a44 <_dtoa_r+0xa9c>
  409a50:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409a52:	9302      	str	r3, [sp, #8]
  409a54:	e4ab      	b.n	4093ae <_dtoa_r+0x406>
  409a56:	bf00      	nop
  409a58:	40240000 	.word	0x40240000
  409a5c:	401c0000 	.word	0x401c0000
  409a60:	40140000 	.word	0x40140000
  409a64:	0040d078 	.word	0x0040d078
  409a68:	0040d150 	.word	0x0040d150
  409a6c:	3fe00000 	.word	0x3fe00000
  409a70:	9806      	ldr	r0, [sp, #24]
  409a72:	4639      	mov	r1, r7
  409a74:	f001 fcda 	bl	40b42c <__mcmp>
  409a78:	2800      	cmp	r0, #0
  409a7a:	f6bf ac6e 	bge.w	40935a <_dtoa_r+0x3b2>
  409a7e:	9e02      	ldr	r6, [sp, #8]
  409a80:	2300      	movs	r3, #0
  409a82:	9906      	ldr	r1, [sp, #24]
  409a84:	4620      	mov	r0, r4
  409a86:	3e01      	subs	r6, #1
  409a88:	220a      	movs	r2, #10
  409a8a:	9602      	str	r6, [sp, #8]
  409a8c:	f001 fae2 	bl	40b054 <__multadd>
  409a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409a92:	9006      	str	r0, [sp, #24]
  409a94:	bb1b      	cbnz	r3, 409ade <_dtoa_r+0xb36>
  409a96:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409a98:	2b02      	cmp	r3, #2
  409a9a:	f340 81ce 	ble.w	409e3a <_dtoa_r+0xe92>
  409a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409aa0:	2b00      	cmp	r3, #0
  409aa2:	f300 81ca 	bgt.w	409e3a <_dtoa_r+0xe92>
  409aa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409aa8:	9304      	str	r3, [sp, #16]
  409aaa:	e45e      	b.n	40936a <_dtoa_r+0x3c2>
  409aac:	f1ba 0f00 	cmp.w	sl, #0
  409ab0:	f47f ae9b 	bne.w	4097ea <_dtoa_r+0x842>
  409ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409ab8:	2b00      	cmp	r3, #0
  409aba:	f47f ae96 	bne.w	4097ea <_dtoa_r+0x842>
  409abe:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  409ac2:	0d36      	lsrs	r6, r6, #20
  409ac4:	0536      	lsls	r6, r6, #20
  409ac6:	2e00      	cmp	r6, #0
  409ac8:	f000 818a 	beq.w	409de0 <_dtoa_r+0xe38>
  409acc:	9b07      	ldr	r3, [sp, #28]
  409ace:	f04f 0801 	mov.w	r8, #1
  409ad2:	3301      	adds	r3, #1
  409ad4:	9307      	str	r3, [sp, #28]
  409ad6:	9b03      	ldr	r3, [sp, #12]
  409ad8:	3301      	adds	r3, #1
  409ada:	9303      	str	r3, [sp, #12]
  409adc:	e687      	b.n	4097ee <_dtoa_r+0x846>
  409ade:	2300      	movs	r3, #0
  409ae0:	9908      	ldr	r1, [sp, #32]
  409ae2:	4620      	mov	r0, r4
  409ae4:	220a      	movs	r2, #10
  409ae6:	f001 fab5 	bl	40b054 <__multadd>
  409aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409aec:	9008      	str	r0, [sp, #32]
  409aee:	2b02      	cmp	r3, #2
  409af0:	dd02      	ble.n	409af8 <_dtoa_r+0xb50>
  409af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409af4:	2b00      	cmp	r3, #0
  409af6:	ddd6      	ble.n	409aa6 <_dtoa_r+0xafe>
  409af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409afa:	9304      	str	r3, [sp, #16]
  409afc:	2d00      	cmp	r5, #0
  409afe:	dd05      	ble.n	409b0c <_dtoa_r+0xb64>
  409b00:	9908      	ldr	r1, [sp, #32]
  409b02:	462a      	mov	r2, r5
  409b04:	4620      	mov	r0, r4
  409b06:	f001 fc37 	bl	40b378 <__lshift>
  409b0a:	9008      	str	r0, [sp, #32]
  409b0c:	f1b8 0f00 	cmp.w	r8, #0
  409b10:	f040 8133 	bne.w	409d7a <_dtoa_r+0xdd2>
  409b14:	9e08      	ldr	r6, [sp, #32]
  409b16:	f00a 0101 	and.w	r1, sl, #1
  409b1a:	9b04      	ldr	r3, [sp, #16]
  409b1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409b1e:	3b01      	subs	r3, #1
  409b20:	910b      	str	r1, [sp, #44]	; 0x2c
  409b22:	9905      	ldr	r1, [sp, #20]
  409b24:	fab2 f282 	clz	r2, r2
  409b28:	970a      	str	r7, [sp, #40]	; 0x28
  409b2a:	18cb      	adds	r3, r1, r3
  409b2c:	4688      	mov	r8, r1
  409b2e:	f8dd b020 	ldr.w	fp, [sp, #32]
  409b32:	930c      	str	r3, [sp, #48]	; 0x30
  409b34:	0953      	lsrs	r3, r2, #5
  409b36:	9f06      	ldr	r7, [sp, #24]
  409b38:	9303      	str	r3, [sp, #12]
  409b3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409b3c:	4638      	mov	r0, r7
  409b3e:	4629      	mov	r1, r5
  409b40:	f7ff f992 	bl	408e68 <quorem>
  409b44:	4659      	mov	r1, fp
  409b46:	4681      	mov	r9, r0
  409b48:	4638      	mov	r0, r7
  409b4a:	f001 fc6f 	bl	40b42c <__mcmp>
  409b4e:	4629      	mov	r1, r5
  409b50:	4632      	mov	r2, r6
  409b52:	4682      	mov	sl, r0
  409b54:	4620      	mov	r0, r4
  409b56:	f001 fc8d 	bl	40b474 <__mdiff>
  409b5a:	68c2      	ldr	r2, [r0, #12]
  409b5c:	4605      	mov	r5, r0
  409b5e:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  409b62:	9207      	str	r2, [sp, #28]
  409b64:	2a00      	cmp	r2, #0
  409b66:	d150      	bne.n	409c0a <_dtoa_r+0xc62>
  409b68:	4629      	mov	r1, r5
  409b6a:	4638      	mov	r0, r7
  409b6c:	f8cd c018 	str.w	ip, [sp, #24]
  409b70:	f001 fc5c 	bl	40b42c <__mcmp>
  409b74:	4629      	mov	r1, r5
  409b76:	9004      	str	r0, [sp, #16]
  409b78:	4620      	mov	r0, r4
  409b7a:	f001 fa61 	bl	40b040 <_Bfree>
  409b7e:	9a03      	ldr	r2, [sp, #12]
  409b80:	9b04      	ldr	r3, [sp, #16]
  409b82:	f8dd c018 	ldr.w	ip, [sp, #24]
  409b86:	b132      	cbz	r2, 409b96 <_dtoa_r+0xbee>
  409b88:	b92b      	cbnz	r3, 409b96 <_dtoa_r+0xbee>
  409b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409b8c:	9a07      	ldr	r2, [sp, #28]
  409b8e:	2b00      	cmp	r3, #0
  409b90:	f000 8128 	beq.w	409de4 <_dtoa_r+0xe3c>
  409b94:	4613      	mov	r3, r2
  409b96:	f1ba 0f00 	cmp.w	sl, #0
  409b9a:	f2c0 80bc 	blt.w	409d16 <_dtoa_r+0xd6e>
  409b9e:	9a03      	ldr	r2, [sp, #12]
  409ba0:	b132      	cbz	r2, 409bb0 <_dtoa_r+0xc08>
  409ba2:	f1ba 0f00 	cmp.w	sl, #0
  409ba6:	d103      	bne.n	409bb0 <_dtoa_r+0xc08>
  409ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409baa:	2a00      	cmp	r2, #0
  409bac:	f000 80b3 	beq.w	409d16 <_dtoa_r+0xd6e>
  409bb0:	2b00      	cmp	r3, #0
  409bb2:	f300 80fe 	bgt.w	409db2 <_dtoa_r+0xe0a>
  409bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409bb8:	f108 0901 	add.w	r9, r8, #1
  409bbc:	f888 c000 	strb.w	ip, [r8]
  409bc0:	4598      	cmp	r8, r3
  409bc2:	464d      	mov	r5, r9
  409bc4:	f000 8106 	beq.w	409dd4 <_dtoa_r+0xe2c>
  409bc8:	4639      	mov	r1, r7
  409bca:	220a      	movs	r2, #10
  409bcc:	2300      	movs	r3, #0
  409bce:	4620      	mov	r0, r4
  409bd0:	f001 fa40 	bl	40b054 <__multadd>
  409bd4:	45b3      	cmp	fp, r6
  409bd6:	4607      	mov	r7, r0
  409bd8:	4659      	mov	r1, fp
  409bda:	4620      	mov	r0, r4
  409bdc:	f04f 020a 	mov.w	r2, #10
  409be0:	f04f 0300 	mov.w	r3, #0
  409be4:	d00b      	beq.n	409bfe <_dtoa_r+0xc56>
  409be6:	f001 fa35 	bl	40b054 <__multadd>
  409bea:	4631      	mov	r1, r6
  409bec:	4683      	mov	fp, r0
  409bee:	220a      	movs	r2, #10
  409bf0:	4620      	mov	r0, r4
  409bf2:	2300      	movs	r3, #0
  409bf4:	f001 fa2e 	bl	40b054 <__multadd>
  409bf8:	46c8      	mov	r8, r9
  409bfa:	4606      	mov	r6, r0
  409bfc:	e79d      	b.n	409b3a <_dtoa_r+0xb92>
  409bfe:	f001 fa29 	bl	40b054 <__multadd>
  409c02:	46c8      	mov	r8, r9
  409c04:	4683      	mov	fp, r0
  409c06:	4606      	mov	r6, r0
  409c08:	e797      	b.n	409b3a <_dtoa_r+0xb92>
  409c0a:	4601      	mov	r1, r0
  409c0c:	4620      	mov	r0, r4
  409c0e:	f8cd c010 	str.w	ip, [sp, #16]
  409c12:	f001 fa15 	bl	40b040 <_Bfree>
  409c16:	2301      	movs	r3, #1
  409c18:	f8dd c010 	ldr.w	ip, [sp, #16]
  409c1c:	e7bb      	b.n	409b96 <_dtoa_r+0xbee>
  409c1e:	2b0e      	cmp	r3, #14
  409c20:	bf8c      	ite	hi
  409c22:	2300      	movhi	r3, #0
  409c24:	2301      	movls	r3, #1
  409c26:	2100      	movs	r1, #0
  409c28:	401d      	ands	r5, r3
  409c2a:	6461      	str	r1, [r4, #68]	; 0x44
  409c2c:	e436      	b.n	40949c <_dtoa_r+0x4f4>
  409c2e:	2301      	movs	r3, #1
  409c30:	9323      	str	r3, [sp, #140]	; 0x8c
  409c32:	9310      	str	r3, [sp, #64]	; 0x40
  409c34:	9304      	str	r3, [sp, #16]
  409c36:	e7f6      	b.n	409c26 <_dtoa_r+0xc7e>
  409c38:	9906      	ldr	r1, [sp, #24]
  409c3a:	4620      	mov	r0, r4
  409c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409c3e:	f001 fb4b 	bl	40b2d8 <__pow5mult>
  409c42:	9006      	str	r0, [sp, #24]
  409c44:	f7ff bb42 	b.w	4092cc <_dtoa_r+0x324>
  409c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409c4c:	1af3      	subs	r3, r6, r3
  409c4e:	960a      	str	r6, [sp, #40]	; 0x28
  409c50:	2600      	movs	r6, #0
  409c52:	441a      	add	r2, r3
  409c54:	920c      	str	r2, [sp, #48]	; 0x30
  409c56:	f7ff bbf3 	b.w	409440 <_dtoa_r+0x498>
  409c5a:	9b04      	ldr	r3, [sp, #16]
  409c5c:	2b00      	cmp	r3, #0
  409c5e:	f43f adcc 	beq.w	4097fa <_dtoa_r+0x852>
  409c62:	9d10      	ldr	r5, [sp, #64]	; 0x40
  409c64:	2d00      	cmp	r5, #0
  409c66:	f77f ae57 	ble.w	409918 <_dtoa_r+0x970>
  409c6a:	2200      	movs	r2, #0
  409c6c:	4b86      	ldr	r3, [pc, #536]	; (409e88 <_dtoa_r+0xee0>)
  409c6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409c72:	f7fd f9bf 	bl	406ff4 <__aeabi_dmul>
  409c76:	9b02      	ldr	r3, [sp, #8]
  409c78:	4606      	mov	r6, r0
  409c7a:	460f      	mov	r7, r1
  409c7c:	3b01      	subs	r3, #1
  409c7e:	f108 0001 	add.w	r0, r8, #1
  409c82:	e9cd 6708 	strd	r6, r7, [sp, #32]
  409c86:	9314      	str	r3, [sp, #80]	; 0x50
  409c88:	f7fd f94e 	bl	406f28 <__aeabi_i2d>
  409c8c:	4602      	mov	r2, r0
  409c8e:	460b      	mov	r3, r1
  409c90:	4630      	mov	r0, r6
  409c92:	4639      	mov	r1, r7
  409c94:	f7fd f9ae 	bl	406ff4 <__aeabi_dmul>
  409c98:	2200      	movs	r2, #0
  409c9a:	4b7c      	ldr	r3, [pc, #496]	; (409e8c <_dtoa_r+0xee4>)
  409c9c:	f7fc fff8 	bl	406c90 <__adddf3>
  409ca0:	46ac      	mov	ip, r5
  409ca2:	4606      	mov	r6, r0
  409ca4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  409ca8:	e45a      	b.n	409560 <_dtoa_r+0x5b8>
  409caa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409cae:	f04f 0802 	mov.w	r8, #2
  409cb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409cb6:	e432      	b.n	40951e <_dtoa_r+0x576>
  409cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409cba:	2130      	movs	r1, #48	; 0x30
  409cbc:	3301      	adds	r3, #1
  409cbe:	7011      	strb	r1, [r2, #0]
  409cc0:	9302      	str	r3, [sp, #8]
  409cc2:	2331      	movs	r3, #49	; 0x31
  409cc4:	7013      	strb	r3, [r2, #0]
  409cc6:	f7ff bb72 	b.w	4093ae <_dtoa_r+0x406>
  409cca:	9906      	ldr	r1, [sp, #24]
  409ccc:	4620      	mov	r0, r4
  409cce:	f001 fb03 	bl	40b2d8 <__pow5mult>
  409cd2:	9006      	str	r0, [sp, #24]
  409cd4:	f7ff bafa 	b.w	4092cc <_dtoa_r+0x324>
  409cd8:	f1ba 0f00 	cmp.w	sl, #0
  409cdc:	f43f aeea 	beq.w	409ab4 <_dtoa_r+0xb0c>
  409ce0:	f7ff bb07 	b.w	4092f2 <_dtoa_r+0x34a>
  409ce4:	9a02      	ldr	r2, [sp, #8]
  409ce6:	2331      	movs	r3, #49	; 0x31
  409ce8:	3201      	adds	r2, #1
  409cea:	9202      	str	r2, [sp, #8]
  409cec:	9a05      	ldr	r2, [sp, #20]
  409cee:	7013      	strb	r3, [r2, #0]
  409cf0:	e5f5      	b.n	4098de <_dtoa_r+0x936>
  409cf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409cf4:	2a00      	cmp	r2, #0
  409cf6:	d055      	beq.n	409da4 <_dtoa_r+0xdfc>
  409cf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409cfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409cfe:	9d07      	ldr	r5, [sp, #28]
  409d00:	f7ff bba4 	b.w	40944c <_dtoa_r+0x4a4>
  409d04:	9c03      	ldr	r4, [sp, #12]
  409d06:	f7ff bb52 	b.w	4093ae <_dtoa_r+0x406>
  409d0a:	9b07      	ldr	r3, [sp, #28]
  409d0c:	9a04      	ldr	r2, [sp, #16]
  409d0e:	1a9d      	subs	r5, r3, r2
  409d10:	2300      	movs	r3, #0
  409d12:	f7ff bb9b 	b.w	40944c <_dtoa_r+0x4a4>
  409d16:	2b00      	cmp	r3, #0
  409d18:	9706      	str	r7, [sp, #24]
  409d1a:	46e1      	mov	r9, ip
  409d1c:	f8cd b020 	str.w	fp, [sp, #32]
  409d20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409d22:	4665      	mov	r5, ip
  409d24:	dd0f      	ble.n	409d46 <_dtoa_r+0xd9e>
  409d26:	9906      	ldr	r1, [sp, #24]
  409d28:	2201      	movs	r2, #1
  409d2a:	4620      	mov	r0, r4
  409d2c:	f001 fb24 	bl	40b378 <__lshift>
  409d30:	4639      	mov	r1, r7
  409d32:	9006      	str	r0, [sp, #24]
  409d34:	f001 fb7a 	bl	40b42c <__mcmp>
  409d38:	2800      	cmp	r0, #0
  409d3a:	dd75      	ble.n	409e28 <_dtoa_r+0xe80>
  409d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  409d40:	d066      	beq.n	409e10 <_dtoa_r+0xe68>
  409d42:	f109 0501 	add.w	r5, r9, #1
  409d46:	f8dd a020 	ldr.w	sl, [sp, #32]
  409d4a:	f888 5000 	strb.w	r5, [r8]
  409d4e:	f108 0501 	add.w	r5, r8, #1
  409d52:	9608      	str	r6, [sp, #32]
  409d54:	e5c3      	b.n	4098de <_dtoa_r+0x936>
  409d56:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409d58:	e531      	b.n	4097be <_dtoa_r+0x816>
  409d5a:	d104      	bne.n	409d66 <_dtoa_r+0xdbe>
  409d5c:	f019 0f01 	tst.w	r9, #1
  409d60:	d001      	beq.n	409d66 <_dtoa_r+0xdbe>
  409d62:	e5ac      	b.n	4098be <_dtoa_r+0x916>
  409d64:	4615      	mov	r5, r2
  409d66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409d6a:	1e6a      	subs	r2, r5, #1
  409d6c:	2b30      	cmp	r3, #48	; 0x30
  409d6e:	d0f9      	beq.n	409d64 <_dtoa_r+0xdbc>
  409d70:	e5b5      	b.n	4098de <_dtoa_r+0x936>
  409d72:	2700      	movs	r7, #0
  409d74:	9708      	str	r7, [sp, #32]
  409d76:	f7ff ba4c 	b.w	409212 <_dtoa_r+0x26a>
  409d7a:	9e08      	ldr	r6, [sp, #32]
  409d7c:	4620      	mov	r0, r4
  409d7e:	6871      	ldr	r1, [r6, #4]
  409d80:	f001 f936 	bl	40aff0 <_Balloc>
  409d84:	6933      	ldr	r3, [r6, #16]
  409d86:	4605      	mov	r5, r0
  409d88:	f106 010c 	add.w	r1, r6, #12
  409d8c:	1c9a      	adds	r2, r3, #2
  409d8e:	300c      	adds	r0, #12
  409d90:	0092      	lsls	r2, r2, #2
  409d92:	f001 f82d 	bl	40adf0 <memcpy>
  409d96:	4620      	mov	r0, r4
  409d98:	4629      	mov	r1, r5
  409d9a:	2201      	movs	r2, #1
  409d9c:	f001 faec 	bl	40b378 <__lshift>
  409da0:	4606      	mov	r6, r0
  409da2:	e6b8      	b.n	409b16 <_dtoa_r+0xb6e>
  409da4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  409da6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409da8:	9d07      	ldr	r5, [sp, #28]
  409daa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409dae:	f7ff bb4d 	b.w	40944c <_dtoa_r+0x4a4>
  409db2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409db6:	9706      	str	r7, [sp, #24]
  409db8:	f8cd b020 	str.w	fp, [sp, #32]
  409dbc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409dbe:	d030      	beq.n	409e22 <_dtoa_r+0xe7a>
  409dc0:	f10c 0901 	add.w	r9, ip, #1
  409dc4:	f8dd a020 	ldr.w	sl, [sp, #32]
  409dc8:	f108 0501 	add.w	r5, r8, #1
  409dcc:	9608      	str	r6, [sp, #32]
  409dce:	f888 9000 	strb.w	r9, [r8]
  409dd2:	e584      	b.n	4098de <_dtoa_r+0x936>
  409dd4:	9706      	str	r7, [sp, #24]
  409dd6:	46e1      	mov	r9, ip
  409dd8:	46da      	mov	sl, fp
  409dda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409ddc:	9608      	str	r6, [sp, #32]
  409dde:	e562      	b.n	4098a6 <_dtoa_r+0x8fe>
  409de0:	46b0      	mov	r8, r6
  409de2:	e504      	b.n	4097ee <_dtoa_r+0x846>
  409de4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409de8:	9706      	str	r7, [sp, #24]
  409dea:	f8cd b020 	str.w	fp, [sp, #32]
  409dee:	4655      	mov	r5, sl
  409df0:	46cb      	mov	fp, r9
  409df2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409df4:	46e1      	mov	r9, ip
  409df6:	d00b      	beq.n	409e10 <_dtoa_r+0xe68>
  409df8:	2d00      	cmp	r5, #0
  409dfa:	dd01      	ble.n	409e00 <_dtoa_r+0xe58>
  409dfc:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  409e00:	f8dd a020 	ldr.w	sl, [sp, #32]
  409e04:	f108 0501 	add.w	r5, r8, #1
  409e08:	f888 9000 	strb.w	r9, [r8]
  409e0c:	9608      	str	r6, [sp, #32]
  409e0e:	e566      	b.n	4098de <_dtoa_r+0x936>
  409e10:	f8dd a020 	ldr.w	sl, [sp, #32]
  409e14:	9608      	str	r6, [sp, #32]
  409e16:	2239      	movs	r2, #57	; 0x39
  409e18:	f108 0501 	add.w	r5, r8, #1
  409e1c:	f888 2000 	strb.w	r2, [r8]
  409e20:	e54f      	b.n	4098c2 <_dtoa_r+0x91a>
  409e22:	46da      	mov	sl, fp
  409e24:	9608      	str	r6, [sp, #32]
  409e26:	e7f6      	b.n	409e16 <_dtoa_r+0xe6e>
  409e28:	d18d      	bne.n	409d46 <_dtoa_r+0xd9e>
  409e2a:	f019 0f01 	tst.w	r9, #1
  409e2e:	d08a      	beq.n	409d46 <_dtoa_r+0xd9e>
  409e30:	e784      	b.n	409d3c <_dtoa_r+0xd94>
  409e32:	f04f 0802 	mov.w	r8, #2
  409e36:	f7ff bb72 	b.w	40951e <_dtoa_r+0x576>
  409e3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409e3c:	9304      	str	r3, [sp, #16]
  409e3e:	e50e      	b.n	40985e <_dtoa_r+0x8b6>
  409e40:	f43f aa75 	beq.w	40932e <_dtoa_r+0x386>
  409e44:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409e48:	f7ff ba6a 	b.w	409320 <_dtoa_r+0x378>
  409e4c:	2501      	movs	r5, #1
  409e4e:	f7ff b982 	b.w	409156 <_dtoa_r+0x1ae>
  409e52:	2500      	movs	r5, #0
  409e54:	4620      	mov	r0, r4
  409e56:	6465      	str	r5, [r4, #68]	; 0x44
  409e58:	4629      	mov	r1, r5
  409e5a:	f001 f8c9 	bl	40aff0 <_Balloc>
  409e5e:	9a02      	ldr	r2, [sp, #8]
  409e60:	9005      	str	r0, [sp, #20]
  409e62:	2a0e      	cmp	r2, #14
  409e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409e66:	6420      	str	r0, [r4, #64]	; 0x40
  409e68:	f73f aad7 	bgt.w	40941a <_dtoa_r+0x472>
  409e6c:	42ab      	cmp	r3, r5
  409e6e:	f6ff aad4 	blt.w	40941a <_dtoa_r+0x472>
  409e72:	f04f 33ff 	mov.w	r3, #4294967295
  409e76:	9523      	str	r5, [sp, #140]	; 0x8c
  409e78:	9304      	str	r3, [sp, #16]
  409e7a:	f7ff b9a9 	b.w	4091d0 <_dtoa_r+0x228>
  409e7e:	2301      	movs	r3, #1
  409e80:	930b      	str	r3, [sp, #44]	; 0x2c
  409e82:	f7ff bbfa 	b.w	40967a <_dtoa_r+0x6d2>
  409e86:	bf00      	nop
  409e88:	40240000 	.word	0x40240000
  409e8c:	401c0000 	.word	0x401c0000

00409e90 <__sflush_r>:
  409e90:	898b      	ldrh	r3, [r1, #12]
  409e92:	b29a      	uxth	r2, r3
  409e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e98:	460d      	mov	r5, r1
  409e9a:	0711      	lsls	r1, r2, #28
  409e9c:	4680      	mov	r8, r0
  409e9e:	d43c      	bmi.n	409f1a <__sflush_r+0x8a>
  409ea0:	686a      	ldr	r2, [r5, #4]
  409ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409ea6:	2a00      	cmp	r2, #0
  409ea8:	81ab      	strh	r3, [r5, #12]
  409eaa:	dd76      	ble.n	409f9a <__sflush_r+0x10a>
  409eac:	6aae      	ldr	r6, [r5, #40]	; 0x28
  409eae:	2e00      	cmp	r6, #0
  409eb0:	d04b      	beq.n	409f4a <__sflush_r+0xba>
  409eb2:	b29b      	uxth	r3, r3
  409eb4:	2100      	movs	r1, #0
  409eb6:	f8d8 4000 	ldr.w	r4, [r8]
  409eba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  409ebe:	f8c8 1000 	str.w	r1, [r8]
  409ec2:	b292      	uxth	r2, r2
  409ec4:	2a00      	cmp	r2, #0
  409ec6:	d06c      	beq.n	409fa2 <__sflush_r+0x112>
  409ec8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409eca:	075f      	lsls	r7, r3, #29
  409ecc:	d505      	bpl.n	409eda <__sflush_r+0x4a>
  409ece:	6869      	ldr	r1, [r5, #4]
  409ed0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409ed2:	1a52      	subs	r2, r2, r1
  409ed4:	b10b      	cbz	r3, 409eda <__sflush_r+0x4a>
  409ed6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409ed8:	1ad2      	subs	r2, r2, r3
  409eda:	4640      	mov	r0, r8
  409edc:	69e9      	ldr	r1, [r5, #28]
  409ede:	2300      	movs	r3, #0
  409ee0:	47b0      	blx	r6
  409ee2:	1c46      	adds	r6, r0, #1
  409ee4:	d03e      	beq.n	409f64 <__sflush_r+0xd4>
  409ee6:	89ab      	ldrh	r3, [r5, #12]
  409ee8:	2100      	movs	r1, #0
  409eea:	692a      	ldr	r2, [r5, #16]
  409eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409ef0:	6069      	str	r1, [r5, #4]
  409ef2:	602a      	str	r2, [r5, #0]
  409ef4:	b29b      	uxth	r3, r3
  409ef6:	04da      	lsls	r2, r3, #19
  409ef8:	81ab      	strh	r3, [r5, #12]
  409efa:	d44c      	bmi.n	409f96 <__sflush_r+0x106>
  409efc:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409efe:	f8c8 4000 	str.w	r4, [r8]
  409f02:	b311      	cbz	r1, 409f4a <__sflush_r+0xba>
  409f04:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409f08:	4299      	cmp	r1, r3
  409f0a:	d002      	beq.n	409f12 <__sflush_r+0x82>
  409f0c:	4640      	mov	r0, r8
  409f0e:	f000 f96b 	bl	40a1e8 <_free_r>
  409f12:	2000      	movs	r0, #0
  409f14:	6328      	str	r0, [r5, #48]	; 0x30
  409f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f1a:	692e      	ldr	r6, [r5, #16]
  409f1c:	b1ae      	cbz	r6, 409f4a <__sflush_r+0xba>
  409f1e:	682c      	ldr	r4, [r5, #0]
  409f20:	0791      	lsls	r1, r2, #30
  409f22:	602e      	str	r6, [r5, #0]
  409f24:	eba4 0406 	sub.w	r4, r4, r6
  409f28:	d11a      	bne.n	409f60 <__sflush_r+0xd0>
  409f2a:	696b      	ldr	r3, [r5, #20]
  409f2c:	60ab      	str	r3, [r5, #8]
  409f2e:	e00a      	b.n	409f46 <__sflush_r+0xb6>
  409f30:	4632      	mov	r2, r6
  409f32:	4623      	mov	r3, r4
  409f34:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409f36:	4640      	mov	r0, r8
  409f38:	69e9      	ldr	r1, [r5, #28]
  409f3a:	47b8      	blx	r7
  409f3c:	2800      	cmp	r0, #0
  409f3e:	eba4 0400 	sub.w	r4, r4, r0
  409f42:	4406      	add	r6, r0
  409f44:	dd04      	ble.n	409f50 <__sflush_r+0xc0>
  409f46:	2c00      	cmp	r4, #0
  409f48:	dcf2      	bgt.n	409f30 <__sflush_r+0xa0>
  409f4a:	2000      	movs	r0, #0
  409f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f50:	89ab      	ldrh	r3, [r5, #12]
  409f52:	f04f 30ff 	mov.w	r0, #4294967295
  409f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f5a:	81ab      	strh	r3, [r5, #12]
  409f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f60:	2300      	movs	r3, #0
  409f62:	e7e3      	b.n	409f2c <__sflush_r+0x9c>
  409f64:	f8d8 3000 	ldr.w	r3, [r8]
  409f68:	fab3 f283 	clz	r2, r3
  409f6c:	2b00      	cmp	r3, #0
  409f6e:	bf18      	it	ne
  409f70:	2b1d      	cmpne	r3, #29
  409f72:	ea4f 1252 	mov.w	r2, r2, lsr #5
  409f76:	d001      	beq.n	409f7c <__sflush_r+0xec>
  409f78:	2b16      	cmp	r3, #22
  409f7a:	d127      	bne.n	409fcc <__sflush_r+0x13c>
  409f7c:	89ab      	ldrh	r3, [r5, #12]
  409f7e:	2600      	movs	r6, #0
  409f80:	6929      	ldr	r1, [r5, #16]
  409f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409f86:	b29b      	uxth	r3, r3
  409f88:	81ab      	strh	r3, [r5, #12]
  409f8a:	04db      	lsls	r3, r3, #19
  409f8c:	e885 0042 	stmia.w	r5, {r1, r6}
  409f90:	d5b4      	bpl.n	409efc <__sflush_r+0x6c>
  409f92:	2a00      	cmp	r2, #0
  409f94:	d0b2      	beq.n	409efc <__sflush_r+0x6c>
  409f96:	6528      	str	r0, [r5, #80]	; 0x50
  409f98:	e7b0      	b.n	409efc <__sflush_r+0x6c>
  409f9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409f9c:	2a00      	cmp	r2, #0
  409f9e:	dc85      	bgt.n	409eac <__sflush_r+0x1c>
  409fa0:	e7d3      	b.n	409f4a <__sflush_r+0xba>
  409fa2:	2301      	movs	r3, #1
  409fa4:	4640      	mov	r0, r8
  409fa6:	69e9      	ldr	r1, [r5, #28]
  409fa8:	47b0      	blx	r6
  409faa:	1c43      	adds	r3, r0, #1
  409fac:	4602      	mov	r2, r0
  409fae:	d002      	beq.n	409fb6 <__sflush_r+0x126>
  409fb0:	89ab      	ldrh	r3, [r5, #12]
  409fb2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  409fb4:	e789      	b.n	409eca <__sflush_r+0x3a>
  409fb6:	f8d8 3000 	ldr.w	r3, [r8]
  409fba:	2b00      	cmp	r3, #0
  409fbc:	d0f8      	beq.n	409fb0 <__sflush_r+0x120>
  409fbe:	2b16      	cmp	r3, #22
  409fc0:	d001      	beq.n	409fc6 <__sflush_r+0x136>
  409fc2:	2b1d      	cmp	r3, #29
  409fc4:	d1c4      	bne.n	409f50 <__sflush_r+0xc0>
  409fc6:	f8c8 4000 	str.w	r4, [r8]
  409fca:	e7be      	b.n	409f4a <__sflush_r+0xba>
  409fcc:	89ab      	ldrh	r3, [r5, #12]
  409fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409fd2:	81ab      	strh	r3, [r5, #12]
  409fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409fd8 <_fflush_r>:
  409fd8:	b510      	push	{r4, lr}
  409fda:	4604      	mov	r4, r0
  409fdc:	b082      	sub	sp, #8
  409fde:	b108      	cbz	r0, 409fe4 <_fflush_r+0xc>
  409fe0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409fe2:	b153      	cbz	r3, 409ffa <_fflush_r+0x22>
  409fe4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  409fe8:	b908      	cbnz	r0, 409fee <_fflush_r+0x16>
  409fea:	b002      	add	sp, #8
  409fec:	bd10      	pop	{r4, pc}
  409fee:	4620      	mov	r0, r4
  409ff0:	b002      	add	sp, #8
  409ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409ff6:	f7ff bf4b 	b.w	409e90 <__sflush_r>
  409ffa:	9101      	str	r1, [sp, #4]
  409ffc:	f000 f886 	bl	40a10c <__sinit>
  40a000:	9901      	ldr	r1, [sp, #4]
  40a002:	e7ef      	b.n	409fe4 <_fflush_r+0xc>

0040a004 <_cleanup_r>:
  40a004:	4901      	ldr	r1, [pc, #4]	; (40a00c <_cleanup_r+0x8>)
  40a006:	f000 bb59 	b.w	40a6bc <_fwalk_reent>
  40a00a:	bf00      	nop
  40a00c:	0040bd4d 	.word	0x0040bd4d

0040a010 <__sinit.part.1>:
  40a010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a014:	4682      	mov	sl, r0
  40a016:	2400      	movs	r4, #0
  40a018:	4837      	ldr	r0, [pc, #220]	; (40a0f8 <__sinit.part.1+0xe8>)
  40a01a:	2103      	movs	r1, #3
  40a01c:	f8da 5004 	ldr.w	r5, [sl, #4]
  40a020:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40a024:	2604      	movs	r6, #4
  40a026:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40a02a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40a02e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40a032:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  40a036:	4621      	mov	r1, r4
  40a038:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40a03c:	2208      	movs	r2, #8
  40a03e:	81ae      	strh	r6, [r5, #12]
  40a040:	602c      	str	r4, [r5, #0]
  40a042:	606c      	str	r4, [r5, #4]
  40a044:	60ac      	str	r4, [r5, #8]
  40a046:	666c      	str	r4, [r5, #100]	; 0x64
  40a048:	81ec      	strh	r4, [r5, #14]
  40a04a:	612c      	str	r4, [r5, #16]
  40a04c:	616c      	str	r4, [r5, #20]
  40a04e:	61ac      	str	r4, [r5, #24]
  40a050:	f7fd fa5a 	bl	407508 <memset>
  40a054:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40a100 <__sinit.part.1+0xf0>
  40a058:	f8da 6008 	ldr.w	r6, [sl, #8]
  40a05c:	f04f 0301 	mov.w	r3, #1
  40a060:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40a104 <__sinit.part.1+0xf4>
  40a064:	f04f 0e09 	mov.w	lr, #9
  40a068:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40a108 <__sinit.part.1+0xf8>
  40a06c:	4621      	mov	r1, r4
  40a06e:	4f23      	ldr	r7, [pc, #140]	; (40a0fc <__sinit.part.1+0xec>)
  40a070:	2208      	movs	r2, #8
  40a072:	61ed      	str	r5, [r5, #28]
  40a074:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40a078:	f8c5 b020 	str.w	fp, [r5, #32]
  40a07c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40a080:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40a084:	62ef      	str	r7, [r5, #44]	; 0x2c
  40a086:	81f3      	strh	r3, [r6, #14]
  40a088:	f8a6 e00c 	strh.w	lr, [r6, #12]
  40a08c:	6034      	str	r4, [r6, #0]
  40a08e:	6074      	str	r4, [r6, #4]
  40a090:	60b4      	str	r4, [r6, #8]
  40a092:	6674      	str	r4, [r6, #100]	; 0x64
  40a094:	6134      	str	r4, [r6, #16]
  40a096:	6174      	str	r4, [r6, #20]
  40a098:	61b4      	str	r4, [r6, #24]
  40a09a:	f7fd fa35 	bl	407508 <memset>
  40a09e:	f8da 500c 	ldr.w	r5, [sl, #12]
  40a0a2:	f04f 0c12 	mov.w	ip, #18
  40a0a6:	f04f 0e02 	mov.w	lr, #2
  40a0aa:	61f6      	str	r6, [r6, #28]
  40a0ac:	4621      	mov	r1, r4
  40a0ae:	f8c6 b020 	str.w	fp, [r6, #32]
  40a0b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40a0b6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  40a0ba:	2208      	movs	r2, #8
  40a0bc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  40a0c0:	62f7      	str	r7, [r6, #44]	; 0x2c
  40a0c2:	602c      	str	r4, [r5, #0]
  40a0c4:	606c      	str	r4, [r5, #4]
  40a0c6:	60ac      	str	r4, [r5, #8]
  40a0c8:	666c      	str	r4, [r5, #100]	; 0x64
  40a0ca:	612c      	str	r4, [r5, #16]
  40a0cc:	616c      	str	r4, [r5, #20]
  40a0ce:	61ac      	str	r4, [r5, #24]
  40a0d0:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40a0d4:	f8a5 e00e 	strh.w	lr, [r5, #14]
  40a0d8:	f7fd fa16 	bl	407508 <memset>
  40a0dc:	2301      	movs	r3, #1
  40a0de:	61ed      	str	r5, [r5, #28]
  40a0e0:	f8c5 b020 	str.w	fp, [r5, #32]
  40a0e4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40a0e8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40a0ec:	62ef      	str	r7, [r5, #44]	; 0x2c
  40a0ee:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40a0f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a0f6:	bf00      	nop
  40a0f8:	0040a005 	.word	0x0040a005
  40a0fc:	0040bae1 	.word	0x0040bae1
  40a100:	0040ba61 	.word	0x0040ba61
  40a104:	0040ba85 	.word	0x0040ba85
  40a108:	0040babd 	.word	0x0040babd

0040a10c <__sinit>:
  40a10c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a10e:	b103      	cbz	r3, 40a112 <__sinit+0x6>
  40a110:	4770      	bx	lr
  40a112:	f7ff bf7d 	b.w	40a010 <__sinit.part.1>
  40a116:	bf00      	nop

0040a118 <__sfp_lock_acquire>:
  40a118:	4770      	bx	lr
  40a11a:	bf00      	nop

0040a11c <__sfp_lock_release>:
  40a11c:	4770      	bx	lr
  40a11e:	bf00      	nop

0040a120 <__libc_fini_array>:
  40a120:	b538      	push	{r3, r4, r5, lr}
  40a122:	4b08      	ldr	r3, [pc, #32]	; (40a144 <__libc_fini_array+0x24>)
  40a124:	4d08      	ldr	r5, [pc, #32]	; (40a148 <__libc_fini_array+0x28>)
  40a126:	1aed      	subs	r5, r5, r3
  40a128:	10ac      	asrs	r4, r5, #2
  40a12a:	bf18      	it	ne
  40a12c:	18ed      	addne	r5, r5, r3
  40a12e:	d005      	beq.n	40a13c <__libc_fini_array+0x1c>
  40a130:	3c01      	subs	r4, #1
  40a132:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40a136:	4798      	blx	r3
  40a138:	2c00      	cmp	r4, #0
  40a13a:	d1f9      	bne.n	40a130 <__libc_fini_array+0x10>
  40a13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a140:	f003 b824 	b.w	40d18c <_fini>
  40a144:	0040d198 	.word	0x0040d198
  40a148:	0040d19c 	.word	0x0040d19c

0040a14c <_malloc_trim_r>:
  40a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a14e:	4f22      	ldr	r7, [pc, #136]	; (40a1d8 <_malloc_trim_r+0x8c>)
  40a150:	460c      	mov	r4, r1
  40a152:	4606      	mov	r6, r0
  40a154:	f000 ff48 	bl	40afe8 <__malloc_lock>
  40a158:	68ba      	ldr	r2, [r7, #8]
  40a15a:	4b20      	ldr	r3, [pc, #128]	; (40a1dc <_malloc_trim_r+0x90>)
  40a15c:	6855      	ldr	r5, [r2, #4]
  40a15e:	f025 0503 	bic.w	r5, r5, #3
  40a162:	1b2c      	subs	r4, r5, r4
  40a164:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40a168:	4023      	ands	r3, r4
  40a16a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40a16e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a172:	db07      	blt.n	40a184 <_malloc_trim_r+0x38>
  40a174:	4630      	mov	r0, r6
  40a176:	2100      	movs	r1, #0
  40a178:	f001 fc60 	bl	40ba3c <_sbrk_r>
  40a17c:	68bb      	ldr	r3, [r7, #8]
  40a17e:	442b      	add	r3, r5
  40a180:	4298      	cmp	r0, r3
  40a182:	d004      	beq.n	40a18e <_malloc_trim_r+0x42>
  40a184:	4630      	mov	r0, r6
  40a186:	f000 ff31 	bl	40afec <__malloc_unlock>
  40a18a:	2000      	movs	r0, #0
  40a18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a18e:	4630      	mov	r0, r6
  40a190:	4261      	negs	r1, r4
  40a192:	f001 fc53 	bl	40ba3c <_sbrk_r>
  40a196:	3001      	adds	r0, #1
  40a198:	d00d      	beq.n	40a1b6 <_malloc_trim_r+0x6a>
  40a19a:	4a11      	ldr	r2, [pc, #68]	; (40a1e0 <_malloc_trim_r+0x94>)
  40a19c:	1b2d      	subs	r5, r5, r4
  40a19e:	68b9      	ldr	r1, [r7, #8]
  40a1a0:	4630      	mov	r0, r6
  40a1a2:	6813      	ldr	r3, [r2, #0]
  40a1a4:	f045 0501 	orr.w	r5, r5, #1
  40a1a8:	1b1b      	subs	r3, r3, r4
  40a1aa:	604d      	str	r5, [r1, #4]
  40a1ac:	6013      	str	r3, [r2, #0]
  40a1ae:	f000 ff1d 	bl	40afec <__malloc_unlock>
  40a1b2:	2001      	movs	r0, #1
  40a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a1b6:	4630      	mov	r0, r6
  40a1b8:	2100      	movs	r1, #0
  40a1ba:	f001 fc3f 	bl	40ba3c <_sbrk_r>
  40a1be:	68ba      	ldr	r2, [r7, #8]
  40a1c0:	1a83      	subs	r3, r0, r2
  40a1c2:	2b0f      	cmp	r3, #15
  40a1c4:	ddde      	ble.n	40a184 <_malloc_trim_r+0x38>
  40a1c6:	4c07      	ldr	r4, [pc, #28]	; (40a1e4 <_malloc_trim_r+0x98>)
  40a1c8:	f043 0301 	orr.w	r3, r3, #1
  40a1cc:	4904      	ldr	r1, [pc, #16]	; (40a1e0 <_malloc_trim_r+0x94>)
  40a1ce:	6824      	ldr	r4, [r4, #0]
  40a1d0:	6053      	str	r3, [r2, #4]
  40a1d2:	1b00      	subs	r0, r0, r4
  40a1d4:	6008      	str	r0, [r1, #0]
  40a1d6:	e7d5      	b.n	40a184 <_malloc_trim_r+0x38>
  40a1d8:	204004fc 	.word	0x204004fc
  40a1dc:	fffff000 	.word	0xfffff000
  40a1e0:	204009e0 	.word	0x204009e0
  40a1e4:	20400908 	.word	0x20400908

0040a1e8 <_free_r>:
  40a1e8:	2900      	cmp	r1, #0
  40a1ea:	d04d      	beq.n	40a288 <_free_r+0xa0>
  40a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a1f0:	460c      	mov	r4, r1
  40a1f2:	4680      	mov	r8, r0
  40a1f4:	f000 fef8 	bl	40afe8 <__malloc_lock>
  40a1f8:	4963      	ldr	r1, [pc, #396]	; (40a388 <_free_r+0x1a0>)
  40a1fa:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40a1fe:	f1a4 0508 	sub.w	r5, r4, #8
  40a202:	688e      	ldr	r6, [r1, #8]
  40a204:	f027 0301 	bic.w	r3, r7, #1
  40a208:	18ea      	adds	r2, r5, r3
  40a20a:	6850      	ldr	r0, [r2, #4]
  40a20c:	4296      	cmp	r6, r2
  40a20e:	f020 0003 	bic.w	r0, r0, #3
  40a212:	d059      	beq.n	40a2c8 <_free_r+0xe0>
  40a214:	07fe      	lsls	r6, r7, #31
  40a216:	6050      	str	r0, [r2, #4]
  40a218:	d40b      	bmi.n	40a232 <_free_r+0x4a>
  40a21a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40a21e:	f101 0708 	add.w	r7, r1, #8
  40a222:	1b2d      	subs	r5, r5, r4
  40a224:	4423      	add	r3, r4
  40a226:	68ac      	ldr	r4, [r5, #8]
  40a228:	42bc      	cmp	r4, r7
  40a22a:	d066      	beq.n	40a2fa <_free_r+0x112>
  40a22c:	68ef      	ldr	r7, [r5, #12]
  40a22e:	60e7      	str	r7, [r4, #12]
  40a230:	60bc      	str	r4, [r7, #8]
  40a232:	1814      	adds	r4, r2, r0
  40a234:	6864      	ldr	r4, [r4, #4]
  40a236:	07e4      	lsls	r4, r4, #31
  40a238:	d40c      	bmi.n	40a254 <_free_r+0x6c>
  40a23a:	4c54      	ldr	r4, [pc, #336]	; (40a38c <_free_r+0x1a4>)
  40a23c:	4403      	add	r3, r0
  40a23e:	6890      	ldr	r0, [r2, #8]
  40a240:	42a0      	cmp	r0, r4
  40a242:	d07c      	beq.n	40a33e <_free_r+0x156>
  40a244:	68d4      	ldr	r4, [r2, #12]
  40a246:	f043 0201 	orr.w	r2, r3, #1
  40a24a:	60c4      	str	r4, [r0, #12]
  40a24c:	60a0      	str	r0, [r4, #8]
  40a24e:	606a      	str	r2, [r5, #4]
  40a250:	50eb      	str	r3, [r5, r3]
  40a252:	e003      	b.n	40a25c <_free_r+0x74>
  40a254:	f043 0201 	orr.w	r2, r3, #1
  40a258:	606a      	str	r2, [r5, #4]
  40a25a:	50eb      	str	r3, [r5, r3]
  40a25c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a260:	d213      	bcs.n	40a28a <_free_r+0xa2>
  40a262:	08db      	lsrs	r3, r3, #3
  40a264:	2001      	movs	r0, #1
  40a266:	684a      	ldr	r2, [r1, #4]
  40a268:	109c      	asrs	r4, r3, #2
  40a26a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40a26e:	40a0      	lsls	r0, r4
  40a270:	689c      	ldr	r4, [r3, #8]
  40a272:	4302      	orrs	r2, r0
  40a274:	60eb      	str	r3, [r5, #12]
  40a276:	60ac      	str	r4, [r5, #8]
  40a278:	604a      	str	r2, [r1, #4]
  40a27a:	609d      	str	r5, [r3, #8]
  40a27c:	60e5      	str	r5, [r4, #12]
  40a27e:	4640      	mov	r0, r8
  40a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a284:	f000 beb2 	b.w	40afec <__malloc_unlock>
  40a288:	4770      	bx	lr
  40a28a:	0a5a      	lsrs	r2, r3, #9
  40a28c:	2a04      	cmp	r2, #4
  40a28e:	d847      	bhi.n	40a320 <_free_r+0x138>
  40a290:	099a      	lsrs	r2, r3, #6
  40a292:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40a296:	0060      	lsls	r0, r4, #1
  40a298:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40a29c:	493a      	ldr	r1, [pc, #232]	; (40a388 <_free_r+0x1a0>)
  40a29e:	6882      	ldr	r2, [r0, #8]
  40a2a0:	4282      	cmp	r2, r0
  40a2a2:	d043      	beq.n	40a32c <_free_r+0x144>
  40a2a4:	6851      	ldr	r1, [r2, #4]
  40a2a6:	f021 0103 	bic.w	r1, r1, #3
  40a2aa:	4299      	cmp	r1, r3
  40a2ac:	d902      	bls.n	40a2b4 <_free_r+0xcc>
  40a2ae:	6892      	ldr	r2, [r2, #8]
  40a2b0:	4290      	cmp	r0, r2
  40a2b2:	d1f7      	bne.n	40a2a4 <_free_r+0xbc>
  40a2b4:	68d3      	ldr	r3, [r2, #12]
  40a2b6:	60eb      	str	r3, [r5, #12]
  40a2b8:	4640      	mov	r0, r8
  40a2ba:	60aa      	str	r2, [r5, #8]
  40a2bc:	609d      	str	r5, [r3, #8]
  40a2be:	60d5      	str	r5, [r2, #12]
  40a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a2c4:	f000 be92 	b.w	40afec <__malloc_unlock>
  40a2c8:	07ff      	lsls	r7, r7, #31
  40a2ca:	4403      	add	r3, r0
  40a2cc:	d407      	bmi.n	40a2de <_free_r+0xf6>
  40a2ce:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40a2d2:	1aad      	subs	r5, r5, r2
  40a2d4:	4413      	add	r3, r2
  40a2d6:	68a8      	ldr	r0, [r5, #8]
  40a2d8:	68ea      	ldr	r2, [r5, #12]
  40a2da:	60c2      	str	r2, [r0, #12]
  40a2dc:	6090      	str	r0, [r2, #8]
  40a2de:	4a2c      	ldr	r2, [pc, #176]	; (40a390 <_free_r+0x1a8>)
  40a2e0:	f043 0001 	orr.w	r0, r3, #1
  40a2e4:	6812      	ldr	r2, [r2, #0]
  40a2e6:	6068      	str	r0, [r5, #4]
  40a2e8:	4293      	cmp	r3, r2
  40a2ea:	608d      	str	r5, [r1, #8]
  40a2ec:	d3c7      	bcc.n	40a27e <_free_r+0x96>
  40a2ee:	4b29      	ldr	r3, [pc, #164]	; (40a394 <_free_r+0x1ac>)
  40a2f0:	4640      	mov	r0, r8
  40a2f2:	6819      	ldr	r1, [r3, #0]
  40a2f4:	f7ff ff2a 	bl	40a14c <_malloc_trim_r>
  40a2f8:	e7c1      	b.n	40a27e <_free_r+0x96>
  40a2fa:	1811      	adds	r1, r2, r0
  40a2fc:	6849      	ldr	r1, [r1, #4]
  40a2fe:	07c9      	lsls	r1, r1, #31
  40a300:	d409      	bmi.n	40a316 <_free_r+0x12e>
  40a302:	4403      	add	r3, r0
  40a304:	68d1      	ldr	r1, [r2, #12]
  40a306:	6892      	ldr	r2, [r2, #8]
  40a308:	f043 0001 	orr.w	r0, r3, #1
  40a30c:	60d1      	str	r1, [r2, #12]
  40a30e:	608a      	str	r2, [r1, #8]
  40a310:	6068      	str	r0, [r5, #4]
  40a312:	50eb      	str	r3, [r5, r3]
  40a314:	e7b3      	b.n	40a27e <_free_r+0x96>
  40a316:	f043 0201 	orr.w	r2, r3, #1
  40a31a:	606a      	str	r2, [r5, #4]
  40a31c:	50eb      	str	r3, [r5, r3]
  40a31e:	e7ae      	b.n	40a27e <_free_r+0x96>
  40a320:	2a14      	cmp	r2, #20
  40a322:	d815      	bhi.n	40a350 <_free_r+0x168>
  40a324:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  40a328:	0060      	lsls	r0, r4, #1
  40a32a:	e7b5      	b.n	40a298 <_free_r+0xb0>
  40a32c:	10a4      	asrs	r4, r4, #2
  40a32e:	2701      	movs	r7, #1
  40a330:	6848      	ldr	r0, [r1, #4]
  40a332:	4613      	mov	r3, r2
  40a334:	fa07 f404 	lsl.w	r4, r7, r4
  40a338:	4320      	orrs	r0, r4
  40a33a:	6048      	str	r0, [r1, #4]
  40a33c:	e7bb      	b.n	40a2b6 <_free_r+0xce>
  40a33e:	f043 0201 	orr.w	r2, r3, #1
  40a342:	614d      	str	r5, [r1, #20]
  40a344:	610d      	str	r5, [r1, #16]
  40a346:	60e8      	str	r0, [r5, #12]
  40a348:	60a8      	str	r0, [r5, #8]
  40a34a:	606a      	str	r2, [r5, #4]
  40a34c:	50eb      	str	r3, [r5, r3]
  40a34e:	e796      	b.n	40a27e <_free_r+0x96>
  40a350:	2a54      	cmp	r2, #84	; 0x54
  40a352:	d804      	bhi.n	40a35e <_free_r+0x176>
  40a354:	0b1a      	lsrs	r2, r3, #12
  40a356:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40a35a:	0060      	lsls	r0, r4, #1
  40a35c:	e79c      	b.n	40a298 <_free_r+0xb0>
  40a35e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a362:	d804      	bhi.n	40a36e <_free_r+0x186>
  40a364:	0bda      	lsrs	r2, r3, #15
  40a366:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40a36a:	0060      	lsls	r0, r4, #1
  40a36c:	e794      	b.n	40a298 <_free_r+0xb0>
  40a36e:	f240 5054 	movw	r0, #1364	; 0x554
  40a372:	4282      	cmp	r2, r0
  40a374:	d804      	bhi.n	40a380 <_free_r+0x198>
  40a376:	0c9a      	lsrs	r2, r3, #18
  40a378:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  40a37c:	0060      	lsls	r0, r4, #1
  40a37e:	e78b      	b.n	40a298 <_free_r+0xb0>
  40a380:	20fc      	movs	r0, #252	; 0xfc
  40a382:	247e      	movs	r4, #126	; 0x7e
  40a384:	e788      	b.n	40a298 <_free_r+0xb0>
  40a386:	bf00      	nop
  40a388:	204004fc 	.word	0x204004fc
  40a38c:	20400504 	.word	0x20400504
  40a390:	20400904 	.word	0x20400904
  40a394:	204009dc 	.word	0x204009dc

0040a398 <__sfvwrite_r>:
  40a398:	6893      	ldr	r3, [r2, #8]
  40a39a:	2b00      	cmp	r3, #0
  40a39c:	d07a      	beq.n	40a494 <__sfvwrite_r+0xfc>
  40a39e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a3a2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40a3a6:	b083      	sub	sp, #12
  40a3a8:	460c      	mov	r4, r1
  40a3aa:	4681      	mov	r9, r0
  40a3ac:	f01e 0f08 	tst.w	lr, #8
  40a3b0:	4616      	mov	r6, r2
  40a3b2:	d026      	beq.n	40a402 <__sfvwrite_r+0x6a>
  40a3b4:	690b      	ldr	r3, [r1, #16]
  40a3b6:	b323      	cbz	r3, 40a402 <__sfvwrite_r+0x6a>
  40a3b8:	f00e 0802 	and.w	r8, lr, #2
  40a3bc:	6835      	ldr	r5, [r6, #0]
  40a3be:	fa1f f088 	uxth.w	r0, r8
  40a3c2:	b370      	cbz	r0, 40a422 <__sfvwrite_r+0x8a>
  40a3c4:	f04f 0a00 	mov.w	sl, #0
  40a3c8:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 40a6b8 <__sfvwrite_r+0x320>
  40a3cc:	46d0      	mov	r8, sl
  40a3ce:	45d8      	cmp	r8, fp
  40a3d0:	4643      	mov	r3, r8
  40a3d2:	4652      	mov	r2, sl
  40a3d4:	4648      	mov	r0, r9
  40a3d6:	bf28      	it	cs
  40a3d8:	465b      	movcs	r3, fp
  40a3da:	f1b8 0f00 	cmp.w	r8, #0
  40a3de:	d053      	beq.n	40a488 <__sfvwrite_r+0xf0>
  40a3e0:	69e1      	ldr	r1, [r4, #28]
  40a3e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a3e4:	47b8      	blx	r7
  40a3e6:	2800      	cmp	r0, #0
  40a3e8:	dd73      	ble.n	40a4d2 <__sfvwrite_r+0x13a>
  40a3ea:	68b3      	ldr	r3, [r6, #8]
  40a3ec:	4482      	add	sl, r0
  40a3ee:	ebc0 0808 	rsb	r8, r0, r8
  40a3f2:	1a18      	subs	r0, r3, r0
  40a3f4:	60b0      	str	r0, [r6, #8]
  40a3f6:	2800      	cmp	r0, #0
  40a3f8:	d1e9      	bne.n	40a3ce <__sfvwrite_r+0x36>
  40a3fa:	2000      	movs	r0, #0
  40a3fc:	b003      	add	sp, #12
  40a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a402:	4648      	mov	r0, r9
  40a404:	4621      	mov	r1, r4
  40a406:	f7fe fcbd 	bl	408d84 <__swsetup_r>
  40a40a:	2800      	cmp	r0, #0
  40a40c:	f040 814c 	bne.w	40a6a8 <__sfvwrite_r+0x310>
  40a410:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40a414:	6835      	ldr	r5, [r6, #0]
  40a416:	f00e 0802 	and.w	r8, lr, #2
  40a41a:	fa1f f088 	uxth.w	r0, r8
  40a41e:	2800      	cmp	r0, #0
  40a420:	d1d0      	bne.n	40a3c4 <__sfvwrite_r+0x2c>
  40a422:	f01e 0b01 	ands.w	fp, lr, #1
  40a426:	d15d      	bne.n	40a4e4 <__sfvwrite_r+0x14c>
  40a428:	46d8      	mov	r8, fp
  40a42a:	f1b8 0f00 	cmp.w	r8, #0
  40a42e:	d025      	beq.n	40a47c <__sfvwrite_r+0xe4>
  40a430:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40a434:	68a7      	ldr	r7, [r4, #8]
  40a436:	d02f      	beq.n	40a498 <__sfvwrite_r+0x100>
  40a438:	45b8      	cmp	r8, r7
  40a43a:	46ba      	mov	sl, r7
  40a43c:	f0c0 80a8 	bcc.w	40a590 <__sfvwrite_r+0x1f8>
  40a440:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40a444:	f040 80b5 	bne.w	40a5b2 <__sfvwrite_r+0x21a>
  40a448:	6820      	ldr	r0, [r4, #0]
  40a44a:	4659      	mov	r1, fp
  40a44c:	4652      	mov	r2, sl
  40a44e:	f000 fd69 	bl	40af24 <memmove>
  40a452:	68a2      	ldr	r2, [r4, #8]
  40a454:	6821      	ldr	r1, [r4, #0]
  40a456:	4640      	mov	r0, r8
  40a458:	1bd7      	subs	r7, r2, r7
  40a45a:	eb01 030a 	add.w	r3, r1, sl
  40a45e:	60a7      	str	r7, [r4, #8]
  40a460:	6023      	str	r3, [r4, #0]
  40a462:	68b3      	ldr	r3, [r6, #8]
  40a464:	4483      	add	fp, r0
  40a466:	ebc0 0808 	rsb	r8, r0, r8
  40a46a:	1a18      	subs	r0, r3, r0
  40a46c:	60b0      	str	r0, [r6, #8]
  40a46e:	2800      	cmp	r0, #0
  40a470:	d0c3      	beq.n	40a3fa <__sfvwrite_r+0x62>
  40a472:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40a476:	f1b8 0f00 	cmp.w	r8, #0
  40a47a:	d1d9      	bne.n	40a430 <__sfvwrite_r+0x98>
  40a47c:	f8d5 b000 	ldr.w	fp, [r5]
  40a480:	3508      	adds	r5, #8
  40a482:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40a486:	e7d0      	b.n	40a42a <__sfvwrite_r+0x92>
  40a488:	f8d5 a000 	ldr.w	sl, [r5]
  40a48c:	3508      	adds	r5, #8
  40a48e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40a492:	e79c      	b.n	40a3ce <__sfvwrite_r+0x36>
  40a494:	2000      	movs	r0, #0
  40a496:	4770      	bx	lr
  40a498:	6820      	ldr	r0, [r4, #0]
  40a49a:	6923      	ldr	r3, [r4, #16]
  40a49c:	4298      	cmp	r0, r3
  40a49e:	d803      	bhi.n	40a4a8 <__sfvwrite_r+0x110>
  40a4a0:	6963      	ldr	r3, [r4, #20]
  40a4a2:	4598      	cmp	r8, r3
  40a4a4:	f080 80bf 	bcs.w	40a626 <__sfvwrite_r+0x28e>
  40a4a8:	4547      	cmp	r7, r8
  40a4aa:	4659      	mov	r1, fp
  40a4ac:	bf28      	it	cs
  40a4ae:	4647      	movcs	r7, r8
  40a4b0:	463a      	mov	r2, r7
  40a4b2:	f000 fd37 	bl	40af24 <memmove>
  40a4b6:	68a3      	ldr	r3, [r4, #8]
  40a4b8:	6822      	ldr	r2, [r4, #0]
  40a4ba:	1bdb      	subs	r3, r3, r7
  40a4bc:	443a      	add	r2, r7
  40a4be:	60a3      	str	r3, [r4, #8]
  40a4c0:	6022      	str	r2, [r4, #0]
  40a4c2:	2b00      	cmp	r3, #0
  40a4c4:	d149      	bne.n	40a55a <__sfvwrite_r+0x1c2>
  40a4c6:	4648      	mov	r0, r9
  40a4c8:	4621      	mov	r1, r4
  40a4ca:	f7ff fd85 	bl	409fd8 <_fflush_r>
  40a4ce:	2800      	cmp	r0, #0
  40a4d0:	d043      	beq.n	40a55a <__sfvwrite_r+0x1c2>
  40a4d2:	89a3      	ldrh	r3, [r4, #12]
  40a4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a4d8:	f04f 30ff 	mov.w	r0, #4294967295
  40a4dc:	81a3      	strh	r3, [r4, #12]
  40a4de:	b003      	add	sp, #12
  40a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4e4:	4680      	mov	r8, r0
  40a4e6:	4683      	mov	fp, r0
  40a4e8:	4682      	mov	sl, r0
  40a4ea:	9000      	str	r0, [sp, #0]
  40a4ec:	f1ba 0f00 	cmp.w	sl, #0
  40a4f0:	d02b      	beq.n	40a54a <__sfvwrite_r+0x1b2>
  40a4f2:	9b00      	ldr	r3, [sp, #0]
  40a4f4:	2b00      	cmp	r3, #0
  40a4f6:	d04f      	beq.n	40a598 <__sfvwrite_r+0x200>
  40a4f8:	45d0      	cmp	r8, sl
  40a4fa:	6962      	ldr	r2, [r4, #20]
  40a4fc:	68a1      	ldr	r1, [r4, #8]
  40a4fe:	4643      	mov	r3, r8
  40a500:	bf28      	it	cs
  40a502:	4653      	movcs	r3, sl
  40a504:	6820      	ldr	r0, [r4, #0]
  40a506:	eb02 0c01 	add.w	ip, r2, r1
  40a50a:	461f      	mov	r7, r3
  40a50c:	4563      	cmp	r3, ip
  40a50e:	dd03      	ble.n	40a518 <__sfvwrite_r+0x180>
  40a510:	6921      	ldr	r1, [r4, #16]
  40a512:	4288      	cmp	r0, r1
  40a514:	f200 8099 	bhi.w	40a64a <__sfvwrite_r+0x2b2>
  40a518:	4293      	cmp	r3, r2
  40a51a:	db20      	blt.n	40a55e <__sfvwrite_r+0x1c6>
  40a51c:	4613      	mov	r3, r2
  40a51e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a520:	4648      	mov	r0, r9
  40a522:	69e1      	ldr	r1, [r4, #28]
  40a524:	465a      	mov	r2, fp
  40a526:	47b8      	blx	r7
  40a528:	1e07      	subs	r7, r0, #0
  40a52a:	ddd2      	ble.n	40a4d2 <__sfvwrite_r+0x13a>
  40a52c:	ebb8 0807 	subs.w	r8, r8, r7
  40a530:	d025      	beq.n	40a57e <__sfvwrite_r+0x1e6>
  40a532:	68b3      	ldr	r3, [r6, #8]
  40a534:	44bb      	add	fp, r7
  40a536:	ebc7 0a0a 	rsb	sl, r7, sl
  40a53a:	1bdf      	subs	r7, r3, r7
  40a53c:	60b7      	str	r7, [r6, #8]
  40a53e:	2f00      	cmp	r7, #0
  40a540:	f43f af5b 	beq.w	40a3fa <__sfvwrite_r+0x62>
  40a544:	f1ba 0f00 	cmp.w	sl, #0
  40a548:	d1d3      	bne.n	40a4f2 <__sfvwrite_r+0x15a>
  40a54a:	2300      	movs	r3, #0
  40a54c:	f8d5 b000 	ldr.w	fp, [r5]
  40a550:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40a554:	3508      	adds	r5, #8
  40a556:	9300      	str	r3, [sp, #0]
  40a558:	e7c8      	b.n	40a4ec <__sfvwrite_r+0x154>
  40a55a:	4638      	mov	r0, r7
  40a55c:	e781      	b.n	40a462 <__sfvwrite_r+0xca>
  40a55e:	461a      	mov	r2, r3
  40a560:	4659      	mov	r1, fp
  40a562:	9301      	str	r3, [sp, #4]
  40a564:	f000 fcde 	bl	40af24 <memmove>
  40a568:	68a2      	ldr	r2, [r4, #8]
  40a56a:	ebb8 0807 	subs.w	r8, r8, r7
  40a56e:	6821      	ldr	r1, [r4, #0]
  40a570:	9b01      	ldr	r3, [sp, #4]
  40a572:	eba2 0203 	sub.w	r2, r2, r3
  40a576:	440b      	add	r3, r1
  40a578:	60a2      	str	r2, [r4, #8]
  40a57a:	6023      	str	r3, [r4, #0]
  40a57c:	d1d9      	bne.n	40a532 <__sfvwrite_r+0x19a>
  40a57e:	4648      	mov	r0, r9
  40a580:	4621      	mov	r1, r4
  40a582:	f7ff fd29 	bl	409fd8 <_fflush_r>
  40a586:	2800      	cmp	r0, #0
  40a588:	d1a3      	bne.n	40a4d2 <__sfvwrite_r+0x13a>
  40a58a:	f8cd 8000 	str.w	r8, [sp]
  40a58e:	e7d0      	b.n	40a532 <__sfvwrite_r+0x19a>
  40a590:	4647      	mov	r7, r8
  40a592:	6820      	ldr	r0, [r4, #0]
  40a594:	46c2      	mov	sl, r8
  40a596:	e758      	b.n	40a44a <__sfvwrite_r+0xb2>
  40a598:	4658      	mov	r0, fp
  40a59a:	210a      	movs	r1, #10
  40a59c:	4652      	mov	r2, sl
  40a59e:	f000 fbdf 	bl	40ad60 <memchr>
  40a5a2:	2800      	cmp	r0, #0
  40a5a4:	d07b      	beq.n	40a69e <__sfvwrite_r+0x306>
  40a5a6:	3001      	adds	r0, #1
  40a5a8:	2301      	movs	r3, #1
  40a5aa:	ebcb 0800 	rsb	r8, fp, r0
  40a5ae:	9300      	str	r3, [sp, #0]
  40a5b0:	e7a2      	b.n	40a4f8 <__sfvwrite_r+0x160>
  40a5b2:	6963      	ldr	r3, [r4, #20]
  40a5b4:	6921      	ldr	r1, [r4, #16]
  40a5b6:	6827      	ldr	r7, [r4, #0]
  40a5b8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  40a5bc:	1a7f      	subs	r7, r7, r1
  40a5be:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40a5c2:	1c7b      	adds	r3, r7, #1
  40a5c4:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40a5c8:	4443      	add	r3, r8
  40a5ca:	4662      	mov	r2, ip
  40a5cc:	459c      	cmp	ip, r3
  40a5ce:	d201      	bcs.n	40a5d4 <__sfvwrite_r+0x23c>
  40a5d0:	469c      	mov	ip, r3
  40a5d2:	461a      	mov	r2, r3
  40a5d4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40a5d8:	f8cd c000 	str.w	ip, [sp]
  40a5dc:	d04b      	beq.n	40a676 <__sfvwrite_r+0x2de>
  40a5de:	4611      	mov	r1, r2
  40a5e0:	4648      	mov	r0, r9
  40a5e2:	f000 f911 	bl	40a808 <_malloc_r>
  40a5e6:	f8dd c000 	ldr.w	ip, [sp]
  40a5ea:	4682      	mov	sl, r0
  40a5ec:	2800      	cmp	r0, #0
  40a5ee:	d05e      	beq.n	40a6ae <__sfvwrite_r+0x316>
  40a5f0:	463a      	mov	r2, r7
  40a5f2:	6921      	ldr	r1, [r4, #16]
  40a5f4:	f8cd c000 	str.w	ip, [sp]
  40a5f8:	f000 fbfa 	bl	40adf0 <memcpy>
  40a5fc:	89a2      	ldrh	r2, [r4, #12]
  40a5fe:	f8dd c000 	ldr.w	ip, [sp]
  40a602:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a60a:	81a2      	strh	r2, [r4, #12]
  40a60c:	eb0a 0007 	add.w	r0, sl, r7
  40a610:	ebc7 020c 	rsb	r2, r7, ip
  40a614:	f8c4 a010 	str.w	sl, [r4, #16]
  40a618:	4647      	mov	r7, r8
  40a61a:	6020      	str	r0, [r4, #0]
  40a61c:	46c2      	mov	sl, r8
  40a61e:	60a2      	str	r2, [r4, #8]
  40a620:	f8c4 c014 	str.w	ip, [r4, #20]
  40a624:	e711      	b.n	40a44a <__sfvwrite_r+0xb2>
  40a626:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40a62a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a62c:	4648      	mov	r0, r9
  40a62e:	69e1      	ldr	r1, [r4, #28]
  40a630:	45c6      	cmp	lr, r8
  40a632:	465a      	mov	r2, fp
  40a634:	bf28      	it	cs
  40a636:	46c6      	movcs	lr, r8
  40a638:	fb9e fef3 	sdiv	lr, lr, r3
  40a63c:	fb0e f303 	mul.w	r3, lr, r3
  40a640:	47b8      	blx	r7
  40a642:	2800      	cmp	r0, #0
  40a644:	f73f af0d 	bgt.w	40a462 <__sfvwrite_r+0xca>
  40a648:	e743      	b.n	40a4d2 <__sfvwrite_r+0x13a>
  40a64a:	4662      	mov	r2, ip
  40a64c:	4659      	mov	r1, fp
  40a64e:	f8cd c004 	str.w	ip, [sp, #4]
  40a652:	f000 fc67 	bl	40af24 <memmove>
  40a656:	6823      	ldr	r3, [r4, #0]
  40a658:	4648      	mov	r0, r9
  40a65a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a65e:	4621      	mov	r1, r4
  40a660:	4463      	add	r3, ip
  40a662:	6023      	str	r3, [r4, #0]
  40a664:	f7ff fcb8 	bl	409fd8 <_fflush_r>
  40a668:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a66c:	2800      	cmp	r0, #0
  40a66e:	f47f af30 	bne.w	40a4d2 <__sfvwrite_r+0x13a>
  40a672:	4667      	mov	r7, ip
  40a674:	e75a      	b.n	40a52c <__sfvwrite_r+0x194>
  40a676:	4648      	mov	r0, r9
  40a678:	f000 ffc6 	bl	40b608 <_realloc_r>
  40a67c:	f8dd c000 	ldr.w	ip, [sp]
  40a680:	4682      	mov	sl, r0
  40a682:	2800      	cmp	r0, #0
  40a684:	d1c2      	bne.n	40a60c <__sfvwrite_r+0x274>
  40a686:	4648      	mov	r0, r9
  40a688:	6921      	ldr	r1, [r4, #16]
  40a68a:	f7ff fdad 	bl	40a1e8 <_free_r>
  40a68e:	89a3      	ldrh	r3, [r4, #12]
  40a690:	220c      	movs	r2, #12
  40a692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a696:	f8c9 2000 	str.w	r2, [r9]
  40a69a:	b29b      	uxth	r3, r3
  40a69c:	e71a      	b.n	40a4d4 <__sfvwrite_r+0x13c>
  40a69e:	2301      	movs	r3, #1
  40a6a0:	f10a 0801 	add.w	r8, sl, #1
  40a6a4:	9300      	str	r3, [sp, #0]
  40a6a6:	e727      	b.n	40a4f8 <__sfvwrite_r+0x160>
  40a6a8:	f04f 30ff 	mov.w	r0, #4294967295
  40a6ac:	e6a6      	b.n	40a3fc <__sfvwrite_r+0x64>
  40a6ae:	220c      	movs	r2, #12
  40a6b0:	89a3      	ldrh	r3, [r4, #12]
  40a6b2:	f8c9 2000 	str.w	r2, [r9]
  40a6b6:	e70d      	b.n	40a4d4 <__sfvwrite_r+0x13c>
  40a6b8:	7ffffc00 	.word	0x7ffffc00

0040a6bc <_fwalk_reent>:
  40a6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a6c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a6c4:	d01e      	beq.n	40a704 <_fwalk_reent+0x48>
  40a6c6:	4688      	mov	r8, r1
  40a6c8:	4606      	mov	r6, r0
  40a6ca:	f04f 0900 	mov.w	r9, #0
  40a6ce:	687d      	ldr	r5, [r7, #4]
  40a6d0:	68bc      	ldr	r4, [r7, #8]
  40a6d2:	3d01      	subs	r5, #1
  40a6d4:	d410      	bmi.n	40a6f8 <_fwalk_reent+0x3c>
  40a6d6:	89a3      	ldrh	r3, [r4, #12]
  40a6d8:	3d01      	subs	r5, #1
  40a6da:	2b01      	cmp	r3, #1
  40a6dc:	d908      	bls.n	40a6f0 <_fwalk_reent+0x34>
  40a6de:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a6e2:	4621      	mov	r1, r4
  40a6e4:	4630      	mov	r0, r6
  40a6e6:	3301      	adds	r3, #1
  40a6e8:	d002      	beq.n	40a6f0 <_fwalk_reent+0x34>
  40a6ea:	47c0      	blx	r8
  40a6ec:	ea49 0900 	orr.w	r9, r9, r0
  40a6f0:	1c6b      	adds	r3, r5, #1
  40a6f2:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a6f6:	d1ee      	bne.n	40a6d6 <_fwalk_reent+0x1a>
  40a6f8:	683f      	ldr	r7, [r7, #0]
  40a6fa:	2f00      	cmp	r7, #0
  40a6fc:	d1e7      	bne.n	40a6ce <_fwalk_reent+0x12>
  40a6fe:	4648      	mov	r0, r9
  40a700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a704:	46b9      	mov	r9, r7
  40a706:	4648      	mov	r0, r9
  40a708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a70c <_localeconv_r>:
  40a70c:	4800      	ldr	r0, [pc, #0]	; (40a710 <_localeconv_r+0x4>)
  40a70e:	4770      	bx	lr
  40a710:	204004c4 	.word	0x204004c4

0040a714 <__smakebuf_r>:
  40a714:	898b      	ldrh	r3, [r1, #12]
  40a716:	b29a      	uxth	r2, r3
  40a718:	f012 0f02 	tst.w	r2, #2
  40a71c:	d13d      	bne.n	40a79a <__smakebuf_r+0x86>
  40a71e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a720:	460c      	mov	r4, r1
  40a722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a726:	b091      	sub	sp, #68	; 0x44
  40a728:	4605      	mov	r5, r0
  40a72a:	2900      	cmp	r1, #0
  40a72c:	db19      	blt.n	40a762 <__smakebuf_r+0x4e>
  40a72e:	aa01      	add	r2, sp, #4
  40a730:	f001 fb4e 	bl	40bdd0 <_fstat_r>
  40a734:	2800      	cmp	r0, #0
  40a736:	db12      	blt.n	40a75e <__smakebuf_r+0x4a>
  40a738:	9b02      	ldr	r3, [sp, #8]
  40a73a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40a73e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40a742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40a746:	fab7 f787 	clz	r7, r7
  40a74a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40a74e:	d02b      	beq.n	40a7a8 <__smakebuf_r+0x94>
  40a750:	89a3      	ldrh	r3, [r4, #12]
  40a752:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a75a:	81a3      	strh	r3, [r4, #12]
  40a75c:	e00c      	b.n	40a778 <__smakebuf_r+0x64>
  40a75e:	89a3      	ldrh	r3, [r4, #12]
  40a760:	b29a      	uxth	r2, r3
  40a762:	f012 0f80 	tst.w	r2, #128	; 0x80
  40a766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a76a:	f04f 0700 	mov.w	r7, #0
  40a76e:	bf0c      	ite	eq
  40a770:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40a774:	2640      	movne	r6, #64	; 0x40
  40a776:	81a3      	strh	r3, [r4, #12]
  40a778:	4628      	mov	r0, r5
  40a77a:	4631      	mov	r1, r6
  40a77c:	f000 f844 	bl	40a808 <_malloc_r>
  40a780:	89a3      	ldrh	r3, [r4, #12]
  40a782:	b340      	cbz	r0, 40a7d6 <__smakebuf_r+0xc2>
  40a784:	4a1a      	ldr	r2, [pc, #104]	; (40a7f0 <__smakebuf_r+0xdc>)
  40a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a78a:	63ea      	str	r2, [r5, #60]	; 0x3c
  40a78c:	81a3      	strh	r3, [r4, #12]
  40a78e:	6020      	str	r0, [r4, #0]
  40a790:	6120      	str	r0, [r4, #16]
  40a792:	6166      	str	r6, [r4, #20]
  40a794:	b99f      	cbnz	r7, 40a7be <__smakebuf_r+0xaa>
  40a796:	b011      	add	sp, #68	; 0x44
  40a798:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a79a:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40a79e:	2201      	movs	r2, #1
  40a7a0:	600b      	str	r3, [r1, #0]
  40a7a2:	610b      	str	r3, [r1, #16]
  40a7a4:	614a      	str	r2, [r1, #20]
  40a7a6:	4770      	bx	lr
  40a7a8:	4b12      	ldr	r3, [pc, #72]	; (40a7f4 <__smakebuf_r+0xe0>)
  40a7aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a7ac:	429a      	cmp	r2, r3
  40a7ae:	d1cf      	bne.n	40a750 <__smakebuf_r+0x3c>
  40a7b0:	89a3      	ldrh	r3, [r4, #12]
  40a7b2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a7b6:	4333      	orrs	r3, r6
  40a7b8:	64e6      	str	r6, [r4, #76]	; 0x4c
  40a7ba:	81a3      	strh	r3, [r4, #12]
  40a7bc:	e7dc      	b.n	40a778 <__smakebuf_r+0x64>
  40a7be:	4628      	mov	r0, r5
  40a7c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a7c4:	f001 fb18 	bl	40bdf8 <_isatty_r>
  40a7c8:	2800      	cmp	r0, #0
  40a7ca:	d0e4      	beq.n	40a796 <__smakebuf_r+0x82>
  40a7cc:	89a3      	ldrh	r3, [r4, #12]
  40a7ce:	f043 0301 	orr.w	r3, r3, #1
  40a7d2:	81a3      	strh	r3, [r4, #12]
  40a7d4:	e7df      	b.n	40a796 <__smakebuf_r+0x82>
  40a7d6:	059a      	lsls	r2, r3, #22
  40a7d8:	d4dd      	bmi.n	40a796 <__smakebuf_r+0x82>
  40a7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a7de:	f043 0302 	orr.w	r3, r3, #2
  40a7e2:	2101      	movs	r1, #1
  40a7e4:	81a3      	strh	r3, [r4, #12]
  40a7e6:	6022      	str	r2, [r4, #0]
  40a7e8:	6122      	str	r2, [r4, #16]
  40a7ea:	6161      	str	r1, [r4, #20]
  40a7ec:	e7d3      	b.n	40a796 <__smakebuf_r+0x82>
  40a7ee:	bf00      	nop
  40a7f0:	0040a005 	.word	0x0040a005
  40a7f4:	0040babd 	.word	0x0040babd

0040a7f8 <malloc>:
  40a7f8:	4b02      	ldr	r3, [pc, #8]	; (40a804 <malloc+0xc>)
  40a7fa:	4601      	mov	r1, r0
  40a7fc:	6818      	ldr	r0, [r3, #0]
  40a7fe:	f000 b803 	b.w	40a808 <_malloc_r>
  40a802:	bf00      	nop
  40a804:	204004c0 	.word	0x204004c0

0040a808 <_malloc_r>:
  40a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a80c:	f101 040b 	add.w	r4, r1, #11
  40a810:	b083      	sub	sp, #12
  40a812:	4605      	mov	r5, r0
  40a814:	2c16      	cmp	r4, #22
  40a816:	d927      	bls.n	40a868 <_malloc_r+0x60>
  40a818:	f034 0407 	bics.w	r4, r4, #7
  40a81c:	d42a      	bmi.n	40a874 <_malloc_r+0x6c>
  40a81e:	42a1      	cmp	r1, r4
  40a820:	d828      	bhi.n	40a874 <_malloc_r+0x6c>
  40a822:	f000 fbe1 	bl	40afe8 <__malloc_lock>
  40a826:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40a82a:	d22b      	bcs.n	40a884 <_malloc_r+0x7c>
  40a82c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40a830:	4ec0      	ldr	r6, [pc, #768]	; (40ab34 <_malloc_r+0x32c>)
  40a832:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40a836:	68d3      	ldr	r3, [r2, #12]
  40a838:	4293      	cmp	r3, r2
  40a83a:	f000 8171 	beq.w	40ab20 <_malloc_r+0x318>
  40a83e:	685a      	ldr	r2, [r3, #4]
  40a840:	f103 0808 	add.w	r8, r3, #8
  40a844:	68d9      	ldr	r1, [r3, #12]
  40a846:	4628      	mov	r0, r5
  40a848:	f022 0203 	bic.w	r2, r2, #3
  40a84c:	689c      	ldr	r4, [r3, #8]
  40a84e:	4413      	add	r3, r2
  40a850:	60e1      	str	r1, [r4, #12]
  40a852:	608c      	str	r4, [r1, #8]
  40a854:	685a      	ldr	r2, [r3, #4]
  40a856:	f042 0201 	orr.w	r2, r2, #1
  40a85a:	605a      	str	r2, [r3, #4]
  40a85c:	f000 fbc6 	bl	40afec <__malloc_unlock>
  40a860:	4640      	mov	r0, r8
  40a862:	b003      	add	sp, #12
  40a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a868:	2910      	cmp	r1, #16
  40a86a:	d803      	bhi.n	40a874 <_malloc_r+0x6c>
  40a86c:	f000 fbbc 	bl	40afe8 <__malloc_lock>
  40a870:	2410      	movs	r4, #16
  40a872:	e7db      	b.n	40a82c <_malloc_r+0x24>
  40a874:	f04f 0800 	mov.w	r8, #0
  40a878:	230c      	movs	r3, #12
  40a87a:	4640      	mov	r0, r8
  40a87c:	602b      	str	r3, [r5, #0]
  40a87e:	b003      	add	sp, #12
  40a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a884:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40a888:	f000 8089 	beq.w	40a99e <_malloc_r+0x196>
  40a88c:	f1bc 0f04 	cmp.w	ip, #4
  40a890:	f200 80c4 	bhi.w	40aa1c <_malloc_r+0x214>
  40a894:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40a898:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40a89c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a8a0:	4ea4      	ldr	r6, [pc, #656]	; (40ab34 <_malloc_r+0x32c>)
  40a8a2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40a8a6:	68c3      	ldr	r3, [r0, #12]
  40a8a8:	4298      	cmp	r0, r3
  40a8aa:	d105      	bne.n	40a8b8 <_malloc_r+0xb0>
  40a8ac:	e00c      	b.n	40a8c8 <_malloc_r+0xc0>
  40a8ae:	2900      	cmp	r1, #0
  40a8b0:	da79      	bge.n	40a9a6 <_malloc_r+0x19e>
  40a8b2:	68db      	ldr	r3, [r3, #12]
  40a8b4:	4298      	cmp	r0, r3
  40a8b6:	d007      	beq.n	40a8c8 <_malloc_r+0xc0>
  40a8b8:	685a      	ldr	r2, [r3, #4]
  40a8ba:	f022 0203 	bic.w	r2, r2, #3
  40a8be:	1b11      	subs	r1, r2, r4
  40a8c0:	290f      	cmp	r1, #15
  40a8c2:	ddf4      	ble.n	40a8ae <_malloc_r+0xa6>
  40a8c4:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a8c8:	f10c 0c01 	add.w	ip, ip, #1
  40a8cc:	4f99      	ldr	r7, [pc, #612]	; (40ab34 <_malloc_r+0x32c>)
  40a8ce:	6933      	ldr	r3, [r6, #16]
  40a8d0:	f107 0e08 	add.w	lr, r7, #8
  40a8d4:	4573      	cmp	r3, lr
  40a8d6:	f000 8119 	beq.w	40ab0c <_malloc_r+0x304>
  40a8da:	685a      	ldr	r2, [r3, #4]
  40a8dc:	f022 0203 	bic.w	r2, r2, #3
  40a8e0:	1b11      	subs	r1, r2, r4
  40a8e2:	290f      	cmp	r1, #15
  40a8e4:	f300 80ca 	bgt.w	40aa7c <_malloc_r+0x274>
  40a8e8:	2900      	cmp	r1, #0
  40a8ea:	f8c7 e014 	str.w	lr, [r7, #20]
  40a8ee:	f8c7 e010 	str.w	lr, [r7, #16]
  40a8f2:	da6a      	bge.n	40a9ca <_malloc_r+0x1c2>
  40a8f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a8f8:	f080 809f 	bcs.w	40aa3a <_malloc_r+0x232>
  40a8fc:	08d2      	lsrs	r2, r2, #3
  40a8fe:	2001      	movs	r0, #1
  40a900:	6879      	ldr	r1, [r7, #4]
  40a902:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40a906:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40a90a:	fa00 f008 	lsl.w	r0, r0, r8
  40a90e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40a912:	4308      	orrs	r0, r1
  40a914:	60da      	str	r2, [r3, #12]
  40a916:	f8c3 8008 	str.w	r8, [r3, #8]
  40a91a:	6078      	str	r0, [r7, #4]
  40a91c:	6093      	str	r3, [r2, #8]
  40a91e:	f8c8 300c 	str.w	r3, [r8, #12]
  40a922:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40a926:	2101      	movs	r1, #1
  40a928:	4099      	lsls	r1, r3
  40a92a:	4281      	cmp	r1, r0
  40a92c:	d85b      	bhi.n	40a9e6 <_malloc_r+0x1de>
  40a92e:	4208      	tst	r0, r1
  40a930:	d106      	bne.n	40a940 <_malloc_r+0x138>
  40a932:	f02c 0c03 	bic.w	ip, ip, #3
  40a936:	0049      	lsls	r1, r1, #1
  40a938:	f10c 0c04 	add.w	ip, ip, #4
  40a93c:	4208      	tst	r0, r1
  40a93e:	d0fa      	beq.n	40a936 <_malloc_r+0x12e>
  40a940:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40a944:	46e1      	mov	r9, ip
  40a946:	4640      	mov	r0, r8
  40a948:	68c7      	ldr	r7, [r0, #12]
  40a94a:	42b8      	cmp	r0, r7
  40a94c:	d107      	bne.n	40a95e <_malloc_r+0x156>
  40a94e:	e0df      	b.n	40ab10 <_malloc_r+0x308>
  40a950:	2a00      	cmp	r2, #0
  40a952:	f280 80f7 	bge.w	40ab44 <_malloc_r+0x33c>
  40a956:	68ff      	ldr	r7, [r7, #12]
  40a958:	42b8      	cmp	r0, r7
  40a95a:	f000 80d9 	beq.w	40ab10 <_malloc_r+0x308>
  40a95e:	687b      	ldr	r3, [r7, #4]
  40a960:	f023 0303 	bic.w	r3, r3, #3
  40a964:	1b1a      	subs	r2, r3, r4
  40a966:	2a0f      	cmp	r2, #15
  40a968:	ddf2      	ble.n	40a950 <_malloc_r+0x148>
  40a96a:	46b8      	mov	r8, r7
  40a96c:	68fb      	ldr	r3, [r7, #12]
  40a96e:	f044 0901 	orr.w	r9, r4, #1
  40a972:	f042 0c01 	orr.w	ip, r2, #1
  40a976:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40a97a:	443c      	add	r4, r7
  40a97c:	f8c7 9004 	str.w	r9, [r7, #4]
  40a980:	4628      	mov	r0, r5
  40a982:	60cb      	str	r3, [r1, #12]
  40a984:	6099      	str	r1, [r3, #8]
  40a986:	6174      	str	r4, [r6, #20]
  40a988:	6134      	str	r4, [r6, #16]
  40a98a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a98e:	f8c4 e008 	str.w	lr, [r4, #8]
  40a992:	f8c4 c004 	str.w	ip, [r4, #4]
  40a996:	50a2      	str	r2, [r4, r2]
  40a998:	f000 fb28 	bl	40afec <__malloc_unlock>
  40a99c:	e760      	b.n	40a860 <_malloc_r+0x58>
  40a99e:	207e      	movs	r0, #126	; 0x7e
  40a9a0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40a9a4:	e77c      	b.n	40a8a0 <_malloc_r+0x98>
  40a9a6:	441a      	add	r2, r3
  40a9a8:	68dc      	ldr	r4, [r3, #12]
  40a9aa:	689e      	ldr	r6, [r3, #8]
  40a9ac:	f103 0808 	add.w	r8, r3, #8
  40a9b0:	6851      	ldr	r1, [r2, #4]
  40a9b2:	4628      	mov	r0, r5
  40a9b4:	60f4      	str	r4, [r6, #12]
  40a9b6:	f041 0301 	orr.w	r3, r1, #1
  40a9ba:	60a6      	str	r6, [r4, #8]
  40a9bc:	6053      	str	r3, [r2, #4]
  40a9be:	f000 fb15 	bl	40afec <__malloc_unlock>
  40a9c2:	4640      	mov	r0, r8
  40a9c4:	b003      	add	sp, #12
  40a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a9ca:	441a      	add	r2, r3
  40a9cc:	f103 0808 	add.w	r8, r3, #8
  40a9d0:	4628      	mov	r0, r5
  40a9d2:	6853      	ldr	r3, [r2, #4]
  40a9d4:	f043 0301 	orr.w	r3, r3, #1
  40a9d8:	6053      	str	r3, [r2, #4]
  40a9da:	f000 fb07 	bl	40afec <__malloc_unlock>
  40a9de:	4640      	mov	r0, r8
  40a9e0:	b003      	add	sp, #12
  40a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a9e6:	68b7      	ldr	r7, [r6, #8]
  40a9e8:	687a      	ldr	r2, [r7, #4]
  40a9ea:	f022 0803 	bic.w	r8, r2, #3
  40a9ee:	ebc4 0208 	rsb	r2, r4, r8
  40a9f2:	2a0f      	cmp	r2, #15
  40a9f4:	dd56      	ble.n	40aaa4 <_malloc_r+0x29c>
  40a9f6:	45a0      	cmp	r8, r4
  40a9f8:	d354      	bcc.n	40aaa4 <_malloc_r+0x29c>
  40a9fa:	f044 0301 	orr.w	r3, r4, #1
  40a9fe:	f042 0201 	orr.w	r2, r2, #1
  40aa02:	443c      	add	r4, r7
  40aa04:	f107 0808 	add.w	r8, r7, #8
  40aa08:	607b      	str	r3, [r7, #4]
  40aa0a:	4628      	mov	r0, r5
  40aa0c:	60b4      	str	r4, [r6, #8]
  40aa0e:	6062      	str	r2, [r4, #4]
  40aa10:	f000 faec 	bl	40afec <__malloc_unlock>
  40aa14:	4640      	mov	r0, r8
  40aa16:	b003      	add	sp, #12
  40aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa1c:	f1bc 0f14 	cmp.w	ip, #20
  40aa20:	f240 809f 	bls.w	40ab62 <_malloc_r+0x35a>
  40aa24:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40aa28:	f200 8127 	bhi.w	40ac7a <_malloc_r+0x472>
  40aa2c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40aa30:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40aa34:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40aa38:	e732      	b.n	40a8a0 <_malloc_r+0x98>
  40aa3a:	0a51      	lsrs	r1, r2, #9
  40aa3c:	2904      	cmp	r1, #4
  40aa3e:	f240 8095 	bls.w	40ab6c <_malloc_r+0x364>
  40aa42:	2914      	cmp	r1, #20
  40aa44:	f200 8142 	bhi.w	40accc <_malloc_r+0x4c4>
  40aa48:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40aa4c:	0078      	lsls	r0, r7, #1
  40aa4e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40aa52:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40ab34 <_malloc_r+0x32c>
  40aa56:	6881      	ldr	r1, [r0, #8]
  40aa58:	4281      	cmp	r1, r0
  40aa5a:	f000 811b 	beq.w	40ac94 <_malloc_r+0x48c>
  40aa5e:	684f      	ldr	r7, [r1, #4]
  40aa60:	f027 0703 	bic.w	r7, r7, #3
  40aa64:	42ba      	cmp	r2, r7
  40aa66:	d202      	bcs.n	40aa6e <_malloc_r+0x266>
  40aa68:	6889      	ldr	r1, [r1, #8]
  40aa6a:	4288      	cmp	r0, r1
  40aa6c:	d1f7      	bne.n	40aa5e <_malloc_r+0x256>
  40aa6e:	68ca      	ldr	r2, [r1, #12]
  40aa70:	6870      	ldr	r0, [r6, #4]
  40aa72:	60da      	str	r2, [r3, #12]
  40aa74:	6099      	str	r1, [r3, #8]
  40aa76:	6093      	str	r3, [r2, #8]
  40aa78:	60cb      	str	r3, [r1, #12]
  40aa7a:	e752      	b.n	40a922 <_malloc_r+0x11a>
  40aa7c:	f044 0601 	orr.w	r6, r4, #1
  40aa80:	f041 0201 	orr.w	r2, r1, #1
  40aa84:	441c      	add	r4, r3
  40aa86:	4628      	mov	r0, r5
  40aa88:	605e      	str	r6, [r3, #4]
  40aa8a:	f103 0808 	add.w	r8, r3, #8
  40aa8e:	617c      	str	r4, [r7, #20]
  40aa90:	613c      	str	r4, [r7, #16]
  40aa92:	f8c4 e00c 	str.w	lr, [r4, #12]
  40aa96:	f8c4 e008 	str.w	lr, [r4, #8]
  40aa9a:	6062      	str	r2, [r4, #4]
  40aa9c:	5061      	str	r1, [r4, r1]
  40aa9e:	f000 faa5 	bl	40afec <__malloc_unlock>
  40aaa2:	e6dd      	b.n	40a860 <_malloc_r+0x58>
  40aaa4:	4a24      	ldr	r2, [pc, #144]	; (40ab38 <_malloc_r+0x330>)
  40aaa6:	4b25      	ldr	r3, [pc, #148]	; (40ab3c <_malloc_r+0x334>)
  40aaa8:	6811      	ldr	r1, [r2, #0]
  40aaaa:	681b      	ldr	r3, [r3, #0]
  40aaac:	3101      	adds	r1, #1
  40aaae:	4423      	add	r3, r4
  40aab0:	f000 8109 	beq.w	40acc6 <_malloc_r+0x4be>
  40aab4:	f241 010f 	movw	r1, #4111	; 0x100f
  40aab8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40ab40 <_malloc_r+0x338>
  40aabc:	4419      	add	r1, r3
  40aabe:	ea01 0909 	and.w	r9, r1, r9
  40aac2:	4628      	mov	r0, r5
  40aac4:	4649      	mov	r1, r9
  40aac6:	9201      	str	r2, [sp, #4]
  40aac8:	f000 ffb8 	bl	40ba3c <_sbrk_r>
  40aacc:	f1b0 3fff 	cmp.w	r0, #4294967295
  40aad0:	4682      	mov	sl, r0
  40aad2:	9a01      	ldr	r2, [sp, #4]
  40aad4:	f000 8101 	beq.w	40acda <_malloc_r+0x4d2>
  40aad8:	1bbb      	subs	r3, r7, r6
  40aada:	eb07 0108 	add.w	r1, r7, r8
  40aade:	4815      	ldr	r0, [pc, #84]	; (40ab34 <_malloc_r+0x32c>)
  40aae0:	bf18      	it	ne
  40aae2:	2301      	movne	r3, #1
  40aae4:	4551      	cmp	r1, sl
  40aae6:	d967      	bls.n	40abb8 <_malloc_r+0x3b0>
  40aae8:	2b00      	cmp	r3, #0
  40aaea:	d065      	beq.n	40abb8 <_malloc_r+0x3b0>
  40aaec:	6887      	ldr	r7, [r0, #8]
  40aaee:	687b      	ldr	r3, [r7, #4]
  40aaf0:	f023 0303 	bic.w	r3, r3, #3
  40aaf4:	1b1a      	subs	r2, r3, r4
  40aaf6:	2a0f      	cmp	r2, #15
  40aaf8:	dd02      	ble.n	40ab00 <_malloc_r+0x2f8>
  40aafa:	429c      	cmp	r4, r3
  40aafc:	f67f af7d 	bls.w	40a9fa <_malloc_r+0x1f2>
  40ab00:	4628      	mov	r0, r5
  40ab02:	f04f 0800 	mov.w	r8, #0
  40ab06:	f000 fa71 	bl	40afec <__malloc_unlock>
  40ab0a:	e6a9      	b.n	40a860 <_malloc_r+0x58>
  40ab0c:	6878      	ldr	r0, [r7, #4]
  40ab0e:	e708      	b.n	40a922 <_malloc_r+0x11a>
  40ab10:	f109 0901 	add.w	r9, r9, #1
  40ab14:	3008      	adds	r0, #8
  40ab16:	f019 0f03 	tst.w	r9, #3
  40ab1a:	f47f af15 	bne.w	40a948 <_malloc_r+0x140>
  40ab1e:	e02f      	b.n	40ab80 <_malloc_r+0x378>
  40ab20:	f103 0208 	add.w	r2, r3, #8
  40ab24:	695b      	ldr	r3, [r3, #20]
  40ab26:	429a      	cmp	r2, r3
  40ab28:	bf08      	it	eq
  40ab2a:	f10c 0c02 	addeq.w	ip, ip, #2
  40ab2e:	f43f aecd 	beq.w	40a8cc <_malloc_r+0xc4>
  40ab32:	e684      	b.n	40a83e <_malloc_r+0x36>
  40ab34:	204004fc 	.word	0x204004fc
  40ab38:	20400908 	.word	0x20400908
  40ab3c:	204009dc 	.word	0x204009dc
  40ab40:	fffff000 	.word	0xfffff000
  40ab44:	18fa      	adds	r2, r7, r3
  40ab46:	46b8      	mov	r8, r7
  40ab48:	68f9      	ldr	r1, [r7, #12]
  40ab4a:	4628      	mov	r0, r5
  40ab4c:	6853      	ldr	r3, [r2, #4]
  40ab4e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40ab52:	f043 0301 	orr.w	r3, r3, #1
  40ab56:	6053      	str	r3, [r2, #4]
  40ab58:	60e1      	str	r1, [r4, #12]
  40ab5a:	608c      	str	r4, [r1, #8]
  40ab5c:	f000 fa46 	bl	40afec <__malloc_unlock>
  40ab60:	e67e      	b.n	40a860 <_malloc_r+0x58>
  40ab62:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40ab66:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40ab6a:	e699      	b.n	40a8a0 <_malloc_r+0x98>
  40ab6c:	0991      	lsrs	r1, r2, #6
  40ab6e:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40ab72:	0078      	lsls	r0, r7, #1
  40ab74:	e76b      	b.n	40aa4e <_malloc_r+0x246>
  40ab76:	f8d8 8000 	ldr.w	r8, [r8]
  40ab7a:	4598      	cmp	r8, r3
  40ab7c:	f040 80e6 	bne.w	40ad4c <_malloc_r+0x544>
  40ab80:	f01c 0f03 	tst.w	ip, #3
  40ab84:	f1a8 0308 	sub.w	r3, r8, #8
  40ab88:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ab8c:	d1f3      	bne.n	40ab76 <_malloc_r+0x36e>
  40ab8e:	6873      	ldr	r3, [r6, #4]
  40ab90:	ea23 0301 	bic.w	r3, r3, r1
  40ab94:	6073      	str	r3, [r6, #4]
  40ab96:	0049      	lsls	r1, r1, #1
  40ab98:	4299      	cmp	r1, r3
  40ab9a:	f63f af24 	bhi.w	40a9e6 <_malloc_r+0x1de>
  40ab9e:	2900      	cmp	r1, #0
  40aba0:	f43f af21 	beq.w	40a9e6 <_malloc_r+0x1de>
  40aba4:	420b      	tst	r3, r1
  40aba6:	46cc      	mov	ip, r9
  40aba8:	f47f aeca 	bne.w	40a940 <_malloc_r+0x138>
  40abac:	0049      	lsls	r1, r1, #1
  40abae:	f10c 0c04 	add.w	ip, ip, #4
  40abb2:	420b      	tst	r3, r1
  40abb4:	d0fa      	beq.n	40abac <_malloc_r+0x3a4>
  40abb6:	e6c3      	b.n	40a940 <_malloc_r+0x138>
  40abb8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40ad58 <_malloc_r+0x550>
  40abbc:	4551      	cmp	r1, sl
  40abbe:	f8db 0000 	ldr.w	r0, [fp]
  40abc2:	4448      	add	r0, r9
  40abc4:	f8cb 0000 	str.w	r0, [fp]
  40abc8:	f000 808c 	beq.w	40ace4 <_malloc_r+0x4dc>
  40abcc:	6812      	ldr	r2, [r2, #0]
  40abce:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40ad5c <_malloc_r+0x554>
  40abd2:	3201      	adds	r2, #1
  40abd4:	f000 80a3 	beq.w	40ad1e <_malloc_r+0x516>
  40abd8:	ebc1 010a 	rsb	r1, r1, sl
  40abdc:	4408      	add	r0, r1
  40abde:	f8cb 0000 	str.w	r0, [fp]
  40abe2:	f01a 0107 	ands.w	r1, sl, #7
  40abe6:	d052      	beq.n	40ac8e <_malloc_r+0x486>
  40abe8:	f1c1 0008 	rsb	r0, r1, #8
  40abec:	f241 0208 	movw	r2, #4104	; 0x1008
  40abf0:	4482      	add	sl, r0
  40abf2:	1a52      	subs	r2, r2, r1
  40abf4:	eb0a 0109 	add.w	r1, sl, r9
  40abf8:	4628      	mov	r0, r5
  40abfa:	9301      	str	r3, [sp, #4]
  40abfc:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40ac00:	ebc1 0902 	rsb	r9, r1, r2
  40ac04:	4649      	mov	r1, r9
  40ac06:	f000 ff19 	bl	40ba3c <_sbrk_r>
  40ac0a:	1c43      	adds	r3, r0, #1
  40ac0c:	9b01      	ldr	r3, [sp, #4]
  40ac0e:	d07a      	beq.n	40ad06 <_malloc_r+0x4fe>
  40ac10:	ebca 0200 	rsb	r2, sl, r0
  40ac14:	444a      	add	r2, r9
  40ac16:	f042 0201 	orr.w	r2, r2, #1
  40ac1a:	f8db 0000 	ldr.w	r0, [fp]
  40ac1e:	f8c6 a008 	str.w	sl, [r6, #8]
  40ac22:	4448      	add	r0, r9
  40ac24:	f8ca 2004 	str.w	r2, [sl, #4]
  40ac28:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40ad58 <_malloc_r+0x550>
  40ac2c:	f8cb 0000 	str.w	r0, [fp]
  40ac30:	b1a3      	cbz	r3, 40ac5c <_malloc_r+0x454>
  40ac32:	f1b8 0f0f 	cmp.w	r8, #15
  40ac36:	d937      	bls.n	40aca8 <_malloc_r+0x4a0>
  40ac38:	687b      	ldr	r3, [r7, #4]
  40ac3a:	f1a8 020c 	sub.w	r2, r8, #12
  40ac3e:	f04f 0e05 	mov.w	lr, #5
  40ac42:	f022 0207 	bic.w	r2, r2, #7
  40ac46:	f003 0301 	and.w	r3, r3, #1
  40ac4a:	18b9      	adds	r1, r7, r2
  40ac4c:	4313      	orrs	r3, r2
  40ac4e:	2a0f      	cmp	r2, #15
  40ac50:	607b      	str	r3, [r7, #4]
  40ac52:	f8c1 e004 	str.w	lr, [r1, #4]
  40ac56:	f8c1 e008 	str.w	lr, [r1, #8]
  40ac5a:	d858      	bhi.n	40ad0e <_malloc_r+0x506>
  40ac5c:	4b3c      	ldr	r3, [pc, #240]	; (40ad50 <_malloc_r+0x548>)
  40ac5e:	681a      	ldr	r2, [r3, #0]
  40ac60:	4290      	cmp	r0, r2
  40ac62:	d900      	bls.n	40ac66 <_malloc_r+0x45e>
  40ac64:	6018      	str	r0, [r3, #0]
  40ac66:	4b3b      	ldr	r3, [pc, #236]	; (40ad54 <_malloc_r+0x54c>)
  40ac68:	68b7      	ldr	r7, [r6, #8]
  40ac6a:	681a      	ldr	r2, [r3, #0]
  40ac6c:	4290      	cmp	r0, r2
  40ac6e:	d900      	bls.n	40ac72 <_malloc_r+0x46a>
  40ac70:	6018      	str	r0, [r3, #0]
  40ac72:	687b      	ldr	r3, [r7, #4]
  40ac74:	f023 0303 	bic.w	r3, r3, #3
  40ac78:	e73c      	b.n	40aaf4 <_malloc_r+0x2ec>
  40ac7a:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40ac7e:	d817      	bhi.n	40acb0 <_malloc_r+0x4a8>
  40ac80:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40ac84:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40ac88:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40ac8c:	e608      	b.n	40a8a0 <_malloc_r+0x98>
  40ac8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40ac92:	e7af      	b.n	40abf4 <_malloc_r+0x3ec>
  40ac94:	10bf      	asrs	r7, r7, #2
  40ac96:	2001      	movs	r0, #1
  40ac98:	460a      	mov	r2, r1
  40ac9a:	40b8      	lsls	r0, r7
  40ac9c:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40aca0:	4338      	orrs	r0, r7
  40aca2:	f8c9 0004 	str.w	r0, [r9, #4]
  40aca6:	e6e4      	b.n	40aa72 <_malloc_r+0x26a>
  40aca8:	2301      	movs	r3, #1
  40acaa:	f8ca 3004 	str.w	r3, [sl, #4]
  40acae:	e727      	b.n	40ab00 <_malloc_r+0x2f8>
  40acb0:	f240 5354 	movw	r3, #1364	; 0x554
  40acb4:	459c      	cmp	ip, r3
  40acb6:	d822      	bhi.n	40acfe <_malloc_r+0x4f6>
  40acb8:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40acbc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40acc0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40acc4:	e5ec      	b.n	40a8a0 <_malloc_r+0x98>
  40acc6:	f103 0910 	add.w	r9, r3, #16
  40acca:	e6fa      	b.n	40aac2 <_malloc_r+0x2ba>
  40accc:	2954      	cmp	r1, #84	; 0x54
  40acce:	d829      	bhi.n	40ad24 <_malloc_r+0x51c>
  40acd0:	0b11      	lsrs	r1, r2, #12
  40acd2:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40acd6:	0078      	lsls	r0, r7, #1
  40acd8:	e6b9      	b.n	40aa4e <_malloc_r+0x246>
  40acda:	68b7      	ldr	r7, [r6, #8]
  40acdc:	687b      	ldr	r3, [r7, #4]
  40acde:	f023 0303 	bic.w	r3, r3, #3
  40ace2:	e707      	b.n	40aaf4 <_malloc_r+0x2ec>
  40ace4:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40ace8:	f1be 0f00 	cmp.w	lr, #0
  40acec:	f47f af6e 	bne.w	40abcc <_malloc_r+0x3c4>
  40acf0:	eb09 0308 	add.w	r3, r9, r8
  40acf4:	68b2      	ldr	r2, [r6, #8]
  40acf6:	f043 0301 	orr.w	r3, r3, #1
  40acfa:	6053      	str	r3, [r2, #4]
  40acfc:	e7ae      	b.n	40ac5c <_malloc_r+0x454>
  40acfe:	20fc      	movs	r0, #252	; 0xfc
  40ad00:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40ad04:	e5cc      	b.n	40a8a0 <_malloc_r+0x98>
  40ad06:	2201      	movs	r2, #1
  40ad08:	f04f 0900 	mov.w	r9, #0
  40ad0c:	e785      	b.n	40ac1a <_malloc_r+0x412>
  40ad0e:	4628      	mov	r0, r5
  40ad10:	f107 0108 	add.w	r1, r7, #8
  40ad14:	f7ff fa68 	bl	40a1e8 <_free_r>
  40ad18:	f8d9 0000 	ldr.w	r0, [r9]
  40ad1c:	e79e      	b.n	40ac5c <_malloc_r+0x454>
  40ad1e:	f8ce a000 	str.w	sl, [lr]
  40ad22:	e75e      	b.n	40abe2 <_malloc_r+0x3da>
  40ad24:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40ad28:	d804      	bhi.n	40ad34 <_malloc_r+0x52c>
  40ad2a:	0bd1      	lsrs	r1, r2, #15
  40ad2c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40ad30:	0078      	lsls	r0, r7, #1
  40ad32:	e68c      	b.n	40aa4e <_malloc_r+0x246>
  40ad34:	f240 5054 	movw	r0, #1364	; 0x554
  40ad38:	4281      	cmp	r1, r0
  40ad3a:	d804      	bhi.n	40ad46 <_malloc_r+0x53e>
  40ad3c:	0c91      	lsrs	r1, r2, #18
  40ad3e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40ad42:	0078      	lsls	r0, r7, #1
  40ad44:	e683      	b.n	40aa4e <_malloc_r+0x246>
  40ad46:	20fc      	movs	r0, #252	; 0xfc
  40ad48:	277e      	movs	r7, #126	; 0x7e
  40ad4a:	e680      	b.n	40aa4e <_malloc_r+0x246>
  40ad4c:	6873      	ldr	r3, [r6, #4]
  40ad4e:	e722      	b.n	40ab96 <_malloc_r+0x38e>
  40ad50:	204009d8 	.word	0x204009d8
  40ad54:	204009d4 	.word	0x204009d4
  40ad58:	204009e0 	.word	0x204009e0
  40ad5c:	20400908 	.word	0x20400908

0040ad60 <memchr>:
  40ad60:	0783      	lsls	r3, r0, #30
  40ad62:	b2c9      	uxtb	r1, r1
  40ad64:	b470      	push	{r4, r5, r6}
  40ad66:	d03f      	beq.n	40ade8 <memchr+0x88>
  40ad68:	1e54      	subs	r4, r2, #1
  40ad6a:	2a00      	cmp	r2, #0
  40ad6c:	d03e      	beq.n	40adec <memchr+0x8c>
  40ad6e:	7803      	ldrb	r3, [r0, #0]
  40ad70:	428b      	cmp	r3, r1
  40ad72:	bf18      	it	ne
  40ad74:	1c43      	addne	r3, r0, #1
  40ad76:	d105      	bne.n	40ad84 <memchr+0x24>
  40ad78:	e01c      	b.n	40adb4 <memchr+0x54>
  40ad7a:	b1ec      	cbz	r4, 40adb8 <memchr+0x58>
  40ad7c:	7802      	ldrb	r2, [r0, #0]
  40ad7e:	3c01      	subs	r4, #1
  40ad80:	428a      	cmp	r2, r1
  40ad82:	d017      	beq.n	40adb4 <memchr+0x54>
  40ad84:	f013 0f03 	tst.w	r3, #3
  40ad88:	4618      	mov	r0, r3
  40ad8a:	f103 0301 	add.w	r3, r3, #1
  40ad8e:	d1f4      	bne.n	40ad7a <memchr+0x1a>
  40ad90:	2c03      	cmp	r4, #3
  40ad92:	d814      	bhi.n	40adbe <memchr+0x5e>
  40ad94:	b184      	cbz	r4, 40adb8 <memchr+0x58>
  40ad96:	7803      	ldrb	r3, [r0, #0]
  40ad98:	428b      	cmp	r3, r1
  40ad9a:	d00b      	beq.n	40adb4 <memchr+0x54>
  40ad9c:	1905      	adds	r5, r0, r4
  40ad9e:	1c43      	adds	r3, r0, #1
  40ada0:	e002      	b.n	40ada8 <memchr+0x48>
  40ada2:	7802      	ldrb	r2, [r0, #0]
  40ada4:	428a      	cmp	r2, r1
  40ada6:	d005      	beq.n	40adb4 <memchr+0x54>
  40ada8:	42ab      	cmp	r3, r5
  40adaa:	4618      	mov	r0, r3
  40adac:	f103 0301 	add.w	r3, r3, #1
  40adb0:	d1f7      	bne.n	40ada2 <memchr+0x42>
  40adb2:	2000      	movs	r0, #0
  40adb4:	bc70      	pop	{r4, r5, r6}
  40adb6:	4770      	bx	lr
  40adb8:	4620      	mov	r0, r4
  40adba:	bc70      	pop	{r4, r5, r6}
  40adbc:	4770      	bx	lr
  40adbe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40adc2:	4602      	mov	r2, r0
  40adc4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40adc8:	4610      	mov	r0, r2
  40adca:	3204      	adds	r2, #4
  40adcc:	6803      	ldr	r3, [r0, #0]
  40adce:	4073      	eors	r3, r6
  40add0:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40add4:	ea25 0303 	bic.w	r3, r5, r3
  40add8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40addc:	d1da      	bne.n	40ad94 <memchr+0x34>
  40adde:	3c04      	subs	r4, #4
  40ade0:	4610      	mov	r0, r2
  40ade2:	2c03      	cmp	r4, #3
  40ade4:	d8f0      	bhi.n	40adc8 <memchr+0x68>
  40ade6:	e7d5      	b.n	40ad94 <memchr+0x34>
  40ade8:	4614      	mov	r4, r2
  40adea:	e7d1      	b.n	40ad90 <memchr+0x30>
  40adec:	4610      	mov	r0, r2
  40adee:	e7e1      	b.n	40adb4 <memchr+0x54>

0040adf0 <memcpy>:
  40adf0:	4684      	mov	ip, r0
  40adf2:	ea41 0300 	orr.w	r3, r1, r0
  40adf6:	f013 0303 	ands.w	r3, r3, #3
  40adfa:	d16d      	bne.n	40aed8 <memcpy+0xe8>
  40adfc:	3a40      	subs	r2, #64	; 0x40
  40adfe:	d341      	bcc.n	40ae84 <memcpy+0x94>
  40ae00:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae04:	f840 3b04 	str.w	r3, [r0], #4
  40ae08:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae0c:	f840 3b04 	str.w	r3, [r0], #4
  40ae10:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae14:	f840 3b04 	str.w	r3, [r0], #4
  40ae18:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae1c:	f840 3b04 	str.w	r3, [r0], #4
  40ae20:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae24:	f840 3b04 	str.w	r3, [r0], #4
  40ae28:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae2c:	f840 3b04 	str.w	r3, [r0], #4
  40ae30:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae34:	f840 3b04 	str.w	r3, [r0], #4
  40ae38:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae3c:	f840 3b04 	str.w	r3, [r0], #4
  40ae40:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae44:	f840 3b04 	str.w	r3, [r0], #4
  40ae48:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae4c:	f840 3b04 	str.w	r3, [r0], #4
  40ae50:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae54:	f840 3b04 	str.w	r3, [r0], #4
  40ae58:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae5c:	f840 3b04 	str.w	r3, [r0], #4
  40ae60:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae64:	f840 3b04 	str.w	r3, [r0], #4
  40ae68:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae6c:	f840 3b04 	str.w	r3, [r0], #4
  40ae70:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae74:	f840 3b04 	str.w	r3, [r0], #4
  40ae78:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae7c:	f840 3b04 	str.w	r3, [r0], #4
  40ae80:	3a40      	subs	r2, #64	; 0x40
  40ae82:	d2bd      	bcs.n	40ae00 <memcpy+0x10>
  40ae84:	3230      	adds	r2, #48	; 0x30
  40ae86:	d311      	bcc.n	40aeac <memcpy+0xbc>
  40ae88:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae8c:	f840 3b04 	str.w	r3, [r0], #4
  40ae90:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae94:	f840 3b04 	str.w	r3, [r0], #4
  40ae98:	f851 3b04 	ldr.w	r3, [r1], #4
  40ae9c:	f840 3b04 	str.w	r3, [r0], #4
  40aea0:	f851 3b04 	ldr.w	r3, [r1], #4
  40aea4:	f840 3b04 	str.w	r3, [r0], #4
  40aea8:	3a10      	subs	r2, #16
  40aeaa:	d2ed      	bcs.n	40ae88 <memcpy+0x98>
  40aeac:	320c      	adds	r2, #12
  40aeae:	d305      	bcc.n	40aebc <memcpy+0xcc>
  40aeb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40aeb4:	f840 3b04 	str.w	r3, [r0], #4
  40aeb8:	3a04      	subs	r2, #4
  40aeba:	d2f9      	bcs.n	40aeb0 <memcpy+0xc0>
  40aebc:	3204      	adds	r2, #4
  40aebe:	d008      	beq.n	40aed2 <memcpy+0xe2>
  40aec0:	07d2      	lsls	r2, r2, #31
  40aec2:	bf1c      	itt	ne
  40aec4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40aec8:	f800 3b01 	strbne.w	r3, [r0], #1
  40aecc:	d301      	bcc.n	40aed2 <memcpy+0xe2>
  40aece:	880b      	ldrh	r3, [r1, #0]
  40aed0:	8003      	strh	r3, [r0, #0]
  40aed2:	4660      	mov	r0, ip
  40aed4:	4770      	bx	lr
  40aed6:	bf00      	nop
  40aed8:	2a08      	cmp	r2, #8
  40aeda:	d313      	bcc.n	40af04 <memcpy+0x114>
  40aedc:	078b      	lsls	r3, r1, #30
  40aede:	d08d      	beq.n	40adfc <memcpy+0xc>
  40aee0:	f010 0303 	ands.w	r3, r0, #3
  40aee4:	d08a      	beq.n	40adfc <memcpy+0xc>
  40aee6:	f1c3 0304 	rsb	r3, r3, #4
  40aeea:	1ad2      	subs	r2, r2, r3
  40aeec:	07db      	lsls	r3, r3, #31
  40aeee:	bf1c      	itt	ne
  40aef0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40aef4:	f800 3b01 	strbne.w	r3, [r0], #1
  40aef8:	d380      	bcc.n	40adfc <memcpy+0xc>
  40aefa:	f831 3b02 	ldrh.w	r3, [r1], #2
  40aefe:	f820 3b02 	strh.w	r3, [r0], #2
  40af02:	e77b      	b.n	40adfc <memcpy+0xc>
  40af04:	3a04      	subs	r2, #4
  40af06:	d3d9      	bcc.n	40aebc <memcpy+0xcc>
  40af08:	3a01      	subs	r2, #1
  40af0a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40af0e:	f800 3b01 	strb.w	r3, [r0], #1
  40af12:	d2f9      	bcs.n	40af08 <memcpy+0x118>
  40af14:	780b      	ldrb	r3, [r1, #0]
  40af16:	7003      	strb	r3, [r0, #0]
  40af18:	784b      	ldrb	r3, [r1, #1]
  40af1a:	7043      	strb	r3, [r0, #1]
  40af1c:	788b      	ldrb	r3, [r1, #2]
  40af1e:	7083      	strb	r3, [r0, #2]
  40af20:	4660      	mov	r0, ip
  40af22:	4770      	bx	lr

0040af24 <memmove>:
  40af24:	4288      	cmp	r0, r1
  40af26:	b5f0      	push	{r4, r5, r6, r7, lr}
  40af28:	d90d      	bls.n	40af46 <memmove+0x22>
  40af2a:	188b      	adds	r3, r1, r2
  40af2c:	4298      	cmp	r0, r3
  40af2e:	d20a      	bcs.n	40af46 <memmove+0x22>
  40af30:	1881      	adds	r1, r0, r2
  40af32:	2a00      	cmp	r2, #0
  40af34:	d053      	beq.n	40afde <memmove+0xba>
  40af36:	1a9a      	subs	r2, r3, r2
  40af38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40af3c:	4293      	cmp	r3, r2
  40af3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40af42:	d1f9      	bne.n	40af38 <memmove+0x14>
  40af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af46:	2a0f      	cmp	r2, #15
  40af48:	d947      	bls.n	40afda <memmove+0xb6>
  40af4a:	ea40 0301 	orr.w	r3, r0, r1
  40af4e:	079b      	lsls	r3, r3, #30
  40af50:	d146      	bne.n	40afe0 <memmove+0xbc>
  40af52:	f100 0410 	add.w	r4, r0, #16
  40af56:	f101 0310 	add.w	r3, r1, #16
  40af5a:	4615      	mov	r5, r2
  40af5c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40af60:	3d10      	subs	r5, #16
  40af62:	3310      	adds	r3, #16
  40af64:	3410      	adds	r4, #16
  40af66:	f844 6c20 	str.w	r6, [r4, #-32]
  40af6a:	2d0f      	cmp	r5, #15
  40af6c:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  40af70:	f844 6c1c 	str.w	r6, [r4, #-28]
  40af74:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40af78:	f844 6c18 	str.w	r6, [r4, #-24]
  40af7c:	f853 6c14 	ldr.w	r6, [r3, #-20]
  40af80:	f844 6c14 	str.w	r6, [r4, #-20]
  40af84:	d8ea      	bhi.n	40af5c <memmove+0x38>
  40af86:	f1a2 0310 	sub.w	r3, r2, #16
  40af8a:	f002 0e0f 	and.w	lr, r2, #15
  40af8e:	f023 030f 	bic.w	r3, r3, #15
  40af92:	f1be 0f03 	cmp.w	lr, #3
  40af96:	f103 0310 	add.w	r3, r3, #16
  40af9a:	4419      	add	r1, r3
  40af9c:	4403      	add	r3, r0
  40af9e:	d921      	bls.n	40afe4 <memmove+0xc0>
  40afa0:	1f1e      	subs	r6, r3, #4
  40afa2:	460d      	mov	r5, r1
  40afa4:	4674      	mov	r4, lr
  40afa6:	3c04      	subs	r4, #4
  40afa8:	f855 7b04 	ldr.w	r7, [r5], #4
  40afac:	2c03      	cmp	r4, #3
  40afae:	f846 7f04 	str.w	r7, [r6, #4]!
  40afb2:	d8f8      	bhi.n	40afa6 <memmove+0x82>
  40afb4:	f1ae 0404 	sub.w	r4, lr, #4
  40afb8:	f002 0203 	and.w	r2, r2, #3
  40afbc:	f024 0403 	bic.w	r4, r4, #3
  40afc0:	3404      	adds	r4, #4
  40afc2:	4423      	add	r3, r4
  40afc4:	4421      	add	r1, r4
  40afc6:	b152      	cbz	r2, 40afde <memmove+0xba>
  40afc8:	3b01      	subs	r3, #1
  40afca:	440a      	add	r2, r1
  40afcc:	f811 4b01 	ldrb.w	r4, [r1], #1
  40afd0:	4291      	cmp	r1, r2
  40afd2:	f803 4f01 	strb.w	r4, [r3, #1]!
  40afd6:	d1f9      	bne.n	40afcc <memmove+0xa8>
  40afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40afda:	4603      	mov	r3, r0
  40afdc:	e7f3      	b.n	40afc6 <memmove+0xa2>
  40afde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40afe0:	4603      	mov	r3, r0
  40afe2:	e7f1      	b.n	40afc8 <memmove+0xa4>
  40afe4:	4672      	mov	r2, lr
  40afe6:	e7ee      	b.n	40afc6 <memmove+0xa2>

0040afe8 <__malloc_lock>:
  40afe8:	4770      	bx	lr
  40afea:	bf00      	nop

0040afec <__malloc_unlock>:
  40afec:	4770      	bx	lr
  40afee:	bf00      	nop

0040aff0 <_Balloc>:
  40aff0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40aff2:	b538      	push	{r3, r4, r5, lr}
  40aff4:	4605      	mov	r5, r0
  40aff6:	460c      	mov	r4, r1
  40aff8:	b152      	cbz	r2, 40b010 <_Balloc+0x20>
  40affa:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40affe:	b18b      	cbz	r3, 40b024 <_Balloc+0x34>
  40b000:	6819      	ldr	r1, [r3, #0]
  40b002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40b006:	2200      	movs	r2, #0
  40b008:	4618      	mov	r0, r3
  40b00a:	611a      	str	r2, [r3, #16]
  40b00c:	60da      	str	r2, [r3, #12]
  40b00e:	bd38      	pop	{r3, r4, r5, pc}
  40b010:	2221      	movs	r2, #33	; 0x21
  40b012:	2104      	movs	r1, #4
  40b014:	f000 fe58 	bl	40bcc8 <_calloc_r>
  40b018:	64e8      	str	r0, [r5, #76]	; 0x4c
  40b01a:	4602      	mov	r2, r0
  40b01c:	2800      	cmp	r0, #0
  40b01e:	d1ec      	bne.n	40affa <_Balloc+0xa>
  40b020:	2000      	movs	r0, #0
  40b022:	bd38      	pop	{r3, r4, r5, pc}
  40b024:	2101      	movs	r1, #1
  40b026:	4628      	mov	r0, r5
  40b028:	fa01 f504 	lsl.w	r5, r1, r4
  40b02c:	1d6a      	adds	r2, r5, #5
  40b02e:	0092      	lsls	r2, r2, #2
  40b030:	f000 fe4a 	bl	40bcc8 <_calloc_r>
  40b034:	4603      	mov	r3, r0
  40b036:	2800      	cmp	r0, #0
  40b038:	d0f2      	beq.n	40b020 <_Balloc+0x30>
  40b03a:	6044      	str	r4, [r0, #4]
  40b03c:	6085      	str	r5, [r0, #8]
  40b03e:	e7e2      	b.n	40b006 <_Balloc+0x16>

0040b040 <_Bfree>:
  40b040:	b131      	cbz	r1, 40b050 <_Bfree+0x10>
  40b042:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b044:	684a      	ldr	r2, [r1, #4]
  40b046:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40b04a:	6008      	str	r0, [r1, #0]
  40b04c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40b050:	4770      	bx	lr
  40b052:	bf00      	nop

0040b054 <__multadd>:
  40b054:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b056:	460c      	mov	r4, r1
  40b058:	b083      	sub	sp, #12
  40b05a:	4605      	mov	r5, r0
  40b05c:	690e      	ldr	r6, [r1, #16]
  40b05e:	f101 0e14 	add.w	lr, r1, #20
  40b062:	2700      	movs	r7, #0
  40b064:	f8de 1000 	ldr.w	r1, [lr]
  40b068:	3701      	adds	r7, #1
  40b06a:	b288      	uxth	r0, r1
  40b06c:	42be      	cmp	r6, r7
  40b06e:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40b072:	fb02 3300 	mla	r3, r2, r0, r3
  40b076:	fb02 f101 	mul.w	r1, r2, r1
  40b07a:	b298      	uxth	r0, r3
  40b07c:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  40b080:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  40b084:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40b088:	f84e 1b04 	str.w	r1, [lr], #4
  40b08c:	dcea      	bgt.n	40b064 <__multadd+0x10>
  40b08e:	b13b      	cbz	r3, 40b0a0 <__multadd+0x4c>
  40b090:	68a2      	ldr	r2, [r4, #8]
  40b092:	4296      	cmp	r6, r2
  40b094:	da07      	bge.n	40b0a6 <__multadd+0x52>
  40b096:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40b09a:	3601      	adds	r6, #1
  40b09c:	6153      	str	r3, [r2, #20]
  40b09e:	6126      	str	r6, [r4, #16]
  40b0a0:	4620      	mov	r0, r4
  40b0a2:	b003      	add	sp, #12
  40b0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b0a6:	6861      	ldr	r1, [r4, #4]
  40b0a8:	4628      	mov	r0, r5
  40b0aa:	9301      	str	r3, [sp, #4]
  40b0ac:	3101      	adds	r1, #1
  40b0ae:	f7ff ff9f 	bl	40aff0 <_Balloc>
  40b0b2:	6922      	ldr	r2, [r4, #16]
  40b0b4:	f104 010c 	add.w	r1, r4, #12
  40b0b8:	4607      	mov	r7, r0
  40b0ba:	3202      	adds	r2, #2
  40b0bc:	300c      	adds	r0, #12
  40b0be:	0092      	lsls	r2, r2, #2
  40b0c0:	f7ff fe96 	bl	40adf0 <memcpy>
  40b0c4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40b0c6:	6861      	ldr	r1, [r4, #4]
  40b0c8:	9b01      	ldr	r3, [sp, #4]
  40b0ca:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b0ce:	6020      	str	r0, [r4, #0]
  40b0d0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40b0d4:	463c      	mov	r4, r7
  40b0d6:	e7de      	b.n	40b096 <__multadd+0x42>

0040b0d8 <__hi0bits>:
  40b0d8:	4b0f      	ldr	r3, [pc, #60]	; (40b118 <__hi0bits+0x40>)
  40b0da:	4003      	ands	r3, r0
  40b0dc:	b9b3      	cbnz	r3, 40b10c <__hi0bits+0x34>
  40b0de:	0400      	lsls	r0, r0, #16
  40b0e0:	2310      	movs	r3, #16
  40b0e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40b0e6:	d101      	bne.n	40b0ec <__hi0bits+0x14>
  40b0e8:	3308      	adds	r3, #8
  40b0ea:	0200      	lsls	r0, r0, #8
  40b0ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40b0f0:	d101      	bne.n	40b0f6 <__hi0bits+0x1e>
  40b0f2:	3304      	adds	r3, #4
  40b0f4:	0100      	lsls	r0, r0, #4
  40b0f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40b0fa:	d101      	bne.n	40b100 <__hi0bits+0x28>
  40b0fc:	3302      	adds	r3, #2
  40b0fe:	0080      	lsls	r0, r0, #2
  40b100:	2800      	cmp	r0, #0
  40b102:	db07      	blt.n	40b114 <__hi0bits+0x3c>
  40b104:	0042      	lsls	r2, r0, #1
  40b106:	d403      	bmi.n	40b110 <__hi0bits+0x38>
  40b108:	2020      	movs	r0, #32
  40b10a:	4770      	bx	lr
  40b10c:	2300      	movs	r3, #0
  40b10e:	e7e8      	b.n	40b0e2 <__hi0bits+0xa>
  40b110:	1c58      	adds	r0, r3, #1
  40b112:	4770      	bx	lr
  40b114:	4618      	mov	r0, r3
  40b116:	4770      	bx	lr
  40b118:	ffff0000 	.word	0xffff0000

0040b11c <__lo0bits>:
  40b11c:	6803      	ldr	r3, [r0, #0]
  40b11e:	f013 0207 	ands.w	r2, r3, #7
  40b122:	d008      	beq.n	40b136 <__lo0bits+0x1a>
  40b124:	07d9      	lsls	r1, r3, #31
  40b126:	d422      	bmi.n	40b16e <__lo0bits+0x52>
  40b128:	079a      	lsls	r2, r3, #30
  40b12a:	d423      	bmi.n	40b174 <__lo0bits+0x58>
  40b12c:	089b      	lsrs	r3, r3, #2
  40b12e:	2202      	movs	r2, #2
  40b130:	6003      	str	r3, [r0, #0]
  40b132:	4610      	mov	r0, r2
  40b134:	4770      	bx	lr
  40b136:	b299      	uxth	r1, r3
  40b138:	b909      	cbnz	r1, 40b13e <__lo0bits+0x22>
  40b13a:	0c1b      	lsrs	r3, r3, #16
  40b13c:	2210      	movs	r2, #16
  40b13e:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b142:	d101      	bne.n	40b148 <__lo0bits+0x2c>
  40b144:	3208      	adds	r2, #8
  40b146:	0a1b      	lsrs	r3, r3, #8
  40b148:	0719      	lsls	r1, r3, #28
  40b14a:	d101      	bne.n	40b150 <__lo0bits+0x34>
  40b14c:	3204      	adds	r2, #4
  40b14e:	091b      	lsrs	r3, r3, #4
  40b150:	0799      	lsls	r1, r3, #30
  40b152:	d101      	bne.n	40b158 <__lo0bits+0x3c>
  40b154:	3202      	adds	r2, #2
  40b156:	089b      	lsrs	r3, r3, #2
  40b158:	07d9      	lsls	r1, r3, #31
  40b15a:	d405      	bmi.n	40b168 <__lo0bits+0x4c>
  40b15c:	085b      	lsrs	r3, r3, #1
  40b15e:	d102      	bne.n	40b166 <__lo0bits+0x4a>
  40b160:	2220      	movs	r2, #32
  40b162:	4610      	mov	r0, r2
  40b164:	4770      	bx	lr
  40b166:	3201      	adds	r2, #1
  40b168:	6003      	str	r3, [r0, #0]
  40b16a:	4610      	mov	r0, r2
  40b16c:	4770      	bx	lr
  40b16e:	2200      	movs	r2, #0
  40b170:	4610      	mov	r0, r2
  40b172:	4770      	bx	lr
  40b174:	085b      	lsrs	r3, r3, #1
  40b176:	2201      	movs	r2, #1
  40b178:	6003      	str	r3, [r0, #0]
  40b17a:	4610      	mov	r0, r2
  40b17c:	4770      	bx	lr
  40b17e:	bf00      	nop

0040b180 <__i2b>:
  40b180:	b510      	push	{r4, lr}
  40b182:	460c      	mov	r4, r1
  40b184:	2101      	movs	r1, #1
  40b186:	f7ff ff33 	bl	40aff0 <_Balloc>
  40b18a:	2201      	movs	r2, #1
  40b18c:	6144      	str	r4, [r0, #20]
  40b18e:	6102      	str	r2, [r0, #16]
  40b190:	bd10      	pop	{r4, pc}
  40b192:	bf00      	nop

0040b194 <__multiply>:
  40b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b198:	690e      	ldr	r6, [r1, #16]
  40b19a:	b085      	sub	sp, #20
  40b19c:	6915      	ldr	r5, [r2, #16]
  40b19e:	460c      	mov	r4, r1
  40b1a0:	4691      	mov	r9, r2
  40b1a2:	42ae      	cmp	r6, r5
  40b1a4:	f2c0 8094 	blt.w	40b2d0 <__multiply+0x13c>
  40b1a8:	462b      	mov	r3, r5
  40b1aa:	4635      	mov	r5, r6
  40b1ac:	461e      	mov	r6, r3
  40b1ae:	eb05 0806 	add.w	r8, r5, r6
  40b1b2:	68a3      	ldr	r3, [r4, #8]
  40b1b4:	6861      	ldr	r1, [r4, #4]
  40b1b6:	4598      	cmp	r8, r3
  40b1b8:	dd00      	ble.n	40b1bc <__multiply+0x28>
  40b1ba:	3101      	adds	r1, #1
  40b1bc:	f7ff ff18 	bl	40aff0 <_Balloc>
  40b1c0:	f100 0a14 	add.w	sl, r0, #20
  40b1c4:	9001      	str	r0, [sp, #4]
  40b1c6:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40b1ca:	45da      	cmp	sl, fp
  40b1cc:	d205      	bcs.n	40b1da <__multiply+0x46>
  40b1ce:	4653      	mov	r3, sl
  40b1d0:	2100      	movs	r1, #0
  40b1d2:	f843 1b04 	str.w	r1, [r3], #4
  40b1d6:	459b      	cmp	fp, r3
  40b1d8:	d8fb      	bhi.n	40b1d2 <__multiply+0x3e>
  40b1da:	f109 0914 	add.w	r9, r9, #20
  40b1de:	f104 0314 	add.w	r3, r4, #20
  40b1e2:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40b1e6:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40b1ea:	4591      	cmp	r9, r2
  40b1ec:	d25b      	bcs.n	40b2a6 <__multiply+0x112>
  40b1ee:	f8cd b008 	str.w	fp, [sp, #8]
  40b1f2:	4693      	mov	fp, r2
  40b1f4:	f8cd 800c 	str.w	r8, [sp, #12]
  40b1f8:	4698      	mov	r8, r3
  40b1fa:	f859 6b04 	ldr.w	r6, [r9], #4
  40b1fe:	fa1f fe86 	uxth.w	lr, r6
  40b202:	f1be 0f00 	cmp.w	lr, #0
  40b206:	d021      	beq.n	40b24c <__multiply+0xb8>
  40b208:	4647      	mov	r7, r8
  40b20a:	4656      	mov	r6, sl
  40b20c:	2100      	movs	r1, #0
  40b20e:	e000      	b.n	40b212 <__multiply+0x7e>
  40b210:	4626      	mov	r6, r4
  40b212:	f857 2b04 	ldr.w	r2, [r7], #4
  40b216:	4634      	mov	r4, r6
  40b218:	6835      	ldr	r5, [r6, #0]
  40b21a:	b290      	uxth	r0, r2
  40b21c:	45bc      	cmp	ip, r7
  40b21e:	b2ab      	uxth	r3, r5
  40b220:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b224:	fb0e 3000 	mla	r0, lr, r0, r3
  40b228:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40b22c:	4401      	add	r1, r0
  40b22e:	fb0e 3302 	mla	r3, lr, r2, r3
  40b232:	b28a      	uxth	r2, r1
  40b234:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40b238:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40b23c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40b240:	f844 3b04 	str.w	r3, [r4], #4
  40b244:	d8e4      	bhi.n	40b210 <__multiply+0x7c>
  40b246:	6071      	str	r1, [r6, #4]
  40b248:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40b24c:	0c36      	lsrs	r6, r6, #16
  40b24e:	d022      	beq.n	40b296 <__multiply+0x102>
  40b250:	f8da 3000 	ldr.w	r3, [sl]
  40b254:	2700      	movs	r7, #0
  40b256:	4655      	mov	r5, sl
  40b258:	4640      	mov	r0, r8
  40b25a:	461a      	mov	r2, r3
  40b25c:	46be      	mov	lr, r7
  40b25e:	e000      	b.n	40b262 <__multiply+0xce>
  40b260:	4625      	mov	r5, r4
  40b262:	8807      	ldrh	r7, [r0, #0]
  40b264:	0c12      	lsrs	r2, r2, #16
  40b266:	b299      	uxth	r1, r3
  40b268:	462c      	mov	r4, r5
  40b26a:	fb06 2207 	mla	r2, r6, r7, r2
  40b26e:	eb02 070e 	add.w	r7, r2, lr
  40b272:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40b276:	f844 3b04 	str.w	r3, [r4], #4
  40b27a:	f850 1b04 	ldr.w	r1, [r0], #4
  40b27e:	686a      	ldr	r2, [r5, #4]
  40b280:	0c09      	lsrs	r1, r1, #16
  40b282:	4584      	cmp	ip, r0
  40b284:	b293      	uxth	r3, r2
  40b286:	fb06 3101 	mla	r1, r6, r1, r3
  40b28a:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  40b28e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40b292:	d8e5      	bhi.n	40b260 <__multiply+0xcc>
  40b294:	606b      	str	r3, [r5, #4]
  40b296:	45cb      	cmp	fp, r9
  40b298:	f10a 0a04 	add.w	sl, sl, #4
  40b29c:	d8ad      	bhi.n	40b1fa <__multiply+0x66>
  40b29e:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b2a2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b2a6:	f1b8 0f00 	cmp.w	r8, #0
  40b2aa:	dd0b      	ble.n	40b2c4 <__multiply+0x130>
  40b2ac:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  40b2b0:	f1ab 0b04 	sub.w	fp, fp, #4
  40b2b4:	b11b      	cbz	r3, 40b2be <__multiply+0x12a>
  40b2b6:	e005      	b.n	40b2c4 <__multiply+0x130>
  40b2b8:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  40b2bc:	b913      	cbnz	r3, 40b2c4 <__multiply+0x130>
  40b2be:	f1b8 0801 	subs.w	r8, r8, #1
  40b2c2:	d1f9      	bne.n	40b2b8 <__multiply+0x124>
  40b2c4:	9801      	ldr	r0, [sp, #4]
  40b2c6:	f8c0 8010 	str.w	r8, [r0, #16]
  40b2ca:	b005      	add	sp, #20
  40b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2d0:	4614      	mov	r4, r2
  40b2d2:	4689      	mov	r9, r1
  40b2d4:	e76b      	b.n	40b1ae <__multiply+0x1a>
  40b2d6:	bf00      	nop

0040b2d8 <__pow5mult>:
  40b2d8:	f012 0303 	ands.w	r3, r2, #3
  40b2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b2e0:	4614      	mov	r4, r2
  40b2e2:	4607      	mov	r7, r0
  40b2e4:	460e      	mov	r6, r1
  40b2e6:	d12d      	bne.n	40b344 <__pow5mult+0x6c>
  40b2e8:	10a4      	asrs	r4, r4, #2
  40b2ea:	d01c      	beq.n	40b326 <__pow5mult+0x4e>
  40b2ec:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40b2ee:	b395      	cbz	r5, 40b356 <__pow5mult+0x7e>
  40b2f0:	07e3      	lsls	r3, r4, #31
  40b2f2:	f04f 0800 	mov.w	r8, #0
  40b2f6:	d406      	bmi.n	40b306 <__pow5mult+0x2e>
  40b2f8:	1064      	asrs	r4, r4, #1
  40b2fa:	d014      	beq.n	40b326 <__pow5mult+0x4e>
  40b2fc:	6828      	ldr	r0, [r5, #0]
  40b2fe:	b1a8      	cbz	r0, 40b32c <__pow5mult+0x54>
  40b300:	4605      	mov	r5, r0
  40b302:	07e3      	lsls	r3, r4, #31
  40b304:	d5f8      	bpl.n	40b2f8 <__pow5mult+0x20>
  40b306:	4638      	mov	r0, r7
  40b308:	4631      	mov	r1, r6
  40b30a:	462a      	mov	r2, r5
  40b30c:	f7ff ff42 	bl	40b194 <__multiply>
  40b310:	b1b6      	cbz	r6, 40b340 <__pow5mult+0x68>
  40b312:	6872      	ldr	r2, [r6, #4]
  40b314:	1064      	asrs	r4, r4, #1
  40b316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b31c:	6031      	str	r1, [r6, #0]
  40b31e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b322:	4606      	mov	r6, r0
  40b324:	d1ea      	bne.n	40b2fc <__pow5mult+0x24>
  40b326:	4630      	mov	r0, r6
  40b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b32c:	4629      	mov	r1, r5
  40b32e:	462a      	mov	r2, r5
  40b330:	4638      	mov	r0, r7
  40b332:	f7ff ff2f 	bl	40b194 <__multiply>
  40b336:	6028      	str	r0, [r5, #0]
  40b338:	f8c0 8000 	str.w	r8, [r0]
  40b33c:	4605      	mov	r5, r0
  40b33e:	e7e0      	b.n	40b302 <__pow5mult+0x2a>
  40b340:	4606      	mov	r6, r0
  40b342:	e7d9      	b.n	40b2f8 <__pow5mult+0x20>
  40b344:	1e5a      	subs	r2, r3, #1
  40b346:	4d0b      	ldr	r5, [pc, #44]	; (40b374 <__pow5mult+0x9c>)
  40b348:	2300      	movs	r3, #0
  40b34a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b34e:	f7ff fe81 	bl	40b054 <__multadd>
  40b352:	4606      	mov	r6, r0
  40b354:	e7c8      	b.n	40b2e8 <__pow5mult+0x10>
  40b356:	2101      	movs	r1, #1
  40b358:	4638      	mov	r0, r7
  40b35a:	f7ff fe49 	bl	40aff0 <_Balloc>
  40b35e:	f240 2171 	movw	r1, #625	; 0x271
  40b362:	2201      	movs	r2, #1
  40b364:	2300      	movs	r3, #0
  40b366:	6141      	str	r1, [r0, #20]
  40b368:	4605      	mov	r5, r0
  40b36a:	6102      	str	r2, [r0, #16]
  40b36c:	64b8      	str	r0, [r7, #72]	; 0x48
  40b36e:	6003      	str	r3, [r0, #0]
  40b370:	e7be      	b.n	40b2f0 <__pow5mult+0x18>
  40b372:	bf00      	nop
  40b374:	0040d140 	.word	0x0040d140

0040b378 <__lshift>:
  40b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b37c:	690e      	ldr	r6, [r1, #16]
  40b37e:	ea4f 1962 	mov.w	r9, r2, asr #5
  40b382:	688b      	ldr	r3, [r1, #8]
  40b384:	460d      	mov	r5, r1
  40b386:	444e      	add	r6, r9
  40b388:	4690      	mov	r8, r2
  40b38a:	4607      	mov	r7, r0
  40b38c:	6849      	ldr	r1, [r1, #4]
  40b38e:	1c74      	adds	r4, r6, #1
  40b390:	429c      	cmp	r4, r3
  40b392:	dd03      	ble.n	40b39c <__lshift+0x24>
  40b394:	005b      	lsls	r3, r3, #1
  40b396:	3101      	adds	r1, #1
  40b398:	429c      	cmp	r4, r3
  40b39a:	dcfb      	bgt.n	40b394 <__lshift+0x1c>
  40b39c:	4638      	mov	r0, r7
  40b39e:	f7ff fe27 	bl	40aff0 <_Balloc>
  40b3a2:	f1b9 0f00 	cmp.w	r9, #0
  40b3a6:	4684      	mov	ip, r0
  40b3a8:	f100 0114 	add.w	r1, r0, #20
  40b3ac:	dd09      	ble.n	40b3c2 <__lshift+0x4a>
  40b3ae:	2300      	movs	r3, #0
  40b3b0:	460a      	mov	r2, r1
  40b3b2:	4618      	mov	r0, r3
  40b3b4:	3301      	adds	r3, #1
  40b3b6:	f842 0b04 	str.w	r0, [r2], #4
  40b3ba:	454b      	cmp	r3, r9
  40b3bc:	d1fa      	bne.n	40b3b4 <__lshift+0x3c>
  40b3be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40b3c2:	692a      	ldr	r2, [r5, #16]
  40b3c4:	f105 0314 	add.w	r3, r5, #20
  40b3c8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40b3cc:	f018 021f 	ands.w	r2, r8, #31
  40b3d0:	d023      	beq.n	40b41a <__lshift+0xa2>
  40b3d2:	f1c2 0920 	rsb	r9, r2, #32
  40b3d6:	f04f 0a00 	mov.w	sl, #0
  40b3da:	6818      	ldr	r0, [r3, #0]
  40b3dc:	4688      	mov	r8, r1
  40b3de:	4090      	lsls	r0, r2
  40b3e0:	ea4a 0000 	orr.w	r0, sl, r0
  40b3e4:	f841 0b04 	str.w	r0, [r1], #4
  40b3e8:	f853 0b04 	ldr.w	r0, [r3], #4
  40b3ec:	459e      	cmp	lr, r3
  40b3ee:	fa20 fa09 	lsr.w	sl, r0, r9
  40b3f2:	d8f2      	bhi.n	40b3da <__lshift+0x62>
  40b3f4:	f8c8 a004 	str.w	sl, [r8, #4]
  40b3f8:	f1ba 0f00 	cmp.w	sl, #0
  40b3fc:	d000      	beq.n	40b400 <__lshift+0x88>
  40b3fe:	1cb4      	adds	r4, r6, #2
  40b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b402:	3c01      	subs	r4, #1
  40b404:	686a      	ldr	r2, [r5, #4]
  40b406:	4660      	mov	r0, ip
  40b408:	f8cc 4010 	str.w	r4, [ip, #16]
  40b40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b410:	6029      	str	r1, [r5, #0]
  40b412:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b41a:	3904      	subs	r1, #4
  40b41c:	f853 2b04 	ldr.w	r2, [r3], #4
  40b420:	459e      	cmp	lr, r3
  40b422:	f841 2f04 	str.w	r2, [r1, #4]!
  40b426:	d8f9      	bhi.n	40b41c <__lshift+0xa4>
  40b428:	e7ea      	b.n	40b400 <__lshift+0x88>
  40b42a:	bf00      	nop

0040b42c <__mcmp>:
  40b42c:	6902      	ldr	r2, [r0, #16]
  40b42e:	690b      	ldr	r3, [r1, #16]
  40b430:	1ad2      	subs	r2, r2, r3
  40b432:	d113      	bne.n	40b45c <__mcmp+0x30>
  40b434:	009a      	lsls	r2, r3, #2
  40b436:	3014      	adds	r0, #20
  40b438:	3114      	adds	r1, #20
  40b43a:	1883      	adds	r3, r0, r2
  40b43c:	4411      	add	r1, r2
  40b43e:	b410      	push	{r4}
  40b440:	e001      	b.n	40b446 <__mcmp+0x1a>
  40b442:	4298      	cmp	r0, r3
  40b444:	d20c      	bcs.n	40b460 <__mcmp+0x34>
  40b446:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b44a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b44e:	4294      	cmp	r4, r2
  40b450:	d0f7      	beq.n	40b442 <__mcmp+0x16>
  40b452:	d309      	bcc.n	40b468 <__mcmp+0x3c>
  40b454:	2001      	movs	r0, #1
  40b456:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b45a:	4770      	bx	lr
  40b45c:	4610      	mov	r0, r2
  40b45e:	4770      	bx	lr
  40b460:	2000      	movs	r0, #0
  40b462:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b466:	4770      	bx	lr
  40b468:	f04f 30ff 	mov.w	r0, #4294967295
  40b46c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b470:	4770      	bx	lr
  40b472:	bf00      	nop

0040b474 <__mdiff>:
  40b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b478:	460c      	mov	r4, r1
  40b47a:	4605      	mov	r5, r0
  40b47c:	4611      	mov	r1, r2
  40b47e:	4617      	mov	r7, r2
  40b480:	4620      	mov	r0, r4
  40b482:	f7ff ffd3 	bl	40b42c <__mcmp>
  40b486:	1e06      	subs	r6, r0, #0
  40b488:	d05c      	beq.n	40b544 <__mdiff+0xd0>
  40b48a:	db55      	blt.n	40b538 <__mdiff+0xc4>
  40b48c:	f04f 0800 	mov.w	r8, #0
  40b490:	6861      	ldr	r1, [r4, #4]
  40b492:	4628      	mov	r0, r5
  40b494:	f7ff fdac 	bl	40aff0 <_Balloc>
  40b498:	f107 0514 	add.w	r5, r7, #20
  40b49c:	693b      	ldr	r3, [r7, #16]
  40b49e:	f104 0114 	add.w	r1, r4, #20
  40b4a2:	6926      	ldr	r6, [r4, #16]
  40b4a4:	4684      	mov	ip, r0
  40b4a6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  40b4aa:	f100 0414 	add.w	r4, r0, #20
  40b4ae:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40b4b2:	2300      	movs	r3, #0
  40b4b4:	f8c0 800c 	str.w	r8, [r0, #12]
  40b4b8:	f851 9b04 	ldr.w	r9, [r1], #4
  40b4bc:	f855 2b04 	ldr.w	r2, [r5], #4
  40b4c0:	fa13 f889 	uxtah	r8, r3, r9
  40b4c4:	4608      	mov	r0, r1
  40b4c6:	b293      	uxth	r3, r2
  40b4c8:	45ae      	cmp	lr, r5
  40b4ca:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b4ce:	ebc3 0308 	rsb	r3, r3, r8
  40b4d2:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40b4d6:	fa1f f883 	uxth.w	r8, r3
  40b4da:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40b4de:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40b4e2:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b4e6:	f844 2b04 	str.w	r2, [r4], #4
  40b4ea:	d8e5      	bhi.n	40b4b8 <__mdiff+0x44>
  40b4ec:	428f      	cmp	r7, r1
  40b4ee:	4625      	mov	r5, r4
  40b4f0:	d916      	bls.n	40b520 <__mdiff+0xac>
  40b4f2:	f850 2b04 	ldr.w	r2, [r0], #4
  40b4f6:	fa13 f382 	uxtah	r3, r3, r2
  40b4fa:	0c12      	lsrs	r2, r2, #16
  40b4fc:	4287      	cmp	r7, r0
  40b4fe:	fa1f fe83 	uxth.w	lr, r3
  40b502:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40b506:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40b50a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b50e:	f844 2b04 	str.w	r2, [r4], #4
  40b512:	d8ee      	bhi.n	40b4f2 <__mdiff+0x7e>
  40b514:	43c9      	mvns	r1, r1
  40b516:	4439      	add	r1, r7
  40b518:	f021 0403 	bic.w	r4, r1, #3
  40b51c:	3404      	adds	r4, #4
  40b51e:	442c      	add	r4, r5
  40b520:	3c04      	subs	r4, #4
  40b522:	b922      	cbnz	r2, 40b52e <__mdiff+0xba>
  40b524:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b528:	3e01      	subs	r6, #1
  40b52a:	2b00      	cmp	r3, #0
  40b52c:	d0fa      	beq.n	40b524 <__mdiff+0xb0>
  40b52e:	4660      	mov	r0, ip
  40b530:	f8cc 6010 	str.w	r6, [ip, #16]
  40b534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b538:	4623      	mov	r3, r4
  40b53a:	f04f 0801 	mov.w	r8, #1
  40b53e:	463c      	mov	r4, r7
  40b540:	461f      	mov	r7, r3
  40b542:	e7a5      	b.n	40b490 <__mdiff+0x1c>
  40b544:	4628      	mov	r0, r5
  40b546:	4631      	mov	r1, r6
  40b548:	f7ff fd52 	bl	40aff0 <_Balloc>
  40b54c:	2201      	movs	r2, #1
  40b54e:	4603      	mov	r3, r0
  40b550:	6146      	str	r6, [r0, #20]
  40b552:	611a      	str	r2, [r3, #16]
  40b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b558 <__d2b>:
  40b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b55c:	461c      	mov	r4, r3
  40b55e:	b082      	sub	sp, #8
  40b560:	2101      	movs	r1, #1
  40b562:	4616      	mov	r6, r2
  40b564:	f3c4 550a 	ubfx	r5, r4, #20, #11
  40b568:	f7ff fd42 	bl	40aff0 <_Balloc>
  40b56c:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b570:	4607      	mov	r7, r0
  40b572:	b10d      	cbz	r5, 40b578 <__d2b+0x20>
  40b574:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b578:	9401      	str	r4, [sp, #4]
  40b57a:	b30e      	cbz	r6, 40b5c0 <__d2b+0x68>
  40b57c:	a802      	add	r0, sp, #8
  40b57e:	f840 6d08 	str.w	r6, [r0, #-8]!
  40b582:	f7ff fdcb 	bl	40b11c <__lo0bits>
  40b586:	2800      	cmp	r0, #0
  40b588:	d132      	bne.n	40b5f0 <__d2b+0x98>
  40b58a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b58e:	617a      	str	r2, [r7, #20]
  40b590:	2b00      	cmp	r3, #0
  40b592:	61bb      	str	r3, [r7, #24]
  40b594:	bf14      	ite	ne
  40b596:	2402      	movne	r4, #2
  40b598:	2401      	moveq	r4, #1
  40b59a:	613c      	str	r4, [r7, #16]
  40b59c:	b9dd      	cbnz	r5, 40b5d6 <__d2b+0x7e>
  40b59e:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40b5a2:	9a08      	ldr	r2, [sp, #32]
  40b5a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b5a8:	6010      	str	r0, [r2, #0]
  40b5aa:	6918      	ldr	r0, [r3, #16]
  40b5ac:	f7ff fd94 	bl	40b0d8 <__hi0bits>
  40b5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b5b2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40b5b6:	6018      	str	r0, [r3, #0]
  40b5b8:	4638      	mov	r0, r7
  40b5ba:	b002      	add	sp, #8
  40b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b5c0:	a801      	add	r0, sp, #4
  40b5c2:	f7ff fdab 	bl	40b11c <__lo0bits>
  40b5c6:	2301      	movs	r3, #1
  40b5c8:	9a01      	ldr	r2, [sp, #4]
  40b5ca:	3020      	adds	r0, #32
  40b5cc:	461c      	mov	r4, r3
  40b5ce:	613b      	str	r3, [r7, #16]
  40b5d0:	617a      	str	r2, [r7, #20]
  40b5d2:	2d00      	cmp	r5, #0
  40b5d4:	d0e3      	beq.n	40b59e <__d2b+0x46>
  40b5d6:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40b5da:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40b5de:	9a08      	ldr	r2, [sp, #32]
  40b5e0:	4440      	add	r0, r8
  40b5e2:	6010      	str	r0, [r2, #0]
  40b5e4:	4638      	mov	r0, r7
  40b5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b5e8:	6013      	str	r3, [r2, #0]
  40b5ea:	b002      	add	sp, #8
  40b5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b5f0:	9b01      	ldr	r3, [sp, #4]
  40b5f2:	f1c0 0120 	rsb	r1, r0, #32
  40b5f6:	9a00      	ldr	r2, [sp, #0]
  40b5f8:	fa03 f101 	lsl.w	r1, r3, r1
  40b5fc:	40c3      	lsrs	r3, r0
  40b5fe:	430a      	orrs	r2, r1
  40b600:	9301      	str	r3, [sp, #4]
  40b602:	617a      	str	r2, [r7, #20]
  40b604:	e7c4      	b.n	40b590 <__d2b+0x38>
  40b606:	bf00      	nop

0040b608 <_realloc_r>:
  40b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b60c:	4617      	mov	r7, r2
  40b60e:	b083      	sub	sp, #12
  40b610:	460e      	mov	r6, r1
  40b612:	2900      	cmp	r1, #0
  40b614:	f000 80e2 	beq.w	40b7dc <_realloc_r+0x1d4>
  40b618:	f107 040b 	add.w	r4, r7, #11
  40b61c:	4681      	mov	r9, r0
  40b61e:	f7ff fce3 	bl	40afe8 <__malloc_lock>
  40b622:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b626:	2c16      	cmp	r4, #22
  40b628:	f1a6 0808 	sub.w	r8, r6, #8
  40b62c:	f023 0503 	bic.w	r5, r3, #3
  40b630:	d850      	bhi.n	40b6d4 <_realloc_r+0xcc>
  40b632:	2210      	movs	r2, #16
  40b634:	2100      	movs	r1, #0
  40b636:	4614      	mov	r4, r2
  40b638:	42bc      	cmp	r4, r7
  40b63a:	f0c0 80dc 	bcc.w	40b7f6 <_realloc_r+0x1ee>
  40b63e:	2900      	cmp	r1, #0
  40b640:	f040 80d9 	bne.w	40b7f6 <_realloc_r+0x1ee>
  40b644:	4295      	cmp	r5, r2
  40b646:	da4a      	bge.n	40b6de <_realloc_r+0xd6>
  40b648:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40b9f4 <_realloc_r+0x3ec>
  40b64c:	eb08 0105 	add.w	r1, r8, r5
  40b650:	f8db 0008 	ldr.w	r0, [fp, #8]
  40b654:	4288      	cmp	r0, r1
  40b656:	f000 80d3 	beq.w	40b800 <_realloc_r+0x1f8>
  40b65a:	6848      	ldr	r0, [r1, #4]
  40b65c:	f020 0e01 	bic.w	lr, r0, #1
  40b660:	448e      	add	lr, r1
  40b662:	f8de e004 	ldr.w	lr, [lr, #4]
  40b666:	f01e 0f01 	tst.w	lr, #1
  40b66a:	d14e      	bne.n	40b70a <_realloc_r+0x102>
  40b66c:	f020 0003 	bic.w	r0, r0, #3
  40b670:	4428      	add	r0, r5
  40b672:	4290      	cmp	r0, r2
  40b674:	f280 80b8 	bge.w	40b7e8 <_realloc_r+0x1e0>
  40b678:	07db      	lsls	r3, r3, #31
  40b67a:	f100 808b 	bmi.w	40b794 <_realloc_r+0x18c>
  40b67e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b682:	ebc3 0a08 	rsb	sl, r3, r8
  40b686:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b68a:	f023 0303 	bic.w	r3, r3, #3
  40b68e:	eb00 0e03 	add.w	lr, r0, r3
  40b692:	4596      	cmp	lr, r2
  40b694:	db43      	blt.n	40b71e <_realloc_r+0x116>
  40b696:	68cb      	ldr	r3, [r1, #12]
  40b698:	4657      	mov	r7, sl
  40b69a:	6889      	ldr	r1, [r1, #8]
  40b69c:	1f2a      	subs	r2, r5, #4
  40b69e:	60cb      	str	r3, [r1, #12]
  40b6a0:	2a24      	cmp	r2, #36	; 0x24
  40b6a2:	6099      	str	r1, [r3, #8]
  40b6a4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40b6a8:	f8da 300c 	ldr.w	r3, [sl, #12]
  40b6ac:	60cb      	str	r3, [r1, #12]
  40b6ae:	6099      	str	r1, [r3, #8]
  40b6b0:	f200 813c 	bhi.w	40b92c <_realloc_r+0x324>
  40b6b4:	2a13      	cmp	r2, #19
  40b6b6:	f240 80fa 	bls.w	40b8ae <_realloc_r+0x2a6>
  40b6ba:	6833      	ldr	r3, [r6, #0]
  40b6bc:	2a1b      	cmp	r2, #27
  40b6be:	f8ca 3008 	str.w	r3, [sl, #8]
  40b6c2:	6873      	ldr	r3, [r6, #4]
  40b6c4:	f8ca 300c 	str.w	r3, [sl, #12]
  40b6c8:	f200 813b 	bhi.w	40b942 <_realloc_r+0x33a>
  40b6cc:	3608      	adds	r6, #8
  40b6ce:	f10a 0310 	add.w	r3, sl, #16
  40b6d2:	e0ed      	b.n	40b8b0 <_realloc_r+0x2a8>
  40b6d4:	f024 0407 	bic.w	r4, r4, #7
  40b6d8:	4622      	mov	r2, r4
  40b6da:	0fe1      	lsrs	r1, r4, #31
  40b6dc:	e7ac      	b.n	40b638 <_realloc_r+0x30>
  40b6de:	4637      	mov	r7, r6
  40b6e0:	1b2a      	subs	r2, r5, r4
  40b6e2:	f003 0301 	and.w	r3, r3, #1
  40b6e6:	2a0f      	cmp	r2, #15
  40b6e8:	d841      	bhi.n	40b76e <_realloc_r+0x166>
  40b6ea:	eb08 0205 	add.w	r2, r8, r5
  40b6ee:	431d      	orrs	r5, r3
  40b6f0:	f8c8 5004 	str.w	r5, [r8, #4]
  40b6f4:	6853      	ldr	r3, [r2, #4]
  40b6f6:	f043 0301 	orr.w	r3, r3, #1
  40b6fa:	6053      	str	r3, [r2, #4]
  40b6fc:	4648      	mov	r0, r9
  40b6fe:	f7ff fc75 	bl	40afec <__malloc_unlock>
  40b702:	4638      	mov	r0, r7
  40b704:	b003      	add	sp, #12
  40b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b70a:	07d9      	lsls	r1, r3, #31
  40b70c:	d442      	bmi.n	40b794 <_realloc_r+0x18c>
  40b70e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b712:	ebc3 0a08 	rsb	sl, r3, r8
  40b716:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b71a:	f023 0303 	bic.w	r3, r3, #3
  40b71e:	442b      	add	r3, r5
  40b720:	4293      	cmp	r3, r2
  40b722:	db37      	blt.n	40b794 <_realloc_r+0x18c>
  40b724:	4657      	mov	r7, sl
  40b726:	1f2a      	subs	r2, r5, #4
  40b728:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b72c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40b730:	2a24      	cmp	r2, #36	; 0x24
  40b732:	60c1      	str	r1, [r0, #12]
  40b734:	6088      	str	r0, [r1, #8]
  40b736:	f200 80c6 	bhi.w	40b8c6 <_realloc_r+0x2be>
  40b73a:	2a13      	cmp	r2, #19
  40b73c:	f240 80ff 	bls.w	40b93e <_realloc_r+0x336>
  40b740:	6831      	ldr	r1, [r6, #0]
  40b742:	2a1b      	cmp	r2, #27
  40b744:	f8ca 1008 	str.w	r1, [sl, #8]
  40b748:	6871      	ldr	r1, [r6, #4]
  40b74a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b74e:	f200 810d 	bhi.w	40b96c <_realloc_r+0x364>
  40b752:	3608      	adds	r6, #8
  40b754:	f10a 0210 	add.w	r2, sl, #16
  40b758:	6831      	ldr	r1, [r6, #0]
  40b75a:	461d      	mov	r5, r3
  40b75c:	46d0      	mov	r8, sl
  40b75e:	6011      	str	r1, [r2, #0]
  40b760:	6873      	ldr	r3, [r6, #4]
  40b762:	6053      	str	r3, [r2, #4]
  40b764:	68b3      	ldr	r3, [r6, #8]
  40b766:	6093      	str	r3, [r2, #8]
  40b768:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b76c:	e7b8      	b.n	40b6e0 <_realloc_r+0xd8>
  40b76e:	eb08 0504 	add.w	r5, r8, r4
  40b772:	f042 0601 	orr.w	r6, r2, #1
  40b776:	431c      	orrs	r4, r3
  40b778:	4648      	mov	r0, r9
  40b77a:	442a      	add	r2, r5
  40b77c:	f105 0108 	add.w	r1, r5, #8
  40b780:	f8c8 4004 	str.w	r4, [r8, #4]
  40b784:	606e      	str	r6, [r5, #4]
  40b786:	6853      	ldr	r3, [r2, #4]
  40b788:	f043 0301 	orr.w	r3, r3, #1
  40b78c:	6053      	str	r3, [r2, #4]
  40b78e:	f7fe fd2b 	bl	40a1e8 <_free_r>
  40b792:	e7b3      	b.n	40b6fc <_realloc_r+0xf4>
  40b794:	4639      	mov	r1, r7
  40b796:	4648      	mov	r0, r9
  40b798:	f7ff f836 	bl	40a808 <_malloc_r>
  40b79c:	4607      	mov	r7, r0
  40b79e:	2800      	cmp	r0, #0
  40b7a0:	d0ac      	beq.n	40b6fc <_realloc_r+0xf4>
  40b7a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b7a6:	f1a0 0108 	sub.w	r1, r0, #8
  40b7aa:	f023 0201 	bic.w	r2, r3, #1
  40b7ae:	4442      	add	r2, r8
  40b7b0:	4291      	cmp	r1, r2
  40b7b2:	f000 80b4 	beq.w	40b91e <_realloc_r+0x316>
  40b7b6:	1f2a      	subs	r2, r5, #4
  40b7b8:	2a24      	cmp	r2, #36	; 0x24
  40b7ba:	f200 80a1 	bhi.w	40b900 <_realloc_r+0x2f8>
  40b7be:	2a13      	cmp	r2, #19
  40b7c0:	d86a      	bhi.n	40b898 <_realloc_r+0x290>
  40b7c2:	4603      	mov	r3, r0
  40b7c4:	4632      	mov	r2, r6
  40b7c6:	6811      	ldr	r1, [r2, #0]
  40b7c8:	6019      	str	r1, [r3, #0]
  40b7ca:	6851      	ldr	r1, [r2, #4]
  40b7cc:	6059      	str	r1, [r3, #4]
  40b7ce:	6892      	ldr	r2, [r2, #8]
  40b7d0:	609a      	str	r2, [r3, #8]
  40b7d2:	4631      	mov	r1, r6
  40b7d4:	4648      	mov	r0, r9
  40b7d6:	f7fe fd07 	bl	40a1e8 <_free_r>
  40b7da:	e78f      	b.n	40b6fc <_realloc_r+0xf4>
  40b7dc:	4611      	mov	r1, r2
  40b7de:	b003      	add	sp, #12
  40b7e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7e4:	f7ff b810 	b.w	40a808 <_malloc_r>
  40b7e8:	68ca      	ldr	r2, [r1, #12]
  40b7ea:	4637      	mov	r7, r6
  40b7ec:	6889      	ldr	r1, [r1, #8]
  40b7ee:	4605      	mov	r5, r0
  40b7f0:	60ca      	str	r2, [r1, #12]
  40b7f2:	6091      	str	r1, [r2, #8]
  40b7f4:	e774      	b.n	40b6e0 <_realloc_r+0xd8>
  40b7f6:	230c      	movs	r3, #12
  40b7f8:	2000      	movs	r0, #0
  40b7fa:	f8c9 3000 	str.w	r3, [r9]
  40b7fe:	e781      	b.n	40b704 <_realloc_r+0xfc>
  40b800:	6841      	ldr	r1, [r0, #4]
  40b802:	f104 0010 	add.w	r0, r4, #16
  40b806:	f021 0103 	bic.w	r1, r1, #3
  40b80a:	4429      	add	r1, r5
  40b80c:	4281      	cmp	r1, r0
  40b80e:	da63      	bge.n	40b8d8 <_realloc_r+0x2d0>
  40b810:	07db      	lsls	r3, r3, #31
  40b812:	d4bf      	bmi.n	40b794 <_realloc_r+0x18c>
  40b814:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b818:	ebc3 0a08 	rsb	sl, r3, r8
  40b81c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b820:	f023 0303 	bic.w	r3, r3, #3
  40b824:	eb01 0c03 	add.w	ip, r1, r3
  40b828:	4560      	cmp	r0, ip
  40b82a:	f73f af78 	bgt.w	40b71e <_realloc_r+0x116>
  40b82e:	4657      	mov	r7, sl
  40b830:	1f2a      	subs	r2, r5, #4
  40b832:	f8da 300c 	ldr.w	r3, [sl, #12]
  40b836:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40b83a:	2a24      	cmp	r2, #36	; 0x24
  40b83c:	60cb      	str	r3, [r1, #12]
  40b83e:	6099      	str	r1, [r3, #8]
  40b840:	f200 80b8 	bhi.w	40b9b4 <_realloc_r+0x3ac>
  40b844:	2a13      	cmp	r2, #19
  40b846:	f240 80a8 	bls.w	40b99a <_realloc_r+0x392>
  40b84a:	6833      	ldr	r3, [r6, #0]
  40b84c:	2a1b      	cmp	r2, #27
  40b84e:	f8ca 3008 	str.w	r3, [sl, #8]
  40b852:	6873      	ldr	r3, [r6, #4]
  40b854:	f8ca 300c 	str.w	r3, [sl, #12]
  40b858:	f200 80b5 	bhi.w	40b9c6 <_realloc_r+0x3be>
  40b85c:	3608      	adds	r6, #8
  40b85e:	f10a 0310 	add.w	r3, sl, #16
  40b862:	6832      	ldr	r2, [r6, #0]
  40b864:	601a      	str	r2, [r3, #0]
  40b866:	6872      	ldr	r2, [r6, #4]
  40b868:	605a      	str	r2, [r3, #4]
  40b86a:	68b2      	ldr	r2, [r6, #8]
  40b86c:	609a      	str	r2, [r3, #8]
  40b86e:	ebc4 030c 	rsb	r3, r4, ip
  40b872:	eb0a 0204 	add.w	r2, sl, r4
  40b876:	4648      	mov	r0, r9
  40b878:	f043 0301 	orr.w	r3, r3, #1
  40b87c:	f8cb 2008 	str.w	r2, [fp, #8]
  40b880:	6053      	str	r3, [r2, #4]
  40b882:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b886:	f003 0301 	and.w	r3, r3, #1
  40b88a:	431c      	orrs	r4, r3
  40b88c:	f8ca 4004 	str.w	r4, [sl, #4]
  40b890:	f7ff fbac 	bl	40afec <__malloc_unlock>
  40b894:	4638      	mov	r0, r7
  40b896:	e735      	b.n	40b704 <_realloc_r+0xfc>
  40b898:	6833      	ldr	r3, [r6, #0]
  40b89a:	2a1b      	cmp	r2, #27
  40b89c:	6003      	str	r3, [r0, #0]
  40b89e:	6873      	ldr	r3, [r6, #4]
  40b8a0:	6043      	str	r3, [r0, #4]
  40b8a2:	d831      	bhi.n	40b908 <_realloc_r+0x300>
  40b8a4:	f100 0308 	add.w	r3, r0, #8
  40b8a8:	f106 0208 	add.w	r2, r6, #8
  40b8ac:	e78b      	b.n	40b7c6 <_realloc_r+0x1be>
  40b8ae:	463b      	mov	r3, r7
  40b8b0:	6832      	ldr	r2, [r6, #0]
  40b8b2:	4675      	mov	r5, lr
  40b8b4:	46d0      	mov	r8, sl
  40b8b6:	601a      	str	r2, [r3, #0]
  40b8b8:	6872      	ldr	r2, [r6, #4]
  40b8ba:	605a      	str	r2, [r3, #4]
  40b8bc:	68b2      	ldr	r2, [r6, #8]
  40b8be:	609a      	str	r2, [r3, #8]
  40b8c0:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b8c4:	e70c      	b.n	40b6e0 <_realloc_r+0xd8>
  40b8c6:	4631      	mov	r1, r6
  40b8c8:	4638      	mov	r0, r7
  40b8ca:	461d      	mov	r5, r3
  40b8cc:	46d0      	mov	r8, sl
  40b8ce:	f7ff fb29 	bl	40af24 <memmove>
  40b8d2:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b8d6:	e703      	b.n	40b6e0 <_realloc_r+0xd8>
  40b8d8:	1b0b      	subs	r3, r1, r4
  40b8da:	eb08 0204 	add.w	r2, r8, r4
  40b8de:	4648      	mov	r0, r9
  40b8e0:	f043 0301 	orr.w	r3, r3, #1
  40b8e4:	f8cb 2008 	str.w	r2, [fp, #8]
  40b8e8:	6053      	str	r3, [r2, #4]
  40b8ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b8ee:	f003 0301 	and.w	r3, r3, #1
  40b8f2:	431c      	orrs	r4, r3
  40b8f4:	f846 4c04 	str.w	r4, [r6, #-4]
  40b8f8:	f7ff fb78 	bl	40afec <__malloc_unlock>
  40b8fc:	4630      	mov	r0, r6
  40b8fe:	e701      	b.n	40b704 <_realloc_r+0xfc>
  40b900:	4631      	mov	r1, r6
  40b902:	f7ff fb0f 	bl	40af24 <memmove>
  40b906:	e764      	b.n	40b7d2 <_realloc_r+0x1ca>
  40b908:	68b3      	ldr	r3, [r6, #8]
  40b90a:	2a24      	cmp	r2, #36	; 0x24
  40b90c:	6083      	str	r3, [r0, #8]
  40b90e:	68f3      	ldr	r3, [r6, #12]
  40b910:	60c3      	str	r3, [r0, #12]
  40b912:	d022      	beq.n	40b95a <_realloc_r+0x352>
  40b914:	f100 0310 	add.w	r3, r0, #16
  40b918:	f106 0210 	add.w	r2, r6, #16
  40b91c:	e753      	b.n	40b7c6 <_realloc_r+0x1be>
  40b91e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b922:	4637      	mov	r7, r6
  40b924:	f022 0203 	bic.w	r2, r2, #3
  40b928:	4415      	add	r5, r2
  40b92a:	e6d9      	b.n	40b6e0 <_realloc_r+0xd8>
  40b92c:	4631      	mov	r1, r6
  40b92e:	4638      	mov	r0, r7
  40b930:	4675      	mov	r5, lr
  40b932:	46d0      	mov	r8, sl
  40b934:	f7ff faf6 	bl	40af24 <memmove>
  40b938:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b93c:	e6d0      	b.n	40b6e0 <_realloc_r+0xd8>
  40b93e:	463a      	mov	r2, r7
  40b940:	e70a      	b.n	40b758 <_realloc_r+0x150>
  40b942:	68b3      	ldr	r3, [r6, #8]
  40b944:	2a24      	cmp	r2, #36	; 0x24
  40b946:	f8ca 3010 	str.w	r3, [sl, #16]
  40b94a:	68f3      	ldr	r3, [r6, #12]
  40b94c:	f8ca 3014 	str.w	r3, [sl, #20]
  40b950:	d018      	beq.n	40b984 <_realloc_r+0x37c>
  40b952:	3610      	adds	r6, #16
  40b954:	f10a 0318 	add.w	r3, sl, #24
  40b958:	e7aa      	b.n	40b8b0 <_realloc_r+0x2a8>
  40b95a:	6931      	ldr	r1, [r6, #16]
  40b95c:	f100 0318 	add.w	r3, r0, #24
  40b960:	f106 0218 	add.w	r2, r6, #24
  40b964:	6101      	str	r1, [r0, #16]
  40b966:	6971      	ldr	r1, [r6, #20]
  40b968:	6141      	str	r1, [r0, #20]
  40b96a:	e72c      	b.n	40b7c6 <_realloc_r+0x1be>
  40b96c:	68b1      	ldr	r1, [r6, #8]
  40b96e:	2a24      	cmp	r2, #36	; 0x24
  40b970:	f8ca 1010 	str.w	r1, [sl, #16]
  40b974:	68f1      	ldr	r1, [r6, #12]
  40b976:	f8ca 1014 	str.w	r1, [sl, #20]
  40b97a:	d010      	beq.n	40b99e <_realloc_r+0x396>
  40b97c:	3610      	adds	r6, #16
  40b97e:	f10a 0218 	add.w	r2, sl, #24
  40b982:	e6e9      	b.n	40b758 <_realloc_r+0x150>
  40b984:	6932      	ldr	r2, [r6, #16]
  40b986:	f10a 0320 	add.w	r3, sl, #32
  40b98a:	3618      	adds	r6, #24
  40b98c:	f8ca 2018 	str.w	r2, [sl, #24]
  40b990:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b994:	f8ca 201c 	str.w	r2, [sl, #28]
  40b998:	e78a      	b.n	40b8b0 <_realloc_r+0x2a8>
  40b99a:	463b      	mov	r3, r7
  40b99c:	e761      	b.n	40b862 <_realloc_r+0x25a>
  40b99e:	6931      	ldr	r1, [r6, #16]
  40b9a0:	f10a 0220 	add.w	r2, sl, #32
  40b9a4:	3618      	adds	r6, #24
  40b9a6:	f8ca 1018 	str.w	r1, [sl, #24]
  40b9aa:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40b9ae:	f8ca 101c 	str.w	r1, [sl, #28]
  40b9b2:	e6d1      	b.n	40b758 <_realloc_r+0x150>
  40b9b4:	4631      	mov	r1, r6
  40b9b6:	4638      	mov	r0, r7
  40b9b8:	f8cd c004 	str.w	ip, [sp, #4]
  40b9bc:	f7ff fab2 	bl	40af24 <memmove>
  40b9c0:	f8dd c004 	ldr.w	ip, [sp, #4]
  40b9c4:	e753      	b.n	40b86e <_realloc_r+0x266>
  40b9c6:	68b3      	ldr	r3, [r6, #8]
  40b9c8:	2a24      	cmp	r2, #36	; 0x24
  40b9ca:	f8ca 3010 	str.w	r3, [sl, #16]
  40b9ce:	68f3      	ldr	r3, [r6, #12]
  40b9d0:	f8ca 3014 	str.w	r3, [sl, #20]
  40b9d4:	d003      	beq.n	40b9de <_realloc_r+0x3d6>
  40b9d6:	3610      	adds	r6, #16
  40b9d8:	f10a 0318 	add.w	r3, sl, #24
  40b9dc:	e741      	b.n	40b862 <_realloc_r+0x25a>
  40b9de:	6932      	ldr	r2, [r6, #16]
  40b9e0:	f10a 0320 	add.w	r3, sl, #32
  40b9e4:	3618      	adds	r6, #24
  40b9e6:	f8ca 2018 	str.w	r2, [sl, #24]
  40b9ea:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b9ee:	f8ca 201c 	str.w	r2, [sl, #28]
  40b9f2:	e736      	b.n	40b862 <_realloc_r+0x25a>
  40b9f4:	204004fc 	.word	0x204004fc

0040b9f8 <__fpclassifyd>:
  40b9f8:	fab0 f080 	clz	r0, r0
  40b9fc:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  40ba00:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40ba04:	d102      	bne.n	40ba0c <__fpclassifyd+0x14>
  40ba06:	b108      	cbz	r0, 40ba0c <__fpclassifyd+0x14>
  40ba08:	2002      	movs	r0, #2
  40ba0a:	4770      	bx	lr
  40ba0c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40ba10:	4b08      	ldr	r3, [pc, #32]	; (40ba34 <__fpclassifyd+0x3c>)
  40ba12:	429a      	cmp	r2, r3
  40ba14:	d801      	bhi.n	40ba1a <__fpclassifyd+0x22>
  40ba16:	2004      	movs	r0, #4
  40ba18:	4770      	bx	lr
  40ba1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ba1e:	d201      	bcs.n	40ba24 <__fpclassifyd+0x2c>
  40ba20:	2003      	movs	r0, #3
  40ba22:	4770      	bx	lr
  40ba24:	4b04      	ldr	r3, [pc, #16]	; (40ba38 <__fpclassifyd+0x40>)
  40ba26:	4299      	cmp	r1, r3
  40ba28:	bf14      	ite	ne
  40ba2a:	2000      	movne	r0, #0
  40ba2c:	f000 0001 	andeq.w	r0, r0, #1
  40ba30:	4770      	bx	lr
  40ba32:	bf00      	nop
  40ba34:	7fdfffff 	.word	0x7fdfffff
  40ba38:	7ff00000 	.word	0x7ff00000

0040ba3c <_sbrk_r>:
  40ba3c:	b538      	push	{r3, r4, r5, lr}
  40ba3e:	2300      	movs	r3, #0
  40ba40:	4c06      	ldr	r4, [pc, #24]	; (40ba5c <_sbrk_r+0x20>)
  40ba42:	4605      	mov	r5, r0
  40ba44:	4608      	mov	r0, r1
  40ba46:	6023      	str	r3, [r4, #0]
  40ba48:	f7f6 fdd0 	bl	4025ec <_sbrk>
  40ba4c:	1c43      	adds	r3, r0, #1
  40ba4e:	d000      	beq.n	40ba52 <_sbrk_r+0x16>
  40ba50:	bd38      	pop	{r3, r4, r5, pc}
  40ba52:	6823      	ldr	r3, [r4, #0]
  40ba54:	2b00      	cmp	r3, #0
  40ba56:	d0fb      	beq.n	40ba50 <_sbrk_r+0x14>
  40ba58:	602b      	str	r3, [r5, #0]
  40ba5a:	bd38      	pop	{r3, r4, r5, pc}
  40ba5c:	20401838 	.word	0x20401838

0040ba60 <__sread>:
  40ba60:	b510      	push	{r4, lr}
  40ba62:	460c      	mov	r4, r1
  40ba64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ba68:	f000 f9ec 	bl	40be44 <_read_r>
  40ba6c:	2800      	cmp	r0, #0
  40ba6e:	db03      	blt.n	40ba78 <__sread+0x18>
  40ba70:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40ba72:	4403      	add	r3, r0
  40ba74:	6523      	str	r3, [r4, #80]	; 0x50
  40ba76:	bd10      	pop	{r4, pc}
  40ba78:	89a3      	ldrh	r3, [r4, #12]
  40ba7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40ba7e:	81a3      	strh	r3, [r4, #12]
  40ba80:	bd10      	pop	{r4, pc}
  40ba82:	bf00      	nop

0040ba84 <__swrite>:
  40ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ba88:	461d      	mov	r5, r3
  40ba8a:	898b      	ldrh	r3, [r1, #12]
  40ba8c:	4616      	mov	r6, r2
  40ba8e:	460c      	mov	r4, r1
  40ba90:	05da      	lsls	r2, r3, #23
  40ba92:	4607      	mov	r7, r0
  40ba94:	d506      	bpl.n	40baa4 <__swrite+0x20>
  40ba96:	2302      	movs	r3, #2
  40ba98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ba9c:	2200      	movs	r2, #0
  40ba9e:	f000 f9bd 	bl	40be1c <_lseek_r>
  40baa2:	89a3      	ldrh	r3, [r4, #12]
  40baa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40baa8:	4638      	mov	r0, r7
  40baaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40baae:	4632      	mov	r2, r6
  40bab0:	81a3      	strh	r3, [r4, #12]
  40bab2:	462b      	mov	r3, r5
  40bab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bab8:	f000 b89e 	b.w	40bbf8 <_write_r>

0040babc <__sseek>:
  40babc:	b510      	push	{r4, lr}
  40babe:	460c      	mov	r4, r1
  40bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bac4:	f000 f9aa 	bl	40be1c <_lseek_r>
  40bac8:	1c42      	adds	r2, r0, #1
  40baca:	89a3      	ldrh	r3, [r4, #12]
  40bacc:	d004      	beq.n	40bad8 <__sseek+0x1c>
  40bace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40bad2:	6520      	str	r0, [r4, #80]	; 0x50
  40bad4:	81a3      	strh	r3, [r4, #12]
  40bad6:	bd10      	pop	{r4, pc}
  40bad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40badc:	81a3      	strh	r3, [r4, #12]
  40bade:	bd10      	pop	{r4, pc}

0040bae0 <__sclose>:
  40bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bae4:	f000 b920 	b.w	40bd28 <_close_r>

0040bae8 <__ssprint_r>:
  40bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40baec:	6893      	ldr	r3, [r2, #8]
  40baee:	b083      	sub	sp, #12
  40baf0:	4691      	mov	r9, r2
  40baf2:	f8d2 8000 	ldr.w	r8, [r2]
  40baf6:	9001      	str	r0, [sp, #4]
  40baf8:	2b00      	cmp	r3, #0
  40bafa:	d073      	beq.n	40bbe4 <__ssprint_r+0xfc>
  40bafc:	f04f 0b00 	mov.w	fp, #0
  40bb00:	460d      	mov	r5, r1
  40bb02:	6808      	ldr	r0, [r1, #0]
  40bb04:	688b      	ldr	r3, [r1, #8]
  40bb06:	465c      	mov	r4, fp
  40bb08:	2c00      	cmp	r4, #0
  40bb0a:	d046      	beq.n	40bb9a <__ssprint_r+0xb2>
  40bb0c:	429c      	cmp	r4, r3
  40bb0e:	461e      	mov	r6, r3
  40bb10:	469a      	mov	sl, r3
  40bb12:	d349      	bcc.n	40bba8 <__ssprint_r+0xc0>
  40bb14:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40bb18:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40bb1c:	d02d      	beq.n	40bb7a <__ssprint_r+0x92>
  40bb1e:	696b      	ldr	r3, [r5, #20]
  40bb20:	1c62      	adds	r2, r4, #1
  40bb22:	6929      	ldr	r1, [r5, #16]
  40bb24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40bb28:	1a46      	subs	r6, r0, r1
  40bb2a:	4610      	mov	r0, r2
  40bb2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40bb30:	4430      	add	r0, r6
  40bb32:	105f      	asrs	r7, r3, #1
  40bb34:	4287      	cmp	r7, r0
  40bb36:	463a      	mov	r2, r7
  40bb38:	d201      	bcs.n	40bb3e <__ssprint_r+0x56>
  40bb3a:	4607      	mov	r7, r0
  40bb3c:	4602      	mov	r2, r0
  40bb3e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40bb42:	d034      	beq.n	40bbae <__ssprint_r+0xc6>
  40bb44:	4611      	mov	r1, r2
  40bb46:	9801      	ldr	r0, [sp, #4]
  40bb48:	f7fe fe5e 	bl	40a808 <_malloc_r>
  40bb4c:	4682      	mov	sl, r0
  40bb4e:	2800      	cmp	r0, #0
  40bb50:	d04e      	beq.n	40bbf0 <__ssprint_r+0x108>
  40bb52:	4632      	mov	r2, r6
  40bb54:	6929      	ldr	r1, [r5, #16]
  40bb56:	f7ff f94b 	bl	40adf0 <memcpy>
  40bb5a:	89aa      	ldrh	r2, [r5, #12]
  40bb5c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40bb60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40bb64:	81aa      	strh	r2, [r5, #12]
  40bb66:	eb0a 0006 	add.w	r0, sl, r6
  40bb6a:	1bba      	subs	r2, r7, r6
  40bb6c:	f8c5 a010 	str.w	sl, [r5, #16]
  40bb70:	4626      	mov	r6, r4
  40bb72:	46a2      	mov	sl, r4
  40bb74:	6028      	str	r0, [r5, #0]
  40bb76:	60aa      	str	r2, [r5, #8]
  40bb78:	616f      	str	r7, [r5, #20]
  40bb7a:	4652      	mov	r2, sl
  40bb7c:	4659      	mov	r1, fp
  40bb7e:	f7ff f9d1 	bl	40af24 <memmove>
  40bb82:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40bb86:	68ab      	ldr	r3, [r5, #8]
  40bb88:	6828      	ldr	r0, [r5, #0]
  40bb8a:	1b14      	subs	r4, r2, r4
  40bb8c:	1b9b      	subs	r3, r3, r6
  40bb8e:	4450      	add	r0, sl
  40bb90:	60ab      	str	r3, [r5, #8]
  40bb92:	6028      	str	r0, [r5, #0]
  40bb94:	f8c9 4008 	str.w	r4, [r9, #8]
  40bb98:	b324      	cbz	r4, 40bbe4 <__ssprint_r+0xfc>
  40bb9a:	f8d8 b000 	ldr.w	fp, [r8]
  40bb9e:	f108 0808 	add.w	r8, r8, #8
  40bba2:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40bba6:	e7af      	b.n	40bb08 <__ssprint_r+0x20>
  40bba8:	4626      	mov	r6, r4
  40bbaa:	46a2      	mov	sl, r4
  40bbac:	e7e5      	b.n	40bb7a <__ssprint_r+0x92>
  40bbae:	9801      	ldr	r0, [sp, #4]
  40bbb0:	f7ff fd2a 	bl	40b608 <_realloc_r>
  40bbb4:	4682      	mov	sl, r0
  40bbb6:	2800      	cmp	r0, #0
  40bbb8:	d1d5      	bne.n	40bb66 <__ssprint_r+0x7e>
  40bbba:	9c01      	ldr	r4, [sp, #4]
  40bbbc:	6929      	ldr	r1, [r5, #16]
  40bbbe:	4620      	mov	r0, r4
  40bbc0:	f7fe fb12 	bl	40a1e8 <_free_r>
  40bbc4:	230c      	movs	r3, #12
  40bbc6:	6023      	str	r3, [r4, #0]
  40bbc8:	89ab      	ldrh	r3, [r5, #12]
  40bbca:	2200      	movs	r2, #0
  40bbcc:	f04f 30ff 	mov.w	r0, #4294967295
  40bbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bbd4:	81ab      	strh	r3, [r5, #12]
  40bbd6:	f8c9 2008 	str.w	r2, [r9, #8]
  40bbda:	f8c9 2004 	str.w	r2, [r9, #4]
  40bbde:	b003      	add	sp, #12
  40bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bbe4:	2000      	movs	r0, #0
  40bbe6:	f8c9 0004 	str.w	r0, [r9, #4]
  40bbea:	b003      	add	sp, #12
  40bbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bbf0:	230c      	movs	r3, #12
  40bbf2:	9a01      	ldr	r2, [sp, #4]
  40bbf4:	6013      	str	r3, [r2, #0]
  40bbf6:	e7e7      	b.n	40bbc8 <__ssprint_r+0xe0>

0040bbf8 <_write_r>:
  40bbf8:	b570      	push	{r4, r5, r6, lr}
  40bbfa:	4c08      	ldr	r4, [pc, #32]	; (40bc1c <_write_r+0x24>)
  40bbfc:	2500      	movs	r5, #0
  40bbfe:	4606      	mov	r6, r0
  40bc00:	4608      	mov	r0, r1
  40bc02:	4611      	mov	r1, r2
  40bc04:	461a      	mov	r2, r3
  40bc06:	6025      	str	r5, [r4, #0]
  40bc08:	f7f4 fcac 	bl	400564 <_write>
  40bc0c:	1c43      	adds	r3, r0, #1
  40bc0e:	d000      	beq.n	40bc12 <_write_r+0x1a>
  40bc10:	bd70      	pop	{r4, r5, r6, pc}
  40bc12:	6823      	ldr	r3, [r4, #0]
  40bc14:	2b00      	cmp	r3, #0
  40bc16:	d0fb      	beq.n	40bc10 <_write_r+0x18>
  40bc18:	6033      	str	r3, [r6, #0]
  40bc1a:	bd70      	pop	{r4, r5, r6, pc}
  40bc1c:	20401838 	.word	0x20401838

0040bc20 <__register_exitproc>:
  40bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bc24:	4c26      	ldr	r4, [pc, #152]	; (40bcc0 <__register_exitproc+0xa0>)
  40bc26:	4606      	mov	r6, r0
  40bc28:	4688      	mov	r8, r1
  40bc2a:	4691      	mov	r9, r2
  40bc2c:	6825      	ldr	r5, [r4, #0]
  40bc2e:	469a      	mov	sl, r3
  40bc30:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40bc34:	2c00      	cmp	r4, #0
  40bc36:	d03a      	beq.n	40bcae <__register_exitproc+0x8e>
  40bc38:	6860      	ldr	r0, [r4, #4]
  40bc3a:	281f      	cmp	r0, #31
  40bc3c:	dc19      	bgt.n	40bc72 <__register_exitproc+0x52>
  40bc3e:	1c41      	adds	r1, r0, #1
  40bc40:	b186      	cbz	r6, 40bc64 <__register_exitproc+0x44>
  40bc42:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40bc46:	2201      	movs	r2, #1
  40bc48:	2e02      	cmp	r6, #2
  40bc4a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40bc4e:	fa02 f200 	lsl.w	r2, r2, r0
  40bc52:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40bc56:	ea43 0302 	orr.w	r3, r3, r2
  40bc5a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40bc5e:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40bc62:	d01e      	beq.n	40bca2 <__register_exitproc+0x82>
  40bc64:	1c83      	adds	r3, r0, #2
  40bc66:	6061      	str	r1, [r4, #4]
  40bc68:	2000      	movs	r0, #0
  40bc6a:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bc72:	4b14      	ldr	r3, [pc, #80]	; (40bcc4 <__register_exitproc+0xa4>)
  40bc74:	b303      	cbz	r3, 40bcb8 <__register_exitproc+0x98>
  40bc76:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bc7a:	f7fe fdbd 	bl	40a7f8 <malloc>
  40bc7e:	4604      	mov	r4, r0
  40bc80:	b1d0      	cbz	r0, 40bcb8 <__register_exitproc+0x98>
  40bc82:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40bc86:	2700      	movs	r7, #0
  40bc88:	2101      	movs	r1, #1
  40bc8a:	6003      	str	r3, [r0, #0]
  40bc8c:	4638      	mov	r0, r7
  40bc8e:	6067      	str	r7, [r4, #4]
  40bc90:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bc94:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40bc98:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40bc9c:	2e00      	cmp	r6, #0
  40bc9e:	d0e1      	beq.n	40bc64 <__register_exitproc+0x44>
  40bca0:	e7cf      	b.n	40bc42 <__register_exitproc+0x22>
  40bca2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40bca6:	431a      	orrs	r2, r3
  40bca8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40bcac:	e7da      	b.n	40bc64 <__register_exitproc+0x44>
  40bcae:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40bcb2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bcb6:	e7bf      	b.n	40bc38 <__register_exitproc+0x18>
  40bcb8:	f04f 30ff 	mov.w	r0, #4294967295
  40bcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bcc0:	0040cff0 	.word	0x0040cff0
  40bcc4:	0040a7f9 	.word	0x0040a7f9

0040bcc8 <_calloc_r>:
  40bcc8:	b510      	push	{r4, lr}
  40bcca:	fb02 f101 	mul.w	r1, r2, r1
  40bcce:	f7fe fd9b 	bl	40a808 <_malloc_r>
  40bcd2:	4604      	mov	r4, r0
  40bcd4:	b168      	cbz	r0, 40bcf2 <_calloc_r+0x2a>
  40bcd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bcda:	f022 0203 	bic.w	r2, r2, #3
  40bcde:	3a04      	subs	r2, #4
  40bce0:	2a24      	cmp	r2, #36	; 0x24
  40bce2:	d814      	bhi.n	40bd0e <_calloc_r+0x46>
  40bce4:	2a13      	cmp	r2, #19
  40bce6:	d806      	bhi.n	40bcf6 <_calloc_r+0x2e>
  40bce8:	4603      	mov	r3, r0
  40bcea:	2200      	movs	r2, #0
  40bcec:	601a      	str	r2, [r3, #0]
  40bcee:	605a      	str	r2, [r3, #4]
  40bcf0:	609a      	str	r2, [r3, #8]
  40bcf2:	4620      	mov	r0, r4
  40bcf4:	bd10      	pop	{r4, pc}
  40bcf6:	2100      	movs	r1, #0
  40bcf8:	2a1b      	cmp	r2, #27
  40bcfa:	6001      	str	r1, [r0, #0]
  40bcfc:	6041      	str	r1, [r0, #4]
  40bcfe:	d90b      	bls.n	40bd18 <_calloc_r+0x50>
  40bd00:	2a24      	cmp	r2, #36	; 0x24
  40bd02:	6081      	str	r1, [r0, #8]
  40bd04:	60c1      	str	r1, [r0, #12]
  40bd06:	d00a      	beq.n	40bd1e <_calloc_r+0x56>
  40bd08:	f100 0310 	add.w	r3, r0, #16
  40bd0c:	e7ed      	b.n	40bcea <_calloc_r+0x22>
  40bd0e:	2100      	movs	r1, #0
  40bd10:	f7fb fbfa 	bl	407508 <memset>
  40bd14:	4620      	mov	r0, r4
  40bd16:	bd10      	pop	{r4, pc}
  40bd18:	f100 0308 	add.w	r3, r0, #8
  40bd1c:	e7e5      	b.n	40bcea <_calloc_r+0x22>
  40bd1e:	6101      	str	r1, [r0, #16]
  40bd20:	f100 0318 	add.w	r3, r0, #24
  40bd24:	6141      	str	r1, [r0, #20]
  40bd26:	e7e0      	b.n	40bcea <_calloc_r+0x22>

0040bd28 <_close_r>:
  40bd28:	b538      	push	{r3, r4, r5, lr}
  40bd2a:	2300      	movs	r3, #0
  40bd2c:	4c06      	ldr	r4, [pc, #24]	; (40bd48 <_close_r+0x20>)
  40bd2e:	4605      	mov	r5, r0
  40bd30:	4608      	mov	r0, r1
  40bd32:	6023      	str	r3, [r4, #0]
  40bd34:	f7f6 fc86 	bl	402644 <_close>
  40bd38:	1c43      	adds	r3, r0, #1
  40bd3a:	d000      	beq.n	40bd3e <_close_r+0x16>
  40bd3c:	bd38      	pop	{r3, r4, r5, pc}
  40bd3e:	6823      	ldr	r3, [r4, #0]
  40bd40:	2b00      	cmp	r3, #0
  40bd42:	d0fb      	beq.n	40bd3c <_close_r+0x14>
  40bd44:	602b      	str	r3, [r5, #0]
  40bd46:	bd38      	pop	{r3, r4, r5, pc}
  40bd48:	20401838 	.word	0x20401838

0040bd4c <_fclose_r>:
  40bd4c:	2900      	cmp	r1, #0
  40bd4e:	d03d      	beq.n	40bdcc <_fclose_r+0x80>
  40bd50:	b570      	push	{r4, r5, r6, lr}
  40bd52:	4605      	mov	r5, r0
  40bd54:	460c      	mov	r4, r1
  40bd56:	b108      	cbz	r0, 40bd5c <_fclose_r+0x10>
  40bd58:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bd5a:	b37b      	cbz	r3, 40bdbc <_fclose_r+0x70>
  40bd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bd60:	b90b      	cbnz	r3, 40bd66 <_fclose_r+0x1a>
  40bd62:	2000      	movs	r0, #0
  40bd64:	bd70      	pop	{r4, r5, r6, pc}
  40bd66:	4628      	mov	r0, r5
  40bd68:	4621      	mov	r1, r4
  40bd6a:	f7fe f891 	bl	409e90 <__sflush_r>
  40bd6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40bd70:	4606      	mov	r6, r0
  40bd72:	b133      	cbz	r3, 40bd82 <_fclose_r+0x36>
  40bd74:	4628      	mov	r0, r5
  40bd76:	69e1      	ldr	r1, [r4, #28]
  40bd78:	4798      	blx	r3
  40bd7a:	2800      	cmp	r0, #0
  40bd7c:	bfb8      	it	lt
  40bd7e:	f04f 36ff 	movlt.w	r6, #4294967295
  40bd82:	89a3      	ldrh	r3, [r4, #12]
  40bd84:	061b      	lsls	r3, r3, #24
  40bd86:	d41c      	bmi.n	40bdc2 <_fclose_r+0x76>
  40bd88:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bd8a:	b141      	cbz	r1, 40bd9e <_fclose_r+0x52>
  40bd8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bd90:	4299      	cmp	r1, r3
  40bd92:	d002      	beq.n	40bd9a <_fclose_r+0x4e>
  40bd94:	4628      	mov	r0, r5
  40bd96:	f7fe fa27 	bl	40a1e8 <_free_r>
  40bd9a:	2300      	movs	r3, #0
  40bd9c:	6323      	str	r3, [r4, #48]	; 0x30
  40bd9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bda0:	b121      	cbz	r1, 40bdac <_fclose_r+0x60>
  40bda2:	4628      	mov	r0, r5
  40bda4:	f7fe fa20 	bl	40a1e8 <_free_r>
  40bda8:	2300      	movs	r3, #0
  40bdaa:	6463      	str	r3, [r4, #68]	; 0x44
  40bdac:	f7fe f9b4 	bl	40a118 <__sfp_lock_acquire>
  40bdb0:	2300      	movs	r3, #0
  40bdb2:	81a3      	strh	r3, [r4, #12]
  40bdb4:	f7fe f9b2 	bl	40a11c <__sfp_lock_release>
  40bdb8:	4630      	mov	r0, r6
  40bdba:	bd70      	pop	{r4, r5, r6, pc}
  40bdbc:	f7fe f9a6 	bl	40a10c <__sinit>
  40bdc0:	e7cc      	b.n	40bd5c <_fclose_r+0x10>
  40bdc2:	4628      	mov	r0, r5
  40bdc4:	6921      	ldr	r1, [r4, #16]
  40bdc6:	f7fe fa0f 	bl	40a1e8 <_free_r>
  40bdca:	e7dd      	b.n	40bd88 <_fclose_r+0x3c>
  40bdcc:	2000      	movs	r0, #0
  40bdce:	4770      	bx	lr

0040bdd0 <_fstat_r>:
  40bdd0:	b538      	push	{r3, r4, r5, lr}
  40bdd2:	2300      	movs	r3, #0
  40bdd4:	4c07      	ldr	r4, [pc, #28]	; (40bdf4 <_fstat_r+0x24>)
  40bdd6:	4605      	mov	r5, r0
  40bdd8:	4608      	mov	r0, r1
  40bdda:	4611      	mov	r1, r2
  40bddc:	6023      	str	r3, [r4, #0]
  40bdde:	f7f6 fc3d 	bl	40265c <_fstat>
  40bde2:	1c43      	adds	r3, r0, #1
  40bde4:	d000      	beq.n	40bde8 <_fstat_r+0x18>
  40bde6:	bd38      	pop	{r3, r4, r5, pc}
  40bde8:	6823      	ldr	r3, [r4, #0]
  40bdea:	2b00      	cmp	r3, #0
  40bdec:	d0fb      	beq.n	40bde6 <_fstat_r+0x16>
  40bdee:	602b      	str	r3, [r5, #0]
  40bdf0:	bd38      	pop	{r3, r4, r5, pc}
  40bdf2:	bf00      	nop
  40bdf4:	20401838 	.word	0x20401838

0040bdf8 <_isatty_r>:
  40bdf8:	b538      	push	{r3, r4, r5, lr}
  40bdfa:	2300      	movs	r3, #0
  40bdfc:	4c06      	ldr	r4, [pc, #24]	; (40be18 <_isatty_r+0x20>)
  40bdfe:	4605      	mov	r5, r0
  40be00:	4608      	mov	r0, r1
  40be02:	6023      	str	r3, [r4, #0]
  40be04:	f7f6 fc3a 	bl	40267c <_isatty>
  40be08:	1c43      	adds	r3, r0, #1
  40be0a:	d000      	beq.n	40be0e <_isatty_r+0x16>
  40be0c:	bd38      	pop	{r3, r4, r5, pc}
  40be0e:	6823      	ldr	r3, [r4, #0]
  40be10:	2b00      	cmp	r3, #0
  40be12:	d0fb      	beq.n	40be0c <_isatty_r+0x14>
  40be14:	602b      	str	r3, [r5, #0]
  40be16:	bd38      	pop	{r3, r4, r5, pc}
  40be18:	20401838 	.word	0x20401838

0040be1c <_lseek_r>:
  40be1c:	b570      	push	{r4, r5, r6, lr}
  40be1e:	4c08      	ldr	r4, [pc, #32]	; (40be40 <_lseek_r+0x24>)
  40be20:	2500      	movs	r5, #0
  40be22:	4606      	mov	r6, r0
  40be24:	4608      	mov	r0, r1
  40be26:	4611      	mov	r1, r2
  40be28:	461a      	mov	r2, r3
  40be2a:	6025      	str	r5, [r4, #0]
  40be2c:	f7f6 fc32 	bl	402694 <_lseek>
  40be30:	1c43      	adds	r3, r0, #1
  40be32:	d000      	beq.n	40be36 <_lseek_r+0x1a>
  40be34:	bd70      	pop	{r4, r5, r6, pc}
  40be36:	6823      	ldr	r3, [r4, #0]
  40be38:	2b00      	cmp	r3, #0
  40be3a:	d0fb      	beq.n	40be34 <_lseek_r+0x18>
  40be3c:	6033      	str	r3, [r6, #0]
  40be3e:	bd70      	pop	{r4, r5, r6, pc}
  40be40:	20401838 	.word	0x20401838

0040be44 <_read_r>:
  40be44:	b570      	push	{r4, r5, r6, lr}
  40be46:	4c08      	ldr	r4, [pc, #32]	; (40be68 <_read_r+0x24>)
  40be48:	2500      	movs	r5, #0
  40be4a:	4606      	mov	r6, r0
  40be4c:	4608      	mov	r0, r1
  40be4e:	4611      	mov	r1, r2
  40be50:	461a      	mov	r2, r3
  40be52:	6025      	str	r5, [r4, #0]
  40be54:	f7f4 fb5a 	bl	40050c <_read>
  40be58:	1c43      	adds	r3, r0, #1
  40be5a:	d000      	beq.n	40be5e <_read_r+0x1a>
  40be5c:	bd70      	pop	{r4, r5, r6, pc}
  40be5e:	6823      	ldr	r3, [r4, #0]
  40be60:	2b00      	cmp	r3, #0
  40be62:	d0fb      	beq.n	40be5c <_read_r+0x18>
  40be64:	6033      	str	r3, [r6, #0]
  40be66:	bd70      	pop	{r4, r5, r6, pc}
  40be68:	20401838 	.word	0x20401838

0040be6c <__gedf2>:
  40be6c:	f04f 3cff 	mov.w	ip, #4294967295
  40be70:	e006      	b.n	40be80 <__cmpdf2+0x4>
  40be72:	bf00      	nop

0040be74 <__ledf2>:
  40be74:	f04f 0c01 	mov.w	ip, #1
  40be78:	e002      	b.n	40be80 <__cmpdf2+0x4>
  40be7a:	bf00      	nop

0040be7c <__cmpdf2>:
  40be7c:	f04f 0c01 	mov.w	ip, #1
  40be80:	f84d cd04 	str.w	ip, [sp, #-4]!
  40be84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40be88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40be8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40be90:	bf18      	it	ne
  40be92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40be96:	d01b      	beq.n	40bed0 <__cmpdf2+0x54>
  40be98:	b001      	add	sp, #4
  40be9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40be9e:	bf0c      	ite	eq
  40bea0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40bea4:	ea91 0f03 	teqne	r1, r3
  40bea8:	bf02      	ittt	eq
  40beaa:	ea90 0f02 	teqeq	r0, r2
  40beae:	2000      	moveq	r0, #0
  40beb0:	4770      	bxeq	lr
  40beb2:	f110 0f00 	cmn.w	r0, #0
  40beb6:	ea91 0f03 	teq	r1, r3
  40beba:	bf58      	it	pl
  40bebc:	4299      	cmppl	r1, r3
  40bebe:	bf08      	it	eq
  40bec0:	4290      	cmpeq	r0, r2
  40bec2:	bf2c      	ite	cs
  40bec4:	17d8      	asrcs	r0, r3, #31
  40bec6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40beca:	f040 0001 	orr.w	r0, r0, #1
  40bece:	4770      	bx	lr
  40bed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bed8:	d102      	bne.n	40bee0 <__cmpdf2+0x64>
  40beda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bede:	d107      	bne.n	40bef0 <__cmpdf2+0x74>
  40bee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bee8:	d1d6      	bne.n	40be98 <__cmpdf2+0x1c>
  40beea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40beee:	d0d3      	beq.n	40be98 <__cmpdf2+0x1c>
  40bef0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40bef4:	4770      	bx	lr
  40bef6:	bf00      	nop

0040bef8 <__aeabi_cdrcmple>:
  40bef8:	4684      	mov	ip, r0
  40befa:	4610      	mov	r0, r2
  40befc:	4662      	mov	r2, ip
  40befe:	468c      	mov	ip, r1
  40bf00:	4619      	mov	r1, r3
  40bf02:	4663      	mov	r3, ip
  40bf04:	e000      	b.n	40bf08 <__aeabi_cdcmpeq>
  40bf06:	bf00      	nop

0040bf08 <__aeabi_cdcmpeq>:
  40bf08:	b501      	push	{r0, lr}
  40bf0a:	f7ff ffb7 	bl	40be7c <__cmpdf2>
  40bf0e:	2800      	cmp	r0, #0
  40bf10:	bf48      	it	mi
  40bf12:	f110 0f00 	cmnmi.w	r0, #0
  40bf16:	bd01      	pop	{r0, pc}

0040bf18 <__aeabi_dcmpeq>:
  40bf18:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bf1c:	f7ff fff4 	bl	40bf08 <__aeabi_cdcmpeq>
  40bf20:	bf0c      	ite	eq
  40bf22:	2001      	moveq	r0, #1
  40bf24:	2000      	movne	r0, #0
  40bf26:	f85d fb08 	ldr.w	pc, [sp], #8
  40bf2a:	bf00      	nop

0040bf2c <__aeabi_dcmplt>:
  40bf2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bf30:	f7ff ffea 	bl	40bf08 <__aeabi_cdcmpeq>
  40bf34:	bf34      	ite	cc
  40bf36:	2001      	movcc	r0, #1
  40bf38:	2000      	movcs	r0, #0
  40bf3a:	f85d fb08 	ldr.w	pc, [sp], #8
  40bf3e:	bf00      	nop

0040bf40 <__aeabi_dcmple>:
  40bf40:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bf44:	f7ff ffe0 	bl	40bf08 <__aeabi_cdcmpeq>
  40bf48:	bf94      	ite	ls
  40bf4a:	2001      	movls	r0, #1
  40bf4c:	2000      	movhi	r0, #0
  40bf4e:	f85d fb08 	ldr.w	pc, [sp], #8
  40bf52:	bf00      	nop

0040bf54 <__aeabi_dcmpge>:
  40bf54:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bf58:	f7ff ffce 	bl	40bef8 <__aeabi_cdrcmple>
  40bf5c:	bf94      	ite	ls
  40bf5e:	2001      	movls	r0, #1
  40bf60:	2000      	movhi	r0, #0
  40bf62:	f85d fb08 	ldr.w	pc, [sp], #8
  40bf66:	bf00      	nop

0040bf68 <__aeabi_dcmpgt>:
  40bf68:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bf6c:	f7ff ffc4 	bl	40bef8 <__aeabi_cdrcmple>
  40bf70:	bf34      	ite	cc
  40bf72:	2001      	movcc	r0, #1
  40bf74:	2000      	movcs	r0, #0
  40bf76:	f85d fb08 	ldr.w	pc, [sp], #8
  40bf7a:	bf00      	nop

0040bf7c <__aeabi_d2iz>:
  40bf7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40bf80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40bf84:	d215      	bcs.n	40bfb2 <__aeabi_d2iz+0x36>
  40bf86:	d511      	bpl.n	40bfac <__aeabi_d2iz+0x30>
  40bf88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40bf8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40bf90:	d912      	bls.n	40bfb8 <__aeabi_d2iz+0x3c>
  40bf92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40bf96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40bf9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40bf9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bfa2:	fa23 f002 	lsr.w	r0, r3, r2
  40bfa6:	bf18      	it	ne
  40bfa8:	4240      	negne	r0, r0
  40bfaa:	4770      	bx	lr
  40bfac:	f04f 0000 	mov.w	r0, #0
  40bfb0:	4770      	bx	lr
  40bfb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40bfb6:	d105      	bne.n	40bfc4 <__aeabi_d2iz+0x48>
  40bfb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40bfbc:	bf08      	it	eq
  40bfbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40bfc2:	4770      	bx	lr
  40bfc4:	f04f 0000 	mov.w	r0, #0
  40bfc8:	4770      	bx	lr
  40bfca:	bf00      	nop

0040bfcc <__aeabi_uldivmod>:
  40bfcc:	b953      	cbnz	r3, 40bfe4 <__aeabi_uldivmod+0x18>
  40bfce:	b94a      	cbnz	r2, 40bfe4 <__aeabi_uldivmod+0x18>
  40bfd0:	2900      	cmp	r1, #0
  40bfd2:	bf08      	it	eq
  40bfd4:	2800      	cmpeq	r0, #0
  40bfd6:	bf1c      	itt	ne
  40bfd8:	f04f 31ff 	movne.w	r1, #4294967295
  40bfdc:	f04f 30ff 	movne.w	r0, #4294967295
  40bfe0:	f000 b83c 	b.w	40c05c <__aeabi_idiv0>
  40bfe4:	b082      	sub	sp, #8
  40bfe6:	46ec      	mov	ip, sp
  40bfe8:	e92d 5000 	stmdb	sp!, {ip, lr}
  40bfec:	f000 f81e 	bl	40c02c <__gnu_uldivmod_helper>
  40bff0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40bff4:	b002      	add	sp, #8
  40bff6:	bc0c      	pop	{r2, r3}
  40bff8:	4770      	bx	lr
  40bffa:	bf00      	nop

0040bffc <__gnu_ldivmod_helper>:
  40bffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c000:	4690      	mov	r8, r2
  40c002:	4606      	mov	r6, r0
  40c004:	460f      	mov	r7, r1
  40c006:	461d      	mov	r5, r3
  40c008:	9c06      	ldr	r4, [sp, #24]
  40c00a:	f000 f829 	bl	40c060 <__divdi3>
  40c00e:	fb08 fc01 	mul.w	ip, r8, r1
  40c012:	4686      	mov	lr, r0
  40c014:	fba8 2300 	umull	r2, r3, r8, r0
  40c018:	fb00 c505 	mla	r5, r0, r5, ip
  40c01c:	1ab2      	subs	r2, r6, r2
  40c01e:	442b      	add	r3, r5
  40c020:	eb67 0303 	sbc.w	r3, r7, r3
  40c024:	e9c4 2300 	strd	r2, r3, [r4]
  40c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c02c <__gnu_uldivmod_helper>:
  40c02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c030:	461d      	mov	r5, r3
  40c032:	4617      	mov	r7, r2
  40c034:	4680      	mov	r8, r0
  40c036:	4689      	mov	r9, r1
  40c038:	9e08      	ldr	r6, [sp, #32]
  40c03a:	f000 f953 	bl	40c2e4 <__udivdi3>
  40c03e:	fb00 f305 	mul.w	r3, r0, r5
  40c042:	fba0 4507 	umull	r4, r5, r0, r7
  40c046:	fb07 3701 	mla	r7, r7, r1, r3
  40c04a:	ebb8 0404 	subs.w	r4, r8, r4
  40c04e:	443d      	add	r5, r7
  40c050:	eb69 0505 	sbc.w	r5, r9, r5
  40c054:	e9c6 4500 	strd	r4, r5, [r6]
  40c058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c05c <__aeabi_idiv0>:
  40c05c:	4770      	bx	lr
  40c05e:	bf00      	nop

0040c060 <__divdi3>:
  40c060:	2900      	cmp	r1, #0
  40c062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c066:	f2c0 80a2 	blt.w	40c1ae <__divdi3+0x14e>
  40c06a:	2600      	movs	r6, #0
  40c06c:	2b00      	cmp	r3, #0
  40c06e:	f2c0 8098 	blt.w	40c1a2 <__divdi3+0x142>
  40c072:	468c      	mov	ip, r1
  40c074:	4690      	mov	r8, r2
  40c076:	469e      	mov	lr, r3
  40c078:	4615      	mov	r5, r2
  40c07a:	4604      	mov	r4, r0
  40c07c:	460f      	mov	r7, r1
  40c07e:	bbcb      	cbnz	r3, 40c0f4 <__divdi3+0x94>
  40c080:	428a      	cmp	r2, r1
  40c082:	d956      	bls.n	40c132 <__divdi3+0xd2>
  40c084:	fab2 f382 	clz	r3, r2
  40c088:	b13b      	cbz	r3, 40c09a <__divdi3+0x3a>
  40c08a:	f1c3 0220 	rsb	r2, r3, #32
  40c08e:	409f      	lsls	r7, r3
  40c090:	409d      	lsls	r5, r3
  40c092:	409c      	lsls	r4, r3
  40c094:	fa20 f202 	lsr.w	r2, r0, r2
  40c098:	4317      	orrs	r7, r2
  40c09a:	0c28      	lsrs	r0, r5, #16
  40c09c:	0c22      	lsrs	r2, r4, #16
  40c09e:	fa1f fe85 	uxth.w	lr, r5
  40c0a2:	fbb7 f1f0 	udiv	r1, r7, r0
  40c0a6:	fb00 7711 	mls	r7, r0, r1, r7
  40c0aa:	fb0e f301 	mul.w	r3, lr, r1
  40c0ae:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c0b2:	42bb      	cmp	r3, r7
  40c0b4:	d907      	bls.n	40c0c6 <__divdi3+0x66>
  40c0b6:	197f      	adds	r7, r7, r5
  40c0b8:	f080 8101 	bcs.w	40c2be <__divdi3+0x25e>
  40c0bc:	42bb      	cmp	r3, r7
  40c0be:	f240 80fe 	bls.w	40c2be <__divdi3+0x25e>
  40c0c2:	3902      	subs	r1, #2
  40c0c4:	442f      	add	r7, r5
  40c0c6:	1aff      	subs	r7, r7, r3
  40c0c8:	b2a4      	uxth	r4, r4
  40c0ca:	fbb7 f3f0 	udiv	r3, r7, r0
  40c0ce:	fb00 7713 	mls	r7, r0, r3, r7
  40c0d2:	fb0e fe03 	mul.w	lr, lr, r3
  40c0d6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c0da:	45be      	cmp	lr, r7
  40c0dc:	d906      	bls.n	40c0ec <__divdi3+0x8c>
  40c0de:	197f      	adds	r7, r7, r5
  40c0e0:	f080 80eb 	bcs.w	40c2ba <__divdi3+0x25a>
  40c0e4:	45be      	cmp	lr, r7
  40c0e6:	f240 80e8 	bls.w	40c2ba <__divdi3+0x25a>
  40c0ea:	3b02      	subs	r3, #2
  40c0ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40c0f0:	2200      	movs	r2, #0
  40c0f2:	e003      	b.n	40c0fc <__divdi3+0x9c>
  40c0f4:	428b      	cmp	r3, r1
  40c0f6:	d90f      	bls.n	40c118 <__divdi3+0xb8>
  40c0f8:	2200      	movs	r2, #0
  40c0fa:	4613      	mov	r3, r2
  40c0fc:	1c34      	adds	r4, r6, #0
  40c0fe:	f04f 0500 	mov.w	r5, #0
  40c102:	bf18      	it	ne
  40c104:	2401      	movne	r4, #1
  40c106:	4260      	negs	r0, r4
  40c108:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40c10c:	4058      	eors	r0, r3
  40c10e:	4051      	eors	r1, r2
  40c110:	1900      	adds	r0, r0, r4
  40c112:	4169      	adcs	r1, r5
  40c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c118:	fab3 f283 	clz	r2, r3
  40c11c:	2a00      	cmp	r2, #0
  40c11e:	f040 8083 	bne.w	40c228 <__divdi3+0x1c8>
  40c122:	4580      	cmp	r8, r0
  40c124:	f240 80cd 	bls.w	40c2c2 <__divdi3+0x262>
  40c128:	428b      	cmp	r3, r1
  40c12a:	f0c0 80ca 	bcc.w	40c2c2 <__divdi3+0x262>
  40c12e:	4613      	mov	r3, r2
  40c130:	e7e4      	b.n	40c0fc <__divdi3+0x9c>
  40c132:	b912      	cbnz	r2, 40c13a <__divdi3+0xda>
  40c134:	2301      	movs	r3, #1
  40c136:	fbb3 f5f2 	udiv	r5, r3, r2
  40c13a:	fab5 f285 	clz	r2, r5
  40c13e:	2a00      	cmp	r2, #0
  40c140:	d13b      	bne.n	40c1ba <__divdi3+0x15a>
  40c142:	1b78      	subs	r0, r7, r5
  40c144:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c148:	fa1f fc85 	uxth.w	ip, r5
  40c14c:	2201      	movs	r2, #1
  40c14e:	0c21      	lsrs	r1, r4, #16
  40c150:	fbb0 f8fe 	udiv	r8, r0, lr
  40c154:	fb0e 0018 	mls	r0, lr, r8, r0
  40c158:	fb0c f308 	mul.w	r3, ip, r8
  40c15c:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40c160:	42bb      	cmp	r3, r7
  40c162:	d908      	bls.n	40c176 <__divdi3+0x116>
  40c164:	197f      	adds	r7, r7, r5
  40c166:	f080 80b0 	bcs.w	40c2ca <__divdi3+0x26a>
  40c16a:	42bb      	cmp	r3, r7
  40c16c:	f240 80ad 	bls.w	40c2ca <__divdi3+0x26a>
  40c170:	f1a8 0802 	sub.w	r8, r8, #2
  40c174:	442f      	add	r7, r5
  40c176:	1aff      	subs	r7, r7, r3
  40c178:	b2a4      	uxth	r4, r4
  40c17a:	fbb7 f3fe 	udiv	r3, r7, lr
  40c17e:	fb0e 7713 	mls	r7, lr, r3, r7
  40c182:	fb0c fc03 	mul.w	ip, ip, r3
  40c186:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c18a:	45bc      	cmp	ip, r7
  40c18c:	d906      	bls.n	40c19c <__divdi3+0x13c>
  40c18e:	197f      	adds	r7, r7, r5
  40c190:	f080 8099 	bcs.w	40c2c6 <__divdi3+0x266>
  40c194:	45bc      	cmp	ip, r7
  40c196:	f240 8096 	bls.w	40c2c6 <__divdi3+0x266>
  40c19a:	3b02      	subs	r3, #2
  40c19c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c1a0:	e7ac      	b.n	40c0fc <__divdi3+0x9c>
  40c1a2:	4252      	negs	r2, r2
  40c1a4:	ea6f 0606 	mvn.w	r6, r6
  40c1a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c1ac:	e761      	b.n	40c072 <__divdi3+0x12>
  40c1ae:	4240      	negs	r0, r0
  40c1b0:	f04f 36ff 	mov.w	r6, #4294967295
  40c1b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c1b8:	e758      	b.n	40c06c <__divdi3+0xc>
  40c1ba:	4095      	lsls	r5, r2
  40c1bc:	f1c2 0120 	rsb	r1, r2, #32
  40c1c0:	fa07 f302 	lsl.w	r3, r7, r2
  40c1c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c1c8:	40cf      	lsrs	r7, r1
  40c1ca:	fa24 f101 	lsr.w	r1, r4, r1
  40c1ce:	4094      	lsls	r4, r2
  40c1d0:	fa1f fc85 	uxth.w	ip, r5
  40c1d4:	4319      	orrs	r1, r3
  40c1d6:	fbb7 f2fe 	udiv	r2, r7, lr
  40c1da:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40c1de:	fb0e 7712 	mls	r7, lr, r2, r7
  40c1e2:	fb0c f302 	mul.w	r3, ip, r2
  40c1e6:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40c1ea:	42bb      	cmp	r3, r7
  40c1ec:	d905      	bls.n	40c1fa <__divdi3+0x19a>
  40c1ee:	197f      	adds	r7, r7, r5
  40c1f0:	d271      	bcs.n	40c2d6 <__divdi3+0x276>
  40c1f2:	42bb      	cmp	r3, r7
  40c1f4:	d96f      	bls.n	40c2d6 <__divdi3+0x276>
  40c1f6:	3a02      	subs	r2, #2
  40c1f8:	442f      	add	r7, r5
  40c1fa:	1aff      	subs	r7, r7, r3
  40c1fc:	b289      	uxth	r1, r1
  40c1fe:	fbb7 f8fe 	udiv	r8, r7, lr
  40c202:	fb0e 7718 	mls	r7, lr, r8, r7
  40c206:	fb0c f008 	mul.w	r0, ip, r8
  40c20a:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40c20e:	4298      	cmp	r0, r3
  40c210:	d906      	bls.n	40c220 <__divdi3+0x1c0>
  40c212:	195b      	adds	r3, r3, r5
  40c214:	d261      	bcs.n	40c2da <__divdi3+0x27a>
  40c216:	4298      	cmp	r0, r3
  40c218:	d95f      	bls.n	40c2da <__divdi3+0x27a>
  40c21a:	f1a8 0802 	sub.w	r8, r8, #2
  40c21e:	442b      	add	r3, r5
  40c220:	1a18      	subs	r0, r3, r0
  40c222:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40c226:	e792      	b.n	40c14e <__divdi3+0xee>
  40c228:	f1c2 0720 	rsb	r7, r2, #32
  40c22c:	fa03 fe02 	lsl.w	lr, r3, r2
  40c230:	fa08 f502 	lsl.w	r5, r8, r2
  40c234:	4091      	lsls	r1, r2
  40c236:	fa28 f307 	lsr.w	r3, r8, r7
  40c23a:	fa2c fc07 	lsr.w	ip, ip, r7
  40c23e:	40f8      	lsrs	r0, r7
  40c240:	ea43 0e0e 	orr.w	lr, r3, lr
  40c244:	4308      	orrs	r0, r1
  40c246:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40c24a:	0c07      	lsrs	r7, r0, #16
  40c24c:	fa1f fa8e 	uxth.w	sl, lr
  40c250:	fbbc f9f8 	udiv	r9, ip, r8
  40c254:	fb08 cc19 	mls	ip, r8, r9, ip
  40c258:	fb0a f109 	mul.w	r1, sl, r9
  40c25c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40c260:	4561      	cmp	r1, ip
  40c262:	d907      	bls.n	40c274 <__divdi3+0x214>
  40c264:	eb1c 0c0e 	adds.w	ip, ip, lr
  40c268:	d232      	bcs.n	40c2d0 <__divdi3+0x270>
  40c26a:	4561      	cmp	r1, ip
  40c26c:	d930      	bls.n	40c2d0 <__divdi3+0x270>
  40c26e:	f1a9 0902 	sub.w	r9, r9, #2
  40c272:	44f4      	add	ip, lr
  40c274:	ebc1 0c0c 	rsb	ip, r1, ip
  40c278:	b280      	uxth	r0, r0
  40c27a:	fbbc f3f8 	udiv	r3, ip, r8
  40c27e:	fb08 cc13 	mls	ip, r8, r3, ip
  40c282:	fb0a fa03 	mul.w	sl, sl, r3
  40c286:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40c28a:	458a      	cmp	sl, r1
  40c28c:	d906      	bls.n	40c29c <__divdi3+0x23c>
  40c28e:	eb11 010e 	adds.w	r1, r1, lr
  40c292:	d225      	bcs.n	40c2e0 <__divdi3+0x280>
  40c294:	458a      	cmp	sl, r1
  40c296:	d923      	bls.n	40c2e0 <__divdi3+0x280>
  40c298:	3b02      	subs	r3, #2
  40c29a:	4471      	add	r1, lr
  40c29c:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40c2a0:	ebca 0101 	rsb	r1, sl, r1
  40c2a4:	fba3 8905 	umull	r8, r9, r3, r5
  40c2a8:	4549      	cmp	r1, r9
  40c2aa:	d303      	bcc.n	40c2b4 <__divdi3+0x254>
  40c2ac:	d103      	bne.n	40c2b6 <__divdi3+0x256>
  40c2ae:	4094      	lsls	r4, r2
  40c2b0:	4544      	cmp	r4, r8
  40c2b2:	d200      	bcs.n	40c2b6 <__divdi3+0x256>
  40c2b4:	3b01      	subs	r3, #1
  40c2b6:	2200      	movs	r2, #0
  40c2b8:	e720      	b.n	40c0fc <__divdi3+0x9c>
  40c2ba:	3b01      	subs	r3, #1
  40c2bc:	e716      	b.n	40c0ec <__divdi3+0x8c>
  40c2be:	3901      	subs	r1, #1
  40c2c0:	e701      	b.n	40c0c6 <__divdi3+0x66>
  40c2c2:	2301      	movs	r3, #1
  40c2c4:	e71a      	b.n	40c0fc <__divdi3+0x9c>
  40c2c6:	3b01      	subs	r3, #1
  40c2c8:	e768      	b.n	40c19c <__divdi3+0x13c>
  40c2ca:	f108 38ff 	add.w	r8, r8, #4294967295
  40c2ce:	e752      	b.n	40c176 <__divdi3+0x116>
  40c2d0:	f109 39ff 	add.w	r9, r9, #4294967295
  40c2d4:	e7ce      	b.n	40c274 <__divdi3+0x214>
  40c2d6:	3a01      	subs	r2, #1
  40c2d8:	e78f      	b.n	40c1fa <__divdi3+0x19a>
  40c2da:	f108 38ff 	add.w	r8, r8, #4294967295
  40c2de:	e79f      	b.n	40c220 <__divdi3+0x1c0>
  40c2e0:	3b01      	subs	r3, #1
  40c2e2:	e7db      	b.n	40c29c <__divdi3+0x23c>

0040c2e4 <__udivdi3>:
  40c2e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40c2e8:	2b00      	cmp	r3, #0
  40c2ea:	d140      	bne.n	40c36e <__udivdi3+0x8a>
  40c2ec:	428a      	cmp	r2, r1
  40c2ee:	4604      	mov	r4, r0
  40c2f0:	4615      	mov	r5, r2
  40c2f2:	d94a      	bls.n	40c38a <__udivdi3+0xa6>
  40c2f4:	fab2 f382 	clz	r3, r2
  40c2f8:	460f      	mov	r7, r1
  40c2fa:	b14b      	cbz	r3, 40c310 <__udivdi3+0x2c>
  40c2fc:	f1c3 0620 	rsb	r6, r3, #32
  40c300:	4099      	lsls	r1, r3
  40c302:	fa00 f403 	lsl.w	r4, r0, r3
  40c306:	fa02 f503 	lsl.w	r5, r2, r3
  40c30a:	40f0      	lsrs	r0, r6
  40c30c:	ea40 0701 	orr.w	r7, r0, r1
  40c310:	0c29      	lsrs	r1, r5, #16
  40c312:	0c26      	lsrs	r6, r4, #16
  40c314:	fa1f fe85 	uxth.w	lr, r5
  40c318:	fbb7 f0f1 	udiv	r0, r7, r1
  40c31c:	fb01 7710 	mls	r7, r1, r0, r7
  40c320:	fb0e f200 	mul.w	r2, lr, r0
  40c324:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40c328:	429a      	cmp	r2, r3
  40c32a:	d907      	bls.n	40c33c <__udivdi3+0x58>
  40c32c:	195b      	adds	r3, r3, r5
  40c32e:	f080 80ea 	bcs.w	40c506 <__udivdi3+0x222>
  40c332:	429a      	cmp	r2, r3
  40c334:	f240 80e7 	bls.w	40c506 <__udivdi3+0x222>
  40c338:	3802      	subs	r0, #2
  40c33a:	442b      	add	r3, r5
  40c33c:	1a9a      	subs	r2, r3, r2
  40c33e:	b2a4      	uxth	r4, r4
  40c340:	fbb2 f3f1 	udiv	r3, r2, r1
  40c344:	fb01 2213 	mls	r2, r1, r3, r2
  40c348:	fb0e fe03 	mul.w	lr, lr, r3
  40c34c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40c350:	4596      	cmp	lr, r2
  40c352:	d906      	bls.n	40c362 <__udivdi3+0x7e>
  40c354:	1952      	adds	r2, r2, r5
  40c356:	f080 80da 	bcs.w	40c50e <__udivdi3+0x22a>
  40c35a:	4596      	cmp	lr, r2
  40c35c:	f240 80d7 	bls.w	40c50e <__udivdi3+0x22a>
  40c360:	3b02      	subs	r3, #2
  40c362:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40c366:	2600      	movs	r6, #0
  40c368:	4631      	mov	r1, r6
  40c36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c36e:	428b      	cmp	r3, r1
  40c370:	d844      	bhi.n	40c3fc <__udivdi3+0x118>
  40c372:	fab3 f683 	clz	r6, r3
  40c376:	2e00      	cmp	r6, #0
  40c378:	d145      	bne.n	40c406 <__udivdi3+0x122>
  40c37a:	4282      	cmp	r2, r0
  40c37c:	f240 80bf 	bls.w	40c4fe <__udivdi3+0x21a>
  40c380:	428b      	cmp	r3, r1
  40c382:	f0c0 80bc 	bcc.w	40c4fe <__udivdi3+0x21a>
  40c386:	4630      	mov	r0, r6
  40c388:	e7ee      	b.n	40c368 <__udivdi3+0x84>
  40c38a:	b912      	cbnz	r2, 40c392 <__udivdi3+0xae>
  40c38c:	2501      	movs	r5, #1
  40c38e:	fbb5 f5f2 	udiv	r5, r5, r2
  40c392:	fab5 f285 	clz	r2, r5
  40c396:	2a00      	cmp	r2, #0
  40c398:	d17b      	bne.n	40c492 <__udivdi3+0x1ae>
  40c39a:	1b4a      	subs	r2, r1, r5
  40c39c:	0c2f      	lsrs	r7, r5, #16
  40c39e:	fa1f fe85 	uxth.w	lr, r5
  40c3a2:	2601      	movs	r6, #1
  40c3a4:	0c23      	lsrs	r3, r4, #16
  40c3a6:	fbb2 f0f7 	udiv	r0, r2, r7
  40c3aa:	fb07 2210 	mls	r2, r7, r0, r2
  40c3ae:	fb0e fc00 	mul.w	ip, lr, r0
  40c3b2:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40c3b6:	458c      	cmp	ip, r1
  40c3b8:	d907      	bls.n	40c3ca <__udivdi3+0xe6>
  40c3ba:	1949      	adds	r1, r1, r5
  40c3bc:	f080 80a1 	bcs.w	40c502 <__udivdi3+0x21e>
  40c3c0:	458c      	cmp	ip, r1
  40c3c2:	f240 809e 	bls.w	40c502 <__udivdi3+0x21e>
  40c3c6:	3802      	subs	r0, #2
  40c3c8:	4429      	add	r1, r5
  40c3ca:	ebcc 0101 	rsb	r1, ip, r1
  40c3ce:	b2a4      	uxth	r4, r4
  40c3d0:	fbb1 f3f7 	udiv	r3, r1, r7
  40c3d4:	fb07 1113 	mls	r1, r7, r3, r1
  40c3d8:	fb0e fe03 	mul.w	lr, lr, r3
  40c3dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40c3e0:	45a6      	cmp	lr, r4
  40c3e2:	d906      	bls.n	40c3f2 <__udivdi3+0x10e>
  40c3e4:	1964      	adds	r4, r4, r5
  40c3e6:	f080 8090 	bcs.w	40c50a <__udivdi3+0x226>
  40c3ea:	45a6      	cmp	lr, r4
  40c3ec:	f240 808d 	bls.w	40c50a <__udivdi3+0x226>
  40c3f0:	3b02      	subs	r3, #2
  40c3f2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40c3f6:	4631      	mov	r1, r6
  40c3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c3fc:	2600      	movs	r6, #0
  40c3fe:	4630      	mov	r0, r6
  40c400:	4631      	mov	r1, r6
  40c402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c406:	f1c6 0520 	rsb	r5, r6, #32
  40c40a:	40b3      	lsls	r3, r6
  40c40c:	fa02 f706 	lsl.w	r7, r2, r6
  40c410:	fa01 f406 	lsl.w	r4, r1, r6
  40c414:	40ea      	lsrs	r2, r5
  40c416:	40e9      	lsrs	r1, r5
  40c418:	fa20 f505 	lsr.w	r5, r0, r5
  40c41c:	431a      	orrs	r2, r3
  40c41e:	4325      	orrs	r5, r4
  40c420:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40c424:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c428:	b293      	uxth	r3, r2
  40c42a:	fbb1 f8fc 	udiv	r8, r1, ip
  40c42e:	fb0c 1118 	mls	r1, ip, r8, r1
  40c432:	fb03 f408 	mul.w	r4, r3, r8
  40c436:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40c43a:	428c      	cmp	r4, r1
  40c43c:	d906      	bls.n	40c44c <__udivdi3+0x168>
  40c43e:	1889      	adds	r1, r1, r2
  40c440:	d269      	bcs.n	40c516 <__udivdi3+0x232>
  40c442:	428c      	cmp	r4, r1
  40c444:	d967      	bls.n	40c516 <__udivdi3+0x232>
  40c446:	f1a8 0802 	sub.w	r8, r8, #2
  40c44a:	4411      	add	r1, r2
  40c44c:	1b09      	subs	r1, r1, r4
  40c44e:	b2ad      	uxth	r5, r5
  40c450:	fbb1 f4fc 	udiv	r4, r1, ip
  40c454:	fb0c 1114 	mls	r1, ip, r4, r1
  40c458:	fb03 fe04 	mul.w	lr, r3, r4
  40c45c:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40c460:	459e      	cmp	lr, r3
  40c462:	d905      	bls.n	40c470 <__udivdi3+0x18c>
  40c464:	189b      	adds	r3, r3, r2
  40c466:	d254      	bcs.n	40c512 <__udivdi3+0x22e>
  40c468:	459e      	cmp	lr, r3
  40c46a:	d952      	bls.n	40c512 <__udivdi3+0x22e>
  40c46c:	3c02      	subs	r4, #2
  40c46e:	4413      	add	r3, r2
  40c470:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40c474:	ebce 0303 	rsb	r3, lr, r3
  40c478:	fba4 8907 	umull	r8, r9, r4, r7
  40c47c:	454b      	cmp	r3, r9
  40c47e:	d303      	bcc.n	40c488 <__udivdi3+0x1a4>
  40c480:	d151      	bne.n	40c526 <__udivdi3+0x242>
  40c482:	40b0      	lsls	r0, r6
  40c484:	4540      	cmp	r0, r8
  40c486:	d24e      	bcs.n	40c526 <__udivdi3+0x242>
  40c488:	2600      	movs	r6, #0
  40c48a:	1e60      	subs	r0, r4, #1
  40c48c:	4631      	mov	r1, r6
  40c48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c492:	f1c2 0620 	rsb	r6, r2, #32
  40c496:	4095      	lsls	r5, r2
  40c498:	fa01 f302 	lsl.w	r3, r1, r2
  40c49c:	fa00 f402 	lsl.w	r4, r0, r2
  40c4a0:	0c2f      	lsrs	r7, r5, #16
  40c4a2:	40f1      	lsrs	r1, r6
  40c4a4:	40f0      	lsrs	r0, r6
  40c4a6:	fa1f fe85 	uxth.w	lr, r5
  40c4aa:	fbb1 f6f7 	udiv	r6, r1, r7
  40c4ae:	4318      	orrs	r0, r3
  40c4b0:	fb07 1116 	mls	r1, r7, r6, r1
  40c4b4:	fb0e f206 	mul.w	r2, lr, r6
  40c4b8:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40c4bc:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40c4c0:	429a      	cmp	r2, r3
  40c4c2:	d905      	bls.n	40c4d0 <__udivdi3+0x1ec>
  40c4c4:	195b      	adds	r3, r3, r5
  40c4c6:	d229      	bcs.n	40c51c <__udivdi3+0x238>
  40c4c8:	429a      	cmp	r2, r3
  40c4ca:	d927      	bls.n	40c51c <__udivdi3+0x238>
  40c4cc:	3e02      	subs	r6, #2
  40c4ce:	442b      	add	r3, r5
  40c4d0:	1a9b      	subs	r3, r3, r2
  40c4d2:	b280      	uxth	r0, r0
  40c4d4:	fbb3 fcf7 	udiv	ip, r3, r7
  40c4d8:	fb07 331c 	mls	r3, r7, ip, r3
  40c4dc:	fb0e f10c 	mul.w	r1, lr, ip
  40c4e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40c4e4:	4299      	cmp	r1, r3
  40c4e6:	d906      	bls.n	40c4f6 <__udivdi3+0x212>
  40c4e8:	195b      	adds	r3, r3, r5
  40c4ea:	d219      	bcs.n	40c520 <__udivdi3+0x23c>
  40c4ec:	4299      	cmp	r1, r3
  40c4ee:	d917      	bls.n	40c520 <__udivdi3+0x23c>
  40c4f0:	f1ac 0c02 	sub.w	ip, ip, #2
  40c4f4:	442b      	add	r3, r5
  40c4f6:	1a5a      	subs	r2, r3, r1
  40c4f8:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40c4fc:	e752      	b.n	40c3a4 <__udivdi3+0xc0>
  40c4fe:	2001      	movs	r0, #1
  40c500:	e732      	b.n	40c368 <__udivdi3+0x84>
  40c502:	3801      	subs	r0, #1
  40c504:	e761      	b.n	40c3ca <__udivdi3+0xe6>
  40c506:	3801      	subs	r0, #1
  40c508:	e718      	b.n	40c33c <__udivdi3+0x58>
  40c50a:	3b01      	subs	r3, #1
  40c50c:	e771      	b.n	40c3f2 <__udivdi3+0x10e>
  40c50e:	3b01      	subs	r3, #1
  40c510:	e727      	b.n	40c362 <__udivdi3+0x7e>
  40c512:	3c01      	subs	r4, #1
  40c514:	e7ac      	b.n	40c470 <__udivdi3+0x18c>
  40c516:	f108 38ff 	add.w	r8, r8, #4294967295
  40c51a:	e797      	b.n	40c44c <__udivdi3+0x168>
  40c51c:	3e01      	subs	r6, #1
  40c51e:	e7d7      	b.n	40c4d0 <__udivdi3+0x1ec>
  40c520:	f10c 3cff 	add.w	ip, ip, #4294967295
  40c524:	e7e7      	b.n	40c4f6 <__udivdi3+0x212>
  40c526:	4620      	mov	r0, r4
  40c528:	2600      	movs	r6, #0
  40c52a:	e71d      	b.n	40c368 <__udivdi3+0x84>
  40c52c:	00000001 	.word	0x00000001
  40c530:	00000002 	.word	0x00000002
  40c534:	00000004 	.word	0x00000004
  40c538:	00000008 	.word	0x00000008
  40c53c:	00000010 	.word	0x00000010
  40c540:	00000020 	.word	0x00000020
  40c544:	00000040 	.word	0x00000040
  40c548:	00000080 	.word	0x00000080
  40c54c:	00000100 	.word	0x00000100
  40c550:	00000200 	.word	0x00000200
  40c554:	00000400 	.word	0x00000400
  40c558:	39414350 	.word	0x39414350
  40c55c:	3a323539 	.word	0x3a323539
  40c560:	706d7420 	.word	0x706d7420
  40c564:	25203a31 	.word	0x25203a31
  40c568:	6d742078 	.word	0x6d742078
  40c56c:	203a3270 	.word	0x203a3270
  40c570:	74207825 	.word	0x74207825
  40c574:	3a33706d 	.word	0x3a33706d
  40c578:	20782520 	.word	0x20782520
  40c57c:	34706d74 	.word	0x34706d74
  40c580:	7825203a 	.word	0x7825203a
  40c584:	00000a0d 	.word	0x00000a0d
  40c588:	0001c200 	.word	0x0001c200
  40c58c:	000000c0 	.word	0x000000c0
  40c590:	00000800 	.word	0x00000800
	...
  40c5a0:	202d462d 	.word	0x202d462d
  40c5a4:	74737953 	.word	0x74737953
  40c5a8:	206b6369 	.word	0x206b6369
  40c5ac:	666e6f63 	.word	0x666e6f63
  40c5b0:	72756769 	.word	0x72756769
  40c5b4:	6f697461 	.word	0x6f697461
  40c5b8:	7265206e 	.word	0x7265206e
  40c5bc:	0d726f72 	.word	0x0d726f72
  40c5c0:	00000000 	.word	0x00000000
  40c5c4:	00000960 	.word	0x00000960
  40c5c8:	000000c0 	.word	0x000000c0
  40c5cc:	00000800 	.word	0x00000800
  40c5d0:	00000000 	.word	0x00000000
  40c5d4:	00006325 	.word	0x00006325
  40c5d8:	73616843 	.word	0x73616843
  40c5dc:	20736973 	.word	0x20736973
  40c5e0:	6f727265 	.word	0x6f727265
  40c5e4:	2e2e2e72 	.word	0x2e2e2e72
  40c5e8:	74756873 	.word	0x74756873
  40c5ec:	676e6974 	.word	0x676e6974
  40c5f0:	776f6420 	.word	0x776f6420
  40c5f4:	0a0d2e6e 	.word	0x0a0d2e6e
  40c5f8:	00000000 	.word	0x00000000
  40c5fc:	00006425 	.word	0x00006425
  40c600:	2044454c 	.word	0x2044454c
  40c604:	72616f62 	.word	0x72616f62
  40c608:	65642064 	.word	0x65642064
  40c60c:	74636574 	.word	0x74636574
  40c610:	69206465 	.word	0x69206465
  40c614:	6c73206e 	.word	0x6c73206e
  40c618:	0020746f 	.word	0x0020746f
  40c61c:	00000a0d 	.word	0x00000a0d
  40c620:	6c656853 	.word	0x6c656853
  40c624:	20302066 	.word	0x20302066
  40c628:	73657270 	.word	0x73657270
  40c62c:	0d746e65 	.word	0x0d746e65
  40c630:	0000000a 	.word	0x0000000a
  40c634:	6c656853 	.word	0x6c656853
  40c638:	20312066 	.word	0x20312066
  40c63c:	73657270 	.word	0x73657270
  40c640:	0d746e65 	.word	0x0d746e65
  40c644:	0000000a 	.word	0x0000000a
  40c648:	6c656853 	.word	0x6c656853
  40c64c:	20322066 	.word	0x20322066
  40c650:	73657270 	.word	0x73657270
  40c654:	0d746e65 	.word	0x0d746e65
  40c658:	0000000a 	.word	0x0000000a
  40c65c:	6c656853 	.word	0x6c656853
  40c660:	20332066 	.word	0x20332066
  40c664:	73657270 	.word	0x73657270
  40c668:	0d746e65 	.word	0x0d746e65
  40c66c:	0000000a 	.word	0x0000000a
  40c670:	61766e49 	.word	0x61766e49
  40c674:	2064696c 	.word	0x2064696c
  40c678:	69726573 	.word	0x69726573
  40c67c:	49206c61 	.word	0x49206c61
  40c680:	68632044 	.word	0x68632044
  40c684:	736b6365 	.word	0x736b6365
  40c688:	0d2e6d75 	.word	0x0d2e6d75
  40c68c:	0000000a 	.word	0x0000000a
  40c690:	6c656873 	.word	0x6c656873
  40c694:	64252066 	.word	0x64252066
  40c698:	6c62203a 	.word	0x6c62203a
  40c69c:	65736575 	.word	0x65736575
  40c6a0:	5b65736e 	.word	0x5b65736e
  40c6a4:	3d5d6425 	.word	0x3d5d6425
  40c6a8:	58257830 	.word	0x58257830
  40c6ac:	00000a0d 	.word	0x00000a0d
  40c6b0:	69766544 	.word	0x69766544
  40c6b4:	20736563 	.word	0x20736563
  40c6b8:	65746564 	.word	0x65746564
  40c6bc:	64657463 	.word	0x64657463
  40c6c0:	206e6f20 	.word	0x206e6f20
  40c6c4:	6c656873 	.word	0x6c656873
  40c6c8:	00002066 	.word	0x00002066
  40c6cc:	39414350 	.word	0x39414350
  40c6d0:	20323539 	.word	0x20323539
  40c6d4:	6f727245 	.word	0x6f727245
  40c6d8:	29732872 	.word	0x29732872
  40c6dc:	206e6f20 	.word	0x206e6f20
  40c6e0:	44504f54 	.word	0x44504f54
  40c6e4:	45564952 	.word	0x45564952
  40c6e8:	00000020 	.word	0x00000020
  40c6ec:	00000020 	.word	0x00000020
  40c6f0:	4f525245 	.word	0x4f525245
  40c6f4:	6e6f2052 	.word	0x6e6f2052
  40c6f8:	756e7520 	.word	0x756e7520
  40c6fc:	20646573 	.word	0x20646573
  40c700:	6e616863 	.word	0x6e616863
  40c704:	736c656e 	.word	0x736c656e
  40c708:	4350203a 	.word	0x4350203a
  40c70c:	35393941 	.word	0x35393941
  40c710:	202d2032 	.word	0x202d2032
  40c714:	746e6f43 	.word	0x746e6f43
  40c718:	6c6c6f72 	.word	0x6c6c6f72
  40c71c:	62207265 	.word	0x62207265
  40c720:	6472616f 	.word	0x6472616f
  40c724:	0d375520 	.word	0x0d375520
  40c728:	0000000a 	.word	0x0000000a
  40c72c:	39414350 	.word	0x39414350
  40c730:	20323539 	.word	0x20323539
  40c734:	6f727245 	.word	0x6f727245
  40c738:	29732872 	.word	0x29732872
  40c73c:	206e6f20 	.word	0x206e6f20
  40c740:	44544f42 	.word	0x44544f42
  40c744:	45564952 	.word	0x45564952
  40c748:	00000020 	.word	0x00000020
  40c74c:	4f525245 	.word	0x4f525245
  40c750:	6e6f2052 	.word	0x6e6f2052
  40c754:	756e7520 	.word	0x756e7520
  40c758:	20646573 	.word	0x20646573
  40c75c:	6e616863 	.word	0x6e616863
  40c760:	736c656e 	.word	0x736c656e
  40c764:	4350203a 	.word	0x4350203a
  40c768:	35393941 	.word	0x35393941
  40c76c:	202d2032 	.word	0x202d2032
  40c770:	746e6f43 	.word	0x746e6f43
  40c774:	6c6c6f72 	.word	0x6c6c6f72
  40c778:	62207265 	.word	0x62207265
  40c77c:	6472616f 	.word	0x6472616f
  40c780:	0d385520 	.word	0x0d385520
  40c784:	0000000a 	.word	0x0000000a
  40c788:	6c656853 	.word	0x6c656853
  40c78c:	20302066 	.word	0x20302066
  40c790:	69746361 	.word	0x69746361
  40c794:	0a0d6576 	.word	0x0a0d6576
  40c798:	00000000 	.word	0x00000000
  40c79c:	6c656853 	.word	0x6c656853
  40c7a0:	20312066 	.word	0x20312066
  40c7a4:	69746361 	.word	0x69746361
  40c7a8:	0a0d6576 	.word	0x0a0d6576
  40c7ac:	00000000 	.word	0x00000000
  40c7b0:	6c656853 	.word	0x6c656853
  40c7b4:	20322066 	.word	0x20322066
  40c7b8:	69746361 	.word	0x69746361
  40c7bc:	0a0d6576 	.word	0x0a0d6576
  40c7c0:	00000000 	.word	0x00000000
  40c7c4:	6c656853 	.word	0x6c656853
  40c7c8:	20332066 	.word	0x20332066
  40c7cc:	69746361 	.word	0x69746361
  40c7d0:	0a0d6576 	.word	0x0a0d6576
  40c7d4:	00000000 	.word	0x00000000
  40c7d8:	726f6f44 	.word	0x726f6f44
  40c7dc:	74616c20 	.word	0x74616c20
  40c7e0:	6f206863 	.word	0x6f206863
  40c7e4:	656e6570 	.word	0x656e6570
  40c7e8:	6b202c64 	.word	0x6b202c64
  40c7ec:	206c6c69 	.word	0x206c6c69
  40c7f0:	206c6c61 	.word	0x206c6c61
  40c7f4:	6c656873 	.word	0x6c656873
  40c7f8:	20736576 	.word	0x20736576
  40c7fc:	20726f66 	.word	0x20726f66
  40c800:	65666173 	.word	0x65666173
  40c804:	0d2e7974 	.word	0x0d2e7974
  40c808:	0000000a 	.word	0x0000000a
  40c80c:	6d206f4e 	.word	0x6d206f4e
  40c810:	2065726f 	.word	0x2065726f
  40c814:	6d6f6f72 	.word	0x6d6f6f72
  40c818:	726f6620 	.word	0x726f6620
  40c81c:	44454c20 	.word	0x44454c20
  40c820:	616f6220 	.word	0x616f6220
  40c824:	69206472 	.word	0x69206472
  40c828:	2e6f666e 	.word	0x2e6f666e
  40c82c:	6e614320 	.word	0x6e614320
  40c830:	20746f6e 	.word	0x20746f6e
  40c834:	63617274 	.word	0x63617274
  40c838:	696d206b 	.word	0x696d206b
  40c83c:	6574756e 	.word	0x6574756e
  40c840:	61737520 	.word	0x61737520
  40c844:	66206567 	.word	0x66206567
  40c848:	6120726f 	.word	0x6120726f
  40c84c:	74696464 	.word	0x74696464
  40c850:	616e6f69 	.word	0x616e6f69
  40c854:	6f62206c 	.word	0x6f62206c
  40c858:	73647261 	.word	0x73647261
  40c85c:	000a0d2e 	.word	0x000a0d2e
  40c860:	2d2a0a0d 	.word	0x2d2a0a0d
  40c864:	2d2d2d2d 	.word	0x2d2d2d2d
  40c868:	2d2d2d2d 	.word	0x2d2d2d2d
  40c86c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c870:	2d2d2d2d 	.word	0x2d2d2d2d
  40c874:	2d2d2d2d 	.word	0x2d2d2d2d
  40c878:	2d2d2d2d 	.word	0x2d2d2d2d
  40c87c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c880:	2d2d2d2d 	.word	0x2d2d2d2d
  40c884:	2d2d2d2d 	.word	0x2d2d2d2d
  40c888:	2d2d2d2d 	.word	0x2d2d2d2d
  40c88c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c890:	2d2d2d2d 	.word	0x2d2d2d2d
  40c894:	0d2a2d2d 	.word	0x0d2a2d2d
  40c898:	0000000a 	.word	0x0000000a
  40c89c:	43454c45 	.word	0x43454c45
  40c8a0:	434f5254 	.word	0x434f5254
  40c8a4:	4556414c 	.word	0x4556414c
  40c8a8:	6f430a0d 	.word	0x6f430a0d
  40c8ac:	69727970 	.word	0x69727970
  40c8b0:	20746867 	.word	0x20746867
  40c8b4:	20296328 	.word	0x20296328
  40c8b8:	36313032 	.word	0x36313032
  40c8bc:	61655320 	.word	0x61655320
  40c8c0:	6853206c 	.word	0x6853206c
  40c8c4:	646c6569 	.word	0x646c6569
  40c8c8:	6e49202c 	.word	0x6e49202c
  40c8cc:	0d202e63 	.word	0x0d202e63
  40c8d0:	0000000a 	.word	0x0000000a
  40c8d4:	64726148 	.word	0x64726148
  40c8d8:	65726177 	.word	0x65726177
  40c8dc:	72655620 	.word	0x72655620
  40c8e0:	6e6f6973 	.word	0x6e6f6973
  40c8e4:	6c43203a 	.word	0x6c43203a
  40c8e8:	69737361 	.word	0x69737361
  40c8ec:	2b2b2063 	.word	0x2b2b2063
  40c8f0:	6f53202b 	.word	0x6f53202b
  40c8f4:	61777466 	.word	0x61777466
  40c8f8:	56206572 	.word	0x56206572
  40c8fc:	69737265 	.word	0x69737265
  40c900:	203a6e6f 	.word	0x203a6e6f
  40c904:	37302e30 	.word	0x37302e30
  40c908:	000a0d37 	.word	0x000a0d37
  40c90c:	2a2a0a0d 	.word	0x2a2a0a0d
  40c910:	534e492a 	.word	0x534e492a
  40c914:	4c4c4154 	.word	0x4c4c4154
  40c918:	4c204445 	.word	0x4c204445
  40c91c:	42204445 	.word	0x42204445
  40c920:	4452414f 	.word	0x4452414f
  40c924:	2a2a2a53 	.word	0x2a2a2a53
  40c928:	0a0d0a0d 	.word	0x0a0d0a0d
  40c92c:	00000000 	.word	0x00000000
  40c930:	44454c20 	.word	0x44454c20
  40c934:	4c207c20 	.word	0x4c207c20
  40c938:	42204445 	.word	0x42204445
  40c93c:	4452414f 	.word	0x4452414f
  40c940:	20202020 	.word	0x20202020
  40c944:	2020207c 	.word	0x2020207c
  40c948:	45505055 	.word	0x45505055
  40c94c:	49532052 	.word	0x49532052
  40c950:	20204544 	.word	0x20204544
  40c954:	7c202020 	.word	0x7c202020
  40c958:	4c202020 	.word	0x4c202020
  40c95c:	5245574f 	.word	0x5245574f
  40c960:	44495320 	.word	0x44495320
  40c964:	20202045 	.word	0x20202045
  40c968:	000a0d20 	.word	0x000a0d20
  40c96c:	544f4c53 	.word	0x544f4c53
  40c970:	20207c20 	.word	0x20207c20
  40c974:	44492020 	.word	0x44492020
  40c978:	20202020 	.word	0x20202020
  40c97c:	20202020 	.word	0x20202020
  40c980:	5248207c 	.word	0x5248207c
  40c984:	494d3a53 	.word	0x494d3a53
  40c988:	2020204e 	.word	0x2020204e
  40c98c:	45544420 	.word	0x45544420
  40c990:	7c202020 	.word	0x7c202020
  40c994:	53524820 	.word	0x53524820
  40c998:	4e494d3a 	.word	0x4e494d3a
  40c99c:	20202020 	.word	0x20202020
  40c9a0:	20455444 	.word	0x20455444
  40c9a4:	0a0d2020 	.word	0x0a0d2020
  40c9a8:	00000000 	.word	0x00000000
  40c9ac:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9b0:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9b4:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9b8:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9bc:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9c0:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9c4:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9c8:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9cc:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9d0:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9d4:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9d8:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9dc:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9e0:	2d2d2d2d 	.word	0x2d2d2d2d
  40c9e4:	0a0d2d2d 	.word	0x0a0d2d2d
  40c9e8:	00000000 	.word	0x00000000
  40c9ec:	20643225 	.word	0x20643225
  40c9f0:	20202020 	.word	0x20202020
  40c9f4:	58323025 	.word	0x58323025
  40c9f8:	58323025 	.word	0x58323025
  40c9fc:	58323025 	.word	0x58323025
  40ca00:	58323025 	.word	0x58323025
  40ca04:	58323025 	.word	0x58323025
  40ca08:	58323025 	.word	0x58323025
  40ca0c:	30252020 	.word	0x30252020
  40ca10:	253a6434 	.word	0x253a6434
  40ca14:	20643230 	.word	0x20643230
  40ca18:	20202020 	.word	0x20202020
  40ca1c:	64323025 	.word	0x64323025
  40ca20:	20202020 	.word	0x20202020
  40ca24:	34302520 	.word	0x34302520
  40ca28:	30253a64 	.word	0x30253a64
  40ca2c:	20206432 	.word	0x20206432
  40ca30:	25202020 	.word	0x25202020
  40ca34:	0d643230 	.word	0x0d643230
  40ca38:	0000000a 	.word	0x0000000a
  40ca3c:	2058414d 	.word	0x2058414d
  40ca40:	3a455444 	.word	0x3a455444
  40ca44:	00000020 	.word	0x00000020
  40ca48:	4e494d20 	.word	0x4e494d20
  40ca4c:	45544420 	.word	0x45544420
  40ca50:	0000203a 	.word	0x0000203a
  40ca54:	41544f54 	.word	0x41544f54
  40ca58:	4153204c 	.word	0x4153204c
  40ca5c:	4954494e 	.word	0x4954494e
  40ca60:	5420455a 	.word	0x5420455a
  40ca64:	3a454d49 	.word	0x3a454d49
  40ca68:	00000020 	.word	0x00000020
  40ca6c:	00000030 	.word	0x00000030
  40ca70:	0000003a 	.word	0x0000003a
  40ca74:	4f542020 	.word	0x4f542020
  40ca78:	204c4154 	.word	0x204c4154
  40ca7c:	494e4153 	.word	0x494e4153
  40ca80:	455a4954 	.word	0x455a4954
  40ca84:	43594320 	.word	0x43594320
  40ca88:	3a53454c 	.word	0x3a53454c
  40ca8c:	00000020 	.word	0x00000020
  40ca90:	2a2a0a0d 	.word	0x2a2a0a0d
  40ca94:	5359532a 	.word	0x5359532a
  40ca98:	204d4554 	.word	0x204d4554
  40ca9c:	54534554 	.word	0x54534554
  40caa0:	2a2a2a53 	.word	0x2a2a2a53
  40caa4:	0a0d0a0d 	.word	0x0a0d0a0d
  40caa8:	00000000 	.word	0x00000000
  40caac:	2044454c 	.word	0x2044454c
  40cab0:	76697244 	.word	0x76697244
  40cab4:	203a7265 	.word	0x203a7265
  40cab8:	20504f54 	.word	0x20504f54
  40cabc:	2e2e3028 	.word	0x2e2e3028
  40cac0:	20202937 	.word	0x20202937
  40cac4:	20202020 	.word	0x20202020
  40cac8:	20202020 	.word	0x20202020
  40cacc:	20202020 	.word	0x20202020
  40cad0:	00202020 	.word	0x00202020
  40cad4:	00002046 	.word	0x00002046
  40cad8:	00002050 	.word	0x00002050
  40cadc:	2044454c 	.word	0x2044454c
  40cae0:	76697244 	.word	0x76697244
  40cae4:	203a7265 	.word	0x203a7265
  40cae8:	54544f42 	.word	0x54544f42
  40caec:	28204d4f 	.word	0x28204d4f
  40caf0:	312e2e30 	.word	0x312e2e30
  40caf4:	20202931 	.word	0x20202931
  40caf8:	20202020 	.word	0x20202020
  40cafc:	20202020 	.word	0x20202020
  40cb00:	00202020 	.word	0x00202020
  40cb04:	73616c46 	.word	0x73616c46
  40cb08:	30282068 	.word	0x30282068
  40cb0c:	29342e2e 	.word	0x29342e2e
  40cb10:	20202020 	.word	0x20202020
  40cb14:	20202020 	.word	0x20202020
  40cb18:	20202020 	.word	0x20202020
  40cb1c:	20202020 	.word	0x20202020
  40cb20:	20202020 	.word	0x20202020
  40cb24:	20202020 	.word	0x20202020
  40cb28:	00202020 	.word	0x00202020
  40cb2c:	2044454c 	.word	0x2044454c
  40cb30:	72616f42 	.word	0x72616f42
  40cb34:	65532064 	.word	0x65532064
  40cb38:	6c616972 	.word	0x6c616972
  40cb3c:	20444920 	.word	0x20444920
  40cb40:	63656843 	.word	0x63656843
  40cb44:	6d75736b 	.word	0x6d75736b
  40cb48:	30282073 	.word	0x30282073
  40cb4c:	29342e2e 	.word	0x29342e2e
  40cb50:	00202020 	.word	0x00202020
  40cb54:	2044454c 	.word	0x2044454c
  40cb58:	72616f42 	.word	0x72616f42
  40cb5c:	69532064 	.word	0x69532064
  40cb60:	4d206564 	.word	0x4d206564
  40cb64:	55207861 	.word	0x55207861
  40cb68:	65676173 	.word	0x65676173
  40cb6c:	2e302820 	.word	0x2e302820
  40cb70:	2029372e 	.word	0x2029372e
  40cb74:	20202020 	.word	0x20202020
  40cb78:	00202020 	.word	0x00202020
  40cb7c:	67617355 	.word	0x67617355
  40cb80:	74532065 	.word	0x74532065
  40cb84:	74637572 	.word	0x74637572
  40cb88:	65704f20 	.word	0x65704f20
  40cb8c:	6c53206e 	.word	0x6c53206e
  40cb90:	2073746f 	.word	0x2073746f
  40cb94:	20202020 	.word	0x20202020
  40cb98:	20202020 	.word	0x20202020
  40cb9c:	20202020 	.word	0x20202020
  40cba0:	00202020 	.word	0x00202020
  40cba4:	0a0d2046 	.word	0x0a0d2046
  40cba8:	00000000 	.word	0x00000000
  40cbac:	0a0d2050 	.word	0x0a0d2050
  40cbb0:	00000000 	.word	0x00000000
  40cbb4:	2a2a0a0d 	.word	0x2a2a0a0d
  40cbb8:	44454c2a 	.word	0x44454c2a
  40cbbc:	414f4220 	.word	0x414f4220
  40cbc0:	20534452 	.word	0x20534452
  40cbc4:	5453414d 	.word	0x5453414d
  40cbc8:	4c205245 	.word	0x4c205245
  40cbcc:	2a545349 	.word	0x2a545349
  40cbd0:	0a0d2a2a 	.word	0x0a0d2a2a
  40cbd4:	00000a0d 	.word	0x00000a0d
  40cbd8:	29643225 	.word	0x29643225
  40cbdc:	32302520 	.word	0x32302520
  40cbe0:	32302558 	.word	0x32302558
  40cbe4:	32302558 	.word	0x32302558
  40cbe8:	32302558 	.word	0x32302558
  40cbec:	32302558 	.word	0x32302558
  40cbf0:	32302558 	.word	0x32302558
  40cbf4:	00002058 	.word	0x00002058
  40cbf8:	504f5420 	.word	0x504f5420
  40cbfc:	00000a0d 	.word	0x00000a0d
  40cc00:	544f4220 	.word	0x544f4220
  40cc04:	00000a0d 	.word	0x00000a0d
  40cc08:	0a0d0a0d 	.word	0x0a0d0a0d
  40cc0c:	00000000 	.word	0x00000000
  40cc10:	65707954 	.word	0x65707954
  40cc14:	27482720 	.word	0x27482720
  40cc18:	726f6620 	.word	0x726f6620
  40cc1c:	6c656820 	.word	0x6c656820
  40cc20:	0a0d2e70 	.word	0x0a0d2e70
  40cc24:	00000a0d 	.word	0x00000a0d
  40cc28:	2a2a0a0d 	.word	0x2a2a0a0d
  40cc2c:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc30:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc34:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc38:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc3c:	0d2a2a2d 	.word	0x0d2a2a2d
  40cc40:	0000000a 	.word	0x0000000a
  40cc44:	6c452020 	.word	0x6c452020
  40cc48:	72746365 	.word	0x72746365
  40cc4c:	616c636f 	.word	0x616c636f
  40cc50:	48206576 	.word	0x48206576
  40cc54:	0d504c45 	.word	0x0d504c45
  40cc58:	0000000a 	.word	0x0000000a
  40cc5c:	2d2d2a2a 	.word	0x2d2d2a2a
  40cc60:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc64:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc68:	2d2d2d2d 	.word	0x2d2d2d2d
  40cc6c:	2a2d2d2d 	.word	0x2a2d2d2d
  40cc70:	000a0d2a 	.word	0x000a0d2a
  40cc74:	20202020 	.word	0x20202020
  40cc78:	20202048 	.word	0x20202048
  40cc7c:	20202020 	.word	0x20202020
  40cc80:	54202d20 	.word	0x54202d20
  40cc84:	20736968 	.word	0x20736968
  40cc88:	706c6568 	.word	0x706c6568
  40cc8c:	6e656d20 	.word	0x6e656d20
  40cc90:	000a0d75 	.word	0x000a0d75
  40cc94:	20202020 	.word	0x20202020
  40cc98:	20202044 	.word	0x20202044
  40cc9c:	20202020 	.word	0x20202020
  40cca0:	53202d20 	.word	0x53202d20
  40cca4:	20776f68 	.word	0x20776f68
  40cca8:	72727563 	.word	0x72727563
  40ccac:	20746e65 	.word	0x20746e65
  40ccb0:	20455444 	.word	0x20455444
  40ccb4:	74746573 	.word	0x74746573
  40ccb8:	0d676e69 	.word	0x0d676e69
  40ccbc:	0000000a 	.word	0x0000000a
  40ccc0:	20202020 	.word	0x20202020
  40ccc4:	78202044 	.word	0x78202044
  40ccc8:	20202078 	.word	0x20202078
  40cccc:	43202d20 	.word	0x43202d20
  40ccd0:	676e6168 	.word	0x676e6168
  40ccd4:	6e692065 	.word	0x6e692065
  40ccd8:	61697469 	.word	0x61697469
  40ccdc:	5444206c 	.word	0x5444206c
  40cce0:	6f742045 	.word	0x6f742045
  40cce4:	20787820 	.word	0x20787820
  40cce8:	756e696d 	.word	0x756e696d
  40ccec:	20736574 	.word	0x20736574
  40ccf0:	72656877 	.word	0x72656877
  40ccf4:	20322065 	.word	0x20322065
  40ccf8:	78203d3e 	.word	0x78203d3e
  40ccfc:	3d3e2078 	.word	0x3d3e2078
  40cd00:	2e393520 	.word	0x2e393520
  40cd04:	00000a0d 	.word	0x00000a0d
  40cd08:	20202020 	.word	0x20202020
  40cd0c:	20202053 	.word	0x20202053
  40cd10:	20202020 	.word	0x20202020
  40cd14:	53202d20 	.word	0x53202d20
  40cd18:	65747379 	.word	0x65747379
  40cd1c:	7473206d 	.word	0x7473206d
  40cd20:	73757461 	.word	0x73757461
  40cd24:	00000a0d 	.word	0x00000a0d
  40cd28:	0000003e 	.word	0x0000003e
  40cd2c:	74696e49 	.word	0x74696e49
  40cd30:	206c6169 	.word	0x206c6169
  40cd34:	20455444 	.word	0x20455444
  40cd38:	20746573 	.word	0x20746573
  40cd3c:	203a6f74 	.word	0x203a6f74
  40cd40:	00000000 	.word	0x00000000
  40cd44:	6e696d20 	.word	0x6e696d20
  40cd48:	73657475 	.word	0x73657475
  40cd4c:	3e0a0d2e 	.word	0x3e0a0d2e
  40cd50:	00000000 	.word	0x00000000
  40cd54:	74696e49 	.word	0x74696e49
  40cd58:	206c6169 	.word	0x206c6169
  40cd5c:	20455444 	.word	0x20455444
  40cd60:	20776f6e 	.word	0x20776f6e
  40cd64:	20746573 	.word	0x20746573
  40cd68:	203a6f74 	.word	0x203a6f74
  40cd6c:	00000000 	.word	0x00000000
  40cd70:	003e0a0d 	.word	0x003e0a0d
  40cd74:	6f727245 	.word	0x6f727245
  40cd78:	49202e72 	.word	0x49202e72
  40cd7c:	6974696e 	.word	0x6974696e
  40cd80:	44206c61 	.word	0x44206c61
  40cd84:	6e204554 	.word	0x6e204554
  40cd88:	6d20746f 	.word	0x6d20746f
  40cd8c:	6669646f 	.word	0x6669646f
  40cd90:	2e646569 	.word	0x2e646569
  40cd94:	000a0d20 	.word	0x000a0d20
  40cd98:	7473754d 	.word	0x7473754d
  40cd9c:	20656220 	.word	0x20656220
  40cda0:	61762061 	.word	0x61762061
  40cda4:	2065756c 	.word	0x2065756c
  40cda8:	77746562 	.word	0x77746562
  40cdac:	206e6565 	.word	0x206e6565
  40cdb0:	6e612032 	.word	0x6e612032
  40cdb4:	39352064 	.word	0x39352064
  40cdb8:	3e0a0d2e 	.word	0x3e0a0d2e
  40cdbc:	00000000 	.word	0x00000000
  40cdc0:	726f6f44 	.word	0x726f6f44
  40cdc4:	74616c20 	.word	0x74616c20
  40cdc8:	64206863 	.word	0x64206863
  40cdcc:	63657465 	.word	0x63657465
  40cdd0:	0d646574 	.word	0x0d646574
  40cdd4:	0000000a 	.word	0x0000000a
  40cdd8:	696c6156 	.word	0x696c6156
  40cddc:	656b2064 	.word	0x656b2064
  40cde0:	64617079 	.word	0x64617079
  40cde4:	646f6320 	.word	0x646f6320
  40cde8:	65642065 	.word	0x65642065
  40cdec:	74636574 	.word	0x74636574
  40cdf0:	0a0d6465 	.word	0x0a0d6465
  40cdf4:	00000000 	.word	0x00000000
  40cdf8:	696e6153 	.word	0x696e6153
  40cdfc:	697a6974 	.word	0x697a6974
  40ce00:	0a0d676e 	.word	0x0a0d676e
  40ce04:	00000000 	.word	0x00000000
  40ce08:	6c207441 	.word	0x6c207441
  40ce0c:	74736165 	.word	0x74736165
  40ce10:	656e6f20 	.word	0x656e6f20
  40ce14:	65687320 	.word	0x65687320
  40ce18:	6920666c 	.word	0x6920666c
  40ce1c:	72702073 	.word	0x72702073
  40ce20:	6e657365 	.word	0x6e657365
  40ce24:	62202c74 	.word	0x62202c74
  40ce28:	6e207475 	.word	0x6e207475
  40ce2c:	6564206f 	.word	0x6564206f
  40ce30:	65636976 	.word	0x65636976
  40ce34:	6f742073 	.word	0x6f742073
  40ce38:	20656220 	.word	0x20656220
  40ce3c:	61656c63 	.word	0x61656c63
  40ce40:	2e64656e 	.word	0x2e64656e
  40ce44:	00000a0d 	.word	0x00000a0d
  40ce48:	73206f4e 	.word	0x73206f4e
  40ce4c:	766c6568 	.word	0x766c6568
  40ce50:	202c7365 	.word	0x202c7365
  40ce54:	7320726f 	.word	0x7320726f
  40ce58:	766c6568 	.word	0x766c6568
  40ce5c:	61207365 	.word	0x61207365
  40ce60:	70206572 	.word	0x70206572
  40ce64:	20747361 	.word	0x20747361
  40ce68:	6566696c 	.word	0x6566696c
  40ce6c:	656d6974 	.word	0x656d6974
  40ce70:	00000a0d 	.word	0x00000a0d
  40ce74:	696e6173 	.word	0x696e6173
  40ce78:	657a6974 	.word	0x657a6974
  40ce7c:	756e694d 	.word	0x756e694d
  40ce80:	3a736574 	.word	0x3a736574
  40ce84:	646c2520 	.word	0x646c2520
  40ce88:	706d7420 	.word	0x706d7420
  40ce8c:	696e6153 	.word	0x696e6153
  40ce90:	657a6974 	.word	0x657a6974
  40ce94:	756e694d 	.word	0x756e694d
  40ce98:	3a736574 	.word	0x3a736574
  40ce9c:	646c2520 	.word	0x646c2520
  40cea0:	00000a0d 	.word	0x00000a0d
  40cea4:	6c656853 	.word	0x6c656853
  40cea8:	6c632066 	.word	0x6c632066
  40ceac:	0d6e6165 	.word	0x0d6e6165
  40ceb0:	0000000a 	.word	0x0000000a
  40ceb4:	726f6f44 	.word	0x726f6f44
  40ceb8:	74616c20 	.word	0x74616c20
  40cebc:	6f206863 	.word	0x6f206863
  40cec0:	656e6570 	.word	0x656e6570
  40cec4:	73202c64 	.word	0x73202c64
  40cec8:	74747568 	.word	0x74747568
  40cecc:	20676e69 	.word	0x20676e69
  40ced0:	6e776f64 	.word	0x6e776f64
  40ced4:	6c6c6120 	.word	0x6c6c6120
  40ced8:	6f727020 	.word	0x6f727020
  40cedc:	73736563 	.word	0x73736563
  40cee0:	0a0d7365 	.word	0x0a0d7365
  40cee4:	00000000 	.word	0x00000000

0040cee8 <_ctype_>:
  40cee8:	20202000 20202020 28282020 20282828     .         ((((( 
  40cef8:	20202020 20202020 20202020 20202020                     
  40cf08:	10108820 10101010 10101010 10101010      ...............
  40cf18:	04040410 04040404 10040404 10101010     ................
  40cf28:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40cf38:	01010101 01010101 01010101 10101010     ................
  40cf48:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40cf58:	02020202 02020202 02020202 10101010     ................
  40cf68:	00000020 00000000 00000000 00000000      ...............
	...
  40cfec:	00000043                                C...

0040cff0 <_global_impure_ptr>:
  40cff0:	20400098 0000000a                       ..@ ....

0040cff8 <zeroes.6911>:
  40cff8:	30303030 30303030 30303030 30303030     0000000000000000

0040d008 <blanks.6910>:
  40d008:	20202020 20202020 20202020 20202020                     
  40d018:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40d028:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40d038:	00000000 33323130 37363534 62613938     ....0123456789ab
  40d048:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40d058:	00000030 69666e49 7974696e 00000000     0...Infinity....
  40d068:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

0040d078 <__mprec_tens>:
  40d078:	00000000 3ff00000 00000000 40240000     .......?......$@
  40d088:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40d098:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40d0a8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40d0b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40d0c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40d0d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40d0e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40d0f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40d108:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40d118:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40d128:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40d138:	79d99db4 44ea7843                       ...yCx.D

0040d140 <p05.5302>:
  40d140:	00000005 00000019 0000007d 00000000     ........}.......

0040d150 <__mprec_bigtens>:
  40d150:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40d160:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40d170:	7f73bf3c 75154fdd                       <.s..O.u

0040d178 <_init>:
  40d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d17a:	bf00      	nop
  40d17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d17e:	bc08      	pop	{r3}
  40d180:	469e      	mov	lr, r3
  40d182:	4770      	bx	lr

0040d184 <__init_array_start>:
  40d184:	00408e49 	.word	0x00408e49

0040d188 <__frame_dummy_init_array_entry>:
  40d188:	00400165                                e.@.

0040d18c <_fini>:
  40d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d18e:	bf00      	nop
  40d190:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d192:	bc08      	pop	{r3}
  40d194:	469e      	mov	lr, r3
  40d196:	4770      	bx	lr

0040d198 <__fini_array_start>:
  40d198:	00400141 	.word	0x00400141
