
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000da4c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040da4c  0040da4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000914  20400000  0040da54  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000f58  20400914  0040e368  00018914  2**2
                  ALLOC
  4 .stack        00002004  2040186c  0040f2c0  00018914  2**0
                  ALLOC
  5 .heap         00000200  20403870  004112c4  00018914  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  00018914  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00018947  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016146  00000000  00000000  000189a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002bbf  00000000  00000000  0002eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b076  00000000  00000000  000316a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012d0  00000000  00000000  0003c71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001158  00000000  00000000  0003d9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021801  00000000  00000000  0003eb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011fff  00000000  00000000  00060346  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008f9c7  00000000  00000000  00072345  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005fdc  00000000  00000000  00101d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403870 	.word	0x20403870
  400004:	00402365 	.word	0x00402365
  400008:	004023e9 	.word	0x004023e9
  40000c:	004023e9 	.word	0x004023e9
  400010:	004023e9 	.word	0x004023e9
  400014:	004023e9 	.word	0x004023e9
  400018:	004023e9 	.word	0x004023e9
	...
  40002c:	004023e9 	.word	0x004023e9
  400030:	004023e9 	.word	0x004023e9
  400034:	00000000 	.word	0x00000000
  400038:	004023e9 	.word	0x004023e9
  40003c:	00403a75 	.word	0x00403a75
  400040:	004023e9 	.word	0x004023e9
  400044:	004023e9 	.word	0x004023e9
  400048:	004023e9 	.word	0x004023e9
  40004c:	004023e9 	.word	0x004023e9
  400050:	004023e9 	.word	0x004023e9
  400054:	004023e9 	.word	0x004023e9
  400058:	004023e9 	.word	0x004023e9
  40005c:	004023e9 	.word	0x004023e9
  400060:	004023e9 	.word	0x004023e9
  400064:	00000000 	.word	0x00000000
  400068:	0040139d 	.word	0x0040139d
  40006c:	004013b5 	.word	0x004013b5
  400070:	004013cd 	.word	0x004013cd
  400074:	00403be5 	.word	0x00403be5
  400078:	004023e9 	.word	0x004023e9
  40007c:	004023e9 	.word	0x004023e9
  400080:	004013e5 	.word	0x004013e5
  400084:	004013fd 	.word	0x004013fd
  400088:	004023e9 	.word	0x004023e9
  40008c:	004023e9 	.word	0x004023e9
  400090:	004023e9 	.word	0x004023e9
  400094:	004023e9 	.word	0x004023e9
  400098:	004023e9 	.word	0x004023e9
  40009c:	004023e9 	.word	0x004023e9
  4000a0:	004023e9 	.word	0x004023e9
  4000a4:	004023e9 	.word	0x004023e9
  4000a8:	004023e9 	.word	0x004023e9
  4000ac:	004023e9 	.word	0x004023e9
  4000b0:	004023e9 	.word	0x004023e9
  4000b4:	00401269 	.word	0x00401269
  4000b8:	004023e9 	.word	0x004023e9
  4000bc:	00403f39 	.word	0x00403f39
  4000c0:	004023e9 	.word	0x004023e9
  4000c4:	004023e9 	.word	0x004023e9
  4000c8:	004023e9 	.word	0x004023e9
  4000cc:	004023e9 	.word	0x004023e9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004023e9 	.word	0x004023e9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004023e9 	.word	0x004023e9
  4000e0:	0040127d 	.word	0x0040127d
  4000e4:	004023e9 	.word	0x004023e9
  4000e8:	004023e9 	.word	0x004023e9
  4000ec:	004023e9 	.word	0x004023e9
  4000f0:	004023e9 	.word	0x004023e9
  4000f4:	004023e9 	.word	0x004023e9
  4000f8:	004023e9 	.word	0x004023e9
  4000fc:	004023e9 	.word	0x004023e9
  400100:	004023e9 	.word	0x004023e9
  400104:	004023e9 	.word	0x004023e9
  400108:	004023e9 	.word	0x004023e9
  40010c:	004023e9 	.word	0x004023e9
  400110:	004023e9 	.word	0x004023e9
	...
  400120:	004023e9 	.word	0x004023e9
  400124:	004023e9 	.word	0x004023e9
  400128:	004023e9 	.word	0x004023e9
  40012c:	004023e9 	.word	0x004023e9
  400130:	004023e9 	.word	0x004023e9
  400134:	00000000 	.word	0x00000000
  400138:	004023e9 	.word	0x004023e9
  40013c:	004023e9 	.word	0x004023e9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400914 	.word	0x20400914
  40015c:	00000000 	.word	0x00000000
  400160:	0040da54 	.word	0x0040da54

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040da54 	.word	0x0040da54
  400190:	20400918 	.word	0x20400918
  400194:	0040da54 	.word	0x0040da54
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00401511 	.word	0x00401511
  400218:	0040157d 	.word	0x0040157d
  40021c:	004015ed 	.word	0x004015ed

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00401549 	.word	0x00401549
  40028c:	00401665 	.word	0x00401665

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401681 	.word	0x00401681
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401699 	.word	0x00401699
  400400:	004016b5 	.word	0x004016b5

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00402559 	.word	0x00402559
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00401415 	.word	0x00401415
  400500:	0040148d 	.word	0x0040148d
  400504:	004023f1 	.word	0x004023f1
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	20400a24 	.word	0x20400a24
  400560:	20400a2c 	.word	0x20400a2c

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	20400a28 	.word	0x20400a28
  4005d0:	20400a2c 	.word	0x20400a2c

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	004016d1 	.word	0x004016d1

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b3b      	ldr	r3, [pc, #236]	; (400b60 <board_init+0xf4>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b3a      	ldr	r3, [pc, #232]	; (400b64 <board_init+0xf8>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b39      	ldr	r3, [pc, #228]	; (400b68 <board_init+0xfc>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b38      	ldr	r3, [pc, #224]	; (400b6c <board_init+0x100>)
  400a8a:	4798      	blx	r3
	
	ioport_set_pin_dir(ECLAVE_PSUPPLY_ONn, IOPORT_DIR_OUTPUT);
  400a8c:	2002      	movs	r0, #2
  400a8e:	2101      	movs	r1, #1
  400a90:	4b35      	ldr	r3, [pc, #212]	; (400b68 <board_init+0xfc>)
  400a92:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_HIGH);
  400a94:	2002      	movs	r0, #2
  400a96:	2101      	movs	r1, #1
  400a98:	4b34      	ldr	r3, [pc, #208]	; (400b6c <board_init+0x100>)
  400a9a:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_LED_OEn, IOPORT_DIR_OUTPUT);
  400a9c:	2001      	movs	r0, #1
  400a9e:	2101      	movs	r1, #1
  400aa0:	4b31      	ldr	r3, [pc, #196]	; (400b68 <board_init+0xfc>)
  400aa2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH);
  400aa4:	2001      	movs	r0, #1
  400aa6:	2101      	movs	r1, #1
  400aa8:	4b30      	ldr	r3, [pc, #192]	; (400b6c <board_init+0x100>)
  400aaa:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_MFP, IOPORT_DIR_OUTPUT);
  400aac:	2000      	movs	r0, #0
  400aae:	2101      	movs	r1, #1
  400ab0:	4b2d      	ldr	r3, [pc, #180]	; (400b68 <board_init+0xfc>)
  400ab2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_MFP, IOPORT_PIN_LEVEL_LOW);  //high=1x multiplier, low=4x multiplier 10apr15;
  400ab4:	2000      	movs	r0, #0
  400ab6:	2100      	movs	r1, #0
  400ab8:	4b2c      	ldr	r3, [pc, #176]	; (400b6c <board_init+0x100>)
  400aba:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_SOLENOID, IOPORT_DIR_OUTPUT);
  400abc:	2015      	movs	r0, #21
  400abe:	2101      	movs	r1, #1
  400ac0:	4b29      	ldr	r3, [pc, #164]	; (400b68 <board_init+0xfc>)
  400ac2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  400ac4:	2015      	movs	r0, #21
  400ac6:	2100      	movs	r1, #0
  400ac8:	4b28      	ldr	r3, [pc, #160]	; (400b6c <board_init+0x100>)
  400aca:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_DOORSW1, IOPORT_DIR_INPUT);
  400acc:	204d      	movs	r0, #77	; 0x4d
  400ace:	2100      	movs	r1, #0
  400ad0:	4b25      	ldr	r3, [pc, #148]	; (400b68 <board_init+0xfc>)
  400ad2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_DOORSW2, IOPORT_DIR_INPUT);
  400ad4:	204e      	movs	r0, #78	; 0x4e
  400ad6:	2100      	movs	r1, #0
  400ad8:	4b23      	ldr	r3, [pc, #140]	; (400b68 <board_init+0xfc>)
  400ada:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400adc:	200b      	movs	r0, #11
  400ade:	2100      	movs	r1, #0
  400ae0:	4b21      	ldr	r3, [pc, #132]	; (400b68 <board_init+0xfc>)
  400ae2:	4798      	blx	r3
  400ae4:	200b      	movs	r0, #11
  400ae6:	2188      	movs	r1, #136	; 0x88
  400ae8:	4b21      	ldr	r3, [pc, #132]	; (400b70 <board_init+0x104>)
  400aea:	4798      	blx	r3
  400aec:	200b      	movs	r0, #11
  400aee:	2102      	movs	r1, #2
  400af0:	4b20      	ldr	r3, [pc, #128]	; (400b74 <board_init+0x108>)
  400af2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400af4:	2000      	movs	r0, #0
  400af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400afa:	2200      	movs	r2, #0
  400afc:	4b1e      	ldr	r3, [pc, #120]	; (400b78 <board_init+0x10c>)
  400afe:	4798      	blx	r3
  400b00:	2000      	movs	r0, #0
  400b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400b06:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <board_init+0x110>)
  400b08:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400b0a:	2003      	movs	r0, #3
  400b0c:	2100      	movs	r1, #0
  400b0e:	4b18      	ldr	r3, [pc, #96]	; (400b70 <board_init+0x104>)
  400b10:	4798      	blx	r3
  400b12:	2003      	movs	r0, #3
  400b14:	4b1a      	ldr	r3, [pc, #104]	; (400b80 <board_init+0x114>)
  400b16:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400b18:	2004      	movs	r0, #4
  400b1a:	2100      	movs	r1, #0
  400b1c:	4b14      	ldr	r3, [pc, #80]	; (400b70 <board_init+0x104>)
  400b1e:	4798      	blx	r3
  400b20:	2004      	movs	r0, #4
  400b22:	4b17      	ldr	r3, [pc, #92]	; (400b80 <board_init+0x114>)
  400b24:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(QSPI_QIO3_GPIO, QSPI_QIO3_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400b26:	200b      	movs	r0, #11
  400b28:	2101      	movs	r1, #1
  400b2a:	4b11      	ldr	r3, [pc, #68]	; (400b70 <board_init+0x104>)
  400b2c:	4798      	blx	r3
  400b2e:	200b      	movs	r0, #11
  400b30:	4b13      	ldr	r3, [pc, #76]	; (400b80 <board_init+0x114>)
  400b32:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400b34:	2020      	movs	r0, #32
  400b36:	2102      	movs	r1, #2
  400b38:	4b0d      	ldr	r3, [pc, #52]	; (400b70 <board_init+0x104>)
  400b3a:	4798      	blx	r3
  400b3c:	2020      	movs	r0, #32
  400b3e:	4b10      	ldr	r3, [pc, #64]	; (400b80 <board_init+0x114>)
  400b40:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400b42:	2021      	movs	r0, #33	; 0x21
  400b44:	2102      	movs	r1, #2
  400b46:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <board_init+0x104>)
  400b48:	4798      	blx	r3
  400b4a:	2021      	movs	r0, #33	; 0x21
  400b4c:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <board_init+0x114>)
  400b4e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400b50:	2023      	movs	r0, #35	; 0x23
  400b52:	2102      	movs	r1, #2
  400b54:	4b06      	ldr	r3, [pc, #24]	; (400b70 <board_init+0x104>)
  400b56:	4798      	blx	r3
  400b58:	2023      	movs	r0, #35	; 0x23
  400b5a:	4b09      	ldr	r3, [pc, #36]	; (400b80 <board_init+0x114>)
  400b5c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	004005ed 	.word	0x004005ed
  400b68:	004008ad 	.word	0x004008ad
  400b6c:	00400935 	.word	0x00400935
  400b70:	00400791 	.word	0x00400791
  400b74:	004009a1 	.word	0x004009a1
  400b78:	00400691 	.word	0x00400691
  400b7c:	0040065d 	.word	0x0040065d
  400b80:	00400615 	.word	0x00400615

00400b84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b84:	b480      	push	{r7}
  400b86:	b083      	sub	sp, #12
  400b88:	af00      	add	r7, sp, #0
  400b8a:	4603      	mov	r3, r0
  400b8c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8e:	4908      	ldr	r1, [pc, #32]	; (400bb0 <NVIC_EnableIRQ+0x2c>)
  400b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b94:	095b      	lsrs	r3, r3, #5
  400b96:	79fa      	ldrb	r2, [r7, #7]
  400b98:	f002 021f 	and.w	r2, r2, #31
  400b9c:	2001      	movs	r0, #1
  400b9e:	fa00 f202 	lsl.w	r2, r0, r2
  400ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ba6:	370c      	adds	r7, #12
  400ba8:	46bd      	mov	sp, r7
  400baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bae:	4770      	bx	lr
  400bb0:	e000e100 	.word	0xe000e100

00400bb4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b083      	sub	sp, #12
  400bb8:	af00      	add	r7, sp, #0
  400bba:	4603      	mov	r3, r0
  400bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bbe:	4909      	ldr	r1, [pc, #36]	; (400be4 <NVIC_ClearPendingIRQ+0x30>)
  400bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bc4:	095b      	lsrs	r3, r3, #5
  400bc6:	79fa      	ldrb	r2, [r7, #7]
  400bc8:	f002 021f 	and.w	r2, r2, #31
  400bcc:	2001      	movs	r0, #1
  400bce:	fa00 f202 	lsl.w	r2, r0, r2
  400bd2:	3360      	adds	r3, #96	; 0x60
  400bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400bd8:	370c      	adds	r7, #12
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	e000e100 	.word	0xe000e100

00400be8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	4603      	mov	r3, r0
  400bf0:	6039      	str	r1, [r7, #0]
  400bf2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	da0b      	bge.n	400c14 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400bfc:	490d      	ldr	r1, [pc, #52]	; (400c34 <NVIC_SetPriority+0x4c>)
  400bfe:	79fb      	ldrb	r3, [r7, #7]
  400c00:	f003 030f 	and.w	r3, r3, #15
  400c04:	3b04      	subs	r3, #4
  400c06:	683a      	ldr	r2, [r7, #0]
  400c08:	b2d2      	uxtb	r2, r2
  400c0a:	0152      	lsls	r2, r2, #5
  400c0c:	b2d2      	uxtb	r2, r2
  400c0e:	440b      	add	r3, r1
  400c10:	761a      	strb	r2, [r3, #24]
  400c12:	e009      	b.n	400c28 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c14:	4908      	ldr	r1, [pc, #32]	; (400c38 <NVIC_SetPriority+0x50>)
  400c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c1a:	683a      	ldr	r2, [r7, #0]
  400c1c:	b2d2      	uxtb	r2, r2
  400c1e:	0152      	lsls	r2, r2, #5
  400c20:	b2d2      	uxtb	r2, r2
  400c22:	440b      	add	r3, r1
  400c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400c28:	370c      	adds	r7, #12
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	e000ed00 	.word	0xe000ed00
  400c38:	e000e100 	.word	0xe000e100

00400c3c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400c3c:	b480      	push	{r7}
  400c3e:	b083      	sub	sp, #12
  400c40:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c42:	f3ef 8310 	mrs	r3, PRIMASK
  400c46:	603b      	str	r3, [r7, #0]
  return(result);
  400c48:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	bf0c      	ite	eq
  400c4e:	2301      	moveq	r3, #1
  400c50:	2300      	movne	r3, #0
  400c52:	b2db      	uxtb	r3, r3
  400c54:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c56:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c5c:	4b04      	ldr	r3, [pc, #16]	; (400c70 <cpu_irq_save+0x34>)
  400c5e:	2200      	movs	r2, #0
  400c60:	701a      	strb	r2, [r3, #0]
	return flags;
  400c62:	687b      	ldr	r3, [r7, #4]
}
  400c64:	4618      	mov	r0, r3
  400c66:	370c      	adds	r7, #12
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400000 	.word	0x20400000

00400c74 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	return (flags);
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	2b00      	cmp	r3, #0
  400c80:	bf14      	ite	ne
  400c82:	2301      	movne	r3, #1
  400c84:	2300      	moveq	r3, #0
  400c86:	b2db      	uxtb	r3, r3
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c92:	4770      	bx	lr

00400c94 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c94:	b580      	push	{r7, lr}
  400c96:	b082      	sub	sp, #8
  400c98:	af00      	add	r7, sp, #0
  400c9a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c9c:	6878      	ldr	r0, [r7, #4]
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <cpu_irq_restore+0x28>)
  400ca0:	4798      	blx	r3
  400ca2:	4603      	mov	r3, r0
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d005      	beq.n	400cb4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <cpu_irq_restore+0x2c>)
  400caa:	2201      	movs	r2, #1
  400cac:	701a      	strb	r2, [r3, #0]
  400cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cb2:	b662      	cpsie	i
}
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	00400c75 	.word	0x00400c75
  400cc0:	20400000 	.word	0x20400000

00400cc4 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400cc4:	b480      	push	{r7}
  400cc6:	b083      	sub	sp, #12
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	460b      	mov	r3, r1
  400cce:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400cd0:	370c      	adds	r7, #12
  400cd2:	46bd      	mov	sp, r7
  400cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop

00400cdc <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b084      	sub	sp, #16
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	4603      	mov	r3, r0
  400cfc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400cfe:	79fb      	ldrb	r3, [r7, #7]
  400d00:	4a0a      	ldr	r2, [pc, #40]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d02:	5cd3      	ldrb	r3, [r2, r3]
  400d04:	2bff      	cmp	r3, #255	; 0xff
  400d06:	d100      	bne.n	400d0a <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400d08:	e7fe      	b.n	400d08 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400d0a:	4b09      	ldr	r3, [pc, #36]	; (400d30 <sleepmgr_lock_mode+0x3c>)
  400d0c:	4798      	blx	r3
  400d0e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400d10:	79fb      	ldrb	r3, [r7, #7]
  400d12:	4a06      	ldr	r2, [pc, #24]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d14:	5cd2      	ldrb	r2, [r2, r3]
  400d16:	3201      	adds	r2, #1
  400d18:	b2d1      	uxtb	r1, r2
  400d1a:	4a04      	ldr	r2, [pc, #16]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d1c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400d1e:	68f8      	ldr	r0, [r7, #12]
  400d20:	4b04      	ldr	r3, [pc, #16]	; (400d34 <sleepmgr_lock_mode+0x40>)
  400d22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400d24:	3710      	adds	r7, #16
  400d26:	46bd      	mov	sp, r7
  400d28:	bd80      	pop	{r7, pc}
  400d2a:	bf00      	nop
  400d2c:	20400a1c 	.word	0x20400a1c
  400d30:	00400c3d 	.word	0x00400c3d
  400d34:	00400c95 	.word	0x00400c95

00400d38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400d38:	b480      	push	{r7}
  400d3a:	b083      	sub	sp, #12
  400d3c:	af00      	add	r7, sp, #0
  400d3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d40:	687b      	ldr	r3, [r7, #4]
  400d42:	2b07      	cmp	r3, #7
  400d44:	d825      	bhi.n	400d92 <osc_get_rate+0x5a>
  400d46:	a201      	add	r2, pc, #4	; (adr r2, 400d4c <osc_get_rate+0x14>)
  400d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d4c:	00400d6d 	.word	0x00400d6d
  400d50:	00400d73 	.word	0x00400d73
  400d54:	00400d79 	.word	0x00400d79
  400d58:	00400d7f 	.word	0x00400d7f
  400d5c:	00400d83 	.word	0x00400d83
  400d60:	00400d87 	.word	0x00400d87
  400d64:	00400d8b 	.word	0x00400d8b
  400d68:	00400d8f 	.word	0x00400d8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d70:	e010      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d76:	e00d      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d7c:	e00a      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d7e:	4b08      	ldr	r3, [pc, #32]	; (400da0 <osc_get_rate+0x68>)
  400d80:	e008      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d82:	4b08      	ldr	r3, [pc, #32]	; (400da4 <osc_get_rate+0x6c>)
  400d84:	e006      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d86:	4b08      	ldr	r3, [pc, #32]	; (400da8 <osc_get_rate+0x70>)
  400d88:	e004      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d8a:	4b08      	ldr	r3, [pc, #32]	; (400dac <osc_get_rate+0x74>)
  400d8c:	e002      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <osc_get_rate+0x70>)
  400d90:	e000      	b.n	400d94 <osc_get_rate+0x5c>
	}

	return 0;
  400d92:	2300      	movs	r3, #0
}
  400d94:	4618      	mov	r0, r3
  400d96:	370c      	adds	r7, #12
  400d98:	46bd      	mov	sp, r7
  400d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d9e:	4770      	bx	lr
  400da0:	003d0900 	.word	0x003d0900
  400da4:	007a1200 	.word	0x007a1200
  400da8:	00b71b00 	.word	0x00b71b00
  400dac:	00f42400 	.word	0x00f42400

00400db0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400db4:	2006      	movs	r0, #6
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <sysclk_get_main_hz+0x1c>)
  400db8:	4798      	blx	r3
  400dba:	4602      	mov	r2, r0
  400dbc:	4613      	mov	r3, r2
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	4413      	add	r3, r2
  400dc2:	009a      	lsls	r2, r3, #2
  400dc4:	4413      	add	r3, r2
  400dc6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400dc8:	4618      	mov	r0, r3
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	00400d39 	.word	0x00400d39

00400dd0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <sysclk_get_cpu_hz+0x10>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400dda:	4618      	mov	r0, r3
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400db1 	.word	0x00400db1

00400de4 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400dec:	687b      	ldr	r3, [r7, #4]
  400dee:	4a09      	ldr	r2, [pc, #36]	; (400e14 <afec_find_inst_num+0x30>)
  400df0:	4293      	cmp	r3, r2
  400df2:	d101      	bne.n	400df8 <afec_find_inst_num+0x14>
		return 1;
  400df4:	2301      	movs	r3, #1
  400df6:	e006      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400df8:	687b      	ldr	r3, [r7, #4]
  400dfa:	4a07      	ldr	r2, [pc, #28]	; (400e18 <afec_find_inst_num+0x34>)
  400dfc:	4293      	cmp	r3, r2
  400dfe:	d101      	bne.n	400e04 <afec_find_inst_num+0x20>
		return 0;
  400e00:	2300      	movs	r3, #0
  400e02:	e000      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400e04:	2300      	movs	r3, #0
}
  400e06:	4618      	mov	r0, r3
  400e08:	370c      	adds	r7, #12
  400e0a:	46bd      	mov	sp, r7
  400e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	40064000 	.word	0x40064000
  400e18:	4003c000 	.word	0x4003c000

00400e1c <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	4a09      	ldr	r2, [pc, #36]	; (400e4c <afec_find_pid+0x30>)
  400e28:	4293      	cmp	r3, r2
  400e2a:	d101      	bne.n	400e30 <afec_find_pid+0x14>
		return ID_AFEC1;
  400e2c:	2328      	movs	r3, #40	; 0x28
  400e2e:	e006      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	4a07      	ldr	r2, [pc, #28]	; (400e50 <afec_find_pid+0x34>)
  400e34:	4293      	cmp	r3, r2
  400e36:	d101      	bne.n	400e3c <afec_find_pid+0x20>
		return ID_AFEC0;
  400e38:	231d      	movs	r3, #29
  400e3a:	e000      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400e3c:	231d      	movs	r3, #29
}
  400e3e:	4618      	mov	r0, r3
  400e40:	370c      	adds	r7, #12
  400e42:	46bd      	mov	sp, r7
  400e44:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	40064000 	.word	0x40064000
  400e50:	4003c000 	.word	0x4003c000

00400e54 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400e54:	b480      	push	{r7}
  400e56:	b085      	sub	sp, #20
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400e5e:	2300      	movs	r3, #0
  400e60:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e62:	683b      	ldr	r3, [r7, #0]
  400e64:	7cdb      	ldrb	r3, [r3, #19]
  400e66:	2b00      	cmp	r3, #0
  400e68:	d002      	beq.n	400e70 <afec_set_config+0x1c>
  400e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e6e:	e000      	b.n	400e72 <afec_set_config+0x1e>
  400e70:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e72:	683b      	ldr	r3, [r7, #0]
  400e74:	6859      	ldr	r1, [r3, #4]
  400e76:	683b      	ldr	r3, [r7, #0]
  400e78:	689b      	ldr	r3, [r3, #8]
  400e7a:	fbb1 f3f3 	udiv	r3, r1, r3
  400e7e:	3b01      	subs	r3, #1
  400e80:	021b      	lsls	r3, r3, #8
  400e82:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e84:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e86:	683b      	ldr	r3, [r7, #0]
  400e88:	7c1b      	ldrb	r3, [r3, #16]
  400e8a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400e8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400e90:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e92:	683b      	ldr	r3, [r7, #0]
  400e94:	7c5b      	ldrb	r3, [r3, #17]
  400e96:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400e9c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400e9e:	683b      	ldr	r3, [r7, #0]
  400ea0:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400ea2:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400ea8:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400eaa:	687b      	ldr	r3, [r7, #4]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400eb0:	683b      	ldr	r3, [r7, #0]
  400eb2:	7d1b      	ldrb	r3, [r3, #20]
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d002      	beq.n	400ebe <afec_set_config+0x6a>
  400eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ebc:	e000      	b.n	400ec0 <afec_set_config+0x6c>
  400ebe:	2200      	movs	r2, #0
			(config->resolution) |
  400ec0:	683b      	ldr	r3, [r7, #0]
  400ec2:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ec4:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400ec6:	683b      	ldr	r3, [r7, #0]
  400ec8:	7d5b      	ldrb	r3, [r3, #21]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d002      	beq.n	400ed4 <afec_set_config+0x80>
  400ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400ed2:	e000      	b.n	400ed6 <afec_set_config+0x82>
  400ed4:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400ed6:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400edc:	683b      	ldr	r3, [r7, #0]
  400ede:	7d9b      	ldrb	r3, [r3, #22]
  400ee0:	021b      	lsls	r3, r3, #8
  400ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400ee6:	f043 020c 	orr.w	r2, r3, #12
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400ef0:	3714      	adds	r7, #20
  400ef2:	46bd      	mov	sp, r7
  400ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop

00400efc <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b086      	sub	sp, #24
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	460b      	mov	r3, r1
  400f06:	607a      	str	r2, [r7, #4]
  400f08:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400f0a:	897b      	ldrh	r3, [r7, #10]
  400f0c:	68f8      	ldr	r0, [r7, #12]
  400f0e:	4619      	mov	r1, r3
  400f10:	4b1d      	ldr	r3, [pc, #116]	; (400f88 <afec_ch_set_config+0x8c>)
  400f12:	4798      	blx	r3
	uint32_t reg = 0;
  400f14:	2300      	movs	r3, #0
  400f16:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400f1c:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400f1e:	897b      	ldrh	r3, [r7, #10]
  400f20:	2201      	movs	r2, #1
  400f22:	fa02 f303 	lsl.w	r3, r2, r3
  400f26:	43db      	mvns	r3, r3
  400f28:	697a      	ldr	r2, [r7, #20]
  400f2a:	4013      	ands	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	781b      	ldrb	r3, [r3, #0]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d004      	beq.n	400f40 <afec_ch_set_config+0x44>
  400f36:	897b      	ldrh	r3, [r7, #10]
  400f38:	2201      	movs	r2, #1
  400f3a:	fa02 f303 	lsl.w	r3, r2, r3
  400f3e:	e000      	b.n	400f42 <afec_ch_set_config+0x46>
  400f40:	2300      	movs	r3, #0
  400f42:	697a      	ldr	r2, [r7, #20]
  400f44:	4313      	orrs	r3, r2
  400f46:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	697a      	ldr	r2, [r7, #20]
  400f4c:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f52:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400f54:	897b      	ldrh	r3, [r7, #10]
  400f56:	005b      	lsls	r3, r3, #1
  400f58:	2203      	movs	r2, #3
  400f5a:	fa02 f303 	lsl.w	r3, r2, r3
  400f5e:	43db      	mvns	r3, r3
  400f60:	697a      	ldr	r2, [r7, #20]
  400f62:	4013      	ands	r3, r2
  400f64:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400f66:	687b      	ldr	r3, [r7, #4]
  400f68:	785b      	ldrb	r3, [r3, #1]
  400f6a:	461a      	mov	r2, r3
  400f6c:	897b      	ldrh	r3, [r7, #10]
  400f6e:	005b      	lsls	r3, r3, #1
  400f70:	fa02 f303 	lsl.w	r3, r2, r3
  400f74:	461a      	mov	r2, r3
  400f76:	697b      	ldr	r3, [r7, #20]
  400f78:	4313      	orrs	r3, r2
  400f7a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	697a      	ldr	r2, [r7, #20]
  400f80:	655a      	str	r2, [r3, #84]	; 0x54
}
  400f82:	3718      	adds	r7, #24
  400f84:	46bd      	mov	sp, r7
  400f86:	bd80      	pop	{r7, pc}
  400f88:	00400cc5 	.word	0x00400cc5

00400f8c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	b082      	sub	sp, #8
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	2200      	movs	r2, #0
  400f98:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f9a:	4b12      	ldr	r3, [pc, #72]	; (400fe4 <afec_get_config_defaults+0x58>)
  400f9c:	4798      	blx	r3
  400f9e:	4602      	mov	r2, r0
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	4a10      	ldr	r2, [pc, #64]	; (400fe8 <afec_get_config_defaults+0x5c>)
  400fa8:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400fb0:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400fb2:	687b      	ldr	r3, [r7, #4]
  400fb4:	2202      	movs	r2, #2
  400fb6:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2201      	movs	r2, #1
  400fbc:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	2201      	movs	r2, #1
  400fc2:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2200      	movs	r2, #0
  400fc8:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2201      	movs	r2, #1
  400fce:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2201      	movs	r2, #1
  400fd4:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	2201      	movs	r2, #1
  400fda:	759a      	strb	r2, [r3, #22]
}
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	00400dd1 	.word	0x00400dd1
  400fe8:	005b8d80 	.word	0x005b8d80

00400fec <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400fec:	b480      	push	{r7}
  400fee:	b083      	sub	sp, #12
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	2200      	movs	r2, #0
  400ff8:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	2201      	movs	r2, #1
  400ffe:	705a      	strb	r2, [r3, #1]

}
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr
  40100a:	bf00      	nop

0040100c <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40100c:	b580      	push	{r7, lr}
  40100e:	b084      	sub	sp, #16
  401010:	af00      	add	r7, sp, #0
  401012:	6078      	str	r0, [r7, #4]
  401014:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401016:	6878      	ldr	r0, [r7, #4]
  401018:	4b17      	ldr	r3, [pc, #92]	; (401078 <afec_init+0x6c>)
  40101a:	4798      	blx	r3
  40101c:	4603      	mov	r3, r0
  40101e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401022:	2b00      	cmp	r3, #0
  401024:	d001      	beq.n	40102a <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  401026:	2319      	movs	r3, #25
  401028:	e021      	b.n	40106e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	2201      	movs	r2, #1
  40102e:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  401030:	6878      	ldr	r0, [r7, #4]
  401032:	6839      	ldr	r1, [r7, #0]
  401034:	4b11      	ldr	r3, [pc, #68]	; (40107c <afec_init+0x70>)
  401036:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401038:	2300      	movs	r3, #0
  40103a:	60fb      	str	r3, [r7, #12]
  40103c:	e013      	b.n	401066 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  40103e:	2300      	movs	r3, #0
  401040:	60bb      	str	r3, [r7, #8]
  401042:	e00a      	b.n	40105a <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  401044:	490e      	ldr	r1, [pc, #56]	; (401080 <afec_init+0x74>)
  401046:	68fb      	ldr	r3, [r7, #12]
  401048:	011a      	lsls	r2, r3, #4
  40104a:	68bb      	ldr	r3, [r7, #8]
  40104c:	4413      	add	r3, r2
  40104e:	2200      	movs	r2, #0
  401050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	3301      	adds	r3, #1
  401058:	60bb      	str	r3, [r7, #8]
  40105a:	68bb      	ldr	r3, [r7, #8]
  40105c:	2b0f      	cmp	r3, #15
  40105e:	d9f1      	bls.n	401044 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401060:	68fb      	ldr	r3, [r7, #12]
  401062:	3301      	adds	r3, #1
  401064:	60fb      	str	r3, [r7, #12]
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	2b01      	cmp	r3, #1
  40106a:	d9e8      	bls.n	40103e <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  40106c:	2300      	movs	r3, #0
  40106e:	b25b      	sxtb	r3, r3
}
  401070:	4618      	mov	r0, r3
  401072:	3710      	adds	r7, #16
  401074:	46bd      	mov	sp, r7
  401076:	bd80      	pop	{r7, pc}
  401078:	00400cdd 	.word	0x00400cdd
  40107c:	00400e55 	.word	0x00400e55
  401080:	20400a30 	.word	0x20400a30

00401084 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  401084:	b580      	push	{r7, lr}
  401086:	b086      	sub	sp, #24
  401088:	af00      	add	r7, sp, #0
  40108a:	60f8      	str	r0, [r7, #12]
  40108c:	60b9      	str	r1, [r7, #8]
  40108e:	607a      	str	r2, [r7, #4]
  401090:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b17      	ldr	r3, [pc, #92]	; (4010f4 <afec_set_callback+0x70>)
  401096:	4798      	blx	r3
  401098:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  40109a:	4917      	ldr	r1, [pc, #92]	; (4010f8 <afec_set_callback+0x74>)
  40109c:	697b      	ldr	r3, [r7, #20]
  40109e:	011a      	lsls	r2, r3, #4
  4010a0:	68bb      	ldr	r3, [r7, #8]
  4010a2:	4413      	add	r3, r2
  4010a4:	687a      	ldr	r2, [r7, #4]
  4010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  4010aa:	697b      	ldr	r3, [r7, #20]
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d10b      	bne.n	4010c8 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  4010b0:	201d      	movs	r0, #29
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <afec_set_callback+0x78>)
  4010b4:	4798      	blx	r3
  4010b6:	78fb      	ldrb	r3, [r7, #3]
  4010b8:	201d      	movs	r0, #29
  4010ba:	4619      	mov	r1, r3
  4010bc:	4b10      	ldr	r3, [pc, #64]	; (401100 <afec_set_callback+0x7c>)
  4010be:	4798      	blx	r3
  4010c0:	201d      	movs	r0, #29
  4010c2:	4b10      	ldr	r3, [pc, #64]	; (401104 <afec_set_callback+0x80>)
  4010c4:	4798      	blx	r3
  4010c6:	e00d      	b.n	4010e4 <afec_set_callback+0x60>
	} else if (i == 1) {
  4010c8:	697b      	ldr	r3, [r7, #20]
  4010ca:	2b01      	cmp	r3, #1
  4010cc:	d10a      	bne.n	4010e4 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  4010ce:	2028      	movs	r0, #40	; 0x28
  4010d0:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <afec_set_callback+0x78>)
  4010d2:	4798      	blx	r3
  4010d4:	78fb      	ldrb	r3, [r7, #3]
  4010d6:	2028      	movs	r0, #40	; 0x28
  4010d8:	4619      	mov	r1, r3
  4010da:	4b09      	ldr	r3, [pc, #36]	; (401100 <afec_set_callback+0x7c>)
  4010dc:	4798      	blx	r3
  4010de:	2028      	movs	r0, #40	; 0x28
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <afec_set_callback+0x80>)
  4010e2:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4010e4:	68f8      	ldr	r0, [r7, #12]
  4010e6:	68b9      	ldr	r1, [r7, #8]
  4010e8:	4b07      	ldr	r3, [pc, #28]	; (401108 <afec_set_callback+0x84>)
  4010ea:	4798      	blx	r3
}
  4010ec:	3718      	adds	r7, #24
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bd80      	pop	{r7, pc}
  4010f2:	bf00      	nop
  4010f4:	00400de5 	.word	0x00400de5
  4010f8:	20400a30 	.word	0x20400a30
  4010fc:	00400bb5 	.word	0x00400bb5
  401100:	00400be9 	.word	0x00400be9
  401104:	00400b85 	.word	0x00400b85
  401108:	0040110d 	.word	0x0040110d

0040110c <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
  401114:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401116:	683b      	ldr	r3, [r7, #0]
  401118:	4a19      	ldr	r2, [pc, #100]	; (401180 <afec_enable_interrupt+0x74>)
  40111a:	4293      	cmp	r3, r2
  40111c:	d103      	bne.n	401126 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40111e:	687b      	ldr	r3, [r7, #4]
  401120:	4a17      	ldr	r2, [pc, #92]	; (401180 <afec_enable_interrupt+0x74>)
  401122:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  401124:	e026      	b.n	401174 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401126:	683b      	ldr	r3, [r7, #0]
  401128:	2b0b      	cmp	r3, #11
  40112a:	d80f      	bhi.n	40114c <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40112c:	683b      	ldr	r3, [r7, #0]
  40112e:	2b0b      	cmp	r3, #11
  401130:	d104      	bne.n	40113c <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  401132:	687b      	ldr	r3, [r7, #4]
  401134:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401138:	625a      	str	r2, [r3, #36]	; 0x24
  40113a:	e01b      	b.n	401174 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	2201      	movs	r2, #1
  401140:	fa02 f303 	lsl.w	r3, r2, r3
  401144:	461a      	mov	r2, r3
  401146:	687b      	ldr	r3, [r7, #4]
  401148:	625a      	str	r2, [r3, #36]	; 0x24
  40114a:	e013      	b.n	401174 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40114c:	683b      	ldr	r3, [r7, #0]
  40114e:	2b0e      	cmp	r3, #14
  401150:	d808      	bhi.n	401164 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401152:	683b      	ldr	r3, [r7, #0]
  401154:	330c      	adds	r3, #12
  401156:	461a      	mov	r2, r3
  401158:	2301      	movs	r3, #1
  40115a:	4093      	lsls	r3, r2
  40115c:	461a      	mov	r2, r3
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	625a      	str	r2, [r3, #36]	; 0x24
  401162:	e007      	b.n	401174 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401164:	683b      	ldr	r3, [r7, #0]
  401166:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401168:	461a      	mov	r2, r3
  40116a:	2301      	movs	r3, #1
  40116c:	4093      	lsls	r3, r2
  40116e:	461a      	mov	r2, r3
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401174:	370c      	adds	r7, #12
  401176:	46bd      	mov	sp, r7
  401178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	47000fff 	.word	0x47000fff

00401184 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401184:	b580      	push	{r7, lr}
  401186:	b082      	sub	sp, #8
  401188:	af00      	add	r7, sp, #0
  40118a:	4603      	mov	r3, r0
  40118c:	6039      	str	r1, [r7, #0]
  40118e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401190:	79fb      	ldrb	r3, [r7, #7]
  401192:	4909      	ldr	r1, [pc, #36]	; (4011b8 <afec_interrupt+0x34>)
  401194:	011a      	lsls	r2, r3, #4
  401196:	683b      	ldr	r3, [r7, #0]
  401198:	4413      	add	r3, r2
  40119a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	d007      	beq.n	4011b2 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4011a2:	79fb      	ldrb	r3, [r7, #7]
  4011a4:	4904      	ldr	r1, [pc, #16]	; (4011b8 <afec_interrupt+0x34>)
  4011a6:	011a      	lsls	r2, r3, #4
  4011a8:	683b      	ldr	r3, [r7, #0]
  4011aa:	4413      	add	r3, r2
  4011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4011b0:	4798      	blx	r3
	}
}
  4011b2:	3708      	adds	r7, #8
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	20400a30 	.word	0x20400a30

004011bc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b086      	sub	sp, #24
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  4011c4:	6878      	ldr	r0, [r7, #4]
  4011c6:	4b25      	ldr	r3, [pc, #148]	; (40125c <afec_process_callback+0xa0>)
  4011c8:	4798      	blx	r3
  4011ca:	4603      	mov	r3, r0
  4011cc:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4011ce:	6878      	ldr	r0, [r7, #4]
  4011d0:	4b23      	ldr	r3, [pc, #140]	; (401260 <afec_process_callback+0xa4>)
  4011d2:	4798      	blx	r3
  4011d4:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4011d6:	2300      	movs	r3, #0
  4011d8:	617b      	str	r3, [r7, #20]
  4011da:	e039      	b.n	401250 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4011dc:	697b      	ldr	r3, [r7, #20]
  4011de:	2b0b      	cmp	r3, #11
  4011e0:	d80f      	bhi.n	401202 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	2201      	movs	r2, #1
  4011e6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ea:	461a      	mov	r2, r3
  4011ec:	68fb      	ldr	r3, [r7, #12]
  4011ee:	4013      	ands	r3, r2
  4011f0:	2b00      	cmp	r3, #0
  4011f2:	d02a      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011f4:	693b      	ldr	r3, [r7, #16]
  4011f6:	b2db      	uxtb	r3, r3
  4011f8:	4618      	mov	r0, r3
  4011fa:	6979      	ldr	r1, [r7, #20]
  4011fc:	4b19      	ldr	r3, [pc, #100]	; (401264 <afec_process_callback+0xa8>)
  4011fe:	4798      	blx	r3
  401200:	e023      	b.n	40124a <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b0e      	cmp	r3, #14
  401206:	d810      	bhi.n	40122a <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401208:	697b      	ldr	r3, [r7, #20]
  40120a:	330c      	adds	r3, #12
  40120c:	461a      	mov	r2, r3
  40120e:	2301      	movs	r3, #1
  401210:	4093      	lsls	r3, r2
  401212:	461a      	mov	r2, r3
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	4013      	ands	r3, r2
  401218:	2b00      	cmp	r3, #0
  40121a:	d016      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	b2db      	uxtb	r3, r3
  401220:	4618      	mov	r0, r3
  401222:	6979      	ldr	r1, [r7, #20]
  401224:	4b0f      	ldr	r3, [pc, #60]	; (401264 <afec_process_callback+0xa8>)
  401226:	4798      	blx	r3
  401228:	e00f      	b.n	40124a <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40122a:	697b      	ldr	r3, [r7, #20]
  40122c:	330f      	adds	r3, #15
  40122e:	461a      	mov	r2, r3
  401230:	2301      	movs	r3, #1
  401232:	4093      	lsls	r3, r2
  401234:	461a      	mov	r2, r3
  401236:	68fb      	ldr	r3, [r7, #12]
  401238:	4013      	ands	r3, r2
  40123a:	2b00      	cmp	r3, #0
  40123c:	d005      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40123e:	693b      	ldr	r3, [r7, #16]
  401240:	b2db      	uxtb	r3, r3
  401242:	4618      	mov	r0, r3
  401244:	6979      	ldr	r1, [r7, #20]
  401246:	4b07      	ldr	r3, [pc, #28]	; (401264 <afec_process_callback+0xa8>)
  401248:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40124a:	697b      	ldr	r3, [r7, #20]
  40124c:	3301      	adds	r3, #1
  40124e:	617b      	str	r3, [r7, #20]
  401250:	697b      	ldr	r3, [r7, #20]
  401252:	2b0f      	cmp	r3, #15
  401254:	d9c2      	bls.n	4011dc <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401256:	3718      	adds	r7, #24
  401258:	46bd      	mov	sp, r7
  40125a:	bd80      	pop	{r7, pc}
  40125c:	00400cdd 	.word	0x00400cdd
  401260:	00400de5 	.word	0x00400de5
  401264:	00401185 	.word	0x00401185

00401268 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401268:	b580      	push	{r7, lr}
  40126a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40126c:	4801      	ldr	r0, [pc, #4]	; (401274 <AFEC0_Handler+0xc>)
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <AFEC0_Handler+0x10>)
  401270:	4798      	blx	r3
}
  401272:	bd80      	pop	{r7, pc}
  401274:	4003c000 	.word	0x4003c000
  401278:	004011bd 	.word	0x004011bd

0040127c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401280:	4801      	ldr	r0, [pc, #4]	; (401288 <AFEC1_Handler+0xc>)
  401282:	4b02      	ldr	r3, [pc, #8]	; (40128c <AFEC1_Handler+0x10>)
  401284:	4798      	blx	r3
}
  401286:	bd80      	pop	{r7, pc}
  401288:	40064000 	.word	0x40064000
  40128c:	004011bd 	.word	0x004011bd

00401290 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401290:	b580      	push	{r7, lr}
  401292:	b084      	sub	sp, #16
  401294:	af00      	add	r7, sp, #0
  401296:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401298:	6878      	ldr	r0, [r7, #4]
  40129a:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <afec_enable+0x24>)
  40129c:	4798      	blx	r3
  40129e:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <afec_enable+0x28>)
  4012a4:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4012a6:	2002      	movs	r0, #2
  4012a8:	4b04      	ldr	r3, [pc, #16]	; (4012bc <afec_enable+0x2c>)
  4012aa:	4798      	blx	r3
}
  4012ac:	3710      	adds	r7, #16
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bd80      	pop	{r7, pc}
  4012b2:	bf00      	nop
  4012b4:	00400e1d 	.word	0x00400e1d
  4012b8:	004016d1 	.word	0x004016d1
  4012bc:	00400cf5 	.word	0x00400cf5

004012c0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4012c0:	b480      	push	{r7}
  4012c2:	b083      	sub	sp, #12
  4012c4:	af00      	add	r7, sp, #0
  4012c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4012cc:	4618      	mov	r0, r3
  4012ce:	370c      	adds	r7, #12
  4012d0:	46bd      	mov	sp, r7
  4012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d6:	4770      	bx	lr

004012d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	370c      	adds	r7, #12
  4012e8:	46bd      	mov	sp, r7
  4012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ee:	4770      	bx	lr

004012f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012f0:	b580      	push	{r7, lr}
  4012f2:	b084      	sub	sp, #16
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
  4012f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012fa:	6878      	ldr	r0, [r7, #4]
  4012fc:	4b24      	ldr	r3, [pc, #144]	; (401390 <pio_handler_process+0xa0>)
  4012fe:	4798      	blx	r3
  401300:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401302:	6878      	ldr	r0, [r7, #4]
  401304:	4b23      	ldr	r3, [pc, #140]	; (401394 <pio_handler_process+0xa4>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	4013      	ands	r3, r2
  40130e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401310:	68fb      	ldr	r3, [r7, #12]
  401312:	2b00      	cmp	r3, #0
  401314:	d038      	beq.n	401388 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  401316:	2300      	movs	r3, #0
  401318:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40131a:	e032      	b.n	401382 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40131c:	4a1e      	ldr	r2, [pc, #120]	; (401398 <pio_handler_process+0xa8>)
  40131e:	68bb      	ldr	r3, [r7, #8]
  401320:	011b      	lsls	r3, r3, #4
  401322:	4413      	add	r3, r2
  401324:	681a      	ldr	r2, [r3, #0]
  401326:	683b      	ldr	r3, [r7, #0]
  401328:	429a      	cmp	r2, r3
  40132a:	d123      	bne.n	401374 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40132c:	4a1a      	ldr	r2, [pc, #104]	; (401398 <pio_handler_process+0xa8>)
  40132e:	68bb      	ldr	r3, [r7, #8]
  401330:	011b      	lsls	r3, r3, #4
  401332:	4413      	add	r3, r2
  401334:	685a      	ldr	r2, [r3, #4]
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	4013      	ands	r3, r2
  40133a:	2b00      	cmp	r3, #0
  40133c:	d01a      	beq.n	401374 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40133e:	4a16      	ldr	r2, [pc, #88]	; (401398 <pio_handler_process+0xa8>)
  401340:	68bb      	ldr	r3, [r7, #8]
  401342:	011b      	lsls	r3, r3, #4
  401344:	4413      	add	r3, r2
  401346:	3308      	adds	r3, #8
  401348:	685b      	ldr	r3, [r3, #4]
  40134a:	4913      	ldr	r1, [pc, #76]	; (401398 <pio_handler_process+0xa8>)
  40134c:	68ba      	ldr	r2, [r7, #8]
  40134e:	0112      	lsls	r2, r2, #4
  401350:	440a      	add	r2, r1
  401352:	6810      	ldr	r0, [r2, #0]
  401354:	4910      	ldr	r1, [pc, #64]	; (401398 <pio_handler_process+0xa8>)
  401356:	68ba      	ldr	r2, [r7, #8]
  401358:	0112      	lsls	r2, r2, #4
  40135a:	440a      	add	r2, r1
  40135c:	6852      	ldr	r2, [r2, #4]
  40135e:	4611      	mov	r1, r2
  401360:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401362:	4a0d      	ldr	r2, [pc, #52]	; (401398 <pio_handler_process+0xa8>)
  401364:	68bb      	ldr	r3, [r7, #8]
  401366:	011b      	lsls	r3, r3, #4
  401368:	4413      	add	r3, r2
  40136a:	685b      	ldr	r3, [r3, #4]
  40136c:	43db      	mvns	r3, r3
  40136e:	68fa      	ldr	r2, [r7, #12]
  401370:	4013      	ands	r3, r2
  401372:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401374:	68bb      	ldr	r3, [r7, #8]
  401376:	3301      	adds	r3, #1
  401378:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40137a:	68bb      	ldr	r3, [r7, #8]
  40137c:	2b06      	cmp	r3, #6
  40137e:	d900      	bls.n	401382 <pio_handler_process+0x92>
				break;
  401380:	e002      	b.n	401388 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401382:	68fb      	ldr	r3, [r7, #12]
  401384:	2b00      	cmp	r3, #0
  401386:	d1c9      	bne.n	40131c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401388:	3710      	adds	r7, #16
  40138a:	46bd      	mov	sp, r7
  40138c:	bd80      	pop	{r7, pc}
  40138e:	bf00      	nop
  401390:	004012c1 	.word	0x004012c1
  401394:	004012d9 	.word	0x004012d9
  401398:	20400930 	.word	0x20400930

0040139c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4013a0:	4802      	ldr	r0, [pc, #8]	; (4013ac <PIOA_Handler+0x10>)
  4013a2:	210a      	movs	r1, #10
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <PIOA_Handler+0x14>)
  4013a6:	4798      	blx	r3
}
  4013a8:	bd80      	pop	{r7, pc}
  4013aa:	bf00      	nop
  4013ac:	400e0e00 	.word	0x400e0e00
  4013b0:	004012f1 	.word	0x004012f1

004013b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4013b8:	4802      	ldr	r0, [pc, #8]	; (4013c4 <PIOB_Handler+0x10>)
  4013ba:	210b      	movs	r1, #11
  4013bc:	4b02      	ldr	r3, [pc, #8]	; (4013c8 <PIOB_Handler+0x14>)
  4013be:	4798      	blx	r3
}
  4013c0:	bd80      	pop	{r7, pc}
  4013c2:	bf00      	nop
  4013c4:	400e1000 	.word	0x400e1000
  4013c8:	004012f1 	.word	0x004012f1

004013cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4013d0:	4802      	ldr	r0, [pc, #8]	; (4013dc <PIOC_Handler+0x10>)
  4013d2:	210c      	movs	r1, #12
  4013d4:	4b02      	ldr	r3, [pc, #8]	; (4013e0 <PIOC_Handler+0x14>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bd80      	pop	{r7, pc}
  4013da:	bf00      	nop
  4013dc:	400e1200 	.word	0x400e1200
  4013e0:	004012f1 	.word	0x004012f1

004013e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4013e4:	b580      	push	{r7, lr}
  4013e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4013e8:	4802      	ldr	r0, [pc, #8]	; (4013f4 <PIOD_Handler+0x10>)
  4013ea:	2110      	movs	r1, #16
  4013ec:	4b02      	ldr	r3, [pc, #8]	; (4013f8 <PIOD_Handler+0x14>)
  4013ee:	4798      	blx	r3
}
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	400e1400 	.word	0x400e1400
  4013f8:	004012f1 	.word	0x004012f1

004013fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401400:	4802      	ldr	r0, [pc, #8]	; (40140c <PIOE_Handler+0x10>)
  401402:	2111      	movs	r1, #17
  401404:	4b02      	ldr	r3, [pc, #8]	; (401410 <PIOE_Handler+0x14>)
  401406:	4798      	blx	r3
}
  401408:	bd80      	pop	{r7, pc}
  40140a:	bf00      	nop
  40140c:	400e1600 	.word	0x400e1600
  401410:	004012f1 	.word	0x004012f1

00401414 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401414:	b480      	push	{r7}
  401416:	b083      	sub	sp, #12
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	3b01      	subs	r3, #1
  401420:	2b03      	cmp	r3, #3
  401422:	d81a      	bhi.n	40145a <pmc_mck_set_division+0x46>
  401424:	a201      	add	r2, pc, #4	; (adr r2, 40142c <pmc_mck_set_division+0x18>)
  401426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40142a:	bf00      	nop
  40142c:	0040143d 	.word	0x0040143d
  401430:	00401443 	.word	0x00401443
  401434:	0040144b 	.word	0x0040144b
  401438:	00401453 	.word	0x00401453
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40143c:	2300      	movs	r3, #0
  40143e:	607b      	str	r3, [r7, #4]
			break;
  401440:	e00e      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401442:	f44f 7380 	mov.w	r3, #256	; 0x100
  401446:	607b      	str	r3, [r7, #4]
			break;
  401448:	e00a      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40144a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40144e:	607b      	str	r3, [r7, #4]
			break;
  401450:	e006      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401452:	f44f 7300 	mov.w	r3, #512	; 0x200
  401456:	607b      	str	r3, [r7, #4]
			break;
  401458:	e002      	b.n	401460 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40145a:	2300      	movs	r3, #0
  40145c:	607b      	str	r3, [r7, #4]
			break;
  40145e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401460:	4909      	ldr	r1, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401462:	4b09      	ldr	r3, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
  401464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40146a:	687b      	ldr	r3, [r7, #4]
  40146c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40146e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	bf00      	nop
  401472:	4b05      	ldr	r3, [pc, #20]	; (401488 <pmc_mck_set_division+0x74>)
  401474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401476:	f003 0308 	and.w	r3, r3, #8
  40147a:	2b00      	cmp	r3, #0
  40147c:	d0f9      	beq.n	401472 <pmc_mck_set_division+0x5e>
}
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	f85d 7b04 	ldr.w	r7, [sp], #4
  401486:	4770      	bx	lr
  401488:	400e0600 	.word	0x400e0600

0040148c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40148c:	b480      	push	{r7}
  40148e:	b085      	sub	sp, #20
  401490:	af00      	add	r7, sp, #0
  401492:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401494:	491d      	ldr	r1, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401496:	4b1d      	ldr	r3, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40149a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40149e:	687b      	ldr	r3, [r7, #4]
  4014a0:	4313      	orrs	r3, r2
  4014a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014a8:	60fb      	str	r3, [r7, #12]
  4014aa:	e007      	b.n	4014bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014ac:	68fb      	ldr	r3, [r7, #12]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d101      	bne.n	4014b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e023      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014b6:	68fb      	ldr	r3, [r7, #12]
  4014b8:	3b01      	subs	r3, #1
  4014ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014bc:	4b13      	ldr	r3, [pc, #76]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c0:	f003 0308 	and.w	r3, r3, #8
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d0f1      	beq.n	4014ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4014c8:	4a10      	ldr	r2, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014ca:	4b10      	ldr	r3, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ce:	f023 0303 	bic.w	r3, r3, #3
  4014d2:	f043 0302 	orr.w	r3, r3, #2
  4014d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014dc:	60fb      	str	r3, [r7, #12]
  4014de:	e007      	b.n	4014f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d101      	bne.n	4014ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4014e6:	2301      	movs	r3, #1
  4014e8:	e009      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	3b01      	subs	r3, #1
  4014ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f4:	f003 0308 	and.w	r3, r3, #8
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d0f1      	beq.n	4014e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3714      	adds	r7, #20
  401502:	46bd      	mov	sp, r7
  401504:	f85d 7b04 	ldr.w	r7, [sp], #4
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	400e0600 	.word	0x400e0600

00401510 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2b01      	cmp	r3, #1
  40151c:	d105      	bne.n	40152a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40151e:	4907      	ldr	r1, [pc, #28]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401520:	4b06      	ldr	r3, [pc, #24]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401522:	689a      	ldr	r2, [r3, #8]
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <pmc_switch_sclk_to_32kxtal+0x30>)
  401526:	4313      	orrs	r3, r2
  401528:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40152a:	4b04      	ldr	r3, [pc, #16]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40152c:	4a05      	ldr	r2, [pc, #20]	; (401544 <pmc_switch_sclk_to_32kxtal+0x34>)
  40152e:	601a      	str	r2, [r3, #0]
}
  401530:	370c      	adds	r7, #12
  401532:	46bd      	mov	sp, r7
  401534:	f85d 7b04 	ldr.w	r7, [sp], #4
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e1810 	.word	0x400e1810
  401540:	a5100000 	.word	0xa5100000
  401544:	a5000008 	.word	0xa5000008

00401548 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401548:	b480      	push	{r7}
  40154a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <pmc_osc_is_ready_32kxtal+0x2c>)
  40154e:	695b      	ldr	r3, [r3, #20]
  401550:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401554:	2b00      	cmp	r3, #0
  401556:	d007      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401558:	4b07      	ldr	r3, [pc, #28]	; (401578 <pmc_osc_is_ready_32kxtal+0x30>)
  40155a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401560:	2b00      	cmp	r3, #0
  401562:	d001      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401564:	2301      	movs	r3, #1
  401566:	e000      	b.n	40156a <pmc_osc_is_ready_32kxtal+0x22>
  401568:	2300      	movs	r3, #0
}
  40156a:	4618      	mov	r0, r3
  40156c:	46bd      	mov	sp, r7
  40156e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401572:	4770      	bx	lr
  401574:	400e1810 	.word	0x400e1810
  401578:	400e0600 	.word	0x400e0600

0040157c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40157c:	b480      	push	{r7}
  40157e:	b083      	sub	sp, #12
  401580:	af00      	add	r7, sp, #0
  401582:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401584:	4915      	ldr	r1, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401586:	4b15      	ldr	r3, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401588:	6a1a      	ldr	r2, [r3, #32]
  40158a:	4b15      	ldr	r3, [pc, #84]	; (4015e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40158c:	4313      	orrs	r3, r2
  40158e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401590:	bf00      	nop
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40159a:	2b00      	cmp	r3, #0
  40159c:	d0f9      	beq.n	401592 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40159e:	490f      	ldr	r1, [pc, #60]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a0:	4b0e      	ldr	r3, [pc, #56]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a2:	6a1a      	ldr	r2, [r3, #32]
  4015a4:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4015a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4015a8:	687a      	ldr	r2, [r7, #4]
  4015aa:	4313      	orrs	r3, r2
  4015ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4015b0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4015b2:	bf00      	nop
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4015bc:	2b00      	cmp	r3, #0
  4015be:	d0f9      	beq.n	4015b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015c0:	4906      	ldr	r1, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c2:	4b06      	ldr	r3, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c4:	6a1a      	ldr	r2, [r3, #32]
  4015c6:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4015c8:	4013      	ands	r3, r2
  4015ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4015d0:	370c      	adds	r7, #12
  4015d2:	46bd      	mov	sp, r7
  4015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	400e0600 	.word	0x400e0600
  4015e0:	00370008 	.word	0x00370008
  4015e4:	ffc8ff8f 	.word	0xffc8ff8f
  4015e8:	fec8ffff 	.word	0xfec8ffff

004015ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d008      	beq.n	40160e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015fc:	4913      	ldr	r1, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  4015fe:	4b13      	ldr	r3, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401600:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401602:	4a13      	ldr	r2, [pc, #76]	; (401650 <pmc_switch_mainck_to_xtal+0x64>)
  401604:	401a      	ands	r2, r3
  401606:	4b13      	ldr	r3, [pc, #76]	; (401654 <pmc_switch_mainck_to_xtal+0x68>)
  401608:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40160a:	620b      	str	r3, [r1, #32]
  40160c:	e018      	b.n	401640 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40160e:	490f      	ldr	r1, [pc, #60]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401610:	4b0e      	ldr	r3, [pc, #56]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401612:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401614:	4b10      	ldr	r3, [pc, #64]	; (401658 <pmc_switch_mainck_to_xtal+0x6c>)
  401616:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401618:	683a      	ldr	r2, [r7, #0]
  40161a:	0212      	lsls	r2, r2, #8
  40161c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40161e:	431a      	orrs	r2, r3
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <pmc_switch_mainck_to_xtal+0x70>)
  401622:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401624:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401626:	bf00      	nop
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  40162a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40162c:	f003 0301 	and.w	r3, r3, #1
  401630:	2b00      	cmp	r3, #0
  401632:	d0f9      	beq.n	401628 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401634:	4905      	ldr	r1, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401636:	4b05      	ldr	r3, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401638:	6a1a      	ldr	r2, [r3, #32]
  40163a:	4b09      	ldr	r3, [pc, #36]	; (401660 <pmc_switch_mainck_to_xtal+0x74>)
  40163c:	4313      	orrs	r3, r2
  40163e:	620b      	str	r3, [r1, #32]
	}
}
  401640:	370c      	adds	r7, #12
  401642:	46bd      	mov	sp, r7
  401644:	f85d 7b04 	ldr.w	r7, [sp], #4
  401648:	4770      	bx	lr
  40164a:	bf00      	nop
  40164c:	400e0600 	.word	0x400e0600
  401650:	fec8fffc 	.word	0xfec8fffc
  401654:	01370002 	.word	0x01370002
  401658:	ffc8fffc 	.word	0xffc8fffc
  40165c:	00370001 	.word	0x00370001
  401660:	01370000 	.word	0x01370000

00401664 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_osc_is_ready_mainck+0x18>)
  40166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401670:	4618      	mov	r0, r3
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401684:	4b03      	ldr	r3, [pc, #12]	; (401694 <pmc_disable_pllack+0x14>)
  401686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40168a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40168c:	46bd      	mov	sp, r7
  40168e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401692:	4770      	bx	lr
  401694:	400e0600 	.word	0x400e0600

00401698 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401698:	b480      	push	{r7}
  40169a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40169c:	4b04      	ldr	r3, [pc, #16]	; (4016b0 <pmc_is_locked_pllack+0x18>)
  40169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a0:	f003 0302 	and.w	r3, r3, #2
}
  4016a4:	4618      	mov	r0, r3
  4016a6:	46bd      	mov	sp, r7
  4016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop
  4016b0:	400e0600 	.word	0x400e0600

004016b4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4016b4:	b480      	push	{r7}
  4016b6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4016b8:	4b04      	ldr	r3, [pc, #16]	; (4016cc <pmc_is_locked_upll+0x18>)
  4016ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	46bd      	mov	sp, r7
  4016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop
  4016cc:	400e0600 	.word	0x400e0600

004016d0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b083      	sub	sp, #12
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	2b3f      	cmp	r3, #63	; 0x3f
  4016dc:	d901      	bls.n	4016e2 <pmc_enable_periph_clk+0x12>
		return 1;
  4016de:	2301      	movs	r3, #1
  4016e0:	e02f      	b.n	401742 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	2b1f      	cmp	r3, #31
  4016e6:	d813      	bhi.n	401710 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016e8:	4b19      	ldr	r3, [pc, #100]	; (401750 <pmc_enable_periph_clk+0x80>)
  4016ea:	699a      	ldr	r2, [r3, #24]
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	2101      	movs	r1, #1
  4016f0:	fa01 f303 	lsl.w	r3, r1, r3
  4016f4:	401a      	ands	r2, r3
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	2101      	movs	r1, #1
  4016fa:	fa01 f303 	lsl.w	r3, r1, r3
  4016fe:	429a      	cmp	r2, r3
  401700:	d01e      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401702:	4a13      	ldr	r2, [pc, #76]	; (401750 <pmc_enable_periph_clk+0x80>)
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	2101      	movs	r1, #1
  401708:	fa01 f303 	lsl.w	r3, r1, r3
  40170c:	6113      	str	r3, [r2, #16]
  40170e:	e017      	b.n	401740 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	3b20      	subs	r3, #32
  401714:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pmc_enable_periph_clk+0x80>)
  401718:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	2101      	movs	r1, #1
  401720:	fa01 f303 	lsl.w	r3, r1, r3
  401724:	401a      	ands	r2, r3
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2101      	movs	r1, #1
  40172a:	fa01 f303 	lsl.w	r3, r1, r3
  40172e:	429a      	cmp	r2, r3
  401730:	d006      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401732:	4a07      	ldr	r2, [pc, #28]	; (401750 <pmc_enable_periph_clk+0x80>)
  401734:	687b      	ldr	r3, [r7, #4]
  401736:	2101      	movs	r1, #1
  401738:	fa01 f303 	lsl.w	r3, r1, r3
  40173c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401740:	2300      	movs	r3, #0
}
  401742:	4618      	mov	r0, r3
  401744:	370c      	adds	r7, #12
  401746:	46bd      	mov	sp, r7
  401748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	400e0600 	.word	0x400e0600

00401754 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401754:	b4b0      	push	{r4, r5, r7}
  401756:	b091      	sub	sp, #68	; 0x44
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40175e:	4b1b      	ldr	r3, [pc, #108]	; (4017cc <pwm_clocks_generate+0x78>)
  401760:	f107 040c 	add.w	r4, r7, #12
  401764:	461d      	mov	r5, r3
  401766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401776:	2300      	movs	r3, #0
  401778:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40177c:	009b      	lsls	r3, r3, #2
  40177e:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401782:	4413      	add	r3, r2
  401784:	f853 3c34 	ldr.w	r3, [r3, #-52]
  401788:	683a      	ldr	r2, [r7, #0]
  40178a:	fbb2 f2f3 	udiv	r2, r2, r3
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	fbb2 f3f3 	udiv	r3, r2, r3
  401794:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40179c:	d800      	bhi.n	4017a0 <pwm_clocks_generate+0x4c>
			break;
  40179e:	e005      	b.n	4017ac <pwm_clocks_generate+0x58>
		}
		ul_pre++;
  4017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a2:	3301      	adds	r3, #1
  4017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a8:	2b0a      	cmp	r3, #10
  4017aa:	d9e6      	bls.n	40177a <pwm_clocks_generate+0x26>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017ae:	2b0a      	cmp	r3, #10
  4017b0:	d804      	bhi.n	4017bc <pwm_clocks_generate+0x68>
		return ul_div | (ul_pre << 8);
  4017b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017b4:	021a      	lsls	r2, r3, #8
  4017b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4017b8:	4313      	orrs	r3, r2
  4017ba:	e001      	b.n	4017c0 <pwm_clocks_generate+0x6c>
	} else {
		return PWM_INVALID_ARGUMENT;
  4017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  4017c0:	4618      	mov	r0, r3
  4017c2:	3744      	adds	r7, #68	; 0x44
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bcb0      	pop	{r4, r5, r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	0040cc00 	.word	0x0040cc00

004017d0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4017d0:	b580      	push	{r7, lr}
  4017d2:	b084      	sub	sp, #16
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	6078      	str	r0, [r7, #4]
  4017d8:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  4017da:	2300      	movs	r3, #0
  4017dc:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4017de:	683b      	ldr	r3, [r7, #0]
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d011      	beq.n	40180a <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	681a      	ldr	r2, [r3, #0]
  4017ea:	683b      	ldr	r3, [r7, #0]
  4017ec:	689b      	ldr	r3, [r3, #8]
  4017ee:	4610      	mov	r0, r2
  4017f0:	4619      	mov	r1, r3
  4017f2:	4b16      	ldr	r3, [pc, #88]	; (40184c <pwm_init+0x7c>)
  4017f4:	4798      	blx	r3
  4017f6:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  4017f8:	68bb      	ldr	r3, [r7, #8]
  4017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017fe:	4293      	cmp	r3, r2
  401800:	d101      	bne.n	401806 <pwm_init+0x36>
			return result;
  401802:	68bb      	ldr	r3, [r7, #8]
  401804:	e01e      	b.n	401844 <pwm_init+0x74>
		}

		clock = result;
  401806:	68bb      	ldr	r3, [r7, #8]
  401808:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	685b      	ldr	r3, [r3, #4]
  40180e:	2b00      	cmp	r3, #0
  401810:	d014      	beq.n	40183c <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401812:	683b      	ldr	r3, [r7, #0]
  401814:	685a      	ldr	r2, [r3, #4]
  401816:	683b      	ldr	r3, [r7, #0]
  401818:	689b      	ldr	r3, [r3, #8]
  40181a:	4610      	mov	r0, r2
  40181c:	4619      	mov	r1, r3
  40181e:	4b0b      	ldr	r3, [pc, #44]	; (40184c <pwm_init+0x7c>)
  401820:	4798      	blx	r3
  401822:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  401824:	68bb      	ldr	r3, [r7, #8]
  401826:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40182a:	4293      	cmp	r3, r2
  40182c:	d101      	bne.n	401832 <pwm_init+0x62>
			return result;
  40182e:	68bb      	ldr	r3, [r7, #8]
  401830:	e008      	b.n	401844 <pwm_init+0x74>
		}

		clock |= (result << 16);
  401832:	68bb      	ldr	r3, [r7, #8]
  401834:	041b      	lsls	r3, r3, #16
  401836:	68fa      	ldr	r2, [r7, #12]
  401838:	4313      	orrs	r3, r2
  40183a:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	68fa      	ldr	r2, [r7, #12]
  401840:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  401842:	2300      	movs	r3, #0
}
  401844:	4618      	mov	r0, r3
  401846:	3710      	adds	r7, #16
  401848:	46bd      	mov	sp, r7
  40184a:	bd80      	pop	{r7, pc}
  40184c:	00401755 	.word	0x00401755

00401850 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401850:	b480      	push	{r7}
  401852:	b087      	sub	sp, #28
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
  401858:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  40185a:	2300      	movs	r3, #0
  40185c:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  40185e:	683b      	ldr	r3, [r7, #0]
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401864:	683b      	ldr	r3, [r7, #0]
  401866:	685b      	ldr	r3, [r3, #4]
  401868:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  40186c:	683a      	ldr	r2, [r7, #0]
  40186e:	7a92      	ldrb	r2, [r2, #10]
  401870:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401872:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401874:	683a      	ldr	r2, [r7, #0]
  401876:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  401878:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  40187a:	683a      	ldr	r2, [r7, #0]
  40187c:	7d92      	ldrb	r2, [r2, #22]
  40187e:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401880:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401882:	683a      	ldr	r2, [r7, #0]
  401884:	7dd2      	ldrb	r2, [r2, #23]
  401886:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  401888:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  40188a:	683a      	ldr	r2, [r7, #0]
  40188c:	7e12      	ldrb	r2, [r2, #24]
  40188e:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401890:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401892:	683a      	ldr	r2, [r7, #0]
  401894:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401896:	4313      	orrs	r3, r2
  401898:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	693b      	ldr	r3, [r7, #16]
  40189e:	3310      	adds	r3, #16
  4018a0:	015b      	lsls	r3, r3, #5
  4018a2:	4413      	add	r3, r2
  4018a4:	697a      	ldr	r2, [r7, #20]
  4018a6:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	68da      	ldr	r2, [r3, #12]
  4018ac:	6879      	ldr	r1, [r7, #4]
  4018ae:	693b      	ldr	r3, [r7, #16]
  4018b0:	3310      	adds	r3, #16
  4018b2:	015b      	lsls	r3, r3, #5
  4018b4:	440b      	add	r3, r1
  4018b6:	605a      	str	r2, [r3, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4018b8:	683b      	ldr	r3, [r7, #0]
  4018ba:	691a      	ldr	r2, [r3, #16]
  4018bc:	6879      	ldr	r1, [r7, #4]
  4018be:	693b      	ldr	r3, [r7, #16]
  4018c0:	015b      	lsls	r3, r3, #5
  4018c2:	440b      	add	r3, r1
  4018c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4018c8:	605a      	str	r2, [r3, #4]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	7d9b      	ldrb	r3, [r3, #22]
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d00d      	beq.n	4018ee <pwm_channel_init+0x9e>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4018d2:	683b      	ldr	r3, [r7, #0]
  4018d4:	8b9b      	ldrh	r3, [r3, #28]
  4018d6:	041b      	lsls	r3, r3, #16
  4018d8:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4018da:	683b      	ldr	r3, [r7, #0]
  4018dc:	8b5b      	ldrh	r3, [r3, #26]
  4018de:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4018e0:	6879      	ldr	r1, [r7, #4]
  4018e2:	693b      	ldr	r3, [r7, #16]
  4018e4:	015b      	lsls	r3, r3, #5
  4018e6:	440b      	add	r3, r1
  4018e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
  4018ec:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4018f2:	693b      	ldr	r3, [r7, #16]
  4018f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018f8:	fa01 f303 	lsl.w	r3, r1, r3
  4018fc:	43db      	mvns	r3, r3
  4018fe:	4013      	ands	r3, r2
  401900:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401902:	683b      	ldr	r3, [r7, #0]
  401904:	7f9b      	ldrb	r3, [r3, #30]
  401906:	461a      	mov	r2, r3
  401908:	693b      	ldr	r3, [r7, #16]
  40190a:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40190c:	683b      	ldr	r3, [r7, #0]
  40190e:	7fdb      	ldrb	r3, [r3, #31]
  401910:	4619      	mov	r1, r3
  401912:	693b      	ldr	r3, [r7, #16]
  401914:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401918:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40191a:	4313      	orrs	r3, r2
  40191c:	461a      	mov	r2, r3
  40191e:	697b      	ldr	r3, [r7, #20]
  401920:	4313      	orrs	r3, r2
  401922:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401924:	687b      	ldr	r3, [r7, #4]
  401926:	697a      	ldr	r2, [r7, #20]
  401928:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40192e:	693b      	ldr	r3, [r7, #16]
  401930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  401934:	fa01 f303 	lsl.w	r3, r1, r3
  401938:	43db      	mvns	r3, r3
  40193a:	4013      	ands	r3, r2
  40193c:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40193e:	683b      	ldr	r3, [r7, #0]
  401940:	f893 3020 	ldrb.w	r3, [r3, #32]
  401944:	461a      	mov	r2, r3
  401946:	693b      	ldr	r3, [r7, #16]
  401948:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401950:	4619      	mov	r1, r3
  401952:	693b      	ldr	r3, [r7, #16]
  401954:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401958:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40195a:	4313      	orrs	r3, r2
  40195c:	461a      	mov	r2, r3
  40195e:	697b      	ldr	r3, [r7, #20]
  401960:	4313      	orrs	r3, r2
  401962:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	697a      	ldr	r2, [r7, #20]
  401968:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40196a:	693b      	ldr	r3, [r7, #16]
  40196c:	2201      	movs	r2, #1
  40196e:	fa02 f303 	lsl.w	r3, r2, r3
  401972:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  401974:	683b      	ldr	r3, [r7, #0]
  401976:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  40197a:	2b00      	cmp	r3, #0
  40197c:	d006      	beq.n	40198c <pwm_channel_init+0x13c>
		p_pwm->PWM_SCM |= channel;
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	6a1a      	ldr	r2, [r3, #32]
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	431a      	orrs	r2, r3
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	621a      	str	r2, [r3, #32]
  40198a:	e006      	b.n	40199a <pwm_channel_init+0x14a>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	6a1a      	ldr	r2, [r3, #32]
  401990:	68fb      	ldr	r3, [r7, #12]
  401992:	43db      	mvns	r3, r3
  401994:	401a      	ands	r2, r3
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019a0:	2b02      	cmp	r3, #2
  4019a2:	d10b      	bne.n	4019bc <pwm_channel_init+0x16c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019aa:	693a      	ldr	r2, [r7, #16]
  4019ac:	2101      	movs	r1, #1
  4019ae:	fa01 f202 	lsl.w	r2, r1, r2
  4019b2:	431a      	orrs	r2, r3
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4019ba:	e024      	b.n	401a06 <pwm_channel_init+0x1b6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019c2:	693a      	ldr	r2, [r7, #16]
  4019c4:	2101      	movs	r1, #1
  4019c6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ca:	43d2      	mvns	r2, r2
  4019cc:	401a      	ands	r2, r3
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4019d4:	683b      	ldr	r3, [r7, #0]
  4019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019da:	2b01      	cmp	r3, #1
  4019dc:	d109      	bne.n	4019f2 <pwm_channel_init+0x1a2>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019e2:	693a      	ldr	r2, [r7, #16]
  4019e4:	2101      	movs	r1, #1
  4019e6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ea:	431a      	orrs	r2, r3
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	669a      	str	r2, [r3, #104]	; 0x68
  4019f0:	e009      	b.n	401a06 <pwm_channel_init+0x1b6>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019f6:	693a      	ldr	r2, [r7, #16]
  4019f8:	2101      	movs	r1, #1
  4019fa:	fa01 f202 	lsl.w	r2, r1, r2
  4019fe:	43d2      	mvns	r2, r2
  401a00:	401a      	ands	r2, r3
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  401a06:	683b      	ldr	r3, [r7, #0]
  401a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a0c:	2b02      	cmp	r3, #2
  401a0e:	d10c      	bne.n	401a2a <pwm_channel_init+0x1da>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  401a10:	687b      	ldr	r3, [r7, #4]
  401a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a16:	693a      	ldr	r2, [r7, #16]
  401a18:	2101      	movs	r1, #1
  401a1a:	fa01 f202 	lsl.w	r2, r1, r2
  401a1e:	0412      	lsls	r2, r2, #16
  401a20:	431a      	orrs	r2, r3
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401a28:	e027      	b.n	401a7a <pwm_channel_init+0x22a>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a30:	693a      	ldr	r2, [r7, #16]
  401a32:	2101      	movs	r1, #1
  401a34:	fa01 f202 	lsl.w	r2, r1, r2
  401a38:	0412      	lsls	r2, r2, #16
  401a3a:	43d2      	mvns	r2, r2
  401a3c:	401a      	ands	r2, r3
  401a3e:	687b      	ldr	r3, [r7, #4]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401a44:	683b      	ldr	r3, [r7, #0]
  401a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a4a:	2b01      	cmp	r3, #1
  401a4c:	d10a      	bne.n	401a64 <pwm_channel_init+0x214>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a52:	693a      	ldr	r2, [r7, #16]
  401a54:	2101      	movs	r1, #1
  401a56:	fa01 f202 	lsl.w	r2, r1, r2
  401a5a:	0412      	lsls	r2, r2, #16
  401a5c:	431a      	orrs	r2, r3
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	669a      	str	r2, [r3, #104]	; 0x68
  401a62:	e00a      	b.n	401a7a <pwm_channel_init+0x22a>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401a64:	687b      	ldr	r3, [r7, #4]
  401a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a68:	693a      	ldr	r2, [r7, #16]
  401a6a:	2101      	movs	r1, #1
  401a6c:	fa01 f202 	lsl.w	r2, r1, r2
  401a70:	0412      	lsls	r2, r2, #16
  401a72:	43d2      	mvns	r2, r2
  401a74:	401a      	ands	r2, r3
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  401a7a:	2300      	movs	r3, #0
  401a7c:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a7e:	693b      	ldr	r3, [r7, #16]
  401a80:	00db      	lsls	r3, r3, #3
  401a82:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401a88:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  401a8a:	693b      	ldr	r3, [r7, #16]
  401a8c:	22ff      	movs	r2, #255	; 0xff
  401a8e:	fa02 f303 	lsl.w	r3, r2, r3
  401a92:	43db      	mvns	r3, r3
  401a94:	461a      	mov	r2, r3
  401a96:	68bb      	ldr	r3, [r7, #8]
  401a98:	4013      	ands	r3, r2
  401a9a:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a9c:	683b      	ldr	r3, [r7, #0]
  401a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401aa2:	461a      	mov	r2, r3
  401aa4:	693b      	ldr	r3, [r7, #16]
  401aa6:	fa02 f303 	lsl.w	r3, r2, r3
  401aaa:	461a      	mov	r2, r3
  401aac:	68bb      	ldr	r3, [r7, #8]
  401aae:	4313      	orrs	r3, r2
  401ab0:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  401ab2:	687b      	ldr	r3, [r7, #4]
  401ab4:	68ba      	ldr	r2, [r7, #8]
  401ab6:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401ab8:	693b      	ldr	r3, [r7, #16]
  401aba:	2b00      	cmp	r3, #0
  401abc:	d115      	bne.n	401aea <pwm_channel_init+0x29a>
		if (p_channel->spread_spectrum_mode ==
  401abe:	683b      	ldr	r3, [r7, #0]
  401ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  401ac4:	2b01      	cmp	r3, #1
  401ac6:	d109      	bne.n	401adc <pwm_channel_init+0x28c>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ada:	e006      	b.n	401aea <pwm_channel_init+0x29a>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401adc:	683b      	ldr	r3, [r7, #0]
  401ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ae0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401aea:	687a      	ldr	r2, [r7, #4]
  401aec:	693b      	ldr	r3, [r7, #16]
  401aee:	3310      	adds	r3, #16
  401af0:	015b      	lsls	r3, r3, #5
  401af2:	4413      	add	r3, r2
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401afa:	6879      	ldr	r1, [r7, #4]
  401afc:	693b      	ldr	r3, [r7, #16]
  401afe:	3310      	adds	r3, #16
  401b00:	015b      	lsls	r3, r3, #5
  401b02:	440b      	add	r3, r1
  401b04:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401b06:	687a      	ldr	r2, [r7, #4]
  401b08:	693b      	ldr	r3, [r7, #16]
  401b0a:	3310      	adds	r3, #16
  401b0c:	015b      	lsls	r3, r3, #5
  401b0e:	4413      	add	r3, r2
  401b10:	681a      	ldr	r2, [r3, #0]
  401b12:	683b      	ldr	r3, [r7, #0]
  401b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401b1a:	431a      	orrs	r2, r3
  401b1c:	6879      	ldr	r1, [r7, #4]
  401b1e:	693b      	ldr	r3, [r7, #16]
  401b20:	3310      	adds	r3, #16
  401b22:	015b      	lsls	r3, r3, #5
  401b24:	440b      	add	r3, r1
  401b26:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401b28:	2300      	movs	r3, #0
}
  401b2a:	4618      	mov	r0, r3
  401b2c:	371c      	adds	r7, #28
  401b2e:	46bd      	mov	sp, r7
  401b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop

00401b38 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  401b38:	b480      	push	{r7}
  401b3a:	b087      	sub	sp, #28
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	60f8      	str	r0, [r7, #12]
  401b40:	60b9      	str	r1, [r7, #8]
  401b42:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  401b44:	68bb      	ldr	r3, [r7, #8]
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401b4a:	68bb      	ldr	r3, [r7, #8]
  401b4c:	691a      	ldr	r2, [r3, #16]
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	429a      	cmp	r2, r3
  401b52:	d202      	bcs.n	401b5a <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  401b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b58:	e00b      	b.n	401b72 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401b5a:	68bb      	ldr	r3, [r7, #8]
  401b5c:	687a      	ldr	r2, [r7, #4]
  401b5e:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401b60:	68fa      	ldr	r2, [r7, #12]
  401b62:	697b      	ldr	r3, [r7, #20]
  401b64:	015b      	lsls	r3, r3, #5
  401b66:	4413      	add	r3, r2
  401b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401b6c:	687a      	ldr	r2, [r7, #4]
  401b6e:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  401b70:	2300      	movs	r3, #0
}
  401b72:	4618      	mov	r0, r3
  401b74:	371c      	adds	r7, #28
  401b76:	46bd      	mov	sp, r7
  401b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
  401b88:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  401b8a:	683b      	ldr	r3, [r7, #0]
  401b8c:	2201      	movs	r2, #1
  401b8e:	fa02 f303 	lsl.w	r3, r2, r3
  401b92:	461a      	mov	r2, r3
  401b94:	687b      	ldr	r3, [r7, #4]
  401b96:	605a      	str	r2, [r3, #4]
}
  401b98:	370c      	adds	r7, #12
  401b9a:	46bd      	mov	sp, r7
  401b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401bae:	683b      	ldr	r3, [r7, #0]
  401bb0:	2201      	movs	r2, #1
  401bb2:	fa02 f303 	lsl.w	r3, r2, r3
  401bb6:	461a      	mov	r2, r3
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	609a      	str	r2, [r3, #8]
}
  401bbc:	370c      	adds	r7, #12
  401bbe:	46bd      	mov	sp, r7
  401bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop

00401bc8 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401bc8:	b480      	push	{r7}
  401bca:	b083      	sub	sp, #12
  401bcc:	af00      	add	r7, sp, #0
  401bce:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	69db      	ldr	r3, [r3, #28]
#endif
}
  401bd4:	4618      	mov	r0, r3
  401bd6:	370c      	adds	r7, #12
  401bd8:	46bd      	mov	sp, r7
  401bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bde:	4770      	bx	lr

00401be0 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401be0:	b480      	push	{r7}
  401be2:	b085      	sub	sp, #20
  401be4:	af00      	add	r7, sp, #0
  401be6:	60f8      	str	r0, [r7, #12]
  401be8:	60b9      	str	r1, [r7, #8]
  401bea:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401bec:	68bb      	ldr	r3, [r7, #8]
  401bee:	2201      	movs	r2, #1
  401bf0:	409a      	lsls	r2, r3
  401bf2:	687b      	ldr	r3, [r7, #4]
  401bf4:	3310      	adds	r3, #16
  401bf6:	4619      	mov	r1, r3
  401bf8:	2301      	movs	r3, #1
  401bfa:	408b      	lsls	r3, r1
  401bfc:	4313      	orrs	r3, r2
  401bfe:	461a      	mov	r2, r3
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	611a      	str	r2, [r3, #16]
#endif
}
  401c04:	3714      	adds	r7, #20
  401c06:	46bd      	mov	sp, r7
  401c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <pwm_channel_disable_interrupt>:
 * \param ul_fault Bitmask of channel number to disable fault protection
 * interrupt(ignored by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401c10:	b480      	push	{r7}
  401c12:	b085      	sub	sp, #20
  401c14:	af00      	add	r7, sp, #0
  401c16:	60f8      	str	r0, [r7, #12]
  401c18:	60b9      	str	r1, [r7, #8]
  401c1a:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401c1c:	68bb      	ldr	r3, [r7, #8]
  401c1e:	2201      	movs	r2, #1
  401c20:	409a      	lsls	r2, r3
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	3310      	adds	r3, #16
  401c26:	4619      	mov	r1, r3
  401c28:	2301      	movs	r3, #1
  401c2a:	408b      	lsls	r3, r1
  401c2c:	4313      	orrs	r3, r2
  401c2e:	461a      	mov	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	615a      	str	r2, [r3, #20]
#endif
}
  401c34:	3714      	adds	r7, #20
  401c36:	46bd      	mov	sp, r7
  401c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop

00401c40 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401c40:	b480      	push	{r7}
  401c42:	b083      	sub	sp, #12
  401c44:	af00      	add	r7, sp, #0
  401c46:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	2208      	movs	r2, #8
  401c4c:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	2220      	movs	r2, #32
  401c52:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c54:	687b      	ldr	r3, [r7, #4]
  401c56:	2204      	movs	r2, #4
  401c58:	601a      	str	r2, [r3, #0]
}
  401c5a:	370c      	adds	r7, #12
  401c5c:	46bd      	mov	sp, r7
  401c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c62:	4770      	bx	lr

00401c64 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b084      	sub	sp, #16
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
  401c6c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401c6e:	2300      	movs	r3, #0
  401c70:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	f04f 32ff 	mov.w	r2, #4294967295
  401c78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401c7e:	6878      	ldr	r0, [r7, #4]
  401c80:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <twihs_master_init+0x4c>)
  401c82:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401c84:	6878      	ldr	r0, [r7, #4]
  401c86:	4b0b      	ldr	r3, [pc, #44]	; (401cb4 <twihs_master_init+0x50>)
  401c88:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c8a:	683b      	ldr	r3, [r7, #0]
  401c8c:	685a      	ldr	r2, [r3, #4]
  401c8e:	683b      	ldr	r3, [r7, #0]
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	6878      	ldr	r0, [r7, #4]
  401c94:	4611      	mov	r1, r2
  401c96:	461a      	mov	r2, r3
  401c98:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <twihs_master_init+0x54>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b01      	cmp	r3, #1
  401ca0:	d101      	bne.n	401ca6 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401ca2:	2301      	movs	r3, #1
  401ca4:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401ca6:	68fb      	ldr	r3, [r7, #12]
}
  401ca8:	4618      	mov	r0, r3
  401caa:	3710      	adds	r7, #16
  401cac:	46bd      	mov	sp, r7
  401cae:	bd80      	pop	{r7, pc}
  401cb0:	00401f4d 	.word	0x00401f4d
  401cb4:	00401c41 	.word	0x00401c41
  401cb8:	00401cbd 	.word	0x00401cbd

00401cbc <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401cc8:	2300      	movs	r3, #0
  401cca:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401ccc:	68bb      	ldr	r3, [r7, #8]
  401cce:	4a16      	ldr	r2, [pc, #88]	; (401d28 <twihs_set_speed+0x6c>)
  401cd0:	4293      	cmp	r3, r2
  401cd2:	d901      	bls.n	401cd8 <twihs_set_speed+0x1c>
		return FAIL;
  401cd4:	2301      	movs	r3, #1
  401cd6:	e021      	b.n	401d1c <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cd8:	68bb      	ldr	r3, [r7, #8]
  401cda:	005b      	lsls	r3, r3, #1
  401cdc:	687a      	ldr	r2, [r7, #4]
  401cde:	fbb2 f3f3 	udiv	r3, r2, r3
  401ce2:	3b04      	subs	r3, #4
  401ce4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ce6:	e005      	b.n	401cf4 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401ce8:	697b      	ldr	r3, [r7, #20]
  401cea:	3301      	adds	r3, #1
  401cec:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401cee:	693b      	ldr	r3, [r7, #16]
  401cf0:	085b      	lsrs	r3, r3, #1
  401cf2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cf4:	693b      	ldr	r3, [r7, #16]
  401cf6:	2bff      	cmp	r3, #255	; 0xff
  401cf8:	d902      	bls.n	401d00 <twihs_set_speed+0x44>
  401cfa:	697b      	ldr	r3, [r7, #20]
  401cfc:	2b06      	cmp	r3, #6
  401cfe:	d9f3      	bls.n	401ce8 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d00:	693b      	ldr	r3, [r7, #16]
  401d02:	b2da      	uxtb	r2, r3
  401d04:	693b      	ldr	r3, [r7, #16]
  401d06:	021b      	lsls	r3, r3, #8
  401d08:	b29b      	uxth	r3, r3
  401d0a:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401d0c:	697b      	ldr	r3, [r7, #20]
  401d0e:	041b      	lsls	r3, r3, #16
  401d10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d14:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401d1a:	2300      	movs	r3, #0
}
  401d1c:	4618      	mov	r0, r3
  401d1e:	371c      	adds	r7, #28
  401d20:	46bd      	mov	sp, r7
  401d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d26:	4770      	bx	lr
  401d28:	00061a80 	.word	0x00061a80

00401d2c <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b085      	sub	sp, #20
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
  401d34:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401d36:	683b      	ldr	r3, [r7, #0]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d101      	bne.n	401d40 <twihs_mk_addr+0x14>
		return 0;
  401d3c:	2300      	movs	r3, #0
  401d3e:	e01d      	b.n	401d7c <twihs_mk_addr+0x50>

	val = addr[0];
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	781b      	ldrb	r3, [r3, #0]
  401d44:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401d46:	683b      	ldr	r3, [r7, #0]
  401d48:	2b01      	cmp	r3, #1
  401d4a:	dd09      	ble.n	401d60 <twihs_mk_addr+0x34>
		val <<= 8;
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	021b      	lsls	r3, r3, #8
  401d50:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	3301      	adds	r3, #1
  401d56:	781b      	ldrb	r3, [r3, #0]
  401d58:	461a      	mov	r2, r3
  401d5a:	68fb      	ldr	r3, [r7, #12]
  401d5c:	4313      	orrs	r3, r2
  401d5e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b02      	cmp	r3, #2
  401d64:	dd09      	ble.n	401d7a <twihs_mk_addr+0x4e>
		val <<= 8;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	021b      	lsls	r3, r3, #8
  401d6a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	3302      	adds	r3, #2
  401d70:	781b      	ldrb	r3, [r3, #0]
  401d72:	461a      	mov	r2, r3
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	4313      	orrs	r3, r2
  401d78:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d7a:	68fb      	ldr	r3, [r7, #12]
}
  401d7c:	4618      	mov	r0, r3
  401d7e:	3714      	adds	r7, #20
  401d80:	46bd      	mov	sp, r7
  401d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d86:	4770      	bx	lr

00401d88 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b086      	sub	sp, #24
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401d92:	683b      	ldr	r3, [r7, #0]
  401d94:	68db      	ldr	r3, [r3, #12]
  401d96:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401d98:	683b      	ldr	r3, [r7, #0]
  401d9a:	689b      	ldr	r3, [r3, #8]
  401d9c:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401d9e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401da2:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401da4:	697b      	ldr	r3, [r7, #20]
  401da6:	2b00      	cmp	r3, #0
  401da8:	d101      	bne.n	401dae <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401daa:	2301      	movs	r3, #1
  401dac:	e059      	b.n	401e62 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401dae:	687b      	ldr	r3, [r7, #4]
  401db0:	2200      	movs	r2, #0
  401db2:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401db4:	683b      	ldr	r3, [r7, #0]
  401db6:	7c1b      	ldrb	r3, [r3, #16]
  401db8:	041b      	lsls	r3, r3, #16
  401dba:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dbe:	683b      	ldr	r3, [r7, #0]
  401dc0:	685b      	ldr	r3, [r3, #4]
  401dc2:	021b      	lsls	r3, r3, #8
  401dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dc8:	4313      	orrs	r3, r2
  401dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401dce:	687b      	ldr	r3, [r7, #4]
  401dd0:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401dd2:	687b      	ldr	r3, [r7, #4]
  401dd4:	2200      	movs	r2, #0
  401dd6:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dd8:	683a      	ldr	r2, [r7, #0]
  401dda:	683b      	ldr	r3, [r7, #0]
  401ddc:	685b      	ldr	r3, [r3, #4]
  401dde:	4610      	mov	r0, r2
  401de0:	4619      	mov	r1, r3
  401de2:	4b22      	ldr	r3, [pc, #136]	; (401e6c <twihs_master_read+0xe4>)
  401de4:	4798      	blx	r3
  401de6:	4602      	mov	r2, r0
  401de8:	687b      	ldr	r3, [r7, #4]
  401dea:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401dec:	687b      	ldr	r3, [r7, #4]
  401dee:	2201      	movs	r2, #1
  401df0:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401df2:	e029      	b.n	401e48 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	6a1b      	ldr	r3, [r3, #32]
  401df8:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401dfa:	68bb      	ldr	r3, [r7, #8]
  401dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e00:	2b00      	cmp	r3, #0
  401e02:	d001      	beq.n	401e08 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401e04:	2305      	movs	r3, #5
  401e06:	e02c      	b.n	401e62 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	1e5a      	subs	r2, r3, #1
  401e0c:	60fa      	str	r2, [r7, #12]
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d101      	bne.n	401e16 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401e12:	2309      	movs	r3, #9
  401e14:	e025      	b.n	401e62 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401e16:	697b      	ldr	r3, [r7, #20]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d102      	bne.n	401e22 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	2202      	movs	r2, #2
  401e20:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401e22:	68bb      	ldr	r3, [r7, #8]
  401e24:	f003 0302 	and.w	r3, r3, #2
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d100      	bne.n	401e2e <twihs_master_read+0xa6>
			continue;
  401e2c:	e00c      	b.n	401e48 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401e2e:	693b      	ldr	r3, [r7, #16]
  401e30:	1c5a      	adds	r2, r3, #1
  401e32:	613a      	str	r2, [r7, #16]
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401e38:	b2d2      	uxtb	r2, r2
  401e3a:	701a      	strb	r2, [r3, #0]

		cnt--;
  401e3c:	697b      	ldr	r3, [r7, #20]
  401e3e:	3b01      	subs	r3, #1
  401e40:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  401e42:	f643 2398 	movw	r3, #15000	; 0x3a98
  401e46:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401e48:	697b      	ldr	r3, [r7, #20]
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d1d2      	bne.n	401df4 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e4e:	bf00      	nop
  401e50:	687b      	ldr	r3, [r7, #4]
  401e52:	6a1b      	ldr	r3, [r3, #32]
  401e54:	f003 0301 	and.w	r3, r3, #1
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d0f9      	beq.n	401e50 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  401e60:	2300      	movs	r3, #0
}
  401e62:	4618      	mov	r0, r3
  401e64:	3718      	adds	r7, #24
  401e66:	46bd      	mov	sp, r7
  401e68:	bd80      	pop	{r7, pc}
  401e6a:	bf00      	nop
  401e6c:	00401d2d 	.word	0x00401d2d

00401e70 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e70:	b580      	push	{r7, lr}
  401e72:	b086      	sub	sp, #24
  401e74:	af00      	add	r7, sp, #0
  401e76:	6078      	str	r0, [r7, #4]
  401e78:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	68db      	ldr	r3, [r3, #12]
  401e7e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e80:	683b      	ldr	r3, [r7, #0]
  401e82:	689b      	ldr	r3, [r3, #8]
  401e84:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e86:	697b      	ldr	r3, [r7, #20]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d101      	bne.n	401e90 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401e8c:	2301      	movs	r3, #1
  401e8e:	e056      	b.n	401f3e <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	2200      	movs	r2, #0
  401e94:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	7c1b      	ldrb	r3, [r3, #16]
  401e9a:	041b      	lsls	r3, r3, #16
  401e9c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ea0:	683b      	ldr	r3, [r7, #0]
  401ea2:	685b      	ldr	r3, [r3, #4]
  401ea4:	021b      	lsls	r3, r3, #8
  401ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401eaa:	431a      	orrs	r2, r3
  401eac:	687b      	ldr	r3, [r7, #4]
  401eae:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	2200      	movs	r2, #0
  401eb4:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eb6:	683a      	ldr	r2, [r7, #0]
  401eb8:	683b      	ldr	r3, [r7, #0]
  401eba:	685b      	ldr	r3, [r3, #4]
  401ebc:	4610      	mov	r0, r2
  401ebe:	4619      	mov	r1, r3
  401ec0:	4b21      	ldr	r3, [pc, #132]	; (401f48 <twihs_master_write+0xd8>)
  401ec2:	4798      	blx	r3
  401ec4:	4602      	mov	r2, r0
  401ec6:	687b      	ldr	r3, [r7, #4]
  401ec8:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401eca:	e019      	b.n	401f00 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	6a1b      	ldr	r3, [r3, #32]
  401ed0:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d001      	beq.n	401ee0 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401edc:	2305      	movs	r3, #5
  401ede:	e02e      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	f003 0304 	and.w	r3, r3, #4
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d100      	bne.n	401eec <twihs_master_write+0x7c>
			continue;
  401eea:	e009      	b.n	401f00 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401eec:	693b      	ldr	r3, [r7, #16]
  401eee:	1c5a      	adds	r2, r3, #1
  401ef0:	613a      	str	r2, [r7, #16]
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	461a      	mov	r2, r3
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401efa:	697b      	ldr	r3, [r7, #20]
  401efc:	3b01      	subs	r3, #1
  401efe:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f00:	697b      	ldr	r3, [r7, #20]
  401f02:	2b00      	cmp	r3, #0
  401f04:	d1e2      	bne.n	401ecc <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	6a1b      	ldr	r3, [r3, #32]
  401f0a:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401f0c:	68fb      	ldr	r3, [r7, #12]
  401f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401f12:	2b00      	cmp	r3, #0
  401f14:	d001      	beq.n	401f1a <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401f16:	2305      	movs	r3, #5
  401f18:	e011      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401f1a:	68fb      	ldr	r3, [r7, #12]
  401f1c:	f003 0304 	and.w	r3, r3, #4
  401f20:	2b00      	cmp	r3, #0
  401f22:	d004      	beq.n	401f2e <twihs_master_write+0xbe>
			break;
  401f24:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	2202      	movs	r2, #2
  401f2a:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f2c:	e000      	b.n	401f30 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  401f2e:	e7ea      	b.n	401f06 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f30:	687b      	ldr	r3, [r7, #4]
  401f32:	6a1b      	ldr	r3, [r3, #32]
  401f34:	f003 0301 	and.w	r3, r3, #1
  401f38:	2b00      	cmp	r3, #0
  401f3a:	d0f9      	beq.n	401f30 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401f3c:	2300      	movs	r3, #0
}
  401f3e:	4618      	mov	r0, r3
  401f40:	3718      	adds	r7, #24
  401f42:	46bd      	mov	sp, r7
  401f44:	bd80      	pop	{r7, pc}
  401f46:	bf00      	nop
  401f48:	00401d2d 	.word	0x00401d2d

00401f4c <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	2280      	movs	r2, #128	; 0x80
  401f58:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr

00401f68 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401f68:	b480      	push	{r7}
  401f6a:	b085      	sub	sp, #20
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401f72:	2300      	movs	r3, #0
  401f74:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401f76:	687b      	ldr	r3, [r7, #4]
  401f78:	22ac      	movs	r2, #172	; 0xac
  401f7a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401f7c:	683b      	ldr	r3, [r7, #0]
  401f7e:	681a      	ldr	r2, [r3, #0]
  401f80:	683b      	ldr	r3, [r7, #0]
  401f82:	685b      	ldr	r3, [r3, #4]
  401f84:	fbb2 f3f3 	udiv	r3, r2, r3
  401f88:	091b      	lsrs	r3, r3, #4
  401f8a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d003      	beq.n	401f9a <uart_init+0x32>
  401f92:	68fb      	ldr	r3, [r7, #12]
  401f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401f98:	d301      	bcc.n	401f9e <uart_init+0x36>
		return 1;
  401f9a:	2301      	movs	r3, #1
  401f9c:	e00a      	b.n	401fb4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	68fa      	ldr	r2, [r7, #12]
  401fa2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401fa4:	683b      	ldr	r3, [r7, #0]
  401fa6:	689a      	ldr	r2, [r3, #8]
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401fac:	687b      	ldr	r3, [r7, #4]
  401fae:	2250      	movs	r2, #80	; 0x50
  401fb0:	601a      	str	r2, [r3, #0]

	return 0;
  401fb2:	2300      	movs	r3, #0
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fbe:	4770      	bx	lr

00401fc0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401fc0:	b480      	push	{r7}
  401fc2:	b083      	sub	sp, #12
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	6078      	str	r0, [r7, #4]
  401fc8:	460b      	mov	r3, r1
  401fca:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401fcc:	687b      	ldr	r3, [r7, #4]
  401fce:	695b      	ldr	r3, [r3, #20]
  401fd0:	f003 0302 	and.w	r3, r3, #2
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d101      	bne.n	401fdc <uart_write+0x1c>
		return 1;
  401fd8:	2301      	movs	r3, #1
  401fda:	e003      	b.n	401fe4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401fdc:	78fa      	ldrb	r2, [r7, #3]
  401fde:	687b      	ldr	r3, [r7, #4]
  401fe0:	61da      	str	r2, [r3, #28]
	return 0;
  401fe2:	2300      	movs	r3, #0
}
  401fe4:	4618      	mov	r0, r3
  401fe6:	370c      	adds	r7, #12
  401fe8:	46bd      	mov	sp, r7
  401fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fee:	4770      	bx	lr

00401ff0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
  401ff8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	695b      	ldr	r3, [r3, #20]
  401ffe:	f003 0301 	and.w	r3, r3, #1
  402002:	2b00      	cmp	r3, #0
  402004:	d101      	bne.n	40200a <uart_read+0x1a>
		return 1;
  402006:	2301      	movs	r3, #1
  402008:	e005      	b.n	402016 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	699b      	ldr	r3, [r3, #24]
  40200e:	b2da      	uxtb	r2, r3
  402010:	683b      	ldr	r3, [r7, #0]
  402012:	701a      	strb	r2, [r3, #0]
	return 0;
  402014:	2300      	movs	r3, #0
}
  402016:	4618      	mov	r0, r3
  402018:	370c      	adds	r7, #12
  40201a:	46bd      	mov	sp, r7
  40201c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402020:	4770      	bx	lr
  402022:	bf00      	nop

00402024 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402024:	b480      	push	{r7}
  402026:	b089      	sub	sp, #36	; 0x24
  402028:	af00      	add	r7, sp, #0
  40202a:	60f8      	str	r0, [r7, #12]
  40202c:	60b9      	str	r1, [r7, #8]
  40202e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402030:	68bb      	ldr	r3, [r7, #8]
  402032:	011a      	lsls	r2, r3, #4
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	429a      	cmp	r2, r3
  402038:	d802      	bhi.n	402040 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40203a:	2310      	movs	r3, #16
  40203c:	61fb      	str	r3, [r7, #28]
  40203e:	e001      	b.n	402044 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  402040:	2308      	movs	r3, #8
  402042:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	00da      	lsls	r2, r3, #3
  402048:	69fb      	ldr	r3, [r7, #28]
  40204a:	68b9      	ldr	r1, [r7, #8]
  40204c:	fb01 f303 	mul.w	r3, r1, r3
  402050:	085b      	lsrs	r3, r3, #1
  402052:	441a      	add	r2, r3
  402054:	69fb      	ldr	r3, [r7, #28]
  402056:	68b9      	ldr	r1, [r7, #8]
  402058:	fb01 f303 	mul.w	r3, r1, r3
  40205c:	fbb2 f3f3 	udiv	r3, r2, r3
  402060:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  402062:	69bb      	ldr	r3, [r7, #24]
  402064:	08db      	lsrs	r3, r3, #3
  402066:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402068:	69bb      	ldr	r3, [r7, #24]
  40206a:	f003 0307 	and.w	r3, r3, #7
  40206e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402070:	697b      	ldr	r3, [r7, #20]
  402072:	2b00      	cmp	r3, #0
  402074:	d003      	beq.n	40207e <usart_set_async_baudrate+0x5a>
  402076:	697b      	ldr	r3, [r7, #20]
  402078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40207c:	d301      	bcc.n	402082 <usart_set_async_baudrate+0x5e>
		return 1;
  40207e:	2301      	movs	r3, #1
  402080:	e00f      	b.n	4020a2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  402082:	69fb      	ldr	r3, [r7, #28]
  402084:	2b08      	cmp	r3, #8
  402086:	d105      	bne.n	402094 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402088:	68fb      	ldr	r3, [r7, #12]
  40208a:	685b      	ldr	r3, [r3, #4]
  40208c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402094:	693b      	ldr	r3, [r7, #16]
  402096:	041a      	lsls	r2, r3, #16
  402098:	697b      	ldr	r3, [r7, #20]
  40209a:	431a      	orrs	r2, r3
  40209c:	68fb      	ldr	r3, [r7, #12]
  40209e:	621a      	str	r2, [r3, #32]

	return 0;
  4020a0:	2300      	movs	r3, #0
}
  4020a2:	4618      	mov	r0, r3
  4020a4:	3724      	adds	r7, #36	; 0x24
  4020a6:	46bd      	mov	sp, r7
  4020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	b082      	sub	sp, #8
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4020b8:	6878      	ldr	r0, [r7, #4]
  4020ba:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <usart_reset+0x40>)
  4020bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2200      	movs	r2, #0
  4020c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	2200      	movs	r2, #0
  4020c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	2200      	movs	r2, #0
  4020ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4020d0:	6878      	ldr	r0, [r7, #4]
  4020d2:	4b08      	ldr	r3, [pc, #32]	; (4020f4 <usart_reset+0x44>)
  4020d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4020d6:	6878      	ldr	r0, [r7, #4]
  4020d8:	4b07      	ldr	r3, [pc, #28]	; (4020f8 <usart_reset+0x48>)
  4020da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4020dc:	6878      	ldr	r0, [r7, #4]
  4020de:	4b07      	ldr	r3, [pc, #28]	; (4020fc <usart_reset+0x4c>)
  4020e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4020e2:	6878      	ldr	r0, [r7, #4]
  4020e4:	4b06      	ldr	r3, [pc, #24]	; (402100 <usart_reset+0x50>)
  4020e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4020e8:	3708      	adds	r7, #8
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bd80      	pop	{r7, pc}
  4020ee:	bf00      	nop
  4020f0:	00402345 	.word	0x00402345
  4020f4:	004021a1 	.word	0x004021a1
  4020f8:	004021ed 	.word	0x004021ed
  4020fc:	00402255 	.word	0x00402255
  402100:	00402271 	.word	0x00402271

00402104 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402104:	b580      	push	{r7, lr}
  402106:	b084      	sub	sp, #16
  402108:	af00      	add	r7, sp, #0
  40210a:	60f8      	str	r0, [r7, #12]
  40210c:	60b9      	str	r1, [r7, #8]
  40210e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402110:	68f8      	ldr	r0, [r7, #12]
  402112:	4b1a      	ldr	r3, [pc, #104]	; (40217c <usart_init_rs232+0x78>)
  402114:	4798      	blx	r3

	ul_reg_val = 0;
  402116:	4b1a      	ldr	r3, [pc, #104]	; (402180 <usart_init_rs232+0x7c>)
  402118:	2200      	movs	r2, #0
  40211a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40211c:	68bb      	ldr	r3, [r7, #8]
  40211e:	2b00      	cmp	r3, #0
  402120:	d009      	beq.n	402136 <usart_init_rs232+0x32>
  402122:	68bb      	ldr	r3, [r7, #8]
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	68f8      	ldr	r0, [r7, #12]
  402128:	4619      	mov	r1, r3
  40212a:	687a      	ldr	r2, [r7, #4]
  40212c:	4b15      	ldr	r3, [pc, #84]	; (402184 <usart_init_rs232+0x80>)
  40212e:	4798      	blx	r3
  402130:	4603      	mov	r3, r0
  402132:	2b00      	cmp	r3, #0
  402134:	d001      	beq.n	40213a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402136:	2301      	movs	r3, #1
  402138:	e01b      	b.n	402172 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	685a      	ldr	r2, [r3, #4]
  40213e:	68bb      	ldr	r3, [r7, #8]
  402140:	689b      	ldr	r3, [r3, #8]
  402142:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402144:	68bb      	ldr	r3, [r7, #8]
  402146:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402148:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40214a:	68bb      	ldr	r3, [r7, #8]
  40214c:	68db      	ldr	r3, [r3, #12]
  40214e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402150:	4b0b      	ldr	r3, [pc, #44]	; (402180 <usart_init_rs232+0x7c>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	4313      	orrs	r3, r2
  402156:	4a0a      	ldr	r2, [pc, #40]	; (402180 <usart_init_rs232+0x7c>)
  402158:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40215a:	4b09      	ldr	r3, [pc, #36]	; (402180 <usart_init_rs232+0x7c>)
  40215c:	681b      	ldr	r3, [r3, #0]
  40215e:	4a08      	ldr	r2, [pc, #32]	; (402180 <usart_init_rs232+0x7c>)
  402160:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  402162:	68fb      	ldr	r3, [r7, #12]
  402164:	685a      	ldr	r2, [r3, #4]
  402166:	4b06      	ldr	r3, [pc, #24]	; (402180 <usart_init_rs232+0x7c>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	431a      	orrs	r2, r3
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	605a      	str	r2, [r3, #4]

	return 0;
  402170:	2300      	movs	r3, #0
}
  402172:	4618      	mov	r0, r3
  402174:	3710      	adds	r7, #16
  402176:	46bd      	mov	sp, r7
  402178:	bd80      	pop	{r7, pc}
  40217a:	bf00      	nop
  40217c:	004020b1 	.word	0x004020b1
  402180:	204009a0 	.word	0x204009a0
  402184:	00402025 	.word	0x00402025

00402188 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402188:	b480      	push	{r7}
  40218a:	b083      	sub	sp, #12
  40218c:	af00      	add	r7, sp, #0
  40218e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	2240      	movs	r2, #64	; 0x40
  402194:	601a      	str	r2, [r3, #0]
}
  402196:	370c      	adds	r7, #12
  402198:	46bd      	mov	sp, r7
  40219a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40219e:	4770      	bx	lr

004021a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4021a0:	b480      	push	{r7}
  4021a2:	b083      	sub	sp, #12
  4021a4:	af00      	add	r7, sp, #0
  4021a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	2288      	movs	r2, #136	; 0x88
  4021ac:	601a      	str	r2, [r3, #0]
}
  4021ae:	370c      	adds	r7, #12
  4021b0:	46bd      	mov	sp, r7
  4021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021b6:	4770      	bx	lr

004021b8 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
  4021c0:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  4021c2:	687b      	ldr	r3, [r7, #4]
  4021c4:	683a      	ldr	r2, [r7, #0]
  4021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
  4021c8:	370c      	adds	r7, #12
  4021ca:	46bd      	mov	sp, r7
  4021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4021d4:	b480      	push	{r7}
  4021d6:	b083      	sub	sp, #12
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4021dc:	687b      	ldr	r3, [r7, #4]
  4021de:	2210      	movs	r2, #16
  4021e0:	601a      	str	r2, [r3, #0]
}
  4021e2:	370c      	adds	r7, #12
  4021e4:	46bd      	mov	sp, r7
  4021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ea:	4770      	bx	lr

004021ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4021ec:	b480      	push	{r7}
  4021ee:	b083      	sub	sp, #12
  4021f0:	af00      	add	r7, sp, #0
  4021f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	2224      	movs	r2, #36	; 0x24
  4021f8:	601a      	str	r2, [r3, #0]
}
  4021fa:	370c      	adds	r7, #12
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402204:	b480      	push	{r7}
  402206:	b083      	sub	sp, #12
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
  40220c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40220e:	687b      	ldr	r3, [r7, #4]
  402210:	683a      	ldr	r2, [r7, #0]
  402212:	609a      	str	r2, [r3, #8]
}
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop

00402220 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402220:	b480      	push	{r7}
  402222:	b083      	sub	sp, #12
  402224:	af00      	add	r7, sp, #0
  402226:	6078      	str	r0, [r7, #4]
  402228:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	683a      	ldr	r2, [r7, #0]
  40222e:	60da      	str	r2, [r3, #12]
}
  402230:	370c      	adds	r7, #12
  402232:	46bd      	mov	sp, r7
  402234:	f85d 7b04 	ldr.w	r7, [sp], #4
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	695b      	ldr	r3, [r3, #20]
}
  402248:	4618      	mov	r0, r3
  40224a:	370c      	adds	r7, #12
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402262:	601a      	str	r2, [r3, #0]
}
  402264:	370c      	adds	r7, #12
  402266:	46bd      	mov	sp, r7
  402268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop

00402270 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40227e:	601a      	str	r2, [r3, #0]
}
  402280:	370c      	adds	r7, #12
  402282:	46bd      	mov	sp, r7
  402284:	f85d 7b04 	ldr.w	r7, [sp], #4
  402288:	4770      	bx	lr
  40228a:	bf00      	nop

0040228c <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  40228c:	b480      	push	{r7}
  40228e:	b083      	sub	sp, #12
  402290:	af00      	add	r7, sp, #0
  402292:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  402294:	687b      	ldr	r3, [r7, #4]
  402296:	695b      	ldr	r3, [r3, #20]
  402298:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40229c:	2b00      	cmp	r3, #0
  40229e:	bf14      	ite	ne
  4022a0:	2301      	movne	r3, #1
  4022a2:	2300      	moveq	r3, #0
  4022a4:	b2db      	uxtb	r3, r3
}
  4022a6:	4618      	mov	r0, r3
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop

004022b4 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	695b      	ldr	r3, [r3, #20]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	bf14      	ite	ne
  4022c8:	2301      	movne	r3, #1
  4022ca:	2300      	moveq	r3, #0
  4022cc:	b2db      	uxtb	r3, r3
}
  4022ce:	4618      	mov	r0, r3
  4022d0:	370c      	adds	r7, #12
  4022d2:	46bd      	mov	sp, r7
  4022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022d8:	4770      	bx	lr
  4022da:	bf00      	nop

004022dc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4022dc:	b480      	push	{r7}
  4022de:	b083      	sub	sp, #12
  4022e0:	af00      	add	r7, sp, #0
  4022e2:	6078      	str	r0, [r7, #4]
  4022e4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4022e6:	687b      	ldr	r3, [r7, #4]
  4022e8:	695b      	ldr	r3, [r3, #20]
  4022ea:	f003 0302 	and.w	r3, r3, #2
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d101      	bne.n	4022f6 <usart_write+0x1a>
		return 1;
  4022f2:	2301      	movs	r3, #1
  4022f4:	e005      	b.n	402302 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4022f6:	683b      	ldr	r3, [r7, #0]
  4022f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	61da      	str	r2, [r3, #28]
	return 0;
  402300:	2300      	movs	r3, #0
}
  402302:	4618      	mov	r0, r3
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop

00402310 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402310:	b480      	push	{r7}
  402312:	b083      	sub	sp, #12
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
  402318:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40231a:	687b      	ldr	r3, [r7, #4]
  40231c:	695b      	ldr	r3, [r3, #20]
  40231e:	f003 0301 	and.w	r3, r3, #1
  402322:	2b00      	cmp	r3, #0
  402324:	d101      	bne.n	40232a <usart_read+0x1a>
		return 1;
  402326:	2301      	movs	r3, #1
  402328:	e006      	b.n	402338 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	699b      	ldr	r3, [r3, #24]
  40232e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402332:	683b      	ldr	r3, [r7, #0]
  402334:	601a      	str	r2, [r3, #0]

	return 0;
  402336:	2300      	movs	r3, #0
}
  402338:	4618      	mov	r0, r3
  40233a:	370c      	adds	r7, #12
  40233c:	46bd      	mov	sp, r7
  40233e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402342:	4770      	bx	lr

00402344 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402344:	b480      	push	{r7}
  402346:	b083      	sub	sp, #12
  402348:	af00      	add	r7, sp, #0
  40234a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40234c:	687b      	ldr	r3, [r7, #4]
  40234e:	4a04      	ldr	r2, [pc, #16]	; (402360 <usart_disable_writeprotect+0x1c>)
  402350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402354:	370c      	adds	r7, #12
  402356:	46bd      	mov	sp, r7
  402358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop
  402360:	55534100 	.word	0x55534100

00402364 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402364:	b580      	push	{r7, lr}
  402366:	b082      	sub	sp, #8
  402368:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40236a:	4b16      	ldr	r3, [pc, #88]	; (4023c4 <Reset_Handler+0x60>)
  40236c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40236e:	4b16      	ldr	r3, [pc, #88]	; (4023c8 <Reset_Handler+0x64>)
  402370:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  402372:	687a      	ldr	r2, [r7, #4]
  402374:	683b      	ldr	r3, [r7, #0]
  402376:	429a      	cmp	r2, r3
  402378:	d00c      	beq.n	402394 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40237a:	e007      	b.n	40238c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40237c:	683b      	ldr	r3, [r7, #0]
  40237e:	1d1a      	adds	r2, r3, #4
  402380:	603a      	str	r2, [r7, #0]
  402382:	687a      	ldr	r2, [r7, #4]
  402384:	1d11      	adds	r1, r2, #4
  402386:	6079      	str	r1, [r7, #4]
  402388:	6812      	ldr	r2, [r2, #0]
  40238a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40238c:	683b      	ldr	r3, [r7, #0]
  40238e:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <Reset_Handler+0x68>)
  402390:	4293      	cmp	r3, r2
  402392:	d3f3      	bcc.n	40237c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402394:	4b0e      	ldr	r3, [pc, #56]	; (4023d0 <Reset_Handler+0x6c>)
  402396:	603b      	str	r3, [r7, #0]
  402398:	e004      	b.n	4023a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40239a:	683b      	ldr	r3, [r7, #0]
  40239c:	1d1a      	adds	r2, r3, #4
  40239e:	603a      	str	r2, [r7, #0]
  4023a0:	2200      	movs	r2, #0
  4023a2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4023a4:	683b      	ldr	r3, [r7, #0]
  4023a6:	4a0b      	ldr	r2, [pc, #44]	; (4023d4 <Reset_Handler+0x70>)
  4023a8:	4293      	cmp	r3, r2
  4023aa:	d3f6      	bcc.n	40239a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4023ac:	4b0a      	ldr	r3, [pc, #40]	; (4023d8 <Reset_Handler+0x74>)
  4023ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4023b0:	4a0a      	ldr	r2, [pc, #40]	; (4023dc <Reset_Handler+0x78>)
  4023b2:	687b      	ldr	r3, [r7, #4]
  4023b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4023b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4023ba:	4b09      	ldr	r3, [pc, #36]	; (4023e0 <Reset_Handler+0x7c>)
  4023bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4023be:	4b09      	ldr	r3, [pc, #36]	; (4023e4 <Reset_Handler+0x80>)
  4023c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4023c2:	e7fe      	b.n	4023c2 <Reset_Handler+0x5e>
  4023c4:	0040da54 	.word	0x0040da54
  4023c8:	20400000 	.word	0x20400000
  4023cc:	20400914 	.word	0x20400914
  4023d0:	20400914 	.word	0x20400914
  4023d4:	2040186c 	.word	0x2040186c
  4023d8:	00400000 	.word	0x00400000
  4023dc:	e000ed00 	.word	0xe000ed00
  4023e0:	00407391 	.word	0x00407391
  4023e4:	004069e9 	.word	0x004069e9

004023e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023e8:	b480      	push	{r7}
  4023ea:	af00      	add	r7, sp, #0
        while (1) {
        }
  4023ec:	e7fe      	b.n	4023ec <Dummy_Handler+0x4>
  4023ee:	bf00      	nop

004023f0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4023f0:	b480      	push	{r7}
  4023f2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023f4:	4b51      	ldr	r3, [pc, #324]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f8:	f003 0303 	and.w	r3, r3, #3
  4023fc:	2b01      	cmp	r3, #1
  4023fe:	d014      	beq.n	40242a <SystemCoreClockUpdate+0x3a>
  402400:	2b01      	cmp	r3, #1
  402402:	d302      	bcc.n	40240a <SystemCoreClockUpdate+0x1a>
  402404:	2b02      	cmp	r3, #2
  402406:	d038      	beq.n	40247a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402408:	e07b      	b.n	402502 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240a:	4b4d      	ldr	r3, [pc, #308]	; (402540 <SystemCoreClockUpdate+0x150>)
  40240c:	695b      	ldr	r3, [r3, #20]
  40240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402412:	2b00      	cmp	r3, #0
  402414:	d004      	beq.n	402420 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402416:	4b4b      	ldr	r3, [pc, #300]	; (402544 <SystemCoreClockUpdate+0x154>)
  402418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40241c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40241e:	e070      	b.n	402502 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402420:	4b48      	ldr	r3, [pc, #288]	; (402544 <SystemCoreClockUpdate+0x154>)
  402422:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402426:	601a      	str	r2, [r3, #0]
      }
    break;
  402428:	e06b      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40242a:	4b44      	ldr	r3, [pc, #272]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402436:	4b43      	ldr	r3, [pc, #268]	; (402544 <SystemCoreClockUpdate+0x154>)
  402438:	4a43      	ldr	r2, [pc, #268]	; (402548 <SystemCoreClockUpdate+0x158>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e01c      	b.n	402478 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b41      	ldr	r3, [pc, #260]	; (402544 <SystemCoreClockUpdate+0x154>)
  402440:	4a42      	ldr	r2, [pc, #264]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402444:	4b3d      	ldr	r3, [pc, #244]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d004      	beq.n	40245a <SystemCoreClockUpdate+0x6a>
  402450:	2b20      	cmp	r3, #32
  402452:	d008      	beq.n	402466 <SystemCoreClockUpdate+0x76>
  402454:	2b00      	cmp	r3, #0
  402456:	d00e      	beq.n	402476 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402458:	e00e      	b.n	402478 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40245a:	4b3a      	ldr	r3, [pc, #232]	; (402544 <SystemCoreClockUpdate+0x154>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	005b      	lsls	r3, r3, #1
  402460:	4a38      	ldr	r2, [pc, #224]	; (402544 <SystemCoreClockUpdate+0x154>)
  402462:	6013      	str	r3, [r2, #0]
          break;
  402464:	e008      	b.n	402478 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402466:	4b37      	ldr	r3, [pc, #220]	; (402544 <SystemCoreClockUpdate+0x154>)
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	4613      	mov	r3, r2
  40246c:	005b      	lsls	r3, r3, #1
  40246e:	4413      	add	r3, r2
  402470:	4a34      	ldr	r2, [pc, #208]	; (402544 <SystemCoreClockUpdate+0x154>)
  402472:	6013      	str	r3, [r2, #0]
          break;
  402474:	e000      	b.n	402478 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402476:	bf00      	nop

          default:
          break;
        }
      }
    break;
  402478:	e043      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40247a:	4b30      	ldr	r3, [pc, #192]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40247c:	6a1b      	ldr	r3, [r3, #32]
  40247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402482:	2b00      	cmp	r3, #0
  402484:	d003      	beq.n	40248e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <SystemCoreClockUpdate+0x154>)
  402488:	4a2f      	ldr	r2, [pc, #188]	; (402548 <SystemCoreClockUpdate+0x158>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	e01c      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40248e:	4b2d      	ldr	r3, [pc, #180]	; (402544 <SystemCoreClockUpdate+0x154>)
  402490:	4a2e      	ldr	r2, [pc, #184]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402492:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402494:	4b29      	ldr	r3, [pc, #164]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402496:	6a1b      	ldr	r3, [r3, #32]
  402498:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40249c:	2b10      	cmp	r3, #16
  40249e:	d004      	beq.n	4024aa <SystemCoreClockUpdate+0xba>
  4024a0:	2b20      	cmp	r3, #32
  4024a2:	d008      	beq.n	4024b6 <SystemCoreClockUpdate+0xc6>
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	d00e      	beq.n	4024c6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4024a8:	e00e      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4024aa:	4b26      	ldr	r3, [pc, #152]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ac:	681b      	ldr	r3, [r3, #0]
  4024ae:	005b      	lsls	r3, r3, #1
  4024b0:	4a24      	ldr	r2, [pc, #144]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b2:	6013      	str	r3, [r2, #0]
          break;
  4024b4:	e008      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4024b6:	4b23      	ldr	r3, [pc, #140]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b8:	681a      	ldr	r2, [r3, #0]
  4024ba:	4613      	mov	r3, r2
  4024bc:	005b      	lsls	r3, r3, #1
  4024be:	4413      	add	r3, r2
  4024c0:	4a20      	ldr	r2, [pc, #128]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024c2:	6013      	str	r3, [r2, #0]
          break;
  4024c4:	e000      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4024c6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4024c8:	4b1c      	ldr	r3, [pc, #112]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024cc:	f003 0303 	and.w	r3, r3, #3
  4024d0:	2b02      	cmp	r3, #2
  4024d2:	d115      	bne.n	402500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4024d4:	4b19      	ldr	r3, [pc, #100]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4024d8:	4b1d      	ldr	r3, [pc, #116]	; (402550 <SystemCoreClockUpdate+0x160>)
  4024da:	4013      	ands	r3, r2
  4024dc:	0c1b      	lsrs	r3, r3, #16
  4024de:	3301      	adds	r3, #1
  4024e0:	4a18      	ldr	r2, [pc, #96]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024e2:	6812      	ldr	r2, [r2, #0]
  4024e4:	fb02 f303 	mul.w	r3, r2, r3
  4024e8:	4a16      	ldr	r2, [pc, #88]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ea:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4024ec:	4b13      	ldr	r3, [pc, #76]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4024f0:	b2db      	uxtb	r3, r3
  4024f2:	4a14      	ldr	r2, [pc, #80]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024f4:	6812      	ldr	r2, [r2, #0]
  4024f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4024fa:	4a12      	ldr	r2, [pc, #72]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024fc:	6013      	str	r3, [r2, #0]
      }
    break;
  4024fe:	e7ff      	b.n	402500 <SystemCoreClockUpdate+0x110>
  402500:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402502:	4b0e      	ldr	r3, [pc, #56]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40250a:	2b70      	cmp	r3, #112	; 0x70
  40250c:	d108      	bne.n	402520 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40250e:	4b0d      	ldr	r3, [pc, #52]	; (402544 <SystemCoreClockUpdate+0x154>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	4a10      	ldr	r2, [pc, #64]	; (402554 <SystemCoreClockUpdate+0x164>)
  402514:	fba2 2303 	umull	r2, r3, r2, r3
  402518:	085b      	lsrs	r3, r3, #1
  40251a:	4a0a      	ldr	r2, [pc, #40]	; (402544 <SystemCoreClockUpdate+0x154>)
  40251c:	6013      	str	r3, [r2, #0]
  40251e:	e009      	b.n	402534 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402520:	4b06      	ldr	r3, [pc, #24]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402524:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402528:	091a      	lsrs	r2, r3, #4
  40252a:	4b06      	ldr	r3, [pc, #24]	; (402544 <SystemCoreClockUpdate+0x154>)
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	40d3      	lsrs	r3, r2
  402530:	4a04      	ldr	r2, [pc, #16]	; (402544 <SystemCoreClockUpdate+0x154>)
  402532:	6013      	str	r3, [r2, #0]
  }
}
  402534:	46bd      	mov	sp, r7
  402536:	f85d 7b04 	ldr.w	r7, [sp], #4
  40253a:	4770      	bx	lr
  40253c:	400e0600 	.word	0x400e0600
  402540:	400e1810 	.word	0x400e1810
  402544:	20400004 	.word	0x20400004
  402548:	00b71b00 	.word	0x00b71b00
  40254c:	003d0900 	.word	0x003d0900
  402550:	07ff0000 	.word	0x07ff0000
  402554:	aaaaaaab 	.word	0xaaaaaaab

00402558 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402558:	b480      	push	{r7}
  40255a:	b083      	sub	sp, #12
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402560:	687b      	ldr	r3, [r7, #4]
  402562:	4a18      	ldr	r2, [pc, #96]	; (4025c4 <system_init_flash+0x6c>)
  402564:	4293      	cmp	r3, r2
  402566:	d804      	bhi.n	402572 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <system_init_flash+0x70>)
  40256a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40256e:	601a      	str	r2, [r3, #0]
  402570:	e023      	b.n	4025ba <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402572:	687b      	ldr	r3, [r7, #4]
  402574:	4a15      	ldr	r2, [pc, #84]	; (4025cc <system_init_flash+0x74>)
  402576:	4293      	cmp	r3, r2
  402578:	d803      	bhi.n	402582 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40257a:	4b13      	ldr	r3, [pc, #76]	; (4025c8 <system_init_flash+0x70>)
  40257c:	4a14      	ldr	r2, [pc, #80]	; (4025d0 <system_init_flash+0x78>)
  40257e:	601a      	str	r2, [r3, #0]
  402580:	e01b      	b.n	4025ba <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402582:	687b      	ldr	r3, [r7, #4]
  402584:	4a13      	ldr	r2, [pc, #76]	; (4025d4 <system_init_flash+0x7c>)
  402586:	4293      	cmp	r3, r2
  402588:	d803      	bhi.n	402592 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40258a:	4b0f      	ldr	r3, [pc, #60]	; (4025c8 <system_init_flash+0x70>)
  40258c:	4a12      	ldr	r2, [pc, #72]	; (4025d8 <system_init_flash+0x80>)
  40258e:	601a      	str	r2, [r3, #0]
  402590:	e013      	b.n	4025ba <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402592:	687b      	ldr	r3, [r7, #4]
  402594:	4a11      	ldr	r2, [pc, #68]	; (4025dc <system_init_flash+0x84>)
  402596:	4293      	cmp	r3, r2
  402598:	d803      	bhi.n	4025a2 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40259a:	4b0b      	ldr	r3, [pc, #44]	; (4025c8 <system_init_flash+0x70>)
  40259c:	4a10      	ldr	r2, [pc, #64]	; (4025e0 <system_init_flash+0x88>)
  40259e:	601a      	str	r2, [r3, #0]
  4025a0:	e00b      	b.n	4025ba <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025a2:	687b      	ldr	r3, [r7, #4]
  4025a4:	4a0f      	ldr	r2, [pc, #60]	; (4025e4 <system_init_flash+0x8c>)
  4025a6:	4293      	cmp	r3, r2
  4025a8:	d804      	bhi.n	4025b4 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4025aa:	4b07      	ldr	r3, [pc, #28]	; (4025c8 <system_init_flash+0x70>)
  4025ac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	e002      	b.n	4025ba <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025b4:	4b04      	ldr	r3, [pc, #16]	; (4025c8 <system_init_flash+0x70>)
  4025b6:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <system_init_flash+0x90>)
  4025b8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4025ba:	370c      	adds	r7, #12
  4025bc:	46bd      	mov	sp, r7
  4025be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025c2:	4770      	bx	lr
  4025c4:	01312cff 	.word	0x01312cff
  4025c8:	400e0c00 	.word	0x400e0c00
  4025cc:	026259ff 	.word	0x026259ff
  4025d0:	04000100 	.word	0x04000100
  4025d4:	039386ff 	.word	0x039386ff
  4025d8:	04000200 	.word	0x04000200
  4025dc:	04c4b3ff 	.word	0x04c4b3ff
  4025e0:	04000300 	.word	0x04000300
  4025e4:	05f5e0ff 	.word	0x05f5e0ff
  4025e8:	04000500 	.word	0x04000500

004025ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4025ec:	b480      	push	{r7}
  4025ee:	b085      	sub	sp, #20
  4025f0:	af00      	add	r7, sp, #0
  4025f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025f4:	4b10      	ldr	r3, [pc, #64]	; (402638 <_sbrk+0x4c>)
  4025f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025f8:	4b10      	ldr	r3, [pc, #64]	; (40263c <_sbrk+0x50>)
  4025fa:	681b      	ldr	r3, [r3, #0]
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d102      	bne.n	402606 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402600:	4b0e      	ldr	r3, [pc, #56]	; (40263c <_sbrk+0x50>)
  402602:	4a0f      	ldr	r2, [pc, #60]	; (402640 <_sbrk+0x54>)
  402604:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402606:	4b0d      	ldr	r3, [pc, #52]	; (40263c <_sbrk+0x50>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40260c:	68ba      	ldr	r2, [r7, #8]
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	441a      	add	r2, r3
  402612:	68fb      	ldr	r3, [r7, #12]
  402614:	429a      	cmp	r2, r3
  402616:	dd02      	ble.n	40261e <_sbrk+0x32>
		return (caddr_t) -1;	
  402618:	f04f 33ff 	mov.w	r3, #4294967295
  40261c:	e006      	b.n	40262c <_sbrk+0x40>
	}

	heap += incr;
  40261e:	4b07      	ldr	r3, [pc, #28]	; (40263c <_sbrk+0x50>)
  402620:	681a      	ldr	r2, [r3, #0]
  402622:	687b      	ldr	r3, [r7, #4]
  402624:	4413      	add	r3, r2
  402626:	4a05      	ldr	r2, [pc, #20]	; (40263c <_sbrk+0x50>)
  402628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40262a:	68bb      	ldr	r3, [r7, #8]
}
  40262c:	4618      	mov	r0, r3
  40262e:	3714      	adds	r7, #20
  402630:	46bd      	mov	sp, r7
  402632:	f85d 7b04 	ldr.w	r7, [sp], #4
  402636:	4770      	bx	lr
  402638:	2045fffc 	.word	0x2045fffc
  40263c:	204009a4 	.word	0x204009a4
  402640:	20403a70 	.word	0x20403a70

00402644 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402644:	b480      	push	{r7}
  402646:	b083      	sub	sp, #12
  402648:	af00      	add	r7, sp, #0
  40264a:	6078      	str	r0, [r7, #4]
	return -1;
  40264c:	f04f 33ff 	mov.w	r3, #4294967295
}
  402650:	4618      	mov	r0, r3
  402652:	370c      	adds	r7, #12
  402654:	46bd      	mov	sp, r7
  402656:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265a:	4770      	bx	lr

0040265c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40265c:	b480      	push	{r7}
  40265e:	b083      	sub	sp, #12
  402660:	af00      	add	r7, sp, #0
  402662:	6078      	str	r0, [r7, #4]
  402664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402666:	683b      	ldr	r3, [r7, #0]
  402668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40266c:	605a      	str	r2, [r3, #4]

	return 0;
  40266e:	2300      	movs	r3, #0
}
  402670:	4618      	mov	r0, r3
  402672:	370c      	adds	r7, #12
  402674:	46bd      	mov	sp, r7
  402676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40267a:	4770      	bx	lr

0040267c <_isatty>:

extern int _isatty(int file)
{
  40267c:	b480      	push	{r7}
  40267e:	b083      	sub	sp, #12
  402680:	af00      	add	r7, sp, #0
  402682:	6078      	str	r0, [r7, #4]
	return 1;
  402684:	2301      	movs	r3, #1
}
  402686:	4618      	mov	r0, r3
  402688:	370c      	adds	r7, #12
  40268a:	46bd      	mov	sp, r7
  40268c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402690:	4770      	bx	lr
  402692:	bf00      	nop

00402694 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402694:	b480      	push	{r7}
  402696:	b085      	sub	sp, #20
  402698:	af00      	add	r7, sp, #0
  40269a:	60f8      	str	r0, [r7, #12]
  40269c:	60b9      	str	r1, [r7, #8]
  40269e:	607a      	str	r2, [r7, #4]
	return 0;
  4026a0:	2300      	movs	r3, #0
}
  4026a2:	4618      	mov	r0, r3
  4026a4:	3714      	adds	r7, #20
  4026a6:	46bd      	mov	sp, r7
  4026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop

004026b0 <print_ecdbg>:
static const char HEX_DIGITS[16] = "0123456789ABCDEF";



void print_ecdbg(const char *str)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b082      	sub	sp, #8
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]
  // Redirection to the debug USART.
  func_transmit(str, strlen(str));
  4026b8:	6878      	ldr	r0, [r7, #4]
  4026ba:	4b05      	ldr	r3, [pc, #20]	; (4026d0 <print_ecdbg+0x20>)
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	6878      	ldr	r0, [r7, #4]
  4026c2:	4619      	mov	r1, r3
  4026c4:	4b03      	ldr	r3, [pc, #12]	; (4026d4 <print_ecdbg+0x24>)
  4026c6:	4798      	blx	r3
}
  4026c8:	3708      	adds	r7, #8
  4026ca:	46bd      	mov	sp, r7
  4026cc:	bd80      	pop	{r7, pc}
  4026ce:	bf00      	nop
  4026d0:	00407649 	.word	0x00407649
  4026d4:	00403d71 	.word	0x00403d71

004026d8 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  4026d8:	b580      	push	{r7, lr}
  4026da:	b088      	sub	sp, #32
  4026dc:	af00      	add	r7, sp, #0
  4026de:	4603      	mov	r3, r0
  4026e0:	71fb      	strb	r3, [r7, #7]
  4026e2:	460b      	mov	r3, r1
  4026e4:	71bb      	strb	r3, [r7, #6]
  4026e6:	4613      	mov	r3, r2
  4026e8:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  4026ea:	79bb      	ldrb	r3, [r7, #6]
  4026ec:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  4026ee:	797b      	ldrb	r3, [r7, #5]
  4026f0:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4026f2:	79fb      	ldrb	r3, [r7, #7]
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d102      	bne.n	4026fe <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4026f8:	2360      	movs	r3, #96	; 0x60
  4026fa:	763b      	strb	r3, [r7, #24]
  4026fc:	e004      	b.n	402708 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  4026fe:	79fb      	ldrb	r3, [r7, #7]
  402700:	2b01      	cmp	r3, #1
  402702:	d101      	bne.n	402708 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402704:	2361      	movs	r3, #97	; 0x61
  402706:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402708:	2300      	movs	r3, #0
  40270a:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  40270c:	2300      	movs	r3, #0
  40270e:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402710:	2300      	movs	r3, #0
  402712:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402714:	2300      	movs	r3, #0
  402716:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  402718:	f107 031c 	add.w	r3, r7, #28
  40271c:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  40271e:	2302      	movs	r3, #2
  402720:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402722:	bf00      	nop
  402724:	f107 0308 	add.w	r3, r7, #8
  402728:	4805      	ldr	r0, [pc, #20]	; (402740 <PCA9952_write_reg+0x68>)
  40272a:	4619      	mov	r1, r3
  40272c:	4b05      	ldr	r3, [pc, #20]	; (402744 <PCA9952_write_reg+0x6c>)
  40272e:	4798      	blx	r3
  402730:	4603      	mov	r3, r0
  402732:	2b00      	cmp	r3, #0
  402734:	d1f6      	bne.n	402724 <PCA9952_write_reg+0x4c>

	return;
  402736:	bf00      	nop
}
  402738:	3720      	adds	r7, #32
  40273a:	46bd      	mov	sp, r7
  40273c:	bd80      	pop	{r7, pc}
  40273e:	bf00      	nop
  402740:	40018000 	.word	0x40018000
  402744:	00401e71 	.word	0x00401e71

00402748 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  402748:	b580      	push	{r7, lr}
  40274a:	b088      	sub	sp, #32
  40274c:	af00      	add	r7, sp, #0
  40274e:	4603      	mov	r3, r0
  402750:	460a      	mov	r2, r1
  402752:	71fb      	strb	r3, [r7, #7]
  402754:	4613      	mov	r3, r2
  402756:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  402758:	79fb      	ldrb	r3, [r7, #7]
  40275a:	2b00      	cmp	r3, #0
  40275c:	d102      	bne.n	402764 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  40275e:	2360      	movs	r3, #96	; 0x60
  402760:	763b      	strb	r3, [r7, #24]
  402762:	e004      	b.n	40276e <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  402764:	79fb      	ldrb	r3, [r7, #7]
  402766:	2b01      	cmp	r3, #1
  402768:	d101      	bne.n	40276e <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  40276a:	2361      	movs	r3, #97	; 0x61
  40276c:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  40276e:	2300      	movs	r3, #0
  402770:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402772:	2300      	movs	r3, #0
  402774:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402776:	2300      	movs	r3, #0
  402778:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  40277a:	2300      	movs	r3, #0
  40277c:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  40277e:	1dbb      	adds	r3, r7, #6
  402780:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402782:	2301      	movs	r3, #1
  402784:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402786:	bf00      	nop
  402788:	f107 0308 	add.w	r3, r7, #8
  40278c:	480f      	ldr	r0, [pc, #60]	; (4027cc <PCA9952_read_reg+0x84>)
  40278e:	4619      	mov	r1, r3
  402790:	4b0f      	ldr	r3, [pc, #60]	; (4027d0 <PCA9952_read_reg+0x88>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	2b00      	cmp	r3, #0
  402798:	d1f6      	bne.n	402788 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  40279a:	2014      	movs	r0, #20
  40279c:	4b0d      	ldr	r3, [pc, #52]	; (4027d4 <PCA9952_read_reg+0x8c>)
  40279e:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  4027a0:	2300      	movs	r3, #0
  4027a2:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  4027a4:	f107 031f 	add.w	r3, r7, #31
  4027a8:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  4027aa:	2301      	movs	r3, #1
  4027ac:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4027ae:	bf00      	nop
  4027b0:	f107 0308 	add.w	r3, r7, #8
  4027b4:	4805      	ldr	r0, [pc, #20]	; (4027cc <PCA9952_read_reg+0x84>)
  4027b6:	4619      	mov	r1, r3
  4027b8:	4b07      	ldr	r3, [pc, #28]	; (4027d8 <PCA9952_read_reg+0x90>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	2b00      	cmp	r3, #0
  4027c0:	d1f6      	bne.n	4027b0 <PCA9952_read_reg+0x68>

	return data;
  4027c2:	7ffb      	ldrb	r3, [r7, #31]
}
  4027c4:	4618      	mov	r0, r3
  4027c6:	3720      	adds	r7, #32
  4027c8:	46bd      	mov	sp, r7
  4027ca:	bd80      	pop	{r7, pc}
  4027cc:	40018000 	.word	0x40018000
  4027d0:	00401e71 	.word	0x00401e71
  4027d4:	00403a49 	.word	0x00403a49
  4027d8:	00401d89 	.word	0x00401d89

004027dc <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  4027dc:	b5b0      	push	{r4, r5, r7, lr}
  4027de:	b094      	sub	sp, #80	; 0x50
  4027e0:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  4027e2:	1d3b      	adds	r3, r7, #4
  4027e4:	2240      	movs	r2, #64	; 0x40
  4027e6:	4618      	mov	r0, r3
  4027e8:	2100      	movs	r1, #0
  4027ea:	4b45      	ldr	r3, [pc, #276]	; (402900 <PCA9952_init+0x124>)
  4027ec:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4027ee:	2000      	movs	r0, #0
  4027f0:	2100      	movs	r1, #0
  4027f2:	2200      	movs	r2, #0
  4027f4:	4b43      	ldr	r3, [pc, #268]	; (402904 <PCA9952_init+0x128>)
  4027f6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4027f8:	2000      	movs	r0, #0
  4027fa:	2101      	movs	r1, #1
  4027fc:	2200      	movs	r2, #0
  4027fe:	4b41      	ldr	r3, [pc, #260]	; (402904 <PCA9952_init+0x128>)
  402800:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402802:	2000      	movs	r0, #0
  402804:	2143      	movs	r1, #67	; 0x43
  402806:	22c8      	movs	r2, #200	; 0xc8
  402808:	4b3e      	ldr	r3, [pc, #248]	; (402904 <PCA9952_init+0x128>)
  40280a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40280c:	2000      	movs	r0, #0
  40280e:	2102      	movs	r1, #2
  402810:	2200      	movs	r2, #0
  402812:	4b3c      	ldr	r3, [pc, #240]	; (402904 <PCA9952_init+0x128>)
  402814:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  402816:	2000      	movs	r0, #0
  402818:	2103      	movs	r1, #3
  40281a:	2200      	movs	r2, #0
  40281c:	4b39      	ldr	r3, [pc, #228]	; (402904 <PCA9952_init+0x128>)
  40281e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  402820:	2000      	movs	r0, #0
  402822:	2104      	movs	r1, #4
  402824:	2200      	movs	r2, #0
  402826:	4b37      	ldr	r3, [pc, #220]	; (402904 <PCA9952_init+0x128>)
  402828:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  40282a:	2000      	movs	r0, #0
  40282c:	2105      	movs	r1, #5
  40282e:	2200      	movs	r2, #0
  402830:	4b34      	ldr	r3, [pc, #208]	; (402904 <PCA9952_init+0x128>)
  402832:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402834:	2000      	movs	r0, #0
  402836:	2144      	movs	r1, #68	; 0x44
  402838:	4b33      	ldr	r3, [pc, #204]	; (402908 <PCA9952_init+0x12c>)
  40283a:	4798      	blx	r3
  40283c:	4603      	mov	r3, r0
  40283e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  402842:	2000      	movs	r0, #0
  402844:	2145      	movs	r1, #69	; 0x45
  402846:	4b30      	ldr	r3, [pc, #192]	; (402908 <PCA9952_init+0x12c>)
  402848:	4798      	blx	r3
  40284a:	4603      	mov	r3, r0
  40284c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402850:	2001      	movs	r0, #1
  402852:	2100      	movs	r1, #0
  402854:	2200      	movs	r2, #0
  402856:	4b2b      	ldr	r3, [pc, #172]	; (402904 <PCA9952_init+0x128>)
  402858:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  40285a:	2001      	movs	r0, #1
  40285c:	2101      	movs	r1, #1
  40285e:	2200      	movs	r2, #0
  402860:	4b28      	ldr	r3, [pc, #160]	; (402904 <PCA9952_init+0x128>)
  402862:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402864:	2001      	movs	r0, #1
  402866:	2143      	movs	r1, #67	; 0x43
  402868:	22c8      	movs	r2, #200	; 0xc8
  40286a:	4b26      	ldr	r3, [pc, #152]	; (402904 <PCA9952_init+0x128>)
  40286c:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40286e:	2001      	movs	r0, #1
  402870:	2102      	movs	r1, #2
  402872:	2200      	movs	r2, #0
  402874:	4b23      	ldr	r3, [pc, #140]	; (402904 <PCA9952_init+0x128>)
  402876:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  402878:	2001      	movs	r0, #1
  40287a:	2103      	movs	r1, #3
  40287c:	2200      	movs	r2, #0
  40287e:	4b21      	ldr	r3, [pc, #132]	; (402904 <PCA9952_init+0x128>)
  402880:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  402882:	2001      	movs	r0, #1
  402884:	2104      	movs	r1, #4
  402886:	2200      	movs	r2, #0
  402888:	4b1e      	ldr	r3, [pc, #120]	; (402904 <PCA9952_init+0x128>)
  40288a:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  40288c:	2001      	movs	r0, #1
  40288e:	2105      	movs	r1, #5
  402890:	2200      	movs	r2, #0
  402892:	4b1c      	ldr	r3, [pc, #112]	; (402904 <PCA9952_init+0x128>)
  402894:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402896:	2001      	movs	r0, #1
  402898:	2144      	movs	r1, #68	; 0x44
  40289a:	4b1b      	ldr	r3, [pc, #108]	; (402908 <PCA9952_init+0x12c>)
  40289c:	4798      	blx	r3
  40289e:	4603      	mov	r3, r0
  4028a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  4028a4:	2001      	movs	r0, #1
  4028a6:	2145      	movs	r1, #69	; 0x45
  4028a8:	4b17      	ldr	r3, [pc, #92]	; (402908 <PCA9952_init+0x12c>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  4028b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4028b6:	b2db      	uxtb	r3, r3
  4028b8:	461d      	mov	r5, r3
  4028ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4028be:	b2db      	uxtb	r3, r3
  4028c0:	461c      	mov	r4, r3
  4028c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  4028c6:	b2db      	uxtb	r3, r3
  4028c8:	4619      	mov	r1, r3
  4028ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  4028ce:	b2db      	uxtb	r3, r3
  4028d0:	461a      	mov	r2, r3
  4028d2:	1d3b      	adds	r3, r7, #4
  4028d4:	9100      	str	r1, [sp, #0]
  4028d6:	9201      	str	r2, [sp, #4]
  4028d8:	4618      	mov	r0, r3
  4028da:	490c      	ldr	r1, [pc, #48]	; (40290c <PCA9952_init+0x130>)
  4028dc:	462a      	mov	r2, r5
  4028de:	4623      	mov	r3, r4
  4028e0:	4c0b      	ldr	r4, [pc, #44]	; (402910 <PCA9952_init+0x134>)
  4028e2:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  4028e4:	1d3b      	adds	r3, r7, #4
  4028e6:	4618      	mov	r0, r3
  4028e8:	4b0a      	ldr	r3, [pc, #40]	; (402914 <PCA9952_init+0x138>)
  4028ea:	4798      	blx	r3
  4028ec:	4602      	mov	r2, r0
  4028ee:	1d3b      	adds	r3, r7, #4
  4028f0:	4618      	mov	r0, r3
  4028f2:	4611      	mov	r1, r2
  4028f4:	4b08      	ldr	r3, [pc, #32]	; (402918 <PCA9952_init+0x13c>)
  4028f6:	4798      	blx	r3
	
	
}
  4028f8:	3748      	adds	r7, #72	; 0x48
  4028fa:	46bd      	mov	sp, r7
  4028fc:	bdb0      	pop	{r4, r5, r7, pc}
  4028fe:	bf00      	nop
  402900:	004073e1 	.word	0x004073e1
  402904:	004026d9 	.word	0x004026d9
  402908:	00402749 	.word	0x00402749
  40290c:	0040cc2c 	.word	0x0040cc2c
  402910:	004075fd 	.word	0x004075fd
  402914:	00407649 	.word	0x00407649
  402918:	00403d71 	.word	0x00403d71

0040291c <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
  40291c:	b580      	push	{r7, lr}
  40291e:	b084      	sub	sp, #16
  402920:	af00      	add	r7, sp, #0
  402922:	4603      	mov	r3, r0
  402924:	71fb      	strb	r3, [r7, #7]
  402926:	460b      	mov	r3, r1
  402928:	71bb      	strb	r3, [r7, #6]
  40292a:	4613      	mov	r3, r2
  40292c:	717b      	strb	r3, [r7, #5]
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
  40292e:	79bb      	ldrb	r3, [r7, #6]
  402930:	089b      	lsrs	r3, r3, #2
  402932:	737b      	strb	r3, [r7, #13]
	regPos = (channel % 4);
  402934:	79bb      	ldrb	r3, [r7, #6]
  402936:	f003 0303 	and.w	r3, r3, #3
  40293a:	733b      	strb	r3, [r7, #12]
	
	switch(regIdx)
  40293c:	7b7b      	ldrb	r3, [r7, #13]
  40293e:	2b03      	cmp	r3, #3
  402940:	d82a      	bhi.n	402998 <PCA9952_channel+0x7c>
  402942:	a201      	add	r2, pc, #4	; (adr r2, 402948 <PCA9952_channel+0x2c>)
  402944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402948:	00402959 	.word	0x00402959
  40294c:	00402969 	.word	0x00402969
  402950:	00402979 	.word	0x00402979
  402954:	00402989 	.word	0x00402989
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
  402958:	79fb      	ldrb	r3, [r7, #7]
  40295a:	4618      	mov	r0, r3
  40295c:	2102      	movs	r1, #2
  40295e:	4b37      	ldr	r3, [pc, #220]	; (402a3c <PCA9952_channel+0x120>)
  402960:	4798      	blx	r3
  402962:	4603      	mov	r3, r0
  402964:	73fb      	strb	r3, [r7, #15]
			break;
  402966:	e017      	b.n	402998 <PCA9952_channel+0x7c>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
  402968:	79fb      	ldrb	r3, [r7, #7]
  40296a:	4618      	mov	r0, r3
  40296c:	2103      	movs	r1, #3
  40296e:	4b33      	ldr	r3, [pc, #204]	; (402a3c <PCA9952_channel+0x120>)
  402970:	4798      	blx	r3
  402972:	4603      	mov	r3, r0
  402974:	73fb      	strb	r3, [r7, #15]
			break;
  402976:	e00f      	b.n	402998 <PCA9952_channel+0x7c>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
  402978:	79fb      	ldrb	r3, [r7, #7]
  40297a:	4618      	mov	r0, r3
  40297c:	2104      	movs	r1, #4
  40297e:	4b2f      	ldr	r3, [pc, #188]	; (402a3c <PCA9952_channel+0x120>)
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	73fb      	strb	r3, [r7, #15]
			break;
  402986:	e007      	b.n	402998 <PCA9952_channel+0x7c>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
  402988:	79fb      	ldrb	r3, [r7, #7]
  40298a:	4618      	mov	r0, r3
  40298c:	2105      	movs	r1, #5
  40298e:	4b2b      	ldr	r3, [pc, #172]	; (402a3c <PCA9952_channel+0x120>)
  402990:	4798      	blx	r3
  402992:	4603      	mov	r3, r0
  402994:	73fb      	strb	r3, [r7, #15]
			break;		
  402996:	bf00      	nop
	}

	maskVal = 0xFF << (regPos * 2);
  402998:	7b3b      	ldrb	r3, [r7, #12]
  40299a:	005b      	lsls	r3, r3, #1
  40299c:	22ff      	movs	r2, #255	; 0xff
  40299e:	fa02 f303 	lsl.w	r3, r2, r3
  4029a2:	72fb      	strb	r3, [r7, #11]
	maskVal = maskVal ^ 0xFF;
  4029a4:	7afb      	ldrb	r3, [r7, #11]
  4029a6:	43db      	mvns	r3, r3
  4029a8:	72fb      	strb	r3, [r7, #11]
	regShadow &= maskVal;
  4029aa:	7bfa      	ldrb	r2, [r7, #15]
  4029ac:	7afb      	ldrb	r3, [r7, #11]
  4029ae:	4013      	ands	r3, r2
  4029b0:	73fb      	strb	r3, [r7, #15]

	if (onOffn == LED_ON)
  4029b2:	797b      	ldrb	r3, [r7, #5]
  4029b4:	2b01      	cmp	r3, #1
  4029b6:	d106      	bne.n	4029c6 <PCA9952_channel+0xaa>
	{
		writeVal = (0x01 << (regPos * 2));
  4029b8:	7b3b      	ldrb	r3, [r7, #12]
  4029ba:	005b      	lsls	r3, r3, #1
  4029bc:	2201      	movs	r2, #1
  4029be:	fa02 f303 	lsl.w	r3, r2, r3
  4029c2:	73bb      	strb	r3, [r7, #14]
  4029c4:	e004      	b.n	4029d0 <PCA9952_channel+0xb4>
	}
	else if (onOffn == LED_OFF)
  4029c6:	797b      	ldrb	r3, [r7, #5]
  4029c8:	2b00      	cmp	r3, #0
  4029ca:	d101      	bne.n	4029d0 <PCA9952_channel+0xb4>
	{
		writeVal = 0;
  4029cc:	2300      	movs	r3, #0
  4029ce:	73bb      	strb	r3, [r7, #14]
	}
	
	regShadow |= writeVal;
  4029d0:	7bfa      	ldrb	r2, [r7, #15]
  4029d2:	7bbb      	ldrb	r3, [r7, #14]
  4029d4:	4313      	orrs	r3, r2
  4029d6:	73fb      	strb	r3, [r7, #15]
	
	switch(regIdx)
  4029d8:	7b7b      	ldrb	r3, [r7, #13]
  4029da:	2b03      	cmp	r3, #3
  4029dc:	d82a      	bhi.n	402a34 <PCA9952_channel+0x118>
  4029de:	a201      	add	r2, pc, #4	; (adr r2, 4029e4 <PCA9952_channel+0xc8>)
  4029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029e4:	004029f5 	.word	0x004029f5
  4029e8:	00402a05 	.word	0x00402a05
  4029ec:	00402a15 	.word	0x00402a15
  4029f0:	00402a25 	.word	0x00402a25
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
  4029f4:	79fa      	ldrb	r2, [r7, #7]
  4029f6:	7bfb      	ldrb	r3, [r7, #15]
  4029f8:	4610      	mov	r0, r2
  4029fa:	2102      	movs	r1, #2
  4029fc:	461a      	mov	r2, r3
  4029fe:	4b10      	ldr	r3, [pc, #64]	; (402a40 <PCA9952_channel+0x124>)
  402a00:	4798      	blx	r3
			break;
  402a02:	e017      	b.n	402a34 <PCA9952_channel+0x118>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
  402a04:	79fa      	ldrb	r2, [r7, #7]
  402a06:	7bfb      	ldrb	r3, [r7, #15]
  402a08:	4610      	mov	r0, r2
  402a0a:	2103      	movs	r1, #3
  402a0c:	461a      	mov	r2, r3
  402a0e:	4b0c      	ldr	r3, [pc, #48]	; (402a40 <PCA9952_channel+0x124>)
  402a10:	4798      	blx	r3
			break;
  402a12:	e00f      	b.n	402a34 <PCA9952_channel+0x118>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
  402a14:	79fa      	ldrb	r2, [r7, #7]
  402a16:	7bfb      	ldrb	r3, [r7, #15]
  402a18:	4610      	mov	r0, r2
  402a1a:	2104      	movs	r1, #4
  402a1c:	461a      	mov	r2, r3
  402a1e:	4b08      	ldr	r3, [pc, #32]	; (402a40 <PCA9952_channel+0x124>)
  402a20:	4798      	blx	r3
			break;
  402a22:	e007      	b.n	402a34 <PCA9952_channel+0x118>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
  402a24:	79fa      	ldrb	r2, [r7, #7]
  402a26:	7bfb      	ldrb	r3, [r7, #15]
  402a28:	4610      	mov	r0, r2
  402a2a:	2105      	movs	r1, #5
  402a2c:	461a      	mov	r2, r3
  402a2e:	4b04      	ldr	r3, [pc, #16]	; (402a40 <PCA9952_channel+0x124>)
  402a30:	4798      	blx	r3
			break;
  402a32:	bf00      	nop
	}

}
  402a34:	3710      	adds	r7, #16
  402a36:	46bd      	mov	sp, r7
  402a38:	bd80      	pop	{r7, pc}
  402a3a:	bf00      	nop
  402a3c:	00402749 	.word	0x00402749
  402a40:	004026d9 	.word	0x004026d9

00402a44 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b082      	sub	sp, #8
  402a48:	af00      	add	r7, sp, #0
  402a4a:	4603      	mov	r3, r0
  402a4c:	460a      	mov	r2, r1
  402a4e:	71fb      	strb	r3, [r7, #7]
  402a50:	4613      	mov	r3, r2
  402a52:	71bb      	strb	r3, [r7, #6]
	switch(shelf)
  402a54:	79fb      	ldrb	r3, [r7, #7]
  402a56:	2b03      	cmp	r3, #3
  402a58:	f200 8088 	bhi.w	402b6c <led_shelf+0x128>
  402a5c:	a201      	add	r2, pc, #4	; (adr r2, 402a64 <led_shelf+0x20>)
  402a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a62:	bf00      	nop
  402a64:	00402a75 	.word	0x00402a75
  402a68:	00402ab3 	.word	0x00402ab3
  402a6c:	00402af1 	.word	0x00402af1
  402a70:	00402b2f 	.word	0x00402b2f
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
  402a74:	79bb      	ldrb	r3, [r7, #6]
  402a76:	2001      	movs	r0, #1
  402a78:	2100      	movs	r1, #0
  402a7a:	461a      	mov	r2, r3
  402a7c:	4b3d      	ldr	r3, [pc, #244]	; (402b74 <led_shelf+0x130>)
  402a7e:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
  402a80:	79bb      	ldrb	r3, [r7, #6]
  402a82:	2001      	movs	r0, #1
  402a84:	2101      	movs	r1, #1
  402a86:	461a      	mov	r2, r3
  402a88:	4b3a      	ldr	r3, [pc, #232]	; (402b74 <led_shelf+0x130>)
  402a8a:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
  402a8c:	79bb      	ldrb	r3, [r7, #6]
  402a8e:	2001      	movs	r0, #1
  402a90:	2102      	movs	r1, #2
  402a92:	461a      	mov	r2, r3
  402a94:	4b37      	ldr	r3, [pc, #220]	; (402b74 <led_shelf+0x130>)
  402a96:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 0, onOffn);
  402a98:	79bb      	ldrb	r3, [r7, #6]
  402a9a:	2000      	movs	r0, #0
  402a9c:	2100      	movs	r1, #0
  402a9e:	461a      	mov	r2, r3
  402aa0:	4b34      	ldr	r3, [pc, #208]	; (402b74 <led_shelf+0x130>)
  402aa2:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 1, onOffn);
  402aa4:	79bb      	ldrb	r3, [r7, #6]
  402aa6:	2000      	movs	r0, #0
  402aa8:	2101      	movs	r1, #1
  402aaa:	461a      	mov	r2, r3
  402aac:	4b31      	ldr	r3, [pc, #196]	; (402b74 <led_shelf+0x130>)
  402aae:	4798      	blx	r3
			break;
  402ab0:	e05c      	b.n	402b6c <led_shelf+0x128>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
  402ab2:	79bb      	ldrb	r3, [r7, #6]
  402ab4:	2001      	movs	r0, #1
  402ab6:	2103      	movs	r1, #3
  402ab8:	461a      	mov	r2, r3
  402aba:	4b2e      	ldr	r3, [pc, #184]	; (402b74 <led_shelf+0x130>)
  402abc:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
  402abe:	79bb      	ldrb	r3, [r7, #6]
  402ac0:	2001      	movs	r0, #1
  402ac2:	2104      	movs	r1, #4
  402ac4:	461a      	mov	r2, r3
  402ac6:	4b2b      	ldr	r3, [pc, #172]	; (402b74 <led_shelf+0x130>)
  402ac8:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
  402aca:	79bb      	ldrb	r3, [r7, #6]
  402acc:	2001      	movs	r0, #1
  402ace:	2105      	movs	r1, #5
  402ad0:	461a      	mov	r2, r3
  402ad2:	4b28      	ldr	r3, [pc, #160]	; (402b74 <led_shelf+0x130>)
  402ad4:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 2, onOffn);
  402ad6:	79bb      	ldrb	r3, [r7, #6]
  402ad8:	2000      	movs	r0, #0
  402ada:	2102      	movs	r1, #2
  402adc:	461a      	mov	r2, r3
  402ade:	4b25      	ldr	r3, [pc, #148]	; (402b74 <led_shelf+0x130>)
  402ae0:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 3, onOffn);
  402ae2:	79bb      	ldrb	r3, [r7, #6]
  402ae4:	2000      	movs	r0, #0
  402ae6:	2103      	movs	r1, #3
  402ae8:	461a      	mov	r2, r3
  402aea:	4b22      	ldr	r3, [pc, #136]	; (402b74 <led_shelf+0x130>)
  402aec:	4798      	blx	r3
			break;
  402aee:	e03d      	b.n	402b6c <led_shelf+0x128>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
  402af0:	79bb      	ldrb	r3, [r7, #6]
  402af2:	2001      	movs	r0, #1
  402af4:	2106      	movs	r1, #6
  402af6:	461a      	mov	r2, r3
  402af8:	4b1e      	ldr	r3, [pc, #120]	; (402b74 <led_shelf+0x130>)
  402afa:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
  402afc:	79bb      	ldrb	r3, [r7, #6]
  402afe:	2001      	movs	r0, #1
  402b00:	2107      	movs	r1, #7
  402b02:	461a      	mov	r2, r3
  402b04:	4b1b      	ldr	r3, [pc, #108]	; (402b74 <led_shelf+0x130>)
  402b06:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
  402b08:	79bb      	ldrb	r3, [r7, #6]
  402b0a:	2001      	movs	r0, #1
  402b0c:	2108      	movs	r1, #8
  402b0e:	461a      	mov	r2, r3
  402b10:	4b18      	ldr	r3, [pc, #96]	; (402b74 <led_shelf+0x130>)
  402b12:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 4, onOffn);
  402b14:	79bb      	ldrb	r3, [r7, #6]
  402b16:	2000      	movs	r0, #0
  402b18:	2104      	movs	r1, #4
  402b1a:	461a      	mov	r2, r3
  402b1c:	4b15      	ldr	r3, [pc, #84]	; (402b74 <led_shelf+0x130>)
  402b1e:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 5, onOffn);
  402b20:	79bb      	ldrb	r3, [r7, #6]
  402b22:	2000      	movs	r0, #0
  402b24:	2105      	movs	r1, #5
  402b26:	461a      	mov	r2, r3
  402b28:	4b12      	ldr	r3, [pc, #72]	; (402b74 <led_shelf+0x130>)
  402b2a:	4798      	blx	r3
			break;
  402b2c:	e01e      	b.n	402b6c <led_shelf+0x128>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
  402b2e:	79bb      	ldrb	r3, [r7, #6]
  402b30:	2001      	movs	r0, #1
  402b32:	2109      	movs	r1, #9
  402b34:	461a      	mov	r2, r3
  402b36:	4b0f      	ldr	r3, [pc, #60]	; (402b74 <led_shelf+0x130>)
  402b38:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
  402b3a:	79bb      	ldrb	r3, [r7, #6]
  402b3c:	2001      	movs	r0, #1
  402b3e:	210a      	movs	r1, #10
  402b40:	461a      	mov	r2, r3
  402b42:	4b0c      	ldr	r3, [pc, #48]	; (402b74 <led_shelf+0x130>)
  402b44:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
  402b46:	79bb      	ldrb	r3, [r7, #6]
  402b48:	2001      	movs	r0, #1
  402b4a:	210b      	movs	r1, #11
  402b4c:	461a      	mov	r2, r3
  402b4e:	4b09      	ldr	r3, [pc, #36]	; (402b74 <led_shelf+0x130>)
  402b50:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 6, onOffn);
  402b52:	79bb      	ldrb	r3, [r7, #6]
  402b54:	2000      	movs	r0, #0
  402b56:	2106      	movs	r1, #6
  402b58:	461a      	mov	r2, r3
  402b5a:	4b06      	ldr	r3, [pc, #24]	; (402b74 <led_shelf+0x130>)
  402b5c:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 7, onOffn);
  402b5e:	79bb      	ldrb	r3, [r7, #6]
  402b60:	2000      	movs	r0, #0
  402b62:	2107      	movs	r1, #7
  402b64:	461a      	mov	r2, r3
  402b66:	4b03      	ldr	r3, [pc, #12]	; (402b74 <led_shelf+0x130>)
  402b68:	4798      	blx	r3
			break;
  402b6a:	bf00      	nop
	}	
	
}
  402b6c:	3708      	adds	r7, #8
  402b6e:	46bd      	mov	sp, r7
  402b70:	bd80      	pop	{r7, pc}
  402b72:	bf00      	nop
  402b74:	0040291d 	.word	0x0040291d

00402b78 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402b78:	b480      	push	{r7}
  402b7a:	b08d      	sub	sp, #52	; 0x34
  402b7c:	af00      	add	r7, sp, #0
  402b7e:	6078      	str	r0, [r7, #4]
  402b80:	460b      	mov	r3, r1
  402b82:	70fb      	strb	r3, [r7, #3]
  402b84:	687b      	ldr	r3, [r7, #4]
  402b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  402b88:	78fb      	ldrb	r3, [r7, #3]
  402b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b90:	627b      	str	r3, [r7, #36]	; 0x24
  402b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b94:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402b96:	6a3b      	ldr	r3, [r7, #32]
  402b98:	095b      	lsrs	r3, r3, #5
  402b9a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b9c:	69fa      	ldr	r2, [r7, #28]
  402b9e:	4b17      	ldr	r3, [pc, #92]	; (402bfc <ioport_set_pin_dir+0x84>)
  402ba0:	4413      	add	r3, r2
  402ba2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402ba4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402baa:	2b01      	cmp	r3, #1
  402bac:	d109      	bne.n	402bc2 <ioport_set_pin_dir+0x4a>
  402bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bb0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bb2:	697b      	ldr	r3, [r7, #20]
  402bb4:	f003 031f 	and.w	r3, r3, #31
  402bb8:	2201      	movs	r2, #1
  402bba:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bbc:	69bb      	ldr	r3, [r7, #24]
  402bbe:	611a      	str	r2, [r3, #16]
  402bc0:	e00c      	b.n	402bdc <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d108      	bne.n	402bdc <ioport_set_pin_dir+0x64>
  402bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bcc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bce:	693b      	ldr	r3, [r7, #16]
  402bd0:	f003 031f 	and.w	r3, r3, #31
  402bd4:	2201      	movs	r2, #1
  402bd6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bd8:	69bb      	ldr	r3, [r7, #24]
  402bda:	615a      	str	r2, [r3, #20]
  402bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bde:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402be0:	68fb      	ldr	r3, [r7, #12]
  402be2:	f003 031f 	and.w	r3, r3, #31
  402be6:	2201      	movs	r2, #1
  402be8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bea:	69bb      	ldr	r3, [r7, #24]
  402bec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402bf0:	3734      	adds	r7, #52	; 0x34
  402bf2:	46bd      	mov	sp, r7
  402bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	00200707 	.word	0x00200707

00402c00 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402c00:	b480      	push	{r7}
  402c02:	b08b      	sub	sp, #44	; 0x2c
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
  402c08:	460b      	mov	r3, r1
  402c0a:	70fb      	strb	r3, [r7, #3]
  402c0c:	687b      	ldr	r3, [r7, #4]
  402c0e:	627b      	str	r3, [r7, #36]	; 0x24
  402c10:	78fb      	ldrb	r3, [r7, #3]
  402c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c18:	61fb      	str	r3, [r7, #28]
  402c1a:	69fb      	ldr	r3, [r7, #28]
  402c1c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c1e:	69bb      	ldr	r3, [r7, #24]
  402c20:	095b      	lsrs	r3, r3, #5
  402c22:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c24:	697a      	ldr	r2, [r7, #20]
  402c26:	4b10      	ldr	r3, [pc, #64]	; (402c68 <ioport_set_pin_level+0x68>)
  402c28:	4413      	add	r3, r2
  402c2a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c2c:	613b      	str	r3, [r7, #16]

	if (level) {
  402c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c32:	2b00      	cmp	r3, #0
  402c34:	d009      	beq.n	402c4a <ioport_set_pin_level+0x4a>
  402c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c38:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c3a:	68fb      	ldr	r3, [r7, #12]
  402c3c:	f003 031f 	and.w	r3, r3, #31
  402c40:	2201      	movs	r2, #1
  402c42:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c44:	693b      	ldr	r3, [r7, #16]
  402c46:	631a      	str	r2, [r3, #48]	; 0x30
  402c48:	e008      	b.n	402c5c <ioport_set_pin_level+0x5c>
  402c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c4c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c4e:	68bb      	ldr	r3, [r7, #8]
  402c50:	f003 031f 	and.w	r3, r3, #31
  402c54:	2201      	movs	r2, #1
  402c56:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c58:	693b      	ldr	r3, [r7, #16]
  402c5a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402c5c:	372c      	adds	r7, #44	; 0x2c
  402c5e:	46bd      	mov	sp, r7
  402c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c64:	4770      	bx	lr
  402c66:	bf00      	nop
  402c68:	00200707 	.word	0x00200707

00402c6c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402c6c:	b480      	push	{r7}
  402c6e:	b089      	sub	sp, #36	; 0x24
  402c70:	af00      	add	r7, sp, #0
  402c72:	6078      	str	r0, [r7, #4]
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	61fb      	str	r3, [r7, #28]
  402c78:	69fb      	ldr	r3, [r7, #28]
  402c7a:	61bb      	str	r3, [r7, #24]
  402c7c:	69bb      	ldr	r3, [r7, #24]
  402c7e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c80:	697b      	ldr	r3, [r7, #20]
  402c82:	095b      	lsrs	r3, r3, #5
  402c84:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c86:	693a      	ldr	r2, [r7, #16]
  402c88:	4b0b      	ldr	r3, [pc, #44]	; (402cb8 <ioport_get_pin_level+0x4c>)
  402c8a:	4413      	add	r3, r2
  402c8c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402c90:	69fb      	ldr	r3, [r7, #28]
  402c92:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c94:	68fb      	ldr	r3, [r7, #12]
  402c96:	f003 031f 	and.w	r3, r3, #31
  402c9a:	2101      	movs	r1, #1
  402c9c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402ca0:	4013      	ands	r3, r2
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	bf14      	ite	ne
  402ca6:	2301      	movne	r3, #1
  402ca8:	2300      	moveq	r3, #0
  402caa:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402cac:	4618      	mov	r0, r3
  402cae:	3724      	adds	r7, #36	; 0x24
  402cb0:	46bd      	mov	sp, r7
  402cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cb6:	4770      	bx	lr
  402cb8:	00200707 	.word	0x00200707

00402cbc <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  402cbc:	b480      	push	{r7}
  402cbe:	b085      	sub	sp, #20
  402cc0:	af00      	add	r7, sp, #0
  402cc2:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  402cc4:	2300      	movs	r3, #0
  402cc6:	60fb      	str	r3, [r7, #12]
  402cc8:	e066      	b.n	402d98 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402cca:	bf00      	nop
  402ccc:	bf00      	nop
  402cce:	bf00      	nop
  402cd0:	bf00      	nop
  402cd2:	bf00      	nop
  402cd4:	bf00      	nop
  402cd6:	bf00      	nop
  402cd8:	bf00      	nop
  402cda:	bf00      	nop
  402cdc:	bf00      	nop
  402cde:	bf00      	nop
  402ce0:	bf00      	nop
  402ce2:	bf00      	nop
  402ce4:	bf00      	nop
  402ce6:	bf00      	nop
  402ce8:	bf00      	nop
  402cea:	bf00      	nop
  402cec:	bf00      	nop
  402cee:	bf00      	nop
  402cf0:	bf00      	nop
  402cf2:	bf00      	nop
  402cf4:	bf00      	nop
  402cf6:	bf00      	nop
  402cf8:	bf00      	nop
  402cfa:	bf00      	nop
  402cfc:	bf00      	nop
  402cfe:	bf00      	nop
  402d00:	bf00      	nop
  402d02:	bf00      	nop
  402d04:	bf00      	nop
  402d06:	bf00      	nop
  402d08:	bf00      	nop
  402d0a:	bf00      	nop
  402d0c:	bf00      	nop
  402d0e:	bf00      	nop
  402d10:	bf00      	nop
  402d12:	bf00      	nop
  402d14:	bf00      	nop
  402d16:	bf00      	nop
  402d18:	bf00      	nop
  402d1a:	bf00      	nop
  402d1c:	bf00      	nop
  402d1e:	bf00      	nop
  402d20:	bf00      	nop
  402d22:	bf00      	nop
  402d24:	bf00      	nop
  402d26:	bf00      	nop
  402d28:	bf00      	nop
  402d2a:	bf00      	nop
  402d2c:	bf00      	nop
  402d2e:	bf00      	nop
  402d30:	bf00      	nop
  402d32:	bf00      	nop
  402d34:	bf00      	nop
  402d36:	bf00      	nop
  402d38:	bf00      	nop
  402d3a:	bf00      	nop
  402d3c:	bf00      	nop
  402d3e:	bf00      	nop
  402d40:	bf00      	nop
  402d42:	bf00      	nop
  402d44:	bf00      	nop
  402d46:	bf00      	nop
  402d48:	bf00      	nop
  402d4a:	bf00      	nop
  402d4c:	bf00      	nop
  402d4e:	bf00      	nop
  402d50:	bf00      	nop
  402d52:	bf00      	nop
  402d54:	bf00      	nop
  402d56:	bf00      	nop
  402d58:	bf00      	nop
  402d5a:	bf00      	nop
  402d5c:	bf00      	nop
  402d5e:	bf00      	nop
  402d60:	bf00      	nop
  402d62:	bf00      	nop
  402d64:	bf00      	nop
  402d66:	bf00      	nop
  402d68:	bf00      	nop
  402d6a:	bf00      	nop
  402d6c:	bf00      	nop
  402d6e:	bf00      	nop
  402d70:	bf00      	nop
  402d72:	bf00      	nop
  402d74:	bf00      	nop
  402d76:	bf00      	nop
  402d78:	bf00      	nop
  402d7a:	bf00      	nop
  402d7c:	bf00      	nop
  402d7e:	bf00      	nop
  402d80:	bf00      	nop
  402d82:	bf00      	nop
  402d84:	bf00      	nop
  402d86:	bf00      	nop
  402d88:	bf00      	nop
  402d8a:	bf00      	nop
  402d8c:	bf00      	nop
  402d8e:	bf00      	nop
  402d90:	bf00      	nop
  402d92:	68fb      	ldr	r3, [r7, #12]
  402d94:	3301      	adds	r3, #1
  402d96:	60fb      	str	r3, [r7, #12]
  402d98:	68fa      	ldr	r2, [r7, #12]
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	429a      	cmp	r2, r3
  402d9e:	d394      	bcc.n	402cca <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  402da0:	3714      	adds	r7, #20
  402da2:	46bd      	mov	sp, r7
  402da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402da8:	4770      	bx	lr
  402daa:	bf00      	nop

00402dac <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  402dac:	b480      	push	{r7}
  402dae:	b083      	sub	sp, #12
  402db0:	af00      	add	r7, sp, #0
  402db2:	4603      	mov	r3, r0
  402db4:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  402db6:	79fb      	ldrb	r3, [r7, #7]
  402db8:	2b04      	cmp	r3, #4
  402dba:	d817      	bhi.n	402dec <io_pin+0x40>
  402dbc:	a201      	add	r2, pc, #4	; (adr r2, 402dc4 <io_pin+0x18>)
  402dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dc2:	bf00      	nop
  402dc4:	00402dd9 	.word	0x00402dd9
  402dc8:	00402ddd 	.word	0x00402ddd
  402dcc:	00402de1 	.word	0x00402de1
  402dd0:	00402de5 	.word	0x00402de5
  402dd4:	00402de9 	.word	0x00402de9
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402dd8:	230f      	movs	r3, #15
  402dda:	e008      	b.n	402dee <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402ddc:	2310      	movs	r3, #16
  402dde:	e006      	b.n	402dee <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402de0:	2311      	movs	r3, #17
  402de2:	e004      	b.n	402dee <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  402de4:	2312      	movs	r3, #18
  402de6:	e002      	b.n	402dee <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402de8:	2313      	movs	r3, #19
  402dea:	e000      	b.n	402dee <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402dec:	2300      	movs	r3, #0
			break;
	}
}
  402dee:	4618      	mov	r0, r3
  402df0:	370c      	adds	r7, #12
  402df2:	46bd      	mov	sp, r7
  402df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402df8:	4770      	bx	lr
  402dfa:	bf00      	nop

00402dfc <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402dfc:	b580      	push	{r7, lr}
  402dfe:	b084      	sub	sp, #16
  402e00:	af00      	add	r7, sp, #0
  402e02:	4603      	mov	r3, r0
  402e04:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e06:	79fb      	ldrb	r3, [r7, #7]
  402e08:	4618      	mov	r0, r3
  402e0a:	4b08      	ldr	r3, [pc, #32]	; (402e2c <drive_DQ_low+0x30>)
  402e0c:	4798      	blx	r3
  402e0e:	4603      	mov	r3, r0
  402e10:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402e12:	7bfb      	ldrb	r3, [r7, #15]
  402e14:	4618      	mov	r0, r3
  402e16:	2101      	movs	r1, #1
  402e18:	4b05      	ldr	r3, [pc, #20]	; (402e30 <drive_DQ_low+0x34>)
  402e1a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402e1c:	7bfb      	ldrb	r3, [r7, #15]
  402e1e:	4618      	mov	r0, r3
  402e20:	2100      	movs	r1, #0
  402e22:	4b04      	ldr	r3, [pc, #16]	; (402e34 <drive_DQ_low+0x38>)
  402e24:	4798      	blx	r3

}
  402e26:	3710      	adds	r7, #16
  402e28:	46bd      	mov	sp, r7
  402e2a:	bd80      	pop	{r7, pc}
  402e2c:	00402dad 	.word	0x00402dad
  402e30:	00402b79 	.word	0x00402b79
  402e34:	00402c01 	.word	0x00402c01

00402e38 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402e38:	b580      	push	{r7, lr}
  402e3a:	b084      	sub	sp, #16
  402e3c:	af00      	add	r7, sp, #0
  402e3e:	4603      	mov	r3, r0
  402e40:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e42:	79fb      	ldrb	r3, [r7, #7]
  402e44:	4618      	mov	r0, r3
  402e46:	4b06      	ldr	r3, [pc, #24]	; (402e60 <release_the_bus+0x28>)
  402e48:	4798      	blx	r3
  402e4a:	4603      	mov	r3, r0
  402e4c:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e4e:	7bfb      	ldrb	r3, [r7, #15]
  402e50:	4618      	mov	r0, r3
  402e52:	2100      	movs	r1, #0
  402e54:	4b03      	ldr	r3, [pc, #12]	; (402e64 <release_the_bus+0x2c>)
  402e56:	4798      	blx	r3
	

}
  402e58:	3710      	adds	r7, #16
  402e5a:	46bd      	mov	sp, r7
  402e5c:	bd80      	pop	{r7, pc}
  402e5e:	bf00      	nop
  402e60:	00402dad 	.word	0x00402dad
  402e64:	00402b79 	.word	0x00402b79

00402e68 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402e68:	b580      	push	{r7, lr}
  402e6a:	b084      	sub	sp, #16
  402e6c:	af00      	add	r7, sp, #0
  402e6e:	4603      	mov	r3, r0
  402e70:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402e72:	79fb      	ldrb	r3, [r7, #7]
  402e74:	4618      	mov	r0, r3
  402e76:	4b06      	ldr	r3, [pc, #24]	; (402e90 <gpio_input+0x28>)
  402e78:	4798      	blx	r3
  402e7a:	4603      	mov	r3, r0
  402e7c:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e7e:	7bfb      	ldrb	r3, [r7, #15]
  402e80:	4618      	mov	r0, r3
  402e82:	2100      	movs	r1, #0
  402e84:	4b03      	ldr	r3, [pc, #12]	; (402e94 <gpio_input+0x2c>)
  402e86:	4798      	blx	r3


}
  402e88:	3710      	adds	r7, #16
  402e8a:	46bd      	mov	sp, r7
  402e8c:	bd80      	pop	{r7, pc}
  402e8e:	bf00      	nop
  402e90:	00402dad 	.word	0x00402dad
  402e94:	00402b79 	.word	0x00402b79

00402e98 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402e98:	b580      	push	{r7, lr}
  402e9a:	b084      	sub	sp, #16
  402e9c:	af00      	add	r7, sp, #0
  402e9e:	4603      	mov	r3, r0
  402ea0:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  402ea2:	79fb      	ldrb	r3, [r7, #7]
  402ea4:	4618      	mov	r0, r3
  402ea6:	4b07      	ldr	r3, [pc, #28]	; (402ec4 <sample_line+0x2c>)
  402ea8:	4798      	blx	r3
  402eaa:	4603      	mov	r3, r0
  402eac:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  402eae:	7bfb      	ldrb	r3, [r7, #15]
  402eb0:	4618      	mov	r0, r3
  402eb2:	4b05      	ldr	r3, [pc, #20]	; (402ec8 <sample_line+0x30>)
  402eb4:	4798      	blx	r3
  402eb6:	4603      	mov	r3, r0
  402eb8:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  402eba:	7bbb      	ldrb	r3, [r7, #14]
}
  402ebc:	4618      	mov	r0, r3
  402ebe:	3710      	adds	r7, #16
  402ec0:	46bd      	mov	sp, r7
  402ec2:	bd80      	pop	{r7, pc}
  402ec4:	00402dad 	.word	0x00402dad
  402ec8:	00402c6d 	.word	0x00402c6d

00402ecc <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  402ecc:	b480      	push	{r7}
  402ece:	b083      	sub	sp, #12
  402ed0:	af00      	add	r7, sp, #0
  402ed2:	6078      	str	r0, [r7, #4]
	// Adjust tick values depending on speed
	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  402ed4:	687b      	ldr	r3, [r7, #4]
  402ed6:	2b00      	cmp	r3, #0
  402ed8:	d01e      	beq.n	402f18 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402eda:	4b21      	ldr	r3, [pc, #132]	; (402f60 <SetSpeed+0x94>)
  402edc:	2200      	movs	r2, #0
  402ede:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402ee0:	4b20      	ldr	r3, [pc, #128]	; (402f64 <SetSpeed+0x98>)
  402ee2:	2220      	movs	r2, #32
  402ee4:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  402ee6:	4b20      	ldr	r3, [pc, #128]	; (402f68 <SetSpeed+0x9c>)
  402ee8:	221e      	movs	r2, #30
  402eea:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402eec:	4b1f      	ldr	r3, [pc, #124]	; (402f6c <SetSpeed+0xa0>)
  402eee:	2202      	movs	r2, #2
  402ef0:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  402ef2:	4b1f      	ldr	r3, [pc, #124]	; (402f70 <SetSpeed+0xa4>)
  402ef4:	2202      	movs	r2, #2
  402ef6:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402ef8:	4b1e      	ldr	r3, [pc, #120]	; (402f74 <SetSpeed+0xa8>)
  402efa:	221b      	movs	r2, #27
  402efc:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402efe:	4b1e      	ldr	r3, [pc, #120]	; (402f78 <SetSpeed+0xac>)
  402f00:	2200      	movs	r2, #0
  402f02:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402f04:	4b1d      	ldr	r3, [pc, #116]	; (402f7c <SetSpeed+0xb0>)
  402f06:	22f0      	movs	r2, #240	; 0xf0
  402f08:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402f0a:	4b1d      	ldr	r3, [pc, #116]	; (402f80 <SetSpeed+0xb4>)
  402f0c:	2223      	movs	r2, #35	; 0x23
  402f0e:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402f10:	4b1c      	ldr	r3, [pc, #112]	; (402f84 <SetSpeed+0xb8>)
  402f12:	22cd      	movs	r2, #205	; 0xcd
  402f14:	601a      	str	r2, [r3, #0]
  402f16:	e01d      	b.n	402f54 <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402f18:	4b11      	ldr	r3, [pc, #68]	; (402f60 <SetSpeed+0x94>)
  402f1a:	2201      	movs	r2, #1
  402f1c:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402f1e:	4b11      	ldr	r3, [pc, #68]	; (402f64 <SetSpeed+0x98>)
  402f20:	2207      	movs	r2, #7
  402f22:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402f24:	4b10      	ldr	r3, [pc, #64]	; (402f68 <SetSpeed+0x9c>)
  402f26:	2207      	movs	r2, #7
  402f28:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402f2a:	4b10      	ldr	r3, [pc, #64]	; (402f6c <SetSpeed+0xa0>)
  402f2c:	2202      	movs	r2, #2
  402f2e:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402f30:	4b0f      	ldr	r3, [pc, #60]	; (402f70 <SetSpeed+0xa4>)
  402f32:	2200      	movs	r2, #0
  402f34:	601a      	str	r2, [r3, #0]
		F = 7;
  402f36:	4b0f      	ldr	r3, [pc, #60]	; (402f74 <SetSpeed+0xa8>)
  402f38:	2207      	movs	r2, #7
  402f3a:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402f3c:	4b0e      	ldr	r3, [pc, #56]	; (402f78 <SetSpeed+0xac>)
  402f3e:	2202      	movs	r2, #2
  402f40:	601a      	str	r2, [r3, #0]
		H = 70;
  402f42:	4b0e      	ldr	r3, [pc, #56]	; (402f7c <SetSpeed+0xb0>)
  402f44:	2246      	movs	r2, #70	; 0x46
  402f46:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402f48:	4b0d      	ldr	r3, [pc, #52]	; (402f80 <SetSpeed+0xb4>)
  402f4a:	2208      	movs	r2, #8
  402f4c:	601a      	str	r2, [r3, #0]
		J = 40;
  402f4e:	4b0d      	ldr	r3, [pc, #52]	; (402f84 <SetSpeed+0xb8>)
  402f50:	2228      	movs	r2, #40	; 0x28
  402f52:	601a      	str	r2, [r3, #0]
	}
}
  402f54:	370c      	adds	r7, #12
  402f56:	46bd      	mov	sp, r7
  402f58:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f5c:	4770      	bx	lr
  402f5e:	bf00      	nop
  402f60:	20400ab4 	.word	0x20400ab4
  402f64:	20400ab8 	.word	0x20400ab8
  402f68:	20400ac0 	.word	0x20400ac0
  402f6c:	20400ab0 	.word	0x20400ab0
  402f70:	20400acc 	.word	0x20400acc
  402f74:	20400ad4 	.word	0x20400ad4
  402f78:	20400ac4 	.word	0x20400ac4
  402f7c:	20400ac8 	.word	0x20400ac8
  402f80:	20400ad0 	.word	0x20400ad0
  402f84:	20400abc 	.word	0x20400abc

00402f88 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402f88:	b580      	push	{r7, lr}
  402f8a:	b084      	sub	sp, #16
  402f8c:	af00      	add	r7, sp, #0
  402f8e:	4603      	mov	r3, r0
  402f90:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402f92:	4b17      	ldr	r3, [pc, #92]	; (402ff0 <OWTouchReset+0x68>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	4618      	mov	r0, r3
  402f98:	4b16      	ldr	r3, [pc, #88]	; (402ff4 <OWTouchReset+0x6c>)
  402f9a:	4798      	blx	r3
	drive_DQ_low(idx);
  402f9c:	79fb      	ldrb	r3, [r7, #7]
  402f9e:	4618      	mov	r0, r3
  402fa0:	4b15      	ldr	r3, [pc, #84]	; (402ff8 <OWTouchReset+0x70>)
  402fa2:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  402fa4:	4b15      	ldr	r3, [pc, #84]	; (402ffc <OWTouchReset+0x74>)
  402fa6:	681b      	ldr	r3, [r3, #0]
  402fa8:	4618      	mov	r0, r3
  402faa:	4b12      	ldr	r3, [pc, #72]	; (402ff4 <OWTouchReset+0x6c>)
  402fac:	4798      	blx	r3
	release_the_bus(idx);
  402fae:	79fb      	ldrb	r3, [r7, #7]
  402fb0:	4618      	mov	r0, r3
  402fb2:	4b13      	ldr	r3, [pc, #76]	; (403000 <OWTouchReset+0x78>)
  402fb4:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  402fb6:	79fb      	ldrb	r3, [r7, #7]
  402fb8:	4618      	mov	r0, r3
  402fba:	4b12      	ldr	r3, [pc, #72]	; (403004 <OWTouchReset+0x7c>)
  402fbc:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  402fbe:	4b12      	ldr	r3, [pc, #72]	; (403008 <OWTouchReset+0x80>)
  402fc0:	681b      	ldr	r3, [r3, #0]
  402fc2:	4618      	mov	r0, r3
  402fc4:	4b0b      	ldr	r3, [pc, #44]	; (402ff4 <OWTouchReset+0x6c>)
  402fc6:	4798      	blx	r3
	result = sample_line(idx);
  402fc8:	79fb      	ldrb	r3, [r7, #7]
  402fca:	4618      	mov	r0, r3
  402fcc:	4b0f      	ldr	r3, [pc, #60]	; (40300c <OWTouchReset+0x84>)
  402fce:	4798      	blx	r3
  402fd0:	4603      	mov	r3, r0
  402fd2:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  402fd4:	79fb      	ldrb	r3, [r7, #7]
  402fd6:	4618      	mov	r0, r3
  402fd8:	4b0a      	ldr	r3, [pc, #40]	; (403004 <OWTouchReset+0x7c>)
  402fda:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402fdc:	4b0c      	ldr	r3, [pc, #48]	; (403010 <OWTouchReset+0x88>)
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	4618      	mov	r0, r3
  402fe2:	4b04      	ldr	r3, [pc, #16]	; (402ff4 <OWTouchReset+0x6c>)
  402fe4:	4798      	blx	r3
	return result; // Return sample presence pulse result
  402fe6:	68fb      	ldr	r3, [r7, #12]
}
  402fe8:	4618      	mov	r0, r3
  402fea:	3710      	adds	r7, #16
  402fec:	46bd      	mov	sp, r7
  402fee:	bd80      	pop	{r7, pc}
  402ff0:	20400ab4 	.word	0x20400ab4
  402ff4:	00402cbd 	.word	0x00402cbd
  402ff8:	00402dfd 	.word	0x00402dfd
  402ffc:	20400ac8 	.word	0x20400ac8
  403000:	00402e39 	.word	0x00402e39
  403004:	00402e69 	.word	0x00402e69
  403008:	20400ad0 	.word	0x20400ad0
  40300c:	00402e99 	.word	0x00402e99
  403010:	20400abc 	.word	0x20400abc

00403014 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  403014:	b580      	push	{r7, lr}
  403016:	b084      	sub	sp, #16
  403018:	af00      	add	r7, sp, #0
  40301a:	4603      	mov	r3, r0
  40301c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  40301e:	79fb      	ldrb	r3, [r7, #7]
  403020:	4618      	mov	r0, r3
  403022:	4b0d      	ldr	r3, [pc, #52]	; (403058 <drive_DQ_low_and_release_the_bus+0x44>)
  403024:	4798      	blx	r3
  403026:	4603      	mov	r3, r0
  403028:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  40302a:	7bfb      	ldrb	r3, [r7, #15]
  40302c:	4618      	mov	r0, r3
  40302e:	2101      	movs	r1, #1
  403030:	4b0a      	ldr	r3, [pc, #40]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403032:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  403034:	7bfb      	ldrb	r3, [r7, #15]
  403036:	4618      	mov	r0, r3
  403038:	2100      	movs	r1, #0
  40303a:	4b09      	ldr	r3, [pc, #36]	; (403060 <drive_DQ_low_and_release_the_bus+0x4c>)
  40303c:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  40303e:	4b09      	ldr	r3, [pc, #36]	; (403064 <drive_DQ_low_and_release_the_bus+0x50>)
  403040:	681b      	ldr	r3, [r3, #0]
  403042:	4618      	mov	r0, r3
  403044:	4b08      	ldr	r3, [pc, #32]	; (403068 <drive_DQ_low_and_release_the_bus+0x54>)
  403046:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  403048:	7bfb      	ldrb	r3, [r7, #15]
  40304a:	4618      	mov	r0, r3
  40304c:	2100      	movs	r1, #0
  40304e:	4b03      	ldr	r3, [pc, #12]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403050:	4798      	blx	r3
	
}
  403052:	3710      	adds	r7, #16
  403054:	46bd      	mov	sp, r7
  403056:	bd80      	pop	{r7, pc}
  403058:	00402dad 	.word	0x00402dad
  40305c:	00402b79 	.word	0x00402b79
  403060:	00402c01 	.word	0x00402c01
  403064:	20400ab4 	.word	0x20400ab4
  403068:	00402cbd 	.word	0x00402cbd

0040306c <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  40306c:	b580      	push	{r7, lr}
  40306e:	b082      	sub	sp, #8
  403070:	af00      	add	r7, sp, #0
  403072:	4603      	mov	r3, r0
  403074:	6039      	str	r1, [r7, #0]
  403076:	71fb      	strb	r3, [r7, #7]
	if (bit)
  403078:	683b      	ldr	r3, [r7, #0]
  40307a:	2b00      	cmp	r3, #0
  40307c:	d009      	beq.n	403092 <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  40307e:	79fb      	ldrb	r3, [r7, #7]
  403080:	4618      	mov	r0, r3
  403082:	4b0e      	ldr	r3, [pc, #56]	; (4030bc <OWWriteBit+0x50>)
  403084:	4798      	blx	r3
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  403086:	4b0e      	ldr	r3, [pc, #56]	; (4030c0 <OWWriteBit+0x54>)
  403088:	681b      	ldr	r3, [r3, #0]
  40308a:	4618      	mov	r0, r3
  40308c:	4b0d      	ldr	r3, [pc, #52]	; (4030c4 <OWWriteBit+0x58>)
  40308e:	4798      	blx	r3
  403090:	e011      	b.n	4030b6 <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  403092:	79fb      	ldrb	r3, [r7, #7]
  403094:	4618      	mov	r0, r3
  403096:	4b0c      	ldr	r3, [pc, #48]	; (4030c8 <OWWriteBit+0x5c>)
  403098:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  40309a:	4b0c      	ldr	r3, [pc, #48]	; (4030cc <OWWriteBit+0x60>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	4618      	mov	r0, r3
  4030a0:	4b08      	ldr	r3, [pc, #32]	; (4030c4 <OWWriteBit+0x58>)
  4030a2:	4798      	blx	r3
		release_the_bus(idx);
  4030a4:	79fb      	ldrb	r3, [r7, #7]
  4030a6:	4618      	mov	r0, r3
  4030a8:	4b09      	ldr	r3, [pc, #36]	; (4030d0 <OWWriteBit+0x64>)
  4030aa:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4030ac:	4b09      	ldr	r3, [pc, #36]	; (4030d4 <OWWriteBit+0x68>)
  4030ae:	681b      	ldr	r3, [r3, #0]
  4030b0:	4618      	mov	r0, r3
  4030b2:	4b04      	ldr	r3, [pc, #16]	; (4030c4 <OWWriteBit+0x58>)
  4030b4:	4798      	blx	r3
	}
}
  4030b6:	3708      	adds	r7, #8
  4030b8:	46bd      	mov	sp, r7
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	00403015 	.word	0x00403015
  4030c0:	20400ab8 	.word	0x20400ab8
  4030c4:	00402cbd 	.word	0x00402cbd
  4030c8:	00402dfd 	.word	0x00402dfd
  4030cc:	20400ac0 	.word	0x20400ac0
  4030d0:	00402e39 	.word	0x00402e39
  4030d4:	20400ab0 	.word	0x20400ab0

004030d8 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4030d8:	b580      	push	{r7, lr}
  4030da:	b084      	sub	sp, #16
  4030dc:	af00      	add	r7, sp, #0
  4030de:	4603      	mov	r3, r0
  4030e0:	71fb      	strb	r3, [r7, #7]
	int result;

	drive_DQ_low_and_release_the_bus(idx);
  4030e2:	79fb      	ldrb	r3, [r7, #7]
  4030e4:	4618      	mov	r0, r3
  4030e6:	4b0b      	ldr	r3, [pc, #44]	; (403114 <OWReadBit+0x3c>)
  4030e8:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4030ea:	4b0b      	ldr	r3, [pc, #44]	; (403118 <OWReadBit+0x40>)
  4030ec:	681b      	ldr	r3, [r3, #0]
  4030ee:	4618      	mov	r0, r3
  4030f0:	4b0a      	ldr	r3, [pc, #40]	; (40311c <OWReadBit+0x44>)
  4030f2:	4798      	blx	r3
	result = sample_line(idx);
  4030f4:	79fb      	ldrb	r3, [r7, #7]
  4030f6:	4618      	mov	r0, r3
  4030f8:	4b09      	ldr	r3, [pc, #36]	; (403120 <OWReadBit+0x48>)
  4030fa:	4798      	blx	r3
  4030fc:	4603      	mov	r3, r0
  4030fe:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  403100:	4b08      	ldr	r3, [pc, #32]	; (403124 <OWReadBit+0x4c>)
  403102:	681b      	ldr	r3, [r3, #0]
  403104:	4618      	mov	r0, r3
  403106:	4b05      	ldr	r3, [pc, #20]	; (40311c <OWReadBit+0x44>)
  403108:	4798      	blx	r3

	return result;
  40310a:	68fb      	ldr	r3, [r7, #12]
}
  40310c:	4618      	mov	r0, r3
  40310e:	3710      	adds	r7, #16
  403110:	46bd      	mov	sp, r7
  403112:	bd80      	pop	{r7, pc}
  403114:	00403015 	.word	0x00403015
  403118:	20400acc 	.word	0x20400acc
  40311c:	00402cbd 	.word	0x00402cbd
  403120:	00402e99 	.word	0x00402e99
  403124:	20400ad4 	.word	0x20400ad4

00403128 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  403128:	b580      	push	{r7, lr}
  40312a:	b084      	sub	sp, #16
  40312c:	af00      	add	r7, sp, #0
  40312e:	4603      	mov	r3, r0
  403130:	6039      	str	r1, [r7, #0]
  403132:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403134:	2300      	movs	r3, #0
  403136:	60fb      	str	r3, [r7, #12]
  403138:	e00d      	b.n	403156 <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  40313a:	683b      	ldr	r3, [r7, #0]
  40313c:	f003 0301 	and.w	r3, r3, #1
  403140:	79fa      	ldrb	r2, [r7, #7]
  403142:	4610      	mov	r0, r2
  403144:	4619      	mov	r1, r3
  403146:	4b07      	ldr	r3, [pc, #28]	; (403164 <OWWriteByte+0x3c>)
  403148:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  40314a:	683b      	ldr	r3, [r7, #0]
  40314c:	105b      	asrs	r3, r3, #1
  40314e:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403150:	68fb      	ldr	r3, [r7, #12]
  403152:	3301      	adds	r3, #1
  403154:	60fb      	str	r3, [r7, #12]
  403156:	68fb      	ldr	r3, [r7, #12]
  403158:	2b07      	cmp	r3, #7
  40315a:	ddee      	ble.n	40313a <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  40315c:	3710      	adds	r7, #16
  40315e:	46bd      	mov	sp, r7
  403160:	bd80      	pop	{r7, pc}
  403162:	bf00      	nop
  403164:	0040306d 	.word	0x0040306d

00403168 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  403168:	b580      	push	{r7, lr}
  40316a:	b084      	sub	sp, #16
  40316c:	af00      	add	r7, sp, #0
  40316e:	4603      	mov	r3, r0
  403170:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  403172:	2300      	movs	r3, #0
  403174:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  403176:	2300      	movs	r3, #0
  403178:	60fb      	str	r3, [r7, #12]
  40317a:	e010      	b.n	40319e <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  40317c:	68bb      	ldr	r3, [r7, #8]
  40317e:	105b      	asrs	r3, r3, #1
  403180:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  403182:	79fb      	ldrb	r3, [r7, #7]
  403184:	4618      	mov	r0, r3
  403186:	4b0a      	ldr	r3, [pc, #40]	; (4031b0 <OWReadByte+0x48>)
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
  40318c:	2b00      	cmp	r3, #0
  40318e:	d003      	beq.n	403198 <OWReadByte+0x30>
		result |= 0x80;
  403190:	68bb      	ldr	r3, [r7, #8]
  403192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403196:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  403198:	68fb      	ldr	r3, [r7, #12]
  40319a:	3301      	adds	r3, #1
  40319c:	60fb      	str	r3, [r7, #12]
  40319e:	68fb      	ldr	r3, [r7, #12]
  4031a0:	2b07      	cmp	r3, #7
  4031a2:	ddeb      	ble.n	40317c <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4031a4:	68bb      	ldr	r3, [r7, #8]
}
  4031a6:	4618      	mov	r0, r3
  4031a8:	3710      	adds	r7, #16
  4031aa:	46bd      	mov	sp, r7
  4031ac:	bd80      	pop	{r7, pc}
  4031ae:	bf00      	nop
  4031b0:	004030d9 	.word	0x004030d9

004031b4 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4031b4:	b480      	push	{r7}
  4031b6:	b085      	sub	sp, #20
  4031b8:	af00      	add	r7, sp, #0
  4031ba:	4603      	mov	r3, r0
  4031bc:	460a      	mov	r2, r1
  4031be:	71fb      	strb	r3, [r7, #7]
  4031c0:	4613      	mov	r3, r2
  4031c2:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4031c4:	79fa      	ldrb	r2, [r7, #7]
  4031c6:	79bb      	ldrb	r3, [r7, #6]
  4031c8:	4053      	eors	r3, r2
  4031ca:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4031cc:	2300      	movs	r3, #0
  4031ce:	60fb      	str	r3, [r7, #12]
  4031d0:	e012      	b.n	4031f8 <crc8_add+0x44>
   {
		if(acc & 1) 
  4031d2:	79fb      	ldrb	r3, [r7, #7]
  4031d4:	f003 0301 	and.w	r3, r3, #1
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d007      	beq.n	4031ec <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4031dc:	79fb      	ldrb	r3, [r7, #7]
  4031de:	085b      	lsrs	r3, r3, #1
  4031e0:	b2da      	uxtb	r2, r3
  4031e2:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4031e6:	4053      	eors	r3, r2
  4031e8:	71fb      	strb	r3, [r7, #7]
  4031ea:	e002      	b.n	4031f2 <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4031ec:	79fb      	ldrb	r3, [r7, #7]
  4031ee:	085b      	lsrs	r3, r3, #1
  4031f0:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4031f2:	68fb      	ldr	r3, [r7, #12]
  4031f4:	3301      	adds	r3, #1
  4031f6:	60fb      	str	r3, [r7, #12]
  4031f8:	68fb      	ldr	r3, [r7, #12]
  4031fa:	2b07      	cmp	r3, #7
  4031fc:	dde9      	ble.n	4031d2 <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4031fe:	79fb      	ldrb	r3, [r7, #7]
}
  403200:	4618      	mov	r0, r3
  403202:	3714      	adds	r7, #20
  403204:	46bd      	mov	sp, r7
  403206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320a:	4770      	bx	lr

0040320c <start_timer>:
		timers[i].overflow = 0;
	}
}

void start_timer(unsigned short timerID, unsigned long duration)
{
  40320c:	b480      	push	{r7}
  40320e:	b083      	sub	sp, #12
  403210:	af00      	add	r7, sp, #0
  403212:	4603      	mov	r3, r0
  403214:	6039      	str	r1, [r7, #0]
  403216:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = ((timerTickCount+duration) & MAX_TICK);
  403218:	88fb      	ldrh	r3, [r7, #6]
  40321a:	4a17      	ldr	r2, [pc, #92]	; (403278 <start_timer+0x6c>)
  40321c:	6811      	ldr	r1, [r2, #0]
  40321e:	683a      	ldr	r2, [r7, #0]
  403220:	440a      	add	r2, r1
  403222:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  403226:	4915      	ldr	r1, [pc, #84]	; (40327c <start_timer+0x70>)
  403228:	00db      	lsls	r3, r3, #3
  40322a:	440b      	add	r3, r1
  40322c:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 1;
  40322e:	88fb      	ldrh	r3, [r7, #6]
  403230:	4a12      	ldr	r2, [pc, #72]	; (40327c <start_timer+0x70>)
  403232:	2101      	movs	r1, #1
  403234:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403238:	88fb      	ldrh	r3, [r7, #6]
  40323a:	4a10      	ldr	r2, [pc, #64]	; (40327c <start_timer+0x70>)
  40323c:	00db      	lsls	r3, r3, #3
  40323e:	4413      	add	r3, r2
  403240:	2200      	movs	r2, #0
  403242:	709a      	strb	r2, [r3, #2]
	if (duration <= (MAX_TICK - timerTickCount))
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <start_timer+0x6c>)
  403246:	681a      	ldr	r2, [r3, #0]
  403248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  40324c:	1a9b      	subs	r3, r3, r2
  40324e:	683a      	ldr	r2, [r7, #0]
  403250:	4293      	cmp	r3, r2
  403252:	d306      	bcc.n	403262 <start_timer+0x56>
	{
		timers[timerID].overflow = 0;
  403254:	88fb      	ldrh	r3, [r7, #6]
  403256:	4a09      	ldr	r2, [pc, #36]	; (40327c <start_timer+0x70>)
  403258:	00db      	lsls	r3, r3, #3
  40325a:	4413      	add	r3, r2
  40325c:	2200      	movs	r2, #0
  40325e:	70da      	strb	r2, [r3, #3]
  403260:	e005      	b.n	40326e <start_timer+0x62>
	}
	else
	{
		timers[timerID].overflow = 1;
  403262:	88fb      	ldrh	r3, [r7, #6]
  403264:	4a05      	ldr	r2, [pc, #20]	; (40327c <start_timer+0x70>)
  403266:	00db      	lsls	r3, r3, #3
  403268:	4413      	add	r3, r2
  40326a:	2201      	movs	r2, #1
  40326c:	70da      	strb	r2, [r3, #3]
	}
}
  40326e:	370c      	adds	r7, #12
  403270:	46bd      	mov	sp, r7
  403272:	f85d 7b04 	ldr.w	r7, [sp], #4
  403276:	4770      	bx	lr
  403278:	204009a8 	.word	0x204009a8
  40327c:	20400ad8 	.word	0x20400ad8

00403280 <process_timers>:

void process_timers(void)
{
  403280:	b480      	push	{r7}
  403282:	b083      	sub	sp, #12
  403284:	af00      	add	r7, sp, #0
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  403286:	2300      	movs	r3, #0
  403288:	80fb      	strh	r3, [r7, #6]
  40328a:	e02d      	b.n	4032e8 <process_timers+0x68>
	{
		if (timers[i].active)
  40328c:	88fb      	ldrh	r3, [r7, #6]
  40328e:	4a1e      	ldr	r2, [pc, #120]	; (403308 <process_timers+0x88>)
  403290:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  403294:	2b00      	cmp	r3, #0
  403296:	d024      	beq.n	4032e2 <process_timers+0x62>
		{
			if (rollover) 
  403298:	4b1c      	ldr	r3, [pc, #112]	; (40330c <process_timers+0x8c>)
  40329a:	781b      	ldrb	r3, [r3, #0]
  40329c:	2b00      	cmp	r3, #0
  40329e:	d005      	beq.n	4032ac <process_timers+0x2c>
			{
				timers[i].overflow = 0;
  4032a0:	88fb      	ldrh	r3, [r7, #6]
  4032a2:	4a19      	ldr	r2, [pc, #100]	; (403308 <process_timers+0x88>)
  4032a4:	00db      	lsls	r3, r3, #3
  4032a6:	4413      	add	r3, r2
  4032a8:	2200      	movs	r2, #0
  4032aa:	70da      	strb	r2, [r3, #3]
			}
			
			if (!timers[i].overflow) 	/* don't check for timer count done if the timer count overflowed when it was set  */
  4032ac:	88fb      	ldrh	r3, [r7, #6]
  4032ae:	4a16      	ldr	r2, [pc, #88]	; (403308 <process_timers+0x88>)
  4032b0:	00db      	lsls	r3, r3, #3
  4032b2:	4413      	add	r3, r2
  4032b4:	78db      	ldrb	r3, [r3, #3]
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d113      	bne.n	4032e2 <process_timers+0x62>
			{							/* but timerTickCount hasn't rolled over yet */
				if (timerTickCount > timers[i].count)
  4032ba:	88fb      	ldrh	r3, [r7, #6]
  4032bc:	4a12      	ldr	r2, [pc, #72]	; (403308 <process_timers+0x88>)
  4032be:	00db      	lsls	r3, r3, #3
  4032c0:	4413      	add	r3, r2
  4032c2:	685a      	ldr	r2, [r3, #4]
  4032c4:	4b12      	ldr	r3, [pc, #72]	; (403310 <process_timers+0x90>)
  4032c6:	681b      	ldr	r3, [r3, #0]
  4032c8:	429a      	cmp	r2, r3
  4032ca:	d20a      	bcs.n	4032e2 <process_timers+0x62>
				{
					timers[i].active = 0;
  4032cc:	88fb      	ldrh	r3, [r7, #6]
  4032ce:	4a0e      	ldr	r2, [pc, #56]	; (403308 <process_timers+0x88>)
  4032d0:	2100      	movs	r1, #0
  4032d2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
						timers[i].done = 1;
  4032d6:	88fb      	ldrh	r3, [r7, #6]
  4032d8:	4a0b      	ldr	r2, [pc, #44]	; (403308 <process_timers+0x88>)
  4032da:	00db      	lsls	r3, r3, #3
  4032dc:	4413      	add	r3, r2
  4032de:	2201      	movs	r2, #1
  4032e0:	709a      	strb	r2, [r3, #2]

void process_timers(void)
{
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  4032e2:	88fb      	ldrh	r3, [r7, #6]
  4032e4:	3301      	adds	r3, #1
  4032e6:	80fb      	strh	r3, [r7, #6]
  4032e8:	88fb      	ldrh	r3, [r7, #6]
  4032ea:	2b08      	cmp	r3, #8
  4032ec:	d9ce      	bls.n	40328c <process_timers+0xc>
				}
			}	
		}
	}
	
	if (rollover)
  4032ee:	4b07      	ldr	r3, [pc, #28]	; (40330c <process_timers+0x8c>)
  4032f0:	781b      	ldrb	r3, [r3, #0]
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d002      	beq.n	4032fc <process_timers+0x7c>
	{
		rollover = 0; /* set in the interrupt, cleared here after we use it */
  4032f6:	4b05      	ldr	r3, [pc, #20]	; (40330c <process_timers+0x8c>)
  4032f8:	2200      	movs	r2, #0
  4032fa:	701a      	strb	r2, [r3, #0]
	}
}
  4032fc:	370c      	adds	r7, #12
  4032fe:	46bd      	mov	sp, r7
  403300:	f85d 7b04 	ldr.w	r7, [sp], #4
  403304:	4770      	bx	lr
  403306:	bf00      	nop
  403308:	20400ad8 	.word	0x20400ad8
  40330c:	204009ac 	.word	0x204009ac
  403310:	204009a8 	.word	0x204009a8

00403314 <timer_done>:
{
	return (timers[timerID].active);
}

unsigned short timer_done(unsigned short timerID)
{
  403314:	b480      	push	{r7}
  403316:	b083      	sub	sp, #12
  403318:	af00      	add	r7, sp, #0
  40331a:	4603      	mov	r3, r0
  40331c:	80fb      	strh	r3, [r7, #6]
	if (timers[timerID].done)
  40331e:	88fb      	ldrh	r3, [r7, #6]
  403320:	4a0a      	ldr	r2, [pc, #40]	; (40334c <timer_done+0x38>)
  403322:	00db      	lsls	r3, r3, #3
  403324:	4413      	add	r3, r2
  403326:	789b      	ldrb	r3, [r3, #2]
  403328:	2b00      	cmp	r3, #0
  40332a:	d007      	beq.n	40333c <timer_done+0x28>
	{
		timers[timerID].done = 0;
  40332c:	88fb      	ldrh	r3, [r7, #6]
  40332e:	4a07      	ldr	r2, [pc, #28]	; (40334c <timer_done+0x38>)
  403330:	00db      	lsls	r3, r3, #3
  403332:	4413      	add	r3, r2
  403334:	2200      	movs	r2, #0
  403336:	709a      	strb	r2, [r3, #2]
		return 1;
  403338:	2301      	movs	r3, #1
  40333a:	e000      	b.n	40333e <timer_done+0x2a>
	}
	else
		return 0;
  40333c:	2300      	movs	r3, #0
}
  40333e:	4618      	mov	r0, r3
  403340:	370c      	adds	r7, #12
  403342:	46bd      	mov	sp, r7
  403344:	f85d 7b04 	ldr.w	r7, [sp], #4
  403348:	4770      	bx	lr
  40334a:	bf00      	nop
  40334c:	20400ad8 	.word	0x20400ad8

00403350 <end_timer>:

void end_timer(unsigned short timerID)
{
  403350:	b480      	push	{r7}
  403352:	b083      	sub	sp, #12
  403354:	af00      	add	r7, sp, #0
  403356:	4603      	mov	r3, r0
  403358:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = 0;
  40335a:	88fb      	ldrh	r3, [r7, #6]
  40335c:	4a0d      	ldr	r2, [pc, #52]	; (403394 <end_timer+0x44>)
  40335e:	00db      	lsls	r3, r3, #3
  403360:	4413      	add	r3, r2
  403362:	2200      	movs	r2, #0
  403364:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 0;
  403366:	88fb      	ldrh	r3, [r7, #6]
  403368:	4a0a      	ldr	r2, [pc, #40]	; (403394 <end_timer+0x44>)
  40336a:	2100      	movs	r1, #0
  40336c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403370:	88fb      	ldrh	r3, [r7, #6]
  403372:	4a08      	ldr	r2, [pc, #32]	; (403394 <end_timer+0x44>)
  403374:	00db      	lsls	r3, r3, #3
  403376:	4413      	add	r3, r2
  403378:	2200      	movs	r2, #0
  40337a:	709a      	strb	r2, [r3, #2]
	timers[timerID].overflow = 0;
  40337c:	88fb      	ldrh	r3, [r7, #6]
  40337e:	4a05      	ldr	r2, [pc, #20]	; (403394 <end_timer+0x44>)
  403380:	00db      	lsls	r3, r3, #3
  403382:	4413      	add	r3, r2
  403384:	2200      	movs	r2, #0
  403386:	70da      	strb	r2, [r3, #3]
}
  403388:	370c      	adds	r7, #12
  40338a:	46bd      	mov	sp, r7
  40338c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403390:	4770      	bx	lr
  403392:	bf00      	nop
  403394:	20400ad8 	.word	0x20400ad8

00403398 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403398:	b480      	push	{r7}
  40339a:	b083      	sub	sp, #12
  40339c:	af00      	add	r7, sp, #0
  40339e:	4603      	mov	r3, r0
  4033a0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4033a2:	4908      	ldr	r1, [pc, #32]	; (4033c4 <NVIC_EnableIRQ+0x2c>)
  4033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033a8:	095b      	lsrs	r3, r3, #5
  4033aa:	79fa      	ldrb	r2, [r7, #7]
  4033ac:	f002 021f 	and.w	r2, r2, #31
  4033b0:	2001      	movs	r0, #1
  4033b2:	fa00 f202 	lsl.w	r2, r0, r2
  4033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ba:	370c      	adds	r7, #12
  4033bc:	46bd      	mov	sp, r7
  4033be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033c2:	4770      	bx	lr
  4033c4:	e000e100 	.word	0xe000e100

004033c8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4033c8:	b480      	push	{r7}
  4033ca:	b083      	sub	sp, #12
  4033cc:	af00      	add	r7, sp, #0
  4033ce:	4603      	mov	r3, r0
  4033d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4033d2:	4909      	ldr	r1, [pc, #36]	; (4033f8 <NVIC_DisableIRQ+0x30>)
  4033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033d8:	095b      	lsrs	r3, r3, #5
  4033da:	79fa      	ldrb	r2, [r7, #7]
  4033dc:	f002 021f 	and.w	r2, r2, #31
  4033e0:	2001      	movs	r0, #1
  4033e2:	fa00 f202 	lsl.w	r2, r0, r2
  4033e6:	3320      	adds	r3, #32
  4033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ec:	370c      	adds	r7, #12
  4033ee:	46bd      	mov	sp, r7
  4033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033f4:	4770      	bx	lr
  4033f6:	bf00      	nop
  4033f8:	e000e100 	.word	0xe000e100

004033fc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4033fc:	b480      	push	{r7}
  4033fe:	b083      	sub	sp, #12
  403400:	af00      	add	r7, sp, #0
  403402:	4603      	mov	r3, r0
  403404:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403406:	4909      	ldr	r1, [pc, #36]	; (40342c <NVIC_ClearPendingIRQ+0x30>)
  403408:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40340c:	095b      	lsrs	r3, r3, #5
  40340e:	79fa      	ldrb	r2, [r7, #7]
  403410:	f002 021f 	and.w	r2, r2, #31
  403414:	2001      	movs	r0, #1
  403416:	fa00 f202 	lsl.w	r2, r0, r2
  40341a:	3360      	adds	r3, #96	; 0x60
  40341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403420:	370c      	adds	r7, #12
  403422:	46bd      	mov	sp, r7
  403424:	f85d 7b04 	ldr.w	r7, [sp], #4
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	e000e100 	.word	0xe000e100

00403430 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403430:	b480      	push	{r7}
  403432:	b083      	sub	sp, #12
  403434:	af00      	add	r7, sp, #0
  403436:	4603      	mov	r3, r0
  403438:	6039      	str	r1, [r7, #0]
  40343a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403440:	2b00      	cmp	r3, #0
  403442:	da0b      	bge.n	40345c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403444:	490d      	ldr	r1, [pc, #52]	; (40347c <NVIC_SetPriority+0x4c>)
  403446:	79fb      	ldrb	r3, [r7, #7]
  403448:	f003 030f 	and.w	r3, r3, #15
  40344c:	3b04      	subs	r3, #4
  40344e:	683a      	ldr	r2, [r7, #0]
  403450:	b2d2      	uxtb	r2, r2
  403452:	0152      	lsls	r2, r2, #5
  403454:	b2d2      	uxtb	r2, r2
  403456:	440b      	add	r3, r1
  403458:	761a      	strb	r2, [r3, #24]
  40345a:	e009      	b.n	403470 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40345c:	4908      	ldr	r1, [pc, #32]	; (403480 <NVIC_SetPriority+0x50>)
  40345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403462:	683a      	ldr	r2, [r7, #0]
  403464:	b2d2      	uxtb	r2, r2
  403466:	0152      	lsls	r2, r2, #5
  403468:	b2d2      	uxtb	r2, r2
  40346a:	440b      	add	r3, r1
  40346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403470:	370c      	adds	r7, #12
  403472:	46bd      	mov	sp, r7
  403474:	f85d 7b04 	ldr.w	r7, [sp], #4
  403478:	4770      	bx	lr
  40347a:	bf00      	nop
  40347c:	e000ed00 	.word	0xe000ed00
  403480:	e000e100 	.word	0xe000e100

00403484 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403484:	b580      	push	{r7, lr}
  403486:	b082      	sub	sp, #8
  403488:	af00      	add	r7, sp, #0
  40348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  40348c:	687b      	ldr	r3, [r7, #4]
  40348e:	3b01      	subs	r3, #1
  403490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403494:	d301      	bcc.n	40349a <SysTick_Config+0x16>
  403496:	2301      	movs	r3, #1
  403498:	e00f      	b.n	4034ba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40349a:	4a0a      	ldr	r2, [pc, #40]	; (4034c4 <SysTick_Config+0x40>)
  40349c:	687b      	ldr	r3, [r7, #4]
  40349e:	3b01      	subs	r3, #1
  4034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4034a2:	f04f 30ff 	mov.w	r0, #4294967295
  4034a6:	2107      	movs	r1, #7
  4034a8:	4b07      	ldr	r3, [pc, #28]	; (4034c8 <SysTick_Config+0x44>)
  4034aa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4034ac:	4b05      	ldr	r3, [pc, #20]	; (4034c4 <SysTick_Config+0x40>)
  4034ae:	2200      	movs	r2, #0
  4034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4034b2:	4b04      	ldr	r3, [pc, #16]	; (4034c4 <SysTick_Config+0x40>)
  4034b4:	2207      	movs	r2, #7
  4034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4034b8:	2300      	movs	r3, #0
}
  4034ba:	4618      	mov	r0, r3
  4034bc:	3708      	adds	r7, #8
  4034be:	46bd      	mov	sp, r7
  4034c0:	bd80      	pop	{r7, pc}
  4034c2:	bf00      	nop
  4034c4:	e000e010 	.word	0xe000e010
  4034c8:	00403431 	.word	0x00403431

004034cc <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4034cc:	b480      	push	{r7}
  4034ce:	b085      	sub	sp, #20
  4034d0:	af00      	add	r7, sp, #0
  4034d2:	6078      	str	r0, [r7, #4]
  4034d4:	460b      	mov	r3, r1
  4034d6:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  4034d8:	687b      	ldr	r3, [r7, #4]
  4034da:	685b      	ldr	r3, [r3, #4]
  4034dc:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  4034de:	78fb      	ldrb	r3, [r7, #3]
  4034e0:	2bff      	cmp	r3, #255	; 0xff
  4034e2:	d104      	bne.n	4034ee <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  4034e4:	68fb      	ldr	r3, [r7, #12]
  4034e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4034ea:	60fb      	str	r3, [r7, #12]
  4034ec:	e007      	b.n	4034fe <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4034ee:	68fb      	ldr	r3, [r7, #12]
  4034f0:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4034f4:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4034f6:	78fb      	ldrb	r3, [r7, #3]
  4034f8:	68fa      	ldr	r2, [r7, #12]
  4034fa:	4313      	orrs	r3, r2
  4034fc:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  4034fe:	687b      	ldr	r3, [r7, #4]
  403500:	68fa      	ldr	r2, [r7, #12]
  403502:	605a      	str	r2, [r3, #4]
}
  403504:	3714      	adds	r7, #20
  403506:	46bd      	mov	sp, r7
  403508:	f85d 7b04 	ldr.w	r7, [sp], #4
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  403510:	b480      	push	{r7}
  403512:	b083      	sub	sp, #12
  403514:	af00      	add	r7, sp, #0
  403516:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  403518:	687b      	ldr	r3, [r7, #4]
  40351a:	6a1b      	ldr	r3, [r3, #32]
  40351c:	b29b      	uxth	r3, r3
}
  40351e:	4618      	mov	r0, r3
  403520:	370c      	adds	r7, #12
  403522:	46bd      	mov	sp, r7
  403524:	f85d 7b04 	ldr.w	r7, [sp], #4
  403528:	4770      	bx	lr
  40352a:	bf00      	nop

0040352c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40352c:	b480      	push	{r7}
  40352e:	b083      	sub	sp, #12
  403530:	af00      	add	r7, sp, #0
  403532:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403534:	687b      	ldr	r3, [r7, #4]
  403536:	2b07      	cmp	r3, #7
  403538:	d825      	bhi.n	403586 <osc_get_rate+0x5a>
  40353a:	a201      	add	r2, pc, #4	; (adr r2, 403540 <osc_get_rate+0x14>)
  40353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403540:	00403561 	.word	0x00403561
  403544:	00403567 	.word	0x00403567
  403548:	0040356d 	.word	0x0040356d
  40354c:	00403573 	.word	0x00403573
  403550:	00403577 	.word	0x00403577
  403554:	0040357b 	.word	0x0040357b
  403558:	0040357f 	.word	0x0040357f
  40355c:	00403583 	.word	0x00403583
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403560:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403564:	e010      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40356a:	e00d      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403570:	e00a      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403572:	4b08      	ldr	r3, [pc, #32]	; (403594 <osc_get_rate+0x68>)
  403574:	e008      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403576:	4b08      	ldr	r3, [pc, #32]	; (403598 <osc_get_rate+0x6c>)
  403578:	e006      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40357a:	4b08      	ldr	r3, [pc, #32]	; (40359c <osc_get_rate+0x70>)
  40357c:	e004      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40357e:	4b08      	ldr	r3, [pc, #32]	; (4035a0 <osc_get_rate+0x74>)
  403580:	e002      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403582:	4b06      	ldr	r3, [pc, #24]	; (40359c <osc_get_rate+0x70>)
  403584:	e000      	b.n	403588 <osc_get_rate+0x5c>
	}

	return 0;
  403586:	2300      	movs	r3, #0
}
  403588:	4618      	mov	r0, r3
  40358a:	370c      	adds	r7, #12
  40358c:	46bd      	mov	sp, r7
  40358e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403592:	4770      	bx	lr
  403594:	003d0900 	.word	0x003d0900
  403598:	007a1200 	.word	0x007a1200
  40359c:	00b71b00 	.word	0x00b71b00
  4035a0:	00f42400 	.word	0x00f42400

004035a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4035a4:	b580      	push	{r7, lr}
  4035a6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4035a8:	2006      	movs	r0, #6
  4035aa:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <sysclk_get_main_hz+0x1c>)
  4035ac:	4798      	blx	r3
  4035ae:	4602      	mov	r2, r0
  4035b0:	4613      	mov	r3, r2
  4035b2:	009b      	lsls	r3, r3, #2
  4035b4:	4413      	add	r3, r2
  4035b6:	009a      	lsls	r2, r3, #2
  4035b8:	4413      	add	r3, r2
  4035ba:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4035bc:	4618      	mov	r0, r3
  4035be:	bd80      	pop	{r7, pc}
  4035c0:	0040352d 	.word	0x0040352d

004035c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4035c4:	b580      	push	{r7, lr}
  4035c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035c8:	4b02      	ldr	r3, [pc, #8]	; (4035d4 <sysclk_get_cpu_hz+0x10>)
  4035ca:	4798      	blx	r3
  4035cc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4035ce:	4618      	mov	r0, r3
  4035d0:	bd80      	pop	{r7, pc}
  4035d2:	bf00      	nop
  4035d4:	004035a5 	.word	0x004035a5

004035d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4035d8:	b580      	push	{r7, lr}
  4035da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035dc:	4b02      	ldr	r3, [pc, #8]	; (4035e8 <sysclk_get_peripheral_hz+0x10>)
  4035de:	4798      	blx	r3
  4035e0:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4035e2:	4618      	mov	r0, r3
  4035e4:	bd80      	pop	{r7, pc}
  4035e6:	bf00      	nop
  4035e8:	004035a5 	.word	0x004035a5

004035ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4035ec:	b580      	push	{r7, lr}
  4035ee:	b082      	sub	sp, #8
  4035f0:	af00      	add	r7, sp, #0
  4035f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4035f4:	6878      	ldr	r0, [r7, #4]
  4035f6:	4b02      	ldr	r3, [pc, #8]	; (403600 <sysclk_enable_peripheral_clock+0x14>)
  4035f8:	4798      	blx	r3
}
  4035fa:	3708      	adds	r7, #8
  4035fc:	46bd      	mov	sp, r7
  4035fe:	bd80      	pop	{r7, pc}
  403600:	004016d1 	.word	0x004016d1

00403604 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403604:	b480      	push	{r7}
  403606:	b08b      	sub	sp, #44	; 0x2c
  403608:	af00      	add	r7, sp, #0
  40360a:	6078      	str	r0, [r7, #4]
  40360c:	460b      	mov	r3, r1
  40360e:	70fb      	strb	r3, [r7, #3]
  403610:	687b      	ldr	r3, [r7, #4]
  403612:	627b      	str	r3, [r7, #36]	; 0x24
  403614:	78fb      	ldrb	r3, [r7, #3]
  403616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40361c:	61fb      	str	r3, [r7, #28]
  40361e:	69fb      	ldr	r3, [r7, #28]
  403620:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403622:	69bb      	ldr	r3, [r7, #24]
  403624:	095b      	lsrs	r3, r3, #5
  403626:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403628:	697a      	ldr	r2, [r7, #20]
  40362a:	4b10      	ldr	r3, [pc, #64]	; (40366c <ioport_set_pin_level+0x68>)
  40362c:	4413      	add	r3, r2
  40362e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403630:	613b      	str	r3, [r7, #16]

	if (level) {
  403632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403636:	2b00      	cmp	r3, #0
  403638:	d009      	beq.n	40364e <ioport_set_pin_level+0x4a>
  40363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40363c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40363e:	68fb      	ldr	r3, [r7, #12]
  403640:	f003 031f 	and.w	r3, r3, #31
  403644:	2201      	movs	r2, #1
  403646:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403648:	693b      	ldr	r3, [r7, #16]
  40364a:	631a      	str	r2, [r3, #48]	; 0x30
  40364c:	e008      	b.n	403660 <ioport_set_pin_level+0x5c>
  40364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403650:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403652:	68bb      	ldr	r3, [r7, #8]
  403654:	f003 031f 	and.w	r3, r3, #31
  403658:	2201      	movs	r2, #1
  40365a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40365c:	693b      	ldr	r3, [r7, #16]
  40365e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  403660:	372c      	adds	r7, #44	; 0x2c
  403662:	46bd      	mov	sp, r7
  403664:	f85d 7b04 	ldr.w	r7, [sp], #4
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	00200707 	.word	0x00200707

00403670 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403670:	b580      	push	{r7, lr}
  403672:	b08c      	sub	sp, #48	; 0x30
  403674:	af00      	add	r7, sp, #0
  403676:	6078      	str	r0, [r7, #4]
  403678:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40367a:	4b48      	ldr	r3, [pc, #288]	; (40379c <usart_serial_init+0x12c>)
  40367c:	4798      	blx	r3
  40367e:	4603      	mov	r3, r0
  403680:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403682:	683b      	ldr	r3, [r7, #0]
  403684:	681b      	ldr	r3, [r3, #0]
  403686:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403688:	683b      	ldr	r3, [r7, #0]
  40368a:	689b      	ldr	r3, [r3, #8]
  40368c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40368e:	683b      	ldr	r3, [r7, #0]
  403690:	681b      	ldr	r3, [r3, #0]
  403692:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403694:	683b      	ldr	r3, [r7, #0]
  403696:	685b      	ldr	r3, [r3, #4]
  403698:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40369a:	683b      	ldr	r3, [r7, #0]
  40369c:	689b      	ldr	r3, [r3, #8]
  40369e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4036a0:	683b      	ldr	r3, [r7, #0]
  4036a2:	68db      	ldr	r3, [r3, #12]
  4036a4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4036a6:	2300      	movs	r3, #0
  4036a8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4036aa:	687b      	ldr	r3, [r7, #4]
  4036ac:	4a3c      	ldr	r2, [pc, #240]	; (4037a0 <usart_serial_init+0x130>)
  4036ae:	4293      	cmp	r3, r2
  4036b0:	d108      	bne.n	4036c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4036b2:	2007      	movs	r0, #7
  4036b4:	4b3b      	ldr	r3, [pc, #236]	; (4037a4 <usart_serial_init+0x134>)
  4036b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036bc:	6878      	ldr	r0, [r7, #4]
  4036be:	4619      	mov	r1, r3
  4036c0:	4b39      	ldr	r3, [pc, #228]	; (4037a8 <usart_serial_init+0x138>)
  4036c2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4036c4:	687b      	ldr	r3, [r7, #4]
  4036c6:	4a39      	ldr	r2, [pc, #228]	; (4037ac <usart_serial_init+0x13c>)
  4036c8:	4293      	cmp	r3, r2
  4036ca:	d108      	bne.n	4036de <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4036cc:	2008      	movs	r0, #8
  4036ce:	4b35      	ldr	r3, [pc, #212]	; (4037a4 <usart_serial_init+0x134>)
  4036d0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036d6:	6878      	ldr	r0, [r7, #4]
  4036d8:	4619      	mov	r1, r3
  4036da:	4b33      	ldr	r3, [pc, #204]	; (4037a8 <usart_serial_init+0x138>)
  4036dc:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4036de:	687b      	ldr	r3, [r7, #4]
  4036e0:	4a33      	ldr	r2, [pc, #204]	; (4037b0 <usart_serial_init+0x140>)
  4036e2:	4293      	cmp	r3, r2
  4036e4:	d108      	bne.n	4036f8 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  4036e6:	202c      	movs	r0, #44	; 0x2c
  4036e8:	4b2e      	ldr	r3, [pc, #184]	; (4037a4 <usart_serial_init+0x134>)
  4036ea:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036f0:	6878      	ldr	r0, [r7, #4]
  4036f2:	4619      	mov	r1, r3
  4036f4:	4b2c      	ldr	r3, [pc, #176]	; (4037a8 <usart_serial_init+0x138>)
  4036f6:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4036f8:	687b      	ldr	r3, [r7, #4]
  4036fa:	4a2e      	ldr	r2, [pc, #184]	; (4037b4 <usart_serial_init+0x144>)
  4036fc:	4293      	cmp	r3, r2
  4036fe:	d108      	bne.n	403712 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403700:	202d      	movs	r0, #45	; 0x2d
  403702:	4b28      	ldr	r3, [pc, #160]	; (4037a4 <usart_serial_init+0x134>)
  403704:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403706:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40370a:	6878      	ldr	r0, [r7, #4]
  40370c:	4619      	mov	r1, r3
  40370e:	4b26      	ldr	r3, [pc, #152]	; (4037a8 <usart_serial_init+0x138>)
  403710:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403712:	687b      	ldr	r3, [r7, #4]
  403714:	4a28      	ldr	r2, [pc, #160]	; (4037b8 <usart_serial_init+0x148>)
  403716:	4293      	cmp	r3, r2
  403718:	d111      	bne.n	40373e <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40371a:	200d      	movs	r0, #13
  40371c:	4b21      	ldr	r3, [pc, #132]	; (4037a4 <usart_serial_init+0x134>)
  40371e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403720:	4b1e      	ldr	r3, [pc, #120]	; (40379c <usart_serial_init+0x12c>)
  403722:	4798      	blx	r3
  403724:	4602      	mov	r2, r0
  403726:	f107 030c 	add.w	r3, r7, #12
  40372a:	6878      	ldr	r0, [r7, #4]
  40372c:	4619      	mov	r1, r3
  40372e:	4b23      	ldr	r3, [pc, #140]	; (4037bc <usart_serial_init+0x14c>)
  403730:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403732:	6878      	ldr	r0, [r7, #4]
  403734:	4b22      	ldr	r3, [pc, #136]	; (4037c0 <usart_serial_init+0x150>)
  403736:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403738:	6878      	ldr	r0, [r7, #4]
  40373a:	4b22      	ldr	r3, [pc, #136]	; (4037c4 <usart_serial_init+0x154>)
  40373c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40373e:	687b      	ldr	r3, [r7, #4]
  403740:	4a21      	ldr	r2, [pc, #132]	; (4037c8 <usart_serial_init+0x158>)
  403742:	4293      	cmp	r3, r2
  403744:	d111      	bne.n	40376a <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403746:	200e      	movs	r0, #14
  403748:	4b16      	ldr	r3, [pc, #88]	; (4037a4 <usart_serial_init+0x134>)
  40374a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40374c:	4b13      	ldr	r3, [pc, #76]	; (40379c <usart_serial_init+0x12c>)
  40374e:	4798      	blx	r3
  403750:	4602      	mov	r2, r0
  403752:	f107 030c 	add.w	r3, r7, #12
  403756:	6878      	ldr	r0, [r7, #4]
  403758:	4619      	mov	r1, r3
  40375a:	4b18      	ldr	r3, [pc, #96]	; (4037bc <usart_serial_init+0x14c>)
  40375c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40375e:	6878      	ldr	r0, [r7, #4]
  403760:	4b17      	ldr	r3, [pc, #92]	; (4037c0 <usart_serial_init+0x150>)
  403762:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403764:	6878      	ldr	r0, [r7, #4]
  403766:	4b17      	ldr	r3, [pc, #92]	; (4037c4 <usart_serial_init+0x154>)
  403768:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40376a:	687b      	ldr	r3, [r7, #4]
  40376c:	4a17      	ldr	r2, [pc, #92]	; (4037cc <usart_serial_init+0x15c>)
  40376e:	4293      	cmp	r3, r2
  403770:	d111      	bne.n	403796 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  403772:	200f      	movs	r0, #15
  403774:	4b0b      	ldr	r3, [pc, #44]	; (4037a4 <usart_serial_init+0x134>)
  403776:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403778:	4b08      	ldr	r3, [pc, #32]	; (40379c <usart_serial_init+0x12c>)
  40377a:	4798      	blx	r3
  40377c:	4602      	mov	r2, r0
  40377e:	f107 030c 	add.w	r3, r7, #12
  403782:	6878      	ldr	r0, [r7, #4]
  403784:	4619      	mov	r1, r3
  403786:	4b0d      	ldr	r3, [pc, #52]	; (4037bc <usart_serial_init+0x14c>)
  403788:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40378a:	6878      	ldr	r0, [r7, #4]
  40378c:	4b0c      	ldr	r3, [pc, #48]	; (4037c0 <usart_serial_init+0x150>)
  40378e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403790:	6878      	ldr	r0, [r7, #4]
  403792:	4b0c      	ldr	r3, [pc, #48]	; (4037c4 <usart_serial_init+0x154>)
  403794:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403796:	3730      	adds	r7, #48	; 0x30
  403798:	46bd      	mov	sp, r7
  40379a:	bd80      	pop	{r7, pc}
  40379c:	004035d9 	.word	0x004035d9
  4037a0:	400e0800 	.word	0x400e0800
  4037a4:	004035ed 	.word	0x004035ed
  4037a8:	00401f69 	.word	0x00401f69
  4037ac:	400e0a00 	.word	0x400e0a00
  4037b0:	400e1a00 	.word	0x400e1a00
  4037b4:	400e1c00 	.word	0x400e1c00
  4037b8:	40024000 	.word	0x40024000
  4037bc:	00402105 	.word	0x00402105
  4037c0:	00402189 	.word	0x00402189
  4037c4:	004021d5 	.word	0x004021d5
  4037c8:	40028000 	.word	0x40028000
  4037cc:	4002c000 	.word	0x4002c000

004037d0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4037d0:	b580      	push	{r7, lr}
  4037d2:	b082      	sub	sp, #8
  4037d4:	af00      	add	r7, sp, #0
  4037d6:	6078      	str	r0, [r7, #4]
  4037d8:	460b      	mov	r3, r1
  4037da:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4037dc:	687b      	ldr	r3, [r7, #4]
  4037de:	4a36      	ldr	r2, [pc, #216]	; (4038b8 <usart_serial_putchar+0xe8>)
  4037e0:	4293      	cmp	r3, r2
  4037e2:	d10a      	bne.n	4037fa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4037e4:	bf00      	nop
  4037e6:	78fb      	ldrb	r3, [r7, #3]
  4037e8:	6878      	ldr	r0, [r7, #4]
  4037ea:	4619      	mov	r1, r3
  4037ec:	4b33      	ldr	r3, [pc, #204]	; (4038bc <usart_serial_putchar+0xec>)
  4037ee:	4798      	blx	r3
  4037f0:	4603      	mov	r3, r0
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	d1f7      	bne.n	4037e6 <usart_serial_putchar+0x16>
		return 1;
  4037f6:	2301      	movs	r3, #1
  4037f8:	e05a      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4037fa:	687b      	ldr	r3, [r7, #4]
  4037fc:	4a30      	ldr	r2, [pc, #192]	; (4038c0 <usart_serial_putchar+0xf0>)
  4037fe:	4293      	cmp	r3, r2
  403800:	d10a      	bne.n	403818 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403802:	bf00      	nop
  403804:	78fb      	ldrb	r3, [r7, #3]
  403806:	6878      	ldr	r0, [r7, #4]
  403808:	4619      	mov	r1, r3
  40380a:	4b2c      	ldr	r3, [pc, #176]	; (4038bc <usart_serial_putchar+0xec>)
  40380c:	4798      	blx	r3
  40380e:	4603      	mov	r3, r0
  403810:	2b00      	cmp	r3, #0
  403812:	d1f7      	bne.n	403804 <usart_serial_putchar+0x34>
		return 1;
  403814:	2301      	movs	r3, #1
  403816:	e04b      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403818:	687b      	ldr	r3, [r7, #4]
  40381a:	4a2a      	ldr	r2, [pc, #168]	; (4038c4 <usart_serial_putchar+0xf4>)
  40381c:	4293      	cmp	r3, r2
  40381e:	d10a      	bne.n	403836 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403820:	bf00      	nop
  403822:	78fb      	ldrb	r3, [r7, #3]
  403824:	6878      	ldr	r0, [r7, #4]
  403826:	4619      	mov	r1, r3
  403828:	4b24      	ldr	r3, [pc, #144]	; (4038bc <usart_serial_putchar+0xec>)
  40382a:	4798      	blx	r3
  40382c:	4603      	mov	r3, r0
  40382e:	2b00      	cmp	r3, #0
  403830:	d1f7      	bne.n	403822 <usart_serial_putchar+0x52>
		return 1;
  403832:	2301      	movs	r3, #1
  403834:	e03c      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403836:	687b      	ldr	r3, [r7, #4]
  403838:	4a23      	ldr	r2, [pc, #140]	; (4038c8 <usart_serial_putchar+0xf8>)
  40383a:	4293      	cmp	r3, r2
  40383c:	d10a      	bne.n	403854 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40383e:	bf00      	nop
  403840:	78fb      	ldrb	r3, [r7, #3]
  403842:	6878      	ldr	r0, [r7, #4]
  403844:	4619      	mov	r1, r3
  403846:	4b1d      	ldr	r3, [pc, #116]	; (4038bc <usart_serial_putchar+0xec>)
  403848:	4798      	blx	r3
  40384a:	4603      	mov	r3, r0
  40384c:	2b00      	cmp	r3, #0
  40384e:	d1f7      	bne.n	403840 <usart_serial_putchar+0x70>
		return 1;
  403850:	2301      	movs	r3, #1
  403852:	e02d      	b.n	4038b0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403854:	687b      	ldr	r3, [r7, #4]
  403856:	4a1d      	ldr	r2, [pc, #116]	; (4038cc <usart_serial_putchar+0xfc>)
  403858:	4293      	cmp	r3, r2
  40385a:	d10a      	bne.n	403872 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40385c:	bf00      	nop
  40385e:	78fb      	ldrb	r3, [r7, #3]
  403860:	6878      	ldr	r0, [r7, #4]
  403862:	4619      	mov	r1, r3
  403864:	4b1a      	ldr	r3, [pc, #104]	; (4038d0 <usart_serial_putchar+0x100>)
  403866:	4798      	blx	r3
  403868:	4603      	mov	r3, r0
  40386a:	2b00      	cmp	r3, #0
  40386c:	d1f7      	bne.n	40385e <usart_serial_putchar+0x8e>
		return 1;
  40386e:	2301      	movs	r3, #1
  403870:	e01e      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403872:	687b      	ldr	r3, [r7, #4]
  403874:	4a17      	ldr	r2, [pc, #92]	; (4038d4 <usart_serial_putchar+0x104>)
  403876:	4293      	cmp	r3, r2
  403878:	d10a      	bne.n	403890 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40387a:	bf00      	nop
  40387c:	78fb      	ldrb	r3, [r7, #3]
  40387e:	6878      	ldr	r0, [r7, #4]
  403880:	4619      	mov	r1, r3
  403882:	4b13      	ldr	r3, [pc, #76]	; (4038d0 <usart_serial_putchar+0x100>)
  403884:	4798      	blx	r3
  403886:	4603      	mov	r3, r0
  403888:	2b00      	cmp	r3, #0
  40388a:	d1f7      	bne.n	40387c <usart_serial_putchar+0xac>
		return 1;
  40388c:	2301      	movs	r3, #1
  40388e:	e00f      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403890:	687b      	ldr	r3, [r7, #4]
  403892:	4a11      	ldr	r2, [pc, #68]	; (4038d8 <usart_serial_putchar+0x108>)
  403894:	4293      	cmp	r3, r2
  403896:	d10a      	bne.n	4038ae <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  403898:	bf00      	nop
  40389a:	78fb      	ldrb	r3, [r7, #3]
  40389c:	6878      	ldr	r0, [r7, #4]
  40389e:	4619      	mov	r1, r3
  4038a0:	4b0b      	ldr	r3, [pc, #44]	; (4038d0 <usart_serial_putchar+0x100>)
  4038a2:	4798      	blx	r3
  4038a4:	4603      	mov	r3, r0
  4038a6:	2b00      	cmp	r3, #0
  4038a8:	d1f7      	bne.n	40389a <usart_serial_putchar+0xca>
		return 1;
  4038aa:	2301      	movs	r3, #1
  4038ac:	e000      	b.n	4038b0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4038ae:	2300      	movs	r3, #0
}
  4038b0:	4618      	mov	r0, r3
  4038b2:	3708      	adds	r7, #8
  4038b4:	46bd      	mov	sp, r7
  4038b6:	bd80      	pop	{r7, pc}
  4038b8:	400e0800 	.word	0x400e0800
  4038bc:	00401fc1 	.word	0x00401fc1
  4038c0:	400e0a00 	.word	0x400e0a00
  4038c4:	400e1a00 	.word	0x400e1a00
  4038c8:	400e1c00 	.word	0x400e1c00
  4038cc:	40024000 	.word	0x40024000
  4038d0:	004022dd 	.word	0x004022dd
  4038d4:	40028000 	.word	0x40028000
  4038d8:	4002c000 	.word	0x4002c000

004038dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4038dc:	b580      	push	{r7, lr}
  4038de:	b084      	sub	sp, #16
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	6078      	str	r0, [r7, #4]
  4038e4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4038e6:	2300      	movs	r3, #0
  4038e8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4038ea:	687b      	ldr	r3, [r7, #4]
  4038ec:	4a33      	ldr	r2, [pc, #204]	; (4039bc <usart_serial_getchar+0xe0>)
  4038ee:	4293      	cmp	r3, r2
  4038f0:	d107      	bne.n	403902 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4038f2:	bf00      	nop
  4038f4:	6878      	ldr	r0, [r7, #4]
  4038f6:	6839      	ldr	r1, [r7, #0]
  4038f8:	4b31      	ldr	r3, [pc, #196]	; (4039c0 <usart_serial_getchar+0xe4>)
  4038fa:	4798      	blx	r3
  4038fc:	4603      	mov	r3, r0
  4038fe:	2b00      	cmp	r3, #0
  403900:	d1f8      	bne.n	4038f4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403902:	687b      	ldr	r3, [r7, #4]
  403904:	4a2f      	ldr	r2, [pc, #188]	; (4039c4 <usart_serial_getchar+0xe8>)
  403906:	4293      	cmp	r3, r2
  403908:	d107      	bne.n	40391a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40390a:	bf00      	nop
  40390c:	6878      	ldr	r0, [r7, #4]
  40390e:	6839      	ldr	r1, [r7, #0]
  403910:	4b2b      	ldr	r3, [pc, #172]	; (4039c0 <usart_serial_getchar+0xe4>)
  403912:	4798      	blx	r3
  403914:	4603      	mov	r3, r0
  403916:	2b00      	cmp	r3, #0
  403918:	d1f8      	bne.n	40390c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40391a:	687b      	ldr	r3, [r7, #4]
  40391c:	4a2a      	ldr	r2, [pc, #168]	; (4039c8 <usart_serial_getchar+0xec>)
  40391e:	4293      	cmp	r3, r2
  403920:	d107      	bne.n	403932 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403922:	bf00      	nop
  403924:	6878      	ldr	r0, [r7, #4]
  403926:	6839      	ldr	r1, [r7, #0]
  403928:	4b25      	ldr	r3, [pc, #148]	; (4039c0 <usart_serial_getchar+0xe4>)
  40392a:	4798      	blx	r3
  40392c:	4603      	mov	r3, r0
  40392e:	2b00      	cmp	r3, #0
  403930:	d1f8      	bne.n	403924 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403932:	687b      	ldr	r3, [r7, #4]
  403934:	4a25      	ldr	r2, [pc, #148]	; (4039cc <usart_serial_getchar+0xf0>)
  403936:	4293      	cmp	r3, r2
  403938:	d107      	bne.n	40394a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40393a:	bf00      	nop
  40393c:	6878      	ldr	r0, [r7, #4]
  40393e:	6839      	ldr	r1, [r7, #0]
  403940:	4b1f      	ldr	r3, [pc, #124]	; (4039c0 <usart_serial_getchar+0xe4>)
  403942:	4798      	blx	r3
  403944:	4603      	mov	r3, r0
  403946:	2b00      	cmp	r3, #0
  403948:	d1f8      	bne.n	40393c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40394a:	687b      	ldr	r3, [r7, #4]
  40394c:	4a20      	ldr	r2, [pc, #128]	; (4039d0 <usart_serial_getchar+0xf4>)
  40394e:	4293      	cmp	r3, r2
  403950:	d10d      	bne.n	40396e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  403952:	bf00      	nop
  403954:	f107 030c 	add.w	r3, r7, #12
  403958:	6878      	ldr	r0, [r7, #4]
  40395a:	4619      	mov	r1, r3
  40395c:	4b1d      	ldr	r3, [pc, #116]	; (4039d4 <usart_serial_getchar+0xf8>)
  40395e:	4798      	blx	r3
  403960:	4603      	mov	r3, r0
  403962:	2b00      	cmp	r3, #0
  403964:	d1f6      	bne.n	403954 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  403966:	68fb      	ldr	r3, [r7, #12]
  403968:	b2da      	uxtb	r2, r3
  40396a:	683b      	ldr	r3, [r7, #0]
  40396c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40396e:	687b      	ldr	r3, [r7, #4]
  403970:	4a19      	ldr	r2, [pc, #100]	; (4039d8 <usart_serial_getchar+0xfc>)
  403972:	4293      	cmp	r3, r2
  403974:	d10d      	bne.n	403992 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  403976:	bf00      	nop
  403978:	f107 030c 	add.w	r3, r7, #12
  40397c:	6878      	ldr	r0, [r7, #4]
  40397e:	4619      	mov	r1, r3
  403980:	4b14      	ldr	r3, [pc, #80]	; (4039d4 <usart_serial_getchar+0xf8>)
  403982:	4798      	blx	r3
  403984:	4603      	mov	r3, r0
  403986:	2b00      	cmp	r3, #0
  403988:	d1f6      	bne.n	403978 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40398a:	68fb      	ldr	r3, [r7, #12]
  40398c:	b2da      	uxtb	r2, r3
  40398e:	683b      	ldr	r3, [r7, #0]
  403990:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	4a11      	ldr	r2, [pc, #68]	; (4039dc <usart_serial_getchar+0x100>)
  403996:	4293      	cmp	r3, r2
  403998:	d10d      	bne.n	4039b6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40399a:	bf00      	nop
  40399c:	f107 030c 	add.w	r3, r7, #12
  4039a0:	6878      	ldr	r0, [r7, #4]
  4039a2:	4619      	mov	r1, r3
  4039a4:	4b0b      	ldr	r3, [pc, #44]	; (4039d4 <usart_serial_getchar+0xf8>)
  4039a6:	4798      	blx	r3
  4039a8:	4603      	mov	r3, r0
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	d1f6      	bne.n	40399c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4039ae:	68fb      	ldr	r3, [r7, #12]
  4039b0:	b2da      	uxtb	r2, r3
  4039b2:	683b      	ldr	r3, [r7, #0]
  4039b4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4039b6:	3710      	adds	r7, #16
  4039b8:	46bd      	mov	sp, r7
  4039ba:	bd80      	pop	{r7, pc}
  4039bc:	400e0800 	.word	0x400e0800
  4039c0:	00401ff1 	.word	0x00401ff1
  4039c4:	400e0a00 	.word	0x400e0a00
  4039c8:	400e1a00 	.word	0x400e1a00
  4039cc:	400e1c00 	.word	0x400e1c00
  4039d0:	40024000 	.word	0x40024000
  4039d4:	00402311 	.word	0x00402311
  4039d8:	40028000 	.word	0x40028000
  4039dc:	4002c000 	.word	0x4002c000

004039e0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4039e0:	b580      	push	{r7, lr}
  4039e2:	b082      	sub	sp, #8
  4039e4:	af00      	add	r7, sp, #0
  4039e6:	6078      	str	r0, [r7, #4]
  4039e8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4039ea:	4a0f      	ldr	r2, [pc, #60]	; (403a28 <stdio_serial_init+0x48>)
  4039ec:	687b      	ldr	r3, [r7, #4]
  4039ee:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4039f0:	4b0e      	ldr	r3, [pc, #56]	; (403a2c <stdio_serial_init+0x4c>)
  4039f2:	4a0f      	ldr	r2, [pc, #60]	; (403a30 <stdio_serial_init+0x50>)
  4039f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4039f6:	4b0f      	ldr	r3, [pc, #60]	; (403a34 <stdio_serial_init+0x54>)
  4039f8:	4a0f      	ldr	r2, [pc, #60]	; (403a38 <stdio_serial_init+0x58>)
  4039fa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4039fc:	6878      	ldr	r0, [r7, #4]
  4039fe:	6839      	ldr	r1, [r7, #0]
  403a00:	4b0e      	ldr	r3, [pc, #56]	; (403a3c <stdio_serial_init+0x5c>)
  403a02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403a04:	4b0e      	ldr	r3, [pc, #56]	; (403a40 <stdio_serial_init+0x60>)
  403a06:	681b      	ldr	r3, [r3, #0]
  403a08:	689b      	ldr	r3, [r3, #8]
  403a0a:	4618      	mov	r0, r3
  403a0c:	2100      	movs	r1, #0
  403a0e:	4b0d      	ldr	r3, [pc, #52]	; (403a44 <stdio_serial_init+0x64>)
  403a10:	4798      	blx	r3
	setbuf(stdin, NULL);
  403a12:	4b0b      	ldr	r3, [pc, #44]	; (403a40 <stdio_serial_init+0x60>)
  403a14:	681b      	ldr	r3, [r3, #0]
  403a16:	685b      	ldr	r3, [r3, #4]
  403a18:	4618      	mov	r0, r3
  403a1a:	2100      	movs	r1, #0
  403a1c:	4b09      	ldr	r3, [pc, #36]	; (403a44 <stdio_serial_init+0x64>)
  403a1e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403a20:	3708      	adds	r7, #8
  403a22:	46bd      	mov	sp, r7
  403a24:	bd80      	pop	{r7, pc}
  403a26:	bf00      	nop
  403a28:	20400a2c 	.word	0x20400a2c
  403a2c:	20400a28 	.word	0x20400a28
  403a30:	004037d1 	.word	0x004037d1
  403a34:	20400a24 	.word	0x20400a24
  403a38:	004038dd 	.word	0x004038dd
  403a3c:	00403671 	.word	0x00403671
  403a40:	204004c8 	.word	0x204004c8
  403a44:	004074f1 	.word	0x004074f1

00403a48 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  403a48:	b480      	push	{r7}
  403a4a:	b085      	sub	sp, #20
  403a4c:	af00      	add	r7, sp, #0
  403a4e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  403a50:	4b07      	ldr	r3, [pc, #28]	; (403a70 <mdelay+0x28>)
  403a52:	681b      	ldr	r3, [r3, #0]
  403a54:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  403a56:	bf00      	nop
  403a58:	4b05      	ldr	r3, [pc, #20]	; (403a70 <mdelay+0x28>)
  403a5a:	681a      	ldr	r2, [r3, #0]
  403a5c:	68fb      	ldr	r3, [r7, #12]
  403a5e:	1ad2      	subs	r2, r2, r3
  403a60:	687b      	ldr	r3, [r7, #4]
  403a62:	429a      	cmp	r2, r3
  403a64:	d3f8      	bcc.n	403a58 <mdelay+0x10>
	}
}
  403a66:	3714      	adds	r7, #20
  403a68:	46bd      	mov	sp, r7
  403a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a6e:	4770      	bx	lr
  403a70:	204009b4 	.word	0x204009b4

00403a74 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  403a74:	b580      	push	{r7, lr}
  403a76:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  403a78:	4b4f      	ldr	r3, [pc, #316]	; (403bb8 <SysTick_Handler+0x144>)
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	3301      	adds	r3, #1
  403a7e:	4a4e      	ldr	r2, [pc, #312]	; (403bb8 <SysTick_Handler+0x144>)
  403a80:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  403a82:	4b4e      	ldr	r3, [pc, #312]	; (403bbc <SysTick_Handler+0x148>)
  403a84:	681b      	ldr	r3, [r3, #0]
  403a86:	3301      	adds	r3, #1
  403a88:	4a4c      	ldr	r2, [pc, #304]	; (403bbc <SysTick_Handler+0x148>)
  403a8a:	6013      	str	r3, [r2, #0]
	
	timerTickCount++;
  403a8c:	4b4c      	ldr	r3, [pc, #304]	; (403bc0 <SysTick_Handler+0x14c>)
  403a8e:	681b      	ldr	r3, [r3, #0]
  403a90:	3301      	adds	r3, #1
  403a92:	4a4b      	ldr	r2, [pc, #300]	; (403bc0 <SysTick_Handler+0x14c>)
  403a94:	6013      	str	r3, [r2, #0]
	timerTickCount &= MAX_TICK; // force rollover at this count to avoid confusion detecting rollover with the MSbit set
  403a96:	4b4a      	ldr	r3, [pc, #296]	; (403bc0 <SysTick_Handler+0x14c>)
  403a98:	681b      	ldr	r3, [r3, #0]
  403a9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  403a9e:	4a48      	ldr	r2, [pc, #288]	; (403bc0 <SysTick_Handler+0x14c>)
  403aa0:	6013      	str	r3, [r2, #0]
	if (timerTickCount == 0)
  403aa2:	4b47      	ldr	r3, [pc, #284]	; (403bc0 <SysTick_Handler+0x14c>)
  403aa4:	681b      	ldr	r3, [r3, #0]
  403aa6:	2b00      	cmp	r3, #0
  403aa8:	d102      	bne.n	403ab0 <SysTick_Handler+0x3c>
	{
		rollover = 1;
  403aaa:	4b46      	ldr	r3, [pc, #280]	; (403bc4 <SysTick_Handler+0x150>)
  403aac:	2201      	movs	r2, #1
  403aae:	701a      	strb	r2, [r3, #0]
	}
	
	if ((timerTickCount % TICKS_PER_SEC) == 0)
  403ab0:	4b43      	ldr	r3, [pc, #268]	; (403bc0 <SysTick_Handler+0x14c>)
  403ab2:	681a      	ldr	r2, [r3, #0]
  403ab4:	4b44      	ldr	r3, [pc, #272]	; (403bc8 <SysTick_Handler+0x154>)
  403ab6:	fba3 1302 	umull	r1, r3, r3, r2
  403aba:	099b      	lsrs	r3, r3, #6
  403abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403ac0:	fb01 f303 	mul.w	r3, r1, r3
  403ac4:	1ad3      	subs	r3, r2, r3
  403ac6:	2b00      	cmp	r3, #0
  403ac8:	d101      	bne.n	403ace <SysTick_Handler+0x5a>
	{
		process_timers();
  403aca:	4b40      	ldr	r3, [pc, #256]	; (403bcc <SysTick_Handler+0x158>)
  403acc:	4798      	blx	r3
	}

	
	if (controls.buzzer_enable)
  403ace:	4b40      	ldr	r3, [pc, #256]	; (403bd0 <SysTick_Handler+0x15c>)
  403ad0:	78db      	ldrb	r3, [r3, #3]
  403ad2:	2b00      	cmp	r3, #0
  403ad4:	d03f      	beq.n	403b56 <SysTick_Handler+0xe2>
	{
		if (controls.buzzer_cycle == CYCLE_ON)
  403ad6:	4b3e      	ldr	r3, [pc, #248]	; (403bd0 <SysTick_Handler+0x15c>)
  403ad8:	791b      	ldrb	r3, [r3, #4]
  403ada:	2b01      	cmp	r3, #1
  403adc:	d127      	bne.n	403b2e <SysTick_Handler+0xba>
		{
			if (controls.buzzer_dur_count++ > controls.buzzer_on_dur)
  403ade:	4b3c      	ldr	r3, [pc, #240]	; (403bd0 <SysTick_Handler+0x15c>)
  403ae0:	88db      	ldrh	r3, [r3, #6]
  403ae2:	1c5a      	adds	r2, r3, #1
  403ae4:	b291      	uxth	r1, r2
  403ae6:	4a3a      	ldr	r2, [pc, #232]	; (403bd0 <SysTick_Handler+0x15c>)
  403ae8:	80d1      	strh	r1, [r2, #6]
  403aea:	4a39      	ldr	r2, [pc, #228]	; (403bd0 <SysTick_Handler+0x15c>)
  403aec:	8952      	ldrh	r2, [r2, #10]
  403aee:	4293      	cmp	r3, r2
  403af0:	d931      	bls.n	403b56 <SysTick_Handler+0xe2>
			{
				if (controls.buzzer_repeat_count++ >= controls.buzzer_repeat)
  403af2:	4b37      	ldr	r3, [pc, #220]	; (403bd0 <SysTick_Handler+0x15c>)
  403af4:	891b      	ldrh	r3, [r3, #8]
  403af6:	1c5a      	adds	r2, r3, #1
  403af8:	b291      	uxth	r1, r2
  403afa:	4a35      	ldr	r2, [pc, #212]	; (403bd0 <SysTick_Handler+0x15c>)
  403afc:	8111      	strh	r1, [r2, #8]
  403afe:	4a34      	ldr	r2, [pc, #208]	; (403bd0 <SysTick_Handler+0x15c>)
  403b00:	7b92      	ldrb	r2, [r2, #14]
  403b02:	b292      	uxth	r2, r2
  403b04:	4293      	cmp	r3, r2
  403b06:	d307      	bcc.n	403b18 <SysTick_Handler+0xa4>
				{
					controls.buzzer_enable = 0;
  403b08:	4b31      	ldr	r3, [pc, #196]	; (403bd0 <SysTick_Handler+0x15c>)
  403b0a:	2200      	movs	r2, #0
  403b0c:	70da      	strb	r2, [r3, #3]
					pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b0e:	4831      	ldr	r0, [pc, #196]	; (403bd4 <SysTick_Handler+0x160>)
  403b10:	2100      	movs	r1, #0
  403b12:	4b31      	ldr	r3, [pc, #196]	; (403bd8 <SysTick_Handler+0x164>)
  403b14:	4798      	blx	r3
  403b16:	e01e      	b.n	403b56 <SysTick_Handler+0xe2>
				}
				else
				{
					controls.buzzer_dur_count = 0;
  403b18:	4b2d      	ldr	r3, [pc, #180]	; (403bd0 <SysTick_Handler+0x15c>)
  403b1a:	2200      	movs	r2, #0
  403b1c:	80da      	strh	r2, [r3, #6]
					controls.buzzer_cycle = CYCLE_OFF;
  403b1e:	4b2c      	ldr	r3, [pc, #176]	; (403bd0 <SysTick_Handler+0x15c>)
  403b20:	2200      	movs	r2, #0
  403b22:	711a      	strb	r2, [r3, #4]
					pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b24:	482b      	ldr	r0, [pc, #172]	; (403bd4 <SysTick_Handler+0x160>)
  403b26:	2100      	movs	r1, #0
  403b28:	4b2b      	ldr	r3, [pc, #172]	; (403bd8 <SysTick_Handler+0x164>)
  403b2a:	4798      	blx	r3
  403b2c:	e013      	b.n	403b56 <SysTick_Handler+0xe2>
				}
			}
		}
		else
		{
			if (controls.buzzer_dur_count++ > controls.buzzer_off_dur)
  403b2e:	4b28      	ldr	r3, [pc, #160]	; (403bd0 <SysTick_Handler+0x15c>)
  403b30:	88db      	ldrh	r3, [r3, #6]
  403b32:	1c5a      	adds	r2, r3, #1
  403b34:	b291      	uxth	r1, r2
  403b36:	4a26      	ldr	r2, [pc, #152]	; (403bd0 <SysTick_Handler+0x15c>)
  403b38:	80d1      	strh	r1, [r2, #6]
  403b3a:	4a25      	ldr	r2, [pc, #148]	; (403bd0 <SysTick_Handler+0x15c>)
  403b3c:	8992      	ldrh	r2, [r2, #12]
  403b3e:	4293      	cmp	r3, r2
  403b40:	d909      	bls.n	403b56 <SysTick_Handler+0xe2>
			{
				controls.buzzer_dur_count = 0;
  403b42:	4b23      	ldr	r3, [pc, #140]	; (403bd0 <SysTick_Handler+0x15c>)
  403b44:	2200      	movs	r2, #0
  403b46:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_ON;
  403b48:	4b21      	ldr	r3, [pc, #132]	; (403bd0 <SysTick_Handler+0x15c>)
  403b4a:	2201      	movs	r2, #1
  403b4c:	711a      	strb	r2, [r3, #4]
				pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b4e:	4821      	ldr	r0, [pc, #132]	; (403bd4 <SysTick_Handler+0x160>)
  403b50:	2100      	movs	r1, #0
  403b52:	4b22      	ldr	r3, [pc, #136]	; (403bdc <SysTick_Handler+0x168>)
  403b54:	4798      	blx	r3
			}
		}
	}
	
	if (controls.solenoid_enable)
  403b56:	4b1e      	ldr	r3, [pc, #120]	; (403bd0 <SysTick_Handler+0x15c>)
  403b58:	7bdb      	ldrb	r3, [r3, #15]
  403b5a:	2b00      	cmp	r3, #0
  403b5c:	d02b      	beq.n	403bb6 <SysTick_Handler+0x142>
	{
		controls.solenoid_count++;
  403b5e:	4b1c      	ldr	r3, [pc, #112]	; (403bd0 <SysTick_Handler+0x15c>)
  403b60:	8a5b      	ldrh	r3, [r3, #18]
  403b62:	3301      	adds	r3, #1
  403b64:	b29a      	uxth	r2, r3
  403b66:	4b1a      	ldr	r3, [pc, #104]	; (403bd0 <SysTick_Handler+0x15c>)
  403b68:	825a      	strh	r2, [r3, #18]
		
		if (controls.solenoid_cycle == CYCLE_ON)
  403b6a:	4b19      	ldr	r3, [pc, #100]	; (403bd0 <SysTick_Handler+0x15c>)
  403b6c:	7c1b      	ldrb	r3, [r3, #16]
  403b6e:	2b01      	cmp	r3, #1
  403b70:	d112      	bne.n	403b98 <SysTick_Handler+0x124>
		{
			if (controls.solenoid_count > SOLENOID_ON_COUNT)
  403b72:	4b17      	ldr	r3, [pc, #92]	; (403bd0 <SysTick_Handler+0x15c>)
  403b74:	8a5b      	ldrh	r3, [r3, #18]
  403b76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403b7a:	d91c      	bls.n	403bb6 <SysTick_Handler+0x142>
			{
				controls.solenoid_count = 0;
  403b7c:	4b14      	ldr	r3, [pc, #80]	; (403bd0 <SysTick_Handler+0x15c>)
  403b7e:	2200      	movs	r2, #0
  403b80:	825a      	strh	r2, [r3, #18]
				controls.solenoid_cycle = CYCLE_OFF;
  403b82:	4b13      	ldr	r3, [pc, #76]	; (403bd0 <SysTick_Handler+0x15c>)
  403b84:	2200      	movs	r2, #0
  403b86:	741a      	strb	r2, [r3, #16]
				controls.solenoid_enable = 0; //solenoid is a one-shot
  403b88:	4b11      	ldr	r3, [pc, #68]	; (403bd0 <SysTick_Handler+0x15c>)
  403b8a:	2200      	movs	r2, #0
  403b8c:	73da      	strb	r2, [r3, #15]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  403b8e:	2015      	movs	r0, #21
  403b90:	2100      	movs	r1, #0
  403b92:	4b13      	ldr	r3, [pc, #76]	; (403be0 <SysTick_Handler+0x16c>)
  403b94:	4798      	blx	r3
  403b96:	e00e      	b.n	403bb6 <SysTick_Handler+0x142>
			}
		}
		else
		{
			if (controls.solenoid_count > SOLENOID_OFF_COUNT)
  403b98:	4b0d      	ldr	r3, [pc, #52]	; (403bd0 <SysTick_Handler+0x15c>)
  403b9a:	8a5b      	ldrh	r3, [r3, #18]
  403b9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403ba0:	d909      	bls.n	403bb6 <SysTick_Handler+0x142>
			{
				controls.solenoid_count = 0;
  403ba2:	4b0b      	ldr	r3, [pc, #44]	; (403bd0 <SysTick_Handler+0x15c>)
  403ba4:	2200      	movs	r2, #0
  403ba6:	825a      	strh	r2, [r3, #18]
				controls.solenoid_cycle = CYCLE_ON;
  403ba8:	4b09      	ldr	r3, [pc, #36]	; (403bd0 <SysTick_Handler+0x15c>)
  403baa:	2201      	movs	r2, #1
  403bac:	741a      	strb	r2, [r3, #16]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
  403bae:	2015      	movs	r0, #21
  403bb0:	2101      	movs	r1, #1
  403bb2:	4b0b      	ldr	r3, [pc, #44]	; (403be0 <SysTick_Handler+0x16c>)
  403bb4:	4798      	blx	r3
			}
			
		}
	}
}
  403bb6:	bd80      	pop	{r7, pc}
  403bb8:	20400b60 	.word	0x20400b60
  403bbc:	204009b4 	.word	0x204009b4
  403bc0:	204009a8 	.word	0x204009a8
  403bc4:	204009ac 	.word	0x204009ac
  403bc8:	10624dd3 	.word	0x10624dd3
  403bcc:	00403281 	.word	0x00403281
  403bd0:	20400b64 	.word	0x20400b64
  403bd4:	40020000 	.word	0x40020000
  403bd8:	00401ba5 	.word	0x00401ba5
  403bdc:	00401b81 	.word	0x00401b81
  403be0:	00403605 	.word	0x00403605

00403be4 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  403be4:	b580      	push	{r7, lr}
  403be6:	b082      	sub	sp, #8
  403be8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  403bea:	481b      	ldr	r0, [pc, #108]	; (403c58 <USART0_Handler+0x74>)
  403bec:	4b1b      	ldr	r3, [pc, #108]	; (403c5c <USART0_Handler+0x78>)
  403bee:	4798      	blx	r3
  403bf0:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  403bf2:	687a      	ldr	r2, [r7, #4]
  403bf4:	f240 2302 	movw	r3, #514	; 0x202
  403bf8:	4013      	ands	r3, r2
  403bfa:	2b00      	cmp	r3, #0
  403bfc:	d004      	beq.n	403c08 <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  403bfe:	4816      	ldr	r0, [pc, #88]	; (403c58 <USART0_Handler+0x74>)
  403c00:	f240 2102 	movw	r1, #514	; 0x202
  403c04:	4b16      	ldr	r3, [pc, #88]	; (403c60 <USART0_Handler+0x7c>)
  403c06:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  403c08:	4b16      	ldr	r3, [pc, #88]	; (403c64 <USART0_Handler+0x80>)
  403c0a:	781b      	ldrb	r3, [r3, #0]
  403c0c:	b2db      	uxtb	r3, r3
  403c0e:	2b02      	cmp	r3, #2
  403c10:	d11f      	bne.n	403c52 <USART0_Handler+0x6e>
  403c12:	1cfb      	adds	r3, r7, #3
  403c14:	4810      	ldr	r0, [pc, #64]	; (403c58 <USART0_Handler+0x74>)
  403c16:	4619      	mov	r1, r3
  403c18:	4b13      	ldr	r3, [pc, #76]	; (403c68 <USART0_Handler+0x84>)
  403c1a:	4798      	blx	r3
  403c1c:	4603      	mov	r3, r0
  403c1e:	2b00      	cmp	r3, #0
  403c20:	d117      	bne.n	403c52 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  403c22:	4b12      	ldr	r3, [pc, #72]	; (403c6c <USART0_Handler+0x88>)
  403c24:	681b      	ldr	r3, [r3, #0]
  403c26:	1c5a      	adds	r2, r3, #1
  403c28:	4910      	ldr	r1, [pc, #64]	; (403c6c <USART0_Handler+0x88>)
  403c2a:	600a      	str	r2, [r1, #0]
  403c2c:	78fa      	ldrb	r2, [r7, #3]
  403c2e:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  403c30:	4b0f      	ldr	r3, [pc, #60]	; (403c70 <USART0_Handler+0x8c>)
  403c32:	681b      	ldr	r3, [r3, #0]
  403c34:	3301      	adds	r3, #1
  403c36:	4a0e      	ldr	r2, [pc, #56]	; (403c70 <USART0_Handler+0x8c>)
  403c38:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  403c3a:	4b0d      	ldr	r3, [pc, #52]	; (403c70 <USART0_Handler+0x8c>)
  403c3c:	681b      	ldr	r3, [r3, #0]
  403c3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403c42:	d306      	bcc.n	403c52 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403c44:	4b07      	ldr	r3, [pc, #28]	; (403c64 <USART0_Handler+0x80>)
  403c46:	2203      	movs	r2, #3
  403c48:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403c4a:	4803      	ldr	r0, [pc, #12]	; (403c58 <USART0_Handler+0x74>)
  403c4c:	2101      	movs	r1, #1
  403c4e:	4b04      	ldr	r3, [pc, #16]	; (403c60 <USART0_Handler+0x7c>)
  403c50:	4798      	blx	r3
		}
	}
}
  403c52:	3708      	adds	r7, #8
  403c54:	46bd      	mov	sp, r7
  403c56:	bd80      	pop	{r7, pc}
  403c58:	40024000 	.word	0x40024000
  403c5c:	0040223d 	.word	0x0040223d
  403c60:	00402221 	.word	0x00402221
  403c64:	204009ad 	.word	0x204009ad
  403c68:	00402311 	.word	0x00402311
  403c6c:	20400008 	.word	0x20400008
  403c70:	204009b0 	.word	0x204009b0

00403c74 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
void configure_usart(void)
{
  403c74:	b5b0      	push	{r4, r5, r7, lr}
  403c76:	b086      	sub	sp, #24
  403c78:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403c7a:	4b14      	ldr	r3, [pc, #80]	; (403ccc <configure_usart+0x58>)
  403c7c:	463c      	mov	r4, r7
  403c7e:	461d      	mov	r5, r3
  403c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403c84:	e895 0003 	ldmia.w	r5, {r0, r1}
  403c88:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403c8c:	200d      	movs	r0, #13
  403c8e:	4b10      	ldr	r3, [pc, #64]	; (403cd0 <configure_usart+0x5c>)
  403c90:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  403c92:	4b10      	ldr	r3, [pc, #64]	; (403cd4 <configure_usart+0x60>)
  403c94:	4798      	blx	r3
  403c96:	4602      	mov	r2, r0
  403c98:	463b      	mov	r3, r7
  403c9a:	480f      	ldr	r0, [pc, #60]	; (403cd8 <configure_usart+0x64>)
  403c9c:	4619      	mov	r1, r3
  403c9e:	4b0f      	ldr	r3, [pc, #60]	; (403cdc <configure_usart+0x68>)
  403ca0:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  403ca2:	480d      	ldr	r0, [pc, #52]	; (403cd8 <configure_usart+0x64>)
  403ca4:	2104      	movs	r1, #4
  403ca6:	4b0e      	ldr	r3, [pc, #56]	; (403ce0 <configure_usart+0x6c>)
  403ca8:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  403caa:	480b      	ldr	r0, [pc, #44]	; (403cd8 <configure_usart+0x64>)
  403cac:	f04f 31ff 	mov.w	r1, #4294967295
  403cb0:	4b0c      	ldr	r3, [pc, #48]	; (403ce4 <configure_usart+0x70>)
  403cb2:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  403cb4:	4808      	ldr	r0, [pc, #32]	; (403cd8 <configure_usart+0x64>)
  403cb6:	4b0c      	ldr	r3, [pc, #48]	; (403ce8 <configure_usart+0x74>)
  403cb8:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403cba:	4807      	ldr	r0, [pc, #28]	; (403cd8 <configure_usart+0x64>)
  403cbc:	4b0b      	ldr	r3, [pc, #44]	; (403cec <configure_usart+0x78>)
  403cbe:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  403cc0:	200d      	movs	r0, #13
  403cc2:	4b0b      	ldr	r3, [pc, #44]	; (403cf0 <configure_usart+0x7c>)
  403cc4:	4798      	blx	r3
}
  403cc6:	3718      	adds	r7, #24
  403cc8:	46bd      	mov	sp, r7
  403cca:	bdb0      	pop	{r4, r5, r7, pc}
  403ccc:	0040cc5c 	.word	0x0040cc5c
  403cd0:	004035ed 	.word	0x004035ed
  403cd4:	004035c5 	.word	0x004035c5
  403cd8:	40024000 	.word	0x40024000
  403cdc:	00402105 	.word	0x00402105
  403ce0:	004021b9 	.word	0x004021b9
  403ce4:	00402221 	.word	0x00402221
  403ce8:	00402189 	.word	0x00402189
  403cec:	004021d5 	.word	0x004021d5
  403cf0:	00403399 	.word	0x00403399

00403cf4 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
void configure_systick(void)
{
  403cf4:	b580      	push	{r7, lr}
  403cf6:	b082      	sub	sp, #8
  403cf8:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  403cfa:	4b0a      	ldr	r3, [pc, #40]	; (403d24 <configure_systick+0x30>)
  403cfc:	4798      	blx	r3
  403cfe:	4602      	mov	r2, r0
  403d00:	4b09      	ldr	r3, [pc, #36]	; (403d28 <configure_systick+0x34>)
  403d02:	fba3 2302 	umull	r2, r3, r3, r2
  403d06:	099b      	lsrs	r3, r3, #6
  403d08:	4618      	mov	r0, r3
  403d0a:	4b08      	ldr	r3, [pc, #32]	; (403d2c <configure_systick+0x38>)
  403d0c:	4798      	blx	r3
  403d0e:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  403d10:	687b      	ldr	r3, [r7, #4]
  403d12:	2b00      	cmp	r3, #0
  403d14:	d003      	beq.n	403d1e <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  403d16:	4806      	ldr	r0, [pc, #24]	; (403d30 <configure_systick+0x3c>)
  403d18:	4b06      	ldr	r3, [pc, #24]	; (403d34 <configure_systick+0x40>)
  403d1a:	4798      	blx	r3
		while (1) {
		}
  403d1c:	e7fe      	b.n	403d1c <configure_systick+0x28>
	}
}
  403d1e:	3708      	adds	r7, #8
  403d20:	46bd      	mov	sp, r7
  403d22:	bd80      	pop	{r7, pc}
  403d24:	004035c5 	.word	0x004035c5
  403d28:	10624dd3 	.word	0x10624dd3
  403d2c:	00403485 	.word	0x00403485
  403d30:	0040cc74 	.word	0x0040cc74
  403d34:	004074e1 	.word	0x004074e1

00403d38 <configure_console>:

/**
 *  Configure UART for debug message output.
 */
void configure_console(void)
{
  403d38:	b590      	push	{r4, r7, lr}
  403d3a:	b085      	sub	sp, #20
  403d3c:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403d3e:	4b08      	ldr	r3, [pc, #32]	; (403d60 <configure_console+0x28>)
  403d40:	463c      	mov	r4, r7
  403d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403d48:	2007      	movs	r0, #7
  403d4a:	4b06      	ldr	r3, [pc, #24]	; (403d64 <configure_console+0x2c>)
  403d4c:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403d4e:	463b      	mov	r3, r7
  403d50:	4805      	ldr	r0, [pc, #20]	; (403d68 <configure_console+0x30>)
  403d52:	4619      	mov	r1, r3
  403d54:	4b05      	ldr	r3, [pc, #20]	; (403d6c <configure_console+0x34>)
  403d56:	4798      	blx	r3
}
  403d58:	3714      	adds	r7, #20
  403d5a:	46bd      	mov	sp, r7
  403d5c:	bd90      	pop	{r4, r7, pc}
  403d5e:	bf00      	nop
  403d60:	0040cc98 	.word	0x0040cc98
  403d64:	004035ed 	.word	0x004035ed
  403d68:	400e0800 	.word	0x400e0800
  403d6c:	004039e1 	.word	0x004039e1

00403d70 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403d70:	b580      	push	{r7, lr}
  403d72:	b082      	sub	sp, #8
  403d74:	af00      	add	r7, sp, #0
  403d76:	6078      	str	r0, [r7, #4]
  403d78:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403d7a:	e013      	b.n	403da4 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403d7c:	687b      	ldr	r3, [r7, #4]
  403d7e:	781b      	ldrb	r3, [r3, #0]
  403d80:	4810      	ldr	r0, [pc, #64]	; (403dc4 <func_transmit+0x54>)
  403d82:	4619      	mov	r1, r3
  403d84:	4b10      	ldr	r3, [pc, #64]	; (403dc8 <func_transmit+0x58>)
  403d86:	4798      	blx	r3
  403d88:	4603      	mov	r3, r0
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d10a      	bne.n	403da4 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  403d8e:	480d      	ldr	r0, [pc, #52]	; (403dc4 <func_transmit+0x54>)
  403d90:	f240 2102 	movw	r1, #514	; 0x202
  403d94:	4b0d      	ldr	r3, [pc, #52]	; (403dcc <func_transmit+0x5c>)
  403d96:	4798      	blx	r3
			ulsize--;
  403d98:	683b      	ldr	r3, [r7, #0]
  403d9a:	3b01      	subs	r3, #1
  403d9c:	603b      	str	r3, [r7, #0]
			p_buff++;
  403d9e:	687b      	ldr	r3, [r7, #4]
  403da0:	3301      	adds	r3, #1
  403da2:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  403da4:	683b      	ldr	r3, [r7, #0]
  403da6:	2b00      	cmp	r3, #0
  403da8:	d1e8      	bne.n	403d7c <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  403daa:	bf00      	nop
  403dac:	4805      	ldr	r0, [pc, #20]	; (403dc4 <func_transmit+0x54>)
  403dae:	4b08      	ldr	r3, [pc, #32]	; (403dd0 <func_transmit+0x60>)
  403db0:	4798      	blx	r3
  403db2:	4603      	mov	r3, r0
  403db4:	2b00      	cmp	r3, #0
  403db6:	d0f9      	beq.n	403dac <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  403db8:	2300      	movs	r3, #0
}
  403dba:	4618      	mov	r0, r3
  403dbc:	3708      	adds	r7, #8
  403dbe:	46bd      	mov	sp, r7
  403dc0:	bd80      	pop	{r7, pc}
  403dc2:	bf00      	nop
  403dc4:	40024000 	.word	0x40024000
  403dc8:	004022dd 	.word	0x004022dd
  403dcc:	00402205 	.word	0x00402205
  403dd0:	0040228d 	.word	0x0040228d

00403dd4 <twi_init>:
	SHELF_ACTIVE
};

void twi_init(void);
void twi_init(void)
{
  403dd4:	b580      	push	{r7, lr}
  403dd6:	b084      	sub	sp, #16
  403dd8:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  403dda:	2013      	movs	r0, #19
  403ddc:	4b09      	ldr	r3, [pc, #36]	; (403e04 <twi_init+0x30>)
  403dde:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  403de0:	4b09      	ldr	r3, [pc, #36]	; (403e08 <twi_init+0x34>)
  403de2:	4798      	blx	r3
  403de4:	4603      	mov	r3, r0
  403de6:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  403de8:	4b08      	ldr	r3, [pc, #32]	; (403e0c <twi_init+0x38>)
  403dea:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  403dec:	1d3b      	adds	r3, r7, #4
  403dee:	4808      	ldr	r0, [pc, #32]	; (403e10 <twi_init+0x3c>)
  403df0:	4619      	mov	r1, r3
  403df2:	4b08      	ldr	r3, [pc, #32]	; (403e14 <twi_init+0x40>)
  403df4:	4798      	blx	r3
  403df6:	4603      	mov	r3, r0
  403df8:	2b00      	cmp	r3, #0
  403dfa:	d000      	beq.n	403dfe <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403dfc:	e7fe      	b.n	403dfc <twi_init+0x28>
	}
}
  403dfe:	3710      	adds	r7, #16
  403e00:	46bd      	mov	sp, r7
  403e02:	bd80      	pop	{r7, pc}
  403e04:	004016d1 	.word	0x004016d1
  403e08:	004035c5 	.word	0x004035c5
  403e0c:	00061a80 	.word	0x00061a80
  403e10:	40018000 	.word	0x40018000
  403e14:	00401c65 	.word	0x00401c65

00403e18 <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  403e18:	b580      	push	{r7, lr}
  403e1a:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  403e1c:	4804      	ldr	r0, [pc, #16]	; (403e30 <afec0_data_ready+0x18>)
  403e1e:	4b05      	ldr	r3, [pc, #20]	; (403e34 <afec0_data_ready+0x1c>)
  403e20:	4798      	blx	r3
  403e22:	4602      	mov	r2, r0
  403e24:	4b04      	ldr	r3, [pc, #16]	; (403e38 <afec0_data_ready+0x20>)
  403e26:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403e28:	4b04      	ldr	r3, [pc, #16]	; (403e3c <afec0_data_ready+0x24>)
  403e2a:	2201      	movs	r2, #1
  403e2c:	701a      	strb	r2, [r3, #0]
}
  403e2e:	bd80      	pop	{r7, pc}
  403e30:	4003c000 	.word	0x4003c000
  403e34:	00403511 	.word	0x00403511
  403e38:	20401364 	.word	0x20401364
  403e3c:	204009b8 	.word	0x204009b8

00403e40 <afec1_data_ready>:

static void afec1_data_ready(void)
{
  403e40:	b580      	push	{r7, lr}
  403e42:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  403e44:	4804      	ldr	r0, [pc, #16]	; (403e58 <afec1_data_ready+0x18>)
  403e46:	4b05      	ldr	r3, [pc, #20]	; (403e5c <afec1_data_ready+0x1c>)
  403e48:	4798      	blx	r3
  403e4a:	4602      	mov	r2, r0
  403e4c:	4b04      	ldr	r3, [pc, #16]	; (403e60 <afec1_data_ready+0x20>)
  403e4e:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403e50:	4b04      	ldr	r3, [pc, #16]	; (403e64 <afec1_data_ready+0x24>)
  403e52:	2201      	movs	r2, #1
  403e54:	701a      	strb	r2, [r3, #0]
}
  403e56:	bd80      	pop	{r7, pc}
  403e58:	40064000 	.word	0x40064000
  403e5c:	00403511 	.word	0x00403511
  403e60:	20400b20 	.word	0x20400b20
  403e64:	204009b8 	.word	0x204009b8

00403e68 <init_adc>:



void init_adc(void)
{
  403e68:	b590      	push	{r4, r7, lr}
  403e6a:	b089      	sub	sp, #36	; 0x24
  403e6c:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;
	struct afec_ch_config afec_ch_cfg;

	
	afec_enable(AFEC0);
  403e6e:	4827      	ldr	r0, [pc, #156]	; (403f0c <init_adc+0xa4>)
  403e70:	4b27      	ldr	r3, [pc, #156]	; (403f10 <init_adc+0xa8>)
  403e72:	4798      	blx	r3
	afec_enable(AFEC1);
  403e74:	4827      	ldr	r0, [pc, #156]	; (403f14 <init_adc+0xac>)
  403e76:	4b26      	ldr	r3, [pc, #152]	; (403f10 <init_adc+0xa8>)
  403e78:	4798      	blx	r3

	afec_get_config_defaults(&afec_cfg);
  403e7a:	f107 0308 	add.w	r3, r7, #8
  403e7e:	4618      	mov	r0, r3
  403e80:	4b25      	ldr	r3, [pc, #148]	; (403f18 <init_adc+0xb0>)
  403e82:	4798      	blx	r3
	afec_cfg.resolution = AFEC_12_BITS;
  403e84:	2300      	movs	r3, #0
  403e86:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  403e88:	f107 0308 	add.w	r3, r7, #8
  403e8c:	481f      	ldr	r0, [pc, #124]	; (403f0c <init_adc+0xa4>)
  403e8e:	4619      	mov	r1, r3
  403e90:	4b22      	ldr	r3, [pc, #136]	; (403f1c <init_adc+0xb4>)
  403e92:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  403e94:	f107 0308 	add.w	r3, r7, #8
  403e98:	481e      	ldr	r0, [pc, #120]	; (403f14 <init_adc+0xac>)
  403e9a:	4619      	mov	r1, r3
  403e9c:	4b1f      	ldr	r3, [pc, #124]	; (403f1c <init_adc+0xb4>)
  403e9e:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403ea0:	1d3b      	adds	r3, r7, #4
  403ea2:	4618      	mov	r0, r3
  403ea4:	4b1e      	ldr	r3, [pc, #120]	; (403f20 <init_adc+0xb8>)
  403ea6:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  403ea8:	2303      	movs	r3, #3
  403eaa:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  403eac:	1d3b      	adds	r3, r7, #4
  403eae:	4819      	ldr	r0, [pc, #100]	; (403f14 <init_adc+0xac>)
  403eb0:	2109      	movs	r1, #9
  403eb2:	461a      	mov	r2, r3
  403eb4:	4b1b      	ldr	r3, [pc, #108]	; (403f24 <init_adc+0xbc>)
  403eb6:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  403eb8:	1d3b      	adds	r3, r7, #4
  403eba:	4814      	ldr	r0, [pc, #80]	; (403f0c <init_adc+0xa4>)
  403ebc:	2104      	movs	r1, #4
  403ebe:	461a      	mov	r2, r3
  403ec0:	4b18      	ldr	r3, [pc, #96]	; (403f24 <init_adc+0xbc>)
  403ec2:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_4, &afec_ch_cfg);
  403ec4:	1d3b      	adds	r3, r7, #4
  403ec6:	4813      	ldr	r0, [pc, #76]	; (403f14 <init_adc+0xac>)
  403ec8:	2104      	movs	r1, #4
  403eca:	461a      	mov	r2, r3
  403ecc:	4b15      	ldr	r3, [pc, #84]	; (403f24 <init_adc+0xbc>)
  403ece:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_5, &afec_ch_cfg);
  403ed0:	1d3b      	adds	r3, r7, #4
  403ed2:	4810      	ldr	r0, [pc, #64]	; (403f14 <init_adc+0xac>)
  403ed4:	2105      	movs	r1, #5
  403ed6:	461a      	mov	r2, r3
  403ed8:	4b12      	ldr	r3, [pc, #72]	; (403f24 <init_adc+0xbc>)
  403eda:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  403edc:	480b      	ldr	r0, [pc, #44]	; (403f0c <init_adc+0xa4>)
  403ede:	2100      	movs	r1, #0
  403ee0:	4b11      	ldr	r3, [pc, #68]	; (403f28 <init_adc+0xc0>)
  403ee2:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  403ee4:	480b      	ldr	r0, [pc, #44]	; (403f14 <init_adc+0xac>)
  403ee6:	2100      	movs	r1, #0
  403ee8:	4b0f      	ldr	r3, [pc, #60]	; (403f28 <init_adc+0xc0>)
  403eea:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  403eec:	4807      	ldr	r0, [pc, #28]	; (403f0c <init_adc+0xa4>)
  403eee:	210c      	movs	r1, #12
  403ef0:	4a0e      	ldr	r2, [pc, #56]	; (403f2c <init_adc+0xc4>)
  403ef2:	2301      	movs	r3, #1
  403ef4:	4c0e      	ldr	r4, [pc, #56]	; (403f30 <init_adc+0xc8>)
  403ef6:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  403ef8:	4806      	ldr	r0, [pc, #24]	; (403f14 <init_adc+0xac>)
  403efa:	210c      	movs	r1, #12
  403efc:	4a0d      	ldr	r2, [pc, #52]	; (403f34 <init_adc+0xcc>)
  403efe:	2301      	movs	r3, #1
  403f00:	4c0b      	ldr	r4, [pc, #44]	; (403f30 <init_adc+0xc8>)
  403f02:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  403f04:	3724      	adds	r7, #36	; 0x24
  403f06:	46bd      	mov	sp, r7
  403f08:	bd90      	pop	{r4, r7, pc}
  403f0a:	bf00      	nop
  403f0c:	4003c000 	.word	0x4003c000
  403f10:	00401291 	.word	0x00401291
  403f14:	40064000 	.word	0x40064000
  403f18:	00400f8d 	.word	0x00400f8d
  403f1c:	0040100d 	.word	0x0040100d
  403f20:	00400fed 	.word	0x00400fed
  403f24:	00400efd 	.word	0x00400efd
  403f28:	004034cd 	.word	0x004034cd
  403f2c:	00403e19 	.word	0x00403e19
  403f30:	00401085 	.word	0x00401085
  403f34:	00403e41 	.word	0x00403e41

00403f38 <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  403f38:	b580      	push	{r7, lr}
  403f3a:	b082      	sub	sp, #8
  403f3c:	af00      	add	r7, sp, #0
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  403f3e:	481e      	ldr	r0, [pc, #120]	; (403fb8 <PWM0_Handler+0x80>)
  403f40:	4b1e      	ldr	r3, [pc, #120]	; (403fbc <PWM0_Handler+0x84>)
  403f42:	4798      	blx	r3
  403f44:	6078      	str	r0, [r7, #4]

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  403f46:	687b      	ldr	r3, [r7, #4]
  403f48:	f003 0301 	and.w	r3, r3, #1
  403f4c:	2b00      	cmp	r3, #0
  403f4e:	d030      	beq.n	403fb2 <PWM0_Handler+0x7a>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  403f50:	4b1b      	ldr	r3, [pc, #108]	; (403fc0 <PWM0_Handler+0x88>)
  403f52:	681b      	ldr	r3, [r3, #0]
  403f54:	3301      	adds	r3, #1
  403f56:	4a1a      	ldr	r2, [pc, #104]	; (403fc0 <PWM0_Handler+0x88>)
  403f58:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  403f5a:	4b19      	ldr	r3, [pc, #100]	; (403fc0 <PWM0_Handler+0x88>)
  403f5c:	681b      	ldr	r3, [r3, #0]
  403f5e:	2b28      	cmp	r3, #40	; 0x28
  403f60:	d127      	bne.n	403fb2 <PWM0_Handler+0x7a>
			/* Fade in */
			if (fade_in) {
  403f62:	4b18      	ldr	r3, [pc, #96]	; (403fc4 <PWM0_Handler+0x8c>)
  403f64:	781b      	ldrb	r3, [r3, #0]
  403f66:	2b00      	cmp	r3, #0
  403f68:	d00c      	beq.n	403f84 <PWM0_Handler+0x4c>
				ul_duty++;
  403f6a:	4b17      	ldr	r3, [pc, #92]	; (403fc8 <PWM0_Handler+0x90>)
  403f6c:	681b      	ldr	r3, [r3, #0]
  403f6e:	3301      	adds	r3, #1
  403f70:	4a15      	ldr	r2, [pc, #84]	; (403fc8 <PWM0_Handler+0x90>)
  403f72:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  403f74:	4b14      	ldr	r3, [pc, #80]	; (403fc8 <PWM0_Handler+0x90>)
  403f76:	681b      	ldr	r3, [r3, #0]
  403f78:	2b64      	cmp	r3, #100	; 0x64
  403f7a:	d10f      	bne.n	403f9c <PWM0_Handler+0x64>
					fade_in = 0;
  403f7c:	4b11      	ldr	r3, [pc, #68]	; (403fc4 <PWM0_Handler+0x8c>)
  403f7e:	2200      	movs	r2, #0
  403f80:	701a      	strb	r2, [r3, #0]
  403f82:	e00b      	b.n	403f9c <PWM0_Handler+0x64>
					}
				} else {
				/* Fade out */
				ul_duty--;
  403f84:	4b10      	ldr	r3, [pc, #64]	; (403fc8 <PWM0_Handler+0x90>)
  403f86:	681b      	ldr	r3, [r3, #0]
  403f88:	3b01      	subs	r3, #1
  403f8a:	4a0f      	ldr	r2, [pc, #60]	; (403fc8 <PWM0_Handler+0x90>)
  403f8c:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  403f8e:	4b0e      	ldr	r3, [pc, #56]	; (403fc8 <PWM0_Handler+0x90>)
  403f90:	681b      	ldr	r3, [r3, #0]
  403f92:	2b32      	cmp	r3, #50	; 0x32
  403f94:	d102      	bne.n	403f9c <PWM0_Handler+0x64>
					fade_in = 1;
  403f96:	4b0b      	ldr	r3, [pc, #44]	; (403fc4 <PWM0_Handler+0x8c>)
  403f98:	2201      	movs	r2, #1
  403f9a:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  403f9c:	4b08      	ldr	r3, [pc, #32]	; (403fc0 <PWM0_Handler+0x88>)
  403f9e:	2200      	movs	r2, #0
  403fa0:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403fa2:	4b0a      	ldr	r3, [pc, #40]	; (403fcc <PWM0_Handler+0x94>)
  403fa4:	2200      	movs	r2, #0
  403fa6:	601a      	str	r2, [r3, #0]
//jsi 16feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
					pwm_channel_update_duty(PWM0, &g_pwm_channel_led, (PERIOD_VALUE/2)); //jsi 16feb16 just fixed for now
  403fa8:	4803      	ldr	r0, [pc, #12]	; (403fb8 <PWM0_Handler+0x80>)
  403faa:	4908      	ldr	r1, [pc, #32]	; (403fcc <PWM0_Handler+0x94>)
  403fac:	2232      	movs	r2, #50	; 0x32
  403fae:	4b08      	ldr	r3, [pc, #32]	; (403fd0 <PWM0_Handler+0x98>)
  403fb0:	4798      	blx	r3
//jsi 15feb16			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
//jsi 15feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
		}
	}
}
  403fb2:	3708      	adds	r7, #8
  403fb4:	46bd      	mov	sp, r7
  403fb6:	bd80      	pop	{r7, pc}
  403fb8:	40020000 	.word	0x40020000
  403fbc:	00401bc9 	.word	0x00401bc9
  403fc0:	204009bc 	.word	0x204009bc
  403fc4:	2040000c 	.word	0x2040000c
  403fc8:	20400010 	.word	0x20400010
  403fcc:	20400b24 	.word	0x20400b24
  403fd0:	00401b39 	.word	0x00401b39

00403fd4 <init_pwm>:



void init_pwm(void)
{
  403fd4:	b580      	push	{r7, lr}
  403fd6:	b084      	sub	sp, #16
  403fd8:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  403fda:	201f      	movs	r0, #31
  403fdc:	4b30      	ldr	r3, [pc, #192]	; (4040a0 <init_pwm+0xcc>)
  403fde:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403fe0:	4830      	ldr	r0, [pc, #192]	; (4040a4 <init_pwm+0xd0>)
  403fe2:	2100      	movs	r1, #0
  403fe4:	4b30      	ldr	r3, [pc, #192]	; (4040a8 <init_pwm+0xd4>)
  403fe6:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  403fe8:	482e      	ldr	r0, [pc, #184]	; (4040a4 <init_pwm+0xd0>)
  403fea:	2101      	movs	r1, #1
  403fec:	4b2e      	ldr	r3, [pc, #184]	; (4040a8 <init_pwm+0xd4>)
  403fee:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403ff0:	4b2e      	ldr	r3, [pc, #184]	; (4040ac <init_pwm+0xd8>)
  403ff2:	607b      	str	r3, [r7, #4]
  403ff4:	2300      	movs	r3, #0
  403ff6:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  403ff8:	4b2d      	ldr	r3, [pc, #180]	; (4040b0 <init_pwm+0xdc>)
  403ffa:	4798      	blx	r3
  403ffc:	4603      	mov	r3, r0
	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403ffe:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM0, &clock_setting);
  404000:	1d3b      	adds	r3, r7, #4
  404002:	4828      	ldr	r0, [pc, #160]	; (4040a4 <init_pwm+0xd0>)
  404004:	4619      	mov	r1, r3
  404006:	4b2b      	ldr	r3, [pc, #172]	; (4040b4 <init_pwm+0xe0>)
  404008:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  40400a:	4b2b      	ldr	r3, [pc, #172]	; (4040b8 <init_pwm+0xe4>)
  40400c:	2200      	movs	r2, #0
  40400e:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  404010:	4b29      	ldr	r3, [pc, #164]	; (4040b8 <init_pwm+0xe4>)
  404012:	2200      	movs	r2, #0
  404014:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  404016:	4b28      	ldr	r3, [pc, #160]	; (4040b8 <init_pwm+0xe4>)
  404018:	220b      	movs	r2, #11
  40401a:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  40401c:	4b26      	ldr	r3, [pc, #152]	; (4040b8 <init_pwm+0xe4>)
  40401e:	2264      	movs	r2, #100	; 0x64
  404020:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  404022:	4b25      	ldr	r3, [pc, #148]	; (4040b8 <init_pwm+0xe4>)
  404024:	2232      	movs	r2, #50	; 0x32
  404026:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  404028:	4b23      	ldr	r3, [pc, #140]	; (4040b8 <init_pwm+0xe4>)
  40402a:	2200      	movs	r2, #0
  40402c:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  40402e:	481d      	ldr	r0, [pc, #116]	; (4040a4 <init_pwm+0xd0>)
  404030:	4921      	ldr	r1, [pc, #132]	; (4040b8 <init_pwm+0xe4>)
  404032:	4b22      	ldr	r3, [pc, #136]	; (4040bc <init_pwm+0xe8>)
  404034:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  404036:	481b      	ldr	r0, [pc, #108]	; (4040a4 <init_pwm+0xd0>)
  404038:	2100      	movs	r1, #0
  40403a:	2200      	movs	r2, #0
  40403c:	4b20      	ldr	r3, [pc, #128]	; (4040c0 <init_pwm+0xec>)
  40403e:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  404040:	4b1d      	ldr	r3, [pc, #116]	; (4040b8 <init_pwm+0xe4>)
  404042:	f44f 7280 	mov.w	r2, #256	; 0x100
  404046:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  404048:	4b1b      	ldr	r3, [pc, #108]	; (4040b8 <init_pwm+0xe4>)
  40404a:	2201      	movs	r2, #1
  40404c:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  40404e:	4b1a      	ldr	r3, [pc, #104]	; (4040b8 <init_pwm+0xe4>)
  404050:	220b      	movs	r2, #11
  404052:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  404054:	4b18      	ldr	r3, [pc, #96]	; (4040b8 <init_pwm+0xe4>)
  404056:	2264      	movs	r2, #100	; 0x64
  404058:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  40405a:	4b17      	ldr	r3, [pc, #92]	; (4040b8 <init_pwm+0xe4>)
  40405c:	2232      	movs	r2, #50	; 0x32
  40405e:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  404060:	4b15      	ldr	r3, [pc, #84]	; (4040b8 <init_pwm+0xe4>)
  404062:	2201      	movs	r2, #1
  404064:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  404066:	480f      	ldr	r0, [pc, #60]	; (4040a4 <init_pwm+0xd0>)
  404068:	4913      	ldr	r1, [pc, #76]	; (4040b8 <init_pwm+0xe4>)
  40406a:	4b14      	ldr	r3, [pc, #80]	; (4040bc <init_pwm+0xe8>)
  40406c:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  40406e:	480d      	ldr	r0, [pc, #52]	; (4040a4 <init_pwm+0xd0>)
  404070:	2101      	movs	r1, #1
  404072:	2200      	movs	r2, #0
  404074:	4b13      	ldr	r3, [pc, #76]	; (4040c4 <init_pwm+0xf0>)
  404076:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  404078:	201f      	movs	r0, #31
  40407a:	4b13      	ldr	r3, [pc, #76]	; (4040c8 <init_pwm+0xf4>)
  40407c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  40407e:	201f      	movs	r0, #31
  404080:	4b12      	ldr	r3, [pc, #72]	; (4040cc <init_pwm+0xf8>)
  404082:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  404084:	201f      	movs	r0, #31
  404086:	2100      	movs	r1, #0
  404088:	4b11      	ldr	r3, [pc, #68]	; (4040d0 <init_pwm+0xfc>)
  40408a:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  40408c:	201f      	movs	r0, #31
  40408e:	4b11      	ldr	r3, [pc, #68]	; (4040d4 <init_pwm+0x100>)
  404090:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  404092:	4804      	ldr	r0, [pc, #16]	; (4040a4 <init_pwm+0xd0>)
  404094:	2100      	movs	r1, #0
  404096:	4b10      	ldr	r3, [pc, #64]	; (4040d8 <init_pwm+0x104>)
  404098:	4798      	blx	r3
//jsi 15feb16	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);

}
  40409a:	3710      	adds	r7, #16
  40409c:	46bd      	mov	sp, r7
  40409e:	bd80      	pop	{r7, pc}
  4040a0:	004016d1 	.word	0x004016d1
  4040a4:	40020000 	.word	0x40020000
  4040a8:	00401ba5 	.word	0x00401ba5
  4040ac:	00030d40 	.word	0x00030d40
  4040b0:	004035c5 	.word	0x004035c5
  4040b4:	004017d1 	.word	0x004017d1
  4040b8:	20400b24 	.word	0x20400b24
  4040bc:	00401851 	.word	0x00401851
  4040c0:	00401be1 	.word	0x00401be1
  4040c4:	00401c11 	.word	0x00401c11
  4040c8:	004033c9 	.word	0x004033c9
  4040cc:	004033fd 	.word	0x004033fd
  4040d0:	00403431 	.word	0x00403431
  4040d4:	00403399 	.word	0x00403399
  4040d8:	00401b81 	.word	0x00401b81

004040dc <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4040dc:	b480      	push	{r7}
  4040de:	b083      	sub	sp, #12
  4040e0:	af00      	add	r7, sp, #0
  4040e2:	6078      	str	r0, [r7, #4]
  4040e4:	460b      	mov	r3, r1
  4040e6:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4040e8:	370c      	adds	r7, #12
  4040ea:	46bd      	mov	sp, r7
  4040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040f0:	4770      	bx	lr
  4040f2:	bf00      	nop

004040f4 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  4040f4:	b480      	push	{r7}
  4040f6:	b083      	sub	sp, #12
  4040f8:	af00      	add	r7, sp, #0
  4040fa:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  4040fc:	687b      	ldr	r3, [r7, #4]
  4040fe:	2202      	movs	r2, #2
  404100:	601a      	str	r2, [r3, #0]
}
  404102:	370c      	adds	r7, #12
  404104:	46bd      	mov	sp, r7
  404106:	f85d 7b04 	ldr.w	r7, [sp], #4
  40410a:	4770      	bx	lr

0040410c <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  40410c:	b580      	push	{r7, lr}
  40410e:	b082      	sub	sp, #8
  404110:	af00      	add	r7, sp, #0
  404112:	6078      	str	r0, [r7, #4]
  404114:	460b      	mov	r3, r1
  404116:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  404118:	887b      	ldrh	r3, [r7, #2]
  40411a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40411e:	4293      	cmp	r3, r2
  404120:	d004      	beq.n	40412c <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  404122:	887b      	ldrh	r3, [r7, #2]
  404124:	6878      	ldr	r0, [r7, #4]
  404126:	4619      	mov	r1, r3
  404128:	4b09      	ldr	r3, [pc, #36]	; (404150 <afec_channel_enable+0x44>)
  40412a:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40412c:	887b      	ldrh	r3, [r7, #2]
  40412e:	f640 72ff 	movw	r2, #4095	; 0xfff
  404132:	4293      	cmp	r3, r2
  404134:	d005      	beq.n	404142 <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  404136:	887b      	ldrh	r3, [r7, #2]
  404138:	2201      	movs	r2, #1
  40413a:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40413e:	461a      	mov	r2, r3
  404140:	e001      	b.n	404146 <afec_channel_enable+0x3a>
  404142:	f640 72ff 	movw	r2, #4095	; 0xfff
  404146:	687b      	ldr	r3, [r7, #4]
  404148:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  40414a:	3708      	adds	r7, #8
  40414c:	46bd      	mov	sp, r7
  40414e:	bd80      	pop	{r7, pc}
  404150:	004040dd 	.word	0x004040dd

00404154 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  404154:	b580      	push	{r7, lr}
  404156:	b082      	sub	sp, #8
  404158:	af00      	add	r7, sp, #0
  40415a:	6078      	str	r0, [r7, #4]
  40415c:	460b      	mov	r3, r1
  40415e:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  404160:	887b      	ldrh	r3, [r7, #2]
  404162:	f640 72ff 	movw	r2, #4095	; 0xfff
  404166:	4293      	cmp	r3, r2
  404168:	d004      	beq.n	404174 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40416a:	887b      	ldrh	r3, [r7, #2]
  40416c:	6878      	ldr	r0, [r7, #4]
  40416e:	4619      	mov	r1, r3
  404170:	4b09      	ldr	r3, [pc, #36]	; (404198 <afec_channel_disable+0x44>)
  404172:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  404174:	887b      	ldrh	r3, [r7, #2]
  404176:	f640 72ff 	movw	r2, #4095	; 0xfff
  40417a:	4293      	cmp	r3, r2
  40417c:	d005      	beq.n	40418a <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40417e:	887b      	ldrh	r3, [r7, #2]
  404180:	2201      	movs	r2, #1
  404182:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  404186:	461a      	mov	r2, r3
  404188:	e001      	b.n	40418e <afec_channel_disable+0x3a>
  40418a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40418e:	687b      	ldr	r3, [r7, #4]
  404190:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  404192:	3708      	adds	r7, #8
  404194:	46bd      	mov	sp, r7
  404196:	bd80      	pop	{r7, pc}
  404198:	004040dd 	.word	0x004040dd

0040419c <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  40419c:	b480      	push	{r7}
  40419e:	b08d      	sub	sp, #52	; 0x34
  4041a0:	af00      	add	r7, sp, #0
  4041a2:	6078      	str	r0, [r7, #4]
  4041a4:	460b      	mov	r3, r1
  4041a6:	70fb      	strb	r3, [r7, #3]
  4041a8:	687b      	ldr	r3, [r7, #4]
  4041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  4041ac:	78fb      	ldrb	r3, [r7, #3]
  4041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041b4:	627b      	str	r3, [r7, #36]	; 0x24
  4041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4041b8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4041ba:	6a3b      	ldr	r3, [r7, #32]
  4041bc:	095b      	lsrs	r3, r3, #5
  4041be:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4041c0:	69fa      	ldr	r2, [r7, #28]
  4041c2:	4b17      	ldr	r3, [pc, #92]	; (404220 <ioport_set_pin_dir+0x84>)
  4041c4:	4413      	add	r3, r2
  4041c6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4041c8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4041ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041ce:	2b01      	cmp	r3, #1
  4041d0:	d109      	bne.n	4041e6 <ioport_set_pin_dir+0x4a>
  4041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041d4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041d6:	697b      	ldr	r3, [r7, #20]
  4041d8:	f003 031f 	and.w	r3, r3, #31
  4041dc:	2201      	movs	r2, #1
  4041de:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4041e0:	69bb      	ldr	r3, [r7, #24]
  4041e2:	611a      	str	r2, [r3, #16]
  4041e4:	e00c      	b.n	404200 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4041e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041ea:	2b00      	cmp	r3, #0
  4041ec:	d108      	bne.n	404200 <ioport_set_pin_dir+0x64>
  4041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041f0:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041f2:	693b      	ldr	r3, [r7, #16]
  4041f4:	f003 031f 	and.w	r3, r3, #31
  4041f8:	2201      	movs	r2, #1
  4041fa:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4041fc:	69bb      	ldr	r3, [r7, #24]
  4041fe:	615a      	str	r2, [r3, #20]
  404200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404202:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404204:	68fb      	ldr	r3, [r7, #12]
  404206:	f003 031f 	and.w	r3, r3, #31
  40420a:	2201      	movs	r2, #1
  40420c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40420e:	69bb      	ldr	r3, [r7, #24]
  404210:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  404214:	3734      	adds	r7, #52	; 0x34
  404216:	46bd      	mov	sp, r7
  404218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40421c:	4770      	bx	lr
  40421e:	bf00      	nop
  404220:	00200707 	.word	0x00200707

00404224 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  404224:	b480      	push	{r7}
  404226:	b08b      	sub	sp, #44	; 0x2c
  404228:	af00      	add	r7, sp, #0
  40422a:	6078      	str	r0, [r7, #4]
  40422c:	460b      	mov	r3, r1
  40422e:	70fb      	strb	r3, [r7, #3]
  404230:	687b      	ldr	r3, [r7, #4]
  404232:	627b      	str	r3, [r7, #36]	; 0x24
  404234:	78fb      	ldrb	r3, [r7, #3]
  404236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40423c:	61fb      	str	r3, [r7, #28]
  40423e:	69fb      	ldr	r3, [r7, #28]
  404240:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404242:	69bb      	ldr	r3, [r7, #24]
  404244:	095b      	lsrs	r3, r3, #5
  404246:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404248:	697a      	ldr	r2, [r7, #20]
  40424a:	4b10      	ldr	r3, [pc, #64]	; (40428c <ioport_set_pin_level+0x68>)
  40424c:	4413      	add	r3, r2
  40424e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404250:	613b      	str	r3, [r7, #16]

	if (level) {
  404252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404256:	2b00      	cmp	r3, #0
  404258:	d009      	beq.n	40426e <ioport_set_pin_level+0x4a>
  40425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40425c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40425e:	68fb      	ldr	r3, [r7, #12]
  404260:	f003 031f 	and.w	r3, r3, #31
  404264:	2201      	movs	r2, #1
  404266:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404268:	693b      	ldr	r3, [r7, #16]
  40426a:	631a      	str	r2, [r3, #48]	; 0x30
  40426c:	e008      	b.n	404280 <ioport_set_pin_level+0x5c>
  40426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404270:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404272:	68bb      	ldr	r3, [r7, #8]
  404274:	f003 031f 	and.w	r3, r3, #31
  404278:	2201      	movs	r2, #1
  40427a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40427c:	693b      	ldr	r3, [r7, #16]
  40427e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  404280:	372c      	adds	r7, #44	; 0x2c
  404282:	46bd      	mov	sp, r7
  404284:	f85d 7b04 	ldr.w	r7, [sp], #4
  404288:	4770      	bx	lr
  40428a:	bf00      	nop
  40428c:	00200707 	.word	0x00200707

00404290 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  404290:	b480      	push	{r7}
  404292:	b089      	sub	sp, #36	; 0x24
  404294:	af00      	add	r7, sp, #0
  404296:	6078      	str	r0, [r7, #4]
  404298:	687b      	ldr	r3, [r7, #4]
  40429a:	61fb      	str	r3, [r7, #28]
  40429c:	69fb      	ldr	r3, [r7, #28]
  40429e:	61bb      	str	r3, [r7, #24]
  4042a0:	69bb      	ldr	r3, [r7, #24]
  4042a2:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4042a4:	697b      	ldr	r3, [r7, #20]
  4042a6:	095b      	lsrs	r3, r3, #5
  4042a8:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4042aa:	693a      	ldr	r2, [r7, #16]
  4042ac:	4b0b      	ldr	r3, [pc, #44]	; (4042dc <ioport_get_pin_level+0x4c>)
  4042ae:	4413      	add	r3, r2
  4042b0:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4042b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4042b4:	69fb      	ldr	r3, [r7, #28]
  4042b6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4042b8:	68fb      	ldr	r3, [r7, #12]
  4042ba:	f003 031f 	and.w	r3, r3, #31
  4042be:	2101      	movs	r1, #1
  4042c0:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4042c4:	4013      	ands	r3, r2
  4042c6:	2b00      	cmp	r3, #0
  4042c8:	bf14      	ite	ne
  4042ca:	2301      	movne	r3, #1
  4042cc:	2300      	moveq	r3, #0
  4042ce:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4042d0:	4618      	mov	r0, r3
  4042d2:	3724      	adds	r7, #36	; 0x24
  4042d4:	46bd      	mov	sp, r7
  4042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042da:	4770      	bx	lr
  4042dc:	00200707 	.word	0x00200707

004042e0 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  4042e0:	b480      	push	{r7}
  4042e2:	b08b      	sub	sp, #44	; 0x2c
  4042e4:	af00      	add	r7, sp, #0
  4042e6:	6078      	str	r0, [r7, #4]
  4042e8:	687b      	ldr	r3, [r7, #4]
  4042ea:	627b      	str	r3, [r7, #36]	; 0x24
  4042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042ee:	623b      	str	r3, [r7, #32]
  4042f0:	6a3b      	ldr	r3, [r7, #32]
  4042f2:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4042f4:	69fb      	ldr	r3, [r7, #28]
  4042f6:	095b      	lsrs	r3, r3, #5
  4042f8:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4042fa:	69ba      	ldr	r2, [r7, #24]
  4042fc:	4b12      	ldr	r3, [pc, #72]	; (404348 <ioport_toggle_pin_level+0x68>)
  4042fe:	4413      	add	r3, r2
  404300:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  404302:	617b      	str	r3, [r7, #20]
  404304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404306:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404308:	693b      	ldr	r3, [r7, #16]
  40430a:	f003 031f 	and.w	r3, r3, #31
  40430e:	2201      	movs	r2, #1
  404310:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  404314:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  404316:	697b      	ldr	r3, [r7, #20]
  404318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40431c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40431e:	68bb      	ldr	r3, [r7, #8]
  404320:	f003 031f 	and.w	r3, r3, #31
  404324:	2101      	movs	r1, #1
  404326:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40432a:	4013      	ands	r3, r2
  40432c:	2b00      	cmp	r3, #0
  40432e:	d003      	beq.n	404338 <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  404330:	697b      	ldr	r3, [r7, #20]
  404332:	68fa      	ldr	r2, [r7, #12]
  404334:	635a      	str	r2, [r3, #52]	; 0x34
  404336:	e002      	b.n	40433e <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  404338:	697b      	ldr	r3, [r7, #20]
  40433a:	68fa      	ldr	r2, [r7, #12]
  40433c:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  40433e:	372c      	adds	r7, #44	; 0x2c
  404340:	46bd      	mov	sp, r7
  404342:	f85d 7b04 	ldr.w	r7, [sp], #4
  404346:	4770      	bx	lr
  404348:	00200707 	.word	0x00200707

0040434c <scan_keypad>:
#define KEYPAD_SW3		0x0E
#define KEYPAD_SW4		0x16
#define KEYPAD_SW5		0x1A

uint8_t scan_keypad(void)
{
  40434c:	b580      	push	{r7, lr}
  40434e:	b082      	sub	sp, #8
  404350:	af00      	add	r7, sp, #0
	uint8_t tempKeypad, retKPB, col1, col2, col3, row1, row2, row3;
	static uint8_t last_retKPB = 0, repeatCountSetting = 5;
	static uint32_t repeatCount = 0;
	
	ioport_set_pin_dir(ECLAVE_COL3, IOPORT_DIR_OUTPUT);
  404352:	2051      	movs	r0, #81	; 0x51
  404354:	2101      	movs	r1, #1
  404356:	4b8f      	ldr	r3, [pc, #572]	; (404594 <scan_keypad+0x248>)
  404358:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL2, IOPORT_DIR_OUTPUT);
  40435a:	2052      	movs	r0, #82	; 0x52
  40435c:	2101      	movs	r1, #1
  40435e:	4b8d      	ldr	r3, [pc, #564]	; (404594 <scan_keypad+0x248>)
  404360:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL1, IOPORT_DIR_OUTPUT);
  404362:	2053      	movs	r0, #83	; 0x53
  404364:	2101      	movs	r1, #1
  404366:	4b8b      	ldr	r3, [pc, #556]	; (404594 <scan_keypad+0x248>)
  404368:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_ROW3, IOPORT_DIR_INPUT);
  40436a:	2054      	movs	r0, #84	; 0x54
  40436c:	2100      	movs	r1, #0
  40436e:	4b89      	ldr	r3, [pc, #548]	; (404594 <scan_keypad+0x248>)
  404370:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW2, IOPORT_DIR_INPUT);
  404372:	2055      	movs	r0, #85	; 0x55
  404374:	2100      	movs	r1, #0
  404376:	4b87      	ldr	r3, [pc, #540]	; (404594 <scan_keypad+0x248>)
  404378:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW1, IOPORT_DIR_INPUT);
  40437a:	2056      	movs	r0, #86	; 0x56
  40437c:	2100      	movs	r1, #0
  40437e:	4b85      	ldr	r3, [pc, #532]	; (404594 <scan_keypad+0x248>)
  404380:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_COL3, IOPORT_PIN_LEVEL_LOW);
  404382:	2051      	movs	r0, #81	; 0x51
  404384:	2100      	movs	r1, #0
  404386:	4b84      	ldr	r3, [pc, #528]	; (404598 <scan_keypad+0x24c>)
  404388:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_COL2, IOPORT_PIN_LEVEL_LOW);
  40438a:	2052      	movs	r0, #82	; 0x52
  40438c:	2100      	movs	r1, #0
  40438e:	4b82      	ldr	r3, [pc, #520]	; (404598 <scan_keypad+0x24c>)
  404390:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_COL1, IOPORT_PIN_LEVEL_LOW);
  404392:	2053      	movs	r0, #83	; 0x53
  404394:	2100      	movs	r1, #0
  404396:	4b80      	ldr	r3, [pc, #512]	; (404598 <scan_keypad+0x24c>)
  404398:	4798      	blx	r3

	row3 = ioport_get_pin_level(ECLAVE_ROW3);
  40439a:	2054      	movs	r0, #84	; 0x54
  40439c:	4b7f      	ldr	r3, [pc, #508]	; (40459c <scan_keypad+0x250>)
  40439e:	4798      	blx	r3
  4043a0:	4603      	mov	r3, r0
  4043a2:	71fb      	strb	r3, [r7, #7]
	row2 = ioport_get_pin_level(ECLAVE_ROW2);
  4043a4:	2055      	movs	r0, #85	; 0x55
  4043a6:	4b7d      	ldr	r3, [pc, #500]	; (40459c <scan_keypad+0x250>)
  4043a8:	4798      	blx	r3
  4043aa:	4603      	mov	r3, r0
  4043ac:	71bb      	strb	r3, [r7, #6]
	row1 = ioport_get_pin_level(ECLAVE_ROW1);
  4043ae:	2056      	movs	r0, #86	; 0x56
  4043b0:	4b7a      	ldr	r3, [pc, #488]	; (40459c <scan_keypad+0x250>)
  4043b2:	4798      	blx	r3
  4043b4:	4603      	mov	r3, r0
  4043b6:	717b      	strb	r3, [r7, #5]


	ioport_set_pin_dir(ECLAVE_ROW3, IOPORT_DIR_OUTPUT);
  4043b8:	2054      	movs	r0, #84	; 0x54
  4043ba:	2101      	movs	r1, #1
  4043bc:	4b75      	ldr	r3, [pc, #468]	; (404594 <scan_keypad+0x248>)
  4043be:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW2, IOPORT_DIR_OUTPUT);
  4043c0:	2055      	movs	r0, #85	; 0x55
  4043c2:	2101      	movs	r1, #1
  4043c4:	4b73      	ldr	r3, [pc, #460]	; (404594 <scan_keypad+0x248>)
  4043c6:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_ROW1, IOPORT_DIR_OUTPUT);
  4043c8:	2056      	movs	r0, #86	; 0x56
  4043ca:	2101      	movs	r1, #1
  4043cc:	4b71      	ldr	r3, [pc, #452]	; (404594 <scan_keypad+0x248>)
  4043ce:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_COL3, IOPORT_DIR_INPUT);
  4043d0:	2051      	movs	r0, #81	; 0x51
  4043d2:	2100      	movs	r1, #0
  4043d4:	4b6f      	ldr	r3, [pc, #444]	; (404594 <scan_keypad+0x248>)
  4043d6:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL2, IOPORT_DIR_INPUT);
  4043d8:	2052      	movs	r0, #82	; 0x52
  4043da:	2100      	movs	r1, #0
  4043dc:	4b6d      	ldr	r3, [pc, #436]	; (404594 <scan_keypad+0x248>)
  4043de:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_COL1, IOPORT_DIR_INPUT);
  4043e0:	2053      	movs	r0, #83	; 0x53
  4043e2:	2100      	movs	r1, #0
  4043e4:	4b6b      	ldr	r3, [pc, #428]	; (404594 <scan_keypad+0x248>)
  4043e6:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_ROW3, IOPORT_PIN_LEVEL_LOW);
  4043e8:	2054      	movs	r0, #84	; 0x54
  4043ea:	2100      	movs	r1, #0
  4043ec:	4b6a      	ldr	r3, [pc, #424]	; (404598 <scan_keypad+0x24c>)
  4043ee:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_ROW2, IOPORT_PIN_LEVEL_LOW);
  4043f0:	2055      	movs	r0, #85	; 0x55
  4043f2:	2100      	movs	r1, #0
  4043f4:	4b68      	ldr	r3, [pc, #416]	; (404598 <scan_keypad+0x24c>)
  4043f6:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_ROW1, IOPORT_PIN_LEVEL_LOW);
  4043f8:	2056      	movs	r0, #86	; 0x56
  4043fa:	2100      	movs	r1, #0
  4043fc:	4b66      	ldr	r3, [pc, #408]	; (404598 <scan_keypad+0x24c>)
  4043fe:	4798      	blx	r3

	col3 = ioport_get_pin_level(ECLAVE_COL3);
  404400:	2051      	movs	r0, #81	; 0x51
  404402:	4b66      	ldr	r3, [pc, #408]	; (40459c <scan_keypad+0x250>)
  404404:	4798      	blx	r3
  404406:	4603      	mov	r3, r0
  404408:	713b      	strb	r3, [r7, #4]
	col2 = ioport_get_pin_level(ECLAVE_COL2);
  40440a:	2052      	movs	r0, #82	; 0x52
  40440c:	4b63      	ldr	r3, [pc, #396]	; (40459c <scan_keypad+0x250>)
  40440e:	4798      	blx	r3
  404410:	4603      	mov	r3, r0
  404412:	70fb      	strb	r3, [r7, #3]
	col1 = ioport_get_pin_level(ECLAVE_COL1);
  404414:	2053      	movs	r0, #83	; 0x53
  404416:	4b61      	ldr	r3, [pc, #388]	; (40459c <scan_keypad+0x250>)
  404418:	4798      	blx	r3
  40441a:	4603      	mov	r3, r0
  40441c:	70bb      	strb	r3, [r7, #2]
	
	tempKeypad = ((row3 << 4) |
  40441e:	79fb      	ldrb	r3, [r7, #7]
  404420:	011b      	lsls	r3, r3, #4
  404422:	b2da      	uxtb	r2, r3
					(row2 << 3) |
  404424:	79bb      	ldrb	r3, [r7, #6]
  404426:	00db      	lsls	r3, r3, #3

	col3 = ioport_get_pin_level(ECLAVE_COL3);
	col2 = ioport_get_pin_level(ECLAVE_COL2);
	col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((row3 << 4) |
  404428:	b2db      	uxtb	r3, r3
  40442a:	4313      	orrs	r3, r2
  40442c:	b2da      	uxtb	r2, r3
					(row2 << 3) |
					(row1 << 2) |
  40442e:	797b      	ldrb	r3, [r7, #5]
  404430:	009b      	lsls	r3, r3, #2

	col3 = ioport_get_pin_level(ECLAVE_COL3);
	col2 = ioport_get_pin_level(ECLAVE_COL2);
	col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((row3 << 4) |
  404432:	b2db      	uxtb	r3, r3
  404434:	4313      	orrs	r3, r2
  404436:	b2da      	uxtb	r2, r3
					(row2 << 3) |
					(row1 << 2) |
					(col2 << 1) |
  404438:	78fb      	ldrb	r3, [r7, #3]
  40443a:	005b      	lsls	r3, r3, #1

	col3 = ioport_get_pin_level(ECLAVE_COL3);
	col2 = ioport_get_pin_level(ECLAVE_COL2);
	col1 = ioport_get_pin_level(ECLAVE_COL1);
	
	tempKeypad = ((row3 << 4) |
  40443c:	b2db      	uxtb	r3, r3
  40443e:	4313      	orrs	r3, r2
  404440:	b2da      	uxtb	r2, r3
  404442:	78bb      	ldrb	r3, [r7, #2]
  404444:	4313      	orrs	r3, r2
  404446:	b2db      	uxtb	r3, r3
  404448:	707b      	strb	r3, [r7, #1]
					(row2 << 3) |
					(row1 << 2) |
					(col2 << 1) |
					(col1));
					
	switch(tempKeypad)
  40444a:	787b      	ldrb	r3, [r7, #1]
  40444c:	3b0d      	subs	r3, #13
  40444e:	2b0d      	cmp	r3, #13
  404450:	f200 809b 	bhi.w	40458a <scan_keypad+0x23e>
  404454:	a201      	add	r2, pc, #4	; (adr r2, 40445c <scan_keypad+0x110>)
  404456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40445a:	bf00      	nop
  40445c:	00404495 	.word	0x00404495
  404460:	00404495 	.word	0x00404495
  404464:	0040458b 	.word	0x0040458b
  404468:	0040458b 	.word	0x0040458b
  40446c:	0040458b 	.word	0x0040458b
  404470:	0040458b 	.word	0x0040458b
  404474:	0040458b 	.word	0x0040458b
  404478:	0040458b 	.word	0x0040458b
  40447c:	00404495 	.word	0x00404495
  404480:	00404495 	.word	0x00404495
  404484:	0040458b 	.word	0x0040458b
  404488:	0040458b 	.word	0x0040458b
  40448c:	00404495 	.word	0x00404495
  404490:	00404495 	.word	0x00404495
		case KEYPAD_SW1:
		case KEYPAD_SW2:
		case KEYPAD_SW3:
		case KEYPAD_SW4:
		case KEYPAD_SW5:
			if (last_retKPB == tempKeypad)
  404494:	4b42      	ldr	r3, [pc, #264]	; (4045a0 <scan_keypad+0x254>)
  404496:	781b      	ldrb	r3, [r3, #0]
  404498:	787a      	ldrb	r2, [r7, #1]
  40449a:	429a      	cmp	r2, r3
  40449c:	d15b      	bne.n	404556 <scan_keypad+0x20a>
			{
				if (repeatCount++ == repeatCountSetting)
  40449e:	4b41      	ldr	r3, [pc, #260]	; (4045a4 <scan_keypad+0x258>)
  4044a0:	681b      	ldr	r3, [r3, #0]
  4044a2:	1c5a      	adds	r2, r3, #1
  4044a4:	493f      	ldr	r1, [pc, #252]	; (4045a4 <scan_keypad+0x258>)
  4044a6:	600a      	str	r2, [r1, #0]
  4044a8:	4a3f      	ldr	r2, [pc, #252]	; (4045a8 <scan_keypad+0x25c>)
  4044aa:	7812      	ldrb	r2, [r2, #0]
  4044ac:	4293      	cmp	r3, r2
  4044ae:	d16b      	bne.n	404588 <scan_keypad+0x23c>
				{
					button_beep_buzzer();
  4044b0:	4b3e      	ldr	r3, [pc, #248]	; (4045ac <scan_keypad+0x260>)
  4044b2:	4798      	blx	r3
					
					print_ecdbg("+--------+\r\n");
  4044b4:	483e      	ldr	r0, [pc, #248]	; (4045b0 <scan_keypad+0x264>)
  4044b6:	4b3f      	ldr	r3, [pc, #252]	; (4045b4 <scan_keypad+0x268>)
  4044b8:	4798      	blx	r3
					switch (tempKeypad)
  4044ba:	787b      	ldrb	r3, [r7, #1]
  4044bc:	3b0d      	subs	r3, #13
  4044be:	2b0d      	cmp	r3, #13
  4044c0:	d836      	bhi.n	404530 <scan_keypad+0x1e4>
  4044c2:	a201      	add	r2, pc, #4	; (adr r2, 4044c8 <scan_keypad+0x17c>)
  4044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4044c8:	00404501 	.word	0x00404501
  4044cc:	00404519 	.word	0x00404519
  4044d0:	00404531 	.word	0x00404531
  4044d4:	00404531 	.word	0x00404531
  4044d8:	00404531 	.word	0x00404531
  4044dc:	00404531 	.word	0x00404531
  4044e0:	00404531 	.word	0x00404531
  4044e4:	00404531 	.word	0x00404531
  4044e8:	00404509 	.word	0x00404509
  4044ec:	00404521 	.word	0x00404521
  4044f0:	00404531 	.word	0x00404531
  4044f4:	00404531 	.word	0x00404531
  4044f8:	00404511 	.word	0x00404511
  4044fc:	00404529 	.word	0x00404529
					{
						case KEYPAD_START:
							print_ecdbg("KPB START\r\n");
  404500:	482d      	ldr	r0, [pc, #180]	; (4045b8 <scan_keypad+0x26c>)
  404502:	4b2c      	ldr	r3, [pc, #176]	; (4045b4 <scan_keypad+0x268>)
  404504:	4798      	blx	r3
							break;
  404506:	e013      	b.n	404530 <scan_keypad+0x1e4>
						case KEYPAD_SW1:
							print_ecdbg("KPB SW1\r\n");
  404508:	482c      	ldr	r0, [pc, #176]	; (4045bc <scan_keypad+0x270>)
  40450a:	4b2a      	ldr	r3, [pc, #168]	; (4045b4 <scan_keypad+0x268>)
  40450c:	4798      	blx	r3
							break;
  40450e:	e00f      	b.n	404530 <scan_keypad+0x1e4>
						case KEYPAD_SW2:
							print_ecdbg("KPB SW2\r\n");
  404510:	482b      	ldr	r0, [pc, #172]	; (4045c0 <scan_keypad+0x274>)
  404512:	4b28      	ldr	r3, [pc, #160]	; (4045b4 <scan_keypad+0x268>)
  404514:	4798      	blx	r3
							break;
  404516:	e00b      	b.n	404530 <scan_keypad+0x1e4>
						case KEYPAD_SW3:
							print_ecdbg("KPB SW3\r\n");
  404518:	482a      	ldr	r0, [pc, #168]	; (4045c4 <scan_keypad+0x278>)
  40451a:	4b26      	ldr	r3, [pc, #152]	; (4045b4 <scan_keypad+0x268>)
  40451c:	4798      	blx	r3
							break;
  40451e:	e007      	b.n	404530 <scan_keypad+0x1e4>
						case KEYPAD_SW4:
							print_ecdbg("KPB SW4\r\n");
  404520:	4829      	ldr	r0, [pc, #164]	; (4045c8 <scan_keypad+0x27c>)
  404522:	4b24      	ldr	r3, [pc, #144]	; (4045b4 <scan_keypad+0x268>)
  404524:	4798      	blx	r3
							break;
  404526:	e003      	b.n	404530 <scan_keypad+0x1e4>
						case KEYPAD_SW5:
							print_ecdbg("KPB SW5\r\n");
  404528:	4828      	ldr	r0, [pc, #160]	; (4045cc <scan_keypad+0x280>)
  40452a:	4b22      	ldr	r3, [pc, #136]	; (4045b4 <scan_keypad+0x268>)
  40452c:	4798      	blx	r3
							break;
  40452e:	bf00      	nop
					} //switch (tempKeypad)

					print_ecdbg("repeatCount: ");
  404530:	4827      	ldr	r0, [pc, #156]	; (4045d0 <scan_keypad+0x284>)
  404532:	4b20      	ldr	r3, [pc, #128]	; (4045b4 <scan_keypad+0x268>)
  404534:	4798      	blx	r3
					print_ecdbg_num(repeatCount);
  404536:	4b1b      	ldr	r3, [pc, #108]	; (4045a4 <scan_keypad+0x258>)
  404538:	681b      	ldr	r3, [r3, #0]
  40453a:	4618      	mov	r0, r3
  40453c:	4b25      	ldr	r3, [pc, #148]	; (4045d4 <scan_keypad+0x288>)
  40453e:	4798      	blx	r3
					print_ecdbg("\r\n");
  404540:	4825      	ldr	r0, [pc, #148]	; (4045d8 <scan_keypad+0x28c>)
  404542:	4b1c      	ldr	r3, [pc, #112]	; (4045b4 <scan_keypad+0x268>)
  404544:	4798      	blx	r3

					last_retKPB = tempKeypad;
  404546:	4a16      	ldr	r2, [pc, #88]	; (4045a0 <scan_keypad+0x254>)
  404548:	787b      	ldrb	r3, [r7, #1]
  40454a:	7013      	strb	r3, [r2, #0]
					scanKPResult = tempKeypad;
  40454c:	4a23      	ldr	r2, [pc, #140]	; (4045dc <scan_keypad+0x290>)
  40454e:	787b      	ldrb	r3, [r7, #1]
  404550:	7013      	strb	r3, [r2, #0]
					return tempKeypad;
  404552:	787b      	ldrb	r3, [r7, #1]
  404554:	e01a      	b.n	40458c <scan_keypad+0x240>
				}//if (repeatCount++ == 5)
		} //if (last_retKPB == tempKeypad)
		else {
			
			print_ecdbg("last_retKPB: ");
  404556:	4822      	ldr	r0, [pc, #136]	; (4045e0 <scan_keypad+0x294>)
  404558:	4b16      	ldr	r3, [pc, #88]	; (4045b4 <scan_keypad+0x268>)
  40455a:	4798      	blx	r3
			print_ecdbg_num(last_retKPB);
  40455c:	4b10      	ldr	r3, [pc, #64]	; (4045a0 <scan_keypad+0x254>)
  40455e:	781b      	ldrb	r3, [r3, #0]
  404560:	4618      	mov	r0, r3
  404562:	4b1c      	ldr	r3, [pc, #112]	; (4045d4 <scan_keypad+0x288>)
  404564:	4798      	blx	r3
			print_ecdbg(" tempKeypad: ");
  404566:	481f      	ldr	r0, [pc, #124]	; (4045e4 <scan_keypad+0x298>)
  404568:	4b12      	ldr	r3, [pc, #72]	; (4045b4 <scan_keypad+0x268>)
  40456a:	4798      	blx	r3
			print_ecdbg_num(tempKeypad);
  40456c:	787b      	ldrb	r3, [r7, #1]
  40456e:	4618      	mov	r0, r3
  404570:	4b18      	ldr	r3, [pc, #96]	; (4045d4 <scan_keypad+0x288>)
  404572:	4798      	blx	r3
			print_ecdbg("\r\n");
  404574:	4818      	ldr	r0, [pc, #96]	; (4045d8 <scan_keypad+0x28c>)
  404576:	4b0f      	ldr	r3, [pc, #60]	; (4045b4 <scan_keypad+0x268>)
  404578:	4798      	blx	r3
			
			last_retKPB = tempKeypad;
  40457a:	4a09      	ldr	r2, [pc, #36]	; (4045a0 <scan_keypad+0x254>)
  40457c:	787b      	ldrb	r3, [r7, #1]
  40457e:	7013      	strb	r3, [r2, #0]
			repeatCount = 0;	
  404580:	4b08      	ldr	r3, [pc, #32]	; (4045a4 <scan_keypad+0x258>)
  404582:	2200      	movs	r2, #0
  404584:	601a      	str	r2, [r3, #0]
		}
		break;
  404586:	e7ff      	b.n	404588 <scan_keypad+0x23c>
  404588:	bf00      	nop
		
	} //switch (tempKeypad)

	return 0;
  40458a:	2300      	movs	r3, #0
}
  40458c:	4618      	mov	r0, r3
  40458e:	3708      	adds	r7, #8
  404590:	46bd      	mov	sp, r7
  404592:	bd80      	pop	{r7, pc}
  404594:	0040419d 	.word	0x0040419d
  404598:	00404225 	.word	0x00404225
  40459c:	00404291 	.word	0x00404291
  4045a0:	204009df 	.word	0x204009df
  4045a4:	204009e0 	.word	0x204009e0
  4045a8:	20400098 	.word	0x20400098
  4045ac:	00404755 	.word	0x00404755
  4045b0:	0040ccac 	.word	0x0040ccac
  4045b4:	004026b1 	.word	0x004026b1
  4045b8:	0040ccbc 	.word	0x0040ccbc
  4045bc:	0040ccc8 	.word	0x0040ccc8
  4045c0:	0040ccd4 	.word	0x0040ccd4
  4045c4:	0040cce0 	.word	0x0040cce0
  4045c8:	0040ccec 	.word	0x0040ccec
  4045cc:	0040ccf8 	.word	0x0040ccf8
  4045d0:	0040cd04 	.word	0x0040cd04
  4045d4:	004048f9 	.word	0x004048f9
  4045d8:	0040cd14 	.word	0x0040cd14
  4045dc:	204009c0 	.word	0x204009c0
  4045e0:	0040cd18 	.word	0x0040cd18
  4045e4:	0040cd28 	.word	0x0040cd28

004045e8 <process_kpb>:
uint8_t kpbState = KPB_START;

uint8_t kpbValidCodes[4] = {KEYPAD_SW1, KEYPAD_SW2, KEYPAD_SW3, KEYPAD_SW4}; //just one valid code for now

uint8_t process_kpb(void)
{
  4045e8:	b580      	push	{r7, lr}
  4045ea:	b082      	sub	sp, #8
  4045ec:	af00      	add	r7, sp, #0
	uint8_t kpb;
	
	if (kpbState > KPB_START)
  4045ee:	4b3a      	ldr	r3, [pc, #232]	; (4046d8 <process_kpb+0xf0>)
  4045f0:	781b      	ldrb	r3, [r3, #0]
  4045f2:	2b00      	cmp	r3, #0
  4045f4:	d010      	beq.n	404618 <process_kpb+0x30>
	{
		if (timer_done(TMR_KEYPAD))
  4045f6:	2006      	movs	r0, #6
  4045f8:	4b38      	ldr	r3, [pc, #224]	; (4046dc <process_kpb+0xf4>)
  4045fa:	4798      	blx	r3
  4045fc:	4603      	mov	r3, r0
  4045fe:	2b00      	cmp	r3, #0
  404600:	d00a      	beq.n	404618 <process_kpb+0x30>
		{
			print_ecdbg("process_kpb() timeout (error)\r\n");
  404602:	4837      	ldr	r0, [pc, #220]	; (4046e0 <process_kpb+0xf8>)
  404604:	4b37      	ldr	r3, [pc, #220]	; (4046e4 <process_kpb+0xfc>)
  404606:	4798      	blx	r3
			end_timer(TMR_KEYPAD); //make sure everything is reset for this timer
  404608:	2006      	movs	r0, #6
  40460a:	4b37      	ldr	r3, [pc, #220]	; (4046e8 <process_kpb+0x100>)
  40460c:	4798      	blx	r3
			kpbState = KPB_START;
  40460e:	4b32      	ldr	r3, [pc, #200]	; (4046d8 <process_kpb+0xf0>)
  404610:	2200      	movs	r2, #0
  404612:	701a      	strb	r2, [r3, #0]
			return KPB_ERROR;
  404614:	2302      	movs	r3, #2
  404616:	e05b      	b.n	4046d0 <process_kpb+0xe8>
		}
	}
	
	if ((kpb = scan_keypad()) != 0)
  404618:	4b34      	ldr	r3, [pc, #208]	; (4046ec <process_kpb+0x104>)
  40461a:	4798      	blx	r3
  40461c:	4603      	mov	r3, r0
  40461e:	71fb      	strb	r3, [r7, #7]
  404620:	79fb      	ldrb	r3, [r7, #7]
  404622:	2b00      	cmp	r3, #0
  404624:	d053      	beq.n	4046ce <process_kpb+0xe6>
	{
		switch(kpbState)
  404626:	4b2c      	ldr	r3, [pc, #176]	; (4046d8 <process_kpb+0xf0>)
  404628:	781b      	ldrb	r3, [r3, #0]
  40462a:	2b03      	cmp	r3, #3
  40462c:	d847      	bhi.n	4046be <process_kpb+0xd6>
  40462e:	a201      	add	r2, pc, #4	; (adr r2, 404634 <process_kpb+0x4c>)
  404630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404634:	00404645 	.word	0x00404645
  404638:	0040466b 	.word	0x0040466b
  40463c:	00404687 	.word	0x00404687
  404640:	004046a3 	.word	0x004046a3
		{
			case KPB_START:
				if (kpbValidCodes[0] == kpb)
  404644:	4b2a      	ldr	r3, [pc, #168]	; (4046f0 <process_kpb+0x108>)
  404646:	781b      	ldrb	r3, [r3, #0]
  404648:	79fa      	ldrb	r2, [r7, #7]
  40464a:	429a      	cmp	r2, r3
  40464c:	d10c      	bne.n	404668 <process_kpb+0x80>
				{
					start_timer(TMR_KEYPAD, (15 * SECONDS));
  40464e:	2006      	movs	r0, #6
  404650:	f643 2198 	movw	r1, #15000	; 0x3a98
  404654:	4b27      	ldr	r3, [pc, #156]	; (4046f4 <process_kpb+0x10c>)
  404656:	4798      	blx	r3
					kpbState = KPB_DIG1;
  404658:	4b1f      	ldr	r3, [pc, #124]	; (4046d8 <process_kpb+0xf0>)
  40465a:	2201      	movs	r2, #1
  40465c:	701a      	strb	r2, [r3, #0]
					print_ecdbg("KPB State: DIG1\r\n");
  40465e:	4826      	ldr	r0, [pc, #152]	; (4046f8 <process_kpb+0x110>)
  404660:	4b20      	ldr	r3, [pc, #128]	; (4046e4 <process_kpb+0xfc>)
  404662:	4798      	blx	r3
					return KPB_CONTINUE;
  404664:	2300      	movs	r3, #0
  404666:	e033      	b.n	4046d0 <process_kpb+0xe8>
				}
				break;
  404668:	e029      	b.n	4046be <process_kpb+0xd6>
			case KPB_DIG1:
				if (kpbValidCodes[1] == kpb)
  40466a:	4b21      	ldr	r3, [pc, #132]	; (4046f0 <process_kpb+0x108>)
  40466c:	785b      	ldrb	r3, [r3, #1]
  40466e:	79fa      	ldrb	r2, [r7, #7]
  404670:	429a      	cmp	r2, r3
  404672:	d107      	bne.n	404684 <process_kpb+0x9c>
				{
					kpbState = KPB_DIG2;
  404674:	4b18      	ldr	r3, [pc, #96]	; (4046d8 <process_kpb+0xf0>)
  404676:	2202      	movs	r2, #2
  404678:	701a      	strb	r2, [r3, #0]
					print_ecdbg("KPB State: DIG2\r\n");
  40467a:	4820      	ldr	r0, [pc, #128]	; (4046fc <process_kpb+0x114>)
  40467c:	4b19      	ldr	r3, [pc, #100]	; (4046e4 <process_kpb+0xfc>)
  40467e:	4798      	blx	r3
					return KPB_CONTINUE;
  404680:	2300      	movs	r3, #0
  404682:	e025      	b.n	4046d0 <process_kpb+0xe8>
				}
				break;
  404684:	e01b      	b.n	4046be <process_kpb+0xd6>
			case KPB_DIG2:
				if (kpbValidCodes[2] == kpb)
  404686:	4b1a      	ldr	r3, [pc, #104]	; (4046f0 <process_kpb+0x108>)
  404688:	789b      	ldrb	r3, [r3, #2]
  40468a:	79fa      	ldrb	r2, [r7, #7]
  40468c:	429a      	cmp	r2, r3
  40468e:	d107      	bne.n	4046a0 <process_kpb+0xb8>
				{
					kpbState = KPB_DIG3;
  404690:	4b11      	ldr	r3, [pc, #68]	; (4046d8 <process_kpb+0xf0>)
  404692:	2203      	movs	r2, #3
  404694:	701a      	strb	r2, [r3, #0]
					print_ecdbg("KPB State: DIG3\r\n");
  404696:	481a      	ldr	r0, [pc, #104]	; (404700 <process_kpb+0x118>)
  404698:	4b12      	ldr	r3, [pc, #72]	; (4046e4 <process_kpb+0xfc>)
  40469a:	4798      	blx	r3
					return KPB_CONTINUE;
  40469c:	2300      	movs	r3, #0
  40469e:	e017      	b.n	4046d0 <process_kpb+0xe8>
				}
				break;
  4046a0:	e00d      	b.n	4046be <process_kpb+0xd6>
			case KPB_DIG3:
				if (kpbValidCodes[3] == kpb)
  4046a2:	4b13      	ldr	r3, [pc, #76]	; (4046f0 <process_kpb+0x108>)
  4046a4:	78db      	ldrb	r3, [r3, #3]
  4046a6:	79fa      	ldrb	r2, [r7, #7]
  4046a8:	429a      	cmp	r2, r3
  4046aa:	d107      	bne.n	4046bc <process_kpb+0xd4>
				{
					kpbState = KPB_START;
  4046ac:	4b0a      	ldr	r3, [pc, #40]	; (4046d8 <process_kpb+0xf0>)
  4046ae:	2200      	movs	r2, #0
  4046b0:	701a      	strb	r2, [r3, #0]
					print_ecdbg("KPB State: START\r\n");
  4046b2:	4814      	ldr	r0, [pc, #80]	; (404704 <process_kpb+0x11c>)
  4046b4:	4b0b      	ldr	r3, [pc, #44]	; (4046e4 <process_kpb+0xfc>)
  4046b6:	4798      	blx	r3
					return KPB_VALID;
  4046b8:	2301      	movs	r3, #1
  4046ba:	e009      	b.n	4046d0 <process_kpb+0xe8>
				}
				break;
  4046bc:	bf00      	nop
		}
		
		kpbState = KPB_START;
  4046be:	4b06      	ldr	r3, [pc, #24]	; (4046d8 <process_kpb+0xf0>)
  4046c0:	2200      	movs	r2, #0
  4046c2:	701a      	strb	r2, [r3, #0]
		print_ecdbg("KPB State: START (ERROR)\r\n");
  4046c4:	4810      	ldr	r0, [pc, #64]	; (404708 <process_kpb+0x120>)
  4046c6:	4b07      	ldr	r3, [pc, #28]	; (4046e4 <process_kpb+0xfc>)
  4046c8:	4798      	blx	r3
		return KPB_ERROR; //if we got here, we had a code but it didn't match what was in the list of valid codes
  4046ca:	2302      	movs	r3, #2
  4046cc:	e000      	b.n	4046d0 <process_kpb+0xe8>
	}
	
	return KPB_CONTINUE; //if we are here, nothing happened or we are in the middle of debounce
  4046ce:	2300      	movs	r3, #0
}
  4046d0:	4618      	mov	r0, r3
  4046d2:	3708      	adds	r7, #8
  4046d4:	46bd      	mov	sp, r7
  4046d6:	bd80      	pop	{r7, pc}
  4046d8:	204009c2 	.word	0x204009c2
  4046dc:	00403315 	.word	0x00403315
  4046e0:	0040cd38 	.word	0x0040cd38
  4046e4:	004026b1 	.word	0x004026b1
  4046e8:	00403351 	.word	0x00403351
  4046ec:	0040434d 	.word	0x0040434d
  4046f0:	2040001c 	.word	0x2040001c
  4046f4:	0040320d 	.word	0x0040320d
  4046f8:	0040cd58 	.word	0x0040cd58
  4046fc:	0040cd6c 	.word	0x0040cd6c
  404700:	0040cd80 	.word	0x0040cd80
  404704:	0040cd94 	.word	0x0040cd94
  404708:	0040cda8 	.word	0x0040cda8

0040470c <door_ajar_buzzer>:
#define LED_BOARD_SIDE_STRUCT_SIZE	10	//bytes


void door_ajar_buzzer(void);
void door_ajar_buzzer(void)
{
  40470c:	b580      	push	{r7, lr}
  40470e:	af00      	add	r7, sp, #0
	controls.buzzer_enable = 1;
  404710:	4b0d      	ldr	r3, [pc, #52]	; (404748 <door_ajar_buzzer+0x3c>)
  404712:	2201      	movs	r2, #1
  404714:	70da      	strb	r2, [r3, #3]
	controls.buzzer_cycle = CYCLE_ON;
  404716:	4b0c      	ldr	r3, [pc, #48]	; (404748 <door_ajar_buzzer+0x3c>)
  404718:	2201      	movs	r2, #1
  40471a:	711a      	strb	r2, [r3, #4]
	controls.buzzer_on_dur = 1000;	//ms
  40471c:	4b0a      	ldr	r3, [pc, #40]	; (404748 <door_ajar_buzzer+0x3c>)
  40471e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  404722:	815a      	strh	r2, [r3, #10]
	controls.buzzer_off_dur = 1000;	//ms
  404724:	4b08      	ldr	r3, [pc, #32]	; (404748 <door_ajar_buzzer+0x3c>)
  404726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40472a:	819a      	strh	r2, [r3, #12]
	controls.buzzer_repeat = 0xFF;	//forever essentially
  40472c:	4b06      	ldr	r3, [pc, #24]	; (404748 <door_ajar_buzzer+0x3c>)
  40472e:	22ff      	movs	r2, #255	; 0xff
  404730:	739a      	strb	r2, [r3, #14]
	controls.buzzer_repeat_count = 0;
  404732:	4b05      	ldr	r3, [pc, #20]	; (404748 <door_ajar_buzzer+0x3c>)
  404734:	2200      	movs	r2, #0
  404736:	811a      	strh	r2, [r3, #8]
	controls.buzzer_dur_count = 0;
  404738:	4b03      	ldr	r3, [pc, #12]	; (404748 <door_ajar_buzzer+0x3c>)
  40473a:	2200      	movs	r2, #0
  40473c:	80da      	strh	r2, [r3, #6]
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL); 
  40473e:	4803      	ldr	r0, [pc, #12]	; (40474c <door_ajar_buzzer+0x40>)
  404740:	2100      	movs	r1, #0
  404742:	4b03      	ldr	r3, [pc, #12]	; (404750 <door_ajar_buzzer+0x44>)
  404744:	4798      	blx	r3
}
  404746:	bd80      	pop	{r7, pc}
  404748:	20400b64 	.word	0x20400b64
  40474c:	40020000 	.word	0x40020000
  404750:	00401b81 	.word	0x00401b81

00404754 <button_beep_buzzer>:


void button_beep_buzzer(void)
{
  404754:	b580      	push	{r7, lr}
  404756:	af00      	add	r7, sp, #0
	controls.buzzer_enable = 1;
  404758:	4b0c      	ldr	r3, [pc, #48]	; (40478c <button_beep_buzzer+0x38>)
  40475a:	2201      	movs	r2, #1
  40475c:	70da      	strb	r2, [r3, #3]
	controls.buzzer_cycle = CYCLE_ON;
  40475e:	4b0b      	ldr	r3, [pc, #44]	; (40478c <button_beep_buzzer+0x38>)
  404760:	2201      	movs	r2, #1
  404762:	711a      	strb	r2, [r3, #4]
	controls.buzzer_on_dur = 100;	//ms
  404764:	4b09      	ldr	r3, [pc, #36]	; (40478c <button_beep_buzzer+0x38>)
  404766:	2264      	movs	r2, #100	; 0x64
  404768:	815a      	strh	r2, [r3, #10]
	controls.buzzer_off_dur = 0;	//ms
  40476a:	4b08      	ldr	r3, [pc, #32]	; (40478c <button_beep_buzzer+0x38>)
  40476c:	2200      	movs	r2, #0
  40476e:	819a      	strh	r2, [r3, #12]
	controls.buzzer_repeat = 1;		//just one short beep
  404770:	4b06      	ldr	r3, [pc, #24]	; (40478c <button_beep_buzzer+0x38>)
  404772:	2201      	movs	r2, #1
  404774:	739a      	strb	r2, [r3, #14]
	controls.buzzer_repeat_count = 0;
  404776:	4b05      	ldr	r3, [pc, #20]	; (40478c <button_beep_buzzer+0x38>)
  404778:	2200      	movs	r2, #0
  40477a:	811a      	strh	r2, [r3, #8]
	controls.buzzer_dur_count = 0;
  40477c:	4b03      	ldr	r3, [pc, #12]	; (40478c <button_beep_buzzer+0x38>)
  40477e:	2200      	movs	r2, #0
  404780:	80da      	strh	r2, [r3, #6]
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  404782:	4803      	ldr	r0, [pc, #12]	; (404790 <button_beep_buzzer+0x3c>)
  404784:	2100      	movs	r1, #0
  404786:	4b03      	ldr	r3, [pc, #12]	; (404794 <button_beep_buzzer+0x40>)
  404788:	4798      	blx	r3
}
  40478a:	bd80      	pop	{r7, pc}
  40478c:	20400b64 	.word	0x20400b64
  404790:	40020000 	.word	0x40020000
  404794:	00401b81 	.word	0x00401b81

00404798 <init_sysErr>:

#define BIT(x) (1<<(x))

void init_sysErr(void);
void init_sysErr(void)
{
  404798:	b580      	push	{r7, lr}
  40479a:	af00      	add	r7, sp, #0
	memset(&sysErr, 0x00, sizeof(sysErr)); //Init everything to "PASS"
  40479c:	4802      	ldr	r0, [pc, #8]	; (4047a8 <init_sysErr+0x10>)
  40479e:	2100      	movs	r1, #0
  4047a0:	2210      	movs	r2, #16
  4047a2:	4b02      	ldr	r3, [pc, #8]	; (4047ac <init_sysErr+0x14>)
  4047a4:	4798      	blx	r3
}
  4047a6:	bd80      	pop	{r7, pc}
  4047a8:	204016e4 	.word	0x204016e4
  4047ac:	004073e1 	.word	0x004073e1

004047b0 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
  4047b0:	b580      	push	{r7, lr}
  4047b2:	b084      	sub	sp, #16
  4047b4:	af00      	add	r7, sp, #0
  4047b6:	4603      	mov	r3, r0
  4047b8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i<7; i++)
  4047ba:	2300      	movs	r3, #0
  4047bc:	60fb      	str	r3, [r7, #12]
  4047be:	e05f      	b.n	404880 <display_text+0xd0>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
  4047c0:	4b32      	ldr	r3, [pc, #200]	; (40488c <display_text+0xdc>)
  4047c2:	681b      	ldr	r3, [r3, #0]
  4047c4:	689b      	ldr	r3, [r3, #8]
  4047c6:	689a      	ldr	r2, [r3, #8]
  4047c8:	3a01      	subs	r2, #1
  4047ca:	609a      	str	r2, [r3, #8]
  4047cc:	689b      	ldr	r3, [r3, #8]
  4047ce:	2b00      	cmp	r3, #0
  4047d0:	da41      	bge.n	404856 <display_text+0xa6>
  4047d2:	4b2e      	ldr	r3, [pc, #184]	; (40488c <display_text+0xdc>)
  4047d4:	681b      	ldr	r3, [r3, #0]
  4047d6:	689b      	ldr	r3, [r3, #8]
  4047d8:	689a      	ldr	r2, [r3, #8]
  4047da:	4b2c      	ldr	r3, [pc, #176]	; (40488c <display_text+0xdc>)
  4047dc:	681b      	ldr	r3, [r3, #0]
  4047de:	689b      	ldr	r3, [r3, #8]
  4047e0:	699b      	ldr	r3, [r3, #24]
  4047e2:	429a      	cmp	r2, r3
  4047e4:	db24      	blt.n	404830 <display_text+0x80>
  4047e6:	4b29      	ldr	r3, [pc, #164]	; (40488c <display_text+0xdc>)
  4047e8:	681b      	ldr	r3, [r3, #0]
  4047ea:	689b      	ldr	r3, [r3, #8]
  4047ec:	681b      	ldr	r3, [r3, #0]
  4047ee:	79fa      	ldrb	r2, [r7, #7]
  4047f0:	4927      	ldr	r1, [pc, #156]	; (404890 <display_text+0xe0>)
  4047f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4047f6:	68fa      	ldr	r2, [r7, #12]
  4047f8:	440a      	add	r2, r1
  4047fa:	7812      	ldrb	r2, [r2, #0]
  4047fc:	701a      	strb	r2, [r3, #0]
  4047fe:	4b23      	ldr	r3, [pc, #140]	; (40488c <display_text+0xdc>)
  404800:	681b      	ldr	r3, [r3, #0]
  404802:	689b      	ldr	r3, [r3, #8]
  404804:	681b      	ldr	r3, [r3, #0]
  404806:	781b      	ldrb	r3, [r3, #0]
  404808:	2b0a      	cmp	r3, #10
  40480a:	d006      	beq.n	40481a <display_text+0x6a>
  40480c:	4b1f      	ldr	r3, [pc, #124]	; (40488c <display_text+0xdc>)
  40480e:	681b      	ldr	r3, [r3, #0]
  404810:	689b      	ldr	r3, [r3, #8]
  404812:	681a      	ldr	r2, [r3, #0]
  404814:	3201      	adds	r2, #1
  404816:	601a      	str	r2, [r3, #0]
  404818:	e02f      	b.n	40487a <display_text+0xca>
  40481a:	4b1c      	ldr	r3, [pc, #112]	; (40488c <display_text+0xdc>)
  40481c:	681a      	ldr	r2, [r3, #0]
  40481e:	4b1b      	ldr	r3, [pc, #108]	; (40488c <display_text+0xdc>)
  404820:	681b      	ldr	r3, [r3, #0]
  404822:	689b      	ldr	r3, [r3, #8]
  404824:	4610      	mov	r0, r2
  404826:	210a      	movs	r1, #10
  404828:	461a      	mov	r2, r3
  40482a:	4b1a      	ldr	r3, [pc, #104]	; (404894 <display_text+0xe4>)
  40482c:	4798      	blx	r3
  40482e:	e024      	b.n	40487a <display_text+0xca>
  404830:	4b16      	ldr	r3, [pc, #88]	; (40488c <display_text+0xdc>)
  404832:	6819      	ldr	r1, [r3, #0]
  404834:	79fb      	ldrb	r3, [r7, #7]
  404836:	4a16      	ldr	r2, [pc, #88]	; (404890 <display_text+0xe0>)
  404838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40483c:	68fb      	ldr	r3, [r7, #12]
  40483e:	4413      	add	r3, r2
  404840:	781b      	ldrb	r3, [r3, #0]
  404842:	461a      	mov	r2, r3
  404844:	4b11      	ldr	r3, [pc, #68]	; (40488c <display_text+0xdc>)
  404846:	681b      	ldr	r3, [r3, #0]
  404848:	689b      	ldr	r3, [r3, #8]
  40484a:	4608      	mov	r0, r1
  40484c:	4611      	mov	r1, r2
  40484e:	461a      	mov	r2, r3
  404850:	4b10      	ldr	r3, [pc, #64]	; (404894 <display_text+0xe4>)
  404852:	4798      	blx	r3
  404854:	e011      	b.n	40487a <display_text+0xca>
  404856:	4b0d      	ldr	r3, [pc, #52]	; (40488c <display_text+0xdc>)
  404858:	681b      	ldr	r3, [r3, #0]
  40485a:	689b      	ldr	r3, [r3, #8]
  40485c:	681b      	ldr	r3, [r3, #0]
  40485e:	79fa      	ldrb	r2, [r7, #7]
  404860:	490b      	ldr	r1, [pc, #44]	; (404890 <display_text+0xe0>)
  404862:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  404866:	68fa      	ldr	r2, [r7, #12]
  404868:	440a      	add	r2, r1
  40486a:	7812      	ldrb	r2, [r2, #0]
  40486c:	701a      	strb	r2, [r3, #0]
  40486e:	4b07      	ldr	r3, [pc, #28]	; (40488c <display_text+0xdc>)
  404870:	681b      	ldr	r3, [r3, #0]
  404872:	689b      	ldr	r3, [r3, #8]
  404874:	681a      	ldr	r2, [r3, #0]
  404876:	3201      	adds	r2, #1
  404878:	601a      	str	r2, [r3, #0]


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
  40487a:	68fb      	ldr	r3, [r7, #12]
  40487c:	3301      	adds	r3, #1
  40487e:	60fb      	str	r3, [r7, #12]
  404880:	68fb      	ldr	r3, [r7, #12]
  404882:	2b06      	cmp	r3, #6
  404884:	dd9c      	ble.n	4047c0 <display_text+0x10>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
  404886:	3710      	adds	r7, #16
  404888:	46bd      	mov	sp, r7
  40488a:	bd80      	pop	{r7, pc}
  40488c:	204004c8 	.word	0x204004c8
  404890:	20400070 	.word	0x20400070
  404894:	00408c1d 	.word	0x00408c1d

00404898 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
  404898:	b580      	push	{r7, lr}
  40489a:	af00      	add	r7, sp, #0
	uint32_t ioFlags;

	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  40489c:	200f      	movs	r0, #15
  40489e:	2101      	movs	r1, #1
  4048a0:	4b13      	ldr	r3, [pc, #76]	; (4048f0 <init_io+0x58>)
  4048a2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  4048a4:	200f      	movs	r0, #15
  4048a6:	2101      	movs	r1, #1
  4048a8:	4b12      	ldr	r3, [pc, #72]	; (4048f4 <init_io+0x5c>)
  4048aa:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  4048ac:	2010      	movs	r0, #16
  4048ae:	2101      	movs	r1, #1
  4048b0:	4b0f      	ldr	r3, [pc, #60]	; (4048f0 <init_io+0x58>)
  4048b2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  4048b4:	2010      	movs	r0, #16
  4048b6:	2101      	movs	r1, #1
  4048b8:	4b0e      	ldr	r3, [pc, #56]	; (4048f4 <init_io+0x5c>)
  4048ba:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  4048bc:	2011      	movs	r0, #17
  4048be:	2101      	movs	r1, #1
  4048c0:	4b0b      	ldr	r3, [pc, #44]	; (4048f0 <init_io+0x58>)
  4048c2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  4048c4:	2011      	movs	r0, #17
  4048c6:	2101      	movs	r1, #1
  4048c8:	4b0a      	ldr	r3, [pc, #40]	; (4048f4 <init_io+0x5c>)
  4048ca:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  4048cc:	2012      	movs	r0, #18
  4048ce:	2101      	movs	r1, #1
  4048d0:	4b07      	ldr	r3, [pc, #28]	; (4048f0 <init_io+0x58>)
  4048d2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  4048d4:	2012      	movs	r0, #18
  4048d6:	2101      	movs	r1, #1
  4048d8:	4b06      	ldr	r3, [pc, #24]	; (4048f4 <init_io+0x5c>)
  4048da:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  4048dc:	2013      	movs	r0, #19
  4048de:	2101      	movs	r1, #1
  4048e0:	4b03      	ldr	r3, [pc, #12]	; (4048f0 <init_io+0x58>)
  4048e2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  4048e4:	2013      	movs	r0, #19
  4048e6:	2101      	movs	r1, #1
  4048e8:	4b02      	ldr	r3, [pc, #8]	; (4048f4 <init_io+0x5c>)
  4048ea:	4798      	blx	r3
}
  4048ec:	bd80      	pop	{r7, pc}
  4048ee:	bf00      	nop
  4048f0:	0040419d 	.word	0x0040419d
  4048f4:	00404225 	.word	0x00404225

004048f8 <print_ecdbg_num>:
	LED_BRD_4_TOP	//shelf 3
};


void print_ecdbg_num(unsigned int num)
{
  4048f8:	b580      	push	{r7, lr}
  4048fa:	b084      	sub	sp, #16
  4048fc:	af00      	add	r7, sp, #0
  4048fe:	6078      	str	r0, [r7, #4]
	char str[6];
	
	sprintf(str, "%d", num);	
  404900:	f107 0308 	add.w	r3, r7, #8
  404904:	4618      	mov	r0, r3
  404906:	4906      	ldr	r1, [pc, #24]	; (404920 <print_ecdbg_num+0x28>)
  404908:	687a      	ldr	r2, [r7, #4]
  40490a:	4b06      	ldr	r3, [pc, #24]	; (404924 <print_ecdbg_num+0x2c>)
  40490c:	4798      	blx	r3
	
	print_ecdbg(str);
  40490e:	f107 0308 	add.w	r3, r7, #8
  404912:	4618      	mov	r0, r3
  404914:	4b04      	ldr	r3, [pc, #16]	; (404928 <print_ecdbg_num+0x30>)
  404916:	4798      	blx	r3
}
  404918:	3710      	adds	r7, #16
  40491a:	46bd      	mov	sp, r7
  40491c:	bd80      	pop	{r7, pc}
  40491e:	bf00      	nop
  404920:	0040cde8 	.word	0x0040cde8
  404924:	004075fd 	.word	0x004075fd
  404928:	004026b1 	.word	0x004026b1

0040492c <read_led_board_serial_ids>:

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
  40492c:	b580      	push	{r7, lr}
  40492e:	b084      	sub	sp, #16
  404930:	af00      	add	r7, sp, #0
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
  404932:	2001      	movs	r0, #1
  404934:	4b8b      	ldr	r3, [pc, #556]	; (404b64 <read_led_board_serial_ids+0x238>)
  404936:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  404938:	2300      	movs	r3, #0
  40493a:	60fb      	str	r3, [r7, #12]
  40493c:	e02d      	b.n	40499a <read_led_board_serial_ids+0x6e>
	{
		ledBrd[i].present = !OWTouchReset(i);
  40493e:	68fb      	ldr	r3, [r7, #12]
  404940:	b2db      	uxtb	r3, r3
  404942:	4618      	mov	r0, r3
  404944:	4b88      	ldr	r3, [pc, #544]	; (404b68 <read_led_board_serial_ids+0x23c>)
  404946:	4798      	blx	r3
  404948:	4603      	mov	r3, r0
  40494a:	2b00      	cmp	r3, #0
  40494c:	bf0c      	ite	eq
  40494e:	2301      	moveq	r3, #1
  404950:	2300      	movne	r3, #0
  404952:	b2db      	uxtb	r3, r3
  404954:	4618      	mov	r0, r3
  404956:	4985      	ldr	r1, [pc, #532]	; (404b6c <read_led_board_serial_ids+0x240>)
  404958:	68fa      	ldr	r2, [r7, #12]
  40495a:	4613      	mov	r3, r2
  40495c:	00db      	lsls	r3, r3, #3
  40495e:	1a9b      	subs	r3, r3, r2
  404960:	005b      	lsls	r3, r3, #1
  404962:	440b      	add	r3, r1
  404964:	3308      	adds	r3, #8
  404966:	4602      	mov	r2, r0
  404968:	701a      	strb	r2, [r3, #0]
		if (ledBrd[i].present)
  40496a:	4980      	ldr	r1, [pc, #512]	; (404b6c <read_led_board_serial_ids+0x240>)
  40496c:	68fa      	ldr	r2, [r7, #12]
  40496e:	4613      	mov	r3, r2
  404970:	00db      	lsls	r3, r3, #3
  404972:	1a9b      	subs	r3, r3, r2
  404974:	005b      	lsls	r3, r3, #1
  404976:	440b      	add	r3, r1
  404978:	3308      	adds	r3, #8
  40497a:	781b      	ldrb	r3, [r3, #0]
  40497c:	2b00      	cmp	r3, #0
  40497e:	d009      	beq.n	404994 <read_led_board_serial_ids+0x68>
		{
			print_ecdbg("LED board detected in slot ");
  404980:	487b      	ldr	r0, [pc, #492]	; (404b70 <read_led_board_serial_ids+0x244>)
  404982:	4b7c      	ldr	r3, [pc, #496]	; (404b74 <read_led_board_serial_ids+0x248>)
  404984:	4798      	blx	r3
			print_ecdbg_num(i);
  404986:	68fb      	ldr	r3, [r7, #12]
  404988:	4618      	mov	r0, r3
  40498a:	4b7b      	ldr	r3, [pc, #492]	; (404b78 <read_led_board_serial_ids+0x24c>)
  40498c:	4798      	blx	r3
			print_ecdbg("\r\n");
  40498e:	487b      	ldr	r0, [pc, #492]	; (404b7c <read_led_board_serial_ids+0x250>)
  404990:	4b78      	ldr	r3, [pc, #480]	; (404b74 <read_led_board_serial_ids+0x248>)
  404992:	4798      	blx	r3
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  404994:	68fb      	ldr	r3, [r7, #12]
  404996:	3301      	adds	r3, #1
  404998:	60fb      	str	r3, [r7, #12]
  40499a:	68fb      	ldr	r3, [r7, #12]
  40499c:	2b04      	cmp	r3, #4
  40499e:	ddce      	ble.n	40493e <read_led_board_serial_ids+0x12>
			print_ecdbg_num(i);
			print_ecdbg("\r\n");
		}
	}
	
	if (ledBrd[0].present && ledBrd[1].present)
  4049a0:	4b72      	ldr	r3, [pc, #456]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049a2:	7a1b      	ldrb	r3, [r3, #8]
  4049a4:	2b00      	cmp	r3, #0
  4049a6:	d009      	beq.n	4049bc <read_led_board_serial_ids+0x90>
  4049a8:	4b70      	ldr	r3, [pc, #448]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049aa:	7d9b      	ldrb	r3, [r3, #22]
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	d005      	beq.n	4049bc <read_led_board_serial_ids+0x90>
	{
		shelf[0].present = 1;
  4049b0:	4b73      	ldr	r3, [pc, #460]	; (404b80 <read_led_board_serial_ids+0x254>)
  4049b2:	2201      	movs	r2, #1
  4049b4:	711a      	strb	r2, [r3, #4]
		
		print_ecdbg("Shelf 0 present\r\n");
  4049b6:	4873      	ldr	r0, [pc, #460]	; (404b84 <read_led_board_serial_ids+0x258>)
  4049b8:	4b6e      	ldr	r3, [pc, #440]	; (404b74 <read_led_board_serial_ids+0x248>)
  4049ba:	4798      	blx	r3
	}
	if (ledBrd[1].present && ledBrd[2].present)
  4049bc:	4b6b      	ldr	r3, [pc, #428]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049be:	7d9b      	ldrb	r3, [r3, #22]
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	d00a      	beq.n	4049da <read_led_board_serial_ids+0xae>
  4049c4:	4b69      	ldr	r3, [pc, #420]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4049ca:	2b00      	cmp	r3, #0
  4049cc:	d005      	beq.n	4049da <read_led_board_serial_ids+0xae>
	{
		shelf[1].present = 1;
  4049ce:	4b6c      	ldr	r3, [pc, #432]	; (404b80 <read_led_board_serial_ids+0x254>)
  4049d0:	2201      	movs	r2, #1
  4049d2:	725a      	strb	r2, [r3, #9]
		print_ecdbg("Shelf 1 present\r\n");
  4049d4:	486c      	ldr	r0, [pc, #432]	; (404b88 <read_led_board_serial_ids+0x25c>)
  4049d6:	4b67      	ldr	r3, [pc, #412]	; (404b74 <read_led_board_serial_ids+0x248>)
  4049d8:	4798      	blx	r3
	}
	if (ledBrd[2].present && ledBrd[3].present)
  4049da:	4b64      	ldr	r3, [pc, #400]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4049e0:	2b00      	cmp	r3, #0
  4049e2:	d00a      	beq.n	4049fa <read_led_board_serial_ids+0xce>
  4049e4:	4b61      	ldr	r3, [pc, #388]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  4049ea:	2b00      	cmp	r3, #0
  4049ec:	d005      	beq.n	4049fa <read_led_board_serial_ids+0xce>
	{
		shelf[2].present = 1;
  4049ee:	4b64      	ldr	r3, [pc, #400]	; (404b80 <read_led_board_serial_ids+0x254>)
  4049f0:	2201      	movs	r2, #1
  4049f2:	739a      	strb	r2, [r3, #14]
		print_ecdbg("Shelf 2 present\r\n");
  4049f4:	4865      	ldr	r0, [pc, #404]	; (404b8c <read_led_board_serial_ids+0x260>)
  4049f6:	4b5f      	ldr	r3, [pc, #380]	; (404b74 <read_led_board_serial_ids+0x248>)
  4049f8:	4798      	blx	r3
	}
	if (ledBrd[3].present && ledBrd[4].present)
  4049fa:	4b5c      	ldr	r3, [pc, #368]	; (404b6c <read_led_board_serial_ids+0x240>)
  4049fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404a00:	2b00      	cmp	r3, #0
  404a02:	d00a      	beq.n	404a1a <read_led_board_serial_ids+0xee>
  404a04:	4b59      	ldr	r3, [pc, #356]	; (404b6c <read_led_board_serial_ids+0x240>)
  404a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  404a0a:	2b00      	cmp	r3, #0
  404a0c:	d005      	beq.n	404a1a <read_led_board_serial_ids+0xee>
	{
		shelf[3].present = 1;
  404a0e:	4b5c      	ldr	r3, [pc, #368]	; (404b80 <read_led_board_serial_ids+0x254>)
  404a10:	2201      	movs	r2, #1
  404a12:	74da      	strb	r2, [r3, #19]
		print_ecdbg("Shelf 3 present\r\n");
  404a14:	485e      	ldr	r0, [pc, #376]	; (404b90 <read_led_board_serial_ids+0x264>)
  404a16:	4b57      	ldr	r3, [pc, #348]	; (404b74 <read_led_board_serial_ids+0x248>)
  404a18:	4798      	blx	r3
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  404a1a:	2300      	movs	r3, #0
  404a1c:	60bb      	str	r3, [r7, #8]
  404a1e:	e099      	b.n	404b54 <read_led_board_serial_ids+0x228>
	{
		unsigned char acc = 0;
  404a20:	2300      	movs	r3, #0
  404a22:	71fb      	strb	r3, [r7, #7]
		
		if (ledBrd[i].present)
  404a24:	4951      	ldr	r1, [pc, #324]	; (404b6c <read_led_board_serial_ids+0x240>)
  404a26:	68ba      	ldr	r2, [r7, #8]
  404a28:	4613      	mov	r3, r2
  404a2a:	00db      	lsls	r3, r3, #3
  404a2c:	1a9b      	subs	r3, r3, r2
  404a2e:	005b      	lsls	r3, r3, #1
  404a30:	440b      	add	r3, r1
  404a32:	3308      	adds	r3, #8
  404a34:	781b      	ldrb	r3, [r3, #0]
  404a36:	2b00      	cmp	r3, #0
  404a38:	f000 8089 	beq.w	404b4e <read_led_board_serial_ids+0x222>
		{
			OWWriteByte(i, 0x33); //Read ID command
  404a3c:	68bb      	ldr	r3, [r7, #8]
  404a3e:	b2db      	uxtb	r3, r3
  404a40:	4618      	mov	r0, r3
  404a42:	2133      	movs	r1, #51	; 0x33
  404a44:	4b53      	ldr	r3, [pc, #332]	; (404b94 <read_led_board_serial_ids+0x268>)
  404a46:	4798      	blx	r3
			
			ledBrd[i].idFamily = OWReadByte(i);
  404a48:	68bb      	ldr	r3, [r7, #8]
  404a4a:	b2db      	uxtb	r3, r3
  404a4c:	4618      	mov	r0, r3
  404a4e:	4b52      	ldr	r3, [pc, #328]	; (404b98 <read_led_board_serial_ids+0x26c>)
  404a50:	4798      	blx	r3
  404a52:	4603      	mov	r3, r0
  404a54:	b2d8      	uxtb	r0, r3
  404a56:	4945      	ldr	r1, [pc, #276]	; (404b6c <read_led_board_serial_ids+0x240>)
  404a58:	68ba      	ldr	r2, [r7, #8]
  404a5a:	4613      	mov	r3, r2
  404a5c:	00db      	lsls	r3, r3, #3
  404a5e:	1a9b      	subs	r3, r3, r2
  404a60:	005b      	lsls	r3, r3, #1
  404a62:	440b      	add	r3, r1
  404a64:	4602      	mov	r2, r0
  404a66:	701a      	strb	r2, [r3, #0]
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
  404a68:	4940      	ldr	r1, [pc, #256]	; (404b6c <read_led_board_serial_ids+0x240>)
  404a6a:	68ba      	ldr	r2, [r7, #8]
  404a6c:	4613      	mov	r3, r2
  404a6e:	00db      	lsls	r3, r3, #3
  404a70:	1a9b      	subs	r3, r3, r2
  404a72:	005b      	lsls	r3, r3, #1
  404a74:	440b      	add	r3, r1
  404a76:	781b      	ldrb	r3, [r3, #0]
  404a78:	2000      	movs	r0, #0
  404a7a:	4619      	mov	r1, r3
  404a7c:	4b47      	ldr	r3, [pc, #284]	; (404b9c <read_led_board_serial_ids+0x270>)
  404a7e:	4798      	blx	r3
  404a80:	4603      	mov	r3, r0
  404a82:	71fb      	strb	r3, [r7, #7]
			
			for (int j=0; j<6; j++)
  404a84:	2300      	movs	r3, #0
  404a86:	603b      	str	r3, [r7, #0]
  404a88:	e025      	b.n	404ad6 <read_led_board_serial_ids+0x1aa>
			{
				ledBrd[i].id[j] = OWReadByte(i);
  404a8a:	68bb      	ldr	r3, [r7, #8]
  404a8c:	b2db      	uxtb	r3, r3
  404a8e:	4618      	mov	r0, r3
  404a90:	4b41      	ldr	r3, [pc, #260]	; (404b98 <read_led_board_serial_ids+0x26c>)
  404a92:	4798      	blx	r3
  404a94:	4603      	mov	r3, r0
  404a96:	b2d8      	uxtb	r0, r3
  404a98:	4934      	ldr	r1, [pc, #208]	; (404b6c <read_led_board_serial_ids+0x240>)
  404a9a:	68ba      	ldr	r2, [r7, #8]
  404a9c:	4613      	mov	r3, r2
  404a9e:	00db      	lsls	r3, r3, #3
  404aa0:	1a9b      	subs	r3, r3, r2
  404aa2:	005b      	lsls	r3, r3, #1
  404aa4:	683a      	ldr	r2, [r7, #0]
  404aa6:	4413      	add	r3, r2
  404aa8:	440b      	add	r3, r1
  404aaa:	4602      	mov	r2, r0
  404aac:	705a      	strb	r2, [r3, #1]
				acc = crc8_add(acc, ledBrd[i].id[j]);
  404aae:	492f      	ldr	r1, [pc, #188]	; (404b6c <read_led_board_serial_ids+0x240>)
  404ab0:	68ba      	ldr	r2, [r7, #8]
  404ab2:	4613      	mov	r3, r2
  404ab4:	00db      	lsls	r3, r3, #3
  404ab6:	1a9b      	subs	r3, r3, r2
  404ab8:	005b      	lsls	r3, r3, #1
  404aba:	683a      	ldr	r2, [r7, #0]
  404abc:	4413      	add	r3, r2
  404abe:	440b      	add	r3, r1
  404ac0:	785b      	ldrb	r3, [r3, #1]
  404ac2:	79fa      	ldrb	r2, [r7, #7]
  404ac4:	4610      	mov	r0, r2
  404ac6:	4619      	mov	r1, r3
  404ac8:	4b34      	ldr	r3, [pc, #208]	; (404b9c <read_led_board_serial_ids+0x270>)
  404aca:	4798      	blx	r3
  404acc:	4603      	mov	r3, r0
  404ace:	71fb      	strb	r3, [r7, #7]
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
  404ad0:	683b      	ldr	r3, [r7, #0]
  404ad2:	3301      	adds	r3, #1
  404ad4:	603b      	str	r3, [r7, #0]
  404ad6:	683b      	ldr	r3, [r7, #0]
  404ad8:	2b05      	cmp	r3, #5
  404ada:	ddd6      	ble.n	404a8a <read_led_board_serial_ids+0x15e>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
  404adc:	68bb      	ldr	r3, [r7, #8]
  404ade:	b2db      	uxtb	r3, r3
  404ae0:	4618      	mov	r0, r3
  404ae2:	4b2d      	ldr	r3, [pc, #180]	; (404b98 <read_led_board_serial_ids+0x26c>)
  404ae4:	4798      	blx	r3
  404ae6:	4603      	mov	r3, r0
  404ae8:	b2d8      	uxtb	r0, r3
  404aea:	4920      	ldr	r1, [pc, #128]	; (404b6c <read_led_board_serial_ids+0x240>)
  404aec:	68ba      	ldr	r2, [r7, #8]
  404aee:	4613      	mov	r3, r2
  404af0:	00db      	lsls	r3, r3, #3
  404af2:	1a9b      	subs	r3, r3, r2
  404af4:	005b      	lsls	r3, r3, #1
  404af6:	440b      	add	r3, r1
  404af8:	4602      	mov	r2, r0
  404afa:	71da      	strb	r2, [r3, #7]
			
			if (acc != ledBrd[i].idcsum)
  404afc:	491b      	ldr	r1, [pc, #108]	; (404b6c <read_led_board_serial_ids+0x240>)
  404afe:	68ba      	ldr	r2, [r7, #8]
  404b00:	4613      	mov	r3, r2
  404b02:	00db      	lsls	r3, r3, #3
  404b04:	1a9b      	subs	r3, r3, r2
  404b06:	005b      	lsls	r3, r3, #1
  404b08:	440b      	add	r3, r1
  404b0a:	79db      	ldrb	r3, [r3, #7]
  404b0c:	79fa      	ldrb	r2, [r7, #7]
  404b0e:	429a      	cmp	r2, r3
  404b10:	d01d      	beq.n	404b4e <read_led_board_serial_ids+0x222>
			{
				sysErr.ledBrdSerialIdCsum |= BIT(i); //SE_FAIL;
  404b12:	4b23      	ldr	r3, [pc, #140]	; (404ba0 <read_led_board_serial_ids+0x274>)
  404b14:	7b1b      	ldrb	r3, [r3, #12]
  404b16:	b2d9      	uxtb	r1, r3
  404b18:	2201      	movs	r2, #1
  404b1a:	68bb      	ldr	r3, [r7, #8]
  404b1c:	fa02 f303 	lsl.w	r3, r2, r3
  404b20:	b2db      	uxtb	r3, r3
  404b22:	460a      	mov	r2, r1
  404b24:	4313      	orrs	r3, r2
  404b26:	b2db      	uxtb	r3, r3
  404b28:	b2da      	uxtb	r2, r3
  404b2a:	4b1d      	ldr	r3, [pc, #116]	; (404ba0 <read_led_board_serial_ids+0x274>)
  404b2c:	731a      	strb	r2, [r3, #12]
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
  404b2e:	490f      	ldr	r1, [pc, #60]	; (404b6c <read_led_board_serial_ids+0x240>)
  404b30:	68ba      	ldr	r2, [r7, #8]
  404b32:	4613      	mov	r3, r2
  404b34:	00db      	lsls	r3, r3, #3
  404b36:	1a9b      	subs	r3, r3, r2
  404b38:	005b      	lsls	r3, r3, #1
  404b3a:	440b      	add	r3, r1
  404b3c:	3308      	adds	r3, #8
  404b3e:	2200      	movs	r2, #0
  404b40:	701a      	strb	r2, [r3, #0]
				print_ecdbg("Invalid serial ID checksum.\r\n");
  404b42:	4818      	ldr	r0, [pc, #96]	; (404ba4 <read_led_board_serial_ids+0x278>)
  404b44:	4b0b      	ldr	r3, [pc, #44]	; (404b74 <read_led_board_serial_ids+0x248>)
  404b46:	4798      	blx	r3
				
				electroclaveState = STATE_CHASSIS_ERROR;
  404b48:	4b17      	ldr	r3, [pc, #92]	; (404ba8 <read_led_board_serial_ids+0x27c>)
  404b4a:	2208      	movs	r2, #8
  404b4c:	701a      	strb	r2, [r3, #0]
		shelf[3].present = 1;
		print_ecdbg("Shelf 3 present\r\n");
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  404b4e:	68bb      	ldr	r3, [r7, #8]
  404b50:	3301      	adds	r3, #1
  404b52:	60bb      	str	r3, [r7, #8]
  404b54:	68bb      	ldr	r3, [r7, #8]
  404b56:	2b04      	cmp	r3, #4
  404b58:	f77f af62 	ble.w	404a20 <read_led_board_serial_ids+0xf4>
				
				electroclaveState = STATE_CHASSIS_ERROR;
			}
		}
	}
}
  404b5c:	3710      	adds	r7, #16
  404b5e:	46bd      	mov	sp, r7
  404b60:	bd80      	pop	{r7, pc}
  404b62:	bf00      	nop
  404b64:	00402ecd 	.word	0x00402ecd
  404b68:	00402f89 	.word	0x00402f89
  404b6c:	20401674 	.word	0x20401674
  404b70:	0040cdec 	.word	0x0040cdec
  404b74:	004026b1 	.word	0x004026b1
  404b78:	004048f9 	.word	0x004048f9
  404b7c:	0040cd14 	.word	0x0040cd14
  404b80:	204016bc 	.word	0x204016bc
  404b84:	0040ce08 	.word	0x0040ce08
  404b88:	0040ce1c 	.word	0x0040ce1c
  404b8c:	0040ce30 	.word	0x0040ce30
  404b90:	0040ce44 	.word	0x0040ce44
  404b94:	00403129 	.word	0x00403129
  404b98:	00403169 	.word	0x00403169
  404b9c:	004031b5 	.word	0x004031b5
  404ba0:	204016e4 	.word	0x204016e4
  404ba4:	0040ce58 	.word	0x0040ce58
  404ba8:	204009c3 	.word	0x204009c3

00404bac <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
  404bac:	b480      	push	{r7}
  404bae:	b087      	sub	sp, #28
  404bb0:	af00      	add	r7, sp, #0
  404bb2:	4603      	mov	r3, r0
  404bb4:	71fb      	strb	r3, [r7, #7]
	unsigned char idx;
	unsigned int hours;
	float32_t intensity = 0;
  404bb6:	f04f 0300 	mov.w	r3, #0
  404bba:	617b      	str	r3, [r7, #20]
	float32_t tmpSanMinutes = 0;
  404bbc:	f04f 0300 	mov.w	r3, #0
  404bc0:	613b      	str	r3, [r7, #16]
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
  404bc2:	79fa      	ldrb	r2, [r7, #7]
  404bc4:	4910      	ldr	r1, [pc, #64]	; (404c08 <check_led_brd_side_lifetime+0x5c>)
  404bc6:	4613      	mov	r3, r2
  404bc8:	009b      	lsls	r3, r3, #2
  404bca:	4413      	add	r3, r2
  404bcc:	440b      	add	r3, r1
  404bce:	785b      	ldrb	r3, [r3, #1]
  404bd0:	73fb      	strb	r3, [r7, #15]
	
	
	hours = h.hrs[idx];
  404bd2:	7bfb      	ldrb	r3, [r7, #15]
  404bd4:	4a0d      	ldr	r2, [pc, #52]	; (404c0c <check_led_brd_side_lifetime+0x60>)
  404bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  404bda:	60bb      	str	r3, [r7, #8]
#endif 0 //debug 23feb16 this makes the board hang???	

//	ledBrdSide[sideIdx].sanitizeMinutes = 60; //DEBUG hard code to 1 minute per Christian 24jun15 take this out later
//	ledBrdSide[sideIdx].sanitizeMinutes = 255; //DEBUG hard code to 10 minutes to debug BOTDRIVE problem 31jul15 take this out later
//	ledBrdSide[sideIdx].sanitizeMinutes = 30; //DEBUG hard code to 30 minutes for sanitation tests 16jan16
	ledBrdSide[sideIdx].sanitizeMinutes = 1; //DEBUG hard code to 1 minute for trade show 25feb16
  404bdc:	79fa      	ldrb	r2, [r7, #7]
  404bde:	490a      	ldr	r1, [pc, #40]	; (404c08 <check_led_brd_side_lifetime+0x5c>)
  404be0:	4613      	mov	r3, r2
  404be2:	009b      	lsls	r3, r3, #2
  404be4:	4413      	add	r3, r2
  404be6:	440b      	add	r3, r1
  404be8:	2201      	movs	r2, #1
  404bea:	701a      	strb	r2, [r3, #0]


	if (hours < 2001)
  404bec:	68bb      	ldr	r3, [r7, #8]
  404bee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  404bf2:	d801      	bhi.n	404bf8 <check_led_brd_side_lifetime+0x4c>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
  404bf4:	2301      	movs	r3, #1
  404bf6:	e000      	b.n	404bfa <check_led_brd_side_lifetime+0x4e>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
  404bf8:	2300      	movs	r3, #0
//DEBUG 24jun15 need to function even with these errors for demo purposes		electroclaveState = STATE_CHASSIS_ERROR;
	}
}
  404bfa:	4618      	mov	r0, r3
  404bfc:	371c      	adds	r7, #28
  404bfe:	46bd      	mov	sp, r7
  404c00:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c04:	4770      	bx	lr
  404c06:	bf00      	nop
  404c08:	204016f8 	.word	0x204016f8
  404c0c:	20401724 	.word	0x20401724

00404c10 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
  404c10:	b580      	push	{r7, lr}
  404c12:	b082      	sub	sp, #8
  404c14:	af00      	add	r7, sp, #0
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  404c16:	2300      	movs	r3, #0
  404c18:	607b      	str	r3, [r7, #4]
  404c1a:	e029      	b.n	404c70 <check_led_brd_side_lifetimes+0x60>
	{
		brdIdx = ledBrdSide[i].boardIdx;
  404c1c:	4917      	ldr	r1, [pc, #92]	; (404c7c <check_led_brd_side_lifetimes+0x6c>)
  404c1e:	687a      	ldr	r2, [r7, #4]
  404c20:	4613      	mov	r3, r2
  404c22:	009b      	lsls	r3, r3, #2
  404c24:	4413      	add	r3, r2
  404c26:	440b      	add	r3, r1
  404c28:	791b      	ldrb	r3, [r3, #4]
  404c2a:	70fb      	strb	r3, [r7, #3]
		
		if (ledBrd[brdIdx].present)
  404c2c:	78fa      	ldrb	r2, [r7, #3]
  404c2e:	4914      	ldr	r1, [pc, #80]	; (404c80 <check_led_brd_side_lifetimes+0x70>)
  404c30:	4613      	mov	r3, r2
  404c32:	00db      	lsls	r3, r3, #3
  404c34:	1a9b      	subs	r3, r3, r2
  404c36:	005b      	lsls	r3, r3, #1
  404c38:	440b      	add	r3, r1
  404c3a:	3308      	adds	r3, #8
  404c3c:	781b      	ldrb	r3, [r3, #0]
  404c3e:	2b00      	cmp	r3, #0
  404c40:	d013      	beq.n	404c6a <check_led_brd_side_lifetimes+0x5a>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
  404c42:	687b      	ldr	r3, [r7, #4]
  404c44:	b2db      	uxtb	r3, r3
  404c46:	4618      	mov	r0, r3
  404c48:	4b0e      	ldr	r3, [pc, #56]	; (404c84 <check_led_brd_side_lifetimes+0x74>)
  404c4a:	4798      	blx	r3
  404c4c:	4603      	mov	r3, r0
  404c4e:	2b00      	cmp	r3, #0
  404c50:	bf0c      	ite	eq
  404c52:	2301      	moveq	r3, #1
  404c54:	2300      	movne	r3, #0
  404c56:	b2db      	uxtb	r3, r3
  404c58:	4618      	mov	r0, r3
  404c5a:	4908      	ldr	r1, [pc, #32]	; (404c7c <check_led_brd_side_lifetimes+0x6c>)
  404c5c:	687a      	ldr	r2, [r7, #4]
  404c5e:	4613      	mov	r3, r2
  404c60:	009b      	lsls	r3, r3, #2
  404c62:	4413      	add	r3, r2
  404c64:	440b      	add	r3, r1
  404c66:	4602      	mov	r2, r0
  404c68:	709a      	strb	r2, [r3, #2]
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  404c6a:	687b      	ldr	r3, [r7, #4]
  404c6c:	3301      	adds	r3, #1
  404c6e:	607b      	str	r3, [r7, #4]
  404c70:	687b      	ldr	r3, [r7, #4]
  404c72:	2b07      	cmp	r3, #7
  404c74:	ddd2      	ble.n	404c1c <check_led_brd_side_lifetimes+0xc>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
  404c76:	3708      	adds	r7, #8
  404c78:	46bd      	mov	sp, r7
  404c7a:	bd80      	pop	{r7, pc}
  404c7c:	204016f8 	.word	0x204016f8
  404c80:	20401674 	.word	0x20401674
  404c84:	00404bad 	.word	0x00404bad

00404c88 <adc_process_task>:
extern uint32_t g_afec1_sample_data;


int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
  404c88:	b580      	push	{r7, lr}
  404c8a:	b082      	sub	sp, #8
  404c8c:	af00      	add	r7, sp, #0
  404c8e:	4603      	mov	r3, r0
  404c90:	71fb      	strb	r3, [r7, #7]
	
	switch(shelfIdx)
  404c92:	79fb      	ldrb	r3, [r7, #7]
  404c94:	2b03      	cmp	r3, #3
  404c96:	f200 8083 	bhi.w	404da0 <adc_process_task+0x118>
  404c9a:	a201      	add	r2, pc, #4	; (adr r2, 404ca0 <adc_process_task+0x18>)
  404c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404ca0:	00404cb1 	.word	0x00404cb1
  404ca4:	00404ced 	.word	0x00404ced
  404ca8:	00404d29 	.word	0x00404d29
  404cac:	00404d65 	.word	0x00404d65
	{
		case 0:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  404cb0:	4840      	ldr	r0, [pc, #256]	; (404db4 <adc_process_task+0x12c>)
  404cb2:	2109      	movs	r1, #9
  404cb4:	4b40      	ldr	r3, [pc, #256]	; (404db8 <adc_process_task+0x130>)
  404cb6:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404cb8:	483e      	ldr	r0, [pc, #248]	; (404db4 <adc_process_task+0x12c>)
  404cba:	4b40      	ldr	r3, [pc, #256]	; (404dbc <adc_process_task+0x134>)
  404cbc:	4798      	blx	r3
			is_conversion_done = false;
  404cbe:	4b40      	ldr	r3, [pc, #256]	; (404dc0 <adc_process_task+0x138>)
  404cc0:	2200      	movs	r2, #0
  404cc2:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404cc4:	bf00      	nop
  404cc6:	4b3e      	ldr	r3, [pc, #248]	; (404dc0 <adc_process_task+0x138>)
  404cc8:	781b      	ldrb	r3, [r3, #0]
  404cca:	f083 0301 	eor.w	r3, r3, #1
  404cce:	b2db      	uxtb	r3, r3
  404cd0:	2b00      	cmp	r3, #0
  404cd2:	d1f8      	bne.n	404cc6 <adc_process_task+0x3e>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  404cd4:	79fb      	ldrb	r3, [r7, #7]
  404cd6:	4a3b      	ldr	r2, [pc, #236]	; (404dc4 <adc_process_task+0x13c>)
  404cd8:	6812      	ldr	r2, [r2, #0]
  404cda:	b291      	uxth	r1, r2
  404cdc:	4a3a      	ldr	r2, [pc, #232]	; (404dc8 <adc_process_task+0x140>)
  404cde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  404ce2:	4834      	ldr	r0, [pc, #208]	; (404db4 <adc_process_task+0x12c>)
  404ce4:	2109      	movs	r1, #9
  404ce6:	4b39      	ldr	r3, [pc, #228]	; (404dcc <adc_process_task+0x144>)
  404ce8:	4798      	blx	r3
			break;
  404cea:	e059      	b.n	404da0 <adc_process_task+0x118>
		case 1:
			afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  404cec:	4838      	ldr	r0, [pc, #224]	; (404dd0 <adc_process_task+0x148>)
  404cee:	2104      	movs	r1, #4
  404cf0:	4b31      	ldr	r3, [pc, #196]	; (404db8 <adc_process_task+0x130>)
  404cf2:	4798      	blx	r3
			afec_start_software_conversion(AFEC0);
  404cf4:	4836      	ldr	r0, [pc, #216]	; (404dd0 <adc_process_task+0x148>)
  404cf6:	4b31      	ldr	r3, [pc, #196]	; (404dbc <adc_process_task+0x134>)
  404cf8:	4798      	blx	r3
			is_conversion_done = false;
  404cfa:	4b31      	ldr	r3, [pc, #196]	; (404dc0 <adc_process_task+0x138>)
  404cfc:	2200      	movs	r2, #0
  404cfe:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404d00:	bf00      	nop
  404d02:	4b2f      	ldr	r3, [pc, #188]	; (404dc0 <adc_process_task+0x138>)
  404d04:	781b      	ldrb	r3, [r3, #0]
  404d06:	f083 0301 	eor.w	r3, r3, #1
  404d0a:	b2db      	uxtb	r3, r3
  404d0c:	2b00      	cmp	r3, #0
  404d0e:	d1f8      	bne.n	404d02 <adc_process_task+0x7a>
			bluesense_buf[shelfIdx] = g_afec0_sample_data;
  404d10:	79fb      	ldrb	r3, [r7, #7]
  404d12:	4a30      	ldr	r2, [pc, #192]	; (404dd4 <adc_process_task+0x14c>)
  404d14:	6812      	ldr	r2, [r2, #0]
  404d16:	b291      	uxth	r1, r2
  404d18:	4a2b      	ldr	r2, [pc, #172]	; (404dc8 <adc_process_task+0x140>)
  404d1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  404d1e:	482c      	ldr	r0, [pc, #176]	; (404dd0 <adc_process_task+0x148>)
  404d20:	2104      	movs	r1, #4
  404d22:	4b2a      	ldr	r3, [pc, #168]	; (404dcc <adc_process_task+0x144>)
  404d24:	4798      	blx	r3
			break;
  404d26:	e03b      	b.n	404da0 <adc_process_task+0x118>
		case 2:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_4);
  404d28:	4822      	ldr	r0, [pc, #136]	; (404db4 <adc_process_task+0x12c>)
  404d2a:	2104      	movs	r1, #4
  404d2c:	4b22      	ldr	r3, [pc, #136]	; (404db8 <adc_process_task+0x130>)
  404d2e:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404d30:	4820      	ldr	r0, [pc, #128]	; (404db4 <adc_process_task+0x12c>)
  404d32:	4b22      	ldr	r3, [pc, #136]	; (404dbc <adc_process_task+0x134>)
  404d34:	4798      	blx	r3
			is_conversion_done = false;
  404d36:	4b22      	ldr	r3, [pc, #136]	; (404dc0 <adc_process_task+0x138>)
  404d38:	2200      	movs	r2, #0
  404d3a:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404d3c:	bf00      	nop
  404d3e:	4b20      	ldr	r3, [pc, #128]	; (404dc0 <adc_process_task+0x138>)
  404d40:	781b      	ldrb	r3, [r3, #0]
  404d42:	f083 0301 	eor.w	r3, r3, #1
  404d46:	b2db      	uxtb	r3, r3
  404d48:	2b00      	cmp	r3, #0
  404d4a:	d1f8      	bne.n	404d3e <adc_process_task+0xb6>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  404d4c:	79fb      	ldrb	r3, [r7, #7]
  404d4e:	4a1d      	ldr	r2, [pc, #116]	; (404dc4 <adc_process_task+0x13c>)
  404d50:	6812      	ldr	r2, [r2, #0]
  404d52:	b291      	uxth	r1, r2
  404d54:	4a1c      	ldr	r2, [pc, #112]	; (404dc8 <adc_process_task+0x140>)
  404d56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_4);
  404d5a:	4816      	ldr	r0, [pc, #88]	; (404db4 <adc_process_task+0x12c>)
  404d5c:	2104      	movs	r1, #4
  404d5e:	4b1b      	ldr	r3, [pc, #108]	; (404dcc <adc_process_task+0x144>)
  404d60:	4798      	blx	r3
			break;
  404d62:	e01d      	b.n	404da0 <adc_process_task+0x118>
		case 3:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_5);
  404d64:	4813      	ldr	r0, [pc, #76]	; (404db4 <adc_process_task+0x12c>)
  404d66:	2105      	movs	r1, #5
  404d68:	4b13      	ldr	r3, [pc, #76]	; (404db8 <adc_process_task+0x130>)
  404d6a:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404d6c:	4811      	ldr	r0, [pc, #68]	; (404db4 <adc_process_task+0x12c>)
  404d6e:	4b13      	ldr	r3, [pc, #76]	; (404dbc <adc_process_task+0x134>)
  404d70:	4798      	blx	r3
			is_conversion_done = false;
  404d72:	4b13      	ldr	r3, [pc, #76]	; (404dc0 <adc_process_task+0x138>)
  404d74:	2200      	movs	r2, #0
  404d76:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404d78:	bf00      	nop
  404d7a:	4b11      	ldr	r3, [pc, #68]	; (404dc0 <adc_process_task+0x138>)
  404d7c:	781b      	ldrb	r3, [r3, #0]
  404d7e:	f083 0301 	eor.w	r3, r3, #1
  404d82:	b2db      	uxtb	r3, r3
  404d84:	2b00      	cmp	r3, #0
  404d86:	d1f8      	bne.n	404d7a <adc_process_task+0xf2>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  404d88:	79fb      	ldrb	r3, [r7, #7]
  404d8a:	4a0e      	ldr	r2, [pc, #56]	; (404dc4 <adc_process_task+0x13c>)
  404d8c:	6812      	ldr	r2, [r2, #0]
  404d8e:	b291      	uxth	r1, r2
  404d90:	4a0d      	ldr	r2, [pc, #52]	; (404dc8 <adc_process_task+0x140>)
  404d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_5);
  404d96:	4807      	ldr	r0, [pc, #28]	; (404db4 <adc_process_task+0x12c>)
  404d98:	2105      	movs	r1, #5
  404d9a:	4b0c      	ldr	r3, [pc, #48]	; (404dcc <adc_process_task+0x144>)
  404d9c:	4798      	blx	r3
			break;		
  404d9e:	bf00      	nop
	}
	
	return bluesense_buf[shelfIdx];
  404da0:	79fb      	ldrb	r3, [r7, #7]
  404da2:	4a09      	ldr	r2, [pc, #36]	; (404dc8 <adc_process_task+0x140>)
  404da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  404da8:	b21b      	sxth	r3, r3
}
  404daa:	4618      	mov	r0, r3
  404dac:	3708      	adds	r7, #8
  404dae:	46bd      	mov	sp, r7
  404db0:	bd80      	pop	{r7, pc}
  404db2:	bf00      	nop
  404db4:	40064000 	.word	0x40064000
  404db8:	0040410d 	.word	0x0040410d
  404dbc:	004040f5 	.word	0x004040f5
  404dc0:	204009b8 	.word	0x204009b8
  404dc4:	20400b20 	.word	0x20400b20
  404dc8:	2040136c 	.word	0x2040136c
  404dcc:	00404155 	.word	0x00404155
  404dd0:	4003c000 	.word	0x4003c000
  404dd4:	20401364 	.word	0x20401364

00404dd8 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
  404dd8:	b590      	push	{r4, r7, lr}
  404dda:	b0a1      	sub	sp, #132	; 0x84
  404ddc:	af02      	add	r7, sp, #8
  404dde:	4603      	mov	r3, r0
  404de0:	71fb      	strb	r3, [r7, #7]
	uint16_t bluesense[8] = {0,0,0,0,0,0,0,0};
  404de2:	2300      	movs	r3, #0
  404de4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  404de8:	2300      	movs	r3, #0
  404dea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  404dee:	2300      	movs	r3, #0
  404df0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  404df4:	2300      	movs	r3, #0
  404df6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  404dfa:	2300      	movs	r3, #0
  404dfc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  404e00:	2300      	movs	r3, #0
  404e02:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  404e06:	2300      	movs	r3, #0
  404e08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  404e0c:	2300      	movs	r3, #0
  404e0e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	unsigned long bluesenseAccumulated = 0;
  404e12:	2300      	movs	r3, #0
  404e14:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned int bluesenseAvg = 0;
  404e16:	2300      	movs	r3, #0
  404e18:	66bb      	str	r3, [r7, #104]	; 0x68
	
	char str[80];
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
  404e1a:	79fb      	ldrb	r3, [r7, #7]
  404e1c:	4618      	mov	r0, r3
  404e1e:	2101      	movs	r1, #1
  404e20:	4b37      	ldr	r3, [pc, #220]	; (404f00 <check_shelf_for_devices+0x128>)
  404e22:	4798      	blx	r3
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
  404e24:	2064      	movs	r0, #100	; 0x64
  404e26:	4b37      	ldr	r3, [pc, #220]	; (404f04 <check_shelf_for_devices+0x12c>)
  404e28:	4798      	blx	r3
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  404e2a:	2300      	movs	r3, #0
  404e2c:	673b      	str	r3, [r7, #112]	; 0x70
  404e2e:	e025      	b.n	404e7c <check_shelf_for_devices+0xa4>
	{
		bluesense[i] = adc_process_task(shelfPosition);
  404e30:	79fb      	ldrb	r3, [r7, #7]
  404e32:	4618      	mov	r0, r3
  404e34:	4b34      	ldr	r3, [pc, #208]	; (404f08 <check_shelf_for_devices+0x130>)
  404e36:	4798      	blx	r3
  404e38:	4603      	mov	r3, r0
  404e3a:	b29a      	uxth	r2, r3
  404e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404e3e:	005b      	lsls	r3, r3, #1
  404e40:	f107 0178 	add.w	r1, r7, #120	; 0x78
  404e44:	440b      	add	r3, r1
  404e46:	f823 2c20 	strh.w	r2, [r3, #-32]
		
		if (bluesense[i] & 0x8000) //don't try to average negative numbers
  404e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404e4c:	005b      	lsls	r3, r3, #1
  404e4e:	f107 0278 	add.w	r2, r7, #120	; 0x78
  404e52:	4413      	add	r3, r2
  404e54:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404e58:	b29b      	uxth	r3, r3
  404e5a:	b21b      	sxth	r3, r3
  404e5c:	2b00      	cmp	r3, #0
  404e5e:	db0a      	blt.n	404e76 <check_shelf_for_devices+0x9e>
		{
			bluesenseAccumulated += 0;
		}
		else
		{
			bluesenseAccumulated += bluesense[i];
  404e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404e62:	005b      	lsls	r3, r3, #1
  404e64:	f107 0278 	add.w	r2, r7, #120	; 0x78
  404e68:	4413      	add	r3, r2
  404e6a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404e6e:	461a      	mov	r2, r3
  404e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  404e72:	4413      	add	r3, r2
  404e74:	677b      	str	r3, [r7, #116]	; 0x74
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  404e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404e78:	3301      	adds	r3, #1
  404e7a:	673b      	str	r3, [r7, #112]	; 0x70
  404e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404e7e:	2b07      	cmp	r3, #7
  404e80:	ddd6      	ble.n	404e30 <check_shelf_for_devices+0x58>
		{
			bluesenseAccumulated += bluesense[i];
		}
	}
	
	bluesenseAvg = bluesenseAccumulated/8;
  404e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  404e84:	08db      	lsrs	r3, r3, #3
  404e86:	66bb      	str	r3, [r7, #104]	; 0x68
	
	led_shelf(shelfPosition, LED_OFF);
  404e88:	79fb      	ldrb	r3, [r7, #7]
  404e8a:	4618      	mov	r0, r3
  404e8c:	2100      	movs	r1, #0
  404e8e:	4b1c      	ldr	r3, [pc, #112]	; (404f00 <check_shelf_for_devices+0x128>)
  404e90:	4798      	blx	r3
	
	memset(str,0x00, 80);
  404e92:	f107 0308 	add.w	r3, r7, #8
  404e96:	4618      	mov	r0, r3
  404e98:	2100      	movs	r1, #0
  404e9a:	2250      	movs	r2, #80	; 0x50
  404e9c:	4b1b      	ldr	r3, [pc, #108]	; (404f0c <check_shelf_for_devices+0x134>)
  404e9e:	4798      	blx	r3

	for (int i=0; i<8; i++)
  404ea0:	2300      	movs	r3, #0
  404ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
  404ea4:	e018      	b.n	404ed8 <check_shelf_for_devices+0x100>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
  404ea6:	79fa      	ldrb	r2, [r7, #7]
  404ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404eaa:	005b      	lsls	r3, r3, #1
  404eac:	f107 0178 	add.w	r1, r7, #120	; 0x78
  404eb0:	440b      	add	r3, r1
  404eb2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404eb6:	4619      	mov	r1, r3
  404eb8:	f107 0308 	add.w	r3, r7, #8
  404ebc:	9100      	str	r1, [sp, #0]
  404ebe:	4618      	mov	r0, r3
  404ec0:	4913      	ldr	r1, [pc, #76]	; (404f10 <check_shelf_for_devices+0x138>)
  404ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404ec4:	4c13      	ldr	r4, [pc, #76]	; (404f14 <check_shelf_for_devices+0x13c>)
  404ec6:	47a0      	blx	r4
		print_ecdbg(str);
  404ec8:	f107 0308 	add.w	r3, r7, #8
  404ecc:	4618      	mov	r0, r3
  404ece:	4b12      	ldr	r3, [pc, #72]	; (404f18 <check_shelf_for_devices+0x140>)
  404ed0:	4798      	blx	r3
	
	led_shelf(shelfPosition, LED_OFF);
	
	memset(str,0x00, 80);

	for (int i=0; i<8; i++)
  404ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404ed4:	3301      	adds	r3, #1
  404ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
  404ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404eda:	2b07      	cmp	r3, #7
  404edc:	dde3      	ble.n	404ea6 <check_shelf_for_devices+0xce>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
		print_ecdbg(str);
	}

	if ((bluesenseAvg < 0xC00) ||  (bluesenseAvg & 0x8000))//full range for 12 bit number is 0xFFF, but this number is 2's complement meaning it can (and it does) go negative
  404ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  404ee4:	d304      	bcc.n	404ef0 <check_shelf_for_devices+0x118>
  404ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404eec:	2b00      	cmp	r3, #0
  404eee:	d001      	beq.n	404ef4 <check_shelf_for_devices+0x11c>
	{
		return DEVICES_PRESENT;
  404ef0:	2301      	movs	r3, #1
  404ef2:	e000      	b.n	404ef6 <check_shelf_for_devices+0x11e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
  404ef4:	2300      	movs	r3, #0
	}
}
  404ef6:	4618      	mov	r0, r3
  404ef8:	377c      	adds	r7, #124	; 0x7c
  404efa:	46bd      	mov	sp, r7
  404efc:	bd90      	pop	{r4, r7, pc}
  404efe:	bf00      	nop
  404f00:	00402a45 	.word	0x00402a45
  404f04:	00403a49 	.word	0x00403a49
  404f08:	00404c89 	.word	0x00404c89
  404f0c:	004073e1 	.word	0x004073e1
  404f10:	0040ce78 	.word	0x0040ce78
  404f14:	004075fd 	.word	0x004075fd
  404f18:	004026b1 	.word	0x004026b1

00404f1c <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
  404f1c:	b580      	push	{r7, lr}
  404f1e:	b082      	sub	sp, #8
  404f20:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_SHELVES; i++)
  404f22:	2300      	movs	r3, #0
  404f24:	607b      	str	r3, [r7, #4]
  404f26:	e02d      	b.n	404f84 <check_shelves_for_devices+0x68>
	{
		if (shelf[i].present)
  404f28:	4919      	ldr	r1, [pc, #100]	; (404f90 <check_shelves_for_devices+0x74>)
  404f2a:	687a      	ldr	r2, [r7, #4]
  404f2c:	4613      	mov	r3, r2
  404f2e:	009b      	lsls	r3, r3, #2
  404f30:	4413      	add	r3, r2
  404f32:	440b      	add	r3, r1
  404f34:	791b      	ldrb	r3, [r3, #4]
  404f36:	2b00      	cmp	r3, #0
  404f38:	d021      	beq.n	404f7e <check_shelves_for_devices+0x62>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);
  404f3a:	687b      	ldr	r3, [r7, #4]
  404f3c:	b2db      	uxtb	r3, r3
  404f3e:	4618      	mov	r0, r3
  404f40:	4b14      	ldr	r3, [pc, #80]	; (404f94 <check_shelves_for_devices+0x78>)
  404f42:	4798      	blx	r3
  404f44:	4603      	mov	r3, r0
  404f46:	4618      	mov	r0, r3
  404f48:	4911      	ldr	r1, [pc, #68]	; (404f90 <check_shelves_for_devices+0x74>)
  404f4a:	687a      	ldr	r2, [r7, #4]
  404f4c:	4613      	mov	r3, r2
  404f4e:	009b      	lsls	r3, r3, #2
  404f50:	4413      	add	r3, r2
  404f52:	440b      	add	r3, r1
  404f54:	4602      	mov	r2, r0
  404f56:	70da      	strb	r2, [r3, #3]
			
			if (shelf[i].devicesPresent)
  404f58:	490d      	ldr	r1, [pc, #52]	; (404f90 <check_shelves_for_devices+0x74>)
  404f5a:	687a      	ldr	r2, [r7, #4]
  404f5c:	4613      	mov	r3, r2
  404f5e:	009b      	lsls	r3, r3, #2
  404f60:	4413      	add	r3, r2
  404f62:	440b      	add	r3, r1
  404f64:	78db      	ldrb	r3, [r3, #3]
  404f66:	2b00      	cmp	r3, #0
  404f68:	d009      	beq.n	404f7e <check_shelves_for_devices+0x62>
			{
				print_ecdbg("Devices detected on shelf ");
  404f6a:	480b      	ldr	r0, [pc, #44]	; (404f98 <check_shelves_for_devices+0x7c>)
  404f6c:	4b0b      	ldr	r3, [pc, #44]	; (404f9c <check_shelves_for_devices+0x80>)
  404f6e:	4798      	blx	r3
				print_ecdbg_num(i);
  404f70:	687b      	ldr	r3, [r7, #4]
  404f72:	4618      	mov	r0, r3
  404f74:	4b0a      	ldr	r3, [pc, #40]	; (404fa0 <check_shelves_for_devices+0x84>)
  404f76:	4798      	blx	r3
				print_ecdbg("\r\n");
  404f78:	480a      	ldr	r0, [pc, #40]	; (404fa4 <check_shelves_for_devices+0x88>)
  404f7a:	4b08      	ldr	r3, [pc, #32]	; (404f9c <check_shelves_for_devices+0x80>)
  404f7c:	4798      	blx	r3
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
  404f7e:	687b      	ldr	r3, [r7, #4]
  404f80:	3301      	adds	r3, #1
  404f82:	607b      	str	r3, [r7, #4]
  404f84:	687b      	ldr	r3, [r7, #4]
  404f86:	2b03      	cmp	r3, #3
  404f88:	ddce      	ble.n	404f28 <check_shelves_for_devices+0xc>
				print_ecdbg_num(i);
				print_ecdbg("\r\n");
			}
		}
	}
}
  404f8a:	3708      	adds	r7, #8
  404f8c:	46bd      	mov	sp, r7
  404f8e:	bd80      	pop	{r7, pc}
  404f90:	204016bc 	.word	0x204016bc
  404f94:	00404dd9 	.word	0x00404dd9
  404f98:	0040ce98 	.word	0x0040ce98
  404f9c:	004026b1 	.word	0x004026b1
  404fa0:	004048f9 	.word	0x004048f9
  404fa4:	0040cd14 	.word	0x0040cd14

00404fa8 <print_pca9952_errors>:


void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1);
void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1)
{
  404fa8:	b580      	push	{r7, lr}
  404faa:	b086      	sub	sp, #24
  404fac:	af00      	add	r7, sp, #0
  404fae:	4603      	mov	r3, r0
  404fb0:	71fb      	strb	r3, [r7, #7]
  404fb2:	460b      	mov	r3, r1
  404fb4:	71bb      	strb	r3, [r7, #6]
  404fb6:	4613      	mov	r3, r2
  404fb8:	717b      	strb	r3, [r7, #5]
	unsigned char bit;
	
	switch (sideSel)
  404fba:	79fb      	ldrb	r3, [r7, #7]
  404fbc:	2b00      	cmp	r3, #0
  404fbe:	d03c      	beq.n	40503a <print_pca9952_errors+0x92>
  404fc0:	2b01      	cmp	r3, #1
  404fc2:	f040 8096 	bne.w	4050f2 <print_pca9952_errors+0x14a>
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
  404fc6:	484c      	ldr	r0, [pc, #304]	; (4050f8 <print_pca9952_errors+0x150>)
  404fc8:	4b4c      	ldr	r3, [pc, #304]	; (4050fc <print_pca9952_errors+0x154>)
  404fca:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  404fcc:	2300      	movs	r3, #0
  404fce:	617b      	str	r3, [r7, #20]
  404fd0:	e022      	b.n	405018 <print_pca9952_errors+0x70>
			{
				bit = (1 << i);
  404fd2:	2201      	movs	r2, #1
  404fd4:	697b      	ldr	r3, [r7, #20]
  404fd6:	fa02 f303 	lsl.w	r3, r2, r3
  404fda:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  404fdc:	7afa      	ldrb	r2, [r7, #11]
  404fde:	79bb      	ldrb	r3, [r7, #6]
  404fe0:	4013      	ands	r3, r2
  404fe2:	b2db      	uxtb	r3, r3
  404fe4:	2b00      	cmp	r3, #0
  404fe6:	d014      	beq.n	405012 <print_pca9952_errors+0x6a>
				{
					print_ecdbg_num(i);
  404fe8:	697b      	ldr	r3, [r7, #20]
  404fea:	4618      	mov	r0, r3
  404fec:	4b44      	ldr	r3, [pc, #272]	; (405100 <print_pca9952_errors+0x158>)
  404fee:	4798      	blx	r3
					print_ecdbg(" ");
  404ff0:	4844      	ldr	r0, [pc, #272]	; (405104 <print_pca9952_errors+0x15c>)
  404ff2:	4b42      	ldr	r3, [pc, #264]	; (4050fc <print_pca9952_errors+0x154>)
  404ff4:	4798      	blx	r3
					sysErr.topdrive |= BIT(i); //SE_FAIL
  404ff6:	4b44      	ldr	r3, [pc, #272]	; (405108 <print_pca9952_errors+0x160>)
  404ff8:	781b      	ldrb	r3, [r3, #0]
  404ffa:	b2d9      	uxtb	r1, r3
  404ffc:	2201      	movs	r2, #1
  404ffe:	697b      	ldr	r3, [r7, #20]
  405000:	fa02 f303 	lsl.w	r3, r2, r3
  405004:	b2db      	uxtb	r3, r3
  405006:	460a      	mov	r2, r1
  405008:	4313      	orrs	r3, r2
  40500a:	b2db      	uxtb	r3, r3
  40500c:	b2da      	uxtb	r2, r3
  40500e:	4b3e      	ldr	r3, [pc, #248]	; (405108 <print_pca9952_errors+0x160>)
  405010:	701a      	strb	r2, [r3, #0]
	switch (sideSel)
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
			
			for (int i=0; i<8; i++)
  405012:	697b      	ldr	r3, [r7, #20]
  405014:	3301      	adds	r3, #1
  405016:	617b      	str	r3, [r7, #20]
  405018:	697b      	ldr	r3, [r7, #20]
  40501a:	2b07      	cmp	r3, #7
  40501c:	ddd9      	ble.n	404fd2 <print_pca9952_errors+0x2a>
					sysErr.topdrive |= BIT(i); //SE_FAIL
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  40501e:	483b      	ldr	r0, [pc, #236]	; (40510c <print_pca9952_errors+0x164>)
  405020:	4b36      	ldr	r3, [pc, #216]	; (4050fc <print_pca9952_errors+0x154>)
  405022:	4798      	blx	r3
			
			if (eflag1 != 0)
  405024:	797b      	ldrb	r3, [r7, #5]
  405026:	2b00      	cmp	r3, #0
  405028:	d006      	beq.n	405038 <print_pca9952_errors+0x90>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
  40502a:	4839      	ldr	r0, [pc, #228]	; (405110 <print_pca9952_errors+0x168>)
  40502c:	4b33      	ldr	r3, [pc, #204]	; (4050fc <print_pca9952_errors+0x154>)
  40502e:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  405030:	4b38      	ldr	r3, [pc, #224]	; (405114 <print_pca9952_errors+0x16c>)
  405032:	2208      	movs	r2, #8
  405034:	701a      	strb	r2, [r3, #0]
			}
			
			break;
  405036:	e05c      	b.n	4050f2 <print_pca9952_errors+0x14a>
  405038:	e05b      	b.n	4050f2 <print_pca9952_errors+0x14a>

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
  40503a:	4837      	ldr	r0, [pc, #220]	; (405118 <print_pca9952_errors+0x170>)
  40503c:	4b2f      	ldr	r3, [pc, #188]	; (4050fc <print_pca9952_errors+0x154>)
  40503e:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  405040:	2300      	movs	r3, #0
  405042:	613b      	str	r3, [r7, #16]
  405044:	e01d      	b.n	405082 <print_pca9952_errors+0xda>
			{
				bit = (1 << i);
  405046:	2201      	movs	r2, #1
  405048:	693b      	ldr	r3, [r7, #16]
  40504a:	fa02 f303 	lsl.w	r3, r2, r3
  40504e:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  405050:	7afa      	ldrb	r2, [r7, #11]
  405052:	79bb      	ldrb	r3, [r7, #6]
  405054:	4013      	ands	r3, r2
  405056:	b2db      	uxtb	r3, r3
  405058:	2b00      	cmp	r3, #0
  40505a:	d00f      	beq.n	40507c <print_pca9952_errors+0xd4>
				{
					print_ecdbg_num(i);
  40505c:	693b      	ldr	r3, [r7, #16]
  40505e:	4618      	mov	r0, r3
  405060:	4b27      	ldr	r3, [pc, #156]	; (405100 <print_pca9952_errors+0x158>)
  405062:	4798      	blx	r3
					print_ecdbg(" ");
  405064:	4827      	ldr	r0, [pc, #156]	; (405104 <print_pca9952_errors+0x15c>)
  405066:	4b25      	ldr	r3, [pc, #148]	; (4050fc <print_pca9952_errors+0x154>)
  405068:	4798      	blx	r3
					sysErr.botdrive |= BIT(i); //SE_FAIL;
  40506a:	4b27      	ldr	r3, [pc, #156]	; (405108 <print_pca9952_errors+0x160>)
  40506c:	685b      	ldr	r3, [r3, #4]
  40506e:	2101      	movs	r1, #1
  405070:	693a      	ldr	r2, [r7, #16]
  405072:	fa01 f202 	lsl.w	r2, r1, r2
  405076:	4313      	orrs	r3, r2
  405078:	4a23      	ldr	r2, [pc, #140]	; (405108 <print_pca9952_errors+0x160>)
  40507a:	6053      	str	r3, [r2, #4]
			break;

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
			
			for (int i=0; i<8; i++)
  40507c:	693b      	ldr	r3, [r7, #16]
  40507e:	3301      	adds	r3, #1
  405080:	613b      	str	r3, [r7, #16]
  405082:	693b      	ldr	r3, [r7, #16]
  405084:	2b07      	cmp	r3, #7
  405086:	ddde      	ble.n	405046 <print_pca9952_errors+0x9e>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  405088:	2300      	movs	r3, #0
  40508a:	60fb      	str	r3, [r7, #12]
  40508c:	e01f      	b.n	4050ce <print_pca9952_errors+0x126>
			{
				bit = (1 << i);
  40508e:	2201      	movs	r2, #1
  405090:	68fb      	ldr	r3, [r7, #12]
  405092:	fa02 f303 	lsl.w	r3, r2, r3
  405096:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag1)
  405098:	7afa      	ldrb	r2, [r7, #11]
  40509a:	797b      	ldrb	r3, [r7, #5]
  40509c:	4013      	ands	r3, r2
  40509e:	b2db      	uxtb	r3, r3
  4050a0:	2b00      	cmp	r3, #0
  4050a2:	d011      	beq.n	4050c8 <print_pca9952_errors+0x120>
				{
					print_ecdbg_num((i+8));
  4050a4:	68fb      	ldr	r3, [r7, #12]
  4050a6:	3308      	adds	r3, #8
  4050a8:	4618      	mov	r0, r3
  4050aa:	4b15      	ldr	r3, [pc, #84]	; (405100 <print_pca9952_errors+0x158>)
  4050ac:	4798      	blx	r3
					print_ecdbg(" ");
  4050ae:	4815      	ldr	r0, [pc, #84]	; (405104 <print_pca9952_errors+0x15c>)
  4050b0:	4b12      	ldr	r3, [pc, #72]	; (4050fc <print_pca9952_errors+0x154>)
  4050b2:	4798      	blx	r3
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
  4050b4:	4b14      	ldr	r3, [pc, #80]	; (405108 <print_pca9952_errors+0x160>)
  4050b6:	685b      	ldr	r3, [r3, #4]
  4050b8:	68fa      	ldr	r2, [r7, #12]
  4050ba:	3208      	adds	r2, #8
  4050bc:	2101      	movs	r1, #1
  4050be:	fa01 f202 	lsl.w	r2, r1, r2
  4050c2:	4313      	orrs	r3, r2
  4050c4:	4a10      	ldr	r2, [pc, #64]	; (405108 <print_pca9952_errors+0x160>)
  4050c6:	6053      	str	r3, [r2, #4]
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  4050c8:	68fb      	ldr	r3, [r7, #12]
  4050ca:	3301      	adds	r3, #1
  4050cc:	60fb      	str	r3, [r7, #12]
  4050ce:	68fb      	ldr	r3, [r7, #12]
  4050d0:	2b03      	cmp	r3, #3
  4050d2:	dddc      	ble.n	40508e <print_pca9952_errors+0xe6>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  4050d4:	480d      	ldr	r0, [pc, #52]	; (40510c <print_pca9952_errors+0x164>)
  4050d6:	4b09      	ldr	r3, [pc, #36]	; (4050fc <print_pca9952_errors+0x154>)
  4050d8:	4798      	blx	r3
			
			if ((eflag1 & 0xF0) != 0)
  4050da:	797b      	ldrb	r3, [r7, #5]
  4050dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4050e0:	2b00      	cmp	r3, #0
  4050e2:	d005      	beq.n	4050f0 <print_pca9952_errors+0x148>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
  4050e4:	480d      	ldr	r0, [pc, #52]	; (40511c <print_pca9952_errors+0x174>)
  4050e6:	4b05      	ldr	r3, [pc, #20]	; (4050fc <print_pca9952_errors+0x154>)
  4050e8:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  4050ea:	4b0a      	ldr	r3, [pc, #40]	; (405114 <print_pca9952_errors+0x16c>)
  4050ec:	2208      	movs	r2, #8
  4050ee:	701a      	strb	r2, [r3, #0]
			}
			break;
  4050f0:	bf00      	nop
	}
}
  4050f2:	3718      	adds	r7, #24
  4050f4:	46bd      	mov	sp, r7
  4050f6:	bd80      	pop	{r7, pc}
  4050f8:	0040ceb4 	.word	0x0040ceb4
  4050fc:	004026b1 	.word	0x004026b1
  405100:	004048f9 	.word	0x004048f9
  405104:	0040ced4 	.word	0x0040ced4
  405108:	204016e4 	.word	0x204016e4
  40510c:	0040cd14 	.word	0x0040cd14
  405110:	0040ced8 	.word	0x0040ced8
  405114:	204009c3 	.word	0x204009c3
  405118:	0040cf14 	.word	0x0040cf14
  40511c:	0040cf34 	.word	0x0040cf34

00405120 <test_led_driver_channels>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void test_led_driver_channels(void);
void test_led_driver_channels(void)
{
  405120:	b580      	push	{r7, lr}
  405122:	b086      	sub	sp, #24
  405124:	af00      	add	r7, sp, #0
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
  405126:	2300      	movs	r3, #0
  405128:	75fb      	strb	r3, [r7, #23]
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  40512a:	2300      	movs	r3, #0
  40512c:	613b      	str	r3, [r7, #16]
  40512e:	e00e      	b.n	40514e <test_led_driver_channels+0x2e>
	{
		if (shelf[i].present)
  405130:	496a      	ldr	r1, [pc, #424]	; (4052dc <test_led_driver_channels+0x1bc>)
  405132:	693a      	ldr	r2, [r7, #16]
  405134:	4613      	mov	r3, r2
  405136:	009b      	lsls	r3, r3, #2
  405138:	4413      	add	r3, r2
  40513a:	440b      	add	r3, r1
  40513c:	791b      	ldrb	r3, [r3, #4]
  40513e:	2b00      	cmp	r3, #0
  405140:	d002      	beq.n	405148 <test_led_driver_channels+0x28>
		{
			numShelvesPresent++;
  405142:	7dfb      	ldrb	r3, [r7, #23]
  405144:	3301      	adds	r3, #1
  405146:	75fb      	strb	r3, [r7, #23]
void test_led_driver_channels(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  405148:	693b      	ldr	r3, [r7, #16]
  40514a:	3301      	adds	r3, #1
  40514c:	613b      	str	r3, [r7, #16]
  40514e:	693b      	ldr	r3, [r7, #16]
  405150:	2b03      	cmp	r3, #3
  405152:	dded      	ble.n	405130 <test_led_driver_channels+0x10>
		{
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
  405154:	7dfb      	ldrb	r3, [r7, #23]
  405156:	2b00      	cmp	r3, #0
  405158:	f000 80ad 	beq.w	4052b6 <test_led_driver_channels+0x196>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  40515c:	2000      	movs	r0, #0
  40515e:	2143      	movs	r1, #67	; 0x43
  405160:	22c8      	movs	r2, #200	; 0xc8
  405162:	4b5f      	ldr	r3, [pc, #380]	; (4052e0 <test_led_driver_channels+0x1c0>)
  405164:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  405166:	2001      	movs	r0, #1
  405168:	2143      	movs	r1, #67	; 0x43
  40516a:	22c8      	movs	r2, #200	; 0xc8
  40516c:	4b5c      	ldr	r3, [pc, #368]	; (4052e0 <test_led_driver_channels+0x1c0>)
  40516e:	4798      	blx	r3

		for (int i=0; i<NUM_SHELVES; i++)
  405170:	2300      	movs	r3, #0
  405172:	60fb      	str	r3, [r7, #12]
  405174:	e011      	b.n	40519a <test_led_driver_channels+0x7a>
		{
			if (shelf[i].present)
  405176:	4959      	ldr	r1, [pc, #356]	; (4052dc <test_led_driver_channels+0x1bc>)
  405178:	68fa      	ldr	r2, [r7, #12]
  40517a:	4613      	mov	r3, r2
  40517c:	009b      	lsls	r3, r3, #2
  40517e:	4413      	add	r3, r2
  405180:	440b      	add	r3, r1
  405182:	791b      	ldrb	r3, [r3, #4]
  405184:	2b00      	cmp	r3, #0
  405186:	d005      	beq.n	405194 <test_led_driver_channels+0x74>
			{
				led_shelf(i, LED_ON);
  405188:	68fb      	ldr	r3, [r7, #12]
  40518a:	b2db      	uxtb	r3, r3
  40518c:	4618      	mov	r0, r3
  40518e:	2101      	movs	r1, #1
  405190:	4b54      	ldr	r3, [pc, #336]	; (4052e4 <test_led_driver_channels+0x1c4>)
  405192:	4798      	blx	r3
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
  405194:	68fb      	ldr	r3, [r7, #12]
  405196:	3301      	adds	r3, #1
  405198:	60fb      	str	r3, [r7, #12]
  40519a:	68fb      	ldr	r3, [r7, #12]
  40519c:	2b03      	cmp	r3, #3
  40519e:	ddea      	ble.n	405176 <test_led_driver_channels+0x56>
			{
				led_shelf(i, LED_ON);
			}
		}
		
		udelay(100); //maybe need this while testing LED boards with resistors in place of real LEDs 31july2015
  4051a0:	2064      	movs	r0, #100	; 0x64
  4051a2:	4b51      	ldr	r3, [pc, #324]	; (4052e8 <test_led_driver_channels+0x1c8>)
  4051a4:	4798      	blx	r3

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
  4051a6:	2000      	movs	r0, #0
  4051a8:	2101      	movs	r1, #1
  4051aa:	2240      	movs	r2, #64	; 0x40
  4051ac:	4b4c      	ldr	r3, [pc, #304]	; (4052e0 <test_led_driver_channels+0x1c0>)
  4051ae:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
  4051b0:	2001      	movs	r0, #1
  4051b2:	2101      	movs	r1, #1
  4051b4:	2240      	movs	r2, #64	; 0x40
  4051b6:	4b4a      	ldr	r3, [pc, #296]	; (4052e0 <test_led_driver_channels+0x1c0>)
  4051b8:	4798      	blx	r3
		
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
  4051ba:	2000      	movs	r0, #0
  4051bc:	2101      	movs	r1, #1
  4051be:	4b4b      	ldr	r3, [pc, #300]	; (4052ec <test_led_driver_channels+0x1cc>)
  4051c0:	4798      	blx	r3
  4051c2:	4603      	mov	r3, r0
  4051c4:	71fb      	strb	r3, [r7, #7]
			
			if ((tmp1 & 0x40) == 0)
  4051c6:	79fb      	ldrb	r3, [r7, #7]
  4051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4051cc:	2b00      	cmp	r3, #0
  4051ce:	d125      	bne.n	40521c <test_led_driver_channels+0xfc>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
  4051d0:	2000      	movs	r0, #0
  4051d2:	2144      	movs	r1, #68	; 0x44
  4051d4:	4b45      	ldr	r3, [pc, #276]	; (4052ec <test_led_driver_channels+0x1cc>)
  4051d6:	4798      	blx	r3
  4051d8:	4603      	mov	r3, r0
  4051da:	461a      	mov	r2, r3
  4051dc:	4b44      	ldr	r3, [pc, #272]	; (4052f0 <test_led_driver_channels+0x1d0>)
  4051de:	701a      	strb	r2, [r3, #0]
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  4051e0:	2000      	movs	r0, #0
  4051e2:	2145      	movs	r1, #69	; 0x45
  4051e4:	4b41      	ldr	r3, [pc, #260]	; (4052ec <test_led_driver_channels+0x1cc>)
  4051e6:	4798      	blx	r3
  4051e8:	4603      	mov	r3, r0
  4051ea:	461a      	mov	r2, r3
  4051ec:	4b41      	ldr	r3, [pc, #260]	; (4052f4 <test_led_driver_channels+0x1d4>)
  4051ee:	701a      	strb	r2, [r3, #0]
				
				if ((topEflag0 != 0) || (topEflag1 != 0))
  4051f0:	4b3f      	ldr	r3, [pc, #252]	; (4052f0 <test_led_driver_channels+0x1d0>)
  4051f2:	781b      	ldrb	r3, [r3, #0]
  4051f4:	2b00      	cmp	r3, #0
  4051f6:	d103      	bne.n	405200 <test_led_driver_channels+0xe0>
  4051f8:	4b3e      	ldr	r3, [pc, #248]	; (4052f4 <test_led_driver_channels+0x1d4>)
  4051fa:	781b      	ldrb	r3, [r3, #0]
  4051fc:	2b00      	cmp	r3, #0
  4051fe:	d00c      	beq.n	40521a <test_led_driver_channels+0xfa>
				{
					if (!firstTimeThroughPCA9952)
  405200:	4b3d      	ldr	r3, [pc, #244]	; (4052f8 <test_led_driver_channels+0x1d8>)
  405202:	781b      	ldrb	r3, [r3, #0]
  405204:	2b00      	cmp	r3, #0
  405206:	d108      	bne.n	40521a <test_led_driver_channels+0xfa>
					{
						print_pca9952_errors(TOP, topEflag0, topEflag1);
  405208:	4b39      	ldr	r3, [pc, #228]	; (4052f0 <test_led_driver_channels+0x1d0>)
  40520a:	781a      	ldrb	r2, [r3, #0]
  40520c:	4b39      	ldr	r3, [pc, #228]	; (4052f4 <test_led_driver_channels+0x1d4>)
  40520e:	781b      	ldrb	r3, [r3, #0]
  405210:	2001      	movs	r0, #1
  405212:	4611      	mov	r1, r2
  405214:	461a      	mov	r2, r3
  405216:	4b39      	ldr	r3, [pc, #228]	; (4052fc <test_led_driver_channels+0x1dc>)
  405218:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_TOP strings is complete
  40521a:	e000      	b.n	40521e <test_led_driver_channels+0xfe>
			}
			
		}
  40521c:	e7cd      	b.n	4051ba <test_led_driver_channels+0x9a>
		
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
  40521e:	2001      	movs	r0, #1
  405220:	2101      	movs	r1, #1
  405222:	4b32      	ldr	r3, [pc, #200]	; (4052ec <test_led_driver_channels+0x1cc>)
  405224:	4798      	blx	r3
  405226:	4603      	mov	r3, r0
  405228:	71bb      	strb	r3, [r7, #6]
			
			if ((tmp2 & 0x40) == 0)
  40522a:	79bb      	ldrb	r3, [r7, #6]
  40522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405230:	2b00      	cmp	r3, #0
  405232:	d126      	bne.n	405282 <test_led_driver_channels+0x162>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
  405234:	2001      	movs	r0, #1
  405236:	2144      	movs	r1, #68	; 0x44
  405238:	4b2c      	ldr	r3, [pc, #176]	; (4052ec <test_led_driver_channels+0x1cc>)
  40523a:	4798      	blx	r3
  40523c:	4603      	mov	r3, r0
  40523e:	461a      	mov	r2, r3
  405240:	4b2f      	ldr	r3, [pc, #188]	; (405300 <test_led_driver_channels+0x1e0>)
  405242:	701a      	strb	r2, [r3, #0]
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  405244:	2001      	movs	r0, #1
  405246:	2145      	movs	r1, #69	; 0x45
  405248:	4b28      	ldr	r3, [pc, #160]	; (4052ec <test_led_driver_channels+0x1cc>)
  40524a:	4798      	blx	r3
  40524c:	4603      	mov	r3, r0
  40524e:	461a      	mov	r2, r3
  405250:	4b2c      	ldr	r3, [pc, #176]	; (405304 <test_led_driver_channels+0x1e4>)
  405252:	701a      	strb	r2, [r3, #0]
				
				if ((botEflag0 != 0) || (botEflag1 != 0))
  405254:	4b2a      	ldr	r3, [pc, #168]	; (405300 <test_led_driver_channels+0x1e0>)
  405256:	781b      	ldrb	r3, [r3, #0]
  405258:	2b00      	cmp	r3, #0
  40525a:	d103      	bne.n	405264 <test_led_driver_channels+0x144>
  40525c:	4b29      	ldr	r3, [pc, #164]	; (405304 <test_led_driver_channels+0x1e4>)
  40525e:	781b      	ldrb	r3, [r3, #0]
  405260:	2b00      	cmp	r3, #0
  405262:	d00d      	beq.n	405280 <test_led_driver_channels+0x160>
				{
					if (!firstTimeThroughPCA9952)
  405264:	4b24      	ldr	r3, [pc, #144]	; (4052f8 <test_led_driver_channels+0x1d8>)
  405266:	781b      	ldrb	r3, [r3, #0]
  405268:	2b00      	cmp	r3, #0
  40526a:	d109      	bne.n	405280 <test_led_driver_channels+0x160>
					{
						print_pca9952_errors(BOTTOM, botEflag0, botEflag1);
  40526c:	4b24      	ldr	r3, [pc, #144]	; (405300 <test_led_driver_channels+0x1e0>)
  40526e:	781a      	ldrb	r2, [r3, #0]
  405270:	4b24      	ldr	r3, [pc, #144]	; (405304 <test_led_driver_channels+0x1e4>)
  405272:	781b      	ldrb	r3, [r3, #0]
  405274:	2000      	movs	r0, #0
  405276:	4611      	mov	r1, r2
  405278:	461a      	mov	r2, r3
  40527a:	4b20      	ldr	r3, [pc, #128]	; (4052fc <test_led_driver_channels+0x1dc>)
  40527c:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_BOTTOM strings is complete
  40527e:	e001      	b.n	405284 <test_led_driver_channels+0x164>
  405280:	e000      	b.n	405284 <test_led_driver_channels+0x164>
			}
			
		}
  405282:	e7cc      	b.n	40521e <test_led_driver_channels+0xfe>
		
		for (int i=0; i<NUM_SHELVES; i++)
  405284:	2300      	movs	r3, #0
  405286:	60bb      	str	r3, [r7, #8]
  405288:	e008      	b.n	40529c <test_led_driver_channels+0x17c>
		{
			led_shelf(i, LED_OFF);
  40528a:	68bb      	ldr	r3, [r7, #8]
  40528c:	b2db      	uxtb	r3, r3
  40528e:	4618      	mov	r0, r3
  405290:	2100      	movs	r1, #0
  405292:	4b14      	ldr	r3, [pc, #80]	; (4052e4 <test_led_driver_channels+0x1c4>)
  405294:	4798      	blx	r3
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
  405296:	68bb      	ldr	r3, [r7, #8]
  405298:	3301      	adds	r3, #1
  40529a:	60bb      	str	r3, [r7, #8]
  40529c:	68bb      	ldr	r3, [r7, #8]
  40529e:	2b03      	cmp	r3, #3
  4052a0:	ddf3      	ble.n	40528a <test_led_driver_channels+0x16a>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  4052a2:	2000      	movs	r0, #0
  4052a4:	2143      	movs	r1, #67	; 0x43
  4052a6:	22c8      	movs	r2, #200	; 0xc8
  4052a8:	4b0d      	ldr	r3, [pc, #52]	; (4052e0 <test_led_driver_channels+0x1c0>)
  4052aa:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  4052ac:	2001      	movs	r0, #1
  4052ae:	2143      	movs	r1, #67	; 0x43
  4052b0:	22c8      	movs	r2, #200	; 0xc8
  4052b2:	4b0b      	ldr	r3, [pc, #44]	; (4052e0 <test_led_driver_channels+0x1c0>)
  4052b4:	4798      	blx	r3
	}
	
	sysErr.topdrive = topEflag0;
  4052b6:	4b0e      	ldr	r3, [pc, #56]	; (4052f0 <test_led_driver_channels+0x1d0>)
  4052b8:	781a      	ldrb	r2, [r3, #0]
  4052ba:	4b13      	ldr	r3, [pc, #76]	; (405308 <test_led_driver_channels+0x1e8>)
  4052bc:	701a      	strb	r2, [r3, #0]
	sysErr.botdrive = (botEflag1 << 8) | botEflag0;
  4052be:	4b11      	ldr	r3, [pc, #68]	; (405304 <test_led_driver_channels+0x1e4>)
  4052c0:	781b      	ldrb	r3, [r3, #0]
  4052c2:	021b      	lsls	r3, r3, #8
  4052c4:	4a0e      	ldr	r2, [pc, #56]	; (405300 <test_led_driver_channels+0x1e0>)
  4052c6:	7812      	ldrb	r2, [r2, #0]
  4052c8:	4313      	orrs	r3, r2
  4052ca:	461a      	mov	r2, r3
  4052cc:	4b0e      	ldr	r3, [pc, #56]	; (405308 <test_led_driver_channels+0x1e8>)
  4052ce:	605a      	str	r2, [r3, #4]
	firstTimeThroughPCA9952 = 0;
  4052d0:	4b09      	ldr	r3, [pc, #36]	; (4052f8 <test_led_driver_channels+0x1d8>)
  4052d2:	2200      	movs	r2, #0
  4052d4:	701a      	strb	r2, [r3, #0]
}
  4052d6:	3718      	adds	r7, #24
  4052d8:	46bd      	mov	sp, r7
  4052da:	bd80      	pop	{r7, pc}
  4052dc:	204016bc 	.word	0x204016bc
  4052e0:	004026d9 	.word	0x004026d9
  4052e4:	00402a45 	.word	0x00402a45
  4052e8:	00402cbd 	.word	0x00402cbd
  4052ec:	00402749 	.word	0x00402749
  4052f0:	204009da 	.word	0x204009da
  4052f4:	204009db 	.word	0x204009db
  4052f8:	20400015 	.word	0x20400015
  4052fc:	00404fa9 	.word	0x00404fa9
  405300:	204009dc 	.word	0x204009dc
  405304:	204009dd 	.word	0x204009dd
  405308:	204016e4 	.word	0x204016e4

0040530c <set_shelves_active_inactive>:

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
  40530c:	b580      	push	{r7, lr}
  40530e:	b082      	sub	sp, #8
  405310:	af00      	add	r7, sp, #0

	test_led_driver_channels();
  405312:	4b53      	ldr	r3, [pc, #332]	; (405460 <set_shelves_active_inactive+0x154>)
  405314:	4798      	blx	r3
	
	numActiveShelves = 0;
  405316:	4b53      	ldr	r3, [pc, #332]	; (405464 <set_shelves_active_inactive+0x158>)
  405318:	2200      	movs	r2, #0
  40531a:	701a      	strb	r2, [r3, #0]
	numPresentShelves = 0;
  40531c:	4b52      	ldr	r3, [pc, #328]	; (405468 <set_shelves_active_inactive+0x15c>)
  40531e:	2200      	movs	r2, #0
  405320:	701a      	strb	r2, [r3, #0]
	
	for (int i=0; i<NUM_SHELVES; i++)
  405322:	2300      	movs	r3, #0
  405324:	607b      	str	r3, [r7, #4]
  405326:	e00a      	b.n	40533e <set_shelves_active_inactive+0x32>
	{
		shelf[i].active = SHELF_INACTIVE;
  405328:	4950      	ldr	r1, [pc, #320]	; (40546c <set_shelves_active_inactive+0x160>)
  40532a:	687a      	ldr	r2, [r7, #4]
  40532c:	4613      	mov	r3, r2
  40532e:	009b      	lsls	r3, r3, #2
  405330:	4413      	add	r3, r2
  405332:	440b      	add	r3, r1
  405334:	2200      	movs	r2, #0
  405336:	701a      	strb	r2, [r3, #0]
	test_led_driver_channels();
	
	numActiveShelves = 0;
	numPresentShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
  405338:	687b      	ldr	r3, [r7, #4]
  40533a:	3301      	adds	r3, #1
  40533c:	607b      	str	r3, [r7, #4]
  40533e:	687b      	ldr	r3, [r7, #4]
  405340:	2b03      	cmp	r3, #3
  405342:	ddf1      	ble.n	405328 <set_shelves_active_inactive+0x1c>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  405344:	4b49      	ldr	r3, [pc, #292]	; (40546c <set_shelves_active_inactive+0x160>)
  405346:	791b      	ldrb	r3, [r3, #4]
  405348:	2b00      	cmp	r3, #0
  40534a:	d01d      	beq.n	405388 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  40534c:	4b48      	ldr	r3, [pc, #288]	; (405470 <set_shelves_active_inactive+0x164>)
  40534e:	789b      	ldrb	r3, [r3, #2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  405350:	2b00      	cmp	r3, #0
  405352:	d119      	bne.n	405388 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
  405354:	4b46      	ldr	r3, [pc, #280]	; (405470 <set_shelves_active_inactive+0x164>)
  405356:	79db      	ldrb	r3, [r3, #7]
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  405358:	2b00      	cmp	r3, #0
  40535a:	d115      	bne.n	405388 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  40535c:	4b42      	ldr	r3, [pc, #264]	; (405468 <set_shelves_active_inactive+0x15c>)
  40535e:	781b      	ldrb	r3, [r3, #0]
  405360:	3301      	adds	r3, #1
  405362:	b2da      	uxtb	r2, r3
  405364:	4b40      	ldr	r3, [pc, #256]	; (405468 <set_shelves_active_inactive+0x15c>)
  405366:	701a      	strb	r2, [r3, #0]
		
		if (shelf[0].devicesPresent)
  405368:	4b40      	ldr	r3, [pc, #256]	; (40546c <set_shelves_active_inactive+0x160>)
  40536a:	78db      	ldrb	r3, [r3, #3]
  40536c:	2b00      	cmp	r3, #0
  40536e:	d00b      	beq.n	405388 <set_shelves_active_inactive+0x7c>
		{
			shelf[0].active = SHELF_ACTIVE;
  405370:	4b3e      	ldr	r3, [pc, #248]	; (40546c <set_shelves_active_inactive+0x160>)
  405372:	2201      	movs	r2, #1
  405374:	701a      	strb	r2, [r3, #0]
			numActiveShelves++;
  405376:	4b3b      	ldr	r3, [pc, #236]	; (405464 <set_shelves_active_inactive+0x158>)
  405378:	781b      	ldrb	r3, [r3, #0]
  40537a:	3301      	adds	r3, #1
  40537c:	b2da      	uxtb	r2, r3
  40537e:	4b39      	ldr	r3, [pc, #228]	; (405464 <set_shelves_active_inactive+0x158>)
  405380:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 0 active\r\n");
  405382:	483c      	ldr	r0, [pc, #240]	; (405474 <set_shelves_active_inactive+0x168>)
  405384:	4b3c      	ldr	r3, [pc, #240]	; (405478 <set_shelves_active_inactive+0x16c>)
  405386:	4798      	blx	r3
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  405388:	4b38      	ldr	r3, [pc, #224]	; (40546c <set_shelves_active_inactive+0x160>)
  40538a:	7a5b      	ldrb	r3, [r3, #9]
  40538c:	2b00      	cmp	r3, #0
  40538e:	d01d      	beq.n	4053cc <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  405390:	4b37      	ldr	r3, [pc, #220]	; (405470 <set_shelves_active_inactive+0x164>)
  405392:	7b1b      	ldrb	r3, [r3, #12]
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  405394:	2b00      	cmp	r3, #0
  405396:	d119      	bne.n	4053cc <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
  405398:	4b35      	ldr	r3, [pc, #212]	; (405470 <set_shelves_active_inactive+0x164>)
  40539a:	7c5b      	ldrb	r3, [r3, #17]
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  40539c:	2b00      	cmp	r3, #0
  40539e:	d115      	bne.n	4053cc <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  4053a0:	4b31      	ldr	r3, [pc, #196]	; (405468 <set_shelves_active_inactive+0x15c>)
  4053a2:	781b      	ldrb	r3, [r3, #0]
  4053a4:	3301      	adds	r3, #1
  4053a6:	b2da      	uxtb	r2, r3
  4053a8:	4b2f      	ldr	r3, [pc, #188]	; (405468 <set_shelves_active_inactive+0x15c>)
  4053aa:	701a      	strb	r2, [r3, #0]
		
		if (shelf[1].devicesPresent)
  4053ac:	4b2f      	ldr	r3, [pc, #188]	; (40546c <set_shelves_active_inactive+0x160>)
  4053ae:	7a1b      	ldrb	r3, [r3, #8]
  4053b0:	2b00      	cmp	r3, #0
  4053b2:	d00b      	beq.n	4053cc <set_shelves_active_inactive+0xc0>
		{
			shelf[1].active = SHELF_ACTIVE;
  4053b4:	4b2d      	ldr	r3, [pc, #180]	; (40546c <set_shelves_active_inactive+0x160>)
  4053b6:	2201      	movs	r2, #1
  4053b8:	715a      	strb	r2, [r3, #5]
			numActiveShelves++;
  4053ba:	4b2a      	ldr	r3, [pc, #168]	; (405464 <set_shelves_active_inactive+0x158>)
  4053bc:	781b      	ldrb	r3, [r3, #0]
  4053be:	3301      	adds	r3, #1
  4053c0:	b2da      	uxtb	r2, r3
  4053c2:	4b28      	ldr	r3, [pc, #160]	; (405464 <set_shelves_active_inactive+0x158>)
  4053c4:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 1 active\r\n");
  4053c6:	482d      	ldr	r0, [pc, #180]	; (40547c <set_shelves_active_inactive+0x170>)
  4053c8:	4b2b      	ldr	r3, [pc, #172]	; (405478 <set_shelves_active_inactive+0x16c>)
  4053ca:	4798      	blx	r3
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  4053cc:	4b27      	ldr	r3, [pc, #156]	; (40546c <set_shelves_active_inactive+0x160>)
  4053ce:	7b9b      	ldrb	r3, [r3, #14]
  4053d0:	2b00      	cmp	r3, #0
  4053d2:	d01d      	beq.n	405410 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  4053d4:	4b26      	ldr	r3, [pc, #152]	; (405470 <set_shelves_active_inactive+0x164>)
  4053d6:	7d9b      	ldrb	r3, [r3, #22]
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  4053d8:	2b00      	cmp	r3, #0
  4053da:	d119      	bne.n	405410 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
  4053dc:	4b24      	ldr	r3, [pc, #144]	; (405470 <set_shelves_active_inactive+0x164>)
  4053de:	7edb      	ldrb	r3, [r3, #27]
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  4053e0:	2b00      	cmp	r3, #0
  4053e2:	d115      	bne.n	405410 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  4053e4:	4b20      	ldr	r3, [pc, #128]	; (405468 <set_shelves_active_inactive+0x15c>)
  4053e6:	781b      	ldrb	r3, [r3, #0]
  4053e8:	3301      	adds	r3, #1
  4053ea:	b2da      	uxtb	r2, r3
  4053ec:	4b1e      	ldr	r3, [pc, #120]	; (405468 <set_shelves_active_inactive+0x15c>)
  4053ee:	701a      	strb	r2, [r3, #0]
		
		if (shelf[2].devicesPresent)
  4053f0:	4b1e      	ldr	r3, [pc, #120]	; (40546c <set_shelves_active_inactive+0x160>)
  4053f2:	7b5b      	ldrb	r3, [r3, #13]
  4053f4:	2b00      	cmp	r3, #0
  4053f6:	d00b      	beq.n	405410 <set_shelves_active_inactive+0x104>
		{
			shelf[2].active = SHELF_ACTIVE;
  4053f8:	4b1c      	ldr	r3, [pc, #112]	; (40546c <set_shelves_active_inactive+0x160>)
  4053fa:	2201      	movs	r2, #1
  4053fc:	729a      	strb	r2, [r3, #10]
			numActiveShelves++;
  4053fe:	4b19      	ldr	r3, [pc, #100]	; (405464 <set_shelves_active_inactive+0x158>)
  405400:	781b      	ldrb	r3, [r3, #0]
  405402:	3301      	adds	r3, #1
  405404:	b2da      	uxtb	r2, r3
  405406:	4b17      	ldr	r3, [pc, #92]	; (405464 <set_shelves_active_inactive+0x158>)
  405408:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 2 active\r\n");
  40540a:	481d      	ldr	r0, [pc, #116]	; (405480 <set_shelves_active_inactive+0x174>)
  40540c:	4b1a      	ldr	r3, [pc, #104]	; (405478 <set_shelves_active_inactive+0x16c>)
  40540e:	4798      	blx	r3
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  405410:	4b16      	ldr	r3, [pc, #88]	; (40546c <set_shelves_active_inactive+0x160>)
  405412:	7cdb      	ldrb	r3, [r3, #19]
  405414:	2b00      	cmp	r3, #0
  405416:	d01f      	beq.n	405458 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  405418:	4b15      	ldr	r3, [pc, #84]	; (405470 <set_shelves_active_inactive+0x164>)
  40541a:	f893 3020 	ldrb.w	r3, [r3, #32]
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  40541e:	2b00      	cmp	r3, #0
  405420:	d11a      	bne.n	405458 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
  405422:	4b13      	ldr	r3, [pc, #76]	; (405470 <set_shelves_active_inactive+0x164>)
  405424:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  405428:	2b00      	cmp	r3, #0
  40542a:	d115      	bne.n	405458 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  40542c:	4b0e      	ldr	r3, [pc, #56]	; (405468 <set_shelves_active_inactive+0x15c>)
  40542e:	781b      	ldrb	r3, [r3, #0]
  405430:	3301      	adds	r3, #1
  405432:	b2da      	uxtb	r2, r3
  405434:	4b0c      	ldr	r3, [pc, #48]	; (405468 <set_shelves_active_inactive+0x15c>)
  405436:	701a      	strb	r2, [r3, #0]
		
		if (shelf[3].devicesPresent)
  405438:	4b0c      	ldr	r3, [pc, #48]	; (40546c <set_shelves_active_inactive+0x160>)
  40543a:	7c9b      	ldrb	r3, [r3, #18]
  40543c:	2b00      	cmp	r3, #0
  40543e:	d00b      	beq.n	405458 <set_shelves_active_inactive+0x14c>
		{
			shelf[3].active = SHELF_ACTIVE;
  405440:	4b0a      	ldr	r3, [pc, #40]	; (40546c <set_shelves_active_inactive+0x160>)
  405442:	2201      	movs	r2, #1
  405444:	73da      	strb	r2, [r3, #15]
			numActiveShelves++;
  405446:	4b07      	ldr	r3, [pc, #28]	; (405464 <set_shelves_active_inactive+0x158>)
  405448:	781b      	ldrb	r3, [r3, #0]
  40544a:	3301      	adds	r3, #1
  40544c:	b2da      	uxtb	r2, r3
  40544e:	4b05      	ldr	r3, [pc, #20]	; (405464 <set_shelves_active_inactive+0x158>)
  405450:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 3 active\r\n");
  405452:	480c      	ldr	r0, [pc, #48]	; (405484 <set_shelves_active_inactive+0x178>)
  405454:	4b08      	ldr	r3, [pc, #32]	; (405478 <set_shelves_active_inactive+0x16c>)
  405456:	4798      	blx	r3
		}
	}
}
  405458:	3708      	adds	r7, #8
  40545a:	46bd      	mov	sp, r7
  40545c:	bd80      	pop	{r7, pc}
  40545e:	bf00      	nop
  405460:	00405121 	.word	0x00405121
  405464:	204017e6 	.word	0x204017e6
  405468:	204016ba 	.word	0x204016ba
  40546c:	204016bc 	.word	0x204016bc
  405470:	204016f8 	.word	0x204016f8
  405474:	0040cf70 	.word	0x0040cf70
  405478:	004026b1 	.word	0x004026b1
  40547c:	0040cf84 	.word	0x0040cf84
  405480:	0040cf98 	.word	0x0040cf98
  405484:	0040cfac 	.word	0x0040cfac

00405488 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
  405488:	b480      	push	{r7}
  40548a:	af00      	add	r7, sp, #0
	return numActiveShelves;
  40548c:	4b03      	ldr	r3, [pc, #12]	; (40549c <num_active_shelves+0x14>)
  40548e:	781b      	ldrb	r3, [r3, #0]
}
  405490:	4618      	mov	r0, r3
  405492:	46bd      	mov	sp, r7
  405494:	f85d 7b04 	ldr.w	r7, [sp], #4
  405498:	4770      	bx	lr
  40549a:	bf00      	nop
  40549c:	204017e6 	.word	0x204017e6

004054a0 <num_present_shelves>:

unsigned char num_present_shelves(void);
unsigned char num_present_shelves(void)
{
  4054a0:	b480      	push	{r7}
  4054a2:	af00      	add	r7, sp, #0
	return numPresentShelves;
  4054a4:	4b03      	ldr	r3, [pc, #12]	; (4054b4 <num_present_shelves+0x14>)
  4054a6:	781b      	ldrb	r3, [r3, #0]
}
  4054a8:	4618      	mov	r0, r3
  4054aa:	46bd      	mov	sp, r7
  4054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054b0:	4770      	bx	lr
  4054b2:	bf00      	nop
  4054b4:	204016ba 	.word	0x204016ba

004054b8 <calc_sanitize_time>:
volatile int32_t zoom_view_id;


unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
  4054b8:	b480      	push	{r7}
  4054ba:	b085      	sub	sp, #20
  4054bc:	af00      	add	r7, sp, #0
  4054be:	4603      	mov	r3, r0
  4054c0:	71fb      	strb	r3, [r7, #7]
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
  4054c2:	79fa      	ldrb	r2, [r7, #7]
  4054c4:	491f      	ldr	r1, [pc, #124]	; (405544 <calc_sanitize_time+0x8c>)
  4054c6:	4613      	mov	r3, r2
  4054c8:	009b      	lsls	r3, r3, #2
  4054ca:	4413      	add	r3, r2
  4054cc:	440b      	add	r3, r1
  4054ce:	785b      	ldrb	r3, [r3, #1]
  4054d0:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
  4054d2:	7bfa      	ldrb	r2, [r7, #15]
  4054d4:	491c      	ldr	r1, [pc, #112]	; (405548 <calc_sanitize_time+0x90>)
  4054d6:	4613      	mov	r3, r2
  4054d8:	00db      	lsls	r3, r3, #3
  4054da:	1a9b      	subs	r3, r3, r2
  4054dc:	005b      	lsls	r3, r3, #1
  4054de:	440b      	add	r3, r1
  4054e0:	3308      	adds	r3, #8
  4054e2:	78db      	ldrb	r3, [r3, #3]
  4054e4:	73bb      	strb	r3, [r7, #14]
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  4054e6:	7bba      	ldrb	r2, [r7, #14]
  4054e8:	4918      	ldr	r1, [pc, #96]	; (40554c <calc_sanitize_time+0x94>)
  4054ea:	4613      	mov	r3, r2
  4054ec:	009b      	lsls	r3, r3, #2
  4054ee:	4413      	add	r3, r2
  4054f0:	440b      	add	r3, r1
  4054f2:	781b      	ldrb	r3, [r3, #0]
  4054f4:	737b      	strb	r3, [r7, #13]
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
  4054f6:	79fa      	ldrb	r2, [r7, #7]
  4054f8:	4912      	ldr	r1, [pc, #72]	; (405544 <calc_sanitize_time+0x8c>)
  4054fa:	4613      	mov	r3, r2
  4054fc:	009b      	lsls	r3, r3, #2
  4054fe:	4413      	add	r3, r2
  405500:	440b      	add	r3, r1
  405502:	789b      	ldrb	r3, [r3, #2]
  405504:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
  405506:	7bfa      	ldrb	r2, [r7, #15]
  405508:	490f      	ldr	r1, [pc, #60]	; (405548 <calc_sanitize_time+0x90>)
  40550a:	4613      	mov	r3, r2
  40550c:	00db      	lsls	r3, r3, #3
  40550e:	1a9b      	subs	r3, r3, r2
  405510:	005b      	lsls	r3, r3, #1
  405512:	440b      	add	r3, r1
  405514:	3308      	adds	r3, #8
  405516:	789b      	ldrb	r3, [r3, #2]
  405518:	73bb      	strb	r3, [r7, #14]
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  40551a:	7bba      	ldrb	r2, [r7, #14]
  40551c:	490b      	ldr	r1, [pc, #44]	; (40554c <calc_sanitize_time+0x94>)
  40551e:	4613      	mov	r3, r2
  405520:	009b      	lsls	r3, r3, #2
  405522:	4413      	add	r3, r2
  405524:	440b      	add	r3, r1
  405526:	781b      	ldrb	r3, [r3, #0]
  405528:	733b      	strb	r3, [r7, #12]

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
  40552a:	7b3a      	ldrb	r2, [r7, #12]
  40552c:	7b7b      	ldrb	r3, [r7, #13]
  40552e:	4293      	cmp	r3, r2
  405530:	bf38      	it	cc
  405532:	4613      	movcc	r3, r2
  405534:	72fb      	strb	r3, [r7, #11]
	
	return (minutes);
  405536:	7afb      	ldrb	r3, [r7, #11]
	
}
  405538:	4618      	mov	r0, r3
  40553a:	3714      	adds	r7, #20
  40553c:	46bd      	mov	sp, r7
  40553e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405542:	4770      	bx	lr
  405544:	204016bc 	.word	0x204016bc
  405548:	20401674 	.word	0x20401674
  40554c:	204016f8 	.word	0x204016f8

00405550 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
  405550:	b580      	push	{r7, lr}
  405552:	af00      	add	r7, sp, #0
	led_shelf(0, LED_OFF);
  405554:	2000      	movs	r0, #0
  405556:	2100      	movs	r1, #0
  405558:	4b08      	ldr	r3, [pc, #32]	; (40557c <door_latch_open_kill_all_shelves+0x2c>)
  40555a:	4798      	blx	r3
	led_shelf(1, LED_OFF);
  40555c:	2001      	movs	r0, #1
  40555e:	2100      	movs	r1, #0
  405560:	4b06      	ldr	r3, [pc, #24]	; (40557c <door_latch_open_kill_all_shelves+0x2c>)
  405562:	4798      	blx	r3
	led_shelf(2, LED_OFF);
  405564:	2002      	movs	r0, #2
  405566:	2100      	movs	r1, #0
  405568:	4b04      	ldr	r3, [pc, #16]	; (40557c <door_latch_open_kill_all_shelves+0x2c>)
  40556a:	4798      	blx	r3
	led_shelf(3, LED_OFF);
  40556c:	2003      	movs	r0, #3
  40556e:	2100      	movs	r1, #0
  405570:	4b02      	ldr	r3, [pc, #8]	; (40557c <door_latch_open_kill_all_shelves+0x2c>)
  405572:	4798      	blx	r3
	
	print_ecdbg("Door latch opened, kill all shelves for safety.\r\n");
  405574:	4802      	ldr	r0, [pc, #8]	; (405580 <door_latch_open_kill_all_shelves+0x30>)
  405576:	4b03      	ldr	r3, [pc, #12]	; (405584 <door_latch_open_kill_all_shelves+0x34>)
  405578:	4798      	blx	r3
}
  40557a:	bd80      	pop	{r7, pc}
  40557c:	00402a45 	.word	0x00402a45
  405580:	0040cfc0 	.word	0x0040cfc0
  405584:	004026b1 	.word	0x004026b1

00405588 <calc_region_checksum>:
}
#endif //22feb16 ignore for now

unsigned char calc_region_checksum(unsigned char sel);
unsigned char calc_region_checksum(unsigned char sel)
{
  405588:	b480      	push	{r7}
  40558a:	b087      	sub	sp, #28
  40558c:	af00      	add	r7, sp, #0
  40558e:	4603      	mov	r3, r0
  405590:	71fb      	strb	r3, [r7, #7]
	unsigned char csum = 0;
  405592:	2300      	movs	r3, #0
  405594:	75fb      	strb	r3, [r7, #23]

	switch(sel)
  405596:	79fb      	ldrb	r3, [r7, #7]
  405598:	2b04      	cmp	r3, #4
  40559a:	f200 80b5 	bhi.w	405708 <calc_region_checksum+0x180>
  40559e:	a201      	add	r2, pc, #4	; (adr r2, 4055a4 <calc_region_checksum+0x1c>)
  4055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4055a4:	004055b9 	.word	0x004055b9
  4055a8:	0040567d 	.word	0x0040567d
  4055ac:	0040568d 	.word	0x0040568d
  4055b0:	004056bb 	.word	0x004056bb
  4055b4:	004056f3 	.word	0x004056f3
	{
		case 0: //serial ID and flags
			csum = 0;
  4055b8:	2300      	movs	r3, #0
  4055ba:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4055bc:	2300      	movs	r3, #0
  4055be:	613b      	str	r3, [r7, #16]
  4055c0:	e055      	b.n	40566e <calc_region_checksum+0xe6>
			{
				csum += sf[i].id[0];
  4055c2:	4a55      	ldr	r2, [pc, #340]	; (405718 <calc_region_checksum+0x190>)
  4055c4:	693b      	ldr	r3, [r7, #16]
  4055c6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
  4055ca:	7dfb      	ldrb	r3, [r7, #23]
  4055cc:	4413      	add	r3, r2
  4055ce:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[1];
  4055d0:	4a51      	ldr	r2, [pc, #324]	; (405718 <calc_region_checksum+0x190>)
  4055d2:	693b      	ldr	r3, [r7, #16]
  4055d4:	00db      	lsls	r3, r3, #3
  4055d6:	4413      	add	r3, r2
  4055d8:	785a      	ldrb	r2, [r3, #1]
  4055da:	7dfb      	ldrb	r3, [r7, #23]
  4055dc:	4413      	add	r3, r2
  4055de:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[2];
  4055e0:	4a4d      	ldr	r2, [pc, #308]	; (405718 <calc_region_checksum+0x190>)
  4055e2:	693b      	ldr	r3, [r7, #16]
  4055e4:	00db      	lsls	r3, r3, #3
  4055e6:	4413      	add	r3, r2
  4055e8:	789a      	ldrb	r2, [r3, #2]
  4055ea:	7dfb      	ldrb	r3, [r7, #23]
  4055ec:	4413      	add	r3, r2
  4055ee:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[3];
  4055f0:	4a49      	ldr	r2, [pc, #292]	; (405718 <calc_region_checksum+0x190>)
  4055f2:	693b      	ldr	r3, [r7, #16]
  4055f4:	00db      	lsls	r3, r3, #3
  4055f6:	4413      	add	r3, r2
  4055f8:	78da      	ldrb	r2, [r3, #3]
  4055fa:	7dfb      	ldrb	r3, [r7, #23]
  4055fc:	4413      	add	r3, r2
  4055fe:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[4];
  405600:	4a45      	ldr	r2, [pc, #276]	; (405718 <calc_region_checksum+0x190>)
  405602:	693b      	ldr	r3, [r7, #16]
  405604:	00db      	lsls	r3, r3, #3
  405606:	4413      	add	r3, r2
  405608:	791a      	ldrb	r2, [r3, #4]
  40560a:	7dfb      	ldrb	r3, [r7, #23]
  40560c:	4413      	add	r3, r2
  40560e:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[5];
  405610:	4a41      	ldr	r2, [pc, #260]	; (405718 <calc_region_checksum+0x190>)
  405612:	693b      	ldr	r3, [r7, #16]
  405614:	00db      	lsls	r3, r3, #3
  405616:	4413      	add	r3, r2
  405618:	795a      	ldrb	r2, [r3, #5]
  40561a:	7dfb      	ldrb	r3, [r7, #23]
  40561c:	4413      	add	r3, r2
  40561e:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].maxUsageReached;
  405620:	4a3d      	ldr	r2, [pc, #244]	; (405718 <calc_region_checksum+0x190>)
  405622:	693b      	ldr	r3, [r7, #16]
  405624:	00db      	lsls	r3, r3, #3
  405626:	4413      	add	r3, r2
  405628:	799b      	ldrb	r3, [r3, #6]
  40562a:	f3c3 0340 	ubfx	r3, r3, #1, #1
  40562e:	b2db      	uxtb	r3, r3
  405630:	461a      	mov	r2, r3
  405632:	7dfb      	ldrb	r3, [r7, #23]
  405634:	4413      	add	r3, r2
  405636:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].slotFilled;
  405638:	4a37      	ldr	r2, [pc, #220]	; (405718 <calc_region_checksum+0x190>)
  40563a:	693b      	ldr	r3, [r7, #16]
  40563c:	00db      	lsls	r3, r3, #3
  40563e:	4413      	add	r3, r2
  405640:	799b      	ldrb	r3, [r3, #6]
  405642:	f3c3 0380 	ubfx	r3, r3, #2, #1
  405646:	b2db      	uxtb	r3, r3
  405648:	461a      	mov	r2, r3
  40564a:	7dfb      	ldrb	r3, [r7, #23]
  40564c:	4413      	add	r3, r2
  40564e:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].top_botn;
  405650:	4a31      	ldr	r2, [pc, #196]	; (405718 <calc_region_checksum+0x190>)
  405652:	693b      	ldr	r3, [r7, #16]
  405654:	00db      	lsls	r3, r3, #3
  405656:	4413      	add	r3, r2
  405658:	799b      	ldrb	r3, [r3, #6]
  40565a:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40565e:	b2db      	uxtb	r3, r3
  405660:	461a      	mov	r2, r3
  405662:	7dfb      	ldrb	r3, [r7, #23]
  405664:	4413      	add	r3, r2
  405666:	75fb      	strb	r3, [r7, #23]

	switch(sel)
	{
		case 0: //serial ID and flags
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405668:	693b      	ldr	r3, [r7, #16]
  40566a:	3301      	adds	r3, #1
  40566c:	613b      	str	r3, [r7, #16]
  40566e:	693b      	ldr	r3, [r7, #16]
  405670:	2b5f      	cmp	r3, #95	; 0x5f
  405672:	dda6      	ble.n	4055c2 <calc_region_checksum+0x3a>
				csum += sf[i].id[5];
				csum += sf[i].maxUsageReached;
				csum += sf[i].slotFilled;
				csum += sf[i].top_botn;
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  405674:	7dfb      	ldrb	r3, [r7, #23]
  405676:	43db      	mvns	r3, r3
  405678:	75fb      	strb	r3, [r7, #23]
			break;
  40567a:	e045      	b.n	405708 <calc_region_checksum+0x180>

		case 1: //san cycles
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
  40567c:	4b27      	ldr	r3, [pc, #156]	; (40571c <calc_region_checksum+0x194>)
  40567e:	681b      	ldr	r3, [r3, #0]
  405680:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405684:	b2db      	uxtb	r3, r3
  405686:	43db      	mvns	r3, r3
  405688:	75fb      	strb	r3, [r7, #23]
			break;
  40568a:	e03d      	b.n	405708 <calc_region_checksum+0x180>

		case 2: //usage hours
			csum = 0;
  40568c:	2300      	movs	r3, #0
  40568e:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405690:	2300      	movs	r3, #0
  405692:	60fb      	str	r3, [r7, #12]
  405694:	e00a      	b.n	4056ac <calc_region_checksum+0x124>
			{
				csum += h.hrs[i];
  405696:	4a22      	ldr	r2, [pc, #136]	; (405720 <calc_region_checksum+0x198>)
  405698:	68fb      	ldr	r3, [r7, #12]
  40569a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40569e:	b2da      	uxtb	r2, r3
  4056a0:	7dfb      	ldrb	r3, [r7, #23]
  4056a2:	4413      	add	r3, r2
  4056a4:	75fb      	strb	r3, [r7, #23]
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
			break;

		case 2: //usage hours
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4056a6:	68fb      	ldr	r3, [r7, #12]
  4056a8:	3301      	adds	r3, #1
  4056aa:	60fb      	str	r3, [r7, #12]
  4056ac:	68fb      	ldr	r3, [r7, #12]
  4056ae:	2b5f      	cmp	r3, #95	; 0x5f
  4056b0:	ddf1      	ble.n	405696 <calc_region_checksum+0x10e>
			{
				csum += h.hrs[i];
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  4056b2:	7dfb      	ldrb	r3, [r7, #23]
  4056b4:	43db      	mvns	r3, r3
  4056b6:	75fb      	strb	r3, [r7, #23]
			break;
  4056b8:	e026      	b.n	405708 <calc_region_checksum+0x180>

		case 3: //usage mins
			csum = 0;
  4056ba:	2300      	movs	r3, #0
  4056bc:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4056be:	2300      	movs	r3, #0
  4056c0:	60bb      	str	r3, [r7, #8]
  4056c2:	e009      	b.n	4056d8 <calc_region_checksum+0x150>
			{
				csum += m.mins[i];
  4056c4:	4a17      	ldr	r2, [pc, #92]	; (405724 <calc_region_checksum+0x19c>)
  4056c6:	68bb      	ldr	r3, [r7, #8]
  4056c8:	4413      	add	r3, r2
  4056ca:	781a      	ldrb	r2, [r3, #0]
  4056cc:	7dfb      	ldrb	r3, [r7, #23]
  4056ce:	4413      	add	r3, r2
  4056d0:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
			break;

		case 3: //usage mins
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4056d2:	68bb      	ldr	r3, [r7, #8]
  4056d4:	3301      	adds	r3, #1
  4056d6:	60bb      	str	r3, [r7, #8]
  4056d8:	68bb      	ldr	r3, [r7, #8]
  4056da:	2b5f      	cmp	r3, #95	; 0x5f
  4056dc:	ddf2      	ble.n	4056c4 <calc_region_checksum+0x13c>
			{
				csum += m.mins[i];
			}
			csum += m.sanMins;
  4056de:	4b11      	ldr	r3, [pc, #68]	; (405724 <calc_region_checksum+0x19c>)
  4056e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4056e2:	b2da      	uxtb	r2, r3
  4056e4:	7dfb      	ldrb	r3, [r7, #23]
  4056e6:	4413      	add	r3, r2
  4056e8:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  4056ea:	7dfb      	ldrb	r3, [r7, #23]
  4056ec:	43db      	mvns	r3, r3
  4056ee:	75fb      	strb	r3, [r7, #23]
			break;
  4056f0:	e00a      	b.n	405708 <calc_region_checksum+0x180>
		case 4: //configuration
			csum = 0;
  4056f2:	2300      	movs	r3, #0
  4056f4:	75fb      	strb	r3, [r7, #23]
			csum += c.initialDTE;
  4056f6:	4b0c      	ldr	r3, [pc, #48]	; (405728 <calc_region_checksum+0x1a0>)
  4056f8:	781a      	ldrb	r2, [r3, #0]
  4056fa:	7dfb      	ldrb	r3, [r7, #23]
  4056fc:	4413      	add	r3, r2
  4056fe:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  405700:	7dfb      	ldrb	r3, [r7, #23]
  405702:	43db      	mvns	r3, r3
  405704:	75fb      	strb	r3, [r7, #23]
			break;
  405706:	bf00      	nop
	}
	
	return csum;	
  405708:	7dfb      	ldrb	r3, [r7, #23]
}
  40570a:	4618      	mov	r0, r3
  40570c:	371c      	adds	r7, #28
  40570e:	46bd      	mov	sp, r7
  405710:	f85d 7b04 	ldr.w	r7, [sp], #4
  405714:	4770      	bx	lr
  405716:	bf00      	nop
  405718:	20401374 	.word	0x20401374
  40571c:	20401720 	.word	0x20401720
  405720:	20401724 	.word	0x20401724
  405724:	204017e8 	.word	0x204017e8
  405728:	204016f4 	.word	0x204016f4

0040572c <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
{
  40572c:	b580      	push	{r7, lr}
  40572e:	b082      	sub	sp, #8
  405730:	af00      	add	r7, sp, #0
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405732:	2300      	movs	r3, #0
  405734:	607b      	str	r3, [r7, #4]
  405736:	e00f      	b.n	405758 <find_first_open_usage_slot+0x2c>
	{
		
		if (!sf[i].slotFilled)
  405738:	4a10      	ldr	r2, [pc, #64]	; (40577c <find_first_open_usage_slot+0x50>)
  40573a:	687b      	ldr	r3, [r7, #4]
  40573c:	00db      	lsls	r3, r3, #3
  40573e:	4413      	add	r3, r2
  405740:	799b      	ldrb	r3, [r3, #6]
  405742:	f3c3 0380 	ubfx	r3, r3, #2, #1
  405746:	b2db      	uxtb	r3, r3
  405748:	2b00      	cmp	r3, #0
  40574a:	d102      	bne.n	405752 <find_first_open_usage_slot+0x26>
		{
			return i;
  40574c:	687b      	ldr	r3, [r7, #4]
  40574e:	b2db      	uxtb	r3, r3
  405750:	e00f      	b.n	405772 <find_first_open_usage_slot+0x46>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405752:	687b      	ldr	r3, [r7, #4]
  405754:	3301      	adds	r3, #1
  405756:	607b      	str	r3, [r7, #4]
  405758:	687b      	ldr	r3, [r7, #4]
  40575a:	2b5f      	cmp	r3, #95	; 0x5f
  40575c:	d9ec      	bls.n	405738 <find_first_open_usage_slot+0xc>
		{
			return i;
		}
	}
	
	print_ecdbg("No more room for LED board info. Cannot track minute usage for additional boards.\r\n");
  40575e:	4808      	ldr	r0, [pc, #32]	; (405780 <find_first_open_usage_slot+0x54>)
  405760:	4b08      	ldr	r3, [pc, #32]	; (405784 <find_first_open_usage_slot+0x58>)
  405762:	4798      	blx	r3
	
	sysErr.usageStructsFull = FAIL;
  405764:	4b08      	ldr	r3, [pc, #32]	; (405788 <find_first_open_usage_slot+0x5c>)
  405766:	2201      	movs	r2, #1
  405768:	739a      	strb	r2, [r3, #14]
	electroclaveState = STATE_CHASSIS_ERROR;
  40576a:	4b08      	ldr	r3, [pc, #32]	; (40578c <find_first_open_usage_slot+0x60>)
  40576c:	2208      	movs	r2, #8
  40576e:	701a      	strb	r2, [r3, #0]

	
	return USAGE_FULL; //Error, no open slots
  405770:	23ff      	movs	r3, #255	; 0xff
}
  405772:	4618      	mov	r0, r3
  405774:	3708      	adds	r7, #8
  405776:	46bd      	mov	sp, r7
  405778:	bd80      	pop	{r7, pc}
  40577a:	bf00      	nop
  40577c:	20401374 	.word	0x20401374
  405780:	0040cff4 	.word	0x0040cff4
  405784:	004026b1 	.word	0x004026b1
  405788:	204016e4 	.word	0x204016e4
  40578c:	204009c3 	.word	0x204009c3

00405790 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(void)

{
  405790:	b580      	push	{r7, lr}
  405792:	b082      	sub	sp, #8
  405794:	af00      	add	r7, sp, #0
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	

	firstOpenSlot = find_first_open_usage_slot();
  405796:	4b2f      	ldr	r3, [pc, #188]	; (405854 <add_new_led_board_sides_to_usage+0xc4>)
  405798:	4798      	blx	r3
  40579a:	4603      	mov	r3, r0
  40579c:	717b      	strb	r3, [r7, #5]
	
	slotAssignment = firstOpenSlot;
  40579e:	797b      	ldrb	r3, [r7, #5]
  4057a0:	71fb      	strb	r3, [r7, #7]
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
  4057a2:	2300      	movs	r3, #0
  4057a4:	71bb      	strb	r3, [r7, #6]
  4057a6:	e04f      	b.n	405848 <add_new_led_board_sides_to_usage+0xb8>
	{
		brdIdx = ledBrdSide[i].boardIdx;
  4057a8:	79ba      	ldrb	r2, [r7, #6]
  4057aa:	492b      	ldr	r1, [pc, #172]	; (405858 <add_new_led_board_sides_to_usage+0xc8>)
  4057ac:	4613      	mov	r3, r2
  4057ae:	009b      	lsls	r3, r3, #2
  4057b0:	4413      	add	r3, r2
  4057b2:	440b      	add	r3, r1
  4057b4:	791b      	ldrb	r3, [r3, #4]
  4057b6:	713b      	strb	r3, [r7, #4]
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
  4057b8:	79bb      	ldrb	r3, [r7, #6]
  4057ba:	f003 0301 	and.w	r3, r3, #1
  4057be:	b2db      	uxtb	r3, r3
  4057c0:	2b00      	cmp	r3, #0
  4057c2:	bf14      	ite	ne
  4057c4:	2301      	movne	r3, #1
  4057c6:	2300      	moveq	r3, #0
  4057c8:	b2db      	uxtb	r3, r3
  4057ca:	70fb      	strb	r3, [r7, #3]
		
		if ((ledBrd[brdIdx].present) && (usageIdx[i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
  4057cc:	793a      	ldrb	r2, [r7, #4]
  4057ce:	4923      	ldr	r1, [pc, #140]	; (40585c <add_new_led_board_sides_to_usage+0xcc>)
  4057d0:	4613      	mov	r3, r2
  4057d2:	00db      	lsls	r3, r3, #3
  4057d4:	1a9b      	subs	r3, r3, r2
  4057d6:	005b      	lsls	r3, r3, #1
  4057d8:	440b      	add	r3, r1
  4057da:	3308      	adds	r3, #8
  4057dc:	781b      	ldrb	r3, [r3, #0]
  4057de:	2b00      	cmp	r3, #0
  4057e0:	d02f      	beq.n	405842 <add_new_led_board_sides_to_usage+0xb2>
  4057e2:	79bb      	ldrb	r3, [r7, #6]
  4057e4:	4a1e      	ldr	r2, [pc, #120]	; (405860 <add_new_led_board_sides_to_usage+0xd0>)
  4057e6:	5cd3      	ldrb	r3, [r2, r3]
  4057e8:	2bff      	cmp	r3, #255	; 0xff
  4057ea:	d12a      	bne.n	405842 <add_new_led_board_sides_to_usage+0xb2>
		{
			strncpy((char*)&sf[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
  4057ec:	79fb      	ldrb	r3, [r7, #7]
  4057ee:	00db      	lsls	r3, r3, #3
  4057f0:	4a1c      	ldr	r2, [pc, #112]	; (405864 <add_new_led_board_sides_to_usage+0xd4>)
  4057f2:	1899      	adds	r1, r3, r2
  4057f4:	793a      	ldrb	r2, [r7, #4]
  4057f6:	4613      	mov	r3, r2
  4057f8:	00db      	lsls	r3, r3, #3
  4057fa:	1a9b      	subs	r3, r3, r2
  4057fc:	005b      	lsls	r3, r3, #1
  4057fe:	4a17      	ldr	r2, [pc, #92]	; (40585c <add_new_led_board_sides_to_usage+0xcc>)
  405800:	4413      	add	r3, r2
  405802:	3301      	adds	r3, #1
  405804:	4608      	mov	r0, r1
  405806:	4619      	mov	r1, r3
  405808:	2206      	movs	r2, #6
  40580a:	4b17      	ldr	r3, [pc, #92]	; (405868 <add_new_led_board_sides_to_usage+0xd8>)
  40580c:	4798      	blx	r3
			
			sf[slotAssignment].top_botn = top_botn;
  40580e:	79fb      	ldrb	r3, [r7, #7]
  405810:	78fa      	ldrb	r2, [r7, #3]
  405812:	f002 0201 	and.w	r2, r2, #1
  405816:	b2d1      	uxtb	r1, r2
  405818:	4a12      	ldr	r2, [pc, #72]	; (405864 <add_new_led_board_sides_to_usage+0xd4>)
  40581a:	00db      	lsls	r3, r3, #3
  40581c:	4413      	add	r3, r2
  40581e:	799a      	ldrb	r2, [r3, #6]
  405820:	f361 0200 	bfi	r2, r1, #0, #1
  405824:	719a      	strb	r2, [r3, #6]
			
			sf[slotAssignment].slotFilled = 1;
  405826:	79fb      	ldrb	r3, [r7, #7]
  405828:	4a0e      	ldr	r2, [pc, #56]	; (405864 <add_new_led_board_sides_to_usage+0xd4>)
  40582a:	00db      	lsls	r3, r3, #3
  40582c:	4413      	add	r3, r2
  40582e:	799a      	ldrb	r2, [r3, #6]
  405830:	f042 0204 	orr.w	r2, r2, #4
  405834:	719a      	strb	r2, [r3, #6]

			usageIdx[i] = slotAssignment++;
  405836:	79ba      	ldrb	r2, [r7, #6]
  405838:	79fb      	ldrb	r3, [r7, #7]
  40583a:	1c59      	adds	r1, r3, #1
  40583c:	71f9      	strb	r1, [r7, #7]
  40583e:	4908      	ldr	r1, [pc, #32]	; (405860 <add_new_led_board_sides_to_usage+0xd0>)
  405840:	548b      	strb	r3, [r1, r2]

	firstOpenSlot = find_first_open_usage_slot();
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
  405842:	79bb      	ldrb	r3, [r7, #6]
  405844:	3301      	adds	r3, #1
  405846:	71bb      	strb	r3, [r7, #6]
  405848:	79bb      	ldrb	r3, [r7, #6]
  40584a:	2b07      	cmp	r3, #7
  40584c:	d9ac      	bls.n	4057a8 <add_new_led_board_sides_to_usage+0x18>

			usageIdx[i] = slotAssignment++;

		}
	}
}
  40584e:	3708      	adds	r7, #8
  405850:	46bd      	mov	sp, r7
  405852:	bd80      	pop	{r7, pc}
  405854:	0040572d 	.word	0x0040572d
  405858:	204016f8 	.word	0x204016f8
  40585c:	20401674 	.word	0x20401674
  405860:	204016dc 	.word	0x204016dc
  405864:	20401374 	.word	0x20401374
  405868:	004076a5 	.word	0x004076a5

0040586c <inc_sanMins>:
void increment_ledBoard_usage_min(void);


void inc_sanMins(void);
void inc_sanMins(void)
{
  40586c:	b480      	push	{r7}
  40586e:	af00      	add	r7, sp, #0
	m.sanMins++;
  405870:	4b04      	ldr	r3, [pc, #16]	; (405884 <inc_sanMins+0x18>)
  405872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405874:	3301      	adds	r3, #1
  405876:	4a03      	ldr	r2, [pc, #12]	; (405884 <inc_sanMins+0x18>)
  405878:	6613      	str	r3, [r2, #96]	; 0x60
	
	//the rest of the update of the struct, calc'ing the csum, writing to flash etc will happen when the usage minutes get updated
}
  40587a:	46bd      	mov	sp, r7
  40587c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405880:	4770      	bx	lr
  405882:	bf00      	nop
  405884:	204017e8 	.word	0x204017e8

00405888 <inc_sanCycles>:

void inc_sanCycles(void);
void inc_sanCycles(void)
{
  405888:	b580      	push	{r7, lr}
  40588a:	af00      	add	r7, sp, #0
	sanc.cycles++;
  40588c:	4b11      	ldr	r3, [pc, #68]	; (4058d4 <inc_sanCycles+0x4c>)
  40588e:	681b      	ldr	r3, [r3, #0]
  405890:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405894:	1c5a      	adds	r2, r3, #1
  405896:	f3c2 0213 	ubfx	r2, r2, #0, #20
  40589a:	490e      	ldr	r1, [pc, #56]	; (4058d4 <inc_sanCycles+0x4c>)
  40589c:	680b      	ldr	r3, [r1, #0]
  40589e:	f362 0313 	bfi	r3, r2, #0, #20
  4058a2:	600b      	str	r3, [r1, #0]
	sanCycleFlashIdx++;
  4058a4:	4b0c      	ldr	r3, [pc, #48]	; (4058d8 <inc_sanCycles+0x50>)
  4058a6:	681b      	ldr	r3, [r3, #0]
  4058a8:	3301      	adds	r3, #1
  4058aa:	4a0b      	ldr	r2, [pc, #44]	; (4058d8 <inc_sanCycles+0x50>)
  4058ac:	6013      	str	r3, [r2, #0]
	if (sanCycleFlashIdx >= (NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS))
  4058ae:	4b0a      	ldr	r3, [pc, #40]	; (4058d8 <inc_sanCycles+0x50>)
  4058b0:	681b      	ldr	r3, [r3, #0]
  4058b2:	2b05      	cmp	r3, #5
  4058b4:	d902      	bls.n	4058bc <inc_sanCycles+0x34>
	{
		sanCycleFlashIdx = 0;
  4058b6:	4b08      	ldr	r3, [pc, #32]	; (4058d8 <inc_sanCycles+0x50>)
  4058b8:	2200      	movs	r2, #0
  4058ba:	601a      	str	r2, [r3, #0]
	}
	sanc.csum = calc_region_checksum(1);
  4058bc:	2001      	movs	r0, #1
  4058be:	4b07      	ldr	r3, [pc, #28]	; (4058dc <inc_sanCycles+0x54>)
  4058c0:	4798      	blx	r3
  4058c2:	4603      	mov	r3, r0
  4058c4:	4619      	mov	r1, r3
  4058c6:	4a03      	ldr	r2, [pc, #12]	; (4058d4 <inc_sanCycles+0x4c>)
  4058c8:	8853      	ldrh	r3, [r2, #2]
  4058ca:	f361 130b 	bfi	r3, r1, #4, #8
  4058ce:	8053      	strh	r3, [r2, #2]
//skip for now 22feb16	write_region_to_flash(1, 0xFF, sanc.csum);
}
  4058d0:	bd80      	pop	{r7, pc}
  4058d2:	bf00      	nop
  4058d4:	20401720 	.word	0x20401720
  4058d8:	204009c8 	.word	0x204009c8
  4058dc:	00405589 	.word	0x00405589

004058e0 <store_config>:

void store_config(void);
void store_config(void)
{
  4058e0:	b580      	push	{r7, lr}
  4058e2:	af00      	add	r7, sp, #0
	/* initialDTE set in the serial user interface */
	configFlashIdx++;
  4058e4:	4b09      	ldr	r3, [pc, #36]	; (40590c <store_config+0x2c>)
  4058e6:	681b      	ldr	r3, [r3, #0]
  4058e8:	3301      	adds	r3, #1
  4058ea:	4a08      	ldr	r2, [pc, #32]	; (40590c <store_config+0x2c>)
  4058ec:	6013      	str	r3, [r2, #0]
	if (configFlashIdx >= (NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS))
  4058ee:	4b07      	ldr	r3, [pc, #28]	; (40590c <store_config+0x2c>)
  4058f0:	681b      	ldr	r3, [r3, #0]
  4058f2:	2b01      	cmp	r3, #1
  4058f4:	d902      	bls.n	4058fc <store_config+0x1c>
	{
		configFlashIdx = 0;
  4058f6:	4b05      	ldr	r3, [pc, #20]	; (40590c <store_config+0x2c>)
  4058f8:	2200      	movs	r2, #0
  4058fa:	601a      	str	r2, [r3, #0]
	}
	c.csum = calc_region_checksum(4);
  4058fc:	2004      	movs	r0, #4
  4058fe:	4b04      	ldr	r3, [pc, #16]	; (405910 <store_config+0x30>)
  405900:	4798      	blx	r3
  405902:	4603      	mov	r3, r0
  405904:	461a      	mov	r2, r3
  405906:	4b03      	ldr	r3, [pc, #12]	; (405914 <store_config+0x34>)
  405908:	705a      	strb	r2, [r3, #1]
//skip for now 22feb16	write_region_to_flash(4, 0xFF, c.csum);
}
  40590a:	bd80      	pop	{r7, pc}
  40590c:	204009d4 	.word	0x204009d4
  405910:	00405589 	.word	0x00405589
  405914:	204016f4 	.word	0x204016f4

00405918 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void)
{
  405918:	b580      	push	{r7, lr}
  40591a:	b082      	sub	sp, #8
  40591c:	af00      	add	r7, sp, #0
	unsigned char idx;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
  40591e:	2300      	movs	r3, #0
  405920:	71bb      	strb	r3, [r7, #6]
	
	inc_sanMins();
  405922:	4b5c      	ldr	r3, [pc, #368]	; (405a94 <increment_ledBoard_usage_min+0x17c>)
  405924:	4798      	blx	r3

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  405926:	2300      	movs	r3, #0
  405928:	717b      	strb	r3, [r7, #5]
  40592a:	e07f      	b.n	405a2c <increment_ledBoard_usage_min+0x114>
	{
		if (shelf[i].active == SHELF_ACTIVE)
  40592c:	797a      	ldrb	r2, [r7, #5]
  40592e:	495a      	ldr	r1, [pc, #360]	; (405a98 <increment_ledBoard_usage_min+0x180>)
  405930:	4613      	mov	r3, r2
  405932:	009b      	lsls	r3, r3, #2
  405934:	4413      	add	r3, r2
  405936:	440b      	add	r3, r1
  405938:	781b      	ldrb	r3, [r3, #0]
  40593a:	2b01      	cmp	r3, #1
  40593c:	d173      	bne.n	405a26 <increment_ledBoard_usage_min+0x10e>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
  40593e:	797a      	ldrb	r2, [r7, #5]
  405940:	4955      	ldr	r1, [pc, #340]	; (405a98 <increment_ledBoard_usage_min+0x180>)
  405942:	4613      	mov	r3, r2
  405944:	009b      	lsls	r3, r3, #2
  405946:	4413      	add	r3, r2
  405948:	440b      	add	r3, r1
  40594a:	785b      	ldrb	r3, [r3, #1]
  40594c:	4619      	mov	r1, r3
  40594e:	4a53      	ldr	r2, [pc, #332]	; (405a9c <increment_ledBoard_usage_min+0x184>)
  405950:	460b      	mov	r3, r1
  405952:	00db      	lsls	r3, r3, #3
  405954:	1a5b      	subs	r3, r3, r1
  405956:	005b      	lsls	r3, r3, #1
  405958:	4413      	add	r3, r2
  40595a:	3308      	adds	r3, #8
  40595c:	78db      	ldrb	r3, [r3, #3]
  40595e:	70fb      	strb	r3, [r7, #3]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
  405960:	797a      	ldrb	r2, [r7, #5]
  405962:	494d      	ldr	r1, [pc, #308]	; (405a98 <increment_ledBoard_usage_min+0x180>)
  405964:	4613      	mov	r3, r2
  405966:	009b      	lsls	r3, r3, #2
  405968:	4413      	add	r3, r2
  40596a:	440b      	add	r3, r1
  40596c:	789b      	ldrb	r3, [r3, #2]
  40596e:	4619      	mov	r1, r3
  405970:	4a4a      	ldr	r2, [pc, #296]	; (405a9c <increment_ledBoard_usage_min+0x184>)
  405972:	460b      	mov	r3, r1
  405974:	00db      	lsls	r3, r3, #3
  405976:	1a5b      	subs	r3, r3, r1
  405978:	005b      	lsls	r3, r3, #1
  40597a:	4413      	add	r3, r2
  40597c:	3308      	adds	r3, #8
  40597e:	789b      	ldrb	r3, [r3, #2]
  405980:	70bb      	strb	r3, [r7, #2]
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
  405982:	78fa      	ldrb	r2, [r7, #3]
  405984:	4946      	ldr	r1, [pc, #280]	; (405aa0 <increment_ledBoard_usage_min+0x188>)
  405986:	4613      	mov	r3, r2
  405988:	009b      	lsls	r3, r3, #2
  40598a:	4413      	add	r3, r2
  40598c:	440b      	add	r3, r1
  40598e:	785b      	ldrb	r3, [r3, #1]
  405990:	707b      	strb	r3, [r7, #1]
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
  405992:	78ba      	ldrb	r2, [r7, #2]
  405994:	4942      	ldr	r1, [pc, #264]	; (405aa0 <increment_ledBoard_usage_min+0x188>)
  405996:	4613      	mov	r3, r2
  405998:	009b      	lsls	r3, r3, #2
  40599a:	4413      	add	r3, r2
  40599c:	440b      	add	r3, r1
  40599e:	785b      	ldrb	r3, [r3, #1]
  4059a0:	703b      	strb	r3, [r7, #0]
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  4059a2:	2300      	movs	r3, #0
  4059a4:	713b      	strb	r3, [r7, #4]
  4059a6:	e03b      	b.n	405a20 <increment_ledBoard_usage_min+0x108>
			{
				switch (k)
  4059a8:	793b      	ldrb	r3, [r7, #4]
  4059aa:	2b00      	cmp	r3, #0
  4059ac:	d002      	beq.n	4059b4 <increment_ledBoard_usage_min+0x9c>
  4059ae:	2b01      	cmp	r3, #1
  4059b0:	d003      	beq.n	4059ba <increment_ledBoard_usage_min+0xa2>
  4059b2:	e005      	b.n	4059c0 <increment_ledBoard_usage_min+0xa8>
				{
					case 0:
						idx = topUIdx;
  4059b4:	787b      	ldrb	r3, [r7, #1]
  4059b6:	71fb      	strb	r3, [r7, #7]
						break;
  4059b8:	e002      	b.n	4059c0 <increment_ledBoard_usage_min+0xa8>
					case 1:
						idx = bottomUIdx;
  4059ba:	783b      	ldrb	r3, [r7, #0]
  4059bc:	71fb      	strb	r3, [r7, #7]
						break;
  4059be:	bf00      	nop

				}

				m.mins[idx] = m.mins[idx] + 1;
  4059c0:	79fb      	ldrb	r3, [r7, #7]
  4059c2:	79fa      	ldrb	r2, [r7, #7]
  4059c4:	4937      	ldr	r1, [pc, #220]	; (405aa4 <increment_ledBoard_usage_min+0x18c>)
  4059c6:	5c8a      	ldrb	r2, [r1, r2]
  4059c8:	3201      	adds	r2, #1
  4059ca:	b2d1      	uxtb	r1, r2
  4059cc:	4a35      	ldr	r2, [pc, #212]	; (405aa4 <increment_ledBoard_usage_min+0x18c>)
  4059ce:	54d1      	strb	r1, [r2, r3]
				if (m.mins[idx] > 59)
  4059d0:	79fb      	ldrb	r3, [r7, #7]
  4059d2:	4a34      	ldr	r2, [pc, #208]	; (405aa4 <increment_ledBoard_usage_min+0x18c>)
  4059d4:	5cd3      	ldrb	r3, [r2, r3]
  4059d6:	2b3b      	cmp	r3, #59	; 0x3b
  4059d8:	d91f      	bls.n	405a1a <increment_ledBoard_usage_min+0x102>
				{
					m.mins[idx] = 0;
  4059da:	79fb      	ldrb	r3, [r7, #7]
  4059dc:	4a31      	ldr	r2, [pc, #196]	; (405aa4 <increment_ledBoard_usage_min+0x18c>)
  4059de:	2100      	movs	r1, #0
  4059e0:	54d1      	strb	r1, [r2, r3]
					hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
  4059e2:	79bb      	ldrb	r3, [r7, #6]
  4059e4:	3301      	adds	r3, #1
  4059e6:	71bb      	strb	r3, [r7, #6]
					h.hrs[idx] = h.hrs[idx] + 1;
  4059e8:	79fb      	ldrb	r3, [r7, #7]
  4059ea:	79fa      	ldrb	r2, [r7, #7]
  4059ec:	492e      	ldr	r1, [pc, #184]	; (405aa8 <increment_ledBoard_usage_min+0x190>)
  4059ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  4059f2:	3201      	adds	r2, #1
  4059f4:	b291      	uxth	r1, r2
  4059f6:	4a2c      	ldr	r2, [pc, #176]	; (405aa8 <increment_ledBoard_usage_min+0x190>)
  4059f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						
					if ((h.hrs[idx]) >= 2000) //2000 hours * 60 minutes per hour
  4059fc:	79fb      	ldrb	r3, [r7, #7]
  4059fe:	4a2a      	ldr	r2, [pc, #168]	; (405aa8 <increment_ledBoard_usage_min+0x190>)
  405a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405a04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  405a08:	d307      	bcc.n	405a1a <increment_ledBoard_usage_min+0x102>
					{
						sf[idx].maxUsageReached = 1; //And...we're done. Reached 2000 hours.
  405a0a:	79fb      	ldrb	r3, [r7, #7]
  405a0c:	4a27      	ldr	r2, [pc, #156]	; (405aac <increment_ledBoard_usage_min+0x194>)
  405a0e:	00db      	lsls	r3, r3, #3
  405a10:	4413      	add	r3, r2
  405a12:	799a      	ldrb	r2, [r3, #6]
  405a14:	f042 0202 	orr.w	r2, r2, #2
  405a18:	719a      	strb	r2, [r3, #6]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  405a1a:	793b      	ldrb	r3, [r7, #4]
  405a1c:	3301      	adds	r3, #1
  405a1e:	713b      	strb	r3, [r7, #4]
  405a20:	793b      	ldrb	r3, [r7, #4]
  405a22:	2b01      	cmp	r3, #1
  405a24:	d9c0      	bls.n	4059a8 <increment_ledBoard_usage_min+0x90>
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	inc_sanMins();

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  405a26:	797b      	ldrb	r3, [r7, #5]
  405a28:	3301      	adds	r3, #1
  405a2a:	717b      	strb	r3, [r7, #5]
  405a2c:	797b      	ldrb	r3, [r7, #5]
  405a2e:	2b03      	cmp	r3, #3
  405a30:	f67f af7c 	bls.w	40592c <increment_ledBoard_usage_min+0x14>
				}//if ((minutes %60) == 0)
			} //for each board side in the shelf (k)
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	mFlashIdx++;
  405a34:	4b1e      	ldr	r3, [pc, #120]	; (405ab0 <increment_ledBoard_usage_min+0x198>)
  405a36:	681b      	ldr	r3, [r3, #0]
  405a38:	3301      	adds	r3, #1
  405a3a:	4a1d      	ldr	r2, [pc, #116]	; (405ab0 <increment_ledBoard_usage_min+0x198>)
  405a3c:	6013      	str	r3, [r2, #0]
	if (mFlashIdx >= NUM_USAGE_MINS_BUFS_SECTORS)
  405a3e:	4b1c      	ldr	r3, [pc, #112]	; (405ab0 <increment_ledBoard_usage_min+0x198>)
  405a40:	681b      	ldr	r3, [r3, #0]
  405a42:	2b73      	cmp	r3, #115	; 0x73
  405a44:	d902      	bls.n	405a4c <increment_ledBoard_usage_min+0x134>
	{
		mFlashIdx = 0;
  405a46:	4b1a      	ldr	r3, [pc, #104]	; (405ab0 <increment_ledBoard_usage_min+0x198>)
  405a48:	2200      	movs	r2, #0
  405a4a:	601a      	str	r2, [r3, #0]
	}
	m.csum = calc_region_checksum(3);
  405a4c:	2003      	movs	r0, #3
  405a4e:	4b19      	ldr	r3, [pc, #100]	; (405ab4 <increment_ledBoard_usage_min+0x19c>)
  405a50:	4798      	blx	r3
  405a52:	4603      	mov	r3, r0
  405a54:	461a      	mov	r2, r3
  405a56:	4b13      	ldr	r3, [pc, #76]	; (405aa4 <increment_ledBoard_usage_min+0x18c>)
  405a58:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
//skip for now 22feb16	write_region_to_flash(3, 0xFF, m.csum);
//skip for now 22feb16	copy_region_to_another_sector(3);
//skip for now 22feb16	disrupt_prior_m_sector();

	if (hourRollover)
  405a5c:	79bb      	ldrb	r3, [r7, #6]
  405a5e:	2b00      	cmp	r3, #0
  405a60:	d015      	beq.n	405a8e <increment_ledBoard_usage_min+0x176>
	{
		hFlashIdx++;
  405a62:	4b15      	ldr	r3, [pc, #84]	; (405ab8 <increment_ledBoard_usage_min+0x1a0>)
  405a64:	681b      	ldr	r3, [r3, #0]
  405a66:	3301      	adds	r3, #1
  405a68:	4a13      	ldr	r2, [pc, #76]	; (405ab8 <increment_ledBoard_usage_min+0x1a0>)
  405a6a:	6013      	str	r3, [r2, #0]
		if (hFlashIdx >= (NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF))
  405a6c:	4b12      	ldr	r3, [pc, #72]	; (405ab8 <increment_ledBoard_usage_min+0x1a0>)
  405a6e:	681b      	ldr	r3, [r3, #0]
  405a70:	2b01      	cmp	r3, #1
  405a72:	d902      	bls.n	405a7a <increment_ledBoard_usage_min+0x162>
		{
			hFlashIdx = 0;
  405a74:	4b10      	ldr	r3, [pc, #64]	; (405ab8 <increment_ledBoard_usage_min+0x1a0>)
  405a76:	2200      	movs	r2, #0
  405a78:	601a      	str	r2, [r3, #0]
		}
		h.csum = calc_region_checksum(2);
  405a7a:	2002      	movs	r0, #2
  405a7c:	4b0d      	ldr	r3, [pc, #52]	; (405ab4 <increment_ledBoard_usage_min+0x19c>)
  405a7e:	4798      	blx	r3
  405a80:	4603      	mov	r3, r0
  405a82:	461a      	mov	r2, r3
  405a84:	4b08      	ldr	r3, [pc, #32]	; (405aa8 <increment_ledBoard_usage_min+0x190>)
  405a86:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
//skip for now 22feb16		write_region_to_flash(2, 0xFF, h.csum);

		hourRollover = 0; //reset for next pass
  405a8a:	2300      	movs	r3, #0
  405a8c:	71bb      	strb	r3, [r7, #6]
	}
}
  405a8e:	3708      	adds	r7, #8
  405a90:	46bd      	mov	sp, r7
  405a92:	bd80      	pop	{r7, pc}
  405a94:	0040586d 	.word	0x0040586d
  405a98:	204016bc 	.word	0x204016bc
  405a9c:	20401674 	.word	0x20401674
  405aa0:	204016f8 	.word	0x204016f8
  405aa4:	204017e8 	.word	0x204017e8
  405aa8:	20401724 	.word	0x20401724
  405aac:	20401374 	.word	0x20401374
  405ab0:	204009d0 	.word	0x204009d0
  405ab4:	00405589 	.word	0x00405589
  405ab8:	204009cc 	.word	0x204009cc

00405abc <init_shelf_n_ledBrd_structs>:



void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
  405abc:	b480      	push	{r7}
  405abe:	b085      	sub	sp, #20
  405ac0:	af00      	add	r7, sp, #0
	
	for (int i=0; i<NUM_SHELVES; i++)
  405ac2:	2300      	movs	r3, #0
  405ac4:	60fb      	str	r3, [r7, #12]
  405ac6:	e01a      	b.n	405afe <init_shelf_n_ledBrd_structs+0x42>
	{
		shelf[i].present = 0;
  405ac8:	497c      	ldr	r1, [pc, #496]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405aca:	68fa      	ldr	r2, [r7, #12]
  405acc:	4613      	mov	r3, r2
  405ace:	009b      	lsls	r3, r3, #2
  405ad0:	4413      	add	r3, r2
  405ad2:	440b      	add	r3, r1
  405ad4:	2200      	movs	r2, #0
  405ad6:	711a      	strb	r2, [r3, #4]
		shelf[i].devicesPresent = 0;
  405ad8:	4978      	ldr	r1, [pc, #480]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405ada:	68fa      	ldr	r2, [r7, #12]
  405adc:	4613      	mov	r3, r2
  405ade:	009b      	lsls	r3, r3, #2
  405ae0:	4413      	add	r3, r2
  405ae2:	440b      	add	r3, r1
  405ae4:	2200      	movs	r2, #0
  405ae6:	70da      	strb	r2, [r3, #3]
		shelf[i].active = 0;
  405ae8:	4974      	ldr	r1, [pc, #464]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405aea:	68fa      	ldr	r2, [r7, #12]
  405aec:	4613      	mov	r3, r2
  405aee:	009b      	lsls	r3, r3, #2
  405af0:	4413      	add	r3, r2
  405af2:	440b      	add	r3, r1
  405af4:	2200      	movs	r2, #0
  405af6:	701a      	strb	r2, [r3, #0]

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
  405af8:	68fb      	ldr	r3, [r7, #12]
  405afa:	3301      	adds	r3, #1
  405afc:	60fb      	str	r3, [r7, #12]
  405afe:	68fb      	ldr	r3, [r7, #12]
  405b00:	2b03      	cmp	r3, #3
  405b02:	dde1      	ble.n	405ac8 <init_shelf_n_ledBrd_structs+0xc>
		shelf[i].present = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].active = 0;
	}
	
	shelf[0].tLedIdx = 0;
  405b04:	4b6d      	ldr	r3, [pc, #436]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b06:	2200      	movs	r2, #0
  405b08:	705a      	strb	r2, [r3, #1]
	shelf[0].bLedIdx = 1;
  405b0a:	4b6c      	ldr	r3, [pc, #432]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b0c:	2201      	movs	r2, #1
  405b0e:	709a      	strb	r2, [r3, #2]
	shelf[1].tLedIdx = 1;
  405b10:	4b6a      	ldr	r3, [pc, #424]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b12:	2201      	movs	r2, #1
  405b14:	719a      	strb	r2, [r3, #6]
	shelf[1].bLedIdx = 2;
  405b16:	4b69      	ldr	r3, [pc, #420]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b18:	2202      	movs	r2, #2
  405b1a:	71da      	strb	r2, [r3, #7]
	shelf[2].tLedIdx = 2;
  405b1c:	4b67      	ldr	r3, [pc, #412]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b1e:	2202      	movs	r2, #2
  405b20:	72da      	strb	r2, [r3, #11]
	shelf[2].bLedIdx = 3;
  405b22:	4b66      	ldr	r3, [pc, #408]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b24:	2203      	movs	r2, #3
  405b26:	731a      	strb	r2, [r3, #12]
	shelf[3].tLedIdx = 3;
  405b28:	4b64      	ldr	r3, [pc, #400]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b2a:	2203      	movs	r2, #3
  405b2c:	741a      	strb	r2, [r3, #16]
	shelf[3].bLedIdx = 4;
  405b2e:	4b63      	ldr	r3, [pc, #396]	; (405cbc <init_shelf_n_ledBrd_structs+0x200>)
  405b30:	2204      	movs	r2, #4
  405b32:	745a      	strb	r2, [r3, #17]
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405b34:	2300      	movs	r3, #0
  405b36:	60bb      	str	r3, [r7, #8]
  405b38:	e00c      	b.n	405b54 <init_shelf_n_ledBrd_structs+0x98>
	{
		ledBrd[i].present = 0;
  405b3a:	4961      	ldr	r1, [pc, #388]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b3c:	68ba      	ldr	r2, [r7, #8]
  405b3e:	4613      	mov	r3, r2
  405b40:	00db      	lsls	r3, r3, #3
  405b42:	1a9b      	subs	r3, r3, r2
  405b44:	005b      	lsls	r3, r3, #1
  405b46:	440b      	add	r3, r1
  405b48:	3308      	adds	r3, #8
  405b4a:	2200      	movs	r2, #0
  405b4c:	701a      	strb	r2, [r3, #0]
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405b4e:	68bb      	ldr	r3, [r7, #8]
  405b50:	3301      	adds	r3, #1
  405b52:	60bb      	str	r3, [r7, #8]
  405b54:	68bb      	ldr	r3, [r7, #8]
  405b56:	2b04      	cmp	r3, #4
  405b58:	ddef      	ble.n	405b3a <init_shelf_n_ledBrd_structs+0x7e>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
  405b5a:	4b59      	ldr	r3, [pc, #356]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b5c:	22ff      	movs	r2, #255	; 0xff
  405b5e:	729a      	strb	r2, [r3, #10]
	ledBrd[0].lSideIdx = 0;
  405b60:	4b57      	ldr	r3, [pc, #348]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b62:	2200      	movs	r2, #0
  405b64:	72da      	strb	r2, [r3, #11]
	ledBrd[1].uSideIdx = 1;
  405b66:	4b56      	ldr	r3, [pc, #344]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b68:	2201      	movs	r2, #1
  405b6a:	761a      	strb	r2, [r3, #24]
	ledBrd[1].lSideIdx = 2;
  405b6c:	4b54      	ldr	r3, [pc, #336]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b6e:	2202      	movs	r2, #2
  405b70:	765a      	strb	r2, [r3, #25]
	ledBrd[2].uSideIdx = 3;
  405b72:	4b53      	ldr	r3, [pc, #332]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b74:	2203      	movs	r2, #3
  405b76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ledBrd[2].lSideIdx = 4;
  405b7a:	4b51      	ldr	r3, [pc, #324]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b7c:	2204      	movs	r2, #4
  405b7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ledBrd[3].uSideIdx = 5;
  405b82:	4b4f      	ldr	r3, [pc, #316]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b84:	2205      	movs	r2, #5
  405b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	ledBrd[3].lSideIdx = 6;
  405b8a:	4b4d      	ldr	r3, [pc, #308]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b8c:	2206      	movs	r2, #6
  405b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	ledBrd[4].uSideIdx = 7;
  405b92:	4b4b      	ldr	r3, [pc, #300]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b94:	2207      	movs	r2, #7
  405b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ledBrd[4].lSideIdx = 0xFF;
  405b9a:	4b49      	ldr	r3, [pc, #292]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405b9c:	22ff      	movs	r2, #255	; 0xff
  405b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	ledBrd[0].uSideShelfIdx = 0xFF;
  405ba2:	4b47      	ldr	r3, [pc, #284]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405ba4:	22ff      	movs	r2, #255	; 0xff
  405ba6:	731a      	strb	r2, [r3, #12]
	ledBrd[1].uSideShelfIdx = 0;
  405ba8:	4b45      	ldr	r3, [pc, #276]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405baa:	2200      	movs	r2, #0
  405bac:	769a      	strb	r2, [r3, #26]
	ledBrd[2].uSideShelfIdx = 1;
  405bae:	4b44      	ldr	r3, [pc, #272]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bb0:	2201      	movs	r2, #1
  405bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ledBrd[3].uSideShelfIdx = 2;
  405bb6:	4b42      	ldr	r3, [pc, #264]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bb8:	2202      	movs	r2, #2
  405bba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ledBrd[4].uSideShelfIdx = 3;
  405bbe:	4b40      	ldr	r3, [pc, #256]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bc0:	2203      	movs	r2, #3
  405bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 
	ledBrd[0].lSideShelfIdx = 0;
  405bc6:	4b3e      	ldr	r3, [pc, #248]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bc8:	2200      	movs	r2, #0
  405bca:	735a      	strb	r2, [r3, #13]
	ledBrd[1].lSideShelfIdx = 1;
  405bcc:	4b3c      	ldr	r3, [pc, #240]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bce:	2201      	movs	r2, #1
  405bd0:	76da      	strb	r2, [r3, #27]
	ledBrd[2].lSideShelfIdx = 2;
  405bd2:	4b3b      	ldr	r3, [pc, #236]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bd4:	2202      	movs	r2, #2
  405bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ledBrd[3].lSideShelfIdx = 3;
  405bda:	4b39      	ldr	r3, [pc, #228]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405bdc:	2203      	movs	r2, #3
  405bde:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ledBrd[4].lSideShelfIdx = 0xFF;
  405be2:	4b37      	ldr	r3, [pc, #220]	; (405cc0 <init_shelf_n_ledBrd_structs+0x204>)
  405be4:	22ff      	movs	r2, #255	; 0xff
  405be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405bea:	2300      	movs	r3, #0
  405bec:	607b      	str	r3, [r7, #4]
  405bee:	e01a      	b.n	405c26 <init_shelf_n_ledBrd_structs+0x16a>
	{
		ledBrdSide[i].maxUsageReached = 0;
  405bf0:	4934      	ldr	r1, [pc, #208]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405bf2:	687a      	ldr	r2, [r7, #4]
  405bf4:	4613      	mov	r3, r2
  405bf6:	009b      	lsls	r3, r3, #2
  405bf8:	4413      	add	r3, r2
  405bfa:	440b      	add	r3, r1
  405bfc:	2200      	movs	r2, #0
  405bfe:	709a      	strb	r2, [r3, #2]
		ledBrdSide[i].sanitizeMinutes = 0;
  405c00:	4930      	ldr	r1, [pc, #192]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c02:	687a      	ldr	r2, [r7, #4]
  405c04:	4613      	mov	r3, r2
  405c06:	009b      	lsls	r3, r3, #2
  405c08:	4413      	add	r3, r2
  405c0a:	440b      	add	r3, r1
  405c0c:	2200      	movs	r2, #0
  405c0e:	701a      	strb	r2, [r3, #0]
		ledBrdSide[i].ushdwIdx = 0xFF;
  405c10:	492c      	ldr	r1, [pc, #176]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c12:	687a      	ldr	r2, [r7, #4]
  405c14:	4613      	mov	r3, r2
  405c16:	009b      	lsls	r3, r3, #2
  405c18:	4413      	add	r3, r2
  405c1a:	440b      	add	r3, r1
  405c1c:	22ff      	movs	r2, #255	; 0xff
  405c1e:	705a      	strb	r2, [r3, #1]
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405c20:	687b      	ldr	r3, [r7, #4]
  405c22:	3301      	adds	r3, #1
  405c24:	607b      	str	r3, [r7, #4]
  405c26:	687b      	ldr	r3, [r7, #4]
  405c28:	2b07      	cmp	r3, #7
  405c2a:	dde1      	ble.n	405bf0 <init_shelf_n_ledBrd_structs+0x134>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
  405c2c:	4b25      	ldr	r3, [pc, #148]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c2e:	2200      	movs	r2, #0
  405c30:	711a      	strb	r2, [r3, #4]
	ledBrdSide[1].boardIdx = 1;
  405c32:	4b24      	ldr	r3, [pc, #144]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c34:	2201      	movs	r2, #1
  405c36:	725a      	strb	r2, [r3, #9]
	ledBrdSide[2].boardIdx = 1;
  405c38:	4b22      	ldr	r3, [pc, #136]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c3a:	2201      	movs	r2, #1
  405c3c:	739a      	strb	r2, [r3, #14]
	ledBrdSide[3].boardIdx = 2;
  405c3e:	4b21      	ldr	r3, [pc, #132]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c40:	2202      	movs	r2, #2
  405c42:	74da      	strb	r2, [r3, #19]
	ledBrdSide[4].boardIdx = 2;
  405c44:	4b1f      	ldr	r3, [pc, #124]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c46:	2202      	movs	r2, #2
  405c48:	761a      	strb	r2, [r3, #24]
	ledBrdSide[5].boardIdx = 3;
  405c4a:	4b1e      	ldr	r3, [pc, #120]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c4c:	2203      	movs	r2, #3
  405c4e:	775a      	strb	r2, [r3, #29]
	ledBrdSide[6].boardIdx = 3;
  405c50:	4b1c      	ldr	r3, [pc, #112]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c52:	2203      	movs	r2, #3
  405c54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ledBrdSide[7].boardIdx = 4;
  405c58:	4b1a      	ldr	r3, [pc, #104]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c5a:	2204      	movs	r2, #4
  405c5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	

	ledBrdSide[0].shelfIdx = 0;
  405c60:	4b18      	ldr	r3, [pc, #96]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c62:	2200      	movs	r2, #0
  405c64:	70da      	strb	r2, [r3, #3]
	ledBrdSide[1].shelfIdx = 0;
  405c66:	4b17      	ldr	r3, [pc, #92]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c68:	2200      	movs	r2, #0
  405c6a:	721a      	strb	r2, [r3, #8]
	ledBrdSide[2].shelfIdx = 1;
  405c6c:	4b15      	ldr	r3, [pc, #84]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c6e:	2201      	movs	r2, #1
  405c70:	735a      	strb	r2, [r3, #13]
	ledBrdSide[3].shelfIdx = 1;
  405c72:	4b14      	ldr	r3, [pc, #80]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c74:	2201      	movs	r2, #1
  405c76:	749a      	strb	r2, [r3, #18]
	ledBrdSide[4].shelfIdx = 2;
  405c78:	4b12      	ldr	r3, [pc, #72]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c7a:	2202      	movs	r2, #2
  405c7c:	75da      	strb	r2, [r3, #23]
	ledBrdSide[5].shelfIdx = 2;
  405c7e:	4b11      	ldr	r3, [pc, #68]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c80:	2202      	movs	r2, #2
  405c82:	771a      	strb	r2, [r3, #28]
	ledBrdSide[6].shelfIdx = 3;
  405c84:	4b0f      	ldr	r3, [pc, #60]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c86:	2203      	movs	r2, #3
  405c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ledBrdSide[7].shelfIdx = 3;
  405c8c:	4b0d      	ldr	r3, [pc, #52]	; (405cc4 <init_shelf_n_ledBrd_structs+0x208>)
  405c8e:	2203      	movs	r2, #3
  405c90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  405c94:	2300      	movs	r3, #0
  405c96:	603b      	str	r3, [r7, #0]
  405c98:	e007      	b.n	405caa <init_shelf_n_ledBrd_structs+0x1ee>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
  405c9a:	4a0b      	ldr	r2, [pc, #44]	; (405cc8 <init_shelf_n_ledBrd_structs+0x20c>)
  405c9c:	683b      	ldr	r3, [r7, #0]
  405c9e:	4413      	add	r3, r2
  405ca0:	22ff      	movs	r2, #255	; 0xff
  405ca2:	701a      	strb	r2, [r3, #0]
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  405ca4:	683b      	ldr	r3, [r7, #0]
  405ca6:	3301      	adds	r3, #1
  405ca8:	603b      	str	r3, [r7, #0]
  405caa:	683b      	ldr	r3, [r7, #0]
  405cac:	2b07      	cmp	r3, #7
  405cae:	ddf4      	ble.n	405c9a <init_shelf_n_ledBrd_structs+0x1de>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
	}

}
  405cb0:	3714      	adds	r7, #20
  405cb2:	46bd      	mov	sp, r7
  405cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cb8:	4770      	bx	lr
  405cba:	bf00      	nop
  405cbc:	204016bc 	.word	0x204016bc
  405cc0:	20401674 	.word	0x20401674
  405cc4:	204016f8 	.word	0x204016f8
  405cc8:	204016dc 	.word	0x204016dc

00405ccc <load_usageIdx_to_ledBrdSide>:


void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
  405ccc:	b480      	push	{r7}
  405cce:	b083      	sub	sp, #12
  405cd0:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405cd2:	2300      	movs	r3, #0
  405cd4:	607b      	str	r3, [r7, #4]
  405cd6:	e00e      	b.n	405cf6 <load_usageIdx_to_ledBrdSide+0x2a>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
  405cd8:	4a0b      	ldr	r2, [pc, #44]	; (405d08 <load_usageIdx_to_ledBrdSide+0x3c>)
  405cda:	687b      	ldr	r3, [r7, #4]
  405cdc:	4413      	add	r3, r2
  405cde:	7818      	ldrb	r0, [r3, #0]
  405ce0:	490a      	ldr	r1, [pc, #40]	; (405d0c <load_usageIdx_to_ledBrdSide+0x40>)
  405ce2:	687a      	ldr	r2, [r7, #4]
  405ce4:	4613      	mov	r3, r2
  405ce6:	009b      	lsls	r3, r3, #2
  405ce8:	4413      	add	r3, r2
  405cea:	440b      	add	r3, r1
  405cec:	4602      	mov	r2, r0
  405cee:	705a      	strb	r2, [r3, #1]


void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405cf0:	687b      	ldr	r3, [r7, #4]
  405cf2:	3301      	adds	r3, #1
  405cf4:	607b      	str	r3, [r7, #4]
  405cf6:	687b      	ldr	r3, [r7, #4]
  405cf8:	2b07      	cmp	r3, #7
  405cfa:	dded      	ble.n	405cd8 <load_usageIdx_to_ledBrdSide+0xc>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
	}
}
  405cfc:	370c      	adds	r7, #12
  405cfe:	46bd      	mov	sp, r7
  405d00:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d04:	4770      	bx	lr
  405d06:	bf00      	nop
  405d08:	204016dc 	.word	0x204016dc
  405d0c:	204016f8 	.word	0x204016f8

00405d10 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
  405d10:	b580      	push	{r7, lr}
  405d12:	b084      	sub	sp, #16
  405d14:	af00      	add	r7, sp, #0

	}
	else
	{
#endif //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later
		memset(&sf, 0x00, sizeof(sf));		//serial id's and flags
  405d16:	481e      	ldr	r0, [pc, #120]	; (405d90 <init_led_board_info+0x80>)
  405d18:	2100      	movs	r1, #0
  405d1a:	f44f 7240 	mov.w	r2, #768	; 0x300
  405d1e:	4b1d      	ldr	r3, [pc, #116]	; (405d94 <init_led_board_info+0x84>)
  405d20:	4798      	blx	r3
		memset(&sanc, 0x00, sizeof(sanc));	//total chassis sanitation cycles
  405d22:	481d      	ldr	r0, [pc, #116]	; (405d98 <init_led_board_info+0x88>)
  405d24:	2100      	movs	r1, #0
  405d26:	2204      	movs	r2, #4
  405d28:	4b1a      	ldr	r3, [pc, #104]	; (405d94 <init_led_board_info+0x84>)
  405d2a:	4798      	blx	r3
		memset(&h, 0x00, sizeof(h));		//usage hours
  405d2c:	481b      	ldr	r0, [pc, #108]	; (405d9c <init_led_board_info+0x8c>)
  405d2e:	2100      	movs	r1, #0
  405d30:	22c2      	movs	r2, #194	; 0xc2
  405d32:	4b18      	ldr	r3, [pc, #96]	; (405d94 <init_led_board_info+0x84>)
  405d34:	4798      	blx	r3
		memset(&m, 0x00, sizeof(m));		//usage minutes
  405d36:	481a      	ldr	r0, [pc, #104]	; (405da0 <init_led_board_info+0x90>)
  405d38:	2100      	movs	r1, #0
  405d3a:	2268      	movs	r2, #104	; 0x68
  405d3c:	4b15      	ldr	r3, [pc, #84]	; (405d94 <init_led_board_info+0x84>)
  405d3e:	4798      	blx	r3
		memset(&c, 0x00, sizeof(c));		//configuration
  405d40:	4818      	ldr	r0, [pc, #96]	; (405da4 <init_led_board_info+0x94>)
  405d42:	2100      	movs	r1, #0
  405d44:	2202      	movs	r2, #2
  405d46:	4b13      	ldr	r3, [pc, #76]	; (405d94 <init_led_board_info+0x84>)
  405d48:	4798      	blx	r3
		c.initialDTE = 30; //changed to 30 minutes for a sanitation test for new LEDs 16jan16
  405d4a:	4b16      	ldr	r3, [pc, #88]	; (405da4 <init_led_board_info+0x94>)
  405d4c:	221e      	movs	r2, #30
  405d4e:	701a      	strb	r2, [r3, #0]

		for (int i=0; i<5; i++)
  405d50:	2300      	movs	r3, #0
  405d52:	60fb      	str	r3, [r7, #12]
  405d54:	e002      	b.n	405d5c <init_led_board_info+0x4c>
  405d56:	68fb      	ldr	r3, [r7, #12]
  405d58:	3301      	adds	r3, #1
  405d5a:	60fb      	str	r3, [r7, #12]
  405d5c:	68fb      	ldr	r3, [r7, #12]
  405d5e:	2b04      	cmp	r3, #4
  405d60:	ddf9      	ble.n	405d56 <init_led_board_info+0x46>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
				chassis_error();
			}
#endif
		}
		add_new_led_board_sides_to_usage();
  405d62:	4b11      	ldr	r3, [pc, #68]	; (405da8 <init_led_board_info+0x98>)
  405d64:	4798      	blx	r3
		load_usageIdx_to_ledBrdSide();
  405d66:	4b11      	ldr	r3, [pc, #68]	; (405dac <init_led_board_info+0x9c>)
  405d68:	4798      	blx	r3

		for (int i=0; i<5; i++)
  405d6a:	2300      	movs	r3, #0
  405d6c:	60bb      	str	r3, [r7, #8]
  405d6e:	e009      	b.n	405d84 <init_led_board_info+0x74>
		{
			unsigned char csum;
			csum = calc_region_checksum(i);
  405d70:	68bb      	ldr	r3, [r7, #8]
  405d72:	b2db      	uxtb	r3, r3
  405d74:	4618      	mov	r0, r3
  405d76:	4b0e      	ldr	r3, [pc, #56]	; (405db0 <init_led_board_info+0xa0>)
  405d78:	4798      	blx	r3
  405d7a:	4603      	mov	r3, r0
  405d7c:	71fb      	strb	r3, [r7, #7]
#endif
		}
		add_new_led_board_sides_to_usage();
		load_usageIdx_to_ledBrdSide();

		for (int i=0; i<5; i++)
  405d7e:	68bb      	ldr	r3, [r7, #8]
  405d80:	3301      	adds	r3, #1
  405d82:	60bb      	str	r3, [r7, #8]
  405d84:	68bb      	ldr	r3, [r7, #8]
  405d86:	2b04      	cmp	r3, #4
  405d88:	ddf2      	ble.n	405d70 <init_led_board_info+0x60>
//skip for now 22feb16			copy_region_to_another_sector(i);
		}
#if 0 //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later
	} //if-else
#endif //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later	
}
  405d8a:	3710      	adds	r7, #16
  405d8c:	46bd      	mov	sp, r7
  405d8e:	bd80      	pop	{r7, pc}
  405d90:	20401374 	.word	0x20401374
  405d94:	004073e1 	.word	0x004073e1
  405d98:	20401720 	.word	0x20401720
  405d9c:	20401724 	.word	0x20401724
  405da0:	204017e8 	.word	0x204017e8
  405da4:	204016f4 	.word	0x204016f4
  405da8:	00405791 	.word	0x00405791
  405dac:	00405ccd 	.word	0x00405ccd
  405db0:	00405589 	.word	0x00405589

00405db4 <show_sw_version>:


void show_sw_version(void);
void show_sw_version(void)
{
  405db4:	b580      	push	{r7, lr}
  405db6:	af00      	add	r7, sp, #0
	print_ecdbg("\r\n*---------------------------------------------------*\r\n");
  405db8:	4804      	ldr	r0, [pc, #16]	; (405dcc <show_sw_version+0x18>)
  405dba:	4b05      	ldr	r3, [pc, #20]	; (405dd0 <show_sw_version+0x1c>)
  405dbc:	4798      	blx	r3
	print_ecdbg(    "ELECTROCLAVE\r\nCopyright (c) 2016 Seal Shield, Inc. \r\n");
  405dbe:	4805      	ldr	r0, [pc, #20]	; (405dd4 <show_sw_version+0x20>)
  405dc0:	4b03      	ldr	r3, [pc, #12]	; (405dd0 <show_sw_version+0x1c>)
  405dc2:	4798      	blx	r3
	print_ecdbg(    "Hardware Version: Classic +++ Software Version: 0.078\r\n");
  405dc4:	4804      	ldr	r0, [pc, #16]	; (405dd8 <show_sw_version+0x24>)
  405dc6:	4b02      	ldr	r3, [pc, #8]	; (405dd0 <show_sw_version+0x1c>)
  405dc8:	4798      	blx	r3

}
  405dca:	bd80      	pop	{r7, pc}
  405dcc:	0040d048 	.word	0x0040d048
  405dd0:	004026b1 	.word	0x004026b1
  405dd4:	0040d084 	.word	0x0040d084
  405dd8:	0040d0bc 	.word	0x0040d0bc

00405ddc <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
  405ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405de0:	b0a7      	sub	sp, #156	; 0x9c
  405de2:	af0c      	add	r7, sp, #48	; 0x30
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx;
	unsigned char sanMinutesMax = 0, sanMinutesMin = 0xFF, sanMinutesUpper, sanMinutesLower, uMins, lMins;
  405de4:	2300      	movs	r3, #0
  405de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  405dea:	23ff      	movs	r3, #255	; 0xff
  405dec:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned int uHrs, lHrs;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
  405df0:	4856      	ldr	r0, [pc, #344]	; (405f4c <show_chassis_status_info+0x170>)
  405df2:	4b57      	ldr	r3, [pc, #348]	; (405f50 <show_chassis_status_info+0x174>)
  405df4:	4798      	blx	r3
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
  405df6:	4857      	ldr	r0, [pc, #348]	; (405f54 <show_chassis_status_info+0x178>)
  405df8:	4b55      	ldr	r3, [pc, #340]	; (405f50 <show_chassis_status_info+0x174>)
  405dfa:	4798      	blx	r3
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
  405dfc:	4856      	ldr	r0, [pc, #344]	; (405f58 <show_chassis_status_info+0x17c>)
  405dfe:	4b54      	ldr	r3, [pc, #336]	; (405f50 <show_chassis_status_info+0x174>)
  405e00:	4798      	blx	r3
	print_ecdbg("----------------------------------------------------------\r\n");
  405e02:	4856      	ldr	r0, [pc, #344]	; (405f5c <show_chassis_status_info+0x180>)
  405e04:	4b52      	ldr	r3, [pc, #328]	; (405f50 <show_chassis_status_info+0x174>)
  405e06:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405e08:	2300      	movs	r3, #0
  405e0a:	657b      	str	r3, [r7, #84]	; 0x54
  405e0c:	e153      	b.n	4060b6 <show_chassis_status_info+0x2da>
	{
		if (ledBrd[i].present)
  405e0e:	4954      	ldr	r1, [pc, #336]	; (405f60 <show_chassis_status_info+0x184>)
  405e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405e12:	4613      	mov	r3, r2
  405e14:	00db      	lsls	r3, r3, #3
  405e16:	1a9b      	subs	r3, r3, r2
  405e18:	005b      	lsls	r3, r3, #1
  405e1a:	440b      	add	r3, r1
  405e1c:	3308      	adds	r3, #8
  405e1e:	781b      	ldrb	r3, [r3, #0]
  405e20:	2b00      	cmp	r3, #0
  405e22:	f000 8145 	beq.w	4060b0 <show_chassis_status_info+0x2d4>
		{
			uSideIdx = ledBrd[i].uSideIdx;
  405e26:	494e      	ldr	r1, [pc, #312]	; (405f60 <show_chassis_status_info+0x184>)
  405e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405e2a:	4613      	mov	r3, r2
  405e2c:	00db      	lsls	r3, r3, #3
  405e2e:	1a9b      	subs	r3, r3, r2
  405e30:	005b      	lsls	r3, r3, #1
  405e32:	440b      	add	r3, r1
  405e34:	3308      	adds	r3, #8
  405e36:	789b      	ldrb	r3, [r3, #2]
  405e38:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			lSideIdx = ledBrd[i].lSideIdx;
  405e3c:	4948      	ldr	r1, [pc, #288]	; (405f60 <show_chassis_status_info+0x184>)
  405e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405e40:	4613      	mov	r3, r2
  405e42:	00db      	lsls	r3, r3, #3
  405e44:	1a9b      	subs	r3, r3, r2
  405e46:	005b      	lsls	r3, r3, #1
  405e48:	440b      	add	r3, r1
  405e4a:	3308      	adds	r3, #8
  405e4c:	78db      	ldrb	r3, [r3, #3]
  405e4e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			
			if (uSideIdx != NO_LED_BOARD_PRESENT)
  405e52:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  405e56:	2bff      	cmp	r3, #255	; 0xff
  405e58:	d035      	beq.n	405ec6 <show_chassis_status_info+0xea>
			{
				uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;	
  405e5a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  405e5e:	4941      	ldr	r1, [pc, #260]	; (405f64 <show_chassis_status_info+0x188>)
  405e60:	4613      	mov	r3, r2
  405e62:	009b      	lsls	r3, r3, #2
  405e64:	4413      	add	r3, r2
  405e66:	440b      	add	r3, r1
  405e68:	785b      	ldrb	r3, [r3, #1]
  405e6a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(uSideIdx);
  405e6e:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
  405e72:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  405e76:	4618      	mov	r0, r3
  405e78:	4b3b      	ldr	r3, [pc, #236]	; (405f68 <show_chassis_status_info+0x18c>)
  405e7a:	4798      	blx	r3
  405e7c:	4603      	mov	r3, r0
  405e7e:	2b00      	cmp	r3, #0
  405e80:	bf0c      	ite	eq
  405e82:	2301      	moveq	r3, #1
  405e84:	2300      	movne	r3, #0
  405e86:	b2db      	uxtb	r3, r3
  405e88:	4619      	mov	r1, r3
  405e8a:	4a36      	ldr	r2, [pc, #216]	; (405f64 <show_chassis_status_info+0x188>)
  405e8c:	4623      	mov	r3, r4
  405e8e:	009b      	lsls	r3, r3, #2
  405e90:	4423      	add	r3, r4
  405e92:	4413      	add	r3, r2
  405e94:	460a      	mov	r2, r1
  405e96:	709a      	strb	r2, [r3, #2]
				sanMinutesUpper = ledBrdSide[uSideIdx].sanitizeMinutes;
  405e98:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  405e9c:	4931      	ldr	r1, [pc, #196]	; (405f64 <show_chassis_status_info+0x188>)
  405e9e:	4613      	mov	r3, r2
  405ea0:	009b      	lsls	r3, r3, #2
  405ea2:	4413      	add	r3, r2
  405ea4:	440b      	add	r3, r1
  405ea6:	781b      	ldrb	r3, [r3, #0]
  405ea8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				uHrs = h.hrs[uSideUsageIdx];
  405eac:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  405eb0:	4a2e      	ldr	r2, [pc, #184]	; (405f6c <show_chassis_status_info+0x190>)
  405eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = m.mins[uSideUsageIdx];
  405eb8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  405ebc:	4a2c      	ldr	r2, [pc, #176]	; (405f70 <show_chassis_status_info+0x194>)
  405ebe:	5cd3      	ldrb	r3, [r2, r3]
  405ec0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  405ec4:	e007      	b.n	405ed6 <show_chassis_status_info+0xfa>
			}
			else
			{
				uHrs = 0;
  405ec6:	2300      	movs	r3, #0
  405ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = 0;
  405eca:	2300      	movs	r3, #0
  405ecc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				sanMinutesUpper = 0;
  405ed0:	2300      	movs	r3, #0
  405ed2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			
			if (lSideIdx != NO_LED_BOARD_PRESENT)
  405ed6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  405eda:	2bff      	cmp	r3, #255	; 0xff
  405edc:	d04a      	beq.n	405f74 <show_chassis_status_info+0x198>
			{
				lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;	
  405ede:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405ee2:	4920      	ldr	r1, [pc, #128]	; (405f64 <show_chassis_status_info+0x188>)
  405ee4:	4613      	mov	r3, r2
  405ee6:	009b      	lsls	r3, r3, #2
  405ee8:	4413      	add	r3, r2
  405eea:	440b      	add	r3, r1
  405eec:	785b      	ldrb	r3, [r3, #1]
  405eee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				ledBrdSide[lSideIdx].maxUsageReached = !check_led_brd_side_lifetime(lSideIdx);
  405ef2:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
  405ef6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  405efa:	4618      	mov	r0, r3
  405efc:	4b1a      	ldr	r3, [pc, #104]	; (405f68 <show_chassis_status_info+0x18c>)
  405efe:	4798      	blx	r3
  405f00:	4603      	mov	r3, r0
  405f02:	2b00      	cmp	r3, #0
  405f04:	bf0c      	ite	eq
  405f06:	2301      	moveq	r3, #1
  405f08:	2300      	movne	r3, #0
  405f0a:	b2db      	uxtb	r3, r3
  405f0c:	4619      	mov	r1, r3
  405f0e:	4a15      	ldr	r2, [pc, #84]	; (405f64 <show_chassis_status_info+0x188>)
  405f10:	4623      	mov	r3, r4
  405f12:	009b      	lsls	r3, r3, #2
  405f14:	4423      	add	r3, r4
  405f16:	4413      	add	r3, r2
  405f18:	460a      	mov	r2, r1
  405f1a:	709a      	strb	r2, [r3, #2]
				sanMinutesLower = ledBrdSide[lSideIdx].sanitizeMinutes;
  405f1c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405f20:	4910      	ldr	r1, [pc, #64]	; (405f64 <show_chassis_status_info+0x188>)
  405f22:	4613      	mov	r3, r2
  405f24:	009b      	lsls	r3, r3, #2
  405f26:	4413      	add	r3, r2
  405f28:	440b      	add	r3, r1
  405f2a:	781b      	ldrb	r3, [r3, #0]
  405f2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				lHrs = h.hrs[lSideUsageIdx];
  405f30:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405f34:	4a0d      	ldr	r2, [pc, #52]	; (405f6c <show_chassis_status_info+0x190>)
  405f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405f3a:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = m.mins[lSideUsageIdx];
  405f3c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405f40:	4a0b      	ldr	r2, [pc, #44]	; (405f70 <show_chassis_status_info+0x194>)
  405f42:	5cd3      	ldrb	r3, [r2, r3]
  405f44:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  405f48:	e01c      	b.n	405f84 <show_chassis_status_info+0x1a8>
  405f4a:	bf00      	nop
  405f4c:	0040d0f4 	.word	0x0040d0f4
  405f50:	004026b1 	.word	0x004026b1
  405f54:	0040d118 	.word	0x0040d118
  405f58:	0040d154 	.word	0x0040d154
  405f5c:	0040d194 	.word	0x0040d194
  405f60:	20401674 	.word	0x20401674
  405f64:	204016f8 	.word	0x204016f8
  405f68:	00404bad 	.word	0x00404bad
  405f6c:	20401724 	.word	0x20401724
  405f70:	204017e8 	.word	0x204017e8
			}
			else
			{
				lHrs = 0;
  405f74:	2300      	movs	r3, #0
  405f76:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = 0;
  405f78:	2300      	movs	r3, #0
  405f7a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				sanMinutesLower = 0;
  405f7e:	2300      	movs	r3, #0
  405f80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405f84:	497a      	ldr	r1, [pc, #488]	; (406170 <show_chassis_status_info+0x394>)
  405f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405f88:	4613      	mov	r3, r2
  405f8a:	00db      	lsls	r3, r3, #3
  405f8c:	1a9b      	subs	r3, r3, r2
  405f8e:	005b      	lsls	r3, r3, #1
  405f90:	440b      	add	r3, r1
  405f92:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405f94:	4699      	mov	r9, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405f96:	4976      	ldr	r1, [pc, #472]	; (406170 <show_chassis_status_info+0x394>)
  405f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405f9a:	4613      	mov	r3, r2
  405f9c:	00db      	lsls	r3, r3, #3
  405f9e:	1a9b      	subs	r3, r3, r2
  405fa0:	005b      	lsls	r3, r3, #1
  405fa2:	440b      	add	r3, r1
  405fa4:	3301      	adds	r3, #1
  405fa6:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405fa8:	4698      	mov	r8, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405faa:	4971      	ldr	r1, [pc, #452]	; (406170 <show_chassis_status_info+0x394>)
  405fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405fae:	4613      	mov	r3, r2
  405fb0:	00db      	lsls	r3, r3, #3
  405fb2:	1a9b      	subs	r3, r3, r2
  405fb4:	005b      	lsls	r3, r3, #1
  405fb6:	440b      	add	r3, r1
  405fb8:	3302      	adds	r3, #2
  405fba:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405fbc:	469c      	mov	ip, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405fbe:	496c      	ldr	r1, [pc, #432]	; (406170 <show_chassis_status_info+0x394>)
  405fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405fc2:	4613      	mov	r3, r2
  405fc4:	00db      	lsls	r3, r3, #3
  405fc6:	1a9b      	subs	r3, r3, r2
  405fc8:	005b      	lsls	r3, r3, #1
  405fca:	440b      	add	r3, r1
  405fcc:	3303      	adds	r3, #3
  405fce:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405fd0:	469e      	mov	lr, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405fd2:	4967      	ldr	r1, [pc, #412]	; (406170 <show_chassis_status_info+0x394>)
  405fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405fd6:	4613      	mov	r3, r2
  405fd8:	00db      	lsls	r3, r3, #3
  405fda:	1a9b      	subs	r3, r3, r2
  405fdc:	005b      	lsls	r3, r3, #1
  405fde:	440b      	add	r3, r1
  405fe0:	3304      	adds	r3, #4
  405fe2:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405fe4:	461e      	mov	r6, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405fe6:	4962      	ldr	r1, [pc, #392]	; (406170 <show_chassis_status_info+0x394>)
  405fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405fea:	4613      	mov	r3, r2
  405fec:	00db      	lsls	r3, r3, #3
  405fee:	1a9b      	subs	r3, r3, r2
  405ff0:	005b      	lsls	r3, r3, #1
  405ff2:	440b      	add	r3, r1
  405ff4:	3305      	adds	r3, #5
  405ff6:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405ff8:	461c      	mov	r4, r3
  405ffa:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
  405ffe:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
  406002:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
  406006:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  40600a:	463d      	mov	r5, r7
  40600c:	f8cd 8000 	str.w	r8, [sp]
  406010:	f8cd c004 	str.w	ip, [sp, #4]
  406014:	f8cd e008 	str.w	lr, [sp, #8]
  406018:	9603      	str	r6, [sp, #12]
  40601a:	9404      	str	r4, [sp, #16]
  40601c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
  40601e:	9405      	str	r4, [sp, #20]
  406020:	9006      	str	r0, [sp, #24]
  406022:	9107      	str	r1, [sp, #28]
  406024:	6db9      	ldr	r1, [r7, #88]	; 0x58
  406026:	9108      	str	r1, [sp, #32]
  406028:	9209      	str	r2, [sp, #36]	; 0x24
  40602a:	930a      	str	r3, [sp, #40]	; 0x28
  40602c:	4628      	mov	r0, r5
  40602e:	4951      	ldr	r1, [pc, #324]	; (406174 <show_chassis_status_info+0x398>)
  406030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  406032:	464b      	mov	r3, r9
  406034:	4c50      	ldr	r4, [pc, #320]	; (406178 <show_chassis_status_info+0x39c>)
  406036:	47a0      	blx	r4
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				uHrs, uMins,
				sanMinutesUpper,
				lHrs, lMins,
				sanMinutesLower);
			print_ecdbg(pStr);
  406038:	463b      	mov	r3, r7
  40603a:	4618      	mov	r0, r3
  40603c:	4b4f      	ldr	r3, [pc, #316]	; (40617c <show_chassis_status_info+0x3a0>)
  40603e:	4798      	blx	r3
			

			/* 
			 * Determine the min and max sanitize times for the LED boards that are currently installed
			 */
			if ((sanMinutesMax < sanMinutesUpper) && (sanMinutesUpper != 0))
  406040:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  406044:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406048:	429a      	cmp	r2, r3
  40604a:	d207      	bcs.n	40605c <show_chassis_status_info+0x280>
  40604c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406050:	2b00      	cmp	r3, #0
  406052:	d003      	beq.n	40605c <show_chassis_status_info+0x280>
			{
				sanMinutesMax = sanMinutesUpper;
  406054:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMax < sanMinutesLower) && (sanMinutesLower != 0))
  40605c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  406060:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  406064:	429a      	cmp	r2, r3
  406066:	d207      	bcs.n	406078 <show_chassis_status_info+0x29c>
  406068:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  40606c:	2b00      	cmp	r3, #0
  40606e:	d003      	beq.n	406078 <show_chassis_status_info+0x29c>
			{
				sanMinutesMax = sanMinutesLower;
  406070:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  406074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMin > sanMinutesUpper) && (sanMinutesUpper != 0))
  406078:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  40607c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406080:	429a      	cmp	r2, r3
  406082:	d907      	bls.n	406094 <show_chassis_status_info+0x2b8>
  406084:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406088:	2b00      	cmp	r3, #0
  40608a:	d003      	beq.n	406094 <show_chassis_status_info+0x2b8>
			{
				sanMinutesMin = sanMinutesUpper;
  40608c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  406090:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			}
			if ((sanMinutesMin > sanMinutesLower) && (sanMinutesLower != 0))
  406094:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  406098:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  40609c:	429a      	cmp	r2, r3
  40609e:	d907      	bls.n	4060b0 <show_chassis_status_info+0x2d4>
  4060a0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	d003      	beq.n	4060b0 <show_chassis_status_info+0x2d4>
			{
				sanMinutesMin = sanMinutesLower;
  4060a8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  4060ac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
	print_ecdbg("----------------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4060b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060b2:	3301      	adds	r3, #1
  4060b4:	657b      	str	r3, [r7, #84]	; 0x54
  4060b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060b8:	2b04      	cmp	r3, #4
  4060ba:	f77f aea8 	ble.w	405e0e <show_chassis_status_info+0x32>
				sanMinutesMin = sanMinutesLower;
			}
		}
	}
	
	print_ecdbg("MAX DTE: ");
  4060be:	4830      	ldr	r0, [pc, #192]	; (406180 <show_chassis_status_info+0x3a4>)
  4060c0:	4b2e      	ldr	r3, [pc, #184]	; (40617c <show_chassis_status_info+0x3a0>)
  4060c2:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMax);
  4060c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  4060c8:	4618      	mov	r0, r3
  4060ca:	4b2e      	ldr	r3, [pc, #184]	; (406184 <show_chassis_status_info+0x3a8>)
  4060cc:	4798      	blx	r3
	print_ecdbg(" MIN DTE: ");
  4060ce:	482e      	ldr	r0, [pc, #184]	; (406188 <show_chassis_status_info+0x3ac>)
  4060d0:	4b2a      	ldr	r3, [pc, #168]	; (40617c <show_chassis_status_info+0x3a0>)
  4060d2:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMin);
  4060d4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
  4060d8:	4618      	mov	r0, r3
  4060da:	4b2a      	ldr	r3, [pc, #168]	; (406184 <show_chassis_status_info+0x3a8>)
  4060dc:	4798      	blx	r3
	print_ecdbg("\r\n");
  4060de:	482b      	ldr	r0, [pc, #172]	; (40618c <show_chassis_status_info+0x3b0>)
  4060e0:	4b26      	ldr	r3, [pc, #152]	; (40617c <show_chassis_status_info+0x3a0>)
  4060e2:	4798      	blx	r3
	
	print_ecdbg("TOTAL SANITIZE TIME: ");
  4060e4:	482a      	ldr	r0, [pc, #168]	; (406190 <show_chassis_status_info+0x3b4>)
  4060e6:	4b25      	ldr	r3, [pc, #148]	; (40617c <show_chassis_status_info+0x3a0>)
  4060e8:	4798      	blx	r3
	if ((m.sanMins/60) < 10)
  4060ea:	4b2a      	ldr	r3, [pc, #168]	; (406194 <show_chassis_status_info+0x3b8>)
  4060ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4060ee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
  4060f2:	d202      	bcs.n	4060fa <show_chassis_status_info+0x31e>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  4060f4:	4828      	ldr	r0, [pc, #160]	; (406198 <show_chassis_status_info+0x3bc>)
  4060f6:	4b21      	ldr	r3, [pc, #132]	; (40617c <show_chassis_status_info+0x3a0>)
  4060f8:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins/60));
  4060fa:	4b26      	ldr	r3, [pc, #152]	; (406194 <show_chassis_status_info+0x3b8>)
  4060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4060fe:	4a27      	ldr	r2, [pc, #156]	; (40619c <show_chassis_status_info+0x3c0>)
  406100:	fba2 2303 	umull	r2, r3, r2, r3
  406104:	095b      	lsrs	r3, r3, #5
  406106:	4618      	mov	r0, r3
  406108:	4b1e      	ldr	r3, [pc, #120]	; (406184 <show_chassis_status_info+0x3a8>)
  40610a:	4798      	blx	r3
	print_ecdbg(":");
  40610c:	4824      	ldr	r0, [pc, #144]	; (4061a0 <show_chassis_status_info+0x3c4>)
  40610e:	4b1b      	ldr	r3, [pc, #108]	; (40617c <show_chassis_status_info+0x3a0>)
  406110:	4798      	blx	r3

	if ((m.sanMins%60) < 10)
  406112:	4b20      	ldr	r3, [pc, #128]	; (406194 <show_chassis_status_info+0x3b8>)
  406114:	6e19      	ldr	r1, [r3, #96]	; 0x60
  406116:	4b21      	ldr	r3, [pc, #132]	; (40619c <show_chassis_status_info+0x3c0>)
  406118:	fba3 2301 	umull	r2, r3, r3, r1
  40611c:	095a      	lsrs	r2, r3, #5
  40611e:	4613      	mov	r3, r2
  406120:	011b      	lsls	r3, r3, #4
  406122:	1a9b      	subs	r3, r3, r2
  406124:	009b      	lsls	r3, r3, #2
  406126:	1aca      	subs	r2, r1, r3
  406128:	2a09      	cmp	r2, #9
  40612a:	d802      	bhi.n	406132 <show_chassis_status_info+0x356>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  40612c:	481a      	ldr	r0, [pc, #104]	; (406198 <show_chassis_status_info+0x3bc>)
  40612e:	4b13      	ldr	r3, [pc, #76]	; (40617c <show_chassis_status_info+0x3a0>)
  406130:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins%60));
  406132:	4b18      	ldr	r3, [pc, #96]	; (406194 <show_chassis_status_info+0x3b8>)
  406134:	6e19      	ldr	r1, [r3, #96]	; 0x60
  406136:	4b19      	ldr	r3, [pc, #100]	; (40619c <show_chassis_status_info+0x3c0>)
  406138:	fba3 2301 	umull	r2, r3, r3, r1
  40613c:	095a      	lsrs	r2, r3, #5
  40613e:	4613      	mov	r3, r2
  406140:	011b      	lsls	r3, r3, #4
  406142:	1a9b      	subs	r3, r3, r2
  406144:	009b      	lsls	r3, r3, #2
  406146:	1aca      	subs	r2, r1, r3
  406148:	4610      	mov	r0, r2
  40614a:	4b0e      	ldr	r3, [pc, #56]	; (406184 <show_chassis_status_info+0x3a8>)
  40614c:	4798      	blx	r3

	print_ecdbg("  TOTAL SANITIZE CYCLES: ");
  40614e:	4815      	ldr	r0, [pc, #84]	; (4061a4 <show_chassis_status_info+0x3c8>)
  406150:	4b0a      	ldr	r3, [pc, #40]	; (40617c <show_chassis_status_info+0x3a0>)
  406152:	4798      	blx	r3
	print_ecdbg_num(sanc.cycles);
  406154:	4b14      	ldr	r3, [pc, #80]	; (4061a8 <show_chassis_status_info+0x3cc>)
  406156:	681b      	ldr	r3, [r3, #0]
  406158:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40615c:	4618      	mov	r0, r3
  40615e:	4b09      	ldr	r3, [pc, #36]	; (406184 <show_chassis_status_info+0x3a8>)
  406160:	4798      	blx	r3

	print_ecdbg("\r\n");
  406162:	480a      	ldr	r0, [pc, #40]	; (40618c <show_chassis_status_info+0x3b0>)
  406164:	4b05      	ldr	r3, [pc, #20]	; (40617c <show_chassis_status_info+0x3a0>)
  406166:	4798      	blx	r3
	
}
  406168:	376c      	adds	r7, #108	; 0x6c
  40616a:	46bd      	mov	sp, r7
  40616c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406170:	20401674 	.word	0x20401674
  406174:	0040d1d4 	.word	0x0040d1d4
  406178:	004075fd 	.word	0x004075fd
  40617c:	004026b1 	.word	0x004026b1
  406180:	0040d224 	.word	0x0040d224
  406184:	004048f9 	.word	0x004048f9
  406188:	0040d230 	.word	0x0040d230
  40618c:	0040cd14 	.word	0x0040cd14
  406190:	0040d23c 	.word	0x0040d23c
  406194:	204017e8 	.word	0x204017e8
  406198:	0040d254 	.word	0x0040d254
  40619c:	88888889 	.word	0x88888889
  4061a0:	0040d258 	.word	0x0040d258
  4061a4:	0040d25c 	.word	0x0040d25c
  4061a8:	20401720 	.word	0x20401720

004061ac <show_chassis_sysErr>:


void show_chassis_sysErr(void);
void show_chassis_sysErr(void)
{
  4061ac:	b5b0      	push	{r4, r5, r7, lr}
  4061ae:	b09a      	sub	sp, #104	; 0x68
  4061b0:	af00      	add	r7, sp, #0
	char str[80];
	

	print_ecdbg("\r\n***SYSTEM TESTS***\r\n\r\n");
  4061b2:	4898      	ldr	r0, [pc, #608]	; (406414 <show_chassis_sysErr+0x268>)
  4061b4:	4b98      	ldr	r3, [pc, #608]	; (406418 <show_chassis_sysErr+0x26c>)
  4061b6:	4798      	blx	r3


/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
  4061b8:	1d3b      	adds	r3, r7, #4
  4061ba:	4a98      	ldr	r2, [pc, #608]	; (40641c <show_chassis_sysErr+0x270>)
  4061bc:	461c      	mov	r4, r3
  4061be:	4615      	mov	r5, r2
  4061c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4061c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4061c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4061c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4061c8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4061cc:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<8; i++)
  4061d0:	2300      	movs	r3, #0
  4061d2:	667b      	str	r3, [r7, #100]	; 0x64
  4061d4:	e027      	b.n	406226 <show_chassis_sysErr+0x7a>
	{
		if ((sysErr.topdrive & BIT(i)))
  4061d6:	4b92      	ldr	r3, [pc, #584]	; (406420 <show_chassis_sysErr+0x274>)
  4061d8:	781b      	ldrb	r3, [r3, #0]
  4061da:	461a      	mov	r2, r3
  4061dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4061de:	fa42 f303 	asr.w	r3, r2, r3
  4061e2:	f003 0301 	and.w	r3, r3, #1
  4061e6:	2b00      	cmp	r3, #0
  4061e8:	d00d      	beq.n	406206 <show_chassis_sysErr+0x5a>
		{
			strcat(str,"F ");			
  4061ea:	1d3b      	adds	r3, r7, #4
  4061ec:	4618      	mov	r0, r3
  4061ee:	4b8d      	ldr	r3, [pc, #564]	; (406424 <show_chassis_sysErr+0x278>)
  4061f0:	4798      	blx	r3
  4061f2:	4603      	mov	r3, r0
  4061f4:	461a      	mov	r2, r3
  4061f6:	1d3b      	adds	r3, r7, #4
  4061f8:	4413      	add	r3, r2
  4061fa:	4a8b      	ldr	r2, [pc, #556]	; (406428 <show_chassis_sysErr+0x27c>)
  4061fc:	8811      	ldrh	r1, [r2, #0]
  4061fe:	7892      	ldrb	r2, [r2, #2]
  406200:	8019      	strh	r1, [r3, #0]
  406202:	709a      	strb	r2, [r3, #2]
  406204:	e00c      	b.n	406220 <show_chassis_sysErr+0x74>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  406206:	1d3b      	adds	r3, r7, #4
  406208:	4618      	mov	r0, r3
  40620a:	4b86      	ldr	r3, [pc, #536]	; (406424 <show_chassis_sysErr+0x278>)
  40620c:	4798      	blx	r3
  40620e:	4603      	mov	r3, r0
  406210:	461a      	mov	r2, r3
  406212:	1d3b      	adds	r3, r7, #4
  406214:	4413      	add	r3, r2
  406216:	4a85      	ldr	r2, [pc, #532]	; (40642c <show_chassis_sysErr+0x280>)
  406218:	8811      	ldrh	r1, [r2, #0]
  40621a:	7892      	ldrb	r2, [r2, #2]
  40621c:	8019      	strh	r1, [r3, #0]
  40621e:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
	
	for (int i=0; i<8; i++)
  406220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  406222:	3301      	adds	r3, #1
  406224:	667b      	str	r3, [r7, #100]	; 0x64
  406226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  406228:	2b07      	cmp	r3, #7
  40622a:	ddd4      	ble.n	4061d6 <show_chassis_sysErr+0x2a>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  40622c:	1d3b      	adds	r3, r7, #4
  40622e:	4618      	mov	r0, r3
  406230:	4b79      	ldr	r3, [pc, #484]	; (406418 <show_chassis_sysErr+0x26c>)
  406232:	4798      	blx	r3
	print_ecdbg("\r\n");
  406234:	487e      	ldr	r0, [pc, #504]	; (406430 <show_chassis_sysErr+0x284>)
  406236:	4b78      	ldr	r3, [pc, #480]	; (406418 <show_chassis_sysErr+0x26c>)
  406238:	4798      	blx	r3
	
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
  40623a:	1d3b      	adds	r3, r7, #4
  40623c:	4a7d      	ldr	r2, [pc, #500]	; (406434 <show_chassis_sysErr+0x288>)
  40623e:	461c      	mov	r4, r3
  406240:	4615      	mov	r5, r2
  406242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  406244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  406248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40624a:	e895 0003 	ldmia.w	r5, {r0, r1}
  40624e:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<12; i++)
  406252:	2300      	movs	r3, #0
  406254:	663b      	str	r3, [r7, #96]	; 0x60
  406256:	e026      	b.n	4062a6 <show_chassis_sysErr+0xfa>
	{
		if ((sysErr.botdrive & BIT(i)))
  406258:	4b71      	ldr	r3, [pc, #452]	; (406420 <show_chassis_sysErr+0x274>)
  40625a:	685b      	ldr	r3, [r3, #4]
  40625c:	2101      	movs	r1, #1
  40625e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
  406260:	fa01 f202 	lsl.w	r2, r1, r2
  406264:	4013      	ands	r3, r2
  406266:	2b00      	cmp	r3, #0
  406268:	d00d      	beq.n	406286 <show_chassis_sysErr+0xda>
		{
			strcat(str,"F ");			
  40626a:	1d3b      	adds	r3, r7, #4
  40626c:	4618      	mov	r0, r3
  40626e:	4b6d      	ldr	r3, [pc, #436]	; (406424 <show_chassis_sysErr+0x278>)
  406270:	4798      	blx	r3
  406272:	4603      	mov	r3, r0
  406274:	461a      	mov	r2, r3
  406276:	1d3b      	adds	r3, r7, #4
  406278:	4413      	add	r3, r2
  40627a:	4a6b      	ldr	r2, [pc, #428]	; (406428 <show_chassis_sysErr+0x27c>)
  40627c:	8811      	ldrh	r1, [r2, #0]
  40627e:	7892      	ldrb	r2, [r2, #2]
  406280:	8019      	strh	r1, [r3, #0]
  406282:	709a      	strb	r2, [r3, #2]
  406284:	e00c      	b.n	4062a0 <show_chassis_sysErr+0xf4>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  406286:	1d3b      	adds	r3, r7, #4
  406288:	4618      	mov	r0, r3
  40628a:	4b66      	ldr	r3, [pc, #408]	; (406424 <show_chassis_sysErr+0x278>)
  40628c:	4798      	blx	r3
  40628e:	4603      	mov	r3, r0
  406290:	461a      	mov	r2, r3
  406292:	1d3b      	adds	r3, r7, #4
  406294:	4413      	add	r3, r2
  406296:	4a65      	ldr	r2, [pc, #404]	; (40642c <show_chassis_sysErr+0x280>)
  406298:	8811      	ldrh	r1, [r2, #0]
  40629a:	7892      	ldrb	r2, [r2, #2]
  40629c:	8019      	strh	r1, [r3, #0]
  40629e:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
	
	for (int i=0; i<12; i++)
  4062a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4062a2:	3301      	adds	r3, #1
  4062a4:	663b      	str	r3, [r7, #96]	; 0x60
  4062a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  4062a8:	2b0b      	cmp	r3, #11
  4062aa:	ddd5      	ble.n	406258 <show_chassis_sysErr+0xac>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  4062ac:	1d3b      	adds	r3, r7, #4
  4062ae:	4618      	mov	r0, r3
  4062b0:	4b59      	ldr	r3, [pc, #356]	; (406418 <show_chassis_sysErr+0x26c>)
  4062b2:	4798      	blx	r3
	print_ecdbg("\r\n");
  4062b4:	485e      	ldr	r0, [pc, #376]	; (406430 <show_chassis_sysErr+0x284>)
  4062b6:	4b58      	ldr	r3, [pc, #352]	; (406418 <show_chassis_sysErr+0x26c>)
  4062b8:	4798      	blx	r3
	
/*
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
  4062ba:	1d3b      	adds	r3, r7, #4
  4062bc:	4a5e      	ldr	r2, [pc, #376]	; (406438 <show_chassis_sysErr+0x28c>)
  4062be:	461c      	mov	r4, r3
  4062c0:	4615      	mov	r5, r2
  4062c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4062c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4062c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4062c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4062ca:	e895 0003 	ldmia.w	r5, {r0, r1}
  4062ce:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<5; i++)
  4062d2:	2300      	movs	r3, #0
  4062d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  4062d6:	e029      	b.n	40632c <show_chassis_sysErr+0x180>
	{
		if ((sysErr.flashArea & BIT(i)) == SE_FAIL)
  4062d8:	4b51      	ldr	r3, [pc, #324]	; (406420 <show_chassis_sysErr+0x274>)
  4062da:	689b      	ldr	r3, [r3, #8]
  4062dc:	2101      	movs	r1, #1
  4062de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  4062e0:	fa01 f202 	lsl.w	r2, r1, r2
  4062e4:	4013      	ands	r3, r2
  4062e6:	2b01      	cmp	r3, #1
  4062e8:	d110      	bne.n	40630c <show_chassis_sysErr+0x160>
		{
			strcat(str, "F ");
  4062ea:	1d3b      	adds	r3, r7, #4
  4062ec:	4618      	mov	r0, r3
  4062ee:	4b4d      	ldr	r3, [pc, #308]	; (406424 <show_chassis_sysErr+0x278>)
  4062f0:	4798      	blx	r3
  4062f2:	4603      	mov	r3, r0
  4062f4:	461a      	mov	r2, r3
  4062f6:	1d3b      	adds	r3, r7, #4
  4062f8:	4413      	add	r3, r2
  4062fa:	4a4b      	ldr	r2, [pc, #300]	; (406428 <show_chassis_sysErr+0x27c>)
  4062fc:	8811      	ldrh	r1, [r2, #0]
  4062fe:	7892      	ldrb	r2, [r2, #2]
  406300:	8019      	strh	r1, [r3, #0]
  406302:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  406304:	4b4d      	ldr	r3, [pc, #308]	; (40643c <show_chassis_sysErr+0x290>)
  406306:	2208      	movs	r2, #8
  406308:	701a      	strb	r2, [r3, #0]
  40630a:	e00c      	b.n	406326 <show_chassis_sysErr+0x17a>
		}
		else
		{
			strcat(str, "P ");
  40630c:	1d3b      	adds	r3, r7, #4
  40630e:	4618      	mov	r0, r3
  406310:	4b44      	ldr	r3, [pc, #272]	; (406424 <show_chassis_sysErr+0x278>)
  406312:	4798      	blx	r3
  406314:	4603      	mov	r3, r0
  406316:	461a      	mov	r2, r3
  406318:	1d3b      	adds	r3, r7, #4
  40631a:	4413      	add	r3, r2
  40631c:	4a43      	ldr	r2, [pc, #268]	; (40642c <show_chassis_sysErr+0x280>)
  40631e:	8811      	ldrh	r1, [r2, #0]
  406320:	7892      	ldrb	r2, [r2, #2]
  406322:	8019      	strh	r1, [r3, #0]
  406324:	709a      	strb	r2, [r3, #2]
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
	
	for (int i=0; i<5; i++)
  406326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406328:	3301      	adds	r3, #1
  40632a:	65fb      	str	r3, [r7, #92]	; 0x5c
  40632c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40632e:	2b04      	cmp	r3, #4
  406330:	ddd2      	ble.n	4062d8 <show_chassis_sysErr+0x12c>
		{
			strcat(str, "P ");
		}
	}
	
	print_ecdbg(str);
  406332:	1d3b      	adds	r3, r7, #4
  406334:	4618      	mov	r0, r3
  406336:	4b38      	ldr	r3, [pc, #224]	; (406418 <show_chassis_sysErr+0x26c>)
  406338:	4798      	blx	r3
	print_ecdbg("\r\n");
  40633a:	483d      	ldr	r0, [pc, #244]	; (406430 <show_chassis_sysErr+0x284>)
  40633c:	4b36      	ldr	r3, [pc, #216]	; (406418 <show_chassis_sysErr+0x26c>)
  40633e:	4798      	blx	r3
	
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
  406340:	1d3b      	adds	r3, r7, #4
  406342:	4a3f      	ldr	r2, [pc, #252]	; (406440 <show_chassis_sysErr+0x294>)
  406344:	461c      	mov	r4, r3
  406346:	4615      	mov	r5, r2
  406348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40634a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40634c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40634e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406350:	e895 0003 	ldmia.w	r5, {r0, r1}
  406354:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  406358:	2300      	movs	r3, #0
  40635a:	65bb      	str	r3, [r7, #88]	; 0x58
  40635c:	e02a      	b.n	4063b4 <show_chassis_sysErr+0x208>
	{
		if ((sysErr.ledBrdSerialIdCsum & BIT(i)) == SE_FAIL)
  40635e:	4b30      	ldr	r3, [pc, #192]	; (406420 <show_chassis_sysErr+0x274>)
  406360:	7b1b      	ldrb	r3, [r3, #12]
  406362:	4619      	mov	r1, r3
  406364:	2201      	movs	r2, #1
  406366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406368:	fa02 f303 	lsl.w	r3, r2, r3
  40636c:	400b      	ands	r3, r1
  40636e:	2b01      	cmp	r3, #1
  406370:	d110      	bne.n	406394 <show_chassis_sysErr+0x1e8>
		{
			strcat(str, "F ");
  406372:	1d3b      	adds	r3, r7, #4
  406374:	4618      	mov	r0, r3
  406376:	4b2b      	ldr	r3, [pc, #172]	; (406424 <show_chassis_sysErr+0x278>)
  406378:	4798      	blx	r3
  40637a:	4603      	mov	r3, r0
  40637c:	461a      	mov	r2, r3
  40637e:	1d3b      	adds	r3, r7, #4
  406380:	4413      	add	r3, r2
  406382:	4a29      	ldr	r2, [pc, #164]	; (406428 <show_chassis_sysErr+0x27c>)
  406384:	8811      	ldrh	r1, [r2, #0]
  406386:	7892      	ldrb	r2, [r2, #2]
  406388:	8019      	strh	r1, [r3, #0]
  40638a:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  40638c:	4b2b      	ldr	r3, [pc, #172]	; (40643c <show_chassis_sysErr+0x290>)
  40638e:	2208      	movs	r2, #8
  406390:	701a      	strb	r2, [r3, #0]
  406392:	e00c      	b.n	4063ae <show_chassis_sysErr+0x202>
		}
		else
		{
			strcat(str, "P ");
  406394:	1d3b      	adds	r3, r7, #4
  406396:	4618      	mov	r0, r3
  406398:	4b22      	ldr	r3, [pc, #136]	; (406424 <show_chassis_sysErr+0x278>)
  40639a:	4798      	blx	r3
  40639c:	4603      	mov	r3, r0
  40639e:	461a      	mov	r2, r3
  4063a0:	1d3b      	adds	r3, r7, #4
  4063a2:	4413      	add	r3, r2
  4063a4:	4a21      	ldr	r2, [pc, #132]	; (40642c <show_chassis_sysErr+0x280>)
  4063a6:	8811      	ldrh	r1, [r2, #0]
  4063a8:	7892      	ldrb	r2, [r2, #2]
  4063aa:	8019      	strh	r1, [r3, #0]
  4063ac:	709a      	strb	r2, [r3, #2]
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4063ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4063b0:	3301      	adds	r3, #1
  4063b2:	65bb      	str	r3, [r7, #88]	; 0x58
  4063b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  4063b6:	2b04      	cmp	r3, #4
  4063b8:	ddd1      	ble.n	40635e <show_chassis_sysErr+0x1b2>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  4063ba:	1d3b      	adds	r3, r7, #4
  4063bc:	4618      	mov	r0, r3
  4063be:	4b16      	ldr	r3, [pc, #88]	; (406418 <show_chassis_sysErr+0x26c>)
  4063c0:	4798      	blx	r3
	print_ecdbg("\r\n");
  4063c2:	481b      	ldr	r0, [pc, #108]	; (406430 <show_chassis_sysErr+0x284>)
  4063c4:	4b14      	ldr	r3, [pc, #80]	; (406418 <show_chassis_sysErr+0x26c>)
  4063c6:	4798      	blx	r3
	

/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
  4063c8:	1d3b      	adds	r3, r7, #4
  4063ca:	4a1e      	ldr	r2, [pc, #120]	; (406444 <show_chassis_sysErr+0x298>)
  4063cc:	461c      	mov	r4, r3
  4063ce:	4615      	mov	r5, r2
  4063d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4063d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4063d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4063d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4063d8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4063dc:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  4063e0:	2300      	movs	r3, #0
  4063e2:	657b      	str	r3, [r7, #84]	; 0x54
  4063e4:	e042      	b.n	40646c <show_chassis_sysErr+0x2c0>
	{
		if (ledBrdSide[i].maxUsageReached)
  4063e6:	4918      	ldr	r1, [pc, #96]	; (406448 <show_chassis_sysErr+0x29c>)
  4063e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4063ea:	4613      	mov	r3, r2
  4063ec:	009b      	lsls	r3, r3, #2
  4063ee:	4413      	add	r3, r2
  4063f0:	440b      	add	r3, r1
  4063f2:	789b      	ldrb	r3, [r3, #2]
  4063f4:	2b00      	cmp	r3, #0
  4063f6:	d029      	beq.n	40644c <show_chassis_sysErr+0x2a0>
		{
			strcat(str, "F ");
  4063f8:	1d3b      	adds	r3, r7, #4
  4063fa:	4618      	mov	r0, r3
  4063fc:	4b09      	ldr	r3, [pc, #36]	; (406424 <show_chassis_sysErr+0x278>)
  4063fe:	4798      	blx	r3
  406400:	4603      	mov	r3, r0
  406402:	461a      	mov	r2, r3
  406404:	1d3b      	adds	r3, r7, #4
  406406:	4413      	add	r3, r2
  406408:	4a07      	ldr	r2, [pc, #28]	; (406428 <show_chassis_sysErr+0x27c>)
  40640a:	8811      	ldrh	r1, [r2, #0]
  40640c:	7892      	ldrb	r2, [r2, #2]
  40640e:	8019      	strh	r1, [r3, #0]
  406410:	709a      	strb	r2, [r3, #2]
  406412:	e028      	b.n	406466 <show_chassis_sysErr+0x2ba>
  406414:	0040d278 	.word	0x0040d278
  406418:	004026b1 	.word	0x004026b1
  40641c:	0040d294 	.word	0x0040d294
  406420:	204016e4 	.word	0x204016e4
  406424:	00407649 	.word	0x00407649
  406428:	0040d2bc 	.word	0x0040d2bc
  40642c:	0040d2c0 	.word	0x0040d2c0
  406430:	0040cd14 	.word	0x0040cd14
  406434:	0040d2c4 	.word	0x0040d2c4
  406438:	0040d2ec 	.word	0x0040d2ec
  40643c:	204009c3 	.word	0x204009c3
  406440:	0040d314 	.word	0x0040d314
  406444:	0040d33c 	.word	0x0040d33c
  406448:	204016f8 	.word	0x204016f8
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str, "P ");
  40644c:	1d3b      	adds	r3, r7, #4
  40644e:	4618      	mov	r0, r3
  406450:	4b27      	ldr	r3, [pc, #156]	; (4064f0 <show_chassis_sysErr+0x344>)
  406452:	4798      	blx	r3
  406454:	4603      	mov	r3, r0
  406456:	461a      	mov	r2, r3
  406458:	1d3b      	adds	r3, r7, #4
  40645a:	4413      	add	r3, r2
  40645c:	4a25      	ldr	r2, [pc, #148]	; (4064f4 <show_chassis_sysErr+0x348>)
  40645e:	8811      	ldrh	r1, [r2, #0]
  406460:	7892      	ldrb	r2, [r2, #2]
  406462:	8019      	strh	r1, [r3, #0]
  406464:	709a      	strb	r2, [r3, #2]
/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  406466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406468:	3301      	adds	r3, #1
  40646a:	657b      	str	r3, [r7, #84]	; 0x54
  40646c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40646e:	2b07      	cmp	r3, #7
  406470:	ddb9      	ble.n	4063e6 <show_chassis_sysErr+0x23a>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  406472:	1d3b      	adds	r3, r7, #4
  406474:	4618      	mov	r0, r3
  406476:	4b20      	ldr	r3, [pc, #128]	; (4064f8 <show_chassis_sysErr+0x34c>)
  406478:	4798      	blx	r3
	print_ecdbg("\r\n");
  40647a:	4820      	ldr	r0, [pc, #128]	; (4064fc <show_chassis_sysErr+0x350>)
  40647c:	4b1e      	ldr	r3, [pc, #120]	; (4064f8 <show_chassis_sysErr+0x34c>)
  40647e:	4798      	blx	r3

/*
 * Usage Struct Full
 */

	sprintf(str, "Usage Struct Open Slots                ");
  406480:	1d3b      	adds	r3, r7, #4
  406482:	4a1f      	ldr	r2, [pc, #124]	; (406500 <show_chassis_sysErr+0x354>)
  406484:	461c      	mov	r4, r3
  406486:	4615      	mov	r5, r2
  406488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40648c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40648e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406490:	e895 0003 	ldmia.w	r5, {r0, r1}
  406494:	e884 0003 	stmia.w	r4, {r0, r1}
	if (sysErr.usageStructsFull == SE_FAIL)
  406498:	4b1a      	ldr	r3, [pc, #104]	; (406504 <show_chassis_sysErr+0x358>)
  40649a:	7b9b      	ldrb	r3, [r3, #14]
  40649c:	2b01      	cmp	r3, #1
  40649e:	d110      	bne.n	4064c2 <show_chassis_sysErr+0x316>
	{
		strcat(str, "F \r\n");
  4064a0:	1d3b      	adds	r3, r7, #4
  4064a2:	4618      	mov	r0, r3
  4064a4:	4b12      	ldr	r3, [pc, #72]	; (4064f0 <show_chassis_sysErr+0x344>)
  4064a6:	4798      	blx	r3
  4064a8:	4603      	mov	r3, r0
  4064aa:	461a      	mov	r2, r3
  4064ac:	1d3b      	adds	r3, r7, #4
  4064ae:	4413      	add	r3, r2
  4064b0:	4a15      	ldr	r2, [pc, #84]	; (406508 <show_chassis_sysErr+0x35c>)
  4064b2:	6810      	ldr	r0, [r2, #0]
  4064b4:	6018      	str	r0, [r3, #0]
  4064b6:	7912      	ldrb	r2, [r2, #4]
  4064b8:	711a      	strb	r2, [r3, #4]
		electroclaveState = STATE_CHASSIS_ERROR;
  4064ba:	4b14      	ldr	r3, [pc, #80]	; (40650c <show_chassis_sysErr+0x360>)
  4064bc:	2208      	movs	r2, #8
  4064be:	701a      	strb	r2, [r3, #0]
  4064c0:	e00c      	b.n	4064dc <show_chassis_sysErr+0x330>
	}
	else
	{
		strcat(str, "P \r\n");
  4064c2:	1d3b      	adds	r3, r7, #4
  4064c4:	4618      	mov	r0, r3
  4064c6:	4b0a      	ldr	r3, [pc, #40]	; (4064f0 <show_chassis_sysErr+0x344>)
  4064c8:	4798      	blx	r3
  4064ca:	4603      	mov	r3, r0
  4064cc:	461a      	mov	r2, r3
  4064ce:	1d3b      	adds	r3, r7, #4
  4064d0:	4413      	add	r3, r2
  4064d2:	4a0f      	ldr	r2, [pc, #60]	; (406510 <show_chassis_sysErr+0x364>)
  4064d4:	6810      	ldr	r0, [r2, #0]
  4064d6:	6018      	str	r0, [r3, #0]
  4064d8:	7912      	ldrb	r2, [r2, #4]
  4064da:	711a      	strb	r2, [r3, #4]
	}
	
	print_ecdbg(str);
  4064dc:	1d3b      	adds	r3, r7, #4
  4064de:	4618      	mov	r0, r3
  4064e0:	4b05      	ldr	r3, [pc, #20]	; (4064f8 <show_chassis_sysErr+0x34c>)
  4064e2:	4798      	blx	r3
	print_ecdbg("\r\n");
  4064e4:	4805      	ldr	r0, [pc, #20]	; (4064fc <show_chassis_sysErr+0x350>)
  4064e6:	4b04      	ldr	r3, [pc, #16]	; (4064f8 <show_chassis_sysErr+0x34c>)
  4064e8:	4798      	blx	r3

}
  4064ea:	3768      	adds	r7, #104	; 0x68
  4064ec:	46bd      	mov	sp, r7
  4064ee:	bdb0      	pop	{r4, r5, r7, pc}
  4064f0:	00407649 	.word	0x00407649
  4064f4:	0040d2c0 	.word	0x0040d2c0
  4064f8:	004026b1 	.word	0x004026b1
  4064fc:	0040cd14 	.word	0x0040cd14
  406500:	0040d364 	.word	0x0040d364
  406504:	204016e4 	.word	0x204016e4
  406508:	0040d38c 	.word	0x0040d38c
  40650c:	204009c3 	.word	0x204009c3
  406510:	0040d394 	.word	0x0040d394

00406514 <show_chassis_all_LED_boards>:

void show_chassis_all_LED_boards(void);
void show_chassis_all_LED_boards(void)
{
  406514:	b5f0      	push	{r4, r5, r6, r7, lr}
  406516:	b09d      	sub	sp, #116	; 0x74
  406518:	af06      	add	r7, sp, #24
	char str[80];
	int i = 0;
  40651a:	2300      	movs	r3, #0
  40651c:	657b      	str	r3, [r7, #84]	; 0x54

	print_ecdbg("\r\n***LED BOARDS MASTER LIST***\r\n\r\n");
  40651e:	483a      	ldr	r0, [pc, #232]	; (406608 <show_chassis_all_LED_boards+0xf4>)
  406520:	4b3a      	ldr	r3, [pc, #232]	; (40660c <show_chassis_all_LED_boards+0xf8>)
  406522:	4798      	blx	r3
	
	while(1)
	{
		if (sf[i].slotFilled)
  406524:	4a3a      	ldr	r2, [pc, #232]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406528:	00db      	lsls	r3, r3, #3
  40652a:	4413      	add	r3, r2
  40652c:	799b      	ldrb	r3, [r3, #6]
  40652e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406532:	b2db      	uxtb	r3, r3
  406534:	2b00      	cmp	r3, #0
  406536:	d05c      	beq.n	4065f2 <show_chassis_all_LED_boards+0xde>
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  406538:	4a35      	ldr	r2, [pc, #212]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  40653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40653c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  406540:	461e      	mov	r6, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  406542:	4a33      	ldr	r2, [pc, #204]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406546:	00db      	lsls	r3, r3, #3
  406548:	4413      	add	r3, r2
  40654a:	785b      	ldrb	r3, [r3, #1]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  40654c:	461d      	mov	r5, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  40654e:	4a30      	ldr	r2, [pc, #192]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406552:	00db      	lsls	r3, r3, #3
  406554:	4413      	add	r3, r2
  406556:	789b      	ldrb	r3, [r3, #2]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  406558:	461c      	mov	r4, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  40655a:	4a2d      	ldr	r2, [pc, #180]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  40655c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40655e:	00db      	lsls	r3, r3, #3
  406560:	4413      	add	r3, r2
  406562:	78db      	ldrb	r3, [r3, #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  406564:	4618      	mov	r0, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  406566:	4a2a      	ldr	r2, [pc, #168]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40656a:	00db      	lsls	r3, r3, #3
  40656c:	4413      	add	r3, r2
  40656e:	791b      	ldrb	r3, [r3, #4]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  406570:	4619      	mov	r1, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  406572:	4a27      	ldr	r2, [pc, #156]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406576:	00db      	lsls	r3, r3, #3
  406578:	4413      	add	r3, r2
  40657a:	795b      	ldrb	r3, [r3, #5]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  40657c:	461a      	mov	r2, r3
  40657e:	1d3b      	adds	r3, r7, #4
  406580:	9500      	str	r5, [sp, #0]
  406582:	9401      	str	r4, [sp, #4]
  406584:	9002      	str	r0, [sp, #8]
  406586:	9103      	str	r1, [sp, #12]
  406588:	9204      	str	r2, [sp, #16]
  40658a:	4618      	mov	r0, r3
  40658c:	4921      	ldr	r1, [pc, #132]	; (406614 <show_chassis_all_LED_boards+0x100>)
  40658e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  406590:	4633      	mov	r3, r6
  406592:	4c21      	ldr	r4, [pc, #132]	; (406618 <show_chassis_all_LED_boards+0x104>)
  406594:	47a0      	blx	r4
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
			
			if (sf[i].top_botn)
  406596:	4a1e      	ldr	r2, [pc, #120]	; (406610 <show_chassis_all_LED_boards+0xfc>)
  406598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40659a:	00db      	lsls	r3, r3, #3
  40659c:	4413      	add	r3, r2
  40659e:	799b      	ldrb	r3, [r3, #6]
  4065a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
  4065a4:	b2db      	uxtb	r3, r3
  4065a6:	2b00      	cmp	r3, #0
  4065a8:	d00f      	beq.n	4065ca <show_chassis_all_LED_boards+0xb6>
			{
				strcat(str, " TOP\r\n");
  4065aa:	1d3b      	adds	r3, r7, #4
  4065ac:	4618      	mov	r0, r3
  4065ae:	4b1b      	ldr	r3, [pc, #108]	; (40661c <show_chassis_all_LED_boards+0x108>)
  4065b0:	4798      	blx	r3
  4065b2:	4603      	mov	r3, r0
  4065b4:	461a      	mov	r2, r3
  4065b6:	1d3b      	adds	r3, r7, #4
  4065b8:	4413      	add	r3, r2
  4065ba:	4a19      	ldr	r2, [pc, #100]	; (406620 <show_chassis_all_LED_boards+0x10c>)
  4065bc:	6810      	ldr	r0, [r2, #0]
  4065be:	6018      	str	r0, [r3, #0]
  4065c0:	8891      	ldrh	r1, [r2, #4]
  4065c2:	7992      	ldrb	r2, [r2, #6]
  4065c4:	8099      	strh	r1, [r3, #4]
  4065c6:	719a      	strb	r2, [r3, #6]
  4065c8:	e00e      	b.n	4065e8 <show_chassis_all_LED_boards+0xd4>
			}
			else
			{
				strcat(str, " BOT\r\n");
  4065ca:	1d3b      	adds	r3, r7, #4
  4065cc:	4618      	mov	r0, r3
  4065ce:	4b13      	ldr	r3, [pc, #76]	; (40661c <show_chassis_all_LED_boards+0x108>)
  4065d0:	4798      	blx	r3
  4065d2:	4603      	mov	r3, r0
  4065d4:	461a      	mov	r2, r3
  4065d6:	1d3b      	adds	r3, r7, #4
  4065d8:	4413      	add	r3, r2
  4065da:	4a12      	ldr	r2, [pc, #72]	; (406624 <show_chassis_all_LED_boards+0x110>)
  4065dc:	6810      	ldr	r0, [r2, #0]
  4065de:	6018      	str	r0, [r3, #0]
  4065e0:	8891      	ldrh	r1, [r2, #4]
  4065e2:	7992      	ldrb	r2, [r2, #6]
  4065e4:	8099      	strh	r1, [r3, #4]
  4065e6:	719a      	strb	r2, [r3, #6]
			}
			
			print_ecdbg(str);
  4065e8:	1d3b      	adds	r3, r7, #4
  4065ea:	4618      	mov	r0, r3
  4065ec:	4b07      	ldr	r3, [pc, #28]	; (40660c <show_chassis_all_LED_boards+0xf8>)
  4065ee:	4798      	blx	r3
  4065f0:	e000      	b.n	4065f4 <show_chassis_all_LED_boards+0xe0>
		}
		else
		{
			break; //LED boards are stored contiguously, so if we hit a blank spot we are done with the entries in the list
  4065f2:	e003      	b.n	4065fc <show_chassis_all_LED_boards+0xe8>
		}
		i++;
  4065f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4065f6:	3301      	adds	r3, #1
  4065f8:	657b      	str	r3, [r7, #84]	; 0x54
		
	}
  4065fa:	e793      	b.n	406524 <show_chassis_all_LED_boards+0x10>
	
	print_ecdbg("\r\n\r\n");
  4065fc:	480a      	ldr	r0, [pc, #40]	; (406628 <show_chassis_all_LED_boards+0x114>)
  4065fe:	4b03      	ldr	r3, [pc, #12]	; (40660c <show_chassis_all_LED_boards+0xf8>)
  406600:	4798      	blx	r3

}
  406602:	375c      	adds	r7, #92	; 0x5c
  406604:	46bd      	mov	sp, r7
  406606:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406608:	0040d39c 	.word	0x0040d39c
  40660c:	004026b1 	.word	0x004026b1
  406610:	20401374 	.word	0x20401374
  406614:	0040d3c0 	.word	0x0040d3c0
  406618:	004075fd 	.word	0x004075fd
  40661c:	00407649 	.word	0x00407649
  406620:	0040d3e0 	.word	0x0040d3e0
  406624:	0040d3e8 	.word	0x0040d3e8
  406628:	0040d3f0 	.word	0x0040d3f0

0040662c <show_help_and_prompt>:

void show_help_and_prompt(void);
void show_help_and_prompt(void)
{
  40662c:	b580      	push	{r7, lr}
  40662e:	af00      	add	r7, sp, #0
	print_ecdbg("Type 'H' for help.\r\n\r\n");
  406630:	4801      	ldr	r0, [pc, #4]	; (406638 <show_help_and_prompt+0xc>)
  406632:	4b02      	ldr	r3, [pc, #8]	; (40663c <show_help_and_prompt+0x10>)
  406634:	4798      	blx	r3
}
  406636:	bd80      	pop	{r7, pc}
  406638:	0040d3f8 	.word	0x0040d3f8
  40663c:	004026b1 	.word	0x004026b1

00406640 <service_ecdbg_input>:
char cmd[20];
unsigned char cmdIdx = 0;

void service_ecdbg_input(void);
void service_ecdbg_input(void)
{
  406640:	b580      	push	{r7, lr}
  406642:	b084      	sub	sp, #16
  406644:	af00      	add	r7, sp, #0
	int rx_char;
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;
  406646:	2300      	movs	r3, #0
  406648:	72fb      	strb	r3, [r7, #11]
	
	
	if (usart_is_rx_ready(BOARD_USART)) {
  40664a:	4894      	ldr	r0, [pc, #592]	; (40689c <service_ecdbg_input+0x25c>)
  40664c:	4b94      	ldr	r3, [pc, #592]	; (4068a0 <service_ecdbg_input+0x260>)
  40664e:	4798      	blx	r3
  406650:	4603      	mov	r3, r0
  406652:	2b00      	cmp	r3, #0
  406654:	d009      	beq.n	40666a <service_ecdbg_input+0x2a>
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
  406656:	1d3b      	adds	r3, r7, #4
  406658:	4890      	ldr	r0, [pc, #576]	; (40689c <service_ecdbg_input+0x25c>)
  40665a:	4619      	mov	r1, r3
  40665c:	4b91      	ldr	r3, [pc, #580]	; (4068a4 <service_ecdbg_input+0x264>)
  40665e:	4798      	blx	r3
	{
		return;
	}


	if (rx_char == USART_FAILURE)
  406660:	687b      	ldr	r3, [r7, #4]
  406662:	f1b3 3fff 	cmp.w	r3, #4294967295
  406666:	d102      	bne.n	40666e <service_ecdbg_input+0x2e>
  406668:	e000      	b.n	40666c <service_ecdbg_input+0x2c>
	if (usart_is_rx_ready(BOARD_USART)) {
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
	}
	else
	{
		return;
  40666a:	e1a3      	b.n	4069b4 <service_ecdbg_input+0x374>


	if (rx_char == USART_FAILURE)
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
  40666c:	e1a2      	b.n	4069b4 <service_ecdbg_input+0x374>
	}
	if (rx_char == '\x03')
  40666e:	687b      	ldr	r3, [r7, #4]
  406670:	2b03      	cmp	r3, #3
  406672:	d100      	bne.n	406676 <service_ecdbg_input+0x36>
	{
		return;
  406674:	e19e      	b.n	4069b4 <service_ecdbg_input+0x374>
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
  406676:	687b      	ldr	r3, [r7, #4]
  406678:	2b09      	cmp	r3, #9
  40667a:	dd02      	ble.n	406682 <service_ecdbg_input+0x42>
  40667c:	687b      	ldr	r3, [r7, #4]
  40667e:	2b7a      	cmp	r3, #122	; 0x7a
  406680:	dd00      	ble.n	406684 <service_ecdbg_input+0x44>
	{
		return; //completely out of range, ignore
  406682:	e197      	b.n	4069b4 <service_ecdbg_input+0x374>
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  406684:	687b      	ldr	r3, [r7, #4]
  406686:	2b0d      	cmp	r3, #13
  406688:	d017      	beq.n	4066ba <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
  40668a:	687b      	ldr	r3, [r7, #4]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  40668c:	2b0a      	cmp	r3, #10
  40668e:	d014      	beq.n	4066ba <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  406690:	687b      	ldr	r3, [r7, #4]
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
  406692:	2b20      	cmp	r3, #32
  406694:	d011      	beq.n	4066ba <service_ecdbg_input+0x7a>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  406696:	687b      	ldr	r3, [r7, #4]
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  406698:	2b2f      	cmp	r3, #47	; 0x2f
  40669a:	dd02      	ble.n	4066a2 <service_ecdbg_input+0x62>
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  40669c:	687b      	ldr	r3, [r7, #4]
  40669e:	2b39      	cmp	r3, #57	; 0x39
  4066a0:	dd0b      	ble.n	4066ba <service_ecdbg_input+0x7a>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  4066a2:	687b      	ldr	r3, [r7, #4]
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  4066a4:	2b40      	cmp	r3, #64	; 0x40
  4066a6:	dd02      	ble.n	4066ae <service_ecdbg_input+0x6e>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  4066a8:	687b      	ldr	r3, [r7, #4]
  4066aa:	2b5a      	cmp	r3, #90	; 0x5a
  4066ac:	dd05      	ble.n	4066ba <service_ecdbg_input+0x7a>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  4066ae:	687b      	ldr	r3, [r7, #4]
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  4066b0:	2b60      	cmp	r3, #96	; 0x60
  4066b2:	dd1b      	ble.n	4066ec <service_ecdbg_input+0xac>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  4066b4:	687b      	ldr	r3, [r7, #4]
  4066b6:	2b7a      	cmp	r3, #122	; 0x7a
  4066b8:	dc18      	bgt.n	4066ec <service_ecdbg_input+0xac>
	{
		if (rx_char == 0x50)
  4066ba:	687b      	ldr	r3, [r7, #4]
  4066bc:	2b50      	cmp	r3, #80	; 0x50
  4066be:	d100      	bne.n	4066c2 <service_ecdbg_input+0x82>
		{
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
  4066c0:	e178      	b.n	4069b4 <service_ecdbg_input+0x374>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
  4066c2:	bf00      	nop
	{
		return;
	}


	cmd[cmdIdx++] = rx_char;
  4066c4:	4b78      	ldr	r3, [pc, #480]	; (4068a8 <service_ecdbg_input+0x268>)
  4066c6:	781b      	ldrb	r3, [r3, #0]
  4066c8:	1c5a      	adds	r2, r3, #1
  4066ca:	b2d1      	uxtb	r1, r2
  4066cc:	4a76      	ldr	r2, [pc, #472]	; (4068a8 <service_ecdbg_input+0x268>)
  4066ce:	7011      	strb	r1, [r2, #0]
  4066d0:	461a      	mov	r2, r3
  4066d2:	687b      	ldr	r3, [r7, #4]
  4066d4:	b2d9      	uxtb	r1, r3
  4066d6:	4b75      	ldr	r3, [pc, #468]	; (4068ac <service_ecdbg_input+0x26c>)
  4066d8:	5499      	strb	r1, [r3, r2]
	
	print_ecdbg(&rx_char);
  4066da:	1d3b      	adds	r3, r7, #4
  4066dc:	4618      	mov	r0, r3
  4066de:	4b74      	ldr	r3, [pc, #464]	; (4068b0 <service_ecdbg_input+0x270>)
  4066e0:	4798      	blx	r3
	if (rx_char == '\r')
  4066e2:	687b      	ldr	r3, [r7, #4]
  4066e4:	2b0d      	cmp	r3, #13
  4066e6:	f040 8165 	bne.w	4069b4 <service_ecdbg_input+0x374>
  4066ea:	e000      	b.n	4066ee <service_ecdbg_input+0xae>
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
		}
	}
	else
	{
		return;
  4066ec:	e162      	b.n	4069b4 <service_ecdbg_input+0x374>
	cmd[cmdIdx++] = rx_char;
	
	print_ecdbg(&rx_char);
	if (rx_char == '\r')
	{ 
		if (cmdIdx == 2)
  4066ee:	4b6e      	ldr	r3, [pc, #440]	; (4068a8 <service_ecdbg_input+0x268>)
  4066f0:	781b      	ldrb	r3, [r3, #0]
  4066f2:	2b02      	cmp	r3, #2
  4066f4:	f040 80ae 	bne.w	406854 <service_ecdbg_input+0x214>
		{
			switch(cmd[0])
  4066f8:	4b6c      	ldr	r3, [pc, #432]	; (4068ac <service_ecdbg_input+0x26c>)
  4066fa:	781b      	ldrb	r3, [r3, #0]
  4066fc:	3b44      	subs	r3, #68	; 0x44
  4066fe:	2b30      	cmp	r3, #48	; 0x30
  406700:	f200 8151 	bhi.w	4069a6 <service_ecdbg_input+0x366>
  406704:	a201      	add	r2, pc, #4	; (adr r2, 40670c <service_ecdbg_input+0xcc>)
  406706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40670a:	bf00      	nop
  40670c:	00406809 	.word	0x00406809
  406710:	004069a7 	.word	0x004069a7
  406714:	004069a7 	.word	0x004069a7
  406718:	004069a7 	.word	0x004069a7
  40671c:	004067d1 	.word	0x004067d1
  406720:	004069a7 	.word	0x004069a7
  406724:	004069a7 	.word	0x004069a7
  406728:	00406837 	.word	0x00406837
  40672c:	004069a7 	.word	0x004069a7
  406730:	004069a7 	.word	0x004069a7
  406734:	004069a7 	.word	0x004069a7
  406738:	004069a7 	.word	0x004069a7
  40673c:	004069a7 	.word	0x004069a7
  406740:	004069a7 	.word	0x004069a7
  406744:	004069a7 	.word	0x004069a7
  406748:	00406821 	.word	0x00406821
  40674c:	00406845 	.word	0x00406845
  406750:	004069a7 	.word	0x004069a7
  406754:	004069a7 	.word	0x004069a7
  406758:	004069a7 	.word	0x004069a7
  40675c:	004069a7 	.word	0x004069a7
  406760:	004069a7 	.word	0x004069a7
  406764:	004069a7 	.word	0x004069a7
  406768:	004069a7 	.word	0x004069a7
  40676c:	004069a7 	.word	0x004069a7
  406770:	004069a7 	.word	0x004069a7
  406774:	004069a7 	.word	0x004069a7
  406778:	004069a7 	.word	0x004069a7
  40677c:	004069a7 	.word	0x004069a7
  406780:	004069a7 	.word	0x004069a7
  406784:	004069a7 	.word	0x004069a7
  406788:	004069a7 	.word	0x004069a7
  40678c:	00406809 	.word	0x00406809
  406790:	004069a7 	.word	0x004069a7
  406794:	004069a7 	.word	0x004069a7
  406798:	004069a7 	.word	0x004069a7
  40679c:	004067d1 	.word	0x004067d1
  4067a0:	004069a7 	.word	0x004069a7
  4067a4:	004069a7 	.word	0x004069a7
  4067a8:	00406837 	.word	0x00406837
  4067ac:	004069a7 	.word	0x004069a7
  4067b0:	004069a7 	.word	0x004069a7
  4067b4:	004069a7 	.word	0x004069a7
  4067b8:	004069a7 	.word	0x004069a7
  4067bc:	004069a7 	.word	0x004069a7
  4067c0:	004069a7 	.word	0x004069a7
  4067c4:	004069a7 	.word	0x004069a7
  4067c8:	00406821 	.word	0x00406821
  4067cc:	00406845 	.word	0x00406845
			{
				case 'H':
				case 'h':
					print_ecdbg("\r\n**-----------------**\r\n");
  4067d0:	4838      	ldr	r0, [pc, #224]	; (4068b4 <service_ecdbg_input+0x274>)
  4067d2:	4b37      	ldr	r3, [pc, #220]	; (4068b0 <service_ecdbg_input+0x270>)
  4067d4:	4798      	blx	r3
					print_ecdbg("  Electroclave HELP\r\n");
  4067d6:	4838      	ldr	r0, [pc, #224]	; (4068b8 <service_ecdbg_input+0x278>)
  4067d8:	4b35      	ldr	r3, [pc, #212]	; (4068b0 <service_ecdbg_input+0x270>)
  4067da:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  4067dc:	4837      	ldr	r0, [pc, #220]	; (4068bc <service_ecdbg_input+0x27c>)
  4067de:	4b34      	ldr	r3, [pc, #208]	; (4068b0 <service_ecdbg_input+0x270>)
  4067e0:	4798      	blx	r3
					print_ecdbg("    H        - This help menu\r\n");
  4067e2:	4837      	ldr	r0, [pc, #220]	; (4068c0 <service_ecdbg_input+0x280>)
  4067e4:	4b32      	ldr	r3, [pc, #200]	; (4068b0 <service_ecdbg_input+0x270>)
  4067e6:	4798      	blx	r3
					print_ecdbg("    D        - Show current DTE setting\r\n");
  4067e8:	4836      	ldr	r0, [pc, #216]	; (4068c4 <service_ecdbg_input+0x284>)
  4067ea:	4b31      	ldr	r3, [pc, #196]	; (4068b0 <service_ecdbg_input+0x270>)
  4067ec:	4798      	blx	r3
					print_ecdbg("    D  xx    - Change initial DTE to xx minutes where 2 >= xx >= 59.\r\n");
  4067ee:	4836      	ldr	r0, [pc, #216]	; (4068c8 <service_ecdbg_input+0x288>)
  4067f0:	4b2f      	ldr	r3, [pc, #188]	; (4068b0 <service_ecdbg_input+0x270>)
  4067f2:	4798      	blx	r3
					print_ecdbg("    S        - System status\r\n");
  4067f4:	4835      	ldr	r0, [pc, #212]	; (4068cc <service_ecdbg_input+0x28c>)
  4067f6:	4b2e      	ldr	r3, [pc, #184]	; (4068b0 <service_ecdbg_input+0x270>)
  4067f8:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  4067fa:	4830      	ldr	r0, [pc, #192]	; (4068bc <service_ecdbg_input+0x27c>)
  4067fc:	4b2c      	ldr	r3, [pc, #176]	; (4068b0 <service_ecdbg_input+0x270>)
  4067fe:	4798      	blx	r3
					print_ecdbg(">");
  406800:	4833      	ldr	r0, [pc, #204]	; (4068d0 <service_ecdbg_input+0x290>)
  406802:	4b2b      	ldr	r3, [pc, #172]	; (4068b0 <service_ecdbg_input+0x270>)
  406804:	4798      	blx	r3
					break;
  406806:	e024      	b.n	406852 <service_ecdbg_input+0x212>
				case 'D':
				case 'd':
					print_ecdbg("Initial DTE set to: ");
  406808:	4832      	ldr	r0, [pc, #200]	; (4068d4 <service_ecdbg_input+0x294>)
  40680a:	4b29      	ldr	r3, [pc, #164]	; (4068b0 <service_ecdbg_input+0x270>)
  40680c:	4798      	blx	r3
					print_ecdbg_num(c.initialDTE);
  40680e:	4b32      	ldr	r3, [pc, #200]	; (4068d8 <service_ecdbg_input+0x298>)
  406810:	781b      	ldrb	r3, [r3, #0]
  406812:	4618      	mov	r0, r3
  406814:	4b31      	ldr	r3, [pc, #196]	; (4068dc <service_ecdbg_input+0x29c>)
  406816:	4798      	blx	r3
					print_ecdbg(" minutes.\r\n>");
  406818:	4831      	ldr	r0, [pc, #196]	; (4068e0 <service_ecdbg_input+0x2a0>)
  40681a:	4b25      	ldr	r3, [pc, #148]	; (4068b0 <service_ecdbg_input+0x270>)
  40681c:	4798      	blx	r3
					break;
  40681e:	e018      	b.n	406852 <service_ecdbg_input+0x212>
				case 'S':
				case 's':
					show_sw_version();
  406820:	4b30      	ldr	r3, [pc, #192]	; (4068e4 <service_ecdbg_input+0x2a4>)
  406822:	4798      	blx	r3
					show_chassis_status_info();
  406824:	4b30      	ldr	r3, [pc, #192]	; (4068e8 <service_ecdbg_input+0x2a8>)
  406826:	4798      	blx	r3
					show_chassis_sysErr();
  406828:	4b30      	ldr	r3, [pc, #192]	; (4068ec <service_ecdbg_input+0x2ac>)
  40682a:	4798      	blx	r3
					show_chassis_all_LED_boards();
  40682c:	4b30      	ldr	r3, [pc, #192]	; (4068f0 <service_ecdbg_input+0x2b0>)
  40682e:	4798      	blx	r3
					show_help_and_prompt();
  406830:	4b30      	ldr	r3, [pc, #192]	; (4068f4 <service_ecdbg_input+0x2b4>)
  406832:	4798      	blx	r3
					break;
  406834:	e00d      	b.n	406852 <service_ecdbg_input+0x212>
				case 'K':
				case 'k':
					print_ecdbg("Valid Keypad Code\r\n");
  406836:	4830      	ldr	r0, [pc, #192]	; (4068f8 <service_ecdbg_input+0x2b8>)
  406838:	4b1d      	ldr	r3, [pc, #116]	; (4068b0 <service_ecdbg_input+0x270>)
  40683a:	4798      	blx	r3
					validKeypadCode = 1;
  40683c:	4b2f      	ldr	r3, [pc, #188]	; (4068fc <service_ecdbg_input+0x2bc>)
  40683e:	2201      	movs	r2, #1
  406840:	701a      	strb	r2, [r3, #0]
					break;
  406842:	e006      	b.n	406852 <service_ecdbg_input+0x212>
				case 'T':
				case 't':
					print_ecdbg("Start button pressed\r\n");
  406844:	482e      	ldr	r0, [pc, #184]	; (406900 <service_ecdbg_input+0x2c0>)
  406846:	4b1a      	ldr	r3, [pc, #104]	; (4068b0 <service_ecdbg_input+0x270>)
  406848:	4798      	blx	r3
					startButtonPressed = 1;
  40684a:	4b2e      	ldr	r3, [pc, #184]	; (406904 <service_ecdbg_input+0x2c4>)
  40684c:	2201      	movs	r2, #1
  40684e:	701a      	strb	r2, [r3, #0]
					break;
  406850:	bf00      	nop
  406852:	e0a8      	b.n	4069a6 <service_ecdbg_input+0x366>
			}
		}
		else if (cmd[1] == ' ')
  406854:	4b15      	ldr	r3, [pc, #84]	; (4068ac <service_ecdbg_input+0x26c>)
  406856:	785b      	ldrb	r3, [r3, #1]
  406858:	2b20      	cmp	r3, #32
  40685a:	f040 80a4 	bne.w	4069a6 <service_ecdbg_input+0x366>
		{
			if ((cmd[0] == 'D') || (cmd[0] == 'd'))
  40685e:	4b13      	ldr	r3, [pc, #76]	; (4068ac <service_ecdbg_input+0x26c>)
  406860:	781b      	ldrb	r3, [r3, #0]
  406862:	2b44      	cmp	r3, #68	; 0x44
  406864:	d004      	beq.n	406870 <service_ecdbg_input+0x230>
  406866:	4b11      	ldr	r3, [pc, #68]	; (4068ac <service_ecdbg_input+0x26c>)
  406868:	781b      	ldrb	r3, [r3, #0]
  40686a:	2b64      	cmp	r3, #100	; 0x64
  40686c:	f040 809b 	bne.w	4069a6 <service_ecdbg_input+0x366>
			{
				if (cmdIdx == 4)
  406870:	4b0d      	ldr	r3, [pc, #52]	; (4068a8 <service_ecdbg_input+0x268>)
  406872:	781b      	ldrb	r3, [r3, #0]
  406874:	2b04      	cmp	r3, #4
  406876:	d149      	bne.n	40690c <service_ecdbg_input+0x2cc>
				{
					if (isdigit(cmd[2]))
  406878:	4b23      	ldr	r3, [pc, #140]	; (406908 <service_ecdbg_input+0x2c8>)
  40687a:	681a      	ldr	r2, [r3, #0]
  40687c:	4b0b      	ldr	r3, [pc, #44]	; (4068ac <service_ecdbg_input+0x26c>)
  40687e:	789b      	ldrb	r3, [r3, #2]
  406880:	3301      	adds	r3, #1
  406882:	4413      	add	r3, r2
  406884:	781b      	ldrb	r3, [r3, #0]
  406886:	f003 0304 	and.w	r3, r3, #4
  40688a:	2b00      	cmp	r3, #0
  40688c:	d06a      	beq.n	406964 <service_ecdbg_input+0x324>
					{
						tmpNewDte = cmd[2] - 0x30;
  40688e:	4b07      	ldr	r3, [pc, #28]	; (4068ac <service_ecdbg_input+0x26c>)
  406890:	789b      	ldrb	r3, [r3, #2]
  406892:	3b30      	subs	r3, #48	; 0x30
  406894:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  406896:	2301      	movs	r3, #1
  406898:	72fb      	strb	r3, [r7, #11]
  40689a:	e063      	b.n	406964 <service_ecdbg_input+0x324>
  40689c:	40024000 	.word	0x40024000
  4068a0:	004022b5 	.word	0x004022b5
  4068a4:	00402311 	.word	0x00402311
  4068a8:	204009de 	.word	0x204009de
  4068ac:	20401854 	.word	0x20401854
  4068b0:	004026b1 	.word	0x004026b1
  4068b4:	0040d410 	.word	0x0040d410
  4068b8:	0040d42c 	.word	0x0040d42c
  4068bc:	0040d444 	.word	0x0040d444
  4068c0:	0040d45c 	.word	0x0040d45c
  4068c4:	0040d47c 	.word	0x0040d47c
  4068c8:	0040d4a8 	.word	0x0040d4a8
  4068cc:	0040d4f0 	.word	0x0040d4f0
  4068d0:	0040d510 	.word	0x0040d510
  4068d4:	0040d514 	.word	0x0040d514
  4068d8:	204016f4 	.word	0x204016f4
  4068dc:	004048f9 	.word	0x004048f9
  4068e0:	0040d52c 	.word	0x0040d52c
  4068e4:	00405db5 	.word	0x00405db5
  4068e8:	00405ddd 	.word	0x00405ddd
  4068ec:	004061ad 	.word	0x004061ad
  4068f0:	00406515 	.word	0x00406515
  4068f4:	0040662d 	.word	0x0040662d
  4068f8:	0040d53c 	.word	0x0040d53c
  4068fc:	204009d8 	.word	0x204009d8
  406900:	0040d550 	.word	0x0040d550
  406904:	204009d9 	.word	0x204009d9
  406908:	2040009c 	.word	0x2040009c
					}					
				}
				else if (cmdIdx == 5)
  40690c:	4b2b      	ldr	r3, [pc, #172]	; (4069bc <service_ecdbg_input+0x37c>)
  40690e:	781b      	ldrb	r3, [r3, #0]
  406910:	2b05      	cmp	r3, #5
  406912:	d127      	bne.n	406964 <service_ecdbg_input+0x324>
				{
					if (isdigit(cmd[2]) && (isdigit(cmd[3])))
  406914:	4b2a      	ldr	r3, [pc, #168]	; (4069c0 <service_ecdbg_input+0x380>)
  406916:	681a      	ldr	r2, [r3, #0]
  406918:	4b2a      	ldr	r3, [pc, #168]	; (4069c4 <service_ecdbg_input+0x384>)
  40691a:	789b      	ldrb	r3, [r3, #2]
  40691c:	3301      	adds	r3, #1
  40691e:	4413      	add	r3, r2
  406920:	781b      	ldrb	r3, [r3, #0]
  406922:	f003 0304 	and.w	r3, r3, #4
  406926:	2b00      	cmp	r3, #0
  406928:	d01c      	beq.n	406964 <service_ecdbg_input+0x324>
  40692a:	4b25      	ldr	r3, [pc, #148]	; (4069c0 <service_ecdbg_input+0x380>)
  40692c:	681a      	ldr	r2, [r3, #0]
  40692e:	4b25      	ldr	r3, [pc, #148]	; (4069c4 <service_ecdbg_input+0x384>)
  406930:	78db      	ldrb	r3, [r3, #3]
  406932:	3301      	adds	r3, #1
  406934:	4413      	add	r3, r2
  406936:	781b      	ldrb	r3, [r3, #0]
  406938:	f003 0304 	and.w	r3, r3, #4
  40693c:	2b00      	cmp	r3, #0
  40693e:	d011      	beq.n	406964 <service_ecdbg_input+0x324>
					{
						tmpNewDte = (cmd[2]-0x30) * 10;
  406940:	4b20      	ldr	r3, [pc, #128]	; (4069c4 <service_ecdbg_input+0x384>)
  406942:	789b      	ldrb	r3, [r3, #2]
  406944:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  406948:	4613      	mov	r3, r2
  40694a:	009b      	lsls	r3, r3, #2
  40694c:	4413      	add	r3, r2
  40694e:	005b      	lsls	r3, r3, #1
  406950:	60fb      	str	r3, [r7, #12]
						tmpNewDte += (cmd[3] - 0x30);
  406952:	4b1c      	ldr	r3, [pc, #112]	; (4069c4 <service_ecdbg_input+0x384>)
  406954:	78db      	ldrb	r3, [r3, #3]
  406956:	461a      	mov	r2, r3
  406958:	68fb      	ldr	r3, [r7, #12]
  40695a:	4413      	add	r3, r2
  40695c:	3b30      	subs	r3, #48	; 0x30
  40695e:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  406960:	2301      	movs	r3, #1
  406962:	72fb      	strb	r3, [r7, #11]
					}
				}
				if (tryToChangeDte)
  406964:	7afb      	ldrb	r3, [r7, #11]
  406966:	2b00      	cmp	r3, #0
  406968:	d01d      	beq.n	4069a6 <service_ecdbg_input+0x366>
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
  40696a:	68fb      	ldr	r3, [r7, #12]
  40696c:	2b3b      	cmp	r3, #59	; 0x3b
  40696e:	d814      	bhi.n	40699a <service_ecdbg_input+0x35a>
  406970:	68fb      	ldr	r3, [r7, #12]
  406972:	2b01      	cmp	r3, #1
  406974:	d911      	bls.n	40699a <service_ecdbg_input+0x35a>
					{
						print_ecdbg("Initial DTE now set to: ");
  406976:	4814      	ldr	r0, [pc, #80]	; (4069c8 <service_ecdbg_input+0x388>)
  406978:	4b14      	ldr	r3, [pc, #80]	; (4069cc <service_ecdbg_input+0x38c>)
  40697a:	4798      	blx	r3
						print_ecdbg_num(tmpNewDte);
  40697c:	68f8      	ldr	r0, [r7, #12]
  40697e:	4b14      	ldr	r3, [pc, #80]	; (4069d0 <service_ecdbg_input+0x390>)
  406980:	4798      	blx	r3
						print_ecdbg("\r\n>");
  406982:	4814      	ldr	r0, [pc, #80]	; (4069d4 <service_ecdbg_input+0x394>)
  406984:	4b11      	ldr	r3, [pc, #68]	; (4069cc <service_ecdbg_input+0x38c>)
  406986:	4798      	blx	r3
						
						c.initialDTE = tmpNewDte;
  406988:	68fb      	ldr	r3, [r7, #12]
  40698a:	b2da      	uxtb	r2, r3
  40698c:	4b12      	ldr	r3, [pc, #72]	; (4069d8 <service_ecdbg_input+0x398>)
  40698e:	701a      	strb	r2, [r3, #0]
						
						store_config();
  406990:	4b12      	ldr	r3, [pc, #72]	; (4069dc <service_ecdbg_input+0x39c>)
  406992:	4798      	blx	r3
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
  406994:	4b11      	ldr	r3, [pc, #68]	; (4069dc <service_ecdbg_input+0x39c>)
  406996:	4798      	blx	r3
  406998:	e005      	b.n	4069a6 <service_ecdbg_input+0x366>
						
					}
					else
					{
						print_ecdbg("Error. Initial DTE not modified. \r\n");
  40699a:	4811      	ldr	r0, [pc, #68]	; (4069e0 <service_ecdbg_input+0x3a0>)
  40699c:	4b0b      	ldr	r3, [pc, #44]	; (4069cc <service_ecdbg_input+0x38c>)
  40699e:	4798      	blx	r3
						print_ecdbg("Must be a value between 2 and 59.\r\n>");
  4069a0:	4810      	ldr	r0, [pc, #64]	; (4069e4 <service_ecdbg_input+0x3a4>)
  4069a2:	4b0a      	ldr	r3, [pc, #40]	; (4069cc <service_ecdbg_input+0x38c>)
  4069a4:	4798      	blx	r3
				}
			}
		}
		
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
  4069a6:	480b      	ldr	r0, [pc, #44]	; (4069d4 <service_ecdbg_input+0x394>)
  4069a8:	4b08      	ldr	r3, [pc, #32]	; (4069cc <service_ecdbg_input+0x38c>)
  4069aa:	4798      	blx	r3
		cmdIdx = 0;
  4069ac:	4b03      	ldr	r3, [pc, #12]	; (4069bc <service_ecdbg_input+0x37c>)
  4069ae:	2200      	movs	r2, #0
  4069b0:	701a      	strb	r2, [r3, #0]
		return;
  4069b2:	bf00      	nop
	}
}
  4069b4:	3710      	adds	r7, #16
  4069b6:	46bd      	mov	sp, r7
  4069b8:	bd80      	pop	{r7, pc}
  4069ba:	bf00      	nop
  4069bc:	204009de 	.word	0x204009de
  4069c0:	2040009c 	.word	0x2040009c
  4069c4:	20401854 	.word	0x20401854
  4069c8:	0040d568 	.word	0x0040d568
  4069cc:	004026b1 	.word	0x004026b1
  4069d0:	004048f9 	.word	0x004048f9
  4069d4:	0040d584 	.word	0x0040d584
  4069d8:	204016f4 	.word	0x204016f4
  4069dc:	004058e1 	.word	0x004058e1
  4069e0:	0040d588 	.word	0x0040d588
  4069e4:	0040d5ac 	.word	0x0040d5ac

004069e8 <main>:


/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void){
  4069e8:	b590      	push	{r4, r7, lr}
  4069ea:	b09b      	sub	sp, #108	; 0x6c
  4069ec:	af00      	add	r7, sp, #0
	static unsigned char displayIdx = 0;
	char mainStr[80];
	uint8_t kpbResult;
	uint8_t firstTimeSinceShutdown = 1;
  4069ee:	2301      	movs	r3, #1
  4069f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	
	/* Initialize the SAM system. */
	sysclk_init();
  4069f4:	4b9c      	ldr	r3, [pc, #624]	; (406c68 <main+0x280>)
  4069f6:	4798      	blx	r3
	board_init();
  4069f8:	4b9c      	ldr	r3, [pc, #624]	; (406c6c <main+0x284>)
  4069fa:	4798      	blx	r3

	init_io();
  4069fc:	4b9c      	ldr	r3, [pc, #624]	; (406c70 <main+0x288>)
  4069fe:	4798      	blx	r3
	
	/* 1ms tick. */
	configure_systick();
  406a00:	4b9c      	ldr	r3, [pc, #624]	; (406c74 <main+0x28c>)
  406a02:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  406a04:	4b9c      	ldr	r3, [pc, #624]	; (406c78 <main+0x290>)
  406a06:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  406a08:	4b9c      	ldr	r3, [pc, #624]	; (406c7c <main+0x294>)
  406a0a:	4798      	blx	r3

	init_sysErr();
  406a0c:	4b9c      	ldr	r3, [pc, #624]	; (406c80 <main+0x298>)
  406a0e:	4798      	blx	r3
	
	init_shelf_n_ledBrd_structs();
  406a10:	4b9c      	ldr	r3, [pc, #624]	; (406c84 <main+0x29c>)
  406a12:	4798      	blx	r3
	read_led_board_serial_ids();
  406a14:	4b9c      	ldr	r3, [pc, #624]	; (406c88 <main+0x2a0>)
  406a16:	4798      	blx	r3

	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  406a18:	489c      	ldr	r0, [pc, #624]	; (406c8c <main+0x2a4>)
  406a1a:	4b9d      	ldr	r3, [pc, #628]	; (406c90 <main+0x2a8>)
  406a1c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  406a1e:	489b      	ldr	r0, [pc, #620]	; (406c8c <main+0x2a4>)
  406a20:	4b9c      	ldr	r3, [pc, #624]	; (406c94 <main+0x2ac>)
  406a22:	4798      	blx	r3

	show_sw_version();
  406a24:	4b9c      	ldr	r3, [pc, #624]	; (406c98 <main+0x2b0>)
  406a26:	4798      	blx	r3

	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH); //make sure outputs are disabled at the chip level
  406a28:	2001      	movs	r0, #1
  406a2a:	2101      	movs	r1, #1
  406a2c:	4b9b      	ldr	r3, [pc, #620]	; (406c9c <main+0x2b4>)
  406a2e:	4798      	blx	r3

	
	init_led_board_info();
  406a30:	4b9b      	ldr	r3, [pc, #620]	; (406ca0 <main+0x2b8>)
  406a32:	4798      	blx	r3

	twi_init();
  406a34:	4b9b      	ldr	r3, [pc, #620]	; (406ca4 <main+0x2bc>)
  406a36:	4798      	blx	r3
	PCA9952_init();
  406a38:	4b9b      	ldr	r3, [pc, #620]	; (406ca8 <main+0x2c0>)
  406a3a:	4798      	blx	r3
	test_led_driver_channels();
  406a3c:	4b9b      	ldr	r3, [pc, #620]	; (406cac <main+0x2c4>)
  406a3e:	4798      	blx	r3


	show_chassis_status_info();
  406a40:	4b9b      	ldr	r3, [pc, #620]	; (406cb0 <main+0x2c8>)
  406a42:	4798      	blx	r3
	show_chassis_sysErr();
  406a44:	4b9b      	ldr	r3, [pc, #620]	; (406cb4 <main+0x2cc>)
  406a46:	4798      	blx	r3
	show_chassis_all_LED_boards();
  406a48:	4b9b      	ldr	r3, [pc, #620]	; (406cb8 <main+0x2d0>)
  406a4a:	4798      	blx	r3
	show_help_and_prompt();
  406a4c:	4b9b      	ldr	r3, [pc, #620]	; (406cbc <main+0x2d4>)
  406a4e:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_LOW); //...and we are live!
  406a50:	2001      	movs	r0, #1
  406a52:	2100      	movs	r1, #0
  406a54:	4b91      	ldr	r3, [pc, #580]	; (406c9c <main+0x2b4>)
  406a56:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_LOW);
  406a58:	2002      	movs	r0, #2
  406a5a:	2100      	movs	r1, #0
  406a5c:	4b8f      	ldr	r3, [pc, #572]	; (406c9c <main+0x2b4>)
  406a5e:	4798      	blx	r3


	init_pwm();
  406a60:	4b97      	ldr	r3, [pc, #604]	; (406cc0 <main+0x2d8>)
  406a62:	4798      	blx	r3
	
	init_adc();
  406a64:	4b97      	ldr	r3, [pc, #604]	; (406cc4 <main+0x2dc>)
  406a66:	4798      	blx	r3
	
	controls.buzzer_enable = 0;
  406a68:	4b97      	ldr	r3, [pc, #604]	; (406cc8 <main+0x2e0>)
  406a6a:	2200      	movs	r2, #0
  406a6c:	70da      	strb	r2, [r3, #3]
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL); //for the love of christ turn this off
  406a6e:	4897      	ldr	r0, [pc, #604]	; (406ccc <main+0x2e4>)
  406a70:	2100      	movs	r1, #0
  406a72:	4b97      	ldr	r3, [pc, #604]	; (406cd0 <main+0x2e8>)
  406a74:	4798      	blx	r3


	// Print Startup Message
	display_text(IDX_READY);
  406a76:	2000      	movs	r0, #0
  406a78:	4b96      	ldr	r3, [pc, #600]	; (406cd4 <main+0x2ec>)
  406a7a:	4798      	blx	r3
	

	start_timer(TMR_DEBUG, ((1*SECONDS)/2));
  406a7c:	2000      	movs	r0, #0
  406a7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  406a82:	4b95      	ldr	r3, [pc, #596]	; (406cd8 <main+0x2f0>)
  406a84:	4798      	blx	r3


	// Main loop
	while (true) 
	{
		switch(electroclaveState)
  406a86:	4b95      	ldr	r3, [pc, #596]	; (406cdc <main+0x2f4>)
  406a88:	781b      	ldrb	r3, [r3, #0]
  406a8a:	2b09      	cmp	r3, #9
  406a8c:	f200 83d0 	bhi.w	407230 <main+0x848>
  406a90:	a201      	add	r2, pc, #4	; (adr r2, 406a98 <main+0xb0>)
  406a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406a96:	bf00      	nop
  406a98:	00406ac1 	.word	0x00406ac1
  406a9c:	00406b55 	.word	0x00406b55
  406aa0:	00406bb9 	.word	0x00406bb9
  406aa4:	00406bfb 	.word	0x00406bfb
  406aa8:	00406d4d 	.word	0x00406d4d
  406aac:	00406e09 	.word	0x00406e09
  406ab0:	00406f09 	.word	0x00406f09
  406ab4:	00406f27 	.word	0x00406f27
  406ab8:	00406f49 	.word	0x00406f49
  406abc:	004071ed 	.word	0x004071ed
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED && firstTimeSinceShutdown) {
  406ac0:	204d      	movs	r0, #77	; 0x4d
  406ac2:	4b87      	ldr	r3, [pc, #540]	; (406ce0 <main+0x2f8>)
  406ac4:	4798      	blx	r3
  406ac6:	4603      	mov	r3, r0
  406ac8:	f083 0301 	eor.w	r3, r3, #1
  406acc:	b2db      	uxtb	r3, r3
  406ace:	2b00      	cmp	r3, #0
  406ad0:	d026      	beq.n	406b20 <main+0x138>
  406ad2:	204e      	movs	r0, #78	; 0x4e
  406ad4:	4b82      	ldr	r3, [pc, #520]	; (406ce0 <main+0x2f8>)
  406ad6:	4798      	blx	r3
  406ad8:	4603      	mov	r3, r0
  406ada:	f083 0301 	eor.w	r3, r3, #1
  406ade:	b2db      	uxtb	r3, r3
  406ae0:	2b00      	cmp	r3, #0
  406ae2:	d01d      	beq.n	406b20 <main+0x138>
  406ae4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
  406ae8:	2b00      	cmp	r3, #0
  406aea:	d019      	beq.n	406b20 <main+0x138>
					controls.buzzer_enable = 0;
  406aec:	4b76      	ldr	r3, [pc, #472]	; (406cc8 <main+0x2e0>)
  406aee:	2200      	movs	r2, #0
  406af0:	70da      	strb	r2, [r3, #3]
					pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  406af2:	4876      	ldr	r0, [pc, #472]	; (406ccc <main+0x2e4>)
  406af4:	2100      	movs	r1, #0
  406af6:	4b76      	ldr	r3, [pc, #472]	; (406cd0 <main+0x2e8>)
  406af8:	4798      	blx	r3
					ioport_set_pin_level(EXAMPLE_LED_GPIO, IOPORT_PIN_LEVEL_LOW);
  406afa:	2050      	movs	r0, #80	; 0x50
  406afc:	2100      	movs	r1, #0
  406afe:	4b67      	ldr	r3, [pc, #412]	; (406c9c <main+0x2b4>)
  406b00:	4798      	blx	r3
					print_ecdbg("Door latch detected\r\n");
  406b02:	4878      	ldr	r0, [pc, #480]	; (406ce4 <main+0x2fc>)
  406b04:	4b78      	ldr	r3, [pc, #480]	; (406ce8 <main+0x300>)
  406b06:	4798      	blx	r3
					firstTimeSinceDoorLatched = 1;
  406b08:	4b78      	ldr	r3, [pc, #480]	; (406cec <main+0x304>)
  406b0a:	2201      	movs	r2, #1
  406b0c:	701a      	strb	r2, [r3, #0]
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
  406b0e:	2000      	movs	r0, #0
  406b10:	4b70      	ldr	r3, [pc, #448]	; (406cd4 <main+0x2ec>)
  406b12:	4798      	blx	r3
					firstDoorOpenSinceIdle = 1;
  406b14:	4b76      	ldr	r3, [pc, #472]	; (406cf0 <main+0x308>)
  406b16:	2201      	movs	r2, #1
  406b18:	701a      	strb	r2, [r3, #0]
					firstTimeSinceShutdown = 0;
  406b1a:	2300      	movs	r3, #0
  406b1c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				}

				if (kpbResult == KPB_VALID)
  406b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  406b24:	2b01      	cmp	r3, #1
  406b26:	d114      	bne.n	406b52 <main+0x16a>
//jsi debug 25feb16 temporarily leave this out to debug the rest of the state machine				if (validKeypadCode)
				{
					controls.solenoid_enable = true;
  406b28:	4b67      	ldr	r3, [pc, #412]	; (406cc8 <main+0x2e0>)
  406b2a:	2201      	movs	r2, #1
  406b2c:	73da      	strb	r2, [r3, #15]
					start_timer(TMR_DOOR_OPEN, (15 * SECONDS)); //TODO: change to 2 minutes for real product
  406b2e:	2007      	movs	r0, #7
  406b30:	f643 2198 	movw	r1, #15000	; 0x3a98
  406b34:	4b68      	ldr	r3, [pc, #416]	; (406cd8 <main+0x2f0>)
  406b36:	4798      	blx	r3
					electroclaveState = STATE_DOOR_OPEN;
  406b38:	4b68      	ldr	r3, [pc, #416]	; (406cdc <main+0x2f4>)
  406b3a:	2201      	movs	r2, #1
  406b3c:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_DOOR_OPEN\r\n");
  406b3e:	486d      	ldr	r0, [pc, #436]	; (406cf4 <main+0x30c>)
  406b40:	4b69      	ldr	r3, [pc, #420]	; (406ce8 <main+0x300>)
  406b42:	4798      	blx	r3
					validKeypadCode = 0; //jsi 25feb16 debug
  406b44:	4b6c      	ldr	r3, [pc, #432]	; (406cf8 <main+0x310>)
  406b46:	2200      	movs	r2, #0
  406b48:	701a      	strb	r2, [r3, #0]
					firstTimeSinceDoorLatched = 1;
  406b4a:	4b68      	ldr	r3, [pc, #416]	; (406cec <main+0x304>)
  406b4c:	2201      	movs	r2, #1
  406b4e:	701a      	strb	r2, [r3, #0]
				}
				break;
  406b50:	e36e      	b.n	407230 <main+0x848>
  406b52:	e36d      	b.n	407230 <main+0x848>
				
			case STATE_DOOR_OPEN:
				if (timer_done(TMR_DOOR_OPEN))
  406b54:	2007      	movs	r0, #7
  406b56:	4b69      	ldr	r3, [pc, #420]	; (406cfc <main+0x314>)
  406b58:	4798      	blx	r3
  406b5a:	4603      	mov	r3, r0
  406b5c:	2b00      	cmp	r3, #0
  406b5e:	d007      	beq.n	406b70 <main+0x188>
				{
					door_ajar_buzzer();
  406b60:	4b67      	ldr	r3, [pc, #412]	; (406d00 <main+0x318>)
  406b62:	4798      	blx	r3
					electroclaveState = STATE_DOOR_AJAR;
  406b64:	4b5d      	ldr	r3, [pc, #372]	; (406cdc <main+0x2f4>)
  406b66:	2202      	movs	r2, #2
  406b68:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_DOOR_AJAR\r\n");
  406b6a:	4866      	ldr	r0, [pc, #408]	; (406d04 <main+0x31c>)
  406b6c:	4b5e      	ldr	r3, [pc, #376]	; (406ce8 <main+0x300>)
  406b6e:	4798      	blx	r3

				}
				if (scanKPResult == KEYPAD_START)
  406b70:	4b65      	ldr	r3, [pc, #404]	; (406d08 <main+0x320>)
  406b72:	781b      	ldrb	r3, [r3, #0]
  406b74:	2b0d      	cmp	r3, #13
  406b76:	d11e      	bne.n	406bb6 <main+0x1ce>
//jsi 25feb16 debug				if (startButtonPressed)
				{
					if (EC_DOOR_LATCHED)
  406b78:	204d      	movs	r0, #77	; 0x4d
  406b7a:	4b59      	ldr	r3, [pc, #356]	; (406ce0 <main+0x2f8>)
  406b7c:	4798      	blx	r3
  406b7e:	4603      	mov	r3, r0
  406b80:	f083 0301 	eor.w	r3, r3, #1
  406b84:	b2db      	uxtb	r3, r3
  406b86:	2b00      	cmp	r3, #0
  406b88:	d015      	beq.n	406bb6 <main+0x1ce>
  406b8a:	204e      	movs	r0, #78	; 0x4e
  406b8c:	4b54      	ldr	r3, [pc, #336]	; (406ce0 <main+0x2f8>)
  406b8e:	4798      	blx	r3
  406b90:	4603      	mov	r3, r0
  406b92:	f083 0301 	eor.w	r3, r3, #1
  406b96:	b2db      	uxtb	r3, r3
  406b98:	2b00      	cmp	r3, #0
  406b9a:	d00c      	beq.n	406bb6 <main+0x1ce>
					{
						end_timer(TMR_DOOR_OPEN);
  406b9c:	2007      	movs	r0, #7
  406b9e:	4b5b      	ldr	r3, [pc, #364]	; (406d0c <main+0x324>)
  406ba0:	4798      	blx	r3
						electroclaveState = STATE_DOOR_LATCHED;
  406ba2:	4b4e      	ldr	r3, [pc, #312]	; (406cdc <main+0x2f4>)
  406ba4:	2203      	movs	r2, #3
  406ba6:	701a      	strb	r2, [r3, #0]
						print_ecdbg("STATE_DOOR_LATCHED\r\n");
  406ba8:	4859      	ldr	r0, [pc, #356]	; (406d10 <main+0x328>)
  406baa:	4b4f      	ldr	r3, [pc, #316]	; (406ce8 <main+0x300>)
  406bac:	4798      	blx	r3
						startButtonPressed = 0; //jsi 25feb16 debug
  406bae:	4b59      	ldr	r3, [pc, #356]	; (406d14 <main+0x32c>)
  406bb0:	2200      	movs	r2, #0
  406bb2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
  406bb4:	e33c      	b.n	407230 <main+0x848>
  406bb6:	e33b      	b.n	407230 <main+0x848>
			
			case STATE_DOOR_AJAR:
				if (EC_DOOR_LATCHED)
  406bb8:	204d      	movs	r0, #77	; 0x4d
  406bba:	4b49      	ldr	r3, [pc, #292]	; (406ce0 <main+0x2f8>)
  406bbc:	4798      	blx	r3
  406bbe:	4603      	mov	r3, r0
  406bc0:	f083 0301 	eor.w	r3, r3, #1
  406bc4:	b2db      	uxtb	r3, r3
  406bc6:	2b00      	cmp	r3, #0
  406bc8:	d016      	beq.n	406bf8 <main+0x210>
  406bca:	204e      	movs	r0, #78	; 0x4e
  406bcc:	4b44      	ldr	r3, [pc, #272]	; (406ce0 <main+0x2f8>)
  406bce:	4798      	blx	r3
  406bd0:	4603      	mov	r3, r0
  406bd2:	f083 0301 	eor.w	r3, r3, #1
  406bd6:	b2db      	uxtb	r3, r3
  406bd8:	2b00      	cmp	r3, #0
  406bda:	d00d      	beq.n	406bf8 <main+0x210>
				{
					controls.buzzer_enable = false;
  406bdc:	4b3a      	ldr	r3, [pc, #232]	; (406cc8 <main+0x2e0>)
  406bde:	2200      	movs	r2, #0
  406be0:	70da      	strb	r2, [r3, #3]
					pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  406be2:	483a      	ldr	r0, [pc, #232]	; (406ccc <main+0x2e4>)
  406be4:	2100      	movs	r1, #0
  406be6:	4b3a      	ldr	r3, [pc, #232]	; (406cd0 <main+0x2e8>)
  406be8:	4798      	blx	r3
					electroclaveState = STATE_EC_IDLE;
  406bea:	4b3c      	ldr	r3, [pc, #240]	; (406cdc <main+0x2f4>)
  406bec:	2200      	movs	r2, #0
  406bee:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_EC_IDLE\r\n");
  406bf0:	4849      	ldr	r0, [pc, #292]	; (406d18 <main+0x330>)
  406bf2:	4b3d      	ldr	r3, [pc, #244]	; (406ce8 <main+0x300>)
  406bf4:	4798      	blx	r3
				}
				break;				
  406bf6:	e31b      	b.n	407230 <main+0x848>
  406bf8:	e31a      	b.n	407230 <main+0x848>
					print_ecdbg("Valid keypad code detected\r\n");
					electroclaveState = STATE_VALID_KEYPAD_CODE;
					validKeypadCode = 0; //reset
				}
#endif //EC1 25feb16
				if (firstTimeSinceDoorLatched)
  406bfa:	4b3c      	ldr	r3, [pc, #240]	; (406cec <main+0x304>)
  406bfc:	781b      	ldrb	r3, [r3, #0]
  406bfe:	2b00      	cmp	r3, #0
  406c00:	d008      	beq.n	406c14 <main+0x22c>
				{
					check_led_brd_side_lifetimes();
  406c02:	4b46      	ldr	r3, [pc, #280]	; (406d1c <main+0x334>)
  406c04:	4798      	blx	r3
					check_shelves_for_devices();
  406c06:	4b46      	ldr	r3, [pc, #280]	; (406d20 <main+0x338>)
  406c08:	4798      	blx	r3
					set_shelves_active_inactive();
  406c0a:	4b46      	ldr	r3, [pc, #280]	; (406d24 <main+0x33c>)
  406c0c:	4798      	blx	r3
				
					firstTimeSinceDoorLatched = 0;
  406c0e:	4b37      	ldr	r3, [pc, #220]	; (406cec <main+0x304>)
  406c10:	2200      	movs	r2, #0
  406c12:	701a      	strb	r2, [r3, #0]
				}

				if (num_active_shelves() != 0) {
  406c14:	4b44      	ldr	r3, [pc, #272]	; (406d28 <main+0x340>)
  406c16:	4798      	blx	r3
  406c18:	4603      	mov	r3, r0
  406c1a:	2b00      	cmp	r3, #0
  406c1c:	d011      	beq.n	406c42 <main+0x25a>
					electroclaveState = STATE_START_SANITIZE;
  406c1e:	4b2f      	ldr	r3, [pc, #188]	; (406cdc <main+0x2f4>)
  406c20:	2204      	movs	r2, #4
  406c22:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_START_SANITIZE\r\n");
  406c24:	4841      	ldr	r0, [pc, #260]	; (406d2c <main+0x344>)
  406c26:	4b30      	ldr	r3, [pc, #192]	; (406ce8 <main+0x300>)
  406c28:	4798      	blx	r3
					print_ecdbg("Sanitizing\r\n");
  406c2a:	4841      	ldr	r0, [pc, #260]	; (406d30 <main+0x348>)
  406c2c:	4b2e      	ldr	r3, [pc, #184]	; (406ce8 <main+0x300>)
  406c2e:	4798      	blx	r3
					//13jun15					display_text(IDX_CLEAR);
					//13jun15					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
  406c30:	2002      	movs	r0, #2
  406c32:	4b28      	ldr	r3, [pc, #160]	; (406cd4 <main+0x2ec>)
  406c34:	4798      	blx	r3
					start_timer(TMR_DISPLAY, (8 * SECONDS));
  406c36:	2001      	movs	r0, #1
  406c38:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406c3c:	4b26      	ldr	r3, [pc, #152]	; (406cd8 <main+0x2f0>)
  406c3e:	4798      	blx	r3
  406c40:	e083      	b.n	406d4a <main+0x362>
				}
				else if (num_present_shelves() != 0){
  406c42:	4b3c      	ldr	r3, [pc, #240]	; (406d34 <main+0x34c>)
  406c44:	4798      	blx	r3
  406c46:	4603      	mov	r3, r0
  406c48:	2b00      	cmp	r3, #0
  406c4a:	d077      	beq.n	406d3c <main+0x354>
					electroclaveState = STATE_EC_IDLE;
  406c4c:	4b23      	ldr	r3, [pc, #140]	; (406cdc <main+0x2f4>)
  406c4e:	2200      	movs	r2, #0
  406c50:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_EC_IDLE\r\n");
  406c52:	4831      	ldr	r0, [pc, #196]	; (406d18 <main+0x330>)
  406c54:	4b24      	ldr	r3, [pc, #144]	; (406ce8 <main+0x300>)
  406c56:	4798      	blx	r3
					print_ecdbg("At least one shelf is present, but no devices to be cleaned.\r\n");
  406c58:	4837      	ldr	r0, [pc, #220]	; (406d38 <main+0x350>)
  406c5a:	4b23      	ldr	r3, [pc, #140]	; (406ce8 <main+0x300>)
  406c5c:	4798      	blx	r3
					display_text(IDX_READY);
  406c5e:	2000      	movs	r0, #0
  406c60:	4b1c      	ldr	r3, [pc, #112]	; (406cd4 <main+0x2ec>)
  406c62:	4798      	blx	r3
  406c64:	e071      	b.n	406d4a <main+0x362>
  406c66:	bf00      	nop
  406c68:	00400491 	.word	0x00400491
  406c6c:	00400a6d 	.word	0x00400a6d
  406c70:	00404899 	.word	0x00404899
  406c74:	00403cf5 	.word	0x00403cf5
  406c78:	00403d39 	.word	0x00403d39
  406c7c:	00403c75 	.word	0x00403c75
  406c80:	00404799 	.word	0x00404799
  406c84:	00405abd 	.word	0x00405abd
  406c88:	0040492d 	.word	0x0040492d
  406c8c:	40024000 	.word	0x40024000
  406c90:	00402189 	.word	0x00402189
  406c94:	004021d5 	.word	0x004021d5
  406c98:	00405db5 	.word	0x00405db5
  406c9c:	00404225 	.word	0x00404225
  406ca0:	00405d11 	.word	0x00405d11
  406ca4:	00403dd5 	.word	0x00403dd5
  406ca8:	004027dd 	.word	0x004027dd
  406cac:	00405121 	.word	0x00405121
  406cb0:	00405ddd 	.word	0x00405ddd
  406cb4:	004061ad 	.word	0x004061ad
  406cb8:	00406515 	.word	0x00406515
  406cbc:	0040662d 	.word	0x0040662d
  406cc0:	00403fd5 	.word	0x00403fd5
  406cc4:	00403e69 	.word	0x00403e69
  406cc8:	20400b64 	.word	0x20400b64
  406ccc:	40020000 	.word	0x40020000
  406cd0:	00401ba5 	.word	0x00401ba5
  406cd4:	004047b1 	.word	0x004047b1
  406cd8:	0040320d 	.word	0x0040320d
  406cdc:	204009c3 	.word	0x204009c3
  406ce0:	00404291 	.word	0x00404291
  406ce4:	0040d5d4 	.word	0x0040d5d4
  406ce8:	004026b1 	.word	0x004026b1
  406cec:	204009c1 	.word	0x204009c1
  406cf0:	20400014 	.word	0x20400014
  406cf4:	0040d5ec 	.word	0x0040d5ec
  406cf8:	204009d8 	.word	0x204009d8
  406cfc:	00403315 	.word	0x00403315
  406d00:	0040470d 	.word	0x0040470d
  406d04:	0040d600 	.word	0x0040d600
  406d08:	204009c0 	.word	0x204009c0
  406d0c:	00403351 	.word	0x00403351
  406d10:	0040d614 	.word	0x0040d614
  406d14:	204009d9 	.word	0x204009d9
  406d18:	0040d62c 	.word	0x0040d62c
  406d1c:	00404c11 	.word	0x00404c11
  406d20:	00404f1d 	.word	0x00404f1d
  406d24:	0040530d 	.word	0x0040530d
  406d28:	00405489 	.word	0x00405489
  406d2c:	0040d63c 	.word	0x0040d63c
  406d30:	0040d654 	.word	0x0040d654
  406d34:	004054a1 	.word	0x004054a1
  406d38:	0040d664 	.word	0x0040d664
				}
				else
				{
					//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
  406d3c:	48a0      	ldr	r0, [pc, #640]	; (406fc0 <main+0x5d8>)
  406d3e:	4ba1      	ldr	r3, [pc, #644]	; (406fc4 <main+0x5dc>)
  406d40:	4798      	blx	r3
					display_text(IDX_ERROR);
  406d42:	2004      	movs	r0, #4
  406d44:	4ba0      	ldr	r3, [pc, #640]	; (406fc8 <main+0x5e0>)
  406d46:	4798      	blx	r3
				}
				break;
  406d48:	e272      	b.n	407230 <main+0x848>
  406d4a:	e271      	b.n	407230 <main+0x848>
				
			case STATE_START_SANITIZE:
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
  406d4c:	4b9f      	ldr	r3, [pc, #636]	; (406fcc <main+0x5e4>)
  406d4e:	22ff      	movs	r2, #255	; 0xff
  406d50:	701a      	strb	r2, [r3, #0]
				sanitizeMinutes = 0;
  406d52:	4b9f      	ldr	r3, [pc, #636]	; (406fd0 <main+0x5e8>)
  406d54:	2200      	movs	r2, #0
  406d56:	601a      	str	r2, [r3, #0]
				for (int i = 0; i<NUM_SHELVES; i++) {
  406d58:	2300      	movs	r3, #0
  406d5a:	663b      	str	r3, [r7, #96]	; 0x60
  406d5c:	e02c      	b.n	406db8 <main+0x3d0>
					if (shelf[i].active == SHELF_ACTIVE) {
  406d5e:	499d      	ldr	r1, [pc, #628]	; (406fd4 <main+0x5ec>)
  406d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
  406d62:	4613      	mov	r3, r2
  406d64:	009b      	lsls	r3, r3, #2
  406d66:	4413      	add	r3, r2
  406d68:	440b      	add	r3, r1
  406d6a:	781b      	ldrb	r3, [r3, #0]
  406d6c:	2b01      	cmp	r3, #1
  406d6e:	d120      	bne.n	406db2 <main+0x3ca>
						tmpSanitizeMinutes = calc_sanitize_time(i);
  406d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406d72:	b2db      	uxtb	r3, r3
  406d74:	4618      	mov	r0, r3
  406d76:	4b98      	ldr	r3, [pc, #608]	; (406fd8 <main+0x5f0>)
  406d78:	4798      	blx	r3
  406d7a:	4603      	mov	r3, r0
  406d7c:	461a      	mov	r2, r3
  406d7e:	4b97      	ldr	r3, [pc, #604]	; (406fdc <main+0x5f4>)
  406d80:	601a      	str	r2, [r3, #0]
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
  406d82:	4b96      	ldr	r3, [pc, #600]	; (406fdc <main+0x5f4>)
  406d84:	681a      	ldr	r2, [r3, #0]
  406d86:	4b92      	ldr	r3, [pc, #584]	; (406fd0 <main+0x5e8>)
  406d88:	681b      	ldr	r3, [r3, #0]
  406d8a:	429a      	cmp	r2, r3
  406d8c:	d903      	bls.n	406d96 <main+0x3ae>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
  406d8e:	4b93      	ldr	r3, [pc, #588]	; (406fdc <main+0x5f4>)
  406d90:	681b      	ldr	r3, [r3, #0]
  406d92:	4a8f      	ldr	r2, [pc, #572]	; (406fd0 <main+0x5e8>)
  406d94:	6013      	str	r3, [r2, #0]
						}
						
						led_shelf(i, LED_ON);
  406d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406d98:	b2db      	uxtb	r3, r3
  406d9a:	4618      	mov	r0, r3
  406d9c:	2101      	movs	r1, #1
  406d9e:	4b90      	ldr	r3, [pc, #576]	; (406fe0 <main+0x5f8>)
  406da0:	4798      	blx	r3
						
						if (displayIdx == 0xFF)
  406da2:	4b8a      	ldr	r3, [pc, #552]	; (406fcc <main+0x5e4>)
  406da4:	781b      	ldrb	r3, [r3, #0]
  406da6:	2bff      	cmp	r3, #255	; 0xff
  406da8:	d103      	bne.n	406db2 <main+0x3ca>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
  406daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406dac:	b2da      	uxtb	r2, r3
  406dae:	4b87      	ldr	r3, [pc, #540]	; (406fcc <main+0x5e4>)
  406db0:	701a      	strb	r2, [r3, #0]
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
  406db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406db4:	3301      	adds	r3, #1
  406db6:	663b      	str	r3, [r7, #96]	; 0x60
  406db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  406dba:	2b03      	cmp	r3, #3
  406dbc:	ddcf      	ble.n	406d5e <main+0x376>
					}
				}
				
				
//16jan16 #if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15
				start_timer(TMR_SANITIZE, (sanitizeMinutes*MINUTES));
  406dbe:	4b84      	ldr	r3, [pc, #528]	; (406fd0 <main+0x5e8>)
  406dc0:	681b      	ldr	r3, [r3, #0]
  406dc2:	f64e 2260 	movw	r2, #60000	; 0xea60
  406dc6:	fb02 f303 	mul.w	r3, r2, r3
  406dca:	2002      	movs	r0, #2
  406dcc:	4619      	mov	r1, r3
  406dce:	4b85      	ldr	r3, [pc, #532]	; (406fe4 <main+0x5fc>)
  406dd0:	4798      	blx	r3
//16jan16 #endif
//16jan16 we really want minutes right now				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
				
				sprintf(mainStr, "sanitizeMinutes: %ld tmpSanitizeMinutes: %ld\r\n", sanitizeMinutes, tmpSanitizeMinutes);
  406dd2:	4b7f      	ldr	r3, [pc, #508]	; (406fd0 <main+0x5e8>)
  406dd4:	681a      	ldr	r2, [r3, #0]
  406dd6:	4b81      	ldr	r3, [pc, #516]	; (406fdc <main+0x5f4>)
  406dd8:	681b      	ldr	r3, [r3, #0]
  406dda:	1d39      	adds	r1, r7, #4
  406ddc:	4608      	mov	r0, r1
  406dde:	4982      	ldr	r1, [pc, #520]	; (406fe8 <main+0x600>)
  406de0:	4c82      	ldr	r4, [pc, #520]	; (406fec <main+0x604>)
  406de2:	47a0      	blx	r4
				print_ecdbg(mainStr);
  406de4:	1d3b      	adds	r3, r7, #4
  406de6:	4618      	mov	r0, r3
  406de8:	4b76      	ldr	r3, [pc, #472]	; (406fc4 <main+0x5dc>)
  406dea:	4798      	blx	r3


				inc_sanCycles();
  406dec:	4b80      	ldr	r3, [pc, #512]	; (406ff0 <main+0x608>)
  406dee:	4798      	blx	r3

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				start_timer(TMR_ONE_MINUTE, (1*SECONDS)); //once per second for debug
  406df0:	2003      	movs	r0, #3
  406df2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  406df6:	4b7b      	ldr	r3, [pc, #492]	; (406fe4 <main+0x5fc>)
  406df8:	4798      	blx	r3
				electroclaveState = STATE_SANITIZE;
  406dfa:	4b7e      	ldr	r3, [pc, #504]	; (406ff4 <main+0x60c>)
  406dfc:	2205      	movs	r2, #5
  406dfe:	701a      	strb	r2, [r3, #0]
				print_ecdbg("STATE_SANITIZE\r\n");
  406e00:	487d      	ldr	r0, [pc, #500]	; (406ff8 <main+0x610>)
  406e02:	4b70      	ldr	r3, [pc, #448]	; (406fc4 <main+0x5dc>)
  406e04:	4798      	blx	r3

				break;
  406e06:	e213      	b.n	407230 <main+0x848>
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (timer_done(TMR_DISPLAY))
  406e08:	2001      	movs	r0, #1
  406e0a:	4b7c      	ldr	r3, [pc, #496]	; (406ffc <main+0x614>)
  406e0c:	4798      	blx	r3
  406e0e:	4603      	mov	r3, r0
  406e10:	2b00      	cmp	r3, #0
  406e12:	d046      	beq.n	406ea2 <main+0x4ba>
				{
					end_timer(TMR_DISPLAY);
  406e14:	2001      	movs	r0, #1
  406e16:	4b7a      	ldr	r3, [pc, #488]	; (407000 <main+0x618>)
  406e18:	4798      	blx	r3
					switch (displayIdx)
  406e1a:	4b6c      	ldr	r3, [pc, #432]	; (406fcc <main+0x5e4>)
  406e1c:	781b      	ldrb	r3, [r3, #0]
  406e1e:	2b03      	cmp	r3, #3
  406e20:	d81a      	bhi.n	406e58 <main+0x470>
  406e22:	a201      	add	r2, pc, #4	; (adr r2, 406e28 <main+0x440>)
  406e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406e28:	00406e39 	.word	0x00406e39
  406e2c:	00406e41 	.word	0x00406e41
  406e30:	00406e49 	.word	0x00406e49
  406e34:	00406e51 	.word	0x00406e51
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
  406e38:	2005      	movs	r0, #5
  406e3a:	4b63      	ldr	r3, [pc, #396]	; (406fc8 <main+0x5e0>)
  406e3c:	4798      	blx	r3
							break;
  406e3e:	e00b      	b.n	406e58 <main+0x470>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
  406e40:	2006      	movs	r0, #6
  406e42:	4b61      	ldr	r3, [pc, #388]	; (406fc8 <main+0x5e0>)
  406e44:	4798      	blx	r3
							break;
  406e46:	e007      	b.n	406e58 <main+0x470>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
  406e48:	2007      	movs	r0, #7
  406e4a:	4b5f      	ldr	r3, [pc, #380]	; (406fc8 <main+0x5e0>)
  406e4c:	4798      	blx	r3
							break;
  406e4e:	e003      	b.n	406e58 <main+0x470>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
  406e50:	2008      	movs	r0, #8
  406e52:	4b5d      	ldr	r3, [pc, #372]	; (406fc8 <main+0x5e0>)
  406e54:	4798      	blx	r3
							break;
  406e56:	bf00      	nop
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
  406e58:	4b5c      	ldr	r3, [pc, #368]	; (406fcc <main+0x5e4>)
  406e5a:	781b      	ldrb	r3, [r3, #0]
  406e5c:	3301      	adds	r3, #1
  406e5e:	b2da      	uxtb	r2, r3
  406e60:	4b5a      	ldr	r3, [pc, #360]	; (406fcc <main+0x5e4>)
  406e62:	701a      	strb	r2, [r3, #0]
  406e64:	4b59      	ldr	r3, [pc, #356]	; (406fcc <main+0x5e4>)
  406e66:	781b      	ldrb	r3, [r3, #0]
  406e68:	2b03      	cmp	r3, #3
  406e6a:	d902      	bls.n	406e72 <main+0x48a>
						{
							displayIdx = 0; //12apr15 wrap around
  406e6c:	4b57      	ldr	r3, [pc, #348]	; (406fcc <main+0x5e4>)
  406e6e:	2200      	movs	r2, #0
  406e70:	701a      	strb	r2, [r3, #0]
						}
						
						if (shelf[displayIdx].active)
  406e72:	4b56      	ldr	r3, [pc, #344]	; (406fcc <main+0x5e4>)
  406e74:	781b      	ldrb	r3, [r3, #0]
  406e76:	4619      	mov	r1, r3
  406e78:	4a56      	ldr	r2, [pc, #344]	; (406fd4 <main+0x5ec>)
  406e7a:	460b      	mov	r3, r1
  406e7c:	009b      	lsls	r3, r3, #2
  406e7e:	440b      	add	r3, r1
  406e80:	4413      	add	r3, r2
  406e82:	781b      	ldrb	r3, [r3, #0]
  406e84:	2b00      	cmp	r3, #0
  406e86:	d00b      	beq.n	406ea0 <main+0x4b8>
						{
							break; //this shelf is active, we don't need to look for another one
  406e88:	bf00      	nop
						}
						
					}

					start_timer(TMR_DISPLAY, displayTimerSeconds * SECONDS);
  406e8a:	4b5e      	ldr	r3, [pc, #376]	; (407004 <main+0x61c>)
  406e8c:	681b      	ldr	r3, [r3, #0]
  406e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  406e92:	fb02 f303 	mul.w	r3, r2, r3
  406e96:	2001      	movs	r0, #1
  406e98:	4619      	mov	r1, r3
  406e9a:	4b52      	ldr	r3, [pc, #328]	; (406fe4 <main+0x5fc>)
  406e9c:	4798      	blx	r3
  406e9e:	e000      	b.n	406ea2 <main+0x4ba>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
  406ea0:	e7da      	b.n	406e58 <main+0x470>
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (timer_done(TMR_ONE_MINUTE))
  406ea2:	2003      	movs	r0, #3
  406ea4:	4b55      	ldr	r3, [pc, #340]	; (406ffc <main+0x614>)
  406ea6:	4798      	blx	r3
  406ea8:	4603      	mov	r3, r0
  406eaa:	2b00      	cmp	r3, #0
  406eac:	d009      	beq.n	406ec2 <main+0x4da>
				{
					end_timer(TMR_ONE_MINUTE);
  406eae:	2003      	movs	r0, #3
  406eb0:	4b53      	ldr	r3, [pc, #332]	; (407000 <main+0x618>)
  406eb2:	4798      	blx	r3
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
  406eb4:	4b54      	ldr	r3, [pc, #336]	; (407008 <main+0x620>)
  406eb6:	4798      	blx	r3
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					start_timer(TMR_ONE_MINUTE, (1 * SECONDS));
  406eb8:	2003      	movs	r0, #3
  406eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  406ebe:	4b49      	ldr	r3, [pc, #292]	; (406fe4 <main+0x5fc>)
  406ec0:	4798      	blx	r3
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (timer_done(TMR_SANITIZE)) {
  406ec2:	2002      	movs	r0, #2
  406ec4:	4b4d      	ldr	r3, [pc, #308]	; (406ffc <main+0x614>)
  406ec6:	4798      	blx	r3
  406ec8:	4603      	mov	r3, r0
  406eca:	2b00      	cmp	r3, #0
  406ecc:	d01b      	beq.n	406f06 <main+0x51e>
					
					for (int i=0; i< NUM_SHELVES; i++)
  406ece:	2300      	movs	r3, #0
  406ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  406ed2:	e008      	b.n	406ee6 <main+0x4fe>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  406ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406ed6:	b2db      	uxtb	r3, r3
  406ed8:	4618      	mov	r0, r3
  406eda:	2100      	movs	r1, #0
  406edc:	4b40      	ldr	r3, [pc, #256]	; (406fe0 <main+0x5f8>)
  406ede:	4798      	blx	r3
				/*
    			 * Manage the sanitizer timer
				 */
				if (timer_done(TMR_SANITIZE)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
  406ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406ee2:	3301      	adds	r3, #1
  406ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  406ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406ee8:	2b03      	cmp	r3, #3
  406eea:	ddf3      	ble.n	406ed4 <main+0x4ec>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					end_timer(TMR_SANITIZE);
  406eec:	2002      	movs	r0, #2
  406eee:	4b44      	ldr	r3, [pc, #272]	; (407000 <main+0x618>)
  406ef0:	4798      	blx	r3
					print_ecdbg("Shelf clean\r\n");
  406ef2:	4846      	ldr	r0, [pc, #280]	; (40700c <main+0x624>)
  406ef4:	4b33      	ldr	r3, [pc, #204]	; (406fc4 <main+0x5dc>)
  406ef6:	4798      	blx	r3
					electroclaveState = STATE_START_CLEAN;
  406ef8:	4b3e      	ldr	r3, [pc, #248]	; (406ff4 <main+0x60c>)
  406efa:	2206      	movs	r2, #6
  406efc:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_START_CLEAN\r\n");
  406efe:	4844      	ldr	r0, [pc, #272]	; (407010 <main+0x628>)
  406f00:	4b30      	ldr	r3, [pc, #192]	; (406fc4 <main+0x5dc>)
  406f02:	4798      	blx	r3
				}
				
				break;
  406f04:	e194      	b.n	407230 <main+0x848>
  406f06:	e193      	b.n	407230 <main+0x848>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
  406f08:	2001      	movs	r0, #1
  406f0a:	4b2f      	ldr	r3, [pc, #188]	; (406fc8 <main+0x5e0>)
  406f0c:	4798      	blx	r3
				electroclaveState = STATE_CLEAN;
  406f0e:	4b39      	ldr	r3, [pc, #228]	; (406ff4 <main+0x60c>)
  406f10:	2207      	movs	r2, #7
  406f12:	701a      	strb	r2, [r3, #0]
				print_ecdbg("STATE_CLEAN\r\n");
  406f14:	483f      	ldr	r0, [pc, #252]	; (407014 <main+0x62c>)
  406f16:	4b2b      	ldr	r3, [pc, #172]	; (406fc4 <main+0x5dc>)
  406f18:	4798      	blx	r3
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer);
#endif
//DEBUG 24jun15 change to 60 seconds for demo, put this line back in later				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 

//				cpu_set_timeout((60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 24jun15 change to 60 seconds for demo, remove later
				start_timer(TMR_CLEAN, (10 * SECONDS));
  406f1a:	2004      	movs	r0, #4
  406f1c:	f242 7110 	movw	r1, #10000	; 0x2710
  406f20:	4b30      	ldr	r3, [pc, #192]	; (406fe4 <main+0x5fc>)
  406f22:	4798      	blx	r3
				break;	
  406f24:	e184      	b.n	407230 <main+0x848>
				
			case STATE_CLEAN:
				if (timer_done(TMR_CLEAN)) {
  406f26:	2004      	movs	r0, #4
  406f28:	4b34      	ldr	r3, [pc, #208]	; (406ffc <main+0x614>)
  406f2a:	4798      	blx	r3
  406f2c:	4603      	mov	r3, r0
  406f2e:	2b00      	cmp	r3, #0
  406f30:	d009      	beq.n	406f46 <main+0x55e>
					end_timer(TMR_CLEAN);
  406f32:	2004      	movs	r0, #4
  406f34:	4b32      	ldr	r3, [pc, #200]	; (407000 <main+0x618>)
  406f36:	4798      	blx	r3
					electroclaveState = STATE_START_SANITIZE;	
  406f38:	4b2e      	ldr	r3, [pc, #184]	; (406ff4 <main+0x60c>)
  406f3a:	2204      	movs	r2, #4
  406f3c:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_START_SANITIZE\r\n");
  406f3e:	4836      	ldr	r0, [pc, #216]	; (407018 <main+0x630>)
  406f40:	4b20      	ldr	r3, [pc, #128]	; (406fc4 <main+0x5dc>)
  406f42:	4798      	blx	r3
				}
				break;
  406f44:	e174      	b.n	407230 <main+0x848>
  406f46:	e173      	b.n	407230 <main+0x848>
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406f48:	2300      	movs	r3, #0
  406f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  406f4c:	e008      	b.n	406f60 <main+0x578>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  406f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406f50:	b2db      	uxtb	r3, r3
  406f52:	4618      	mov	r0, r3
  406f54:	2100      	movs	r1, #0
  406f56:	4b22      	ldr	r3, [pc, #136]	; (406fe0 <main+0x5f8>)
  406f58:	4798      	blx	r3
				break;
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406f5c:	3301      	adds	r3, #1
  406f5e:	65bb      	str	r3, [r7, #88]	; 0x58
  406f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406f62:	2b03      	cmp	r3, #3
  406f64:	ddf3      	ble.n	406f4e <main+0x566>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				
				
				if (timer_done(TMR_ERROR_DISPLAY))
  406f66:	2005      	movs	r0, #5
  406f68:	4b24      	ldr	r3, [pc, #144]	; (406ffc <main+0x614>)
  406f6a:	4798      	blx	r3
  406f6c:	4603      	mov	r3, r0
  406f6e:	2b00      	cmp	r3, #0
  406f70:	f000 813b 	beq.w	4071ea <main+0x802>
				{
					end_timer(TMR_ERROR_DISPLAY);
  406f74:	2005      	movs	r0, #5
  406f76:	4b22      	ldr	r3, [pc, #136]	; (407000 <main+0x618>)
  406f78:	4798      	blx	r3

					while(1)
					{
						switch(errorDisplayState)
  406f7a:	4b28      	ldr	r3, [pc, #160]	; (40701c <main+0x634>)
  406f7c:	781b      	ldrb	r3, [r3, #0]
  406f7e:	2b04      	cmp	r3, #4
  406f80:	f200 8126 	bhi.w	4071d0 <main+0x7e8>
  406f84:	a201      	add	r2, pc, #4	; (adr r2, 406f8c <main+0x5a4>)
  406f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406f8a:	bf00      	nop
  406f8c:	00406fa1 	.word	0x00406fa1
  406f90:	00407025 	.word	0x00407025
  406f94:	0040708f 	.word	0x0040708f
  406f98:	004070f9 	.word	0x004070f9
  406f9c:	00407163 	.word	0x00407163
						{
							case 0:
								display_text(IDX_ERROR);
  406fa0:	2004      	movs	r0, #4
  406fa2:	4b09      	ldr	r3, [pc, #36]	; (406fc8 <main+0x5e0>)
  406fa4:	4798      	blx	r3
								displayChanged = 1;
  406fa6:	4b1e      	ldr	r3, [pc, #120]	; (407020 <main+0x638>)
  406fa8:	2201      	movs	r2, #1
  406faa:	701a      	strb	r2, [r3, #0]
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406fac:	2005      	movs	r0, #5
  406fae:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406fb2:	4b0c      	ldr	r3, [pc, #48]	; (406fe4 <main+0x5fc>)
  406fb4:	4798      	blx	r3
								errorDisplayState = 1;
  406fb6:	4b19      	ldr	r3, [pc, #100]	; (40701c <main+0x634>)
  406fb8:	2201      	movs	r2, #1
  406fba:	701a      	strb	r2, [r3, #0]
								break;
  406fbc:	e10c      	b.n	4071d8 <main+0x7f0>
  406fbe:	bf00      	nop
  406fc0:	0040d6a4 	.word	0x0040d6a4
  406fc4:	004026b1 	.word	0x004026b1
  406fc8:	004047b1 	.word	0x004047b1
  406fcc:	204009e4 	.word	0x204009e4
  406fd0:	204016d0 	.word	0x204016d0
  406fd4:	204016bc 	.word	0x204016bc
  406fd8:	004054b9 	.word	0x004054b9
  406fdc:	204016d8 	.word	0x204016d8
  406fe0:	00402a45 	.word	0x00402a45
  406fe4:	0040320d 	.word	0x0040320d
  406fe8:	0040d6d0 	.word	0x0040d6d0
  406fec:	004075fd 	.word	0x004075fd
  406ff0:	00405889 	.word	0x00405889
  406ff4:	204009c3 	.word	0x204009c3
  406ff8:	0040d700 	.word	0x0040d700
  406ffc:	00403315 	.word	0x00403315
  407000:	00403351 	.word	0x00403351
  407004:	20400018 	.word	0x20400018
  407008:	00405919 	.word	0x00405919
  40700c:	0040d714 	.word	0x0040d714
  407010:	0040d724 	.word	0x0040d724
  407014:	0040d738 	.word	0x0040d738
  407018:	0040d63c 	.word	0x0040d63c
  40701c:	204009c4 	.word	0x204009c4
  407020:	204009c5 	.word	0x204009c5
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  407024:	4ba2      	ldr	r3, [pc, #648]	; (4072b0 <main+0x8c8>)
  407026:	789b      	ldrb	r3, [r3, #2]
  407028:	2b00      	cmp	r3, #0
  40702a:	d121      	bne.n	407070 <main+0x688>
  40702c:	4ba0      	ldr	r3, [pc, #640]	; (4072b0 <main+0x8c8>)
  40702e:	79db      	ldrb	r3, [r3, #7]
  407030:	2b00      	cmp	r3, #0
  407032:	d11d      	bne.n	407070 <main+0x688>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  407034:	4b9f      	ldr	r3, [pc, #636]	; (4072b4 <main+0x8cc>)
  407036:	781b      	ldrb	r3, [r3, #0]
  407038:	f003 0301 	and.w	r3, r3, #1
								displayChanged = 1;
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  40703c:	2b00      	cmp	r3, #0
  40703e:	d117      	bne.n	407070 <main+0x688>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  407040:	4b9c      	ldr	r3, [pc, #624]	; (4072b4 <main+0x8cc>)
  407042:	781b      	ldrb	r3, [r3, #0]
  407044:	f003 0302 	and.w	r3, r3, #2
  407048:	2b00      	cmp	r3, #0
  40704a:	d111      	bne.n	407070 <main+0x688>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  40704c:	4b99      	ldr	r3, [pc, #612]	; (4072b4 <main+0x8cc>)
  40704e:	685b      	ldr	r3, [r3, #4]
  407050:	f003 0301 	and.w	r3, r3, #1
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  407054:	2b00      	cmp	r3, #0
  407056:	d10b      	bne.n	407070 <main+0x688>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  407058:	4b96      	ldr	r3, [pc, #600]	; (4072b4 <main+0x8cc>)
  40705a:	685b      	ldr	r3, [r3, #4]
  40705c:	f003 0302 	and.w	r3, r3, #2
  407060:	2b00      	cmp	r3, #0
  407062:	d105      	bne.n	407070 <main+0x688>
  407064:	4b93      	ldr	r3, [pc, #588]	; (4072b4 <main+0x8cc>)
  407066:	685b      	ldr	r3, [r3, #4]
  407068:	f003 0304 	and.w	r3, r3, #4
  40706c:	2b00      	cmp	r3, #0
  40706e:	d00a      	beq.n	407086 <main+0x69e>
								{
									display_text(IDX_SHELF1);
  407070:	2005      	movs	r0, #5
  407072:	4b91      	ldr	r3, [pc, #580]	; (4072b8 <main+0x8d0>)
  407074:	4798      	blx	r3
									displayChanged = 1;
  407076:	4b91      	ldr	r3, [pc, #580]	; (4072bc <main+0x8d4>)
  407078:	2201      	movs	r2, #1
  40707a:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  40707c:	2005      	movs	r0, #5
  40707e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  407082:	4b8f      	ldr	r3, [pc, #572]	; (4072c0 <main+0x8d8>)
  407084:	4798      	blx	r3
								}
								errorDisplayState = 2;
  407086:	4b8f      	ldr	r3, [pc, #572]	; (4072c4 <main+0x8dc>)
  407088:	2202      	movs	r2, #2
  40708a:	701a      	strb	r2, [r3, #0]
								break;
  40708c:	e0a4      	b.n	4071d8 <main+0x7f0>
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  40708e:	4b88      	ldr	r3, [pc, #544]	; (4072b0 <main+0x8c8>)
  407090:	7b1b      	ldrb	r3, [r3, #12]
  407092:	2b00      	cmp	r3, #0
  407094:	d121      	bne.n	4070da <main+0x6f2>
  407096:	4b86      	ldr	r3, [pc, #536]	; (4072b0 <main+0x8c8>)
  407098:	7c5b      	ldrb	r3, [r3, #17]
  40709a:	2b00      	cmp	r3, #0
  40709c:	d11d      	bne.n	4070da <main+0x6f2>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  40709e:	4b85      	ldr	r3, [pc, #532]	; (4072b4 <main+0x8cc>)
  4070a0:	781b      	ldrb	r3, [r3, #0]
  4070a2:	f003 0304 	and.w	r3, r3, #4
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  4070a6:	2b00      	cmp	r3, #0
  4070a8:	d117      	bne.n	4070da <main+0x6f2>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  4070aa:	4b82      	ldr	r3, [pc, #520]	; (4072b4 <main+0x8cc>)
  4070ac:	781b      	ldrb	r3, [r3, #0]
  4070ae:	f003 0308 	and.w	r3, r3, #8
  4070b2:	2b00      	cmp	r3, #0
  4070b4:	d111      	bne.n	4070da <main+0x6f2>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  4070b6:	4b7f      	ldr	r3, [pc, #508]	; (4072b4 <main+0x8cc>)
  4070b8:	685b      	ldr	r3, [r3, #4]
  4070ba:	f003 0308 	and.w	r3, r3, #8
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  4070be:	2b00      	cmp	r3, #0
  4070c0:	d10b      	bne.n	4070da <main+0x6f2>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  4070c2:	4b7c      	ldr	r3, [pc, #496]	; (4072b4 <main+0x8cc>)
  4070c4:	685b      	ldr	r3, [r3, #4]
  4070c6:	f003 0310 	and.w	r3, r3, #16
  4070ca:	2b00      	cmp	r3, #0
  4070cc:	d105      	bne.n	4070da <main+0x6f2>
  4070ce:	4b79      	ldr	r3, [pc, #484]	; (4072b4 <main+0x8cc>)
  4070d0:	685b      	ldr	r3, [r3, #4]
  4070d2:	f003 0320 	and.w	r3, r3, #32
  4070d6:	2b00      	cmp	r3, #0
  4070d8:	d00a      	beq.n	4070f0 <main+0x708>
								{
									display_text(IDX_SHELF2);
  4070da:	2006      	movs	r0, #6
  4070dc:	4b76      	ldr	r3, [pc, #472]	; (4072b8 <main+0x8d0>)
  4070de:	4798      	blx	r3
									displayChanged = 1;
  4070e0:	4b76      	ldr	r3, [pc, #472]	; (4072bc <main+0x8d4>)
  4070e2:	2201      	movs	r2, #1
  4070e4:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  4070e6:	2005      	movs	r0, #5
  4070e8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4070ec:	4b74      	ldr	r3, [pc, #464]	; (4072c0 <main+0x8d8>)
  4070ee:	4798      	blx	r3
								}
								errorDisplayState = 3;
  4070f0:	4b74      	ldr	r3, [pc, #464]	; (4072c4 <main+0x8dc>)
  4070f2:	2203      	movs	r2, #3
  4070f4:	701a      	strb	r2, [r3, #0]
								break;
  4070f6:	e06f      	b.n	4071d8 <main+0x7f0>
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  4070f8:	4b6d      	ldr	r3, [pc, #436]	; (4072b0 <main+0x8c8>)
  4070fa:	7d9b      	ldrb	r3, [r3, #22]
  4070fc:	2b00      	cmp	r3, #0
  4070fe:	d121      	bne.n	407144 <main+0x75c>
  407100:	4b6b      	ldr	r3, [pc, #428]	; (4072b0 <main+0x8c8>)
  407102:	7edb      	ldrb	r3, [r3, #27]
  407104:	2b00      	cmp	r3, #0
  407106:	d11d      	bne.n	407144 <main+0x75c>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  407108:	4b6a      	ldr	r3, [pc, #424]	; (4072b4 <main+0x8cc>)
  40710a:	781b      	ldrb	r3, [r3, #0]
  40710c:	f003 0310 	and.w	r3, r3, #16
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  407110:	2b00      	cmp	r3, #0
  407112:	d117      	bne.n	407144 <main+0x75c>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  407114:	4b67      	ldr	r3, [pc, #412]	; (4072b4 <main+0x8cc>)
  407116:	781b      	ldrb	r3, [r3, #0]
  407118:	f003 0320 	and.w	r3, r3, #32
  40711c:	2b00      	cmp	r3, #0
  40711e:	d111      	bne.n	407144 <main+0x75c>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  407120:	4b64      	ldr	r3, [pc, #400]	; (4072b4 <main+0x8cc>)
  407122:	685b      	ldr	r3, [r3, #4]
  407124:	f003 0340 	and.w	r3, r3, #64	; 0x40
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  407128:	2b00      	cmp	r3, #0
  40712a:	d10b      	bne.n	407144 <main+0x75c>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  40712c:	4b61      	ldr	r3, [pc, #388]	; (4072b4 <main+0x8cc>)
  40712e:	685b      	ldr	r3, [r3, #4]
  407130:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407134:	2b00      	cmp	r3, #0
  407136:	d105      	bne.n	407144 <main+0x75c>
  407138:	4b5e      	ldr	r3, [pc, #376]	; (4072b4 <main+0x8cc>)
  40713a:	685b      	ldr	r3, [r3, #4]
  40713c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  407140:	2b00      	cmp	r3, #0
  407142:	d00a      	beq.n	40715a <main+0x772>
								{
									display_text(IDX_SHELF3);
  407144:	2007      	movs	r0, #7
  407146:	4b5c      	ldr	r3, [pc, #368]	; (4072b8 <main+0x8d0>)
  407148:	4798      	blx	r3
									displayChanged = 1;
  40714a:	4b5c      	ldr	r3, [pc, #368]	; (4072bc <main+0x8d4>)
  40714c:	2201      	movs	r2, #1
  40714e:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  407150:	2005      	movs	r0, #5
  407152:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  407156:	4b5a      	ldr	r3, [pc, #360]	; (4072c0 <main+0x8d8>)
  407158:	4798      	blx	r3
								}
								errorDisplayState = 4;
  40715a:	4b5a      	ldr	r3, [pc, #360]	; (4072c4 <main+0x8dc>)
  40715c:	2204      	movs	r2, #4
  40715e:	701a      	strb	r2, [r3, #0]
								break;
  407160:	e03a      	b.n	4071d8 <main+0x7f0>
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  407162:	4b53      	ldr	r3, [pc, #332]	; (4072b0 <main+0x8c8>)
  407164:	f893 3020 	ldrb.w	r3, [r3, #32]
  407168:	2b00      	cmp	r3, #0
  40716a:	d122      	bne.n	4071b2 <main+0x7ca>
  40716c:	4b50      	ldr	r3, [pc, #320]	; (4072b0 <main+0x8c8>)
  40716e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  407172:	2b00      	cmp	r3, #0
  407174:	d11d      	bne.n	4071b2 <main+0x7ca>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  407176:	4b4f      	ldr	r3, [pc, #316]	; (4072b4 <main+0x8cc>)
  407178:	781b      	ldrb	r3, [r3, #0]
  40717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  40717e:	2b00      	cmp	r3, #0
  407180:	d117      	bne.n	4071b2 <main+0x7ca>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  407182:	4b4c      	ldr	r3, [pc, #304]	; (4072b4 <main+0x8cc>)
  407184:	781b      	ldrb	r3, [r3, #0]
  407186:	b2db      	uxtb	r3, r3
  407188:	b25b      	sxtb	r3, r3
  40718a:	2b00      	cmp	r3, #0
  40718c:	db11      	blt.n	4071b2 <main+0x7ca>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  40718e:	4b49      	ldr	r3, [pc, #292]	; (4072b4 <main+0x8cc>)
  407190:	685b      	ldr	r3, [r3, #4]
  407192:	f403 7300 	and.w	r3, r3, #512	; 0x200
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  407196:	2b00      	cmp	r3, #0
  407198:	d10b      	bne.n	4071b2 <main+0x7ca>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  40719a:	4b46      	ldr	r3, [pc, #280]	; (4072b4 <main+0x8cc>)
  40719c:	685b      	ldr	r3, [r3, #4]
  40719e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4071a2:	2b00      	cmp	r3, #0
  4071a4:	d105      	bne.n	4071b2 <main+0x7ca>
  4071a6:	4b43      	ldr	r3, [pc, #268]	; (4072b4 <main+0x8cc>)
  4071a8:	685b      	ldr	r3, [r3, #4]
  4071aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  4071ae:	2b00      	cmp	r3, #0
  4071b0:	d00a      	beq.n	4071c8 <main+0x7e0>
								{
									display_text(IDX_SHELF4);
  4071b2:	2008      	movs	r0, #8
  4071b4:	4b40      	ldr	r3, [pc, #256]	; (4072b8 <main+0x8d0>)
  4071b6:	4798      	blx	r3
									displayChanged = 1;
  4071b8:	4b40      	ldr	r3, [pc, #256]	; (4072bc <main+0x8d4>)
  4071ba:	2201      	movs	r2, #1
  4071bc:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  4071be:	2005      	movs	r0, #5
  4071c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4071c4:	4b3e      	ldr	r3, [pc, #248]	; (4072c0 <main+0x8d8>)
  4071c6:	4798      	blx	r3
								}
								errorDisplayState = 0;
  4071c8:	4b3e      	ldr	r3, [pc, #248]	; (4072c4 <main+0x8dc>)
  4071ca:	2200      	movs	r2, #0
  4071cc:	701a      	strb	r2, [r3, #0]
								break;
  4071ce:	e003      	b.n	4071d8 <main+0x7f0>
							default:
								errorDisplayState = 0;
  4071d0:	4b3c      	ldr	r3, [pc, #240]	; (4072c4 <main+0x8dc>)
  4071d2:	2200      	movs	r2, #0
  4071d4:	701a      	strb	r2, [r3, #0]
								break;
  4071d6:	bf00      	nop
						} //switch(errorDisplayState)
						
						if (displayChanged)
  4071d8:	4b38      	ldr	r3, [pc, #224]	; (4072bc <main+0x8d4>)
  4071da:	781b      	ldrb	r3, [r3, #0]
  4071dc:	2b00      	cmp	r3, #0
  4071de:	d003      	beq.n	4071e8 <main+0x800>
						{
							displayChanged = 0;
  4071e0:	4b36      	ldr	r3, [pc, #216]	; (4072bc <main+0x8d4>)
  4071e2:	2200      	movs	r2, #0
  4071e4:	701a      	strb	r2, [r3, #0]
							break; //get out of while loop and wait until we need to update the display again
  4071e6:	e000      	b.n	4071ea <main+0x802>
						}
						
					} //while(1)
  4071e8:	e6c7      	b.n	406f7a <main+0x592>

				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
  4071ea:	e021      	b.n	407230 <main+0x848>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4071ec:	2300      	movs	r3, #0
  4071ee:	657b      	str	r3, [r7, #84]	; 0x54
  4071f0:	e008      	b.n	407204 <main+0x81c>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  4071f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4071f4:	b2db      	uxtb	r3, r3
  4071f6:	4618      	mov	r0, r3
  4071f8:	2100      	movs	r1, #0
  4071fa:	4b33      	ldr	r3, [pc, #204]	; (4072c8 <main+0x8e0>)
  4071fc:	4798      	blx	r3
				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4071fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  407200:	3301      	adds	r3, #1
  407202:	657b      	str	r3, [r7, #84]	; 0x54
  407204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  407206:	2b03      	cmp	r3, #3
  407208:	ddf3      	ble.n	4071f2 <main+0x80a>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				if (timer_done(TMR_DIRTY))
  40720a:	2008      	movs	r0, #8
  40720c:	4b2f      	ldr	r3, [pc, #188]	; (4072cc <main+0x8e4>)
  40720e:	4798      	blx	r3
  407210:	4603      	mov	r3, r0
  407212:	2b00      	cmp	r3, #0
  407214:	d008      	beq.n	407228 <main+0x840>
				{
					end_timer(TMR_DIRTY);
  407216:	2008      	movs	r0, #8
  407218:	4b2d      	ldr	r3, [pc, #180]	; (4072d0 <main+0x8e8>)
  40721a:	4798      	blx	r3
					electroclaveState = STATE_EC_IDLE;
  40721c:	4b2d      	ldr	r3, [pc, #180]	; (4072d4 <main+0x8ec>)
  40721e:	2200      	movs	r2, #0
  407220:	701a      	strb	r2, [r3, #0]
					print_ecdbg("STATE_EC_IDLE\r\n");
  407222:	482d      	ldr	r0, [pc, #180]	; (4072d8 <main+0x8f0>)
  407224:	4b2d      	ldr	r3, [pc, #180]	; (4072dc <main+0x8f4>)
  407226:	4798      	blx	r3
				}
				firstTimeSinceShutdown = 1;
  407228:	2301      	movs	r3, #1
  40722a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				break;
  40722e:	bf00      	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (((kpbResult = process_kpb()) == KPB_VALID)  && (electroclaveState != STATE_EC_IDLE))
  407230:	4b2b      	ldr	r3, [pc, #172]	; (4072e0 <main+0x8f8>)
  407232:	4798      	blx	r3
  407234:	4603      	mov	r3, r0
  407236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  40723a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  40723e:	2b01      	cmp	r3, #1
  407240:	d17b      	bne.n	40733a <main+0x952>
  407242:	4b24      	ldr	r3, [pc, #144]	; (4072d4 <main+0x8ec>)
  407244:	781b      	ldrb	r3, [r3, #0]
  407246:	2b00      	cmp	r3, #0
  407248:	d077      	beq.n	40733a <main+0x952>
		{
			controls.solenoid_enable = true;
  40724a:	4b26      	ldr	r3, [pc, #152]	; (4072e4 <main+0x8fc>)
  40724c:	2201      	movs	r2, #1
  40724e:	73da      	strb	r2, [r3, #15]
			start_timer(TMR_DOOR_OPEN, (15 * SECONDS)); //TODO: change to 2 minutes for real product
  407250:	2007      	movs	r0, #7
  407252:	f643 2198 	movw	r1, #15000	; 0x3a98
  407256:	4b1a      	ldr	r3, [pc, #104]	; (4072c0 <main+0x8d8>)
  407258:	4798      	blx	r3


			if (firstDoorOpenSinceIdle)
  40725a:	4b23      	ldr	r3, [pc, #140]	; (4072e8 <main+0x900>)
  40725c:	781b      	ldrb	r3, [r3, #0]
  40725e:	2b00      	cmp	r3, #0
  407260:	d06b      	beq.n	40733a <main+0x952>
			{
				door_latch_open_kill_all_shelves();
  407262:	4b22      	ldr	r3, [pc, #136]	; (4072ec <main+0x904>)
  407264:	4798      	blx	r3

//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
  407266:	4b1b      	ldr	r3, [pc, #108]	; (4072d4 <main+0x8ec>)
  407268:	781b      	ldrb	r3, [r3, #0]
  40726a:	3b04      	subs	r3, #4
  40726c:	2b04      	cmp	r3, #4
  40726e:	d854      	bhi.n	40731a <main+0x932>
  407270:	a201      	add	r2, pc, #4	; (adr r2, 407278 <main+0x890>)
  407272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407276:	bf00      	nop
  407278:	0040728d 	.word	0x0040728d
  40727c:	0040728d 	.word	0x0040728d
  407280:	004072f9 	.word	0x004072f9
  407284:	004072f9 	.word	0x004072f9
  407288:	00407313 	.word	0x00407313
				{
					case STATE_START_SANITIZE:
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
  40728c:	2003      	movs	r0, #3
  40728e:	4b0a      	ldr	r3, [pc, #40]	; (4072b8 <main+0x8d0>)
  407290:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  407292:	4b10      	ldr	r3, [pc, #64]	; (4072d4 <main+0x8ec>)
  407294:	2209      	movs	r2, #9
  407296:	701a      	strb	r2, [r3, #0]
						print_ecdbg("STATE_SHUTDOWN_PROCESSES\r\n");
  407298:	4815      	ldr	r0, [pc, #84]	; (4072f0 <main+0x908>)
  40729a:	4b10      	ldr	r3, [pc, #64]	; (4072dc <main+0x8f4>)
  40729c:	4798      	blx	r3
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  40729e:	4815      	ldr	r0, [pc, #84]	; (4072f4 <main+0x90c>)
  4072a0:	4b0e      	ldr	r3, [pc, #56]	; (4072dc <main+0x8f4>)
  4072a2:	4798      	blx	r3
						start_timer(TMR_DIRTY, (8 * SECONDS));
  4072a4:	2008      	movs	r0, #8
  4072a6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4072aa:	4b05      	ldr	r3, [pc, #20]	; (4072c0 <main+0x8d8>)
  4072ac:	4798      	blx	r3
						break;
  4072ae:	e041      	b.n	407334 <main+0x94c>
  4072b0:	204016f8 	.word	0x204016f8
  4072b4:	204016e4 	.word	0x204016e4
  4072b8:	004047b1 	.word	0x004047b1
  4072bc:	204009c5 	.word	0x204009c5
  4072c0:	0040320d 	.word	0x0040320d
  4072c4:	204009c4 	.word	0x204009c4
  4072c8:	00402a45 	.word	0x00402a45
  4072cc:	00403315 	.word	0x00403315
  4072d0:	00403351 	.word	0x00403351
  4072d4:	204009c3 	.word	0x204009c3
  4072d8:	0040d62c 	.word	0x0040d62c
  4072dc:	004026b1 	.word	0x004026b1
  4072e0:	004045e9 	.word	0x004045e9
  4072e4:	20400b64 	.word	0x20400b64
  4072e8:	20400014 	.word	0x20400014
  4072ec:	00405551 	.word	0x00405551
  4072f0:	0040d748 	.word	0x0040d748
  4072f4:	0040d764 	.word	0x0040d764
						
					case STATE_START_CLEAN:
					case STATE_CLEAN:
						display_text(IDX_CLEAN);
  4072f8:	2001      	movs	r0, #1
  4072fa:	4b1a      	ldr	r3, [pc, #104]	; (407364 <main+0x97c>)
  4072fc:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  4072fe:	4b1a      	ldr	r3, [pc, #104]	; (407368 <main+0x980>)
  407300:	2209      	movs	r2, #9
  407302:	701a      	strb	r2, [r3, #0]
						print_ecdbg("STATE_SHUTDOWN_PROCESSES\r\n");
  407304:	4819      	ldr	r0, [pc, #100]	; (40736c <main+0x984>)
  407306:	4b1a      	ldr	r3, [pc, #104]	; (407370 <main+0x988>)
  407308:	4798      	blx	r3
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  40730a:	481a      	ldr	r0, [pc, #104]	; (407374 <main+0x98c>)
  40730c:	4b18      	ldr	r3, [pc, #96]	; (407370 <main+0x988>)
  40730e:	4798      	blx	r3
						break;
  407310:	e010      	b.n	407334 <main+0x94c>
						
					case STATE_CHASSIS_ERROR:
						display_text(IDX_ERROR);
  407312:	2004      	movs	r0, #4
  407314:	4b13      	ldr	r3, [pc, #76]	; (407364 <main+0x97c>)
  407316:	4798      	blx	r3
						break;
  407318:	e00c      	b.n	407334 <main+0x94c>
					
					default:
						display_text(IDX_READY);
  40731a:	2000      	movs	r0, #0
  40731c:	4b11      	ldr	r3, [pc, #68]	; (407364 <main+0x97c>)
  40731e:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  407320:	4b11      	ldr	r3, [pc, #68]	; (407368 <main+0x980>)
  407322:	2209      	movs	r2, #9
  407324:	701a      	strb	r2, [r3, #0]
						print_ecdbg("STATE_SHUTDOWN_PROCESSES\r\n");
  407326:	4811      	ldr	r0, [pc, #68]	; (40736c <main+0x984>)
  407328:	4b11      	ldr	r3, [pc, #68]	; (407370 <main+0x988>)
  40732a:	4798      	blx	r3
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  40732c:	4811      	ldr	r0, [pc, #68]	; (407374 <main+0x98c>)
  40732e:	4b10      	ldr	r3, [pc, #64]	; (407370 <main+0x988>)
  407330:	4798      	blx	r3
						break;
  407332:	bf00      	nop
				}

				firstDoorOpenSinceIdle = 0;
  407334:	4b10      	ldr	r3, [pc, #64]	; (407378 <main+0x990>)
  407336:	2200      	movs	r2, #0
  407338:	701a      	strb	r2, [r3, #0]
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (timer_done(TMR_DEBUG))
  40733a:	2000      	movs	r0, #0
  40733c:	4b0f      	ldr	r3, [pc, #60]	; (40737c <main+0x994>)
  40733e:	4798      	blx	r3
  407340:	4603      	mov	r3, r0
  407342:	2b00      	cmp	r3, #0
  407344:	d00a      	beq.n	40735c <main+0x974>
		{
			end_timer(TMR_DEBUG);
  407346:	2000      	movs	r0, #0
  407348:	4b0d      	ldr	r3, [pc, #52]	; (407380 <main+0x998>)
  40734a:	4798      	blx	r3
			start_timer(TMR_DEBUG, ((1 * SECONDS)/2));
  40734c:	2000      	movs	r0, #0
  40734e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  407352:	4b0c      	ldr	r3, [pc, #48]	; (407384 <main+0x99c>)
  407354:	4798      	blx	r3
			ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  407356:	2050      	movs	r0, #80	; 0x50
  407358:	4b0b      	ldr	r3, [pc, #44]	; (407388 <main+0x9a0>)
  40735a:	4798      	blx	r3
		}
		
		service_ecdbg_input();
  40735c:	4b0b      	ldr	r3, [pc, #44]	; (40738c <main+0x9a4>)
  40735e:	4798      	blx	r3

	} //while(true)
  407360:	f7ff bb91 	b.w	406a86 <main+0x9e>
  407364:	004047b1 	.word	0x004047b1
  407368:	204009c3 	.word	0x204009c3
  40736c:	0040d748 	.word	0x0040d748
  407370:	004026b1 	.word	0x004026b1
  407374:	0040d764 	.word	0x0040d764
  407378:	20400014 	.word	0x20400014
  40737c:	00403315 	.word	0x00403315
  407380:	00403351 	.word	0x00403351
  407384:	0040320d 	.word	0x0040320d
  407388:	004042e1 	.word	0x004042e1
  40738c:	00406641 	.word	0x00406641

00407390 <__libc_init_array>:
  407390:	b570      	push	{r4, r5, r6, lr}
  407392:	4e0f      	ldr	r6, [pc, #60]	; (4073d0 <__libc_init_array+0x40>)
  407394:	4d0f      	ldr	r5, [pc, #60]	; (4073d4 <__libc_init_array+0x44>)
  407396:	1b76      	subs	r6, r6, r5
  407398:	10b6      	asrs	r6, r6, #2
  40739a:	bf18      	it	ne
  40739c:	2400      	movne	r4, #0
  40739e:	d005      	beq.n	4073ac <__libc_init_array+0x1c>
  4073a0:	3401      	adds	r4, #1
  4073a2:	f855 3b04 	ldr.w	r3, [r5], #4
  4073a6:	4798      	blx	r3
  4073a8:	42a6      	cmp	r6, r4
  4073aa:	d1f9      	bne.n	4073a0 <__libc_init_array+0x10>
  4073ac:	4e0a      	ldr	r6, [pc, #40]	; (4073d8 <__libc_init_array+0x48>)
  4073ae:	f006 fb3b 	bl	40da28 <_init>
  4073b2:	4d0a      	ldr	r5, [pc, #40]	; (4073dc <__libc_init_array+0x4c>)
  4073b4:	1b76      	subs	r6, r6, r5
  4073b6:	10b6      	asrs	r6, r6, #2
  4073b8:	bf18      	it	ne
  4073ba:	2400      	movne	r4, #0
  4073bc:	d006      	beq.n	4073cc <__libc_init_array+0x3c>
  4073be:	3401      	adds	r4, #1
  4073c0:	f855 3b04 	ldr.w	r3, [r5], #4
  4073c4:	4798      	blx	r3
  4073c6:	42a6      	cmp	r6, r4
  4073c8:	d1f9      	bne.n	4073be <__libc_init_array+0x2e>
  4073ca:	bd70      	pop	{r4, r5, r6, pc}
  4073cc:	bd70      	pop	{r4, r5, r6, pc}
  4073ce:	bf00      	nop
  4073d0:	0040da34 	.word	0x0040da34
  4073d4:	0040da34 	.word	0x0040da34
  4073d8:	0040da3c 	.word	0x0040da3c
  4073dc:	0040da34 	.word	0x0040da34

004073e0 <memset>:
  4073e0:	0783      	lsls	r3, r0, #30
  4073e2:	b470      	push	{r4, r5, r6}
  4073e4:	d049      	beq.n	40747a <memset+0x9a>
  4073e6:	1e54      	subs	r4, r2, #1
  4073e8:	2a00      	cmp	r2, #0
  4073ea:	d044      	beq.n	407476 <memset+0x96>
  4073ec:	b2cd      	uxtb	r5, r1
  4073ee:	4603      	mov	r3, r0
  4073f0:	e002      	b.n	4073f8 <memset+0x18>
  4073f2:	2c00      	cmp	r4, #0
  4073f4:	d03f      	beq.n	407476 <memset+0x96>
  4073f6:	4614      	mov	r4, r2
  4073f8:	f803 5b01 	strb.w	r5, [r3], #1
  4073fc:	f013 0f03 	tst.w	r3, #3
  407400:	f104 32ff 	add.w	r2, r4, #4294967295
  407404:	d1f5      	bne.n	4073f2 <memset+0x12>
  407406:	2c03      	cmp	r4, #3
  407408:	d92e      	bls.n	407468 <memset+0x88>
  40740a:	b2cd      	uxtb	r5, r1
  40740c:	2c0f      	cmp	r4, #15
  40740e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407412:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407416:	d919      	bls.n	40744c <memset+0x6c>
  407418:	f103 0210 	add.w	r2, r3, #16
  40741c:	4626      	mov	r6, r4
  40741e:	3e10      	subs	r6, #16
  407420:	f842 5c10 	str.w	r5, [r2, #-16]
  407424:	f842 5c0c 	str.w	r5, [r2, #-12]
  407428:	3210      	adds	r2, #16
  40742a:	2e0f      	cmp	r6, #15
  40742c:	f842 5c18 	str.w	r5, [r2, #-24]
  407430:	f842 5c14 	str.w	r5, [r2, #-20]
  407434:	d8f3      	bhi.n	40741e <memset+0x3e>
  407436:	f1a4 0210 	sub.w	r2, r4, #16
  40743a:	f004 040f 	and.w	r4, r4, #15
  40743e:	f022 020f 	bic.w	r2, r2, #15
  407442:	2c03      	cmp	r4, #3
  407444:	f102 0210 	add.w	r2, r2, #16
  407448:	4413      	add	r3, r2
  40744a:	d90d      	bls.n	407468 <memset+0x88>
  40744c:	461e      	mov	r6, r3
  40744e:	4622      	mov	r2, r4
  407450:	3a04      	subs	r2, #4
  407452:	f846 5b04 	str.w	r5, [r6], #4
  407456:	2a03      	cmp	r2, #3
  407458:	d8fa      	bhi.n	407450 <memset+0x70>
  40745a:	1f22      	subs	r2, r4, #4
  40745c:	f004 0403 	and.w	r4, r4, #3
  407460:	f022 0203 	bic.w	r2, r2, #3
  407464:	3204      	adds	r2, #4
  407466:	4413      	add	r3, r2
  407468:	b12c      	cbz	r4, 407476 <memset+0x96>
  40746a:	b2c9      	uxtb	r1, r1
  40746c:	441c      	add	r4, r3
  40746e:	f803 1b01 	strb.w	r1, [r3], #1
  407472:	42a3      	cmp	r3, r4
  407474:	d1fb      	bne.n	40746e <memset+0x8e>
  407476:	bc70      	pop	{r4, r5, r6}
  407478:	4770      	bx	lr
  40747a:	4614      	mov	r4, r2
  40747c:	4603      	mov	r3, r0
  40747e:	e7c2      	b.n	407406 <memset+0x26>

00407480 <_puts_r>:
  407480:	b5f0      	push	{r4, r5, r6, r7, lr}
  407482:	4604      	mov	r4, r0
  407484:	b089      	sub	sp, #36	; 0x24
  407486:	4608      	mov	r0, r1
  407488:	460d      	mov	r5, r1
  40748a:	f000 f8dd 	bl	407648 <strlen>
  40748e:	68a3      	ldr	r3, [r4, #8]
  407490:	2701      	movs	r7, #1
  407492:	2102      	movs	r1, #2
  407494:	899a      	ldrh	r2, [r3, #12]
  407496:	ae04      	add	r6, sp, #16
  407498:	eb00 0c07 	add.w	ip, r0, r7
  40749c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 4074dc <_puts_r+0x5c>
  4074a0:	9102      	str	r1, [sp, #8]
  4074a2:	0491      	lsls	r1, r2, #18
  4074a4:	9504      	str	r5, [sp, #16]
  4074a6:	9005      	str	r0, [sp, #20]
  4074a8:	f8cd c00c 	str.w	ip, [sp, #12]
  4074ac:	f8cd e018 	str.w	lr, [sp, #24]
  4074b0:	9707      	str	r7, [sp, #28]
  4074b2:	9601      	str	r6, [sp, #4]
  4074b4:	d406      	bmi.n	4074c4 <_puts_r+0x44>
  4074b6:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4074b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4074bc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4074c0:	819a      	strh	r2, [r3, #12]
  4074c2:	6659      	str	r1, [r3, #100]	; 0x64
  4074c4:	4620      	mov	r0, r4
  4074c6:	4619      	mov	r1, r3
  4074c8:	aa01      	add	r2, sp, #4
  4074ca:	f002 ff05 	bl	40a2d8 <__sfvwrite_r>
  4074ce:	2800      	cmp	r0, #0
  4074d0:	bf14      	ite	ne
  4074d2:	f04f 30ff 	movne.w	r0, #4294967295
  4074d6:	200a      	moveq	r0, #10
  4074d8:	b009      	add	sp, #36	; 0x24
  4074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074dc:	0040d8a4 	.word	0x0040d8a4

004074e0 <puts>:
  4074e0:	4b02      	ldr	r3, [pc, #8]	; (4074ec <puts+0xc>)
  4074e2:	4601      	mov	r1, r0
  4074e4:	6818      	ldr	r0, [r3, #0]
  4074e6:	f7ff bfcb 	b.w	407480 <_puts_r>
  4074ea:	bf00      	nop
  4074ec:	204004c8 	.word	0x204004c8

004074f0 <setbuf>:
  4074f0:	2900      	cmp	r1, #0
  4074f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4074f6:	bf0c      	ite	eq
  4074f8:	2202      	moveq	r2, #2
  4074fa:	2200      	movne	r2, #0
  4074fc:	f000 b800 	b.w	407500 <setvbuf>

00407500 <setvbuf>:
  407500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407504:	4e3b      	ldr	r6, [pc, #236]	; (4075f4 <setvbuf+0xf4>)
  407506:	4604      	mov	r4, r0
  407508:	460d      	mov	r5, r1
  40750a:	4690      	mov	r8, r2
  40750c:	6837      	ldr	r7, [r6, #0]
  40750e:	461e      	mov	r6, r3
  407510:	b117      	cbz	r7, 407518 <setvbuf+0x18>
  407512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  407514:	2b00      	cmp	r3, #0
  407516:	d03f      	beq.n	407598 <setvbuf+0x98>
  407518:	f1b8 0f02 	cmp.w	r8, #2
  40751c:	d832      	bhi.n	407584 <setvbuf+0x84>
  40751e:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  407522:	d12f      	bne.n	407584 <setvbuf+0x84>
  407524:	4621      	mov	r1, r4
  407526:	4638      	mov	r0, r7
  407528:	f002 fcf6 	bl	409f18 <_fflush_r>
  40752c:	89a1      	ldrh	r1, [r4, #12]
  40752e:	f8c4 9004 	str.w	r9, [r4, #4]
  407532:	060b      	lsls	r3, r1, #24
  407534:	f8c4 9018 	str.w	r9, [r4, #24]
  407538:	d428      	bmi.n	40758c <setvbuf+0x8c>
  40753a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40753e:	f1b8 0f02 	cmp.w	r8, #2
  407542:	b289      	uxth	r1, r1
  407544:	81a1      	strh	r1, [r4, #12]
  407546:	d02b      	beq.n	4075a0 <setvbuf+0xa0>
  407548:	2d00      	cmp	r5, #0
  40754a:	d037      	beq.n	4075bc <setvbuf+0xbc>
  40754c:	f1b8 0f01 	cmp.w	r8, #1
  407550:	d012      	beq.n	407578 <setvbuf+0x78>
  407552:	b289      	uxth	r1, r1
  407554:	4b28      	ldr	r3, [pc, #160]	; (4075f8 <setvbuf+0xf8>)
  407556:	f001 0008 	and.w	r0, r1, #8
  40755a:	63fb      	str	r3, [r7, #60]	; 0x3c
  40755c:	6025      	str	r5, [r4, #0]
  40755e:	b280      	uxth	r0, r0
  407560:	6125      	str	r5, [r4, #16]
  407562:	6166      	str	r6, [r4, #20]
  407564:	b180      	cbz	r0, 407588 <setvbuf+0x88>
  407566:	f011 0f03 	tst.w	r1, #3
  40756a:	f04f 0000 	mov.w	r0, #0
  40756e:	bf18      	it	ne
  407570:	4606      	movne	r6, r0
  407572:	60a6      	str	r6, [r4, #8]
  407574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407578:	f041 0101 	orr.w	r1, r1, #1
  40757c:	4273      	negs	r3, r6
  40757e:	81a1      	strh	r1, [r4, #12]
  407580:	61a3      	str	r3, [r4, #24]
  407582:	e7e6      	b.n	407552 <setvbuf+0x52>
  407584:	f04f 30ff 	mov.w	r0, #4294967295
  407588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40758c:	6921      	ldr	r1, [r4, #16]
  40758e:	4638      	mov	r0, r7
  407590:	f002 fdca 	bl	40a128 <_free_r>
  407594:	89a1      	ldrh	r1, [r4, #12]
  407596:	e7d0      	b.n	40753a <setvbuf+0x3a>
  407598:	4638      	mov	r0, r7
  40759a:	f002 fd57 	bl	40a04c <__sinit>
  40759e:	e7bb      	b.n	407518 <setvbuf+0x18>
  4075a0:	2000      	movs	r0, #0
  4075a2:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4075a6:	f041 0102 	orr.w	r1, r1, #2
  4075aa:	2500      	movs	r5, #0
  4075ac:	2201      	movs	r2, #1
  4075ae:	81a1      	strh	r1, [r4, #12]
  4075b0:	60a5      	str	r5, [r4, #8]
  4075b2:	6023      	str	r3, [r4, #0]
  4075b4:	6123      	str	r3, [r4, #16]
  4075b6:	6162      	str	r2, [r4, #20]
  4075b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4075bc:	2e00      	cmp	r6, #0
  4075be:	bf08      	it	eq
  4075c0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4075c4:	4630      	mov	r0, r6
  4075c6:	f003 f8b7 	bl	40a738 <malloc>
  4075ca:	4605      	mov	r5, r0
  4075cc:	b128      	cbz	r0, 4075da <setvbuf+0xda>
  4075ce:	89a1      	ldrh	r1, [r4, #12]
  4075d0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4075d4:	b289      	uxth	r1, r1
  4075d6:	81a1      	strh	r1, [r4, #12]
  4075d8:	e7b8      	b.n	40754c <setvbuf+0x4c>
  4075da:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4075de:	f003 f8ab 	bl	40a738 <malloc>
  4075e2:	4605      	mov	r5, r0
  4075e4:	b918      	cbnz	r0, 4075ee <setvbuf+0xee>
  4075e6:	89a1      	ldrh	r1, [r4, #12]
  4075e8:	f04f 30ff 	mov.w	r0, #4294967295
  4075ec:	e7d9      	b.n	4075a2 <setvbuf+0xa2>
  4075ee:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4075f2:	e7ec      	b.n	4075ce <setvbuf+0xce>
  4075f4:	204004c8 	.word	0x204004c8
  4075f8:	00409f45 	.word	0x00409f45

004075fc <sprintf>:
  4075fc:	b40e      	push	{r1, r2, r3}
  4075fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  407600:	b09c      	sub	sp, #112	; 0x70
  407602:	4b10      	ldr	r3, [pc, #64]	; (407644 <sprintf+0x48>)
  407604:	4606      	mov	r6, r0
  407606:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40760a:	ac21      	add	r4, sp, #132	; 0x84
  40760c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  407610:	f64f 77ff 	movw	r7, #65535	; 0xffff
  407614:	6818      	ldr	r0, [r3, #0]
  407616:	f854 2b04 	ldr.w	r2, [r4], #4
  40761a:	a902      	add	r1, sp, #8
  40761c:	9602      	str	r6, [sp, #8]
  40761e:	4623      	mov	r3, r4
  407620:	9606      	str	r6, [sp, #24]
  407622:	9401      	str	r4, [sp, #4]
  407624:	f8ad e014 	strh.w	lr, [sp, #20]
  407628:	9504      	str	r5, [sp, #16]
  40762a:	9507      	str	r5, [sp, #28]
  40762c:	f8ad 7016 	strh.w	r7, [sp, #22]
  407630:	f000 f86c 	bl	40770c <_svfprintf_r>
  407634:	9b02      	ldr	r3, [sp, #8]
  407636:	2200      	movs	r2, #0
  407638:	701a      	strb	r2, [r3, #0]
  40763a:	b01c      	add	sp, #112	; 0x70
  40763c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407640:	b003      	add	sp, #12
  407642:	4770      	bx	lr
  407644:	204004c8 	.word	0x204004c8

00407648 <strlen>:
  407648:	f020 0103 	bic.w	r1, r0, #3
  40764c:	f010 0003 	ands.w	r0, r0, #3
  407650:	f1c0 0000 	rsb	r0, r0, #0
  407654:	f851 3b04 	ldr.w	r3, [r1], #4
  407658:	f100 0c04 	add.w	ip, r0, #4
  40765c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  407660:	f06f 0200 	mvn.w	r2, #0
  407664:	bf1c      	itt	ne
  407666:	fa22 f20c 	lsrne.w	r2, r2, ip
  40766a:	4313      	orrne	r3, r2
  40766c:	f04f 0c01 	mov.w	ip, #1
  407670:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  407674:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  407678:	eba3 020c 	sub.w	r2, r3, ip
  40767c:	ea22 0203 	bic.w	r2, r2, r3
  407680:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  407684:	bf04      	itt	eq
  407686:	f851 3b04 	ldreq.w	r3, [r1], #4
  40768a:	3004      	addeq	r0, #4
  40768c:	d0f4      	beq.n	407678 <strlen+0x30>
  40768e:	f1c2 0100 	rsb	r1, r2, #0
  407692:	ea02 0201 	and.w	r2, r2, r1
  407696:	fab2 f282 	clz	r2, r2
  40769a:	f1c2 021f 	rsb	r2, r2, #31
  40769e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4076a2:	4770      	bx	lr

004076a4 <strncpy>:
  4076a4:	ea40 0301 	orr.w	r3, r0, r1
  4076a8:	079b      	lsls	r3, r3, #30
  4076aa:	b470      	push	{r4, r5, r6}
  4076ac:	d12b      	bne.n	407706 <strncpy+0x62>
  4076ae:	2a03      	cmp	r2, #3
  4076b0:	d929      	bls.n	407706 <strncpy+0x62>
  4076b2:	460b      	mov	r3, r1
  4076b4:	4606      	mov	r6, r0
  4076b6:	4619      	mov	r1, r3
  4076b8:	f853 5b04 	ldr.w	r5, [r3], #4
  4076bc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4076c0:	ea24 0405 	bic.w	r4, r4, r5
  4076c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4076c8:	d105      	bne.n	4076d6 <strncpy+0x32>
  4076ca:	3a04      	subs	r2, #4
  4076cc:	f846 5b04 	str.w	r5, [r6], #4
  4076d0:	4619      	mov	r1, r3
  4076d2:	2a03      	cmp	r2, #3
  4076d4:	d8ef      	bhi.n	4076b6 <strncpy+0x12>
  4076d6:	b1a2      	cbz	r2, 407702 <strncpy+0x5e>
  4076d8:	780c      	ldrb	r4, [r1, #0]
  4076da:	3a01      	subs	r2, #1
  4076dc:	1c73      	adds	r3, r6, #1
  4076de:	3101      	adds	r1, #1
  4076e0:	7034      	strb	r4, [r6, #0]
  4076e2:	b13c      	cbz	r4, 4076f4 <strncpy+0x50>
  4076e4:	b16a      	cbz	r2, 407702 <strncpy+0x5e>
  4076e6:	f811 4b01 	ldrb.w	r4, [r1], #1
  4076ea:	3a01      	subs	r2, #1
  4076ec:	f803 4b01 	strb.w	r4, [r3], #1
  4076f0:	2c00      	cmp	r4, #0
  4076f2:	d1f7      	bne.n	4076e4 <strncpy+0x40>
  4076f4:	b12a      	cbz	r2, 407702 <strncpy+0x5e>
  4076f6:	441a      	add	r2, r3
  4076f8:	2100      	movs	r1, #0
  4076fa:	f803 1b01 	strb.w	r1, [r3], #1
  4076fe:	4293      	cmp	r3, r2
  407700:	d1fb      	bne.n	4076fa <strncpy+0x56>
  407702:	bc70      	pop	{r4, r5, r6}
  407704:	4770      	bx	lr
  407706:	4606      	mov	r6, r0
  407708:	e7e5      	b.n	4076d6 <strncpy+0x32>
  40770a:	bf00      	nop

0040770c <_svfprintf_r>:
  40770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407710:	b0c1      	sub	sp, #260	; 0x104
  407712:	4689      	mov	r9, r1
  407714:	9208      	str	r2, [sp, #32]
  407716:	930c      	str	r3, [sp, #48]	; 0x30
  407718:	9009      	str	r0, [sp, #36]	; 0x24
  40771a:	f002 ff97 	bl	40a64c <_localeconv_r>
  40771e:	6803      	ldr	r3, [r0, #0]
  407720:	4618      	mov	r0, r3
  407722:	9316      	str	r3, [sp, #88]	; 0x58
  407724:	f7ff ff90 	bl	407648 <strlen>
  407728:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40772c:	9017      	str	r0, [sp, #92]	; 0x5c
  40772e:	061d      	lsls	r5, r3, #24
  407730:	d504      	bpl.n	40773c <_svfprintf_r+0x30>
  407732:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407736:	2b00      	cmp	r3, #0
  407738:	f001 8080 	beq.w	40883c <_svfprintf_r+0x1130>
  40773c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407740:	2300      	movs	r3, #0
  407742:	46c3      	mov	fp, r8
  407744:	9313      	str	r3, [sp, #76]	; 0x4c
  407746:	9314      	str	r3, [sp, #80]	; 0x50
  407748:	9312      	str	r3, [sp, #72]	; 0x48
  40774a:	9315      	str	r3, [sp, #84]	; 0x54
  40774c:	9319      	str	r3, [sp, #100]	; 0x64
  40774e:	930a      	str	r3, [sp, #40]	; 0x28
  407750:	9325      	str	r3, [sp, #148]	; 0x94
  407752:	9324      	str	r3, [sp, #144]	; 0x90
  407754:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  407758:	9a08      	ldr	r2, [sp, #32]
  40775a:	7813      	ldrb	r3, [r2, #0]
  40775c:	2b25      	cmp	r3, #37	; 0x25
  40775e:	f000 80a6 	beq.w	4078ae <_svfprintf_r+0x1a2>
  407762:	b90b      	cbnz	r3, 407768 <_svfprintf_r+0x5c>
  407764:	e0a3      	b.n	4078ae <_svfprintf_r+0x1a2>
  407766:	b11b      	cbz	r3, 407770 <_svfprintf_r+0x64>
  407768:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40776c:	2b25      	cmp	r3, #37	; 0x25
  40776e:	d1fa      	bne.n	407766 <_svfprintf_r+0x5a>
  407770:	9908      	ldr	r1, [sp, #32]
  407772:	4614      	mov	r4, r2
  407774:	1a55      	subs	r5, r2, r1
  407776:	d010      	beq.n	40779a <_svfprintf_r+0x8e>
  407778:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40777a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40777c:	3301      	adds	r3, #1
  40777e:	f8cb 1000 	str.w	r1, [fp]
  407782:	442a      	add	r2, r5
  407784:	f8cb 5004 	str.w	r5, [fp, #4]
  407788:	2b07      	cmp	r3, #7
  40778a:	9324      	str	r3, [sp, #144]	; 0x90
  40778c:	9225      	str	r2, [sp, #148]	; 0x94
  40778e:	dc73      	bgt.n	407878 <_svfprintf_r+0x16c>
  407790:	f10b 0b08 	add.w	fp, fp, #8
  407794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407796:	442b      	add	r3, r5
  407798:	930a      	str	r3, [sp, #40]	; 0x28
  40779a:	7823      	ldrb	r3, [r4, #0]
  40779c:	2b00      	cmp	r3, #0
  40779e:	d073      	beq.n	407888 <_svfprintf_r+0x17c>
  4077a0:	2300      	movs	r3, #0
  4077a2:	f04f 3cff 	mov.w	ip, #4294967295
  4077a6:	1c61      	adds	r1, r4, #1
  4077a8:	7866      	ldrb	r6, [r4, #1]
  4077aa:	461a      	mov	r2, r3
  4077ac:	4664      	mov	r4, ip
  4077ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4077b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4077b4:	9306      	str	r3, [sp, #24]
  4077b6:	1c4b      	adds	r3, r1, #1
  4077b8:	f1a6 0120 	sub.w	r1, r6, #32
  4077bc:	2958      	cmp	r1, #88	; 0x58
  4077be:	f200 83b2 	bhi.w	407f26 <_svfprintf_r+0x81a>
  4077c2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4077c6:	0319      	.short	0x0319
  4077c8:	03b003b0 	.word	0x03b003b0
  4077cc:	03b00320 	.word	0x03b00320
  4077d0:	03b003b0 	.word	0x03b003b0
  4077d4:	03b003b0 	.word	0x03b003b0
  4077d8:	024003b0 	.word	0x024003b0
  4077dc:	03b001fb 	.word	0x03b001fb
  4077e0:	01ff01e2 	.word	0x01ff01e2
  4077e4:	032703b0 	.word	0x032703b0
  4077e8:	032e032e 	.word	0x032e032e
  4077ec:	032e032e 	.word	0x032e032e
  4077f0:	032e032e 	.word	0x032e032e
  4077f4:	032e032e 	.word	0x032e032e
  4077f8:	03b0032e 	.word	0x03b0032e
  4077fc:	03b003b0 	.word	0x03b003b0
  407800:	03b003b0 	.word	0x03b003b0
  407804:	03b003b0 	.word	0x03b003b0
  407808:	03b003b0 	.word	0x03b003b0
  40780c:	033d03b0 	.word	0x033d03b0
  407810:	03b00365 	.word	0x03b00365
  407814:	03b00365 	.word	0x03b00365
  407818:	03b003b0 	.word	0x03b003b0
  40781c:	02fe03b0 	.word	0x02fe03b0
  407820:	03b003b0 	.word	0x03b003b0
  407824:	03b00293 	.word	0x03b00293
  407828:	03b003b0 	.word	0x03b003b0
  40782c:	03b003b0 	.word	0x03b003b0
  407830:	03b002b0 	.word	0x03b002b0
  407834:	02c603b0 	.word	0x02c603b0
  407838:	03b003b0 	.word	0x03b003b0
  40783c:	03b003b0 	.word	0x03b003b0
  407840:	03b003b0 	.word	0x03b003b0
  407844:	03b003b0 	.word	0x03b003b0
  407848:	03b003b0 	.word	0x03b003b0
  40784c:	021802eb 	.word	0x021802eb
  407850:	03650365 	.word	0x03650365
  407854:	024e0365 	.word	0x024e0365
  407858:	03b00218 	.word	0x03b00218
  40785c:	023603b0 	.word	0x023603b0
  407860:	026003b0 	.word	0x026003b0
  407864:	039901e9 	.word	0x039901e9
  407868:	03b00259 	.word	0x03b00259
  40786c:	03b00272 	.word	0x03b00272
  407870:	03b00076 	.word	0x03b00076
  407874:	030503b0 	.word	0x030503b0
  407878:	9809      	ldr	r0, [sp, #36]	; 0x24
  40787a:	4649      	mov	r1, r9
  40787c:	aa23      	add	r2, sp, #140	; 0x8c
  40787e:	f004 f8d3 	bl	40ba28 <__ssprint_r>
  407882:	b940      	cbnz	r0, 407896 <_svfprintf_r+0x18a>
  407884:	46c3      	mov	fp, r8
  407886:	e785      	b.n	407794 <_svfprintf_r+0x88>
  407888:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40788a:	b123      	cbz	r3, 407896 <_svfprintf_r+0x18a>
  40788c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40788e:	4649      	mov	r1, r9
  407890:	aa23      	add	r2, sp, #140	; 0x8c
  407892:	f004 f8c9 	bl	40ba28 <__ssprint_r>
  407896:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40789a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40789e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078a0:	bf18      	it	ne
  4078a2:	f04f 33ff 	movne.w	r3, #4294967295
  4078a6:	4618      	mov	r0, r3
  4078a8:	b041      	add	sp, #260	; 0x104
  4078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078ae:	9c08      	ldr	r4, [sp, #32]
  4078b0:	e773      	b.n	40779a <_svfprintf_r+0x8e>
  4078b2:	9308      	str	r3, [sp, #32]
  4078b4:	46a4      	mov	ip, r4
  4078b6:	9b06      	ldr	r3, [sp, #24]
  4078b8:	0698      	lsls	r0, r3, #26
  4078ba:	f140 823e 	bpl.w	407d3a <_svfprintf_r+0x62e>
  4078be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4078c0:	2301      	movs	r3, #1
  4078c2:	3707      	adds	r7, #7
  4078c4:	f027 0207 	bic.w	r2, r7, #7
  4078c8:	f102 0108 	add.w	r1, r2, #8
  4078cc:	e9d2 4500 	ldrd	r4, r5, [r2]
  4078d0:	910c      	str	r1, [sp, #48]	; 0x30
  4078d2:	2200      	movs	r2, #0
  4078d4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4078d8:	4617      	mov	r7, r2
  4078da:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4078de:	f1bc 0f00 	cmp.w	ip, #0
  4078e2:	db03      	blt.n	4078ec <_svfprintf_r+0x1e0>
  4078e4:	9a06      	ldr	r2, [sp, #24]
  4078e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4078ea:	9206      	str	r2, [sp, #24]
  4078ec:	f1bc 0f00 	cmp.w	ip, #0
  4078f0:	f040 83ac 	bne.w	40804c <_svfprintf_r+0x940>
  4078f4:	ea54 0205 	orrs.w	r2, r4, r5
  4078f8:	bf14      	ite	ne
  4078fa:	2201      	movne	r2, #1
  4078fc:	2200      	moveq	r2, #0
  4078fe:	2a00      	cmp	r2, #0
  407900:	f040 83a4 	bne.w	40804c <_svfprintf_r+0x940>
  407904:	2b00      	cmp	r3, #0
  407906:	f040 8460 	bne.w	4081ca <_svfprintf_r+0xabe>
  40790a:	9a06      	ldr	r2, [sp, #24]
  40790c:	07d2      	lsls	r2, r2, #31
  40790e:	f140 84fd 	bpl.w	40830c <_svfprintf_r+0xc00>
  407912:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  407916:	2330      	movs	r3, #48	; 0x30
  407918:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40791c:	ebca 0408 	rsb	r4, sl, r8
  407920:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407924:	45a4      	cmp	ip, r4
  407926:	4663      	mov	r3, ip
  407928:	bfb8      	it	lt
  40792a:	4623      	movlt	r3, r4
  40792c:	9307      	str	r3, [sp, #28]
  40792e:	2300      	movs	r3, #0
  407930:	9311      	str	r3, [sp, #68]	; 0x44
  407932:	b117      	cbz	r7, 40793a <_svfprintf_r+0x22e>
  407934:	9b07      	ldr	r3, [sp, #28]
  407936:	3301      	adds	r3, #1
  407938:	9307      	str	r3, [sp, #28]
  40793a:	9b06      	ldr	r3, [sp, #24]
  40793c:	f013 0302 	ands.w	r3, r3, #2
  407940:	930d      	str	r3, [sp, #52]	; 0x34
  407942:	d002      	beq.n	40794a <_svfprintf_r+0x23e>
  407944:	9b07      	ldr	r3, [sp, #28]
  407946:	3302      	adds	r3, #2
  407948:	9307      	str	r3, [sp, #28]
  40794a:	9b06      	ldr	r3, [sp, #24]
  40794c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407950:	930e      	str	r3, [sp, #56]	; 0x38
  407952:	f040 8307 	bne.w	407f64 <_svfprintf_r+0x858>
  407956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407958:	9a07      	ldr	r2, [sp, #28]
  40795a:	ebc2 0a03 	rsb	sl, r2, r3
  40795e:	f1ba 0f00 	cmp.w	sl, #0
  407962:	f340 82ff 	ble.w	407f64 <_svfprintf_r+0x858>
  407966:	f1ba 0f10 	cmp.w	sl, #16
  40796a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40796c:	f340 87dd 	ble.w	40892a <_svfprintf_r+0x121e>
  407970:	4fbf      	ldr	r7, [pc, #764]	; (407c70 <_svfprintf_r+0x564>)
  407972:	2510      	movs	r5, #16
  407974:	9618      	str	r6, [sp, #96]	; 0x60
  407976:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407978:	463e      	mov	r6, r7
  40797a:	4627      	mov	r7, r4
  40797c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40797e:	e004      	b.n	40798a <_svfprintf_r+0x27e>
  407980:	f1aa 0a10 	sub.w	sl, sl, #16
  407984:	f1ba 0f10 	cmp.w	sl, #16
  407988:	dd1b      	ble.n	4079c2 <_svfprintf_r+0x2b6>
  40798a:	3201      	adds	r2, #1
  40798c:	3110      	adds	r1, #16
  40798e:	f8cb 6000 	str.w	r6, [fp]
  407992:	f10b 0b08 	add.w	fp, fp, #8
  407996:	2a07      	cmp	r2, #7
  407998:	f84b 5c04 	str.w	r5, [fp, #-4]
  40799c:	9125      	str	r1, [sp, #148]	; 0x94
  40799e:	9224      	str	r2, [sp, #144]	; 0x90
  4079a0:	ddee      	ble.n	407980 <_svfprintf_r+0x274>
  4079a2:	4620      	mov	r0, r4
  4079a4:	4649      	mov	r1, r9
  4079a6:	aa23      	add	r2, sp, #140	; 0x8c
  4079a8:	46c3      	mov	fp, r8
  4079aa:	f004 f83d 	bl	40ba28 <__ssprint_r>
  4079ae:	2800      	cmp	r0, #0
  4079b0:	f47f af71 	bne.w	407896 <_svfprintf_r+0x18a>
  4079b4:	f1aa 0a10 	sub.w	sl, sl, #16
  4079b8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4079ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4079bc:	f1ba 0f10 	cmp.w	sl, #16
  4079c0:	dce3      	bgt.n	40798a <_svfprintf_r+0x27e>
  4079c2:	463c      	mov	r4, r7
  4079c4:	4637      	mov	r7, r6
  4079c6:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4079c8:	3201      	adds	r2, #1
  4079ca:	eb0a 0c01 	add.w	ip, sl, r1
  4079ce:	f8cb 7000 	str.w	r7, [fp]
  4079d2:	2a07      	cmp	r2, #7
  4079d4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4079d8:	9224      	str	r2, [sp, #144]	; 0x90
  4079da:	f8cb a004 	str.w	sl, [fp, #4]
  4079de:	f300 82b6 	bgt.w	407f4e <_svfprintf_r+0x842>
  4079e2:	f10b 0b08 	add.w	fp, fp, #8
  4079e6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4079ea:	b197      	cbz	r7, 407a12 <_svfprintf_r+0x306>
  4079ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079ee:	2201      	movs	r2, #1
  4079f0:	f10c 0c01 	add.w	ip, ip, #1
  4079f4:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4079f8:	4413      	add	r3, r2
  4079fa:	f8cb 2004 	str.w	r2, [fp, #4]
  4079fe:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407a02:	2b07      	cmp	r3, #7
  407a04:	f8cb 1000 	str.w	r1, [fp]
  407a08:	9324      	str	r3, [sp, #144]	; 0x90
  407a0a:	f300 83fb 	bgt.w	408204 <_svfprintf_r+0xaf8>
  407a0e:	f10b 0b08 	add.w	fp, fp, #8
  407a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a14:	b18b      	cbz	r3, 407a3a <_svfprintf_r+0x32e>
  407a16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a18:	f10c 0c02 	add.w	ip, ip, #2
  407a1c:	a91c      	add	r1, sp, #112	; 0x70
  407a1e:	2202      	movs	r2, #2
  407a20:	3301      	adds	r3, #1
  407a22:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407a26:	f8cb 1000 	str.w	r1, [fp]
  407a2a:	2b07      	cmp	r3, #7
  407a2c:	9324      	str	r3, [sp, #144]	; 0x90
  407a2e:	f8cb 2004 	str.w	r2, [fp, #4]
  407a32:	f300 83db 	bgt.w	4081ec <_svfprintf_r+0xae0>
  407a36:	f10b 0b08 	add.w	fp, fp, #8
  407a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a3c:	2b80      	cmp	r3, #128	; 0x80
  407a3e:	f000 8321 	beq.w	408084 <_svfprintf_r+0x978>
  407a42:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407a44:	1b1f      	subs	r7, r3, r4
  407a46:	2f00      	cmp	r7, #0
  407a48:	dd37      	ble.n	407aba <_svfprintf_r+0x3ae>
  407a4a:	2f10      	cmp	r7, #16
  407a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a4e:	f340 85ec 	ble.w	40862a <_svfprintf_r+0xf1e>
  407a52:	940d      	str	r4, [sp, #52]	; 0x34
  407a54:	f04f 0a10 	mov.w	sl, #16
  407a58:	4d86      	ldr	r5, [pc, #536]	; (407c74 <_svfprintf_r+0x568>)
  407a5a:	4662      	mov	r2, ip
  407a5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407a5e:	e002      	b.n	407a66 <_svfprintf_r+0x35a>
  407a60:	3f10      	subs	r7, #16
  407a62:	2f10      	cmp	r7, #16
  407a64:	dd19      	ble.n	407a9a <_svfprintf_r+0x38e>
  407a66:	3301      	adds	r3, #1
  407a68:	3210      	adds	r2, #16
  407a6a:	f8cb 5000 	str.w	r5, [fp]
  407a6e:	f10b 0b08 	add.w	fp, fp, #8
  407a72:	2b07      	cmp	r3, #7
  407a74:	f84b ac04 	str.w	sl, [fp, #-4]
  407a78:	9225      	str	r2, [sp, #148]	; 0x94
  407a7a:	9324      	str	r3, [sp, #144]	; 0x90
  407a7c:	ddf0      	ble.n	407a60 <_svfprintf_r+0x354>
  407a7e:	4620      	mov	r0, r4
  407a80:	4649      	mov	r1, r9
  407a82:	aa23      	add	r2, sp, #140	; 0x8c
  407a84:	46c3      	mov	fp, r8
  407a86:	f003 ffcf 	bl	40ba28 <__ssprint_r>
  407a8a:	2800      	cmp	r0, #0
  407a8c:	f47f af03 	bne.w	407896 <_svfprintf_r+0x18a>
  407a90:	3f10      	subs	r7, #16
  407a92:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407a94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a96:	2f10      	cmp	r7, #16
  407a98:	dce5      	bgt.n	407a66 <_svfprintf_r+0x35a>
  407a9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407a9c:	4694      	mov	ip, r2
  407a9e:	3301      	adds	r3, #1
  407aa0:	44bc      	add	ip, r7
  407aa2:	f8cb 5000 	str.w	r5, [fp]
  407aa6:	2b07      	cmp	r3, #7
  407aa8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407aac:	9324      	str	r3, [sp, #144]	; 0x90
  407aae:	f8cb 7004 	str.w	r7, [fp, #4]
  407ab2:	f300 838f 	bgt.w	4081d4 <_svfprintf_r+0xac8>
  407ab6:	f10b 0b08 	add.w	fp, fp, #8
  407aba:	9b06      	ldr	r3, [sp, #24]
  407abc:	05df      	lsls	r7, r3, #23
  407abe:	f100 8254 	bmi.w	407f6a <_svfprintf_r+0x85e>
  407ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ac4:	44a4      	add	ip, r4
  407ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407ac8:	3301      	adds	r3, #1
  407aca:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407ace:	f8cb 2000 	str.w	r2, [fp]
  407ad2:	2b07      	cmp	r3, #7
  407ad4:	f8cb 4004 	str.w	r4, [fp, #4]
  407ad8:	9324      	str	r3, [sp, #144]	; 0x90
  407ada:	f300 8360 	bgt.w	40819e <_svfprintf_r+0xa92>
  407ade:	f10b 0b08 	add.w	fp, fp, #8
  407ae2:	9b06      	ldr	r3, [sp, #24]
  407ae4:	075a      	lsls	r2, r3, #29
  407ae6:	d540      	bpl.n	407b6a <_svfprintf_r+0x45e>
  407ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407aea:	9a07      	ldr	r2, [sp, #28]
  407aec:	1a9c      	subs	r4, r3, r2
  407aee:	2c00      	cmp	r4, #0
  407af0:	dd3b      	ble.n	407b6a <_svfprintf_r+0x45e>
  407af2:	2c10      	cmp	r4, #16
  407af4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407af6:	f340 876b 	ble.w	4089d0 <_svfprintf_r+0x12c4>
  407afa:	2510      	movs	r5, #16
  407afc:	4f5c      	ldr	r7, [pc, #368]	; (407c70 <_svfprintf_r+0x564>)
  407afe:	4662      	mov	r2, ip
  407b00:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407b02:	e002      	b.n	407b0a <_svfprintf_r+0x3fe>
  407b04:	3c10      	subs	r4, #16
  407b06:	2c10      	cmp	r4, #16
  407b08:	dd19      	ble.n	407b3e <_svfprintf_r+0x432>
  407b0a:	3301      	adds	r3, #1
  407b0c:	3210      	adds	r2, #16
  407b0e:	f8cb 7000 	str.w	r7, [fp]
  407b12:	f10b 0b08 	add.w	fp, fp, #8
  407b16:	2b07      	cmp	r3, #7
  407b18:	f84b 5c04 	str.w	r5, [fp, #-4]
  407b1c:	9225      	str	r2, [sp, #148]	; 0x94
  407b1e:	9324      	str	r3, [sp, #144]	; 0x90
  407b20:	ddf0      	ble.n	407b04 <_svfprintf_r+0x3f8>
  407b22:	4630      	mov	r0, r6
  407b24:	4649      	mov	r1, r9
  407b26:	aa23      	add	r2, sp, #140	; 0x8c
  407b28:	46c3      	mov	fp, r8
  407b2a:	f003 ff7d 	bl	40ba28 <__ssprint_r>
  407b2e:	2800      	cmp	r0, #0
  407b30:	f47f aeb1 	bne.w	407896 <_svfprintf_r+0x18a>
  407b34:	3c10      	subs	r4, #16
  407b36:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b3a:	2c10      	cmp	r4, #16
  407b3c:	dce5      	bgt.n	407b0a <_svfprintf_r+0x3fe>
  407b3e:	4694      	mov	ip, r2
  407b40:	3301      	adds	r3, #1
  407b42:	44a4      	add	ip, r4
  407b44:	f8cb 7000 	str.w	r7, [fp]
  407b48:	2b07      	cmp	r3, #7
  407b4a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407b4e:	9324      	str	r3, [sp, #144]	; 0x90
  407b50:	f8cb 4004 	str.w	r4, [fp, #4]
  407b54:	dd09      	ble.n	407b6a <_svfprintf_r+0x45e>
  407b56:	9809      	ldr	r0, [sp, #36]	; 0x24
  407b58:	4649      	mov	r1, r9
  407b5a:	aa23      	add	r2, sp, #140	; 0x8c
  407b5c:	f003 ff64 	bl	40ba28 <__ssprint_r>
  407b60:	2800      	cmp	r0, #0
  407b62:	f47f ae98 	bne.w	407896 <_svfprintf_r+0x18a>
  407b66:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b6c:	9a07      	ldr	r2, [sp, #28]
  407b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b70:	428a      	cmp	r2, r1
  407b72:	bfac      	ite	ge
  407b74:	189b      	addge	r3, r3, r2
  407b76:	185b      	addlt	r3, r3, r1
  407b78:	930a      	str	r3, [sp, #40]	; 0x28
  407b7a:	f1bc 0f00 	cmp.w	ip, #0
  407b7e:	f040 831a 	bne.w	4081b6 <_svfprintf_r+0xaaa>
  407b82:	2300      	movs	r3, #0
  407b84:	46c3      	mov	fp, r8
  407b86:	9324      	str	r3, [sp, #144]	; 0x90
  407b88:	e5e6      	b.n	407758 <_svfprintf_r+0x4c>
  407b8a:	4619      	mov	r1, r3
  407b8c:	9806      	ldr	r0, [sp, #24]
  407b8e:	781e      	ldrb	r6, [r3, #0]
  407b90:	f040 0004 	orr.w	r0, r0, #4
  407b94:	9006      	str	r0, [sp, #24]
  407b96:	e60e      	b.n	4077b6 <_svfprintf_r+0xaa>
  407b98:	9308      	str	r3, [sp, #32]
  407b9a:	46a4      	mov	ip, r4
  407b9c:	9b06      	ldr	r3, [sp, #24]
  407b9e:	f013 0320 	ands.w	r3, r3, #32
  407ba2:	f000 80ae 	beq.w	407d02 <_svfprintf_r+0x5f6>
  407ba6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407ba8:	2300      	movs	r3, #0
  407baa:	3707      	adds	r7, #7
  407bac:	f027 0207 	bic.w	r2, r7, #7
  407bb0:	f102 0108 	add.w	r1, r2, #8
  407bb4:	e9d2 4500 	ldrd	r4, r5, [r2]
  407bb8:	910c      	str	r1, [sp, #48]	; 0x30
  407bba:	e68a      	b.n	4078d2 <_svfprintf_r+0x1c6>
  407bbc:	781e      	ldrb	r6, [r3, #0]
  407bbe:	4619      	mov	r1, r3
  407bc0:	222b      	movs	r2, #43	; 0x2b
  407bc2:	e5f8      	b.n	4077b6 <_svfprintf_r+0xaa>
  407bc4:	781e      	ldrb	r6, [r3, #0]
  407bc6:	1c59      	adds	r1, r3, #1
  407bc8:	2e2a      	cmp	r6, #42	; 0x2a
  407bca:	f001 8006 	beq.w	408bda <_svfprintf_r+0x14ce>
  407bce:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407bd2:	460b      	mov	r3, r1
  407bd4:	2400      	movs	r4, #0
  407bd6:	2809      	cmp	r0, #9
  407bd8:	f63f adee 	bhi.w	4077b8 <_svfprintf_r+0xac>
  407bdc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407be0:	f813 6b01 	ldrb.w	r6, [r3], #1
  407be4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407be8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407bec:	2809      	cmp	r0, #9
  407bee:	d9f5      	bls.n	407bdc <_svfprintf_r+0x4d0>
  407bf0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  407bf4:	e5e0      	b.n	4077b8 <_svfprintf_r+0xac>
  407bf6:	9308      	str	r3, [sp, #32]
  407bf8:	46a4      	mov	ip, r4
  407bfa:	9b06      	ldr	r3, [sp, #24]
  407bfc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407c00:	069c      	lsls	r4, r3, #26
  407c02:	f140 8129 	bpl.w	407e58 <_svfprintf_r+0x74c>
  407c06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407c08:	3707      	adds	r7, #7
  407c0a:	f027 0707 	bic.w	r7, r7, #7
  407c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
  407c12:	f107 0108 	add.w	r1, r7, #8
  407c16:	4614      	mov	r4, r2
  407c18:	461d      	mov	r5, r3
  407c1a:	910c      	str	r1, [sp, #48]	; 0x30
  407c1c:	2a00      	cmp	r2, #0
  407c1e:	f173 0300 	sbcs.w	r3, r3, #0
  407c22:	f2c0 812a 	blt.w	407e7a <_svfprintf_r+0x76e>
  407c26:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407c2a:	2301      	movs	r3, #1
  407c2c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407c30:	e655      	b.n	4078de <_svfprintf_r+0x1d2>
  407c32:	781e      	ldrb	r6, [r3, #0]
  407c34:	9906      	ldr	r1, [sp, #24]
  407c36:	2e6c      	cmp	r6, #108	; 0x6c
  407c38:	f000 8557 	beq.w	4086ea <_svfprintf_r+0xfde>
  407c3c:	f041 0110 	orr.w	r1, r1, #16
  407c40:	9106      	str	r1, [sp, #24]
  407c42:	4619      	mov	r1, r3
  407c44:	e5b7      	b.n	4077b6 <_svfprintf_r+0xaa>
  407c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  407c48:	6829      	ldr	r1, [r5, #0]
  407c4a:	4608      	mov	r0, r1
  407c4c:	910b      	str	r1, [sp, #44]	; 0x2c
  407c4e:	4629      	mov	r1, r5
  407c50:	2800      	cmp	r0, #0
  407c52:	f101 0104 	add.w	r1, r1, #4
  407c56:	f2c0 854f 	blt.w	4086f8 <_svfprintf_r+0xfec>
  407c5a:	910c      	str	r1, [sp, #48]	; 0x30
  407c5c:	4619      	mov	r1, r3
  407c5e:	781e      	ldrb	r6, [r3, #0]
  407c60:	e5a9      	b.n	4077b6 <_svfprintf_r+0xaa>
  407c62:	9906      	ldr	r1, [sp, #24]
  407c64:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  407c68:	9106      	str	r1, [sp, #24]
  407c6a:	4619      	mov	r1, r3
  407c6c:	781e      	ldrb	r6, [r3, #0]
  407c6e:	e5a2      	b.n	4077b6 <_svfprintf_r+0xaa>
  407c70:	0040d8b8 	.word	0x0040d8b8
  407c74:	0040d8a8 	.word	0x0040d8a8
  407c78:	9906      	ldr	r1, [sp, #24]
  407c7a:	f041 0120 	orr.w	r1, r1, #32
  407c7e:	9106      	str	r1, [sp, #24]
  407c80:	4619      	mov	r1, r3
  407c82:	781e      	ldrb	r6, [r3, #0]
  407c84:	e597      	b.n	4077b6 <_svfprintf_r+0xaa>
  407c86:	9308      	str	r3, [sp, #32]
  407c88:	9b06      	ldr	r3, [sp, #24]
  407c8a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407c8e:	069e      	lsls	r6, r3, #26
  407c90:	f140 84a4 	bpl.w	4085dc <_svfprintf_r+0xed0>
  407c94:	990a      	ldr	r1, [sp, #40]	; 0x28
  407c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407c98:	17cd      	asrs	r5, r1, #31
  407c9a:	4608      	mov	r0, r1
  407c9c:	6813      	ldr	r3, [r2, #0]
  407c9e:	3204      	adds	r2, #4
  407ca0:	4629      	mov	r1, r5
  407ca2:	920c      	str	r2, [sp, #48]	; 0x30
  407ca4:	e9c3 0100 	strd	r0, r1, [r3]
  407ca8:	e556      	b.n	407758 <_svfprintf_r+0x4c>
  407caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407cac:	2500      	movs	r5, #0
  407cae:	9308      	str	r3, [sp, #32]
  407cb0:	6813      	ldr	r3, [r2, #0]
  407cb2:	1d17      	adds	r7, r2, #4
  407cb4:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  407cb8:	930f      	str	r3, [sp, #60]	; 0x3c
  407cba:	2b00      	cmp	r3, #0
  407cbc:	f000 867a 	beq.w	4089b4 <_svfprintf_r+0x12a8>
  407cc0:	2c00      	cmp	r4, #0
  407cc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407cc4:	f2c0 8624 	blt.w	408910 <_svfprintf_r+0x1204>
  407cc8:	4629      	mov	r1, r5
  407cca:	4622      	mov	r2, r4
  407ccc:	f002 ffe8 	bl	40aca0 <memchr>
  407cd0:	2800      	cmp	r0, #0
  407cd2:	f000 86df 	beq.w	408a94 <_svfprintf_r+0x1388>
  407cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407cd8:	970c      	str	r7, [sp, #48]	; 0x30
  407cda:	1ac4      	subs	r4, r0, r3
  407cdc:	9510      	str	r5, [sp, #64]	; 0x40
  407cde:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407ce2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  407ce6:	9511      	str	r5, [sp, #68]	; 0x44
  407ce8:	9307      	str	r3, [sp, #28]
  407cea:	e622      	b.n	407932 <_svfprintf_r+0x226>
  407cec:	9308      	str	r3, [sp, #32]
  407cee:	46a4      	mov	ip, r4
  407cf0:	9b06      	ldr	r3, [sp, #24]
  407cf2:	f043 0310 	orr.w	r3, r3, #16
  407cf6:	9306      	str	r3, [sp, #24]
  407cf8:	9b06      	ldr	r3, [sp, #24]
  407cfa:	f013 0320 	ands.w	r3, r3, #32
  407cfe:	f47f af52 	bne.w	407ba6 <_svfprintf_r+0x49a>
  407d02:	9a06      	ldr	r2, [sp, #24]
  407d04:	f012 0210 	ands.w	r2, r2, #16
  407d08:	f040 8352 	bne.w	4083b0 <_svfprintf_r+0xca4>
  407d0c:	9b06      	ldr	r3, [sp, #24]
  407d0e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  407d12:	f000 834d 	beq.w	4083b0 <_svfprintf_r+0xca4>
  407d16:	990c      	ldr	r1, [sp, #48]	; 0x30
  407d18:	4613      	mov	r3, r2
  407d1a:	2500      	movs	r5, #0
  407d1c:	460a      	mov	r2, r1
  407d1e:	880c      	ldrh	r4, [r1, #0]
  407d20:	3204      	adds	r2, #4
  407d22:	920c      	str	r2, [sp, #48]	; 0x30
  407d24:	e5d5      	b.n	4078d2 <_svfprintf_r+0x1c6>
  407d26:	9308      	str	r3, [sp, #32]
  407d28:	46a4      	mov	ip, r4
  407d2a:	9b06      	ldr	r3, [sp, #24]
  407d2c:	f043 0310 	orr.w	r3, r3, #16
  407d30:	9306      	str	r3, [sp, #24]
  407d32:	9b06      	ldr	r3, [sp, #24]
  407d34:	0698      	lsls	r0, r3, #26
  407d36:	f53f adc2 	bmi.w	4078be <_svfprintf_r+0x1b2>
  407d3a:	9b06      	ldr	r3, [sp, #24]
  407d3c:	06d9      	lsls	r1, r3, #27
  407d3e:	f140 8432 	bpl.w	4085a6 <_svfprintf_r+0xe9a>
  407d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407d44:	4613      	mov	r3, r2
  407d46:	3204      	adds	r2, #4
  407d48:	681c      	ldr	r4, [r3, #0]
  407d4a:	2500      	movs	r5, #0
  407d4c:	2301      	movs	r3, #1
  407d4e:	920c      	str	r2, [sp, #48]	; 0x30
  407d50:	e5bf      	b.n	4078d2 <_svfprintf_r+0x1c6>
  407d52:	9308      	str	r3, [sp, #32]
  407d54:	46a4      	mov	ip, r4
  407d56:	4bb7      	ldr	r3, [pc, #732]	; (408034 <_svfprintf_r+0x928>)
  407d58:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407d5c:	9315      	str	r3, [sp, #84]	; 0x54
  407d5e:	9b06      	ldr	r3, [sp, #24]
  407d60:	069a      	lsls	r2, r3, #26
  407d62:	d53e      	bpl.n	407de2 <_svfprintf_r+0x6d6>
  407d64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407d66:	3707      	adds	r7, #7
  407d68:	f027 0307 	bic.w	r3, r7, #7
  407d6c:	f103 0208 	add.w	r2, r3, #8
  407d70:	e9d3 4500 	ldrd	r4, r5, [r3]
  407d74:	920c      	str	r2, [sp, #48]	; 0x30
  407d76:	9b06      	ldr	r3, [sp, #24]
  407d78:	07df      	lsls	r7, r3, #31
  407d7a:	f140 8268 	bpl.w	40824e <_svfprintf_r+0xb42>
  407d7e:	ea54 0305 	orrs.w	r3, r4, r5
  407d82:	f000 8264 	beq.w	40824e <_svfprintf_r+0xb42>
  407d86:	9b06      	ldr	r3, [sp, #24]
  407d88:	2230      	movs	r2, #48	; 0x30
  407d8a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407d8e:	f043 0302 	orr.w	r3, r3, #2
  407d92:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407d96:	9306      	str	r3, [sp, #24]
  407d98:	2302      	movs	r3, #2
  407d9a:	e59a      	b.n	4078d2 <_svfprintf_r+0x1c6>
  407d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
  407d9e:	2001      	movs	r0, #1
  407da0:	9308      	str	r3, [sp, #32]
  407da2:	2300      	movs	r3, #0
  407da4:	680a      	ldr	r2, [r1, #0]
  407da6:	3104      	adds	r1, #4
  407da8:	461f      	mov	r7, r3
  407daa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407dae:	9310      	str	r3, [sp, #64]	; 0x40
  407db0:	4604      	mov	r4, r0
  407db2:	9311      	str	r3, [sp, #68]	; 0x44
  407db4:	ab26      	add	r3, sp, #152	; 0x98
  407db6:	9007      	str	r0, [sp, #28]
  407db8:	910c      	str	r1, [sp, #48]	; 0x30
  407dba:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  407dbe:	930f      	str	r3, [sp, #60]	; 0x3c
  407dc0:	e5bb      	b.n	40793a <_svfprintf_r+0x22e>
  407dc2:	9906      	ldr	r1, [sp, #24]
  407dc4:	f041 0108 	orr.w	r1, r1, #8
  407dc8:	9106      	str	r1, [sp, #24]
  407dca:	4619      	mov	r1, r3
  407dcc:	781e      	ldrb	r6, [r3, #0]
  407dce:	e4f2      	b.n	4077b6 <_svfprintf_r+0xaa>
  407dd0:	9308      	str	r3, [sp, #32]
  407dd2:	46a4      	mov	ip, r4
  407dd4:	4b98      	ldr	r3, [pc, #608]	; (408038 <_svfprintf_r+0x92c>)
  407dd6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407dda:	9315      	str	r3, [sp, #84]	; 0x54
  407ddc:	9b06      	ldr	r3, [sp, #24]
  407dde:	069a      	lsls	r2, r3, #26
  407de0:	d4c0      	bmi.n	407d64 <_svfprintf_r+0x658>
  407de2:	9b06      	ldr	r3, [sp, #24]
  407de4:	06db      	lsls	r3, r3, #27
  407de6:	f140 83ec 	bpl.w	4085c2 <_svfprintf_r+0xeb6>
  407dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407dec:	2500      	movs	r5, #0
  407dee:	4613      	mov	r3, r2
  407df0:	6814      	ldr	r4, [r2, #0]
  407df2:	3304      	adds	r3, #4
  407df4:	930c      	str	r3, [sp, #48]	; 0x30
  407df6:	e7be      	b.n	407d76 <_svfprintf_r+0x66a>
  407df8:	781e      	ldrb	r6, [r3, #0]
  407dfa:	4619      	mov	r1, r3
  407dfc:	2a00      	cmp	r2, #0
  407dfe:	f47f acda 	bne.w	4077b6 <_svfprintf_r+0xaa>
  407e02:	2220      	movs	r2, #32
  407e04:	e4d7      	b.n	4077b6 <_svfprintf_r+0xaa>
  407e06:	9906      	ldr	r1, [sp, #24]
  407e08:	f041 0101 	orr.w	r1, r1, #1
  407e0c:	9106      	str	r1, [sp, #24]
  407e0e:	4619      	mov	r1, r3
  407e10:	781e      	ldrb	r6, [r3, #0]
  407e12:	e4d0      	b.n	4077b6 <_svfprintf_r+0xaa>
  407e14:	9906      	ldr	r1, [sp, #24]
  407e16:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  407e1a:	9106      	str	r1, [sp, #24]
  407e1c:	4619      	mov	r1, r3
  407e1e:	781e      	ldrb	r6, [r3, #0]
  407e20:	e4c9      	b.n	4077b6 <_svfprintf_r+0xaa>
  407e22:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407e26:	2100      	movs	r1, #0
  407e28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407e2c:	f813 6b01 	ldrb.w	r6, [r3], #1
  407e30:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  407e34:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  407e38:	2809      	cmp	r0, #9
  407e3a:	d9f5      	bls.n	407e28 <_svfprintf_r+0x71c>
  407e3c:	910b      	str	r1, [sp, #44]	; 0x2c
  407e3e:	e4bb      	b.n	4077b8 <_svfprintf_r+0xac>
  407e40:	9308      	str	r3, [sp, #32]
  407e42:	46a4      	mov	ip, r4
  407e44:	9b06      	ldr	r3, [sp, #24]
  407e46:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407e4a:	f043 0310 	orr.w	r3, r3, #16
  407e4e:	9306      	str	r3, [sp, #24]
  407e50:	9b06      	ldr	r3, [sp, #24]
  407e52:	069c      	lsls	r4, r3, #26
  407e54:	f53f aed7 	bmi.w	407c06 <_svfprintf_r+0x4fa>
  407e58:	9b06      	ldr	r3, [sp, #24]
  407e5a:	06d8      	lsls	r0, r3, #27
  407e5c:	f140 83d5 	bpl.w	40860a <_svfprintf_r+0xefe>
  407e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e62:	4613      	mov	r3, r2
  407e64:	681c      	ldr	r4, [r3, #0]
  407e66:	3304      	adds	r3, #4
  407e68:	17e5      	asrs	r5, r4, #31
  407e6a:	4622      	mov	r2, r4
  407e6c:	930c      	str	r3, [sp, #48]	; 0x30
  407e6e:	2a00      	cmp	r2, #0
  407e70:	462b      	mov	r3, r5
  407e72:	f173 0300 	sbcs.w	r3, r3, #0
  407e76:	f6bf aed6 	bge.w	407c26 <_svfprintf_r+0x51a>
  407e7a:	272d      	movs	r7, #45	; 0x2d
  407e7c:	4264      	negs	r4, r4
  407e7e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407e82:	f04f 0301 	mov.w	r3, #1
  407e86:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407e8a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407e8e:	e526      	b.n	4078de <_svfprintf_r+0x1d2>
  407e90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407e92:	9308      	str	r3, [sp, #32]
  407e94:	3707      	adds	r7, #7
  407e96:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407e9a:	f027 0307 	bic.w	r3, r7, #7
  407e9e:	f103 0208 	add.w	r2, r3, #8
  407ea2:	920c      	str	r2, [sp, #48]	; 0x30
  407ea4:	681a      	ldr	r2, [r3, #0]
  407ea6:	9213      	str	r2, [sp, #76]	; 0x4c
  407ea8:	685b      	ldr	r3, [r3, #4]
  407eaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407eac:	9314      	str	r3, [sp, #80]	; 0x50
  407eae:	9914      	ldr	r1, [sp, #80]	; 0x50
  407eb0:	9407      	str	r4, [sp, #28]
  407eb2:	f003 fd41 	bl	40b938 <__fpclassifyd>
  407eb6:	2801      	cmp	r0, #1
  407eb8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407ebc:	f040 8355 	bne.w	40856a <_svfprintf_r+0xe5e>
  407ec0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407ec2:	2200      	movs	r2, #0
  407ec4:	2300      	movs	r3, #0
  407ec6:	9914      	ldr	r1, [sp, #80]	; 0x50
  407ec8:	f004 fb9a 	bl	40c600 <__aeabi_dcmplt>
  407ecc:	2800      	cmp	r0, #0
  407ece:	f040 8582 	bne.w	4089d6 <_svfprintf_r+0x12ca>
  407ed2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407ed6:	2303      	movs	r3, #3
  407ed8:	9806      	ldr	r0, [sp, #24]
  407eda:	4a58      	ldr	r2, [pc, #352]	; (40803c <_svfprintf_r+0x930>)
  407edc:	2100      	movs	r1, #0
  407ede:	461c      	mov	r4, r3
  407ee0:	9307      	str	r3, [sp, #28]
  407ee2:	4b57      	ldr	r3, [pc, #348]	; (408040 <_svfprintf_r+0x934>)
  407ee4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  407ee8:	9110      	str	r1, [sp, #64]	; 0x40
  407eea:	2e47      	cmp	r6, #71	; 0x47
  407eec:	bfd8      	it	le
  407eee:	461a      	movle	r2, r3
  407ef0:	9006      	str	r0, [sp, #24]
  407ef2:	9111      	str	r1, [sp, #68]	; 0x44
  407ef4:	920f      	str	r2, [sp, #60]	; 0x3c
  407ef6:	e51c      	b.n	407932 <_svfprintf_r+0x226>
  407ef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  407efa:	2230      	movs	r2, #48	; 0x30
  407efc:	9806      	ldr	r0, [sp, #24]
  407efe:	46a4      	mov	ip, r4
  407f00:	4629      	mov	r1, r5
  407f02:	9308      	str	r3, [sp, #32]
  407f04:	2378      	movs	r3, #120	; 0x78
  407f06:	f040 0002 	orr.w	r0, r0, #2
  407f0a:	3104      	adds	r1, #4
  407f0c:	682c      	ldr	r4, [r5, #0]
  407f0e:	461e      	mov	r6, r3
  407f10:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  407f14:	4b48      	ldr	r3, [pc, #288]	; (408038 <_svfprintf_r+0x92c>)
  407f16:	2500      	movs	r5, #0
  407f18:	9006      	str	r0, [sp, #24]
  407f1a:	9315      	str	r3, [sp, #84]	; 0x54
  407f1c:	2302      	movs	r3, #2
  407f1e:	910c      	str	r1, [sp, #48]	; 0x30
  407f20:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407f24:	e4d5      	b.n	4078d2 <_svfprintf_r+0x1c6>
  407f26:	9308      	str	r3, [sp, #32]
  407f28:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407f2c:	2e00      	cmp	r6, #0
  407f2e:	f43f acab 	beq.w	407888 <_svfprintf_r+0x17c>
  407f32:	2300      	movs	r3, #0
  407f34:	2201      	movs	r2, #1
  407f36:	a926      	add	r1, sp, #152	; 0x98
  407f38:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  407f3c:	9207      	str	r2, [sp, #28]
  407f3e:	461f      	mov	r7, r3
  407f40:	910f      	str	r1, [sp, #60]	; 0x3c
  407f42:	4614      	mov	r4, r2
  407f44:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407f48:	9310      	str	r3, [sp, #64]	; 0x40
  407f4a:	9311      	str	r3, [sp, #68]	; 0x44
  407f4c:	e4f5      	b.n	40793a <_svfprintf_r+0x22e>
  407f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
  407f50:	4649      	mov	r1, r9
  407f52:	aa23      	add	r2, sp, #140	; 0x8c
  407f54:	f003 fd68 	bl	40ba28 <__ssprint_r>
  407f58:	2800      	cmp	r0, #0
  407f5a:	f47f ac9c 	bne.w	407896 <_svfprintf_r+0x18a>
  407f5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407f62:	46c3      	mov	fp, r8
  407f64:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407f68:	e53f      	b.n	4079ea <_svfprintf_r+0x2de>
  407f6a:	2e65      	cmp	r6, #101	; 0x65
  407f6c:	f340 80c9 	ble.w	408102 <_svfprintf_r+0x9f6>
  407f70:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407f72:	2200      	movs	r2, #0
  407f74:	2300      	movs	r3, #0
  407f76:	9914      	ldr	r1, [sp, #80]	; 0x50
  407f78:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  407f7c:	f004 fb36 	bl	40c5ec <__aeabi_dcmpeq>
  407f80:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  407f84:	2800      	cmp	r0, #0
  407f86:	f000 8165 	beq.w	408254 <_svfprintf_r+0xb48>
  407f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f8c:	2201      	movs	r2, #1
  407f8e:	f10c 0c01 	add.w	ip, ip, #1
  407f92:	492c      	ldr	r1, [pc, #176]	; (408044 <_svfprintf_r+0x938>)
  407f94:	4413      	add	r3, r2
  407f96:	f8cb 2004 	str.w	r2, [fp, #4]
  407f9a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407f9e:	2b07      	cmp	r3, #7
  407fa0:	f8cb 1000 	str.w	r1, [fp]
  407fa4:	9324      	str	r3, [sp, #144]	; 0x90
  407fa6:	f300 8343 	bgt.w	408630 <_svfprintf_r+0xf24>
  407faa:	f10b 0b08 	add.w	fp, fp, #8
  407fae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407fb2:	4293      	cmp	r3, r2
  407fb4:	db03      	blt.n	407fbe <_svfprintf_r+0x8b2>
  407fb6:	9b06      	ldr	r3, [sp, #24]
  407fb8:	07de      	lsls	r6, r3, #31
  407fba:	f57f ad92 	bpl.w	407ae2 <_svfprintf_r+0x3d6>
  407fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fc0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  407fc2:	3301      	adds	r3, #1
  407fc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407fc6:	448c      	add	ip, r1
  407fc8:	f8cb 1004 	str.w	r1, [fp, #4]
  407fcc:	2b07      	cmp	r3, #7
  407fce:	f8cb 2000 	str.w	r2, [fp]
  407fd2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407fd6:	9324      	str	r3, [sp, #144]	; 0x90
  407fd8:	f300 841d 	bgt.w	408816 <_svfprintf_r+0x110a>
  407fdc:	f10b 0b08 	add.w	fp, fp, #8
  407fe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407fe2:	1e5c      	subs	r4, r3, #1
  407fe4:	2c00      	cmp	r4, #0
  407fe6:	f77f ad7c 	ble.w	407ae2 <_svfprintf_r+0x3d6>
  407fea:	2c10      	cmp	r4, #16
  407fec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407fee:	f340 85bc 	ble.w	408b6a <_svfprintf_r+0x145e>
  407ff2:	2610      	movs	r6, #16
  407ff4:	4d14      	ldr	r5, [pc, #80]	; (408048 <_svfprintf_r+0x93c>)
  407ff6:	4662      	mov	r2, ip
  407ff8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  407ffa:	e003      	b.n	408004 <_svfprintf_r+0x8f8>
  407ffc:	3c10      	subs	r4, #16
  407ffe:	2c10      	cmp	r4, #16
  408000:	f340 81c8 	ble.w	408394 <_svfprintf_r+0xc88>
  408004:	3301      	adds	r3, #1
  408006:	3210      	adds	r2, #16
  408008:	f8cb 5000 	str.w	r5, [fp]
  40800c:	f10b 0b08 	add.w	fp, fp, #8
  408010:	2b07      	cmp	r3, #7
  408012:	f84b 6c04 	str.w	r6, [fp, #-4]
  408016:	9225      	str	r2, [sp, #148]	; 0x94
  408018:	9324      	str	r3, [sp, #144]	; 0x90
  40801a:	ddef      	ble.n	407ffc <_svfprintf_r+0x8f0>
  40801c:	4638      	mov	r0, r7
  40801e:	4649      	mov	r1, r9
  408020:	aa23      	add	r2, sp, #140	; 0x8c
  408022:	46c3      	mov	fp, r8
  408024:	f003 fd00 	bl	40ba28 <__ssprint_r>
  408028:	2800      	cmp	r0, #0
  40802a:	f47f ac34 	bne.w	407896 <_svfprintf_r+0x18a>
  40802e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408030:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408032:	e7e3      	b.n	407ffc <_svfprintf_r+0x8f0>
  408034:	0040d8d8 	.word	0x0040d8d8
  408038:	0040d8ec 	.word	0x0040d8ec
  40803c:	0040d8cc 	.word	0x0040d8cc
  408040:	0040d8c8 	.word	0x0040d8c8
  408044:	0040d908 	.word	0x0040d908
  408048:	0040d8a8 	.word	0x0040d8a8
  40804c:	2b01      	cmp	r3, #1
  40804e:	f000 814d 	beq.w	4082ec <_svfprintf_r+0xbe0>
  408052:	2b02      	cmp	r3, #2
  408054:	f040 80e3 	bne.w	40821e <_svfprintf_r+0xb12>
  408058:	46c2      	mov	sl, r8
  40805a:	9815      	ldr	r0, [sp, #84]	; 0x54
  40805c:	0923      	lsrs	r3, r4, #4
  40805e:	f004 010f 	and.w	r1, r4, #15
  408062:	092a      	lsrs	r2, r5, #4
  408064:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408068:	4615      	mov	r5, r2
  40806a:	461c      	mov	r4, r3
  40806c:	5c43      	ldrb	r3, [r0, r1]
  40806e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  408072:	ea54 0305 	orrs.w	r3, r4, r5
  408076:	d1f1      	bne.n	40805c <_svfprintf_r+0x950>
  408078:	4653      	mov	r3, sl
  40807a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40807e:	ebc3 0408 	rsb	r4, r3, r8
  408082:	e44f      	b.n	407924 <_svfprintf_r+0x218>
  408084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408086:	9a07      	ldr	r2, [sp, #28]
  408088:	1a9f      	subs	r7, r3, r2
  40808a:	2f00      	cmp	r7, #0
  40808c:	f77f acd9 	ble.w	407a42 <_svfprintf_r+0x336>
  408090:	2f10      	cmp	r7, #16
  408092:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408094:	f340 84f9 	ble.w	408a8a <_svfprintf_r+0x137e>
  408098:	940d      	str	r4, [sp, #52]	; 0x34
  40809a:	f04f 0a10 	mov.w	sl, #16
  40809e:	4dc8      	ldr	r5, [pc, #800]	; (4083c0 <_svfprintf_r+0xcb4>)
  4080a0:	4662      	mov	r2, ip
  4080a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4080a4:	e002      	b.n	4080ac <_svfprintf_r+0x9a0>
  4080a6:	3f10      	subs	r7, #16
  4080a8:	2f10      	cmp	r7, #16
  4080aa:	dd19      	ble.n	4080e0 <_svfprintf_r+0x9d4>
  4080ac:	3301      	adds	r3, #1
  4080ae:	3210      	adds	r2, #16
  4080b0:	f8cb 5000 	str.w	r5, [fp]
  4080b4:	f10b 0b08 	add.w	fp, fp, #8
  4080b8:	2b07      	cmp	r3, #7
  4080ba:	f84b ac04 	str.w	sl, [fp, #-4]
  4080be:	9225      	str	r2, [sp, #148]	; 0x94
  4080c0:	9324      	str	r3, [sp, #144]	; 0x90
  4080c2:	ddf0      	ble.n	4080a6 <_svfprintf_r+0x99a>
  4080c4:	4620      	mov	r0, r4
  4080c6:	4649      	mov	r1, r9
  4080c8:	aa23      	add	r2, sp, #140	; 0x8c
  4080ca:	46c3      	mov	fp, r8
  4080cc:	f003 fcac 	bl	40ba28 <__ssprint_r>
  4080d0:	2800      	cmp	r0, #0
  4080d2:	f47f abe0 	bne.w	407896 <_svfprintf_r+0x18a>
  4080d6:	3f10      	subs	r7, #16
  4080d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080dc:	2f10      	cmp	r7, #16
  4080de:	dce5      	bgt.n	4080ac <_svfprintf_r+0x9a0>
  4080e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4080e2:	4694      	mov	ip, r2
  4080e4:	3301      	adds	r3, #1
  4080e6:	44bc      	add	ip, r7
  4080e8:	f8cb 5000 	str.w	r5, [fp]
  4080ec:	2b07      	cmp	r3, #7
  4080ee:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4080f2:	9324      	str	r3, [sp, #144]	; 0x90
  4080f4:	f8cb 7004 	str.w	r7, [fp, #4]
  4080f8:	f300 81fc 	bgt.w	4084f4 <_svfprintf_r+0xde8>
  4080fc:	f10b 0b08 	add.w	fp, fp, #8
  408100:	e49f      	b.n	407a42 <_svfprintf_r+0x336>
  408102:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408104:	f10c 0601 	add.w	r6, ip, #1
  408108:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40810a:	2b01      	cmp	r3, #1
  40810c:	f340 81c9 	ble.w	4084a2 <_svfprintf_r+0xd96>
  408110:	2301      	movs	r3, #1
  408112:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408114:	9625      	str	r6, [sp, #148]	; 0x94
  408116:	441c      	add	r4, r3
  408118:	f8cb 2000 	str.w	r2, [fp]
  40811c:	f8cb 3004 	str.w	r3, [fp, #4]
  408120:	2c07      	cmp	r4, #7
  408122:	9424      	str	r4, [sp, #144]	; 0x90
  408124:	f300 81da 	bgt.w	4084dc <_svfprintf_r+0xdd0>
  408128:	f10b 0b08 	add.w	fp, fp, #8
  40812c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40812e:	3401      	adds	r4, #1
  408130:	9b16      	ldr	r3, [sp, #88]	; 0x58
  408132:	4416      	add	r6, r2
  408134:	2c07      	cmp	r4, #7
  408136:	f8cb 3000 	str.w	r3, [fp]
  40813a:	9625      	str	r6, [sp, #148]	; 0x94
  40813c:	9424      	str	r4, [sp, #144]	; 0x90
  40813e:	f8cb 2004 	str.w	r2, [fp, #4]
  408142:	f300 81bf 	bgt.w	4084c4 <_svfprintf_r+0xdb8>
  408146:	f10b 0b08 	add.w	fp, fp, #8
  40814a:	2300      	movs	r3, #0
  40814c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40814e:	2200      	movs	r2, #0
  408150:	9914      	ldr	r1, [sp, #80]	; 0x50
  408152:	f004 fa4b 	bl	40c5ec <__aeabi_dcmpeq>
  408156:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408158:	2800      	cmp	r0, #0
  40815a:	f040 80dc 	bne.w	408316 <_svfprintf_r+0xc0a>
  40815e:	3b01      	subs	r3, #1
  408160:	3401      	adds	r4, #1
  408162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408164:	441e      	add	r6, r3
  408166:	2c07      	cmp	r4, #7
  408168:	f102 0201 	add.w	r2, r2, #1
  40816c:	9424      	str	r4, [sp, #144]	; 0x90
  40816e:	9625      	str	r6, [sp, #148]	; 0x94
  408170:	f8cb 2000 	str.w	r2, [fp]
  408174:	f8cb 3004 	str.w	r3, [fp, #4]
  408178:	f300 8100 	bgt.w	40837c <_svfprintf_r+0xc70>
  40817c:	f10b 0b08 	add.w	fp, fp, #8
  408180:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408182:	3401      	adds	r4, #1
  408184:	ab1f      	add	r3, sp, #124	; 0x7c
  408186:	eb06 0c02 	add.w	ip, r6, r2
  40818a:	2c07      	cmp	r4, #7
  40818c:	f8cb 2004 	str.w	r2, [fp, #4]
  408190:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408194:	9424      	str	r4, [sp, #144]	; 0x90
  408196:	f8cb 3000 	str.w	r3, [fp]
  40819a:	f77f aca0 	ble.w	407ade <_svfprintf_r+0x3d2>
  40819e:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081a0:	4649      	mov	r1, r9
  4081a2:	aa23      	add	r2, sp, #140	; 0x8c
  4081a4:	f003 fc40 	bl	40ba28 <__ssprint_r>
  4081a8:	2800      	cmp	r0, #0
  4081aa:	f47f ab74 	bne.w	407896 <_svfprintf_r+0x18a>
  4081ae:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4081b2:	46c3      	mov	fp, r8
  4081b4:	e495      	b.n	407ae2 <_svfprintf_r+0x3d6>
  4081b6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081b8:	4649      	mov	r1, r9
  4081ba:	aa23      	add	r2, sp, #140	; 0x8c
  4081bc:	f003 fc34 	bl	40ba28 <__ssprint_r>
  4081c0:	2800      	cmp	r0, #0
  4081c2:	f43f acde 	beq.w	407b82 <_svfprintf_r+0x476>
  4081c6:	f7ff bb66 	b.w	407896 <_svfprintf_r+0x18a>
  4081ca:	4614      	mov	r4, r2
  4081cc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4081d0:	f7ff bba8 	b.w	407924 <_svfprintf_r+0x218>
  4081d4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081d6:	4649      	mov	r1, r9
  4081d8:	aa23      	add	r2, sp, #140	; 0x8c
  4081da:	f003 fc25 	bl	40ba28 <__ssprint_r>
  4081de:	2800      	cmp	r0, #0
  4081e0:	f47f ab59 	bne.w	407896 <_svfprintf_r+0x18a>
  4081e4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4081e8:	46c3      	mov	fp, r8
  4081ea:	e466      	b.n	407aba <_svfprintf_r+0x3ae>
  4081ec:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081ee:	4649      	mov	r1, r9
  4081f0:	aa23      	add	r2, sp, #140	; 0x8c
  4081f2:	f003 fc19 	bl	40ba28 <__ssprint_r>
  4081f6:	2800      	cmp	r0, #0
  4081f8:	f47f ab4d 	bne.w	407896 <_svfprintf_r+0x18a>
  4081fc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408200:	46c3      	mov	fp, r8
  408202:	e41a      	b.n	407a3a <_svfprintf_r+0x32e>
  408204:	9809      	ldr	r0, [sp, #36]	; 0x24
  408206:	4649      	mov	r1, r9
  408208:	aa23      	add	r2, sp, #140	; 0x8c
  40820a:	f003 fc0d 	bl	40ba28 <__ssprint_r>
  40820e:	2800      	cmp	r0, #0
  408210:	f47f ab41 	bne.w	407896 <_svfprintf_r+0x18a>
  408214:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408218:	46c3      	mov	fp, r8
  40821a:	f7ff bbfa 	b.w	407a12 <_svfprintf_r+0x306>
  40821e:	4641      	mov	r1, r8
  408220:	08e2      	lsrs	r2, r4, #3
  408222:	f004 0307 	and.w	r3, r4, #7
  408226:	08e8      	lsrs	r0, r5, #3
  408228:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40822c:	3330      	adds	r3, #48	; 0x30
  40822e:	4605      	mov	r5, r0
  408230:	4614      	mov	r4, r2
  408232:	f801 3d01 	strb.w	r3, [r1, #-1]!
  408236:	ea54 0205 	orrs.w	r2, r4, r5
  40823a:	d1f1      	bne.n	408220 <_svfprintf_r+0xb14>
  40823c:	9a06      	ldr	r2, [sp, #24]
  40823e:	910f      	str	r1, [sp, #60]	; 0x3c
  408240:	07d0      	lsls	r0, r2, #31
  408242:	f100 8164 	bmi.w	40850e <_svfprintf_r+0xe02>
  408246:	ebc1 0408 	rsb	r4, r1, r8
  40824a:	f7ff bb6b 	b.w	407924 <_svfprintf_r+0x218>
  40824e:	2302      	movs	r3, #2
  408250:	f7ff bb3f 	b.w	4078d2 <_svfprintf_r+0x1c6>
  408254:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408256:	2c00      	cmp	r4, #0
  408258:	f340 81f6 	ble.w	408648 <_svfprintf_r+0xf3c>
  40825c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40825e:	9911      	ldr	r1, [sp, #68]	; 0x44
  408260:	4613      	mov	r3, r2
  408262:	428a      	cmp	r2, r1
  408264:	bfa8      	it	ge
  408266:	460b      	movge	r3, r1
  408268:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40826a:	461c      	mov	r4, r3
  40826c:	188f      	adds	r7, r1, r2
  40826e:	2c00      	cmp	r4, #0
  408270:	dd0e      	ble.n	408290 <_svfprintf_r+0xb84>
  408272:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408274:	44a4      	add	ip, r4
  408276:	f8cb 1000 	str.w	r1, [fp]
  40827a:	3301      	adds	r3, #1
  40827c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408280:	f8cb 4004 	str.w	r4, [fp, #4]
  408284:	2b07      	cmp	r3, #7
  408286:	9324      	str	r3, [sp, #144]	; 0x90
  408288:	f300 8353 	bgt.w	408932 <_svfprintf_r+0x1226>
  40828c:	f10b 0b08 	add.w	fp, fp, #8
  408290:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408292:	2c00      	cmp	r4, #0
  408294:	bfa8      	it	ge
  408296:	1b1b      	subge	r3, r3, r4
  408298:	2b00      	cmp	r3, #0
  40829a:	461c      	mov	r4, r3
  40829c:	f340 80a1 	ble.w	4083e2 <_svfprintf_r+0xcd6>
  4082a0:	2c10      	cmp	r4, #16
  4082a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082a4:	f340 846c 	ble.w	408b80 <_svfprintf_r+0x1474>
  4082a8:	2610      	movs	r6, #16
  4082aa:	4d45      	ldr	r5, [pc, #276]	; (4083c0 <_svfprintf_r+0xcb4>)
  4082ac:	4662      	mov	r2, ip
  4082ae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4082b2:	e003      	b.n	4082bc <_svfprintf_r+0xbb0>
  4082b4:	3c10      	subs	r4, #16
  4082b6:	2c10      	cmp	r4, #16
  4082b8:	f340 8084 	ble.w	4083c4 <_svfprintf_r+0xcb8>
  4082bc:	3301      	adds	r3, #1
  4082be:	3210      	adds	r2, #16
  4082c0:	f8cb 5000 	str.w	r5, [fp]
  4082c4:	f10b 0b08 	add.w	fp, fp, #8
  4082c8:	2b07      	cmp	r3, #7
  4082ca:	f84b 6c04 	str.w	r6, [fp, #-4]
  4082ce:	9225      	str	r2, [sp, #148]	; 0x94
  4082d0:	9324      	str	r3, [sp, #144]	; 0x90
  4082d2:	ddef      	ble.n	4082b4 <_svfprintf_r+0xba8>
  4082d4:	4650      	mov	r0, sl
  4082d6:	4649      	mov	r1, r9
  4082d8:	aa23      	add	r2, sp, #140	; 0x8c
  4082da:	46c3      	mov	fp, r8
  4082dc:	f003 fba4 	bl	40ba28 <__ssprint_r>
  4082e0:	2800      	cmp	r0, #0
  4082e2:	f47f aad8 	bne.w	407896 <_svfprintf_r+0x18a>
  4082e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4082e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082ea:	e7e3      	b.n	4082b4 <_svfprintf_r+0xba8>
  4082ec:	2d00      	cmp	r5, #0
  4082ee:	bf08      	it	eq
  4082f0:	2c0a      	cmpeq	r4, #10
  4082f2:	f080 811a 	bcs.w	40852a <_svfprintf_r+0xe1e>
  4082f6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4082fa:	3430      	adds	r4, #48	; 0x30
  4082fc:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  408300:	ebca 0408 	rsb	r4, sl, r8
  408304:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  408308:	f7ff bb0c 	b.w	407924 <_svfprintf_r+0x218>
  40830c:	461c      	mov	r4, r3
  40830e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  408312:	f7ff bb07 	b.w	407924 <_svfprintf_r+0x218>
  408316:	1e5f      	subs	r7, r3, #1
  408318:	2f00      	cmp	r7, #0
  40831a:	f77f af31 	ble.w	408180 <_svfprintf_r+0xa74>
  40831e:	2f10      	cmp	r7, #16
  408320:	4d27      	ldr	r5, [pc, #156]	; (4083c0 <_svfprintf_r+0xcb4>)
  408322:	bfc8      	it	gt
  408324:	f04f 0a10 	movgt.w	sl, #16
  408328:	dc03      	bgt.n	408332 <_svfprintf_r+0xc26>
  40832a:	e01c      	b.n	408366 <_svfprintf_r+0xc5a>
  40832c:	3f10      	subs	r7, #16
  40832e:	2f10      	cmp	r7, #16
  408330:	dd19      	ble.n	408366 <_svfprintf_r+0xc5a>
  408332:	3401      	adds	r4, #1
  408334:	3610      	adds	r6, #16
  408336:	f8cb 5000 	str.w	r5, [fp]
  40833a:	f10b 0b08 	add.w	fp, fp, #8
  40833e:	2c07      	cmp	r4, #7
  408340:	f84b ac04 	str.w	sl, [fp, #-4]
  408344:	9625      	str	r6, [sp, #148]	; 0x94
  408346:	9424      	str	r4, [sp, #144]	; 0x90
  408348:	ddf0      	ble.n	40832c <_svfprintf_r+0xc20>
  40834a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40834c:	4649      	mov	r1, r9
  40834e:	aa23      	add	r2, sp, #140	; 0x8c
  408350:	46c3      	mov	fp, r8
  408352:	f003 fb69 	bl	40ba28 <__ssprint_r>
  408356:	2800      	cmp	r0, #0
  408358:	f47f aa9d 	bne.w	407896 <_svfprintf_r+0x18a>
  40835c:	3f10      	subs	r7, #16
  40835e:	9e25      	ldr	r6, [sp, #148]	; 0x94
  408360:	9c24      	ldr	r4, [sp, #144]	; 0x90
  408362:	2f10      	cmp	r7, #16
  408364:	dce5      	bgt.n	408332 <_svfprintf_r+0xc26>
  408366:	3401      	adds	r4, #1
  408368:	443e      	add	r6, r7
  40836a:	f8cb 5000 	str.w	r5, [fp]
  40836e:	2c07      	cmp	r4, #7
  408370:	9625      	str	r6, [sp, #148]	; 0x94
  408372:	9424      	str	r4, [sp, #144]	; 0x90
  408374:	f8cb 7004 	str.w	r7, [fp, #4]
  408378:	f77f af00 	ble.w	40817c <_svfprintf_r+0xa70>
  40837c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40837e:	4649      	mov	r1, r9
  408380:	aa23      	add	r2, sp, #140	; 0x8c
  408382:	f003 fb51 	bl	40ba28 <__ssprint_r>
  408386:	2800      	cmp	r0, #0
  408388:	f47f aa85 	bne.w	407896 <_svfprintf_r+0x18a>
  40838c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40838e:	46c3      	mov	fp, r8
  408390:	9c24      	ldr	r4, [sp, #144]	; 0x90
  408392:	e6f5      	b.n	408180 <_svfprintf_r+0xa74>
  408394:	4694      	mov	ip, r2
  408396:	3301      	adds	r3, #1
  408398:	44a4      	add	ip, r4
  40839a:	f8cb 5000 	str.w	r5, [fp]
  40839e:	2b07      	cmp	r3, #7
  4083a0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4083a4:	9324      	str	r3, [sp, #144]	; 0x90
  4083a6:	f8cb 4004 	str.w	r4, [fp, #4]
  4083aa:	f77f ab98 	ble.w	407ade <_svfprintf_r+0x3d2>
  4083ae:	e6f6      	b.n	40819e <_svfprintf_r+0xa92>
  4083b0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4083b2:	2500      	movs	r5, #0
  4083b4:	460a      	mov	r2, r1
  4083b6:	680c      	ldr	r4, [r1, #0]
  4083b8:	3204      	adds	r2, #4
  4083ba:	920c      	str	r2, [sp, #48]	; 0x30
  4083bc:	f7ff ba89 	b.w	4078d2 <_svfprintf_r+0x1c6>
  4083c0:	0040d8a8 	.word	0x0040d8a8
  4083c4:	4694      	mov	ip, r2
  4083c6:	3301      	adds	r3, #1
  4083c8:	44a4      	add	ip, r4
  4083ca:	f8cb 5000 	str.w	r5, [fp]
  4083ce:	2b07      	cmp	r3, #7
  4083d0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4083d4:	9324      	str	r3, [sp, #144]	; 0x90
  4083d6:	f8cb 4004 	str.w	r4, [fp, #4]
  4083da:	f300 82df 	bgt.w	40899c <_svfprintf_r+0x1290>
  4083de:	f10b 0b08 	add.w	fp, fp, #8
  4083e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4083e4:	9911      	ldr	r1, [sp, #68]	; 0x44
  4083e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4083e8:	440a      	add	r2, r1
  4083ea:	4616      	mov	r6, r2
  4083ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4083ee:	4293      	cmp	r3, r2
  4083f0:	db45      	blt.n	40847e <_svfprintf_r+0xd72>
  4083f2:	9a06      	ldr	r2, [sp, #24]
  4083f4:	07d0      	lsls	r0, r2, #31
  4083f6:	d442      	bmi.n	40847e <_svfprintf_r+0xd72>
  4083f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4083fa:	1bbc      	subs	r4, r7, r6
  4083fc:	1ad3      	subs	r3, r2, r3
  4083fe:	429c      	cmp	r4, r3
  408400:	bfa8      	it	ge
  408402:	461c      	movge	r4, r3
  408404:	2c00      	cmp	r4, #0
  408406:	4625      	mov	r5, r4
  408408:	dd0e      	ble.n	408428 <_svfprintf_r+0xd1c>
  40840a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40840c:	44a4      	add	ip, r4
  40840e:	f8cb 6000 	str.w	r6, [fp]
  408412:	3201      	adds	r2, #1
  408414:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408418:	f8cb 4004 	str.w	r4, [fp, #4]
  40841c:	2a07      	cmp	r2, #7
  40841e:	9224      	str	r2, [sp, #144]	; 0x90
  408420:	f300 82a0 	bgt.w	408964 <_svfprintf_r+0x1258>
  408424:	f10b 0b08 	add.w	fp, fp, #8
  408428:	2d00      	cmp	r5, #0
  40842a:	bfac      	ite	ge
  40842c:	1b5c      	subge	r4, r3, r5
  40842e:	461c      	movlt	r4, r3
  408430:	2c00      	cmp	r4, #0
  408432:	f77f ab56 	ble.w	407ae2 <_svfprintf_r+0x3d6>
  408436:	2c10      	cmp	r4, #16
  408438:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40843a:	f340 8396 	ble.w	408b6a <_svfprintf_r+0x145e>
  40843e:	2610      	movs	r6, #16
  408440:	4db1      	ldr	r5, [pc, #708]	; (408708 <_svfprintf_r+0xffc>)
  408442:	4662      	mov	r2, ip
  408444:	9f09      	ldr	r7, [sp, #36]	; 0x24
  408446:	e002      	b.n	40844e <_svfprintf_r+0xd42>
  408448:	3c10      	subs	r4, #16
  40844a:	2c10      	cmp	r4, #16
  40844c:	dda2      	ble.n	408394 <_svfprintf_r+0xc88>
  40844e:	3301      	adds	r3, #1
  408450:	3210      	adds	r2, #16
  408452:	f8cb 5000 	str.w	r5, [fp]
  408456:	f10b 0b08 	add.w	fp, fp, #8
  40845a:	2b07      	cmp	r3, #7
  40845c:	f84b 6c04 	str.w	r6, [fp, #-4]
  408460:	9225      	str	r2, [sp, #148]	; 0x94
  408462:	9324      	str	r3, [sp, #144]	; 0x90
  408464:	ddf0      	ble.n	408448 <_svfprintf_r+0xd3c>
  408466:	4638      	mov	r0, r7
  408468:	4649      	mov	r1, r9
  40846a:	aa23      	add	r2, sp, #140	; 0x8c
  40846c:	46c3      	mov	fp, r8
  40846e:	f003 fadb 	bl	40ba28 <__ssprint_r>
  408472:	2800      	cmp	r0, #0
  408474:	f47f aa0f 	bne.w	407896 <_svfprintf_r+0x18a>
  408478:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40847a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40847c:	e7e4      	b.n	408448 <_svfprintf_r+0xd3c>
  40847e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408480:	9817      	ldr	r0, [sp, #92]	; 0x5c
  408482:	3201      	adds	r2, #1
  408484:	9916      	ldr	r1, [sp, #88]	; 0x58
  408486:	4484      	add	ip, r0
  408488:	f8cb 0004 	str.w	r0, [fp, #4]
  40848c:	2a07      	cmp	r2, #7
  40848e:	f8cb 1000 	str.w	r1, [fp]
  408492:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408496:	9224      	str	r2, [sp, #144]	; 0x90
  408498:	f300 8273 	bgt.w	408982 <_svfprintf_r+0x1276>
  40849c:	f10b 0b08 	add.w	fp, fp, #8
  4084a0:	e7aa      	b.n	4083f8 <_svfprintf_r+0xcec>
  4084a2:	9b06      	ldr	r3, [sp, #24]
  4084a4:	07d9      	lsls	r1, r3, #31
  4084a6:	f53f ae33 	bmi.w	408110 <_svfprintf_r+0xa04>
  4084aa:	2301      	movs	r3, #1
  4084ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4084ae:	9625      	str	r6, [sp, #148]	; 0x94
  4084b0:	441c      	add	r4, r3
  4084b2:	f8cb 2000 	str.w	r2, [fp]
  4084b6:	f8cb 3004 	str.w	r3, [fp, #4]
  4084ba:	2c07      	cmp	r4, #7
  4084bc:	9424      	str	r4, [sp, #144]	; 0x90
  4084be:	f77f ae5d 	ble.w	40817c <_svfprintf_r+0xa70>
  4084c2:	e75b      	b.n	40837c <_svfprintf_r+0xc70>
  4084c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4084c6:	4649      	mov	r1, r9
  4084c8:	aa23      	add	r2, sp, #140	; 0x8c
  4084ca:	f003 faad 	bl	40ba28 <__ssprint_r>
  4084ce:	2800      	cmp	r0, #0
  4084d0:	f47f a9e1 	bne.w	407896 <_svfprintf_r+0x18a>
  4084d4:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4084d6:	46c3      	mov	fp, r8
  4084d8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4084da:	e636      	b.n	40814a <_svfprintf_r+0xa3e>
  4084dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4084de:	4649      	mov	r1, r9
  4084e0:	aa23      	add	r2, sp, #140	; 0x8c
  4084e2:	f003 faa1 	bl	40ba28 <__ssprint_r>
  4084e6:	2800      	cmp	r0, #0
  4084e8:	f47f a9d5 	bne.w	407896 <_svfprintf_r+0x18a>
  4084ec:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4084ee:	46c3      	mov	fp, r8
  4084f0:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4084f2:	e61b      	b.n	40812c <_svfprintf_r+0xa20>
  4084f4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4084f6:	4649      	mov	r1, r9
  4084f8:	aa23      	add	r2, sp, #140	; 0x8c
  4084fa:	f003 fa95 	bl	40ba28 <__ssprint_r>
  4084fe:	2800      	cmp	r0, #0
  408500:	f47f a9c9 	bne.w	407896 <_svfprintf_r+0x18a>
  408504:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408508:	46c3      	mov	fp, r8
  40850a:	f7ff ba9a 	b.w	407a42 <_svfprintf_r+0x336>
  40850e:	2b30      	cmp	r3, #48	; 0x30
  408510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408512:	f43f adb4 	beq.w	40807e <_svfprintf_r+0x972>
  408516:	3b01      	subs	r3, #1
  408518:	461a      	mov	r2, r3
  40851a:	930f      	str	r3, [sp, #60]	; 0x3c
  40851c:	2330      	movs	r3, #48	; 0x30
  40851e:	ebc2 0408 	rsb	r4, r2, r8
  408522:	f801 3c01 	strb.w	r3, [r1, #-1]
  408526:	f7ff b9fd 	b.w	407924 <_svfprintf_r+0x218>
  40852a:	46c2      	mov	sl, r8
  40852c:	f8cd c01c 	str.w	ip, [sp, #28]
  408530:	4620      	mov	r0, r4
  408532:	4629      	mov	r1, r5
  408534:	220a      	movs	r2, #10
  408536:	2300      	movs	r3, #0
  408538:	f004 f8b2 	bl	40c6a0 <__aeabi_uldivmod>
  40853c:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  408540:	4620      	mov	r0, r4
  408542:	4629      	mov	r1, r5
  408544:	2300      	movs	r3, #0
  408546:	220a      	movs	r2, #10
  408548:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40854c:	f004 f8a8 	bl	40c6a0 <__aeabi_uldivmod>
  408550:	4604      	mov	r4, r0
  408552:	460d      	mov	r5, r1
  408554:	ea54 0305 	orrs.w	r3, r4, r5
  408558:	d1ea      	bne.n	408530 <_svfprintf_r+0xe24>
  40855a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40855e:	ebca 0408 	rsb	r4, sl, r8
  408562:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  408566:	f7ff b9dd 	b.w	407924 <_svfprintf_r+0x218>
  40856a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40856c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40856e:	f8cd c01c 	str.w	ip, [sp, #28]
  408572:	f003 f9e1 	bl	40b938 <__fpclassifyd>
  408576:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40857a:	2800      	cmp	r0, #0
  40857c:	f040 80cc 	bne.w	408718 <_svfprintf_r+0x100c>
  408580:	9c06      	ldr	r4, [sp, #24]
  408582:	2103      	movs	r1, #3
  408584:	4a61      	ldr	r2, [pc, #388]	; (40870c <_svfprintf_r+0x1000>)
  408586:	4b62      	ldr	r3, [pc, #392]	; (408710 <_svfprintf_r+0x1004>)
  408588:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40858c:	9010      	str	r0, [sp, #64]	; 0x40
  40858e:	2e47      	cmp	r6, #71	; 0x47
  408590:	bfd8      	it	le
  408592:	461a      	movle	r2, r3
  408594:	9406      	str	r4, [sp, #24]
  408596:	9107      	str	r1, [sp, #28]
  408598:	460c      	mov	r4, r1
  40859a:	9011      	str	r0, [sp, #68]	; 0x44
  40859c:	920f      	str	r2, [sp, #60]	; 0x3c
  40859e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4085a2:	f7ff b9c6 	b.w	407932 <_svfprintf_r+0x226>
  4085a6:	9b06      	ldr	r3, [sp, #24]
  4085a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4085ae:	4613      	mov	r3, r2
  4085b0:	f43f abc9 	beq.w	407d46 <_svfprintf_r+0x63a>
  4085b4:	8814      	ldrh	r4, [r2, #0]
  4085b6:	3204      	adds	r2, #4
  4085b8:	2500      	movs	r5, #0
  4085ba:	2301      	movs	r3, #1
  4085bc:	920c      	str	r2, [sp, #48]	; 0x30
  4085be:	f7ff b988 	b.w	4078d2 <_svfprintf_r+0x1c6>
  4085c2:	9b06      	ldr	r3, [sp, #24]
  4085c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085c6:	f013 0f40 	tst.w	r3, #64	; 0x40
  4085ca:	4613      	mov	r3, r2
  4085cc:	f000 8130 	beq.w	408830 <_svfprintf_r+0x1124>
  4085d0:	3304      	adds	r3, #4
  4085d2:	8814      	ldrh	r4, [r2, #0]
  4085d4:	2500      	movs	r5, #0
  4085d6:	930c      	str	r3, [sp, #48]	; 0x30
  4085d8:	f7ff bbcd 	b.w	407d76 <_svfprintf_r+0x66a>
  4085dc:	9b06      	ldr	r3, [sp, #24]
  4085de:	06dd      	lsls	r5, r3, #27
  4085e0:	d40b      	bmi.n	4085fa <_svfprintf_r+0xeee>
  4085e2:	9b06      	ldr	r3, [sp, #24]
  4085e4:	065c      	lsls	r4, r3, #25
  4085e6:	d508      	bpl.n	4085fa <_svfprintf_r+0xeee>
  4085e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085ea:	6813      	ldr	r3, [r2, #0]
  4085ec:	3204      	adds	r2, #4
  4085ee:	920c      	str	r2, [sp, #48]	; 0x30
  4085f0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  4085f4:	801a      	strh	r2, [r3, #0]
  4085f6:	f7ff b8af 	b.w	407758 <_svfprintf_r+0x4c>
  4085fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085fc:	6813      	ldr	r3, [r2, #0]
  4085fe:	3204      	adds	r2, #4
  408600:	920c      	str	r2, [sp, #48]	; 0x30
  408602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408604:	601a      	str	r2, [r3, #0]
  408606:	f7ff b8a7 	b.w	407758 <_svfprintf_r+0x4c>
  40860a:	9b06      	ldr	r3, [sp, #24]
  40860c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40860e:	f013 0f40 	tst.w	r3, #64	; 0x40
  408612:	4613      	mov	r3, r2
  408614:	f43f ac26 	beq.w	407e64 <_svfprintf_r+0x758>
  408618:	f9b2 4000 	ldrsh.w	r4, [r2]
  40861c:	3304      	adds	r3, #4
  40861e:	17e5      	asrs	r5, r4, #31
  408620:	930c      	str	r3, [sp, #48]	; 0x30
  408622:	4622      	mov	r2, r4
  408624:	462b      	mov	r3, r5
  408626:	f7ff baf9 	b.w	407c1c <_svfprintf_r+0x510>
  40862a:	4d37      	ldr	r5, [pc, #220]	; (408708 <_svfprintf_r+0xffc>)
  40862c:	f7ff ba37 	b.w	407a9e <_svfprintf_r+0x392>
  408630:	9809      	ldr	r0, [sp, #36]	; 0x24
  408632:	4649      	mov	r1, r9
  408634:	aa23      	add	r2, sp, #140	; 0x8c
  408636:	f003 f9f7 	bl	40ba28 <__ssprint_r>
  40863a:	2800      	cmp	r0, #0
  40863c:	f47f a92b 	bne.w	407896 <_svfprintf_r+0x18a>
  408640:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408644:	46c3      	mov	fp, r8
  408646:	e4b2      	b.n	407fae <_svfprintf_r+0x8a2>
  408648:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40864a:	2201      	movs	r2, #1
  40864c:	f10c 0c01 	add.w	ip, ip, #1
  408650:	4930      	ldr	r1, [pc, #192]	; (408714 <_svfprintf_r+0x1008>)
  408652:	4413      	add	r3, r2
  408654:	f8cb 2004 	str.w	r2, [fp, #4]
  408658:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40865c:	2b07      	cmp	r3, #7
  40865e:	f8cb 1000 	str.w	r1, [fp]
  408662:	9324      	str	r3, [sp, #144]	; 0x90
  408664:	f300 80fa 	bgt.w	40885c <_svfprintf_r+0x1150>
  408668:	f10b 0b08 	add.w	fp, fp, #8
  40866c:	b92c      	cbnz	r4, 40867a <_svfprintf_r+0xf6e>
  40866e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408670:	b91b      	cbnz	r3, 40867a <_svfprintf_r+0xf6e>
  408672:	9b06      	ldr	r3, [sp, #24]
  408674:	07dd      	lsls	r5, r3, #31
  408676:	f57f aa34 	bpl.w	407ae2 <_svfprintf_r+0x3d6>
  40867a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40867c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40867e:	3301      	adds	r3, #1
  408680:	9816      	ldr	r0, [sp, #88]	; 0x58
  408682:	eb0c 0201 	add.w	r2, ip, r1
  408686:	f8cb 1004 	str.w	r1, [fp, #4]
  40868a:	2b07      	cmp	r3, #7
  40868c:	f8cb 0000 	str.w	r0, [fp]
  408690:	9225      	str	r2, [sp, #148]	; 0x94
  408692:	9324      	str	r3, [sp, #144]	; 0x90
  408694:	f300 824c 	bgt.w	408b30 <_svfprintf_r+0x1424>
  408698:	f10b 0b08 	add.w	fp, fp, #8
  40869c:	4264      	negs	r4, r4
  40869e:	2c00      	cmp	r4, #0
  4086a0:	f340 8126 	ble.w	4088f0 <_svfprintf_r+0x11e4>
  4086a4:	2c10      	cmp	r4, #16
  4086a6:	4d18      	ldr	r5, [pc, #96]	; (408708 <_svfprintf_r+0xffc>)
  4086a8:	f340 814f 	ble.w	40894a <_svfprintf_r+0x123e>
  4086ac:	2610      	movs	r6, #16
  4086ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4086b0:	e003      	b.n	4086ba <_svfprintf_r+0xfae>
  4086b2:	3c10      	subs	r4, #16
  4086b4:	2c10      	cmp	r4, #16
  4086b6:	f340 8148 	ble.w	40894a <_svfprintf_r+0x123e>
  4086ba:	3301      	adds	r3, #1
  4086bc:	3210      	adds	r2, #16
  4086be:	f8cb 5000 	str.w	r5, [fp]
  4086c2:	f10b 0b08 	add.w	fp, fp, #8
  4086c6:	2b07      	cmp	r3, #7
  4086c8:	f84b 6c04 	str.w	r6, [fp, #-4]
  4086cc:	9225      	str	r2, [sp, #148]	; 0x94
  4086ce:	9324      	str	r3, [sp, #144]	; 0x90
  4086d0:	ddef      	ble.n	4086b2 <_svfprintf_r+0xfa6>
  4086d2:	4638      	mov	r0, r7
  4086d4:	4649      	mov	r1, r9
  4086d6:	aa23      	add	r2, sp, #140	; 0x8c
  4086d8:	46c3      	mov	fp, r8
  4086da:	f003 f9a5 	bl	40ba28 <__ssprint_r>
  4086de:	2800      	cmp	r0, #0
  4086e0:	f47f a8d9 	bne.w	407896 <_svfprintf_r+0x18a>
  4086e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4086e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086e8:	e7e3      	b.n	4086b2 <_svfprintf_r+0xfa6>
  4086ea:	f041 0120 	orr.w	r1, r1, #32
  4086ee:	785e      	ldrb	r6, [r3, #1]
  4086f0:	9106      	str	r1, [sp, #24]
  4086f2:	1c59      	adds	r1, r3, #1
  4086f4:	f7ff b85f 	b.w	4077b6 <_svfprintf_r+0xaa>
  4086f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4086fa:	910c      	str	r1, [sp, #48]	; 0x30
  4086fc:	4619      	mov	r1, r3
  4086fe:	4240      	negs	r0, r0
  408700:	900b      	str	r0, [sp, #44]	; 0x2c
  408702:	f7ff ba43 	b.w	407b8c <_svfprintf_r+0x480>
  408706:	bf00      	nop
  408708:	0040d8a8 	.word	0x0040d8a8
  40870c:	0040d8d4 	.word	0x0040d8d4
  408710:	0040d8d0 	.word	0x0040d8d0
  408714:	0040d908 	.word	0x0040d908
  408718:	f1bc 3fff 	cmp.w	ip, #4294967295
  40871c:	f026 0a20 	bic.w	sl, r6, #32
  408720:	f000 80a9 	beq.w	408876 <_svfprintf_r+0x116a>
  408724:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  408728:	f040 80a7 	bne.w	40887a <_svfprintf_r+0x116e>
  40872c:	f1bc 0f00 	cmp.w	ip, #0
  408730:	f040 80a3 	bne.w	40887a <_svfprintf_r+0x116e>
  408734:	9b06      	ldr	r3, [sp, #24]
  408736:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40873a:	f04f 0c01 	mov.w	ip, #1
  40873e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408742:	930e      	str	r3, [sp, #56]	; 0x38
  408744:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408746:	2b00      	cmp	r3, #0
  408748:	f2c0 81ff 	blt.w	408b4a <_svfprintf_r+0x143e>
  40874c:	461d      	mov	r5, r3
  40874e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408750:	2300      	movs	r3, #0
  408752:	930d      	str	r3, [sp, #52]	; 0x34
  408754:	2002      	movs	r0, #2
  408756:	a91d      	add	r1, sp, #116	; 0x74
  408758:	f8cd c004 	str.w	ip, [sp, #4]
  40875c:	463a      	mov	r2, r7
  40875e:	9000      	str	r0, [sp, #0]
  408760:	a81e      	add	r0, sp, #120	; 0x78
  408762:	9102      	str	r1, [sp, #8]
  408764:	a921      	add	r1, sp, #132	; 0x84
  408766:	9003      	str	r0, [sp, #12]
  408768:	462b      	mov	r3, r5
  40876a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40876c:	9104      	str	r1, [sp, #16]
  40876e:	f8cd c01c 	str.w	ip, [sp, #28]
  408772:	f000 fbb9 	bl	408ee8 <_dtoa_r>
  408776:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40877a:	900f      	str	r0, [sp, #60]	; 0x3c
  40877c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408780:	f040 8242 	bne.w	408c08 <_svfprintf_r+0x14fc>
  408784:	9b06      	ldr	r3, [sp, #24]
  408786:	07db      	lsls	r3, r3, #31
  408788:	f140 81f3 	bpl.w	408b72 <_svfprintf_r+0x1466>
  40878c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40878e:	eb03 040c 	add.w	r4, r3, ip
  408792:	4638      	mov	r0, r7
  408794:	2200      	movs	r2, #0
  408796:	2300      	movs	r3, #0
  408798:	4629      	mov	r1, r5
  40879a:	f8cd c01c 	str.w	ip, [sp, #28]
  40879e:	f003 ff25 	bl	40c5ec <__aeabi_dcmpeq>
  4087a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4087a6:	2800      	cmp	r0, #0
  4087a8:	f040 8172 	bne.w	408a90 <_svfprintf_r+0x1384>
  4087ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4087ae:	429c      	cmp	r4, r3
  4087b0:	d906      	bls.n	4087c0 <_svfprintf_r+0x10b4>
  4087b2:	2130      	movs	r1, #48	; 0x30
  4087b4:	1c5a      	adds	r2, r3, #1
  4087b6:	9221      	str	r2, [sp, #132]	; 0x84
  4087b8:	7019      	strb	r1, [r3, #0]
  4087ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4087bc:	429c      	cmp	r4, r3
  4087be:	d8f9      	bhi.n	4087b4 <_svfprintf_r+0x10a8>
  4087c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4087c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4087c6:	eba3 0302 	sub.w	r3, r3, r2
  4087ca:	9312      	str	r3, [sp, #72]	; 0x48
  4087cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4087ce:	f040 8113 	bne.w	4089f8 <_svfprintf_r+0x12ec>
  4087d2:	459c      	cmp	ip, r3
  4087d4:	f2c0 8168 	blt.w	408aa8 <_svfprintf_r+0x139c>
  4087d8:	1cd9      	adds	r1, r3, #3
  4087da:	f2c0 8165 	blt.w	408aa8 <_svfprintf_r+0x139c>
  4087de:	2667      	movs	r6, #103	; 0x67
  4087e0:	9311      	str	r3, [sp, #68]	; 0x44
  4087e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4087e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4087e6:	4293      	cmp	r3, r2
  4087e8:	f300 81b6 	bgt.w	408b58 <_svfprintf_r+0x144c>
  4087ec:	9b06      	ldr	r3, [sp, #24]
  4087ee:	07df      	lsls	r7, r3, #31
  4087f0:	f100 81c1 	bmi.w	408b76 <_svfprintf_r+0x146a>
  4087f4:	4614      	mov	r4, r2
  4087f6:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  4087fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4087fc:	2b00      	cmp	r3, #0
  4087fe:	f040 80f0 	bne.w	4089e2 <_svfprintf_r+0x12d6>
  408802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408804:	f8cd c01c 	str.w	ip, [sp, #28]
  408808:	9306      	str	r3, [sp, #24]
  40880a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40880c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408810:	9310      	str	r3, [sp, #64]	; 0x40
  408812:	f7ff b88e 	b.w	407932 <_svfprintf_r+0x226>
  408816:	9809      	ldr	r0, [sp, #36]	; 0x24
  408818:	4649      	mov	r1, r9
  40881a:	aa23      	add	r2, sp, #140	; 0x8c
  40881c:	f003 f904 	bl	40ba28 <__ssprint_r>
  408820:	2800      	cmp	r0, #0
  408822:	f47f a838 	bne.w	407896 <_svfprintf_r+0x18a>
  408826:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40882a:	46c3      	mov	fp, r8
  40882c:	f7ff bbd8 	b.w	407fe0 <_svfprintf_r+0x8d4>
  408830:	3304      	adds	r3, #4
  408832:	6814      	ldr	r4, [r2, #0]
  408834:	2500      	movs	r5, #0
  408836:	930c      	str	r3, [sp, #48]	; 0x30
  408838:	f7ff ba9d 	b.w	407d76 <_svfprintf_r+0x66a>
  40883c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40883e:	2140      	movs	r1, #64	; 0x40
  408840:	f001 ff82 	bl	40a748 <_malloc_r>
  408844:	f8c9 0000 	str.w	r0, [r9]
  408848:	f8c9 0010 	str.w	r0, [r9, #16]
  40884c:	2800      	cmp	r0, #0
  40884e:	f000 81d4 	beq.w	408bfa <_svfprintf_r+0x14ee>
  408852:	2340      	movs	r3, #64	; 0x40
  408854:	f8c9 3014 	str.w	r3, [r9, #20]
  408858:	f7fe bf70 	b.w	40773c <_svfprintf_r+0x30>
  40885c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40885e:	4649      	mov	r1, r9
  408860:	aa23      	add	r2, sp, #140	; 0x8c
  408862:	f003 f8e1 	bl	40ba28 <__ssprint_r>
  408866:	2800      	cmp	r0, #0
  408868:	f47f a815 	bne.w	407896 <_svfprintf_r+0x18a>
  40886c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40886e:	46c3      	mov	fp, r8
  408870:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408874:	e6fa      	b.n	40866c <_svfprintf_r+0xf60>
  408876:	f04f 0c06 	mov.w	ip, #6
  40887a:	9b06      	ldr	r3, [sp, #24]
  40887c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408880:	930e      	str	r3, [sp, #56]	; 0x38
  408882:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408884:	2b00      	cmp	r3, #0
  408886:	f2c0 8160 	blt.w	408b4a <_svfprintf_r+0x143e>
  40888a:	461d      	mov	r5, r3
  40888c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40888e:	2300      	movs	r3, #0
  408890:	930d      	str	r3, [sp, #52]	; 0x34
  408892:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  408896:	f000 80c4 	beq.w	408a22 <_svfprintf_r+0x1316>
  40889a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40889e:	f47f af59 	bne.w	408754 <_svfprintf_r+0x1048>
  4088a2:	f10c 0401 	add.w	r4, ip, #1
  4088a6:	f8cd c01c 	str.w	ip, [sp, #28]
  4088aa:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  4088ae:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  4088b2:	a81e      	add	r0, sp, #120	; 0x78
  4088b4:	2102      	movs	r1, #2
  4088b6:	f8cd c010 	str.w	ip, [sp, #16]
  4088ba:	463a      	mov	r2, r7
  4088bc:	9003      	str	r0, [sp, #12]
  4088be:	462b      	mov	r3, r5
  4088c0:	9401      	str	r4, [sp, #4]
  4088c2:	9100      	str	r1, [sp, #0]
  4088c4:	f8cd e008 	str.w	lr, [sp, #8]
  4088c8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4088ca:	f000 fb0d 	bl	408ee8 <_dtoa_r>
  4088ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4088d2:	900f      	str	r0, [sp, #60]	; 0x3c
  4088d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4088d6:	441c      	add	r4, r3
  4088d8:	e75b      	b.n	408792 <_svfprintf_r+0x1086>
  4088da:	9809      	ldr	r0, [sp, #36]	; 0x24
  4088dc:	4649      	mov	r1, r9
  4088de:	aa23      	add	r2, sp, #140	; 0x8c
  4088e0:	f003 f8a2 	bl	40ba28 <__ssprint_r>
  4088e4:	2800      	cmp	r0, #0
  4088e6:	f47e afd6 	bne.w	407896 <_svfprintf_r+0x18a>
  4088ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4088ec:	46c3      	mov	fp, r8
  4088ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4088f0:	9812      	ldr	r0, [sp, #72]	; 0x48
  4088f2:	3301      	adds	r3, #1
  4088f4:	eb02 0c00 	add.w	ip, r2, r0
  4088f8:	2b07      	cmp	r3, #7
  4088fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4088fc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408900:	f8cb 2000 	str.w	r2, [fp]
  408904:	9324      	str	r3, [sp, #144]	; 0x90
  408906:	f8cb 0004 	str.w	r0, [fp, #4]
  40890a:	f77f a8e8 	ble.w	407ade <_svfprintf_r+0x3d2>
  40890e:	e446      	b.n	40819e <_svfprintf_r+0xa92>
  408910:	9510      	str	r5, [sp, #64]	; 0x40
  408912:	f7fe fe99 	bl	407648 <strlen>
  408916:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40891a:	970c      	str	r7, [sp, #48]	; 0x30
  40891c:	4604      	mov	r4, r0
  40891e:	9511      	str	r5, [sp, #68]	; 0x44
  408920:	9307      	str	r3, [sp, #28]
  408922:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408926:	f7ff b804 	b.w	407932 <_svfprintf_r+0x226>
  40892a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40892c:	4fb7      	ldr	r7, [pc, #732]	; (408c0c <_svfprintf_r+0x1500>)
  40892e:	f7ff b84b 	b.w	4079c8 <_svfprintf_r+0x2bc>
  408932:	9809      	ldr	r0, [sp, #36]	; 0x24
  408934:	4649      	mov	r1, r9
  408936:	aa23      	add	r2, sp, #140	; 0x8c
  408938:	f003 f876 	bl	40ba28 <__ssprint_r>
  40893c:	2800      	cmp	r0, #0
  40893e:	f47e afaa 	bne.w	407896 <_svfprintf_r+0x18a>
  408942:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408946:	46c3      	mov	fp, r8
  408948:	e4a2      	b.n	408290 <_svfprintf_r+0xb84>
  40894a:	3301      	adds	r3, #1
  40894c:	4422      	add	r2, r4
  40894e:	f8cb 5000 	str.w	r5, [fp]
  408952:	2b07      	cmp	r3, #7
  408954:	9225      	str	r2, [sp, #148]	; 0x94
  408956:	9324      	str	r3, [sp, #144]	; 0x90
  408958:	f8cb 4004 	str.w	r4, [fp, #4]
  40895c:	dcbd      	bgt.n	4088da <_svfprintf_r+0x11ce>
  40895e:	f10b 0b08 	add.w	fp, fp, #8
  408962:	e7c5      	b.n	4088f0 <_svfprintf_r+0x11e4>
  408964:	9809      	ldr	r0, [sp, #36]	; 0x24
  408966:	4649      	mov	r1, r9
  408968:	aa23      	add	r2, sp, #140	; 0x8c
  40896a:	f003 f85d 	bl	40ba28 <__ssprint_r>
  40896e:	2800      	cmp	r0, #0
  408970:	f47e af91 	bne.w	407896 <_svfprintf_r+0x18a>
  408974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408976:	46c3      	mov	fp, r8
  408978:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40897a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40897e:	1ad3      	subs	r3, r2, r3
  408980:	e552      	b.n	408428 <_svfprintf_r+0xd1c>
  408982:	9809      	ldr	r0, [sp, #36]	; 0x24
  408984:	4649      	mov	r1, r9
  408986:	aa23      	add	r2, sp, #140	; 0x8c
  408988:	f003 f84e 	bl	40ba28 <__ssprint_r>
  40898c:	2800      	cmp	r0, #0
  40898e:	f47e af82 	bne.w	407896 <_svfprintf_r+0x18a>
  408992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408994:	46c3      	mov	fp, r8
  408996:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40899a:	e52d      	b.n	4083f8 <_svfprintf_r+0xcec>
  40899c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40899e:	4649      	mov	r1, r9
  4089a0:	aa23      	add	r2, sp, #140	; 0x8c
  4089a2:	f003 f841 	bl	40ba28 <__ssprint_r>
  4089a6:	2800      	cmp	r0, #0
  4089a8:	f47e af75 	bne.w	407896 <_svfprintf_r+0x18a>
  4089ac:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4089b0:	46c3      	mov	fp, r8
  4089b2:	e516      	b.n	4083e2 <_svfprintf_r+0xcd6>
  4089b4:	2c06      	cmp	r4, #6
  4089b6:	970c      	str	r7, [sp, #48]	; 0x30
  4089b8:	9310      	str	r3, [sp, #64]	; 0x40
  4089ba:	461f      	mov	r7, r3
  4089bc:	bf28      	it	cs
  4089be:	2406      	movcs	r4, #6
  4089c0:	9711      	str	r7, [sp, #68]	; 0x44
  4089c2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4089c6:	9307      	str	r3, [sp, #28]
  4089c8:	4b91      	ldr	r3, [pc, #580]	; (408c10 <_svfprintf_r+0x1504>)
  4089ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4089cc:	f7fe bfb1 	b.w	407932 <_svfprintf_r+0x226>
  4089d0:	4f8e      	ldr	r7, [pc, #568]	; (408c0c <_svfprintf_r+0x1500>)
  4089d2:	f7ff b8b5 	b.w	407b40 <_svfprintf_r+0x434>
  4089d6:	232d      	movs	r3, #45	; 0x2d
  4089d8:	461f      	mov	r7, r3
  4089da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4089de:	f7ff ba7a 	b.w	407ed6 <_svfprintf_r+0x7ca>
  4089e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4089e4:	272d      	movs	r7, #45	; 0x2d
  4089e6:	f8cd c01c 	str.w	ip, [sp, #28]
  4089ea:	9306      	str	r3, [sp, #24]
  4089ec:	2300      	movs	r3, #0
  4089ee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4089f2:	9310      	str	r3, [sp, #64]	; 0x40
  4089f4:	f7fe bf9e 	b.w	407934 <_svfprintf_r+0x228>
  4089f8:	2e65      	cmp	r6, #101	; 0x65
  4089fa:	dd56      	ble.n	408aaa <_svfprintf_r+0x139e>
  4089fc:	2e66      	cmp	r6, #102	; 0x66
  4089fe:	9311      	str	r3, [sp, #68]	; 0x44
  408a00:	f47f aeef 	bne.w	4087e2 <_svfprintf_r+0x10d6>
  408a04:	2b00      	cmp	r3, #0
  408a06:	f340 80d6 	ble.w	408bb6 <_svfprintf_r+0x14aa>
  408a0a:	f1bc 0f00 	cmp.w	ip, #0
  408a0e:	f040 80c1 	bne.w	408b94 <_svfprintf_r+0x1488>
  408a12:	9b06      	ldr	r3, [sp, #24]
  408a14:	07da      	lsls	r2, r3, #31
  408a16:	f100 80bd 	bmi.w	408b94 <_svfprintf_r+0x1488>
  408a1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  408a1c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408a20:	e6eb      	b.n	4087fa <_svfprintf_r+0x10ee>
  408a22:	2003      	movs	r0, #3
  408a24:	a91d      	add	r1, sp, #116	; 0x74
  408a26:	463a      	mov	r2, r7
  408a28:	f8cd c004 	str.w	ip, [sp, #4]
  408a2c:	9000      	str	r0, [sp, #0]
  408a2e:	a81e      	add	r0, sp, #120	; 0x78
  408a30:	9102      	str	r1, [sp, #8]
  408a32:	a921      	add	r1, sp, #132	; 0x84
  408a34:	462b      	mov	r3, r5
  408a36:	9003      	str	r0, [sp, #12]
  408a38:	9104      	str	r1, [sp, #16]
  408a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
  408a3c:	f8cd c01c 	str.w	ip, [sp, #28]
  408a40:	f000 fa52 	bl	408ee8 <_dtoa_r>
  408a44:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408a48:	4602      	mov	r2, r0
  408a4a:	7803      	ldrb	r3, [r0, #0]
  408a4c:	4462      	add	r2, ip
  408a4e:	900f      	str	r0, [sp, #60]	; 0x3c
  408a50:	2b30      	cmp	r3, #48	; 0x30
  408a52:	9207      	str	r2, [sp, #28]
  408a54:	f040 808b 	bne.w	408b6e <_svfprintf_r+0x1462>
  408a58:	4638      	mov	r0, r7
  408a5a:	2200      	movs	r2, #0
  408a5c:	2300      	movs	r3, #0
  408a5e:	4629      	mov	r1, r5
  408a60:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408a64:	f04f 0401 	mov.w	r4, #1
  408a68:	f003 fdc0 	bl	40c5ec <__aeabi_dcmpeq>
  408a6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408a70:	b108      	cbz	r0, 408a76 <_svfprintf_r+0x136a>
  408a72:	f04f 0400 	mov.w	r4, #0
  408a76:	f014 0fff 	tst.w	r4, #255	; 0xff
  408a7a:	d078      	beq.n	408b6e <_svfprintf_r+0x1462>
  408a7c:	f1cc 0401 	rsb	r4, ip, #1
  408a80:	941d      	str	r4, [sp, #116]	; 0x74
  408a82:	9b07      	ldr	r3, [sp, #28]
  408a84:	4423      	add	r3, r4
  408a86:	461c      	mov	r4, r3
  408a88:	e683      	b.n	408792 <_svfprintf_r+0x1086>
  408a8a:	4d62      	ldr	r5, [pc, #392]	; (408c14 <_svfprintf_r+0x1508>)
  408a8c:	f7ff bb2a 	b.w	4080e4 <_svfprintf_r+0x9d8>
  408a90:	4623      	mov	r3, r4
  408a92:	e695      	b.n	4087c0 <_svfprintf_r+0x10b4>
  408a94:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  408a98:	970c      	str	r7, [sp, #48]	; 0x30
  408a9a:	9010      	str	r0, [sp, #64]	; 0x40
  408a9c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408aa0:	9307      	str	r3, [sp, #28]
  408aa2:	9011      	str	r0, [sp, #68]	; 0x44
  408aa4:	f7fe bf45 	b.w	407932 <_svfprintf_r+0x226>
  408aa8:	3e02      	subs	r6, #2
  408aaa:	3b01      	subs	r3, #1
  408aac:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  408ab0:	2b00      	cmp	r3, #0
  408ab2:	931d      	str	r3, [sp, #116]	; 0x74
  408ab4:	db75      	blt.n	408ba2 <_svfprintf_r+0x1496>
  408ab6:	222b      	movs	r2, #43	; 0x2b
  408ab8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408abc:	2b09      	cmp	r3, #9
  408abe:	dd61      	ble.n	408b84 <_svfprintf_r+0x1478>
  408ac0:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  408ac4:	4601      	mov	r1, r0
  408ac6:	4a54      	ldr	r2, [pc, #336]	; (408c18 <_svfprintf_r+0x150c>)
  408ac8:	fb82 2403 	smull	r2, r4, r2, r3
  408acc:	17da      	asrs	r2, r3, #31
  408ace:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  408ad2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  408ad6:	2c09      	cmp	r4, #9
  408ad8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408adc:	4623      	mov	r3, r4
  408ade:	f102 0230 	add.w	r2, r2, #48	; 0x30
  408ae2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  408ae6:	dcee      	bgt.n	408ac6 <_svfprintf_r+0x13ba>
  408ae8:	3330      	adds	r3, #48	; 0x30
  408aea:	460a      	mov	r2, r1
  408aec:	b2db      	uxtb	r3, r3
  408aee:	f802 3d01 	strb.w	r3, [r2, #-1]!
  408af2:	4290      	cmp	r0, r2
  408af4:	d97e      	bls.n	408bf4 <_svfprintf_r+0x14e8>
  408af6:	460a      	mov	r2, r1
  408af8:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  408afc:	e001      	b.n	408b02 <_svfprintf_r+0x13f6>
  408afe:	f812 3b01 	ldrb.w	r3, [r2], #1
  408b02:	4282      	cmp	r2, r0
  408b04:	f804 3b01 	strb.w	r3, [r4], #1
  408b08:	d1f9      	bne.n	408afe <_svfprintf_r+0x13f2>
  408b0a:	ab23      	add	r3, sp, #140	; 0x8c
  408b0c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  408b10:	1a5b      	subs	r3, r3, r1
  408b12:	4413      	add	r3, r2
  408b14:	aa1f      	add	r2, sp, #124	; 0x7c
  408b16:	1a9b      	subs	r3, r3, r2
  408b18:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408b1a:	2a01      	cmp	r2, #1
  408b1c:	9319      	str	r3, [sp, #100]	; 0x64
  408b1e:	eb02 0403 	add.w	r4, r2, r3
  408b22:	dd43      	ble.n	408bac <_svfprintf_r+0x14a0>
  408b24:	3401      	adds	r4, #1
  408b26:	2300      	movs	r3, #0
  408b28:	9311      	str	r3, [sp, #68]	; 0x44
  408b2a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408b2e:	e664      	b.n	4087fa <_svfprintf_r+0x10ee>
  408b30:	9809      	ldr	r0, [sp, #36]	; 0x24
  408b32:	4649      	mov	r1, r9
  408b34:	aa23      	add	r2, sp, #140	; 0x8c
  408b36:	f002 ff77 	bl	40ba28 <__ssprint_r>
  408b3a:	2800      	cmp	r0, #0
  408b3c:	f47e aeab 	bne.w	407896 <_svfprintf_r+0x18a>
  408b40:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408b42:	46c3      	mov	fp, r8
  408b44:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408b48:	e5a8      	b.n	40869c <_svfprintf_r+0xf90>
  408b4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408b4c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408b4e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  408b52:	232d      	movs	r3, #45	; 0x2d
  408b54:	930d      	str	r3, [sp, #52]	; 0x34
  408b56:	e69c      	b.n	408892 <_svfprintf_r+0x1186>
  408b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b5a:	2b00      	cmp	r3, #0
  408b5c:	dd35      	ble.n	408bca <_svfprintf_r+0x14be>
  408b5e:	2401      	movs	r4, #1
  408b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408b62:	441c      	add	r4, r3
  408b64:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408b68:	e647      	b.n	4087fa <_svfprintf_r+0x10ee>
  408b6a:	4d2a      	ldr	r5, [pc, #168]	; (408c14 <_svfprintf_r+0x1508>)
  408b6c:	e413      	b.n	408396 <_svfprintf_r+0xc8a>
  408b6e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408b70:	e787      	b.n	408a82 <_svfprintf_r+0x1376>
  408b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408b74:	e624      	b.n	4087c0 <_svfprintf_r+0x10b4>
  408b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b78:	1c5c      	adds	r4, r3, #1
  408b7a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408b7e:	e63c      	b.n	4087fa <_svfprintf_r+0x10ee>
  408b80:	4d24      	ldr	r5, [pc, #144]	; (408c14 <_svfprintf_r+0x1508>)
  408b82:	e420      	b.n	4083c6 <_svfprintf_r+0xcba>
  408b84:	3330      	adds	r3, #48	; 0x30
  408b86:	2230      	movs	r2, #48	; 0x30
  408b88:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408b8c:	ab20      	add	r3, sp, #128	; 0x80
  408b8e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408b92:	e7bf      	b.n	408b14 <_svfprintf_r+0x1408>
  408b94:	f10c 0401 	add.w	r4, ip, #1
  408b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b9a:	441c      	add	r4, r3
  408b9c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408ba0:	e62b      	b.n	4087fa <_svfprintf_r+0x10ee>
  408ba2:	222d      	movs	r2, #45	; 0x2d
  408ba4:	425b      	negs	r3, r3
  408ba6:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  408baa:	e787      	b.n	408abc <_svfprintf_r+0x13b0>
  408bac:	9b06      	ldr	r3, [sp, #24]
  408bae:	f013 0301 	ands.w	r3, r3, #1
  408bb2:	d0b9      	beq.n	408b28 <_svfprintf_r+0x141c>
  408bb4:	e7b6      	b.n	408b24 <_svfprintf_r+0x1418>
  408bb6:	f1bc 0f00 	cmp.w	ip, #0
  408bba:	d109      	bne.n	408bd0 <_svfprintf_r+0x14c4>
  408bbc:	9b06      	ldr	r3, [sp, #24]
  408bbe:	07db      	lsls	r3, r3, #31
  408bc0:	d406      	bmi.n	408bd0 <_svfprintf_r+0x14c4>
  408bc2:	f04f 0c01 	mov.w	ip, #1
  408bc6:	4664      	mov	r4, ip
  408bc8:	e617      	b.n	4087fa <_svfprintf_r+0x10ee>
  408bca:	f1c3 0402 	rsb	r4, r3, #2
  408bce:	e7c7      	b.n	408b60 <_svfprintf_r+0x1454>
  408bd0:	f10c 0402 	add.w	r4, ip, #2
  408bd4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408bd8:	e60f      	b.n	4087fa <_svfprintf_r+0x10ee>
  408bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  408bdc:	785e      	ldrb	r6, [r3, #1]
  408bde:	4628      	mov	r0, r5
  408be0:	682c      	ldr	r4, [r5, #0]
  408be2:	3004      	adds	r0, #4
  408be4:	2c00      	cmp	r4, #0
  408be6:	900c      	str	r0, [sp, #48]	; 0x30
  408be8:	f6be ade5 	bge.w	4077b6 <_svfprintf_r+0xaa>
  408bec:	f04f 34ff 	mov.w	r4, #4294967295
  408bf0:	f7fe bde1 	b.w	4077b6 <_svfprintf_r+0xaa>
  408bf4:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  408bf8:	e78c      	b.n	408b14 <_svfprintf_r+0x1408>
  408bfa:	230c      	movs	r3, #12
  408bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408bfe:	f04f 30ff 	mov.w	r0, #4294967295
  408c02:	6013      	str	r3, [r2, #0]
  408c04:	f7fe be50 	b.w	4078a8 <_svfprintf_r+0x19c>
  408c08:	4664      	mov	r4, ip
  408c0a:	e663      	b.n	4088d4 <_svfprintf_r+0x11c8>
  408c0c:	0040d8b8 	.word	0x0040d8b8
  408c10:	0040d900 	.word	0x0040d900
  408c14:	0040d8a8 	.word	0x0040d8a8
  408c18:	66666667 	.word	0x66666667

00408c1c <__swbuf_r>:
  408c1c:	b570      	push	{r4, r5, r6, lr}
  408c1e:	460d      	mov	r5, r1
  408c20:	4614      	mov	r4, r2
  408c22:	4606      	mov	r6, r0
  408c24:	b110      	cbz	r0, 408c2c <__swbuf_r+0x10>
  408c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c28:	2b00      	cmp	r3, #0
  408c2a:	d048      	beq.n	408cbe <__swbuf_r+0xa2>
  408c2c:	89a2      	ldrh	r2, [r4, #12]
  408c2e:	69a3      	ldr	r3, [r4, #24]
  408c30:	b291      	uxth	r1, r2
  408c32:	60a3      	str	r3, [r4, #8]
  408c34:	0708      	lsls	r0, r1, #28
  408c36:	d538      	bpl.n	408caa <__swbuf_r+0x8e>
  408c38:	6923      	ldr	r3, [r4, #16]
  408c3a:	2b00      	cmp	r3, #0
  408c3c:	d035      	beq.n	408caa <__swbuf_r+0x8e>
  408c3e:	0489      	lsls	r1, r1, #18
  408c40:	b2ed      	uxtb	r5, r5
  408c42:	d515      	bpl.n	408c70 <__swbuf_r+0x54>
  408c44:	6822      	ldr	r2, [r4, #0]
  408c46:	6961      	ldr	r1, [r4, #20]
  408c48:	1ad3      	subs	r3, r2, r3
  408c4a:	428b      	cmp	r3, r1
  408c4c:	da1c      	bge.n	408c88 <__swbuf_r+0x6c>
  408c4e:	3301      	adds	r3, #1
  408c50:	68a1      	ldr	r1, [r4, #8]
  408c52:	1c50      	adds	r0, r2, #1
  408c54:	3901      	subs	r1, #1
  408c56:	6020      	str	r0, [r4, #0]
  408c58:	60a1      	str	r1, [r4, #8]
  408c5a:	7015      	strb	r5, [r2, #0]
  408c5c:	6962      	ldr	r2, [r4, #20]
  408c5e:	429a      	cmp	r2, r3
  408c60:	d01a      	beq.n	408c98 <__swbuf_r+0x7c>
  408c62:	2d0a      	cmp	r5, #10
  408c64:	d102      	bne.n	408c6c <__swbuf_r+0x50>
  408c66:	7b23      	ldrb	r3, [r4, #12]
  408c68:	07db      	lsls	r3, r3, #31
  408c6a:	d415      	bmi.n	408c98 <__swbuf_r+0x7c>
  408c6c:	4628      	mov	r0, r5
  408c6e:	bd70      	pop	{r4, r5, r6, pc}
  408c70:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408c76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408c7a:	81a2      	strh	r2, [r4, #12]
  408c7c:	6822      	ldr	r2, [r4, #0]
  408c7e:	6661      	str	r1, [r4, #100]	; 0x64
  408c80:	1ad3      	subs	r3, r2, r3
  408c82:	6961      	ldr	r1, [r4, #20]
  408c84:	428b      	cmp	r3, r1
  408c86:	dbe2      	blt.n	408c4e <__swbuf_r+0x32>
  408c88:	4630      	mov	r0, r6
  408c8a:	4621      	mov	r1, r4
  408c8c:	f001 f944 	bl	409f18 <_fflush_r>
  408c90:	b940      	cbnz	r0, 408ca4 <__swbuf_r+0x88>
  408c92:	6822      	ldr	r2, [r4, #0]
  408c94:	2301      	movs	r3, #1
  408c96:	e7db      	b.n	408c50 <__swbuf_r+0x34>
  408c98:	4630      	mov	r0, r6
  408c9a:	4621      	mov	r1, r4
  408c9c:	f001 f93c 	bl	409f18 <_fflush_r>
  408ca0:	2800      	cmp	r0, #0
  408ca2:	d0e3      	beq.n	408c6c <__swbuf_r+0x50>
  408ca4:	f04f 30ff 	mov.w	r0, #4294967295
  408ca8:	bd70      	pop	{r4, r5, r6, pc}
  408caa:	4630      	mov	r0, r6
  408cac:	4621      	mov	r1, r4
  408cae:	f000 f809 	bl	408cc4 <__swsetup_r>
  408cb2:	2800      	cmp	r0, #0
  408cb4:	d1f6      	bne.n	408ca4 <__swbuf_r+0x88>
  408cb6:	89a2      	ldrh	r2, [r4, #12]
  408cb8:	6923      	ldr	r3, [r4, #16]
  408cba:	b291      	uxth	r1, r2
  408cbc:	e7bf      	b.n	408c3e <__swbuf_r+0x22>
  408cbe:	f001 f9c5 	bl	40a04c <__sinit>
  408cc2:	e7b3      	b.n	408c2c <__swbuf_r+0x10>

00408cc4 <__swsetup_r>:
  408cc4:	b538      	push	{r3, r4, r5, lr}
  408cc6:	4b2f      	ldr	r3, [pc, #188]	; (408d84 <__swsetup_r+0xc0>)
  408cc8:	4605      	mov	r5, r0
  408cca:	460c      	mov	r4, r1
  408ccc:	6818      	ldr	r0, [r3, #0]
  408cce:	b110      	cbz	r0, 408cd6 <__swsetup_r+0x12>
  408cd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408cd2:	2b00      	cmp	r3, #0
  408cd4:	d036      	beq.n	408d44 <__swsetup_r+0x80>
  408cd6:	89a2      	ldrh	r2, [r4, #12]
  408cd8:	b293      	uxth	r3, r2
  408cda:	0718      	lsls	r0, r3, #28
  408cdc:	d50b      	bpl.n	408cf6 <__swsetup_r+0x32>
  408cde:	6920      	ldr	r0, [r4, #16]
  408ce0:	b1a0      	cbz	r0, 408d0c <__swsetup_r+0x48>
  408ce2:	f013 0201 	ands.w	r2, r3, #1
  408ce6:	d11d      	bne.n	408d24 <__swsetup_r+0x60>
  408ce8:	0799      	lsls	r1, r3, #30
  408cea:	d400      	bmi.n	408cee <__swsetup_r+0x2a>
  408cec:	6962      	ldr	r2, [r4, #20]
  408cee:	60a2      	str	r2, [r4, #8]
  408cf0:	b1f8      	cbz	r0, 408d32 <__swsetup_r+0x6e>
  408cf2:	2000      	movs	r0, #0
  408cf4:	bd38      	pop	{r3, r4, r5, pc}
  408cf6:	06d9      	lsls	r1, r3, #27
  408cf8:	d53b      	bpl.n	408d72 <__swsetup_r+0xae>
  408cfa:	0758      	lsls	r0, r3, #29
  408cfc:	d425      	bmi.n	408d4a <__swsetup_r+0x86>
  408cfe:	6920      	ldr	r0, [r4, #16]
  408d00:	f042 0208 	orr.w	r2, r2, #8
  408d04:	b293      	uxth	r3, r2
  408d06:	81a2      	strh	r2, [r4, #12]
  408d08:	2800      	cmp	r0, #0
  408d0a:	d1ea      	bne.n	408ce2 <__swsetup_r+0x1e>
  408d0c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408d10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408d14:	d0e5      	beq.n	408ce2 <__swsetup_r+0x1e>
  408d16:	4628      	mov	r0, r5
  408d18:	4621      	mov	r1, r4
  408d1a:	f001 fc9b 	bl	40a654 <__smakebuf_r>
  408d1e:	89a3      	ldrh	r3, [r4, #12]
  408d20:	6920      	ldr	r0, [r4, #16]
  408d22:	e7de      	b.n	408ce2 <__swsetup_r+0x1e>
  408d24:	6963      	ldr	r3, [r4, #20]
  408d26:	2200      	movs	r2, #0
  408d28:	425b      	negs	r3, r3
  408d2a:	60a2      	str	r2, [r4, #8]
  408d2c:	61a3      	str	r3, [r4, #24]
  408d2e:	2800      	cmp	r0, #0
  408d30:	d1df      	bne.n	408cf2 <__swsetup_r+0x2e>
  408d32:	89a3      	ldrh	r3, [r4, #12]
  408d34:	061a      	lsls	r2, r3, #24
  408d36:	d5dd      	bpl.n	408cf4 <__swsetup_r+0x30>
  408d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408d3c:	f04f 30ff 	mov.w	r0, #4294967295
  408d40:	81a3      	strh	r3, [r4, #12]
  408d42:	bd38      	pop	{r3, r4, r5, pc}
  408d44:	f001 f982 	bl	40a04c <__sinit>
  408d48:	e7c5      	b.n	408cd6 <__swsetup_r+0x12>
  408d4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408d4c:	b149      	cbz	r1, 408d62 <__swsetup_r+0x9e>
  408d4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408d52:	4299      	cmp	r1, r3
  408d54:	d003      	beq.n	408d5e <__swsetup_r+0x9a>
  408d56:	4628      	mov	r0, r5
  408d58:	f001 f9e6 	bl	40a128 <_free_r>
  408d5c:	89a2      	ldrh	r2, [r4, #12]
  408d5e:	2300      	movs	r3, #0
  408d60:	6323      	str	r3, [r4, #48]	; 0x30
  408d62:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408d66:	2300      	movs	r3, #0
  408d68:	6920      	ldr	r0, [r4, #16]
  408d6a:	b292      	uxth	r2, r2
  408d6c:	e884 0009 	stmia.w	r4, {r0, r3}
  408d70:	e7c6      	b.n	408d00 <__swsetup_r+0x3c>
  408d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408d76:	2309      	movs	r3, #9
  408d78:	f04f 30ff 	mov.w	r0, #4294967295
  408d7c:	602b      	str	r3, [r5, #0]
  408d7e:	81a2      	strh	r2, [r4, #12]
  408d80:	bd38      	pop	{r3, r4, r5, pc}
  408d82:	bf00      	nop
  408d84:	204004c8 	.word	0x204004c8

00408d88 <register_fini>:
  408d88:	4b02      	ldr	r3, [pc, #8]	; (408d94 <register_fini+0xc>)
  408d8a:	b113      	cbz	r3, 408d92 <register_fini+0xa>
  408d8c:	4802      	ldr	r0, [pc, #8]	; (408d98 <register_fini+0x10>)
  408d8e:	f000 b805 	b.w	408d9c <atexit>
  408d92:	4770      	bx	lr
  408d94:	00000000 	.word	0x00000000
  408d98:	0040a061 	.word	0x0040a061

00408d9c <atexit>:
  408d9c:	4601      	mov	r1, r0
  408d9e:	2000      	movs	r0, #0
  408da0:	4602      	mov	r2, r0
  408da2:	4603      	mov	r3, r0
  408da4:	f002 bedc 	b.w	40bb60 <__register_exitproc>

00408da8 <quorem>:
  408da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dac:	6903      	ldr	r3, [r0, #16]
  408dae:	b083      	sub	sp, #12
  408db0:	690f      	ldr	r7, [r1, #16]
  408db2:	429f      	cmp	r7, r3
  408db4:	f300 8093 	bgt.w	408ede <quorem+0x136>
  408db8:	3f01      	subs	r7, #1
  408dba:	f101 0614 	add.w	r6, r1, #20
  408dbe:	f100 0a14 	add.w	sl, r0, #20
  408dc2:	00bb      	lsls	r3, r7, #2
  408dc4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  408dc8:	461d      	mov	r5, r3
  408dca:	9300      	str	r3, [sp, #0]
  408dcc:	3201      	adds	r2, #1
  408dce:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  408dd2:	eb0a 0405 	add.w	r4, sl, r5
  408dd6:	eb06 0905 	add.w	r9, r6, r5
  408dda:	fbb3 f8f2 	udiv	r8, r3, r2
  408dde:	9401      	str	r4, [sp, #4]
  408de0:	f1b8 0f00 	cmp.w	r8, #0
  408de4:	d040      	beq.n	408e68 <quorem+0xc0>
  408de6:	2500      	movs	r5, #0
  408de8:	46b4      	mov	ip, r6
  408dea:	46d6      	mov	lr, sl
  408dec:	462b      	mov	r3, r5
  408dee:	f85c bb04 	ldr.w	fp, [ip], #4
  408df2:	f8de 2000 	ldr.w	r2, [lr]
  408df6:	fa1f f48b 	uxth.w	r4, fp
  408dfa:	45e1      	cmp	r9, ip
  408dfc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  408e00:	fb04 5508 	mla	r5, r4, r8, r5
  408e04:	fb0b fb08 	mul.w	fp, fp, r8
  408e08:	b2ac      	uxth	r4, r5
  408e0a:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  408e0e:	eba3 0304 	sub.w	r3, r3, r4
  408e12:	fa1f fb85 	uxth.w	fp, r5
  408e16:	fa13 f482 	uxtah	r4, r3, r2
  408e1a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  408e1e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  408e22:	fa1f fb84 	uxth.w	fp, r4
  408e26:	eb02 4324 	add.w	r3, r2, r4, asr #16
  408e2a:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  408e2e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408e32:	f84e 2b04 	str.w	r2, [lr], #4
  408e36:	d2da      	bcs.n	408dee <quorem+0x46>
  408e38:	9b00      	ldr	r3, [sp, #0]
  408e3a:	f85a 3003 	ldr.w	r3, [sl, r3]
  408e3e:	b99b      	cbnz	r3, 408e68 <quorem+0xc0>
  408e40:	9c01      	ldr	r4, [sp, #4]
  408e42:	1f23      	subs	r3, r4, #4
  408e44:	459a      	cmp	sl, r3
  408e46:	d20e      	bcs.n	408e66 <quorem+0xbe>
  408e48:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408e4c:	b95b      	cbnz	r3, 408e66 <quorem+0xbe>
  408e4e:	f1a4 0308 	sub.w	r3, r4, #8
  408e52:	e001      	b.n	408e58 <quorem+0xb0>
  408e54:	6812      	ldr	r2, [r2, #0]
  408e56:	b932      	cbnz	r2, 408e66 <quorem+0xbe>
  408e58:	459a      	cmp	sl, r3
  408e5a:	461a      	mov	r2, r3
  408e5c:	f107 37ff 	add.w	r7, r7, #4294967295
  408e60:	f1a3 0304 	sub.w	r3, r3, #4
  408e64:	d3f6      	bcc.n	408e54 <quorem+0xac>
  408e66:	6107      	str	r7, [r0, #16]
  408e68:	4604      	mov	r4, r0
  408e6a:	f002 fa7f 	bl	40b36c <__mcmp>
  408e6e:	2800      	cmp	r0, #0
  408e70:	db31      	blt.n	408ed6 <quorem+0x12e>
  408e72:	f108 0801 	add.w	r8, r8, #1
  408e76:	4655      	mov	r5, sl
  408e78:	2000      	movs	r0, #0
  408e7a:	f856 1b04 	ldr.w	r1, [r6], #4
  408e7e:	682a      	ldr	r2, [r5, #0]
  408e80:	b28b      	uxth	r3, r1
  408e82:	45b1      	cmp	r9, r6
  408e84:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408e88:	eba0 0303 	sub.w	r3, r0, r3
  408e8c:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  408e90:	fa13 f382 	uxtah	r3, r3, r2
  408e94:	eb01 4223 	add.w	r2, r1, r3, asr #16
  408e98:	b29b      	uxth	r3, r3
  408e9a:	ea4f 4022 	mov.w	r0, r2, asr #16
  408e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408ea2:	f845 3b04 	str.w	r3, [r5], #4
  408ea6:	d2e8      	bcs.n	408e7a <quorem+0xd2>
  408ea8:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  408eac:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  408eb0:	b98a      	cbnz	r2, 408ed6 <quorem+0x12e>
  408eb2:	1f1a      	subs	r2, r3, #4
  408eb4:	4592      	cmp	sl, r2
  408eb6:	d20d      	bcs.n	408ed4 <quorem+0x12c>
  408eb8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408ebc:	b952      	cbnz	r2, 408ed4 <quorem+0x12c>
  408ebe:	3b08      	subs	r3, #8
  408ec0:	e001      	b.n	408ec6 <quorem+0x11e>
  408ec2:	6812      	ldr	r2, [r2, #0]
  408ec4:	b932      	cbnz	r2, 408ed4 <quorem+0x12c>
  408ec6:	459a      	cmp	sl, r3
  408ec8:	461a      	mov	r2, r3
  408eca:	f107 37ff 	add.w	r7, r7, #4294967295
  408ece:	f1a3 0304 	sub.w	r3, r3, #4
  408ed2:	d3f6      	bcc.n	408ec2 <quorem+0x11a>
  408ed4:	6127      	str	r7, [r4, #16]
  408ed6:	4640      	mov	r0, r8
  408ed8:	b003      	add	sp, #12
  408eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ede:	2000      	movs	r0, #0
  408ee0:	b003      	add	sp, #12
  408ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ee6:	bf00      	nop

00408ee8 <_dtoa_r>:
  408ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408eec:	469b      	mov	fp, r3
  408eee:	b099      	sub	sp, #100	; 0x64
  408ef0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  408ef2:	4604      	mov	r4, r0
  408ef4:	4692      	mov	sl, r2
  408ef6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  408ef8:	b14b      	cbz	r3, 408f0e <_dtoa_r+0x26>
  408efa:	6c46      	ldr	r6, [r0, #68]	; 0x44
  408efc:	2201      	movs	r2, #1
  408efe:	4619      	mov	r1, r3
  408f00:	40b2      	lsls	r2, r6
  408f02:	605e      	str	r6, [r3, #4]
  408f04:	609a      	str	r2, [r3, #8]
  408f06:	f002 f83b 	bl	40af80 <_Bfree>
  408f0a:	2300      	movs	r3, #0
  408f0c:	6423      	str	r3, [r4, #64]	; 0x40
  408f0e:	f1bb 0f00 	cmp.w	fp, #0
  408f12:	46d9      	mov	r9, fp
  408f14:	db33      	blt.n	408f7e <_dtoa_r+0x96>
  408f16:	2300      	movs	r3, #0
  408f18:	602b      	str	r3, [r5, #0]
  408f1a:	4b99      	ldr	r3, [pc, #612]	; (409180 <_dtoa_r+0x298>)
  408f1c:	461a      	mov	r2, r3
  408f1e:	ea09 0303 	and.w	r3, r9, r3
  408f22:	4293      	cmp	r3, r2
  408f24:	d014      	beq.n	408f50 <_dtoa_r+0x68>
  408f26:	2200      	movs	r2, #0
  408f28:	2300      	movs	r3, #0
  408f2a:	4650      	mov	r0, sl
  408f2c:	4659      	mov	r1, fp
  408f2e:	f003 fb5d 	bl	40c5ec <__aeabi_dcmpeq>
  408f32:	4680      	mov	r8, r0
  408f34:	b348      	cbz	r0, 408f8a <_dtoa_r+0xa2>
  408f36:	2301      	movs	r3, #1
  408f38:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408f3a:	6013      	str	r3, [r2, #0]
  408f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408f3e:	2b00      	cmp	r3, #0
  408f40:	f000 80cb 	beq.w	4090da <_dtoa_r+0x1f2>
  408f44:	488f      	ldr	r0, [pc, #572]	; (409184 <_dtoa_r+0x29c>)
  408f46:	6018      	str	r0, [r3, #0]
  408f48:	3801      	subs	r0, #1
  408f4a:	b019      	add	sp, #100	; 0x64
  408f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f50:	f242 730f 	movw	r3, #9999	; 0x270f
  408f54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408f56:	6013      	str	r3, [r2, #0]
  408f58:	f1ba 0f00 	cmp.w	sl, #0
  408f5c:	f000 80a6 	beq.w	4090ac <_dtoa_r+0x1c4>
  408f60:	4889      	ldr	r0, [pc, #548]	; (409188 <_dtoa_r+0x2a0>)
  408f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408f64:	2b00      	cmp	r3, #0
  408f66:	d0f0      	beq.n	408f4a <_dtoa_r+0x62>
  408f68:	78c3      	ldrb	r3, [r0, #3]
  408f6a:	2b00      	cmp	r3, #0
  408f6c:	f000 80b7 	beq.w	4090de <_dtoa_r+0x1f6>
  408f70:	f100 0308 	add.w	r3, r0, #8
  408f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408f76:	6013      	str	r3, [r2, #0]
  408f78:	b019      	add	sp, #100	; 0x64
  408f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f7e:	2301      	movs	r3, #1
  408f80:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  408f84:	602b      	str	r3, [r5, #0]
  408f86:	46cb      	mov	fp, r9
  408f88:	e7c7      	b.n	408f1a <_dtoa_r+0x32>
  408f8a:	ad17      	add	r5, sp, #92	; 0x5c
  408f8c:	a916      	add	r1, sp, #88	; 0x58
  408f8e:	4620      	mov	r0, r4
  408f90:	4652      	mov	r2, sl
  408f92:	9500      	str	r5, [sp, #0]
  408f94:	465b      	mov	r3, fp
  408f96:	9101      	str	r1, [sp, #4]
  408f98:	f002 fa7e 	bl	40b498 <__d2b>
  408f9c:	9006      	str	r0, [sp, #24]
  408f9e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  408fa2:	f040 808c 	bne.w	4090be <_dtoa_r+0x1d6>
  408fa6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  408faa:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  408fae:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  408fb0:	4445      	add	r5, r8
  408fb2:	429d      	cmp	r5, r3
  408fb4:	f2c0 81cc 	blt.w	409350 <_dtoa_r+0x468>
  408fb8:	331f      	adds	r3, #31
  408fba:	f205 4212 	addw	r2, r5, #1042	; 0x412
  408fbe:	1b5b      	subs	r3, r3, r5
  408fc0:	fa2a f002 	lsr.w	r0, sl, r2
  408fc4:	fa09 f903 	lsl.w	r9, r9, r3
  408fc8:	ea49 0000 	orr.w	r0, r9, r0
  408fcc:	f003 f830 	bl	40c030 <__aeabi_ui2d>
  408fd0:	3d01      	subs	r5, #1
  408fd2:	2301      	movs	r3, #1
  408fd4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  408fd8:	9311      	str	r3, [sp, #68]	; 0x44
  408fda:	2200      	movs	r2, #0
  408fdc:	4b6b      	ldr	r3, [pc, #428]	; (40918c <_dtoa_r+0x2a4>)
  408fde:	f002 fee9 	bl	40bdb4 <__aeabi_dsub>
  408fe2:	a361      	add	r3, pc, #388	; (adr r3, 409168 <_dtoa_r+0x280>)
  408fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
  408fe8:	f003 f898 	bl	40c11c <__aeabi_dmul>
  408fec:	a360      	add	r3, pc, #384	; (adr r3, 409170 <_dtoa_r+0x288>)
  408fee:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ff2:	f002 fee1 	bl	40bdb8 <__adddf3>
  408ff6:	4606      	mov	r6, r0
  408ff8:	460f      	mov	r7, r1
  408ffa:	4628      	mov	r0, r5
  408ffc:	f003 f828 	bl	40c050 <__aeabi_i2d>
  409000:	a35d      	add	r3, pc, #372	; (adr r3, 409178 <_dtoa_r+0x290>)
  409002:	e9d3 2300 	ldrd	r2, r3, [r3]
  409006:	f003 f889 	bl	40c11c <__aeabi_dmul>
  40900a:	4602      	mov	r2, r0
  40900c:	460b      	mov	r3, r1
  40900e:	4630      	mov	r0, r6
  409010:	4639      	mov	r1, r7
  409012:	f002 fed1 	bl	40bdb8 <__adddf3>
  409016:	4606      	mov	r6, r0
  409018:	460f      	mov	r7, r1
  40901a:	f003 fb19 	bl	40c650 <__aeabi_d2iz>
  40901e:	2200      	movs	r2, #0
  409020:	9002      	str	r0, [sp, #8]
  409022:	4639      	mov	r1, r7
  409024:	4630      	mov	r0, r6
  409026:	2300      	movs	r3, #0
  409028:	f003 faea 	bl	40c600 <__aeabi_dcmplt>
  40902c:	2800      	cmp	r0, #0
  40902e:	f040 8171 	bne.w	409314 <_dtoa_r+0x42c>
  409032:	9b02      	ldr	r3, [sp, #8]
  409034:	2b16      	cmp	r3, #22
  409036:	f200 8091 	bhi.w	40915c <_dtoa_r+0x274>
  40903a:	9802      	ldr	r0, [sp, #8]
  40903c:	4652      	mov	r2, sl
  40903e:	4954      	ldr	r1, [pc, #336]	; (409190 <_dtoa_r+0x2a8>)
  409040:	465b      	mov	r3, fp
  409042:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  409046:	e9d1 0100 	ldrd	r0, r1, [r1]
  40904a:	f003 faf7 	bl	40c63c <__aeabi_dcmpgt>
  40904e:	2800      	cmp	r0, #0
  409050:	f000 817c 	beq.w	40934c <_dtoa_r+0x464>
  409054:	9b02      	ldr	r3, [sp, #8]
  409056:	3b01      	subs	r3, #1
  409058:	9302      	str	r3, [sp, #8]
  40905a:	2300      	movs	r3, #0
  40905c:	930d      	str	r3, [sp, #52]	; 0x34
  40905e:	ebc5 0508 	rsb	r5, r5, r8
  409062:	1e6b      	subs	r3, r5, #1
  409064:	9303      	str	r3, [sp, #12]
  409066:	f100 816c 	bmi.w	409342 <_dtoa_r+0x45a>
  40906a:	2300      	movs	r3, #0
  40906c:	9307      	str	r3, [sp, #28]
  40906e:	9b02      	ldr	r3, [sp, #8]
  409070:	2b00      	cmp	r3, #0
  409072:	f2c0 815d 	blt.w	409330 <_dtoa_r+0x448>
  409076:	9a03      	ldr	r2, [sp, #12]
  409078:	930c      	str	r3, [sp, #48]	; 0x30
  40907a:	4611      	mov	r1, r2
  40907c:	4419      	add	r1, r3
  40907e:	2300      	movs	r3, #0
  409080:	9103      	str	r1, [sp, #12]
  409082:	930a      	str	r3, [sp, #40]	; 0x28
  409084:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409086:	2b09      	cmp	r3, #9
  409088:	d82b      	bhi.n	4090e2 <_dtoa_r+0x1fa>
  40908a:	2b05      	cmp	r3, #5
  40908c:	f340 867e 	ble.w	409d8c <_dtoa_r+0xea4>
  409090:	3b04      	subs	r3, #4
  409092:	2500      	movs	r5, #0
  409094:	9322      	str	r3, [sp, #136]	; 0x88
  409096:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409098:	3b02      	subs	r3, #2
  40909a:	2b03      	cmp	r3, #3
  40909c:	f200 8679 	bhi.w	409d92 <_dtoa_r+0xeaa>
  4090a0:	e8df f013 	tbh	[pc, r3, lsl #1]
  4090a4:	0289029b 	.word	0x0289029b
  4090a8:	068d0180 	.word	0x068d0180
  4090ac:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4090b0:	4b35      	ldr	r3, [pc, #212]	; (409188 <_dtoa_r+0x2a0>)
  4090b2:	4a38      	ldr	r2, [pc, #224]	; (409194 <_dtoa_r+0x2ac>)
  4090b4:	2800      	cmp	r0, #0
  4090b6:	bf14      	ite	ne
  4090b8:	4618      	movne	r0, r3
  4090ba:	4610      	moveq	r0, r2
  4090bc:	e751      	b.n	408f62 <_dtoa_r+0x7a>
  4090be:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4090c2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  4090c6:	4650      	mov	r0, sl
  4090c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4090cc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4090d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  4090d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4090d8:	e77f      	b.n	408fda <_dtoa_r+0xf2>
  4090da:	482f      	ldr	r0, [pc, #188]	; (409198 <_dtoa_r+0x2b0>)
  4090dc:	e735      	b.n	408f4a <_dtoa_r+0x62>
  4090de:	1cc3      	adds	r3, r0, #3
  4090e0:	e748      	b.n	408f74 <_dtoa_r+0x8c>
  4090e2:	f04f 33ff 	mov.w	r3, #4294967295
  4090e6:	2100      	movs	r1, #0
  4090e8:	4620      	mov	r0, r4
  4090ea:	461d      	mov	r5, r3
  4090ec:	9310      	str	r3, [sp, #64]	; 0x40
  4090ee:	2301      	movs	r3, #1
  4090f0:	6461      	str	r1, [r4, #68]	; 0x44
  4090f2:	9123      	str	r1, [sp, #140]	; 0x8c
  4090f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4090f6:	f001 ff1b 	bl	40af30 <_Balloc>
  4090fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4090fc:	9005      	str	r0, [sp, #20]
  4090fe:	9322      	str	r3, [sp, #136]	; 0x88
  409100:	9504      	str	r5, [sp, #16]
  409102:	6420      	str	r0, [r4, #64]	; 0x40
  409104:	9a02      	ldr	r2, [sp, #8]
  409106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409108:	2a0e      	cmp	r2, #14
  40910a:	dc49      	bgt.n	4091a0 <_dtoa_r+0x2b8>
  40910c:	2b00      	cmp	r3, #0
  40910e:	db47      	blt.n	4091a0 <_dtoa_r+0x2b8>
  409110:	4b1f      	ldr	r3, [pc, #124]	; (409190 <_dtoa_r+0x2a8>)
  409112:	9a02      	ldr	r2, [sp, #8]
  409114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409118:	e9d3 8900 	ldrd	r8, r9, [r3]
  40911c:	9b04      	ldr	r3, [sp, #16]
  40911e:	2b00      	cmp	r3, #0
  409120:	f300 825e 	bgt.w	4095e0 <_dtoa_r+0x6f8>
  409124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409126:	2b00      	cmp	r3, #0
  409128:	f280 825a 	bge.w	4095e0 <_dtoa_r+0x6f8>
  40912c:	9b04      	ldr	r3, [sp, #16]
  40912e:	2b00      	cmp	r3, #0
  409130:	f040 85bf 	bne.w	409cb2 <_dtoa_r+0xdca>
  409134:	2200      	movs	r2, #0
  409136:	4b19      	ldr	r3, [pc, #100]	; (40919c <_dtoa_r+0x2b4>)
  409138:	4640      	mov	r0, r8
  40913a:	4649      	mov	r1, r9
  40913c:	f002 ffee 	bl	40c11c <__aeabi_dmul>
  409140:	4652      	mov	r2, sl
  409142:	465b      	mov	r3, fp
  409144:	f003 fa70 	bl	40c628 <__aeabi_dcmpge>
  409148:	9f04      	ldr	r7, [sp, #16]
  40914a:	9708      	str	r7, [sp, #32]
  40914c:	2800      	cmp	r0, #0
  40914e:	f000 80bd 	beq.w	4092cc <_dtoa_r+0x3e4>
  409152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409154:	9d05      	ldr	r5, [sp, #20]
  409156:	43db      	mvns	r3, r3
  409158:	9302      	str	r3, [sp, #8]
  40915a:	e0be      	b.n	4092da <_dtoa_r+0x3f2>
  40915c:	2301      	movs	r3, #1
  40915e:	930d      	str	r3, [sp, #52]	; 0x34
  409160:	e77d      	b.n	40905e <_dtoa_r+0x176>
  409162:	bf00      	nop
  409164:	f3af 8000 	nop.w
  409168:	636f4361 	.word	0x636f4361
  40916c:	3fd287a7 	.word	0x3fd287a7
  409170:	8b60c8b3 	.word	0x8b60c8b3
  409174:	3fc68a28 	.word	0x3fc68a28
  409178:	509f79fb 	.word	0x509f79fb
  40917c:	3fd34413 	.word	0x3fd34413
  409180:	7ff00000 	.word	0x7ff00000
  409184:	0040d909 	.word	0x0040d909
  409188:	0040d918 	.word	0x0040d918
  40918c:	3ff80000 	.word	0x3ff80000
  409190:	0040d928 	.word	0x0040d928
  409194:	0040d90c 	.word	0x0040d90c
  409198:	0040d908 	.word	0x0040d908
  40919c:	40140000 	.word	0x40140000
  4091a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4091a2:	2a00      	cmp	r2, #0
  4091a4:	f040 80e1 	bne.w	40936a <_dtoa_r+0x482>
  4091a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4091aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4091ac:	9d07      	ldr	r5, [sp, #28]
  4091ae:	9308      	str	r3, [sp, #32]
  4091b0:	9903      	ldr	r1, [sp, #12]
  4091b2:	2900      	cmp	r1, #0
  4091b4:	460b      	mov	r3, r1
  4091b6:	dd0a      	ble.n	4091ce <_dtoa_r+0x2e6>
  4091b8:	2d00      	cmp	r5, #0
  4091ba:	dd08      	ble.n	4091ce <_dtoa_r+0x2e6>
  4091bc:	42a9      	cmp	r1, r5
  4091be:	9a07      	ldr	r2, [sp, #28]
  4091c0:	bfa8      	it	ge
  4091c2:	462b      	movge	r3, r5
  4091c4:	1ad2      	subs	r2, r2, r3
  4091c6:	1aed      	subs	r5, r5, r3
  4091c8:	1acb      	subs	r3, r1, r3
  4091ca:	9207      	str	r2, [sp, #28]
  4091cc:	9303      	str	r3, [sp, #12]
  4091ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4091d0:	2b00      	cmp	r3, #0
  4091d2:	dd1b      	ble.n	40920c <_dtoa_r+0x324>
  4091d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4091d6:	2b00      	cmp	r3, #0
  4091d8:	f000 84ce 	beq.w	409b78 <_dtoa_r+0xc90>
  4091dc:	2e00      	cmp	r6, #0
  4091de:	dd11      	ble.n	409204 <_dtoa_r+0x31c>
  4091e0:	9908      	ldr	r1, [sp, #32]
  4091e2:	4632      	mov	r2, r6
  4091e4:	4620      	mov	r0, r4
  4091e6:	f002 f817 	bl	40b218 <__pow5mult>
  4091ea:	9f06      	ldr	r7, [sp, #24]
  4091ec:	4601      	mov	r1, r0
  4091ee:	9008      	str	r0, [sp, #32]
  4091f0:	463a      	mov	r2, r7
  4091f2:	4620      	mov	r0, r4
  4091f4:	f001 ff6e 	bl	40b0d4 <__multiply>
  4091f8:	4603      	mov	r3, r0
  4091fa:	4639      	mov	r1, r7
  4091fc:	4620      	mov	r0, r4
  4091fe:	9306      	str	r3, [sp, #24]
  409200:	f001 febe 	bl	40af80 <_Bfree>
  409204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409206:	1b9a      	subs	r2, r3, r6
  409208:	f040 84ff 	bne.w	409c0a <_dtoa_r+0xd22>
  40920c:	4620      	mov	r0, r4
  40920e:	2101      	movs	r1, #1
  409210:	f001 ff56 	bl	40b0c0 <__i2b>
  409214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409216:	4607      	mov	r7, r0
  409218:	2b00      	cmp	r3, #0
  40921a:	f340 8282 	ble.w	409722 <_dtoa_r+0x83a>
  40921e:	4601      	mov	r1, r0
  409220:	461a      	mov	r2, r3
  409222:	4620      	mov	r0, r4
  409224:	f001 fff8 	bl	40b218 <__pow5mult>
  409228:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40922a:	4607      	mov	r7, r0
  40922c:	2b01      	cmp	r3, #1
  40922e:	f340 84f3 	ble.w	409c18 <_dtoa_r+0xd30>
  409232:	f04f 0800 	mov.w	r8, #0
  409236:	693b      	ldr	r3, [r7, #16]
  409238:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40923c:	6918      	ldr	r0, [r3, #16]
  40923e:	f001 feeb 	bl	40b018 <__hi0bits>
  409242:	f1c0 0020 	rsb	r0, r0, #32
  409246:	9b03      	ldr	r3, [sp, #12]
  409248:	4418      	add	r0, r3
  40924a:	f010 001f 	ands.w	r0, r0, #31
  40924e:	f000 82a0 	beq.w	409792 <_dtoa_r+0x8aa>
  409252:	f1c0 0320 	rsb	r3, r0, #32
  409256:	2b04      	cmp	r3, #4
  409258:	f340 8592 	ble.w	409d80 <_dtoa_r+0xe98>
  40925c:	f1c0 001c 	rsb	r0, r0, #28
  409260:	9b07      	ldr	r3, [sp, #28]
  409262:	4405      	add	r5, r0
  409264:	4403      	add	r3, r0
  409266:	9307      	str	r3, [sp, #28]
  409268:	9b03      	ldr	r3, [sp, #12]
  40926a:	4403      	add	r3, r0
  40926c:	9303      	str	r3, [sp, #12]
  40926e:	9b07      	ldr	r3, [sp, #28]
  409270:	2b00      	cmp	r3, #0
  409272:	dd05      	ble.n	409280 <_dtoa_r+0x398>
  409274:	9906      	ldr	r1, [sp, #24]
  409276:	461a      	mov	r2, r3
  409278:	4620      	mov	r0, r4
  40927a:	f002 f81d 	bl	40b2b8 <__lshift>
  40927e:	9006      	str	r0, [sp, #24]
  409280:	9b03      	ldr	r3, [sp, #12]
  409282:	2b00      	cmp	r3, #0
  409284:	dd05      	ble.n	409292 <_dtoa_r+0x3aa>
  409286:	4639      	mov	r1, r7
  409288:	461a      	mov	r2, r3
  40928a:	4620      	mov	r0, r4
  40928c:	f002 f814 	bl	40b2b8 <__lshift>
  409290:	4607      	mov	r7, r0
  409292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409294:	2b00      	cmp	r3, #0
  409296:	f040 838b 	bne.w	4099b0 <_dtoa_r+0xac8>
  40929a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40929c:	2b02      	cmp	r3, #2
  40929e:	f340 827a 	ble.w	409796 <_dtoa_r+0x8ae>
  4092a2:	9b04      	ldr	r3, [sp, #16]
  4092a4:	2b00      	cmp	r3, #0
  4092a6:	f300 8276 	bgt.w	409796 <_dtoa_r+0x8ae>
  4092aa:	9b04      	ldr	r3, [sp, #16]
  4092ac:	2b00      	cmp	r3, #0
  4092ae:	f47f af50 	bne.w	409152 <_dtoa_r+0x26a>
  4092b2:	4639      	mov	r1, r7
  4092b4:	2205      	movs	r2, #5
  4092b6:	4620      	mov	r0, r4
  4092b8:	f001 fe6c 	bl	40af94 <__multadd>
  4092bc:	4607      	mov	r7, r0
  4092be:	9806      	ldr	r0, [sp, #24]
  4092c0:	4639      	mov	r1, r7
  4092c2:	f002 f853 	bl	40b36c <__mcmp>
  4092c6:	2800      	cmp	r0, #0
  4092c8:	f77f af43 	ble.w	409152 <_dtoa_r+0x26a>
  4092cc:	9a02      	ldr	r2, [sp, #8]
  4092ce:	2331      	movs	r3, #49	; 0x31
  4092d0:	3201      	adds	r2, #1
  4092d2:	9202      	str	r2, [sp, #8]
  4092d4:	9a05      	ldr	r2, [sp, #20]
  4092d6:	1c55      	adds	r5, r2, #1
  4092d8:	7013      	strb	r3, [r2, #0]
  4092da:	4639      	mov	r1, r7
  4092dc:	4620      	mov	r0, r4
  4092de:	f001 fe4f 	bl	40af80 <_Bfree>
  4092e2:	9b08      	ldr	r3, [sp, #32]
  4092e4:	b11b      	cbz	r3, 4092ee <_dtoa_r+0x406>
  4092e6:	9908      	ldr	r1, [sp, #32]
  4092e8:	4620      	mov	r0, r4
  4092ea:	f001 fe49 	bl	40af80 <_Bfree>
  4092ee:	4620      	mov	r0, r4
  4092f0:	9906      	ldr	r1, [sp, #24]
  4092f2:	f001 fe45 	bl	40af80 <_Bfree>
  4092f6:	2200      	movs	r2, #0
  4092f8:	9b02      	ldr	r3, [sp, #8]
  4092fa:	702a      	strb	r2, [r5, #0]
  4092fc:	3301      	adds	r3, #1
  4092fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409300:	6013      	str	r3, [r2, #0]
  409302:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409304:	2b00      	cmp	r3, #0
  409306:	f000 82a3 	beq.w	409850 <_dtoa_r+0x968>
  40930a:	9805      	ldr	r0, [sp, #20]
  40930c:	601d      	str	r5, [r3, #0]
  40930e:	b019      	add	sp, #100	; 0x64
  409310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409314:	9802      	ldr	r0, [sp, #8]
  409316:	f002 fe9b 	bl	40c050 <__aeabi_i2d>
  40931a:	4632      	mov	r2, r6
  40931c:	463b      	mov	r3, r7
  40931e:	f003 f965 	bl	40c5ec <__aeabi_dcmpeq>
  409322:	2800      	cmp	r0, #0
  409324:	f47f ae85 	bne.w	409032 <_dtoa_r+0x14a>
  409328:	9b02      	ldr	r3, [sp, #8]
  40932a:	3b01      	subs	r3, #1
  40932c:	9302      	str	r3, [sp, #8]
  40932e:	e680      	b.n	409032 <_dtoa_r+0x14a>
  409330:	9a07      	ldr	r2, [sp, #28]
  409332:	9b02      	ldr	r3, [sp, #8]
  409334:	1ad2      	subs	r2, r2, r3
  409336:	425b      	negs	r3, r3
  409338:	930a      	str	r3, [sp, #40]	; 0x28
  40933a:	2300      	movs	r3, #0
  40933c:	9207      	str	r2, [sp, #28]
  40933e:	930c      	str	r3, [sp, #48]	; 0x30
  409340:	e6a0      	b.n	409084 <_dtoa_r+0x19c>
  409342:	425b      	negs	r3, r3
  409344:	9307      	str	r3, [sp, #28]
  409346:	2300      	movs	r3, #0
  409348:	9303      	str	r3, [sp, #12]
  40934a:	e690      	b.n	40906e <_dtoa_r+0x186>
  40934c:	900d      	str	r0, [sp, #52]	; 0x34
  40934e:	e686      	b.n	40905e <_dtoa_r+0x176>
  409350:	4bbd      	ldr	r3, [pc, #756]	; (409648 <_dtoa_r+0x760>)
  409352:	1b5b      	subs	r3, r3, r5
  409354:	fa0a f003 	lsl.w	r0, sl, r3
  409358:	e638      	b.n	408fcc <_dtoa_r+0xe4>
  40935a:	2100      	movs	r1, #0
  40935c:	f04f 32ff 	mov.w	r2, #4294967295
  409360:	9123      	str	r1, [sp, #140]	; 0x8c
  409362:	2101      	movs	r1, #1
  409364:	9204      	str	r2, [sp, #16]
  409366:	910b      	str	r1, [sp, #44]	; 0x2c
  409368:	9210      	str	r2, [sp, #64]	; 0x40
  40936a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40936c:	2a01      	cmp	r2, #1
  40936e:	f340 8460 	ble.w	409c32 <_dtoa_r+0xd4a>
  409372:	9b04      	ldr	r3, [sp, #16]
  409374:	1e5e      	subs	r6, r3, #1
  409376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409378:	42b3      	cmp	r3, r6
  40937a:	f2c0 8405 	blt.w	409b88 <_dtoa_r+0xca0>
  40937e:	1b9e      	subs	r6, r3, r6
  409380:	9b04      	ldr	r3, [sp, #16]
  409382:	2b00      	cmp	r3, #0
  409384:	f2c0 8461 	blt.w	409c4a <_dtoa_r+0xd62>
  409388:	9d07      	ldr	r5, [sp, #28]
  40938a:	9b04      	ldr	r3, [sp, #16]
  40938c:	9a07      	ldr	r2, [sp, #28]
  40938e:	4620      	mov	r0, r4
  409390:	2101      	movs	r1, #1
  409392:	441a      	add	r2, r3
  409394:	9207      	str	r2, [sp, #28]
  409396:	9a03      	ldr	r2, [sp, #12]
  409398:	441a      	add	r2, r3
  40939a:	9203      	str	r2, [sp, #12]
  40939c:	f001 fe90 	bl	40b0c0 <__i2b>
  4093a0:	9008      	str	r0, [sp, #32]
  4093a2:	e705      	b.n	4091b0 <_dtoa_r+0x2c8>
  4093a4:	2301      	movs	r3, #1
  4093a6:	930b      	str	r3, [sp, #44]	; 0x2c
  4093a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4093aa:	2b00      	cmp	r3, #0
  4093ac:	f340 83df 	ble.w	409b6e <_dtoa_r+0xc86>
  4093b0:	2b0e      	cmp	r3, #14
  4093b2:	bf8c      	ite	hi
  4093b4:	2500      	movhi	r5, #0
  4093b6:	f005 0501 	andls.w	r5, r5, #1
  4093ba:	461e      	mov	r6, r3
  4093bc:	9310      	str	r3, [sp, #64]	; 0x40
  4093be:	9304      	str	r3, [sp, #16]
  4093c0:	2100      	movs	r1, #0
  4093c2:	2e17      	cmp	r6, #23
  4093c4:	6461      	str	r1, [r4, #68]	; 0x44
  4093c6:	d909      	bls.n	4093dc <_dtoa_r+0x4f4>
  4093c8:	2201      	movs	r2, #1
  4093ca:	2304      	movs	r3, #4
  4093cc:	005b      	lsls	r3, r3, #1
  4093ce:	4611      	mov	r1, r2
  4093d0:	3201      	adds	r2, #1
  4093d2:	f103 0014 	add.w	r0, r3, #20
  4093d6:	42b0      	cmp	r0, r6
  4093d8:	d9f8      	bls.n	4093cc <_dtoa_r+0x4e4>
  4093da:	6461      	str	r1, [r4, #68]	; 0x44
  4093dc:	4620      	mov	r0, r4
  4093de:	f001 fda7 	bl	40af30 <_Balloc>
  4093e2:	9005      	str	r0, [sp, #20]
  4093e4:	6420      	str	r0, [r4, #64]	; 0x40
  4093e6:	2d00      	cmp	r5, #0
  4093e8:	f43f ae8c 	beq.w	409104 <_dtoa_r+0x21c>
  4093ec:	9802      	ldr	r0, [sp, #8]
  4093ee:	2800      	cmp	r0, #0
  4093f0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  4093f4:	f340 8233 	ble.w	40985e <_dtoa_r+0x976>
  4093f8:	4a94      	ldr	r2, [pc, #592]	; (40964c <_dtoa_r+0x764>)
  4093fa:	f000 030f 	and.w	r3, r0, #15
  4093fe:	1105      	asrs	r5, r0, #4
  409400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  409404:	06ea      	lsls	r2, r5, #27
  409406:	e9d3 6700 	ldrd	r6, r7, [r3]
  40940a:	f140 821c 	bpl.w	409846 <_dtoa_r+0x95e>
  40940e:	4b90      	ldr	r3, [pc, #576]	; (409650 <_dtoa_r+0x768>)
  409410:	4650      	mov	r0, sl
  409412:	4659      	mov	r1, fp
  409414:	f005 050f 	and.w	r5, r5, #15
  409418:	f04f 0803 	mov.w	r8, #3
  40941c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409420:	f002 ffa6 	bl	40c370 <__aeabi_ddiv>
  409424:	4682      	mov	sl, r0
  409426:	468b      	mov	fp, r1
  409428:	b18d      	cbz	r5, 40944e <_dtoa_r+0x566>
  40942a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 409650 <_dtoa_r+0x768>
  40942e:	07eb      	lsls	r3, r5, #31
  409430:	4630      	mov	r0, r6
  409432:	4639      	mov	r1, r7
  409434:	d507      	bpl.n	409446 <_dtoa_r+0x55e>
  409436:	f108 0801 	add.w	r8, r8, #1
  40943a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40943e:	f002 fe6d 	bl	40c11c <__aeabi_dmul>
  409442:	4606      	mov	r6, r0
  409444:	460f      	mov	r7, r1
  409446:	106d      	asrs	r5, r5, #1
  409448:	f109 0908 	add.w	r9, r9, #8
  40944c:	d1ef      	bne.n	40942e <_dtoa_r+0x546>
  40944e:	4650      	mov	r0, sl
  409450:	4659      	mov	r1, fp
  409452:	4632      	mov	r2, r6
  409454:	463b      	mov	r3, r7
  409456:	f002 ff8b 	bl	40c370 <__aeabi_ddiv>
  40945a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40945e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409460:	b143      	cbz	r3, 409474 <_dtoa_r+0x58c>
  409462:	2200      	movs	r2, #0
  409464:	4b7b      	ldr	r3, [pc, #492]	; (409654 <_dtoa_r+0x76c>)
  409466:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40946a:	f003 f8c9 	bl	40c600 <__aeabi_dcmplt>
  40946e:	2800      	cmp	r0, #0
  409470:	f040 8393 	bne.w	409b9a <_dtoa_r+0xcb2>
  409474:	4640      	mov	r0, r8
  409476:	f002 fdeb 	bl	40c050 <__aeabi_i2d>
  40947a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40947e:	f002 fe4d 	bl	40c11c <__aeabi_dmul>
  409482:	4b75      	ldr	r3, [pc, #468]	; (409658 <_dtoa_r+0x770>)
  409484:	2200      	movs	r2, #0
  409486:	f002 fc97 	bl	40bdb8 <__adddf3>
  40948a:	9b04      	ldr	r3, [sp, #16]
  40948c:	4606      	mov	r6, r0
  40948e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  409492:	2b00      	cmp	r3, #0
  409494:	f000 8161 	beq.w	40975a <_dtoa_r+0x872>
  409498:	9b02      	ldr	r3, [sp, #8]
  40949a:	f8dd c010 	ldr.w	ip, [sp, #16]
  40949e:	9314      	str	r3, [sp, #80]	; 0x50
  4094a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4094a2:	2b00      	cmp	r3, #0
  4094a4:	f000 820b 	beq.w	4098be <_dtoa_r+0x9d6>
  4094a8:	4b68      	ldr	r3, [pc, #416]	; (40964c <_dtoa_r+0x764>)
  4094aa:	2000      	movs	r0, #0
  4094ac:	9a05      	ldr	r2, [sp, #20]
  4094ae:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4094b2:	496a      	ldr	r1, [pc, #424]	; (40965c <_dtoa_r+0x774>)
  4094b4:	1c55      	adds	r5, r2, #1
  4094b6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4094ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4094be:	f002 ff57 	bl	40c370 <__aeabi_ddiv>
  4094c2:	4632      	mov	r2, r6
  4094c4:	463b      	mov	r3, r7
  4094c6:	f002 fc75 	bl	40bdb4 <__aeabi_dsub>
  4094ca:	4682      	mov	sl, r0
  4094cc:	468b      	mov	fp, r1
  4094ce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4094d2:	4649      	mov	r1, r9
  4094d4:	4640      	mov	r0, r8
  4094d6:	f003 f8bb 	bl	40c650 <__aeabi_d2iz>
  4094da:	4606      	mov	r6, r0
  4094dc:	f002 fdb8 	bl	40c050 <__aeabi_i2d>
  4094e0:	4602      	mov	r2, r0
  4094e2:	3630      	adds	r6, #48	; 0x30
  4094e4:	460b      	mov	r3, r1
  4094e6:	4640      	mov	r0, r8
  4094e8:	4649      	mov	r1, r9
  4094ea:	f002 fc63 	bl	40bdb4 <__aeabi_dsub>
  4094ee:	9f05      	ldr	r7, [sp, #20]
  4094f0:	4680      	mov	r8, r0
  4094f2:	4689      	mov	r9, r1
  4094f4:	b2f6      	uxtb	r6, r6
  4094f6:	4650      	mov	r0, sl
  4094f8:	4659      	mov	r1, fp
  4094fa:	4642      	mov	r2, r8
  4094fc:	464b      	mov	r3, r9
  4094fe:	703e      	strb	r6, [r7, #0]
  409500:	f003 f89c 	bl	40c63c <__aeabi_dcmpgt>
  409504:	2800      	cmp	r0, #0
  409506:	f040 8243 	bne.w	409990 <_dtoa_r+0xaa8>
  40950a:	4642      	mov	r2, r8
  40950c:	464b      	mov	r3, r9
  40950e:	2000      	movs	r0, #0
  409510:	4950      	ldr	r1, [pc, #320]	; (409654 <_dtoa_r+0x76c>)
  409512:	f002 fc4f 	bl	40bdb4 <__aeabi_dsub>
  409516:	4602      	mov	r2, r0
  409518:	460b      	mov	r3, r1
  40951a:	4650      	mov	r0, sl
  40951c:	4659      	mov	r1, fp
  40951e:	f003 f88d 	bl	40c63c <__aeabi_dcmpgt>
  409522:	2800      	cmp	r0, #0
  409524:	f040 80eb 	bne.w	4096fe <_dtoa_r+0x816>
  409528:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40952c:	f1bc 0f01 	cmp.w	ip, #1
  409530:	f340 8192 	ble.w	409858 <_dtoa_r+0x970>
  409534:	9f05      	ldr	r7, [sp, #20]
  409536:	9412      	str	r4, [sp, #72]	; 0x48
  409538:	4467      	add	r7, ip
  40953a:	9708      	str	r7, [sp, #32]
  40953c:	e00e      	b.n	40955c <_dtoa_r+0x674>
  40953e:	2000      	movs	r0, #0
  409540:	4944      	ldr	r1, [pc, #272]	; (409654 <_dtoa_r+0x76c>)
  409542:	f002 fc37 	bl	40bdb4 <__aeabi_dsub>
  409546:	4652      	mov	r2, sl
  409548:	465b      	mov	r3, fp
  40954a:	f003 f859 	bl	40c600 <__aeabi_dcmplt>
  40954e:	2800      	cmp	r0, #0
  409550:	f040 83a1 	bne.w	409c96 <_dtoa_r+0xdae>
  409554:	9b08      	ldr	r3, [sp, #32]
  409556:	429d      	cmp	r5, r3
  409558:	f000 817d 	beq.w	409856 <_dtoa_r+0x96e>
  40955c:	4650      	mov	r0, sl
  40955e:	4659      	mov	r1, fp
  409560:	2200      	movs	r2, #0
  409562:	4b3f      	ldr	r3, [pc, #252]	; (409660 <_dtoa_r+0x778>)
  409564:	f002 fdda 	bl	40c11c <__aeabi_dmul>
  409568:	2200      	movs	r2, #0
  40956a:	4b3d      	ldr	r3, [pc, #244]	; (409660 <_dtoa_r+0x778>)
  40956c:	4682      	mov	sl, r0
  40956e:	468b      	mov	fp, r1
  409570:	4640      	mov	r0, r8
  409572:	4649      	mov	r1, r9
  409574:	f002 fdd2 	bl	40c11c <__aeabi_dmul>
  409578:	4606      	mov	r6, r0
  40957a:	460f      	mov	r7, r1
  40957c:	f003 f868 	bl	40c650 <__aeabi_d2iz>
  409580:	4604      	mov	r4, r0
  409582:	f002 fd65 	bl	40c050 <__aeabi_i2d>
  409586:	4602      	mov	r2, r0
  409588:	460b      	mov	r3, r1
  40958a:	3430      	adds	r4, #48	; 0x30
  40958c:	4630      	mov	r0, r6
  40958e:	4639      	mov	r1, r7
  409590:	b2e6      	uxtb	r6, r4
  409592:	f002 fc0f 	bl	40bdb4 <__aeabi_dsub>
  409596:	4680      	mov	r8, r0
  409598:	4689      	mov	r9, r1
  40959a:	4652      	mov	r2, sl
  40959c:	465b      	mov	r3, fp
  40959e:	f805 6b01 	strb.w	r6, [r5], #1
  4095a2:	f003 f82d 	bl	40c600 <__aeabi_dcmplt>
  4095a6:	4642      	mov	r2, r8
  4095a8:	464b      	mov	r3, r9
  4095aa:	2800      	cmp	r0, #0
  4095ac:	d0c7      	beq.n	40953e <_dtoa_r+0x656>
  4095ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4095b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4095b2:	9302      	str	r3, [sp, #8]
  4095b4:	e69b      	b.n	4092ee <_dtoa_r+0x406>
  4095b6:	2300      	movs	r3, #0
  4095b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4095ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4095bc:	9a02      	ldr	r2, [sp, #8]
  4095be:	4413      	add	r3, r2
  4095c0:	9310      	str	r3, [sp, #64]	; 0x40
  4095c2:	3301      	adds	r3, #1
  4095c4:	2b00      	cmp	r3, #0
  4095c6:	9304      	str	r3, [sp, #16]
  4095c8:	f340 82c9 	ble.w	409b5e <_dtoa_r+0xc76>
  4095cc:	9e04      	ldr	r6, [sp, #16]
  4095ce:	2e0e      	cmp	r6, #14
  4095d0:	bf8c      	ite	hi
  4095d2:	2500      	movhi	r5, #0
  4095d4:	f005 0501 	andls.w	r5, r5, #1
  4095d8:	e6f2      	b.n	4093c0 <_dtoa_r+0x4d8>
  4095da:	2300      	movs	r3, #0
  4095dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4095de:	e6e3      	b.n	4093a8 <_dtoa_r+0x4c0>
  4095e0:	9905      	ldr	r1, [sp, #20]
  4095e2:	4642      	mov	r2, r8
  4095e4:	464b      	mov	r3, r9
  4095e6:	4650      	mov	r0, sl
  4095e8:	1c4d      	adds	r5, r1, #1
  4095ea:	4659      	mov	r1, fp
  4095ec:	f002 fec0 	bl	40c370 <__aeabi_ddiv>
  4095f0:	4656      	mov	r6, sl
  4095f2:	f003 f82d 	bl	40c650 <__aeabi_d2iz>
  4095f6:	4682      	mov	sl, r0
  4095f8:	f002 fd2a 	bl	40c050 <__aeabi_i2d>
  4095fc:	4642      	mov	r2, r8
  4095fe:	464b      	mov	r3, r9
  409600:	f002 fd8c 	bl	40c11c <__aeabi_dmul>
  409604:	4602      	mov	r2, r0
  409606:	460b      	mov	r3, r1
  409608:	4630      	mov	r0, r6
  40960a:	4659      	mov	r1, fp
  40960c:	f002 fbd2 	bl	40bdb4 <__aeabi_dsub>
  409610:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  409614:	9a05      	ldr	r2, [sp, #20]
  409616:	4606      	mov	r6, r0
  409618:	460f      	mov	r7, r1
  40961a:	7013      	strb	r3, [r2, #0]
  40961c:	9b04      	ldr	r3, [sp, #16]
  40961e:	2b01      	cmp	r3, #1
  409620:	d04d      	beq.n	4096be <_dtoa_r+0x7d6>
  409622:	2200      	movs	r2, #0
  409624:	4b0e      	ldr	r3, [pc, #56]	; (409660 <_dtoa_r+0x778>)
  409626:	f002 fd79 	bl	40c11c <__aeabi_dmul>
  40962a:	2200      	movs	r2, #0
  40962c:	2300      	movs	r3, #0
  40962e:	4606      	mov	r6, r0
  409630:	460f      	mov	r7, r1
  409632:	f002 ffdb 	bl	40c5ec <__aeabi_dcmpeq>
  409636:	2800      	cmp	r0, #0
  409638:	f47f ae59 	bne.w	4092ee <_dtoa_r+0x406>
  40963c:	9403      	str	r4, [sp, #12]
  40963e:	f8dd b014 	ldr.w	fp, [sp, #20]
  409642:	9c04      	ldr	r4, [sp, #16]
  409644:	e019      	b.n	40967a <_dtoa_r+0x792>
  409646:	bf00      	nop
  409648:	fffffbee 	.word	0xfffffbee
  40964c:	0040d928 	.word	0x0040d928
  409650:	0040da00 	.word	0x0040da00
  409654:	3ff00000 	.word	0x3ff00000
  409658:	401c0000 	.word	0x401c0000
  40965c:	3fe00000 	.word	0x3fe00000
  409660:	40240000 	.word	0x40240000
  409664:	f002 fd5a 	bl	40c11c <__aeabi_dmul>
  409668:	2200      	movs	r2, #0
  40966a:	2300      	movs	r3, #0
  40966c:	4606      	mov	r6, r0
  40966e:	460f      	mov	r7, r1
  409670:	f002 ffbc 	bl	40c5ec <__aeabi_dcmpeq>
  409674:	2800      	cmp	r0, #0
  409676:	f040 82e5 	bne.w	409c44 <_dtoa_r+0xd5c>
  40967a:	4642      	mov	r2, r8
  40967c:	464b      	mov	r3, r9
  40967e:	4630      	mov	r0, r6
  409680:	4639      	mov	r1, r7
  409682:	f002 fe75 	bl	40c370 <__aeabi_ddiv>
  409686:	f002 ffe3 	bl	40c650 <__aeabi_d2iz>
  40968a:	4682      	mov	sl, r0
  40968c:	f002 fce0 	bl	40c050 <__aeabi_i2d>
  409690:	4642      	mov	r2, r8
  409692:	464b      	mov	r3, r9
  409694:	f002 fd42 	bl	40c11c <__aeabi_dmul>
  409698:	4602      	mov	r2, r0
  40969a:	460b      	mov	r3, r1
  40969c:	4630      	mov	r0, r6
  40969e:	4639      	mov	r1, r7
  4096a0:	f002 fb88 	bl	40bdb4 <__aeabi_dsub>
  4096a4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  4096a8:	4606      	mov	r6, r0
  4096aa:	460f      	mov	r7, r1
  4096ac:	f805 eb01 	strb.w	lr, [r5], #1
  4096b0:	ebcb 0e05 	rsb	lr, fp, r5
  4096b4:	2200      	movs	r2, #0
  4096b6:	4bb8      	ldr	r3, [pc, #736]	; (409998 <_dtoa_r+0xab0>)
  4096b8:	4574      	cmp	r4, lr
  4096ba:	d1d3      	bne.n	409664 <_dtoa_r+0x77c>
  4096bc:	9c03      	ldr	r4, [sp, #12]
  4096be:	4632      	mov	r2, r6
  4096c0:	463b      	mov	r3, r7
  4096c2:	4630      	mov	r0, r6
  4096c4:	4639      	mov	r1, r7
  4096c6:	f002 fb77 	bl	40bdb8 <__adddf3>
  4096ca:	4606      	mov	r6, r0
  4096cc:	460f      	mov	r7, r1
  4096ce:	4640      	mov	r0, r8
  4096d0:	4649      	mov	r1, r9
  4096d2:	4632      	mov	r2, r6
  4096d4:	463b      	mov	r3, r7
  4096d6:	f002 ff93 	bl	40c600 <__aeabi_dcmplt>
  4096da:	b960      	cbnz	r0, 4096f6 <_dtoa_r+0x80e>
  4096dc:	4640      	mov	r0, r8
  4096de:	4649      	mov	r1, r9
  4096e0:	4632      	mov	r2, r6
  4096e2:	463b      	mov	r3, r7
  4096e4:	f002 ff82 	bl	40c5ec <__aeabi_dcmpeq>
  4096e8:	2800      	cmp	r0, #0
  4096ea:	f43f ae00 	beq.w	4092ee <_dtoa_r+0x406>
  4096ee:	f01a 0f01 	tst.w	sl, #1
  4096f2:	f43f adfc 	beq.w	4092ee <_dtoa_r+0x406>
  4096f6:	9b02      	ldr	r3, [sp, #8]
  4096f8:	9314      	str	r3, [sp, #80]	; 0x50
  4096fa:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  4096fe:	1e6a      	subs	r2, r5, #1
  409700:	9b05      	ldr	r3, [sp, #20]
  409702:	e004      	b.n	40970e <_dtoa_r+0x826>
  409704:	429a      	cmp	r2, r3
  409706:	f000 8277 	beq.w	409bf8 <_dtoa_r+0xd10>
  40970a:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40970e:	2e39      	cmp	r6, #57	; 0x39
  409710:	f102 0501 	add.w	r5, r2, #1
  409714:	d0f6      	beq.n	409704 <_dtoa_r+0x81c>
  409716:	1c73      	adds	r3, r6, #1
  409718:	9914      	ldr	r1, [sp, #80]	; 0x50
  40971a:	b2db      	uxtb	r3, r3
  40971c:	9102      	str	r1, [sp, #8]
  40971e:	7013      	strb	r3, [r2, #0]
  409720:	e5e5      	b.n	4092ee <_dtoa_r+0x406>
  409722:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409724:	2b01      	cmp	r3, #1
  409726:	f340 8161 	ble.w	4099ec <_dtoa_r+0xb04>
  40972a:	f04f 0800 	mov.w	r8, #0
  40972e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409730:	2b00      	cmp	r3, #0
  409732:	f47f ad80 	bne.w	409236 <_dtoa_r+0x34e>
  409736:	2001      	movs	r0, #1
  409738:	e585      	b.n	409246 <_dtoa_r+0x35e>
  40973a:	4640      	mov	r0, r8
  40973c:	f002 fc88 	bl	40c050 <__aeabi_i2d>
  409740:	4602      	mov	r2, r0
  409742:	460b      	mov	r3, r1
  409744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409748:	f002 fce8 	bl	40c11c <__aeabi_dmul>
  40974c:	2200      	movs	r2, #0
  40974e:	4b93      	ldr	r3, [pc, #588]	; (40999c <_dtoa_r+0xab4>)
  409750:	f002 fb32 	bl	40bdb8 <__adddf3>
  409754:	4606      	mov	r6, r0
  409756:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40975a:	2200      	movs	r2, #0
  40975c:	4b90      	ldr	r3, [pc, #576]	; (4099a0 <_dtoa_r+0xab8>)
  40975e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409762:	f002 fb27 	bl	40bdb4 <__aeabi_dsub>
  409766:	4632      	mov	r2, r6
  409768:	463b      	mov	r3, r7
  40976a:	4680      	mov	r8, r0
  40976c:	4689      	mov	r9, r1
  40976e:	f002 ff65 	bl	40c63c <__aeabi_dcmpgt>
  409772:	4605      	mov	r5, r0
  409774:	2800      	cmp	r0, #0
  409776:	f040 809f 	bne.w	4098b8 <_dtoa_r+0x9d0>
  40977a:	4632      	mov	r2, r6
  40977c:	4640      	mov	r0, r8
  40977e:	4649      	mov	r1, r9
  409780:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  409784:	f002 ff3c 	bl	40c600 <__aeabi_dcmplt>
  409788:	2800      	cmp	r0, #0
  40978a:	d065      	beq.n	409858 <_dtoa_r+0x970>
  40978c:	462f      	mov	r7, r5
  40978e:	9508      	str	r5, [sp, #32]
  409790:	e4df      	b.n	409152 <_dtoa_r+0x26a>
  409792:	201c      	movs	r0, #28
  409794:	e564      	b.n	409260 <_dtoa_r+0x378>
  409796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409798:	2b00      	cmp	r3, #0
  40979a:	f040 814f 	bne.w	409a3c <_dtoa_r+0xb54>
  40979e:	f8dd a014 	ldr.w	sl, [sp, #20]
  4097a2:	9e06      	ldr	r6, [sp, #24]
  4097a4:	4655      	mov	r5, sl
  4097a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4097aa:	e002      	b.n	4097b2 <_dtoa_r+0x8ca>
  4097ac:	f001 fbf2 	bl	40af94 <__multadd>
  4097b0:	4606      	mov	r6, r0
  4097b2:	4639      	mov	r1, r7
  4097b4:	4630      	mov	r0, r6
  4097b6:	f7ff faf7 	bl	408da8 <quorem>
  4097ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4097be:	4631      	mov	r1, r6
  4097c0:	4620      	mov	r0, r4
  4097c2:	f805 9b01 	strb.w	r9, [r5], #1
  4097c6:	ebca 0e05 	rsb	lr, sl, r5
  4097ca:	220a      	movs	r2, #10
  4097cc:	2300      	movs	r3, #0
  4097ce:	45c6      	cmp	lr, r8
  4097d0:	dbec      	blt.n	4097ac <_dtoa_r+0x8c4>
  4097d2:	9b05      	ldr	r3, [sp, #20]
  4097d4:	f04f 0a00 	mov.w	sl, #0
  4097d8:	9a04      	ldr	r2, [sp, #16]
  4097da:	9606      	str	r6, [sp, #24]
  4097dc:	2a01      	cmp	r2, #1
  4097de:	bfac      	ite	ge
  4097e0:	189b      	addge	r3, r3, r2
  4097e2:	3301      	addlt	r3, #1
  4097e4:	461d      	mov	r5, r3
  4097e6:	9906      	ldr	r1, [sp, #24]
  4097e8:	2201      	movs	r2, #1
  4097ea:	4620      	mov	r0, r4
  4097ec:	f001 fd64 	bl	40b2b8 <__lshift>
  4097f0:	4639      	mov	r1, r7
  4097f2:	9006      	str	r0, [sp, #24]
  4097f4:	f001 fdba 	bl	40b36c <__mcmp>
  4097f8:	2800      	cmp	r0, #0
  4097fa:	f340 824e 	ble.w	409c9a <_dtoa_r+0xdb2>
  4097fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409802:	1e6b      	subs	r3, r5, #1
  409804:	9905      	ldr	r1, [sp, #20]
  409806:	e004      	b.n	409812 <_dtoa_r+0x92a>
  409808:	428b      	cmp	r3, r1
  40980a:	f000 820b 	beq.w	409c24 <_dtoa_r+0xd3c>
  40980e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  409812:	2a39      	cmp	r2, #57	; 0x39
  409814:	f103 0501 	add.w	r5, r3, #1
  409818:	d0f6      	beq.n	409808 <_dtoa_r+0x920>
  40981a:	3201      	adds	r2, #1
  40981c:	701a      	strb	r2, [r3, #0]
  40981e:	4639      	mov	r1, r7
  409820:	4620      	mov	r0, r4
  409822:	f001 fbad 	bl	40af80 <_Bfree>
  409826:	9b08      	ldr	r3, [sp, #32]
  409828:	2b00      	cmp	r3, #0
  40982a:	f43f ad60 	beq.w	4092ee <_dtoa_r+0x406>
  40982e:	459a      	cmp	sl, r3
  409830:	f43f ad59 	beq.w	4092e6 <_dtoa_r+0x3fe>
  409834:	f1ba 0f00 	cmp.w	sl, #0
  409838:	f43f ad55 	beq.w	4092e6 <_dtoa_r+0x3fe>
  40983c:	4651      	mov	r1, sl
  40983e:	4620      	mov	r0, r4
  409840:	f001 fb9e 	bl	40af80 <_Bfree>
  409844:	e54f      	b.n	4092e6 <_dtoa_r+0x3fe>
  409846:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40984a:	f04f 0802 	mov.w	r8, #2
  40984e:	e5eb      	b.n	409428 <_dtoa_r+0x540>
  409850:	9805      	ldr	r0, [sp, #20]
  409852:	f7ff bb7a 	b.w	408f4a <_dtoa_r+0x62>
  409856:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409858:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40985c:	e452      	b.n	409104 <_dtoa_r+0x21c>
  40985e:	9b02      	ldr	r3, [sp, #8]
  409860:	425d      	negs	r5, r3
  409862:	2d00      	cmp	r5, #0
  409864:	f000 81c1 	beq.w	409bea <_dtoa_r+0xd02>
  409868:	f005 020f 	and.w	r2, r5, #15
  40986c:	4b4d      	ldr	r3, [pc, #308]	; (4099a4 <_dtoa_r+0xabc>)
  40986e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409872:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  409876:	e9d3 2300 	ldrd	r2, r3, [r3]
  40987a:	f002 fc4f 	bl	40c11c <__aeabi_dmul>
  40987e:	112d      	asrs	r5, r5, #4
  409880:	e9cd 0108 	strd	r0, r1, [sp, #32]
  409884:	f000 8275 	beq.w	409d72 <_dtoa_r+0xe8a>
  409888:	4e47      	ldr	r6, [pc, #284]	; (4099a8 <_dtoa_r+0xac0>)
  40988a:	f04f 0802 	mov.w	r8, #2
  40988e:	4602      	mov	r2, r0
  409890:	460b      	mov	r3, r1
  409892:	07ef      	lsls	r7, r5, #31
  409894:	4610      	mov	r0, r2
  409896:	4619      	mov	r1, r3
  409898:	d507      	bpl.n	4098aa <_dtoa_r+0x9c2>
  40989a:	f108 0801 	add.w	r8, r8, #1
  40989e:	e9d6 2300 	ldrd	r2, r3, [r6]
  4098a2:	f002 fc3b 	bl	40c11c <__aeabi_dmul>
  4098a6:	4602      	mov	r2, r0
  4098a8:	460b      	mov	r3, r1
  4098aa:	106d      	asrs	r5, r5, #1
  4098ac:	f106 0608 	add.w	r6, r6, #8
  4098b0:	d1ef      	bne.n	409892 <_dtoa_r+0x9aa>
  4098b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4098b6:	e5d2      	b.n	40945e <_dtoa_r+0x576>
  4098b8:	2700      	movs	r7, #0
  4098ba:	9708      	str	r7, [sp, #32]
  4098bc:	e506      	b.n	4092cc <_dtoa_r+0x3e4>
  4098be:	f10c 3bff 	add.w	fp, ip, #4294967295
  4098c2:	4938      	ldr	r1, [pc, #224]	; (4099a4 <_dtoa_r+0xabc>)
  4098c4:	4632      	mov	r2, r6
  4098c6:	463b      	mov	r3, r7
  4098c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4098cc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  4098d0:	9f05      	ldr	r7, [sp, #20]
  4098d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4098d6:	f002 fc21 	bl	40c11c <__aeabi_dmul>
  4098da:	1c7d      	adds	r5, r7, #1
  4098dc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4098e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4098e4:	4649      	mov	r1, r9
  4098e6:	4640      	mov	r0, r8
  4098e8:	f002 feb2 	bl	40c650 <__aeabi_d2iz>
  4098ec:	4606      	mov	r6, r0
  4098ee:	f002 fbaf 	bl	40c050 <__aeabi_i2d>
  4098f2:	4602      	mov	r2, r0
  4098f4:	460b      	mov	r3, r1
  4098f6:	4640      	mov	r0, r8
  4098f8:	4649      	mov	r1, r9
  4098fa:	3630      	adds	r6, #48	; 0x30
  4098fc:	f002 fa5a 	bl	40bdb4 <__aeabi_dsub>
  409900:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  409904:	4680      	mov	r8, r0
  409906:	4689      	mov	r9, r1
  409908:	f1bc 0f01 	cmp.w	ip, #1
  40990c:	703e      	strb	r6, [r7, #0]
  40990e:	d020      	beq.n	409952 <_dtoa_r+0xa6a>
  409910:	9b05      	ldr	r3, [sp, #20]
  409912:	4640      	mov	r0, r8
  409914:	46aa      	mov	sl, r5
  409916:	46a8      	mov	r8, r5
  409918:	eb03 070c 	add.w	r7, r3, ip
  40991c:	46b9      	mov	r9, r7
  40991e:	2200      	movs	r2, #0
  409920:	4b1d      	ldr	r3, [pc, #116]	; (409998 <_dtoa_r+0xab0>)
  409922:	f002 fbfb 	bl	40c11c <__aeabi_dmul>
  409926:	460f      	mov	r7, r1
  409928:	4606      	mov	r6, r0
  40992a:	f002 fe91 	bl	40c650 <__aeabi_d2iz>
  40992e:	4605      	mov	r5, r0
  409930:	f002 fb8e 	bl	40c050 <__aeabi_i2d>
  409934:	4602      	mov	r2, r0
  409936:	460b      	mov	r3, r1
  409938:	3530      	adds	r5, #48	; 0x30
  40993a:	4630      	mov	r0, r6
  40993c:	4639      	mov	r1, r7
  40993e:	f002 fa39 	bl	40bdb4 <__aeabi_dsub>
  409942:	f80a 5b01 	strb.w	r5, [sl], #1
  409946:	45ca      	cmp	sl, r9
  409948:	d1e9      	bne.n	40991e <_dtoa_r+0xa36>
  40994a:	4645      	mov	r5, r8
  40994c:	4689      	mov	r9, r1
  40994e:	4680      	mov	r8, r0
  409950:	445d      	add	r5, fp
  409952:	2200      	movs	r2, #0
  409954:	4b15      	ldr	r3, [pc, #84]	; (4099ac <_dtoa_r+0xac4>)
  409956:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40995a:	f002 fa2d 	bl	40bdb8 <__adddf3>
  40995e:	4642      	mov	r2, r8
  409960:	464b      	mov	r3, r9
  409962:	f002 fe4d 	bl	40c600 <__aeabi_dcmplt>
  409966:	2800      	cmp	r0, #0
  409968:	f47f aec7 	bne.w	4096fa <_dtoa_r+0x812>
  40996c:	2000      	movs	r0, #0
  40996e:	490f      	ldr	r1, [pc, #60]	; (4099ac <_dtoa_r+0xac4>)
  409970:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  409974:	f002 fa1e 	bl	40bdb4 <__aeabi_dsub>
  409978:	4642      	mov	r2, r8
  40997a:	464b      	mov	r3, r9
  40997c:	f002 fe5e 	bl	40c63c <__aeabi_dcmpgt>
  409980:	b908      	cbnz	r0, 409986 <_dtoa_r+0xa9e>
  409982:	e769      	b.n	409858 <_dtoa_r+0x970>
  409984:	4615      	mov	r5, r2
  409986:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40998a:	1e6a      	subs	r2, r5, #1
  40998c:	2b30      	cmp	r3, #48	; 0x30
  40998e:	d0f9      	beq.n	409984 <_dtoa_r+0xa9c>
  409990:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409992:	9302      	str	r3, [sp, #8]
  409994:	e4ab      	b.n	4092ee <_dtoa_r+0x406>
  409996:	bf00      	nop
  409998:	40240000 	.word	0x40240000
  40999c:	401c0000 	.word	0x401c0000
  4099a0:	40140000 	.word	0x40140000
  4099a4:	0040d928 	.word	0x0040d928
  4099a8:	0040da00 	.word	0x0040da00
  4099ac:	3fe00000 	.word	0x3fe00000
  4099b0:	9806      	ldr	r0, [sp, #24]
  4099b2:	4639      	mov	r1, r7
  4099b4:	f001 fcda 	bl	40b36c <__mcmp>
  4099b8:	2800      	cmp	r0, #0
  4099ba:	f6bf ac6e 	bge.w	40929a <_dtoa_r+0x3b2>
  4099be:	9e02      	ldr	r6, [sp, #8]
  4099c0:	2300      	movs	r3, #0
  4099c2:	9906      	ldr	r1, [sp, #24]
  4099c4:	4620      	mov	r0, r4
  4099c6:	3e01      	subs	r6, #1
  4099c8:	220a      	movs	r2, #10
  4099ca:	9602      	str	r6, [sp, #8]
  4099cc:	f001 fae2 	bl	40af94 <__multadd>
  4099d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4099d2:	9006      	str	r0, [sp, #24]
  4099d4:	bb1b      	cbnz	r3, 409a1e <_dtoa_r+0xb36>
  4099d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4099d8:	2b02      	cmp	r3, #2
  4099da:	f340 81ce 	ble.w	409d7a <_dtoa_r+0xe92>
  4099de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4099e0:	2b00      	cmp	r3, #0
  4099e2:	f300 81ca 	bgt.w	409d7a <_dtoa_r+0xe92>
  4099e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4099e8:	9304      	str	r3, [sp, #16]
  4099ea:	e45e      	b.n	4092aa <_dtoa_r+0x3c2>
  4099ec:	f1ba 0f00 	cmp.w	sl, #0
  4099f0:	f47f ae9b 	bne.w	40972a <_dtoa_r+0x842>
  4099f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4099f8:	2b00      	cmp	r3, #0
  4099fa:	f47f ae96 	bne.w	40972a <_dtoa_r+0x842>
  4099fe:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  409a02:	0d36      	lsrs	r6, r6, #20
  409a04:	0536      	lsls	r6, r6, #20
  409a06:	2e00      	cmp	r6, #0
  409a08:	f000 818a 	beq.w	409d20 <_dtoa_r+0xe38>
  409a0c:	9b07      	ldr	r3, [sp, #28]
  409a0e:	f04f 0801 	mov.w	r8, #1
  409a12:	3301      	adds	r3, #1
  409a14:	9307      	str	r3, [sp, #28]
  409a16:	9b03      	ldr	r3, [sp, #12]
  409a18:	3301      	adds	r3, #1
  409a1a:	9303      	str	r3, [sp, #12]
  409a1c:	e687      	b.n	40972e <_dtoa_r+0x846>
  409a1e:	2300      	movs	r3, #0
  409a20:	9908      	ldr	r1, [sp, #32]
  409a22:	4620      	mov	r0, r4
  409a24:	220a      	movs	r2, #10
  409a26:	f001 fab5 	bl	40af94 <__multadd>
  409a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409a2c:	9008      	str	r0, [sp, #32]
  409a2e:	2b02      	cmp	r3, #2
  409a30:	dd02      	ble.n	409a38 <_dtoa_r+0xb50>
  409a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409a34:	2b00      	cmp	r3, #0
  409a36:	ddd6      	ble.n	4099e6 <_dtoa_r+0xafe>
  409a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409a3a:	9304      	str	r3, [sp, #16]
  409a3c:	2d00      	cmp	r5, #0
  409a3e:	dd05      	ble.n	409a4c <_dtoa_r+0xb64>
  409a40:	9908      	ldr	r1, [sp, #32]
  409a42:	462a      	mov	r2, r5
  409a44:	4620      	mov	r0, r4
  409a46:	f001 fc37 	bl	40b2b8 <__lshift>
  409a4a:	9008      	str	r0, [sp, #32]
  409a4c:	f1b8 0f00 	cmp.w	r8, #0
  409a50:	f040 8133 	bne.w	409cba <_dtoa_r+0xdd2>
  409a54:	9e08      	ldr	r6, [sp, #32]
  409a56:	f00a 0101 	and.w	r1, sl, #1
  409a5a:	9b04      	ldr	r3, [sp, #16]
  409a5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409a5e:	3b01      	subs	r3, #1
  409a60:	910b      	str	r1, [sp, #44]	; 0x2c
  409a62:	9905      	ldr	r1, [sp, #20]
  409a64:	fab2 f282 	clz	r2, r2
  409a68:	970a      	str	r7, [sp, #40]	; 0x28
  409a6a:	18cb      	adds	r3, r1, r3
  409a6c:	4688      	mov	r8, r1
  409a6e:	f8dd b020 	ldr.w	fp, [sp, #32]
  409a72:	930c      	str	r3, [sp, #48]	; 0x30
  409a74:	0953      	lsrs	r3, r2, #5
  409a76:	9f06      	ldr	r7, [sp, #24]
  409a78:	9303      	str	r3, [sp, #12]
  409a7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409a7c:	4638      	mov	r0, r7
  409a7e:	4629      	mov	r1, r5
  409a80:	f7ff f992 	bl	408da8 <quorem>
  409a84:	4659      	mov	r1, fp
  409a86:	4681      	mov	r9, r0
  409a88:	4638      	mov	r0, r7
  409a8a:	f001 fc6f 	bl	40b36c <__mcmp>
  409a8e:	4629      	mov	r1, r5
  409a90:	4632      	mov	r2, r6
  409a92:	4682      	mov	sl, r0
  409a94:	4620      	mov	r0, r4
  409a96:	f001 fc8d 	bl	40b3b4 <__mdiff>
  409a9a:	68c2      	ldr	r2, [r0, #12]
  409a9c:	4605      	mov	r5, r0
  409a9e:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  409aa2:	9207      	str	r2, [sp, #28]
  409aa4:	2a00      	cmp	r2, #0
  409aa6:	d150      	bne.n	409b4a <_dtoa_r+0xc62>
  409aa8:	4629      	mov	r1, r5
  409aaa:	4638      	mov	r0, r7
  409aac:	f8cd c018 	str.w	ip, [sp, #24]
  409ab0:	f001 fc5c 	bl	40b36c <__mcmp>
  409ab4:	4629      	mov	r1, r5
  409ab6:	9004      	str	r0, [sp, #16]
  409ab8:	4620      	mov	r0, r4
  409aba:	f001 fa61 	bl	40af80 <_Bfree>
  409abe:	9a03      	ldr	r2, [sp, #12]
  409ac0:	9b04      	ldr	r3, [sp, #16]
  409ac2:	f8dd c018 	ldr.w	ip, [sp, #24]
  409ac6:	b132      	cbz	r2, 409ad6 <_dtoa_r+0xbee>
  409ac8:	b92b      	cbnz	r3, 409ad6 <_dtoa_r+0xbee>
  409aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409acc:	9a07      	ldr	r2, [sp, #28]
  409ace:	2b00      	cmp	r3, #0
  409ad0:	f000 8128 	beq.w	409d24 <_dtoa_r+0xe3c>
  409ad4:	4613      	mov	r3, r2
  409ad6:	f1ba 0f00 	cmp.w	sl, #0
  409ada:	f2c0 80bc 	blt.w	409c56 <_dtoa_r+0xd6e>
  409ade:	9a03      	ldr	r2, [sp, #12]
  409ae0:	b132      	cbz	r2, 409af0 <_dtoa_r+0xc08>
  409ae2:	f1ba 0f00 	cmp.w	sl, #0
  409ae6:	d103      	bne.n	409af0 <_dtoa_r+0xc08>
  409ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409aea:	2a00      	cmp	r2, #0
  409aec:	f000 80b3 	beq.w	409c56 <_dtoa_r+0xd6e>
  409af0:	2b00      	cmp	r3, #0
  409af2:	f300 80fe 	bgt.w	409cf2 <_dtoa_r+0xe0a>
  409af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409af8:	f108 0901 	add.w	r9, r8, #1
  409afc:	f888 c000 	strb.w	ip, [r8]
  409b00:	4598      	cmp	r8, r3
  409b02:	464d      	mov	r5, r9
  409b04:	f000 8106 	beq.w	409d14 <_dtoa_r+0xe2c>
  409b08:	4639      	mov	r1, r7
  409b0a:	220a      	movs	r2, #10
  409b0c:	2300      	movs	r3, #0
  409b0e:	4620      	mov	r0, r4
  409b10:	f001 fa40 	bl	40af94 <__multadd>
  409b14:	45b3      	cmp	fp, r6
  409b16:	4607      	mov	r7, r0
  409b18:	4659      	mov	r1, fp
  409b1a:	4620      	mov	r0, r4
  409b1c:	f04f 020a 	mov.w	r2, #10
  409b20:	f04f 0300 	mov.w	r3, #0
  409b24:	d00b      	beq.n	409b3e <_dtoa_r+0xc56>
  409b26:	f001 fa35 	bl	40af94 <__multadd>
  409b2a:	4631      	mov	r1, r6
  409b2c:	4683      	mov	fp, r0
  409b2e:	220a      	movs	r2, #10
  409b30:	4620      	mov	r0, r4
  409b32:	2300      	movs	r3, #0
  409b34:	f001 fa2e 	bl	40af94 <__multadd>
  409b38:	46c8      	mov	r8, r9
  409b3a:	4606      	mov	r6, r0
  409b3c:	e79d      	b.n	409a7a <_dtoa_r+0xb92>
  409b3e:	f001 fa29 	bl	40af94 <__multadd>
  409b42:	46c8      	mov	r8, r9
  409b44:	4683      	mov	fp, r0
  409b46:	4606      	mov	r6, r0
  409b48:	e797      	b.n	409a7a <_dtoa_r+0xb92>
  409b4a:	4601      	mov	r1, r0
  409b4c:	4620      	mov	r0, r4
  409b4e:	f8cd c010 	str.w	ip, [sp, #16]
  409b52:	f001 fa15 	bl	40af80 <_Bfree>
  409b56:	2301      	movs	r3, #1
  409b58:	f8dd c010 	ldr.w	ip, [sp, #16]
  409b5c:	e7bb      	b.n	409ad6 <_dtoa_r+0xbee>
  409b5e:	2b0e      	cmp	r3, #14
  409b60:	bf8c      	ite	hi
  409b62:	2300      	movhi	r3, #0
  409b64:	2301      	movls	r3, #1
  409b66:	2100      	movs	r1, #0
  409b68:	401d      	ands	r5, r3
  409b6a:	6461      	str	r1, [r4, #68]	; 0x44
  409b6c:	e436      	b.n	4093dc <_dtoa_r+0x4f4>
  409b6e:	2301      	movs	r3, #1
  409b70:	9323      	str	r3, [sp, #140]	; 0x8c
  409b72:	9310      	str	r3, [sp, #64]	; 0x40
  409b74:	9304      	str	r3, [sp, #16]
  409b76:	e7f6      	b.n	409b66 <_dtoa_r+0xc7e>
  409b78:	9906      	ldr	r1, [sp, #24]
  409b7a:	4620      	mov	r0, r4
  409b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b7e:	f001 fb4b 	bl	40b218 <__pow5mult>
  409b82:	9006      	str	r0, [sp, #24]
  409b84:	f7ff bb42 	b.w	40920c <_dtoa_r+0x324>
  409b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409b8c:	1af3      	subs	r3, r6, r3
  409b8e:	960a      	str	r6, [sp, #40]	; 0x28
  409b90:	2600      	movs	r6, #0
  409b92:	441a      	add	r2, r3
  409b94:	920c      	str	r2, [sp, #48]	; 0x30
  409b96:	f7ff bbf3 	b.w	409380 <_dtoa_r+0x498>
  409b9a:	9b04      	ldr	r3, [sp, #16]
  409b9c:	2b00      	cmp	r3, #0
  409b9e:	f43f adcc 	beq.w	40973a <_dtoa_r+0x852>
  409ba2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  409ba4:	2d00      	cmp	r5, #0
  409ba6:	f77f ae57 	ble.w	409858 <_dtoa_r+0x970>
  409baa:	2200      	movs	r2, #0
  409bac:	4b86      	ldr	r3, [pc, #536]	; (409dc8 <_dtoa_r+0xee0>)
  409bae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409bb2:	f002 fab3 	bl	40c11c <__aeabi_dmul>
  409bb6:	9b02      	ldr	r3, [sp, #8]
  409bb8:	4606      	mov	r6, r0
  409bba:	460f      	mov	r7, r1
  409bbc:	3b01      	subs	r3, #1
  409bbe:	f108 0001 	add.w	r0, r8, #1
  409bc2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  409bc6:	9314      	str	r3, [sp, #80]	; 0x50
  409bc8:	f002 fa42 	bl	40c050 <__aeabi_i2d>
  409bcc:	4602      	mov	r2, r0
  409bce:	460b      	mov	r3, r1
  409bd0:	4630      	mov	r0, r6
  409bd2:	4639      	mov	r1, r7
  409bd4:	f002 faa2 	bl	40c11c <__aeabi_dmul>
  409bd8:	2200      	movs	r2, #0
  409bda:	4b7c      	ldr	r3, [pc, #496]	; (409dcc <_dtoa_r+0xee4>)
  409bdc:	f002 f8ec 	bl	40bdb8 <__adddf3>
  409be0:	46ac      	mov	ip, r5
  409be2:	4606      	mov	r6, r0
  409be4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  409be8:	e45a      	b.n	4094a0 <_dtoa_r+0x5b8>
  409bea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  409bee:	f04f 0802 	mov.w	r8, #2
  409bf2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409bf6:	e432      	b.n	40945e <_dtoa_r+0x576>
  409bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409bfa:	2130      	movs	r1, #48	; 0x30
  409bfc:	3301      	adds	r3, #1
  409bfe:	7011      	strb	r1, [r2, #0]
  409c00:	9302      	str	r3, [sp, #8]
  409c02:	2331      	movs	r3, #49	; 0x31
  409c04:	7013      	strb	r3, [r2, #0]
  409c06:	f7ff bb72 	b.w	4092ee <_dtoa_r+0x406>
  409c0a:	9906      	ldr	r1, [sp, #24]
  409c0c:	4620      	mov	r0, r4
  409c0e:	f001 fb03 	bl	40b218 <__pow5mult>
  409c12:	9006      	str	r0, [sp, #24]
  409c14:	f7ff bafa 	b.w	40920c <_dtoa_r+0x324>
  409c18:	f1ba 0f00 	cmp.w	sl, #0
  409c1c:	f43f aeea 	beq.w	4099f4 <_dtoa_r+0xb0c>
  409c20:	f7ff bb07 	b.w	409232 <_dtoa_r+0x34a>
  409c24:	9a02      	ldr	r2, [sp, #8]
  409c26:	2331      	movs	r3, #49	; 0x31
  409c28:	3201      	adds	r2, #1
  409c2a:	9202      	str	r2, [sp, #8]
  409c2c:	9a05      	ldr	r2, [sp, #20]
  409c2e:	7013      	strb	r3, [r2, #0]
  409c30:	e5f5      	b.n	40981e <_dtoa_r+0x936>
  409c32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c34:	2a00      	cmp	r2, #0
  409c36:	d055      	beq.n	409ce4 <_dtoa_r+0xdfc>
  409c38:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409c3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409c3e:	9d07      	ldr	r5, [sp, #28]
  409c40:	f7ff bba4 	b.w	40938c <_dtoa_r+0x4a4>
  409c44:	9c03      	ldr	r4, [sp, #12]
  409c46:	f7ff bb52 	b.w	4092ee <_dtoa_r+0x406>
  409c4a:	9b07      	ldr	r3, [sp, #28]
  409c4c:	9a04      	ldr	r2, [sp, #16]
  409c4e:	1a9d      	subs	r5, r3, r2
  409c50:	2300      	movs	r3, #0
  409c52:	f7ff bb9b 	b.w	40938c <_dtoa_r+0x4a4>
  409c56:	2b00      	cmp	r3, #0
  409c58:	9706      	str	r7, [sp, #24]
  409c5a:	46e1      	mov	r9, ip
  409c5c:	f8cd b020 	str.w	fp, [sp, #32]
  409c60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409c62:	4665      	mov	r5, ip
  409c64:	dd0f      	ble.n	409c86 <_dtoa_r+0xd9e>
  409c66:	9906      	ldr	r1, [sp, #24]
  409c68:	2201      	movs	r2, #1
  409c6a:	4620      	mov	r0, r4
  409c6c:	f001 fb24 	bl	40b2b8 <__lshift>
  409c70:	4639      	mov	r1, r7
  409c72:	9006      	str	r0, [sp, #24]
  409c74:	f001 fb7a 	bl	40b36c <__mcmp>
  409c78:	2800      	cmp	r0, #0
  409c7a:	dd75      	ble.n	409d68 <_dtoa_r+0xe80>
  409c7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  409c80:	d066      	beq.n	409d50 <_dtoa_r+0xe68>
  409c82:	f109 0501 	add.w	r5, r9, #1
  409c86:	f8dd a020 	ldr.w	sl, [sp, #32]
  409c8a:	f888 5000 	strb.w	r5, [r8]
  409c8e:	f108 0501 	add.w	r5, r8, #1
  409c92:	9608      	str	r6, [sp, #32]
  409c94:	e5c3      	b.n	40981e <_dtoa_r+0x936>
  409c96:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409c98:	e531      	b.n	4096fe <_dtoa_r+0x816>
  409c9a:	d104      	bne.n	409ca6 <_dtoa_r+0xdbe>
  409c9c:	f019 0f01 	tst.w	r9, #1
  409ca0:	d001      	beq.n	409ca6 <_dtoa_r+0xdbe>
  409ca2:	e5ac      	b.n	4097fe <_dtoa_r+0x916>
  409ca4:	4615      	mov	r5, r2
  409ca6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409caa:	1e6a      	subs	r2, r5, #1
  409cac:	2b30      	cmp	r3, #48	; 0x30
  409cae:	d0f9      	beq.n	409ca4 <_dtoa_r+0xdbc>
  409cb0:	e5b5      	b.n	40981e <_dtoa_r+0x936>
  409cb2:	2700      	movs	r7, #0
  409cb4:	9708      	str	r7, [sp, #32]
  409cb6:	f7ff ba4c 	b.w	409152 <_dtoa_r+0x26a>
  409cba:	9e08      	ldr	r6, [sp, #32]
  409cbc:	4620      	mov	r0, r4
  409cbe:	6871      	ldr	r1, [r6, #4]
  409cc0:	f001 f936 	bl	40af30 <_Balloc>
  409cc4:	6933      	ldr	r3, [r6, #16]
  409cc6:	4605      	mov	r5, r0
  409cc8:	f106 010c 	add.w	r1, r6, #12
  409ccc:	1c9a      	adds	r2, r3, #2
  409cce:	300c      	adds	r0, #12
  409cd0:	0092      	lsls	r2, r2, #2
  409cd2:	f001 f82d 	bl	40ad30 <memcpy>
  409cd6:	4620      	mov	r0, r4
  409cd8:	4629      	mov	r1, r5
  409cda:	2201      	movs	r2, #1
  409cdc:	f001 faec 	bl	40b2b8 <__lshift>
  409ce0:	4606      	mov	r6, r0
  409ce2:	e6b8      	b.n	409a56 <_dtoa_r+0xb6e>
  409ce4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  409ce6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409ce8:	9d07      	ldr	r5, [sp, #28]
  409cea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409cee:	f7ff bb4d 	b.w	40938c <_dtoa_r+0x4a4>
  409cf2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409cf6:	9706      	str	r7, [sp, #24]
  409cf8:	f8cd b020 	str.w	fp, [sp, #32]
  409cfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409cfe:	d030      	beq.n	409d62 <_dtoa_r+0xe7a>
  409d00:	f10c 0901 	add.w	r9, ip, #1
  409d04:	f8dd a020 	ldr.w	sl, [sp, #32]
  409d08:	f108 0501 	add.w	r5, r8, #1
  409d0c:	9608      	str	r6, [sp, #32]
  409d0e:	f888 9000 	strb.w	r9, [r8]
  409d12:	e584      	b.n	40981e <_dtoa_r+0x936>
  409d14:	9706      	str	r7, [sp, #24]
  409d16:	46e1      	mov	r9, ip
  409d18:	46da      	mov	sl, fp
  409d1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409d1c:	9608      	str	r6, [sp, #32]
  409d1e:	e562      	b.n	4097e6 <_dtoa_r+0x8fe>
  409d20:	46b0      	mov	r8, r6
  409d22:	e504      	b.n	40972e <_dtoa_r+0x846>
  409d24:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409d28:	9706      	str	r7, [sp, #24]
  409d2a:	f8cd b020 	str.w	fp, [sp, #32]
  409d2e:	4655      	mov	r5, sl
  409d30:	46cb      	mov	fp, r9
  409d32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409d34:	46e1      	mov	r9, ip
  409d36:	d00b      	beq.n	409d50 <_dtoa_r+0xe68>
  409d38:	2d00      	cmp	r5, #0
  409d3a:	dd01      	ble.n	409d40 <_dtoa_r+0xe58>
  409d3c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  409d40:	f8dd a020 	ldr.w	sl, [sp, #32]
  409d44:	f108 0501 	add.w	r5, r8, #1
  409d48:	f888 9000 	strb.w	r9, [r8]
  409d4c:	9608      	str	r6, [sp, #32]
  409d4e:	e566      	b.n	40981e <_dtoa_r+0x936>
  409d50:	f8dd a020 	ldr.w	sl, [sp, #32]
  409d54:	9608      	str	r6, [sp, #32]
  409d56:	2239      	movs	r2, #57	; 0x39
  409d58:	f108 0501 	add.w	r5, r8, #1
  409d5c:	f888 2000 	strb.w	r2, [r8]
  409d60:	e54f      	b.n	409802 <_dtoa_r+0x91a>
  409d62:	46da      	mov	sl, fp
  409d64:	9608      	str	r6, [sp, #32]
  409d66:	e7f6      	b.n	409d56 <_dtoa_r+0xe6e>
  409d68:	d18d      	bne.n	409c86 <_dtoa_r+0xd9e>
  409d6a:	f019 0f01 	tst.w	r9, #1
  409d6e:	d08a      	beq.n	409c86 <_dtoa_r+0xd9e>
  409d70:	e784      	b.n	409c7c <_dtoa_r+0xd94>
  409d72:	f04f 0802 	mov.w	r8, #2
  409d76:	f7ff bb72 	b.w	40945e <_dtoa_r+0x576>
  409d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409d7c:	9304      	str	r3, [sp, #16]
  409d7e:	e50e      	b.n	40979e <_dtoa_r+0x8b6>
  409d80:	f43f aa75 	beq.w	40926e <_dtoa_r+0x386>
  409d84:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409d88:	f7ff ba6a 	b.w	409260 <_dtoa_r+0x378>
  409d8c:	2501      	movs	r5, #1
  409d8e:	f7ff b982 	b.w	409096 <_dtoa_r+0x1ae>
  409d92:	2500      	movs	r5, #0
  409d94:	4620      	mov	r0, r4
  409d96:	6465      	str	r5, [r4, #68]	; 0x44
  409d98:	4629      	mov	r1, r5
  409d9a:	f001 f8c9 	bl	40af30 <_Balloc>
  409d9e:	9a02      	ldr	r2, [sp, #8]
  409da0:	9005      	str	r0, [sp, #20]
  409da2:	2a0e      	cmp	r2, #14
  409da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409da6:	6420      	str	r0, [r4, #64]	; 0x40
  409da8:	f73f aad7 	bgt.w	40935a <_dtoa_r+0x472>
  409dac:	42ab      	cmp	r3, r5
  409dae:	f6ff aad4 	blt.w	40935a <_dtoa_r+0x472>
  409db2:	f04f 33ff 	mov.w	r3, #4294967295
  409db6:	9523      	str	r5, [sp, #140]	; 0x8c
  409db8:	9304      	str	r3, [sp, #16]
  409dba:	f7ff b9a9 	b.w	409110 <_dtoa_r+0x228>
  409dbe:	2301      	movs	r3, #1
  409dc0:	930b      	str	r3, [sp, #44]	; 0x2c
  409dc2:	f7ff bbfa 	b.w	4095ba <_dtoa_r+0x6d2>
  409dc6:	bf00      	nop
  409dc8:	40240000 	.word	0x40240000
  409dcc:	401c0000 	.word	0x401c0000

00409dd0 <__sflush_r>:
  409dd0:	898b      	ldrh	r3, [r1, #12]
  409dd2:	b29a      	uxth	r2, r3
  409dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409dd8:	460d      	mov	r5, r1
  409dda:	0711      	lsls	r1, r2, #28
  409ddc:	4680      	mov	r8, r0
  409dde:	d43c      	bmi.n	409e5a <__sflush_r+0x8a>
  409de0:	686a      	ldr	r2, [r5, #4]
  409de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409de6:	2a00      	cmp	r2, #0
  409de8:	81ab      	strh	r3, [r5, #12]
  409dea:	dd76      	ble.n	409eda <__sflush_r+0x10a>
  409dec:	6aae      	ldr	r6, [r5, #40]	; 0x28
  409dee:	2e00      	cmp	r6, #0
  409df0:	d04b      	beq.n	409e8a <__sflush_r+0xba>
  409df2:	b29b      	uxth	r3, r3
  409df4:	2100      	movs	r1, #0
  409df6:	f8d8 4000 	ldr.w	r4, [r8]
  409dfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  409dfe:	f8c8 1000 	str.w	r1, [r8]
  409e02:	b292      	uxth	r2, r2
  409e04:	2a00      	cmp	r2, #0
  409e06:	d06c      	beq.n	409ee2 <__sflush_r+0x112>
  409e08:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409e0a:	075f      	lsls	r7, r3, #29
  409e0c:	d505      	bpl.n	409e1a <__sflush_r+0x4a>
  409e0e:	6869      	ldr	r1, [r5, #4]
  409e10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409e12:	1a52      	subs	r2, r2, r1
  409e14:	b10b      	cbz	r3, 409e1a <__sflush_r+0x4a>
  409e16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409e18:	1ad2      	subs	r2, r2, r3
  409e1a:	4640      	mov	r0, r8
  409e1c:	69e9      	ldr	r1, [r5, #28]
  409e1e:	2300      	movs	r3, #0
  409e20:	47b0      	blx	r6
  409e22:	1c46      	adds	r6, r0, #1
  409e24:	d03e      	beq.n	409ea4 <__sflush_r+0xd4>
  409e26:	89ab      	ldrh	r3, [r5, #12]
  409e28:	2100      	movs	r1, #0
  409e2a:	692a      	ldr	r2, [r5, #16]
  409e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409e30:	6069      	str	r1, [r5, #4]
  409e32:	602a      	str	r2, [r5, #0]
  409e34:	b29b      	uxth	r3, r3
  409e36:	04da      	lsls	r2, r3, #19
  409e38:	81ab      	strh	r3, [r5, #12]
  409e3a:	d44c      	bmi.n	409ed6 <__sflush_r+0x106>
  409e3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409e3e:	f8c8 4000 	str.w	r4, [r8]
  409e42:	b311      	cbz	r1, 409e8a <__sflush_r+0xba>
  409e44:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409e48:	4299      	cmp	r1, r3
  409e4a:	d002      	beq.n	409e52 <__sflush_r+0x82>
  409e4c:	4640      	mov	r0, r8
  409e4e:	f000 f96b 	bl	40a128 <_free_r>
  409e52:	2000      	movs	r0, #0
  409e54:	6328      	str	r0, [r5, #48]	; 0x30
  409e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e5a:	692e      	ldr	r6, [r5, #16]
  409e5c:	b1ae      	cbz	r6, 409e8a <__sflush_r+0xba>
  409e5e:	682c      	ldr	r4, [r5, #0]
  409e60:	0791      	lsls	r1, r2, #30
  409e62:	602e      	str	r6, [r5, #0]
  409e64:	eba4 0406 	sub.w	r4, r4, r6
  409e68:	d11a      	bne.n	409ea0 <__sflush_r+0xd0>
  409e6a:	696b      	ldr	r3, [r5, #20]
  409e6c:	60ab      	str	r3, [r5, #8]
  409e6e:	e00a      	b.n	409e86 <__sflush_r+0xb6>
  409e70:	4632      	mov	r2, r6
  409e72:	4623      	mov	r3, r4
  409e74:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409e76:	4640      	mov	r0, r8
  409e78:	69e9      	ldr	r1, [r5, #28]
  409e7a:	47b8      	blx	r7
  409e7c:	2800      	cmp	r0, #0
  409e7e:	eba4 0400 	sub.w	r4, r4, r0
  409e82:	4406      	add	r6, r0
  409e84:	dd04      	ble.n	409e90 <__sflush_r+0xc0>
  409e86:	2c00      	cmp	r4, #0
  409e88:	dcf2      	bgt.n	409e70 <__sflush_r+0xa0>
  409e8a:	2000      	movs	r0, #0
  409e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e90:	89ab      	ldrh	r3, [r5, #12]
  409e92:	f04f 30ff 	mov.w	r0, #4294967295
  409e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e9a:	81ab      	strh	r3, [r5, #12]
  409e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ea0:	2300      	movs	r3, #0
  409ea2:	e7e3      	b.n	409e6c <__sflush_r+0x9c>
  409ea4:	f8d8 3000 	ldr.w	r3, [r8]
  409ea8:	fab3 f283 	clz	r2, r3
  409eac:	2b00      	cmp	r3, #0
  409eae:	bf18      	it	ne
  409eb0:	2b1d      	cmpne	r3, #29
  409eb2:	ea4f 1252 	mov.w	r2, r2, lsr #5
  409eb6:	d001      	beq.n	409ebc <__sflush_r+0xec>
  409eb8:	2b16      	cmp	r3, #22
  409eba:	d127      	bne.n	409f0c <__sflush_r+0x13c>
  409ebc:	89ab      	ldrh	r3, [r5, #12]
  409ebe:	2600      	movs	r6, #0
  409ec0:	6929      	ldr	r1, [r5, #16]
  409ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409ec6:	b29b      	uxth	r3, r3
  409ec8:	81ab      	strh	r3, [r5, #12]
  409eca:	04db      	lsls	r3, r3, #19
  409ecc:	e885 0042 	stmia.w	r5, {r1, r6}
  409ed0:	d5b4      	bpl.n	409e3c <__sflush_r+0x6c>
  409ed2:	2a00      	cmp	r2, #0
  409ed4:	d0b2      	beq.n	409e3c <__sflush_r+0x6c>
  409ed6:	6528      	str	r0, [r5, #80]	; 0x50
  409ed8:	e7b0      	b.n	409e3c <__sflush_r+0x6c>
  409eda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409edc:	2a00      	cmp	r2, #0
  409ede:	dc85      	bgt.n	409dec <__sflush_r+0x1c>
  409ee0:	e7d3      	b.n	409e8a <__sflush_r+0xba>
  409ee2:	2301      	movs	r3, #1
  409ee4:	4640      	mov	r0, r8
  409ee6:	69e9      	ldr	r1, [r5, #28]
  409ee8:	47b0      	blx	r6
  409eea:	1c43      	adds	r3, r0, #1
  409eec:	4602      	mov	r2, r0
  409eee:	d002      	beq.n	409ef6 <__sflush_r+0x126>
  409ef0:	89ab      	ldrh	r3, [r5, #12]
  409ef2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  409ef4:	e789      	b.n	409e0a <__sflush_r+0x3a>
  409ef6:	f8d8 3000 	ldr.w	r3, [r8]
  409efa:	2b00      	cmp	r3, #0
  409efc:	d0f8      	beq.n	409ef0 <__sflush_r+0x120>
  409efe:	2b16      	cmp	r3, #22
  409f00:	d001      	beq.n	409f06 <__sflush_r+0x136>
  409f02:	2b1d      	cmp	r3, #29
  409f04:	d1c4      	bne.n	409e90 <__sflush_r+0xc0>
  409f06:	f8c8 4000 	str.w	r4, [r8]
  409f0a:	e7be      	b.n	409e8a <__sflush_r+0xba>
  409f0c:	89ab      	ldrh	r3, [r5, #12]
  409f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f12:	81ab      	strh	r3, [r5, #12]
  409f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409f18 <_fflush_r>:
  409f18:	b510      	push	{r4, lr}
  409f1a:	4604      	mov	r4, r0
  409f1c:	b082      	sub	sp, #8
  409f1e:	b108      	cbz	r0, 409f24 <_fflush_r+0xc>
  409f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409f22:	b153      	cbz	r3, 409f3a <_fflush_r+0x22>
  409f24:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  409f28:	b908      	cbnz	r0, 409f2e <_fflush_r+0x16>
  409f2a:	b002      	add	sp, #8
  409f2c:	bd10      	pop	{r4, pc}
  409f2e:	4620      	mov	r0, r4
  409f30:	b002      	add	sp, #8
  409f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409f36:	f7ff bf4b 	b.w	409dd0 <__sflush_r>
  409f3a:	9101      	str	r1, [sp, #4]
  409f3c:	f000 f886 	bl	40a04c <__sinit>
  409f40:	9901      	ldr	r1, [sp, #4]
  409f42:	e7ef      	b.n	409f24 <_fflush_r+0xc>

00409f44 <_cleanup_r>:
  409f44:	4901      	ldr	r1, [pc, #4]	; (409f4c <_cleanup_r+0x8>)
  409f46:	f000 bb59 	b.w	40a5fc <_fwalk_reent>
  409f4a:	bf00      	nop
  409f4c:	0040bc8d 	.word	0x0040bc8d

00409f50 <__sinit.part.1>:
  409f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f54:	4682      	mov	sl, r0
  409f56:	2400      	movs	r4, #0
  409f58:	4837      	ldr	r0, [pc, #220]	; (40a038 <__sinit.part.1+0xe8>)
  409f5a:	2103      	movs	r1, #3
  409f5c:	f8da 5004 	ldr.w	r5, [sl, #4]
  409f60:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  409f64:	2604      	movs	r6, #4
  409f66:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  409f6a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  409f6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  409f72:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  409f76:	4621      	mov	r1, r4
  409f78:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  409f7c:	2208      	movs	r2, #8
  409f7e:	81ae      	strh	r6, [r5, #12]
  409f80:	602c      	str	r4, [r5, #0]
  409f82:	606c      	str	r4, [r5, #4]
  409f84:	60ac      	str	r4, [r5, #8]
  409f86:	666c      	str	r4, [r5, #100]	; 0x64
  409f88:	81ec      	strh	r4, [r5, #14]
  409f8a:	612c      	str	r4, [r5, #16]
  409f8c:	616c      	str	r4, [r5, #20]
  409f8e:	61ac      	str	r4, [r5, #24]
  409f90:	f7fd fa26 	bl	4073e0 <memset>
  409f94:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40a040 <__sinit.part.1+0xf0>
  409f98:	f8da 6008 	ldr.w	r6, [sl, #8]
  409f9c:	f04f 0301 	mov.w	r3, #1
  409fa0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40a044 <__sinit.part.1+0xf4>
  409fa4:	f04f 0e09 	mov.w	lr, #9
  409fa8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40a048 <__sinit.part.1+0xf8>
  409fac:	4621      	mov	r1, r4
  409fae:	4f23      	ldr	r7, [pc, #140]	; (40a03c <__sinit.part.1+0xec>)
  409fb0:	2208      	movs	r2, #8
  409fb2:	61ed      	str	r5, [r5, #28]
  409fb4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  409fb8:	f8c5 b020 	str.w	fp, [r5, #32]
  409fbc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  409fc0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  409fc4:	62ef      	str	r7, [r5, #44]	; 0x2c
  409fc6:	81f3      	strh	r3, [r6, #14]
  409fc8:	f8a6 e00c 	strh.w	lr, [r6, #12]
  409fcc:	6034      	str	r4, [r6, #0]
  409fce:	6074      	str	r4, [r6, #4]
  409fd0:	60b4      	str	r4, [r6, #8]
  409fd2:	6674      	str	r4, [r6, #100]	; 0x64
  409fd4:	6134      	str	r4, [r6, #16]
  409fd6:	6174      	str	r4, [r6, #20]
  409fd8:	61b4      	str	r4, [r6, #24]
  409fda:	f7fd fa01 	bl	4073e0 <memset>
  409fde:	f8da 500c 	ldr.w	r5, [sl, #12]
  409fe2:	f04f 0c12 	mov.w	ip, #18
  409fe6:	f04f 0e02 	mov.w	lr, #2
  409fea:	61f6      	str	r6, [r6, #28]
  409fec:	4621      	mov	r1, r4
  409fee:	f8c6 b020 	str.w	fp, [r6, #32]
  409ff2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  409ff6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  409ffa:	2208      	movs	r2, #8
  409ffc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  40a000:	62f7      	str	r7, [r6, #44]	; 0x2c
  40a002:	602c      	str	r4, [r5, #0]
  40a004:	606c      	str	r4, [r5, #4]
  40a006:	60ac      	str	r4, [r5, #8]
  40a008:	666c      	str	r4, [r5, #100]	; 0x64
  40a00a:	612c      	str	r4, [r5, #16]
  40a00c:	616c      	str	r4, [r5, #20]
  40a00e:	61ac      	str	r4, [r5, #24]
  40a010:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40a014:	f8a5 e00e 	strh.w	lr, [r5, #14]
  40a018:	f7fd f9e2 	bl	4073e0 <memset>
  40a01c:	2301      	movs	r3, #1
  40a01e:	61ed      	str	r5, [r5, #28]
  40a020:	f8c5 b020 	str.w	fp, [r5, #32]
  40a024:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40a028:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40a02c:	62ef      	str	r7, [r5, #44]	; 0x2c
  40a02e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40a032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a036:	bf00      	nop
  40a038:	00409f45 	.word	0x00409f45
  40a03c:	0040ba21 	.word	0x0040ba21
  40a040:	0040b9a1 	.word	0x0040b9a1
  40a044:	0040b9c5 	.word	0x0040b9c5
  40a048:	0040b9fd 	.word	0x0040b9fd

0040a04c <__sinit>:
  40a04c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a04e:	b103      	cbz	r3, 40a052 <__sinit+0x6>
  40a050:	4770      	bx	lr
  40a052:	f7ff bf7d 	b.w	409f50 <__sinit.part.1>
  40a056:	bf00      	nop

0040a058 <__sfp_lock_acquire>:
  40a058:	4770      	bx	lr
  40a05a:	bf00      	nop

0040a05c <__sfp_lock_release>:
  40a05c:	4770      	bx	lr
  40a05e:	bf00      	nop

0040a060 <__libc_fini_array>:
  40a060:	b538      	push	{r3, r4, r5, lr}
  40a062:	4b08      	ldr	r3, [pc, #32]	; (40a084 <__libc_fini_array+0x24>)
  40a064:	4d08      	ldr	r5, [pc, #32]	; (40a088 <__libc_fini_array+0x28>)
  40a066:	1aed      	subs	r5, r5, r3
  40a068:	10ac      	asrs	r4, r5, #2
  40a06a:	bf18      	it	ne
  40a06c:	18ed      	addne	r5, r5, r3
  40a06e:	d005      	beq.n	40a07c <__libc_fini_array+0x1c>
  40a070:	3c01      	subs	r4, #1
  40a072:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40a076:	4798      	blx	r3
  40a078:	2c00      	cmp	r4, #0
  40a07a:	d1f9      	bne.n	40a070 <__libc_fini_array+0x10>
  40a07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a080:	f003 bcdc 	b.w	40da3c <_fini>
  40a084:	0040da48 	.word	0x0040da48
  40a088:	0040da4c 	.word	0x0040da4c

0040a08c <_malloc_trim_r>:
  40a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a08e:	4f22      	ldr	r7, [pc, #136]	; (40a118 <_malloc_trim_r+0x8c>)
  40a090:	460c      	mov	r4, r1
  40a092:	4606      	mov	r6, r0
  40a094:	f000 ff48 	bl	40af28 <__malloc_lock>
  40a098:	68ba      	ldr	r2, [r7, #8]
  40a09a:	4b20      	ldr	r3, [pc, #128]	; (40a11c <_malloc_trim_r+0x90>)
  40a09c:	6855      	ldr	r5, [r2, #4]
  40a09e:	f025 0503 	bic.w	r5, r5, #3
  40a0a2:	1b2c      	subs	r4, r5, r4
  40a0a4:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40a0a8:	4023      	ands	r3, r4
  40a0aa:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40a0ae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a0b2:	db07      	blt.n	40a0c4 <_malloc_trim_r+0x38>
  40a0b4:	4630      	mov	r0, r6
  40a0b6:	2100      	movs	r1, #0
  40a0b8:	f001 fc60 	bl	40b97c <_sbrk_r>
  40a0bc:	68bb      	ldr	r3, [r7, #8]
  40a0be:	442b      	add	r3, r5
  40a0c0:	4298      	cmp	r0, r3
  40a0c2:	d004      	beq.n	40a0ce <_malloc_trim_r+0x42>
  40a0c4:	4630      	mov	r0, r6
  40a0c6:	f000 ff31 	bl	40af2c <__malloc_unlock>
  40a0ca:	2000      	movs	r0, #0
  40a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0ce:	4630      	mov	r0, r6
  40a0d0:	4261      	negs	r1, r4
  40a0d2:	f001 fc53 	bl	40b97c <_sbrk_r>
  40a0d6:	3001      	adds	r0, #1
  40a0d8:	d00d      	beq.n	40a0f6 <_malloc_trim_r+0x6a>
  40a0da:	4a11      	ldr	r2, [pc, #68]	; (40a120 <_malloc_trim_r+0x94>)
  40a0dc:	1b2d      	subs	r5, r5, r4
  40a0de:	68b9      	ldr	r1, [r7, #8]
  40a0e0:	4630      	mov	r0, r6
  40a0e2:	6813      	ldr	r3, [r2, #0]
  40a0e4:	f045 0501 	orr.w	r5, r5, #1
  40a0e8:	1b1b      	subs	r3, r3, r4
  40a0ea:	604d      	str	r5, [r1, #4]
  40a0ec:	6013      	str	r3, [r2, #0]
  40a0ee:	f000 ff1d 	bl	40af2c <__malloc_unlock>
  40a0f2:	2001      	movs	r0, #1
  40a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0f6:	4630      	mov	r0, r6
  40a0f8:	2100      	movs	r1, #0
  40a0fa:	f001 fc3f 	bl	40b97c <_sbrk_r>
  40a0fe:	68ba      	ldr	r2, [r7, #8]
  40a100:	1a83      	subs	r3, r0, r2
  40a102:	2b0f      	cmp	r3, #15
  40a104:	ddde      	ble.n	40a0c4 <_malloc_trim_r+0x38>
  40a106:	4c07      	ldr	r4, [pc, #28]	; (40a124 <_malloc_trim_r+0x98>)
  40a108:	f043 0301 	orr.w	r3, r3, #1
  40a10c:	4904      	ldr	r1, [pc, #16]	; (40a120 <_malloc_trim_r+0x94>)
  40a10e:	6824      	ldr	r4, [r4, #0]
  40a110:	6053      	str	r3, [r2, #4]
  40a112:	1b00      	subs	r0, r0, r4
  40a114:	6008      	str	r0, [r1, #0]
  40a116:	e7d5      	b.n	40a0c4 <_malloc_trim_r+0x38>
  40a118:	20400504 	.word	0x20400504
  40a11c:	fffff000 	.word	0xfffff000
  40a120:	204009f4 	.word	0x204009f4
  40a124:	20400910 	.word	0x20400910

0040a128 <_free_r>:
  40a128:	2900      	cmp	r1, #0
  40a12a:	d04d      	beq.n	40a1c8 <_free_r+0xa0>
  40a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a130:	460c      	mov	r4, r1
  40a132:	4680      	mov	r8, r0
  40a134:	f000 fef8 	bl	40af28 <__malloc_lock>
  40a138:	4963      	ldr	r1, [pc, #396]	; (40a2c8 <_free_r+0x1a0>)
  40a13a:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40a13e:	f1a4 0508 	sub.w	r5, r4, #8
  40a142:	688e      	ldr	r6, [r1, #8]
  40a144:	f027 0301 	bic.w	r3, r7, #1
  40a148:	18ea      	adds	r2, r5, r3
  40a14a:	6850      	ldr	r0, [r2, #4]
  40a14c:	4296      	cmp	r6, r2
  40a14e:	f020 0003 	bic.w	r0, r0, #3
  40a152:	d059      	beq.n	40a208 <_free_r+0xe0>
  40a154:	07fe      	lsls	r6, r7, #31
  40a156:	6050      	str	r0, [r2, #4]
  40a158:	d40b      	bmi.n	40a172 <_free_r+0x4a>
  40a15a:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40a15e:	f101 0708 	add.w	r7, r1, #8
  40a162:	1b2d      	subs	r5, r5, r4
  40a164:	4423      	add	r3, r4
  40a166:	68ac      	ldr	r4, [r5, #8]
  40a168:	42bc      	cmp	r4, r7
  40a16a:	d066      	beq.n	40a23a <_free_r+0x112>
  40a16c:	68ef      	ldr	r7, [r5, #12]
  40a16e:	60e7      	str	r7, [r4, #12]
  40a170:	60bc      	str	r4, [r7, #8]
  40a172:	1814      	adds	r4, r2, r0
  40a174:	6864      	ldr	r4, [r4, #4]
  40a176:	07e4      	lsls	r4, r4, #31
  40a178:	d40c      	bmi.n	40a194 <_free_r+0x6c>
  40a17a:	4c54      	ldr	r4, [pc, #336]	; (40a2cc <_free_r+0x1a4>)
  40a17c:	4403      	add	r3, r0
  40a17e:	6890      	ldr	r0, [r2, #8]
  40a180:	42a0      	cmp	r0, r4
  40a182:	d07c      	beq.n	40a27e <_free_r+0x156>
  40a184:	68d4      	ldr	r4, [r2, #12]
  40a186:	f043 0201 	orr.w	r2, r3, #1
  40a18a:	60c4      	str	r4, [r0, #12]
  40a18c:	60a0      	str	r0, [r4, #8]
  40a18e:	606a      	str	r2, [r5, #4]
  40a190:	50eb      	str	r3, [r5, r3]
  40a192:	e003      	b.n	40a19c <_free_r+0x74>
  40a194:	f043 0201 	orr.w	r2, r3, #1
  40a198:	606a      	str	r2, [r5, #4]
  40a19a:	50eb      	str	r3, [r5, r3]
  40a19c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a1a0:	d213      	bcs.n	40a1ca <_free_r+0xa2>
  40a1a2:	08db      	lsrs	r3, r3, #3
  40a1a4:	2001      	movs	r0, #1
  40a1a6:	684a      	ldr	r2, [r1, #4]
  40a1a8:	109c      	asrs	r4, r3, #2
  40a1aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40a1ae:	40a0      	lsls	r0, r4
  40a1b0:	689c      	ldr	r4, [r3, #8]
  40a1b2:	4302      	orrs	r2, r0
  40a1b4:	60eb      	str	r3, [r5, #12]
  40a1b6:	60ac      	str	r4, [r5, #8]
  40a1b8:	604a      	str	r2, [r1, #4]
  40a1ba:	609d      	str	r5, [r3, #8]
  40a1bc:	60e5      	str	r5, [r4, #12]
  40a1be:	4640      	mov	r0, r8
  40a1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a1c4:	f000 beb2 	b.w	40af2c <__malloc_unlock>
  40a1c8:	4770      	bx	lr
  40a1ca:	0a5a      	lsrs	r2, r3, #9
  40a1cc:	2a04      	cmp	r2, #4
  40a1ce:	d847      	bhi.n	40a260 <_free_r+0x138>
  40a1d0:	099a      	lsrs	r2, r3, #6
  40a1d2:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40a1d6:	0060      	lsls	r0, r4, #1
  40a1d8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40a1dc:	493a      	ldr	r1, [pc, #232]	; (40a2c8 <_free_r+0x1a0>)
  40a1de:	6882      	ldr	r2, [r0, #8]
  40a1e0:	4282      	cmp	r2, r0
  40a1e2:	d043      	beq.n	40a26c <_free_r+0x144>
  40a1e4:	6851      	ldr	r1, [r2, #4]
  40a1e6:	f021 0103 	bic.w	r1, r1, #3
  40a1ea:	4299      	cmp	r1, r3
  40a1ec:	d902      	bls.n	40a1f4 <_free_r+0xcc>
  40a1ee:	6892      	ldr	r2, [r2, #8]
  40a1f0:	4290      	cmp	r0, r2
  40a1f2:	d1f7      	bne.n	40a1e4 <_free_r+0xbc>
  40a1f4:	68d3      	ldr	r3, [r2, #12]
  40a1f6:	60eb      	str	r3, [r5, #12]
  40a1f8:	4640      	mov	r0, r8
  40a1fa:	60aa      	str	r2, [r5, #8]
  40a1fc:	609d      	str	r5, [r3, #8]
  40a1fe:	60d5      	str	r5, [r2, #12]
  40a200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a204:	f000 be92 	b.w	40af2c <__malloc_unlock>
  40a208:	07ff      	lsls	r7, r7, #31
  40a20a:	4403      	add	r3, r0
  40a20c:	d407      	bmi.n	40a21e <_free_r+0xf6>
  40a20e:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40a212:	1aad      	subs	r5, r5, r2
  40a214:	4413      	add	r3, r2
  40a216:	68a8      	ldr	r0, [r5, #8]
  40a218:	68ea      	ldr	r2, [r5, #12]
  40a21a:	60c2      	str	r2, [r0, #12]
  40a21c:	6090      	str	r0, [r2, #8]
  40a21e:	4a2c      	ldr	r2, [pc, #176]	; (40a2d0 <_free_r+0x1a8>)
  40a220:	f043 0001 	orr.w	r0, r3, #1
  40a224:	6812      	ldr	r2, [r2, #0]
  40a226:	6068      	str	r0, [r5, #4]
  40a228:	4293      	cmp	r3, r2
  40a22a:	608d      	str	r5, [r1, #8]
  40a22c:	d3c7      	bcc.n	40a1be <_free_r+0x96>
  40a22e:	4b29      	ldr	r3, [pc, #164]	; (40a2d4 <_free_r+0x1ac>)
  40a230:	4640      	mov	r0, r8
  40a232:	6819      	ldr	r1, [r3, #0]
  40a234:	f7ff ff2a 	bl	40a08c <_malloc_trim_r>
  40a238:	e7c1      	b.n	40a1be <_free_r+0x96>
  40a23a:	1811      	adds	r1, r2, r0
  40a23c:	6849      	ldr	r1, [r1, #4]
  40a23e:	07c9      	lsls	r1, r1, #31
  40a240:	d409      	bmi.n	40a256 <_free_r+0x12e>
  40a242:	4403      	add	r3, r0
  40a244:	68d1      	ldr	r1, [r2, #12]
  40a246:	6892      	ldr	r2, [r2, #8]
  40a248:	f043 0001 	orr.w	r0, r3, #1
  40a24c:	60d1      	str	r1, [r2, #12]
  40a24e:	608a      	str	r2, [r1, #8]
  40a250:	6068      	str	r0, [r5, #4]
  40a252:	50eb      	str	r3, [r5, r3]
  40a254:	e7b3      	b.n	40a1be <_free_r+0x96>
  40a256:	f043 0201 	orr.w	r2, r3, #1
  40a25a:	606a      	str	r2, [r5, #4]
  40a25c:	50eb      	str	r3, [r5, r3]
  40a25e:	e7ae      	b.n	40a1be <_free_r+0x96>
  40a260:	2a14      	cmp	r2, #20
  40a262:	d815      	bhi.n	40a290 <_free_r+0x168>
  40a264:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  40a268:	0060      	lsls	r0, r4, #1
  40a26a:	e7b5      	b.n	40a1d8 <_free_r+0xb0>
  40a26c:	10a4      	asrs	r4, r4, #2
  40a26e:	2701      	movs	r7, #1
  40a270:	6848      	ldr	r0, [r1, #4]
  40a272:	4613      	mov	r3, r2
  40a274:	fa07 f404 	lsl.w	r4, r7, r4
  40a278:	4320      	orrs	r0, r4
  40a27a:	6048      	str	r0, [r1, #4]
  40a27c:	e7bb      	b.n	40a1f6 <_free_r+0xce>
  40a27e:	f043 0201 	orr.w	r2, r3, #1
  40a282:	614d      	str	r5, [r1, #20]
  40a284:	610d      	str	r5, [r1, #16]
  40a286:	60e8      	str	r0, [r5, #12]
  40a288:	60a8      	str	r0, [r5, #8]
  40a28a:	606a      	str	r2, [r5, #4]
  40a28c:	50eb      	str	r3, [r5, r3]
  40a28e:	e796      	b.n	40a1be <_free_r+0x96>
  40a290:	2a54      	cmp	r2, #84	; 0x54
  40a292:	d804      	bhi.n	40a29e <_free_r+0x176>
  40a294:	0b1a      	lsrs	r2, r3, #12
  40a296:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40a29a:	0060      	lsls	r0, r4, #1
  40a29c:	e79c      	b.n	40a1d8 <_free_r+0xb0>
  40a29e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a2a2:	d804      	bhi.n	40a2ae <_free_r+0x186>
  40a2a4:	0bda      	lsrs	r2, r3, #15
  40a2a6:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40a2aa:	0060      	lsls	r0, r4, #1
  40a2ac:	e794      	b.n	40a1d8 <_free_r+0xb0>
  40a2ae:	f240 5054 	movw	r0, #1364	; 0x554
  40a2b2:	4282      	cmp	r2, r0
  40a2b4:	d804      	bhi.n	40a2c0 <_free_r+0x198>
  40a2b6:	0c9a      	lsrs	r2, r3, #18
  40a2b8:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  40a2bc:	0060      	lsls	r0, r4, #1
  40a2be:	e78b      	b.n	40a1d8 <_free_r+0xb0>
  40a2c0:	20fc      	movs	r0, #252	; 0xfc
  40a2c2:	247e      	movs	r4, #126	; 0x7e
  40a2c4:	e788      	b.n	40a1d8 <_free_r+0xb0>
  40a2c6:	bf00      	nop
  40a2c8:	20400504 	.word	0x20400504
  40a2cc:	2040050c 	.word	0x2040050c
  40a2d0:	2040090c 	.word	0x2040090c
  40a2d4:	204009f0 	.word	0x204009f0

0040a2d8 <__sfvwrite_r>:
  40a2d8:	6893      	ldr	r3, [r2, #8]
  40a2da:	2b00      	cmp	r3, #0
  40a2dc:	d07a      	beq.n	40a3d4 <__sfvwrite_r+0xfc>
  40a2de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a2e2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40a2e6:	b083      	sub	sp, #12
  40a2e8:	460c      	mov	r4, r1
  40a2ea:	4681      	mov	r9, r0
  40a2ec:	f01e 0f08 	tst.w	lr, #8
  40a2f0:	4616      	mov	r6, r2
  40a2f2:	d026      	beq.n	40a342 <__sfvwrite_r+0x6a>
  40a2f4:	690b      	ldr	r3, [r1, #16]
  40a2f6:	b323      	cbz	r3, 40a342 <__sfvwrite_r+0x6a>
  40a2f8:	f00e 0802 	and.w	r8, lr, #2
  40a2fc:	6835      	ldr	r5, [r6, #0]
  40a2fe:	fa1f f088 	uxth.w	r0, r8
  40a302:	b370      	cbz	r0, 40a362 <__sfvwrite_r+0x8a>
  40a304:	f04f 0a00 	mov.w	sl, #0
  40a308:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 40a5f8 <__sfvwrite_r+0x320>
  40a30c:	46d0      	mov	r8, sl
  40a30e:	45d8      	cmp	r8, fp
  40a310:	4643      	mov	r3, r8
  40a312:	4652      	mov	r2, sl
  40a314:	4648      	mov	r0, r9
  40a316:	bf28      	it	cs
  40a318:	465b      	movcs	r3, fp
  40a31a:	f1b8 0f00 	cmp.w	r8, #0
  40a31e:	d053      	beq.n	40a3c8 <__sfvwrite_r+0xf0>
  40a320:	69e1      	ldr	r1, [r4, #28]
  40a322:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a324:	47b8      	blx	r7
  40a326:	2800      	cmp	r0, #0
  40a328:	dd73      	ble.n	40a412 <__sfvwrite_r+0x13a>
  40a32a:	68b3      	ldr	r3, [r6, #8]
  40a32c:	4482      	add	sl, r0
  40a32e:	ebc0 0808 	rsb	r8, r0, r8
  40a332:	1a18      	subs	r0, r3, r0
  40a334:	60b0      	str	r0, [r6, #8]
  40a336:	2800      	cmp	r0, #0
  40a338:	d1e9      	bne.n	40a30e <__sfvwrite_r+0x36>
  40a33a:	2000      	movs	r0, #0
  40a33c:	b003      	add	sp, #12
  40a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a342:	4648      	mov	r0, r9
  40a344:	4621      	mov	r1, r4
  40a346:	f7fe fcbd 	bl	408cc4 <__swsetup_r>
  40a34a:	2800      	cmp	r0, #0
  40a34c:	f040 814c 	bne.w	40a5e8 <__sfvwrite_r+0x310>
  40a350:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40a354:	6835      	ldr	r5, [r6, #0]
  40a356:	f00e 0802 	and.w	r8, lr, #2
  40a35a:	fa1f f088 	uxth.w	r0, r8
  40a35e:	2800      	cmp	r0, #0
  40a360:	d1d0      	bne.n	40a304 <__sfvwrite_r+0x2c>
  40a362:	f01e 0b01 	ands.w	fp, lr, #1
  40a366:	d15d      	bne.n	40a424 <__sfvwrite_r+0x14c>
  40a368:	46d8      	mov	r8, fp
  40a36a:	f1b8 0f00 	cmp.w	r8, #0
  40a36e:	d025      	beq.n	40a3bc <__sfvwrite_r+0xe4>
  40a370:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40a374:	68a7      	ldr	r7, [r4, #8]
  40a376:	d02f      	beq.n	40a3d8 <__sfvwrite_r+0x100>
  40a378:	45b8      	cmp	r8, r7
  40a37a:	46ba      	mov	sl, r7
  40a37c:	f0c0 80a8 	bcc.w	40a4d0 <__sfvwrite_r+0x1f8>
  40a380:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40a384:	f040 80b5 	bne.w	40a4f2 <__sfvwrite_r+0x21a>
  40a388:	6820      	ldr	r0, [r4, #0]
  40a38a:	4659      	mov	r1, fp
  40a38c:	4652      	mov	r2, sl
  40a38e:	f000 fd69 	bl	40ae64 <memmove>
  40a392:	68a2      	ldr	r2, [r4, #8]
  40a394:	6821      	ldr	r1, [r4, #0]
  40a396:	4640      	mov	r0, r8
  40a398:	1bd7      	subs	r7, r2, r7
  40a39a:	eb01 030a 	add.w	r3, r1, sl
  40a39e:	60a7      	str	r7, [r4, #8]
  40a3a0:	6023      	str	r3, [r4, #0]
  40a3a2:	68b3      	ldr	r3, [r6, #8]
  40a3a4:	4483      	add	fp, r0
  40a3a6:	ebc0 0808 	rsb	r8, r0, r8
  40a3aa:	1a18      	subs	r0, r3, r0
  40a3ac:	60b0      	str	r0, [r6, #8]
  40a3ae:	2800      	cmp	r0, #0
  40a3b0:	d0c3      	beq.n	40a33a <__sfvwrite_r+0x62>
  40a3b2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40a3b6:	f1b8 0f00 	cmp.w	r8, #0
  40a3ba:	d1d9      	bne.n	40a370 <__sfvwrite_r+0x98>
  40a3bc:	f8d5 b000 	ldr.w	fp, [r5]
  40a3c0:	3508      	adds	r5, #8
  40a3c2:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40a3c6:	e7d0      	b.n	40a36a <__sfvwrite_r+0x92>
  40a3c8:	f8d5 a000 	ldr.w	sl, [r5]
  40a3cc:	3508      	adds	r5, #8
  40a3ce:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40a3d2:	e79c      	b.n	40a30e <__sfvwrite_r+0x36>
  40a3d4:	2000      	movs	r0, #0
  40a3d6:	4770      	bx	lr
  40a3d8:	6820      	ldr	r0, [r4, #0]
  40a3da:	6923      	ldr	r3, [r4, #16]
  40a3dc:	4298      	cmp	r0, r3
  40a3de:	d803      	bhi.n	40a3e8 <__sfvwrite_r+0x110>
  40a3e0:	6963      	ldr	r3, [r4, #20]
  40a3e2:	4598      	cmp	r8, r3
  40a3e4:	f080 80bf 	bcs.w	40a566 <__sfvwrite_r+0x28e>
  40a3e8:	4547      	cmp	r7, r8
  40a3ea:	4659      	mov	r1, fp
  40a3ec:	bf28      	it	cs
  40a3ee:	4647      	movcs	r7, r8
  40a3f0:	463a      	mov	r2, r7
  40a3f2:	f000 fd37 	bl	40ae64 <memmove>
  40a3f6:	68a3      	ldr	r3, [r4, #8]
  40a3f8:	6822      	ldr	r2, [r4, #0]
  40a3fa:	1bdb      	subs	r3, r3, r7
  40a3fc:	443a      	add	r2, r7
  40a3fe:	60a3      	str	r3, [r4, #8]
  40a400:	6022      	str	r2, [r4, #0]
  40a402:	2b00      	cmp	r3, #0
  40a404:	d149      	bne.n	40a49a <__sfvwrite_r+0x1c2>
  40a406:	4648      	mov	r0, r9
  40a408:	4621      	mov	r1, r4
  40a40a:	f7ff fd85 	bl	409f18 <_fflush_r>
  40a40e:	2800      	cmp	r0, #0
  40a410:	d043      	beq.n	40a49a <__sfvwrite_r+0x1c2>
  40a412:	89a3      	ldrh	r3, [r4, #12]
  40a414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a418:	f04f 30ff 	mov.w	r0, #4294967295
  40a41c:	81a3      	strh	r3, [r4, #12]
  40a41e:	b003      	add	sp, #12
  40a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a424:	4680      	mov	r8, r0
  40a426:	4683      	mov	fp, r0
  40a428:	4682      	mov	sl, r0
  40a42a:	9000      	str	r0, [sp, #0]
  40a42c:	f1ba 0f00 	cmp.w	sl, #0
  40a430:	d02b      	beq.n	40a48a <__sfvwrite_r+0x1b2>
  40a432:	9b00      	ldr	r3, [sp, #0]
  40a434:	2b00      	cmp	r3, #0
  40a436:	d04f      	beq.n	40a4d8 <__sfvwrite_r+0x200>
  40a438:	45d0      	cmp	r8, sl
  40a43a:	6962      	ldr	r2, [r4, #20]
  40a43c:	68a1      	ldr	r1, [r4, #8]
  40a43e:	4643      	mov	r3, r8
  40a440:	bf28      	it	cs
  40a442:	4653      	movcs	r3, sl
  40a444:	6820      	ldr	r0, [r4, #0]
  40a446:	eb02 0c01 	add.w	ip, r2, r1
  40a44a:	461f      	mov	r7, r3
  40a44c:	4563      	cmp	r3, ip
  40a44e:	dd03      	ble.n	40a458 <__sfvwrite_r+0x180>
  40a450:	6921      	ldr	r1, [r4, #16]
  40a452:	4288      	cmp	r0, r1
  40a454:	f200 8099 	bhi.w	40a58a <__sfvwrite_r+0x2b2>
  40a458:	4293      	cmp	r3, r2
  40a45a:	db20      	blt.n	40a49e <__sfvwrite_r+0x1c6>
  40a45c:	4613      	mov	r3, r2
  40a45e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a460:	4648      	mov	r0, r9
  40a462:	69e1      	ldr	r1, [r4, #28]
  40a464:	465a      	mov	r2, fp
  40a466:	47b8      	blx	r7
  40a468:	1e07      	subs	r7, r0, #0
  40a46a:	ddd2      	ble.n	40a412 <__sfvwrite_r+0x13a>
  40a46c:	ebb8 0807 	subs.w	r8, r8, r7
  40a470:	d025      	beq.n	40a4be <__sfvwrite_r+0x1e6>
  40a472:	68b3      	ldr	r3, [r6, #8]
  40a474:	44bb      	add	fp, r7
  40a476:	ebc7 0a0a 	rsb	sl, r7, sl
  40a47a:	1bdf      	subs	r7, r3, r7
  40a47c:	60b7      	str	r7, [r6, #8]
  40a47e:	2f00      	cmp	r7, #0
  40a480:	f43f af5b 	beq.w	40a33a <__sfvwrite_r+0x62>
  40a484:	f1ba 0f00 	cmp.w	sl, #0
  40a488:	d1d3      	bne.n	40a432 <__sfvwrite_r+0x15a>
  40a48a:	2300      	movs	r3, #0
  40a48c:	f8d5 b000 	ldr.w	fp, [r5]
  40a490:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40a494:	3508      	adds	r5, #8
  40a496:	9300      	str	r3, [sp, #0]
  40a498:	e7c8      	b.n	40a42c <__sfvwrite_r+0x154>
  40a49a:	4638      	mov	r0, r7
  40a49c:	e781      	b.n	40a3a2 <__sfvwrite_r+0xca>
  40a49e:	461a      	mov	r2, r3
  40a4a0:	4659      	mov	r1, fp
  40a4a2:	9301      	str	r3, [sp, #4]
  40a4a4:	f000 fcde 	bl	40ae64 <memmove>
  40a4a8:	68a2      	ldr	r2, [r4, #8]
  40a4aa:	ebb8 0807 	subs.w	r8, r8, r7
  40a4ae:	6821      	ldr	r1, [r4, #0]
  40a4b0:	9b01      	ldr	r3, [sp, #4]
  40a4b2:	eba2 0203 	sub.w	r2, r2, r3
  40a4b6:	440b      	add	r3, r1
  40a4b8:	60a2      	str	r2, [r4, #8]
  40a4ba:	6023      	str	r3, [r4, #0]
  40a4bc:	d1d9      	bne.n	40a472 <__sfvwrite_r+0x19a>
  40a4be:	4648      	mov	r0, r9
  40a4c0:	4621      	mov	r1, r4
  40a4c2:	f7ff fd29 	bl	409f18 <_fflush_r>
  40a4c6:	2800      	cmp	r0, #0
  40a4c8:	d1a3      	bne.n	40a412 <__sfvwrite_r+0x13a>
  40a4ca:	f8cd 8000 	str.w	r8, [sp]
  40a4ce:	e7d0      	b.n	40a472 <__sfvwrite_r+0x19a>
  40a4d0:	4647      	mov	r7, r8
  40a4d2:	6820      	ldr	r0, [r4, #0]
  40a4d4:	46c2      	mov	sl, r8
  40a4d6:	e758      	b.n	40a38a <__sfvwrite_r+0xb2>
  40a4d8:	4658      	mov	r0, fp
  40a4da:	210a      	movs	r1, #10
  40a4dc:	4652      	mov	r2, sl
  40a4de:	f000 fbdf 	bl	40aca0 <memchr>
  40a4e2:	2800      	cmp	r0, #0
  40a4e4:	d07b      	beq.n	40a5de <__sfvwrite_r+0x306>
  40a4e6:	3001      	adds	r0, #1
  40a4e8:	2301      	movs	r3, #1
  40a4ea:	ebcb 0800 	rsb	r8, fp, r0
  40a4ee:	9300      	str	r3, [sp, #0]
  40a4f0:	e7a2      	b.n	40a438 <__sfvwrite_r+0x160>
  40a4f2:	6963      	ldr	r3, [r4, #20]
  40a4f4:	6921      	ldr	r1, [r4, #16]
  40a4f6:	6827      	ldr	r7, [r4, #0]
  40a4f8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  40a4fc:	1a7f      	subs	r7, r7, r1
  40a4fe:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40a502:	1c7b      	adds	r3, r7, #1
  40a504:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40a508:	4443      	add	r3, r8
  40a50a:	4662      	mov	r2, ip
  40a50c:	459c      	cmp	ip, r3
  40a50e:	d201      	bcs.n	40a514 <__sfvwrite_r+0x23c>
  40a510:	469c      	mov	ip, r3
  40a512:	461a      	mov	r2, r3
  40a514:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40a518:	f8cd c000 	str.w	ip, [sp]
  40a51c:	d04b      	beq.n	40a5b6 <__sfvwrite_r+0x2de>
  40a51e:	4611      	mov	r1, r2
  40a520:	4648      	mov	r0, r9
  40a522:	f000 f911 	bl	40a748 <_malloc_r>
  40a526:	f8dd c000 	ldr.w	ip, [sp]
  40a52a:	4682      	mov	sl, r0
  40a52c:	2800      	cmp	r0, #0
  40a52e:	d05e      	beq.n	40a5ee <__sfvwrite_r+0x316>
  40a530:	463a      	mov	r2, r7
  40a532:	6921      	ldr	r1, [r4, #16]
  40a534:	f8cd c000 	str.w	ip, [sp]
  40a538:	f000 fbfa 	bl	40ad30 <memcpy>
  40a53c:	89a2      	ldrh	r2, [r4, #12]
  40a53e:	f8dd c000 	ldr.w	ip, [sp]
  40a542:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a54a:	81a2      	strh	r2, [r4, #12]
  40a54c:	eb0a 0007 	add.w	r0, sl, r7
  40a550:	ebc7 020c 	rsb	r2, r7, ip
  40a554:	f8c4 a010 	str.w	sl, [r4, #16]
  40a558:	4647      	mov	r7, r8
  40a55a:	6020      	str	r0, [r4, #0]
  40a55c:	46c2      	mov	sl, r8
  40a55e:	60a2      	str	r2, [r4, #8]
  40a560:	f8c4 c014 	str.w	ip, [r4, #20]
  40a564:	e711      	b.n	40a38a <__sfvwrite_r+0xb2>
  40a566:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40a56a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a56c:	4648      	mov	r0, r9
  40a56e:	69e1      	ldr	r1, [r4, #28]
  40a570:	45c6      	cmp	lr, r8
  40a572:	465a      	mov	r2, fp
  40a574:	bf28      	it	cs
  40a576:	46c6      	movcs	lr, r8
  40a578:	fb9e fef3 	sdiv	lr, lr, r3
  40a57c:	fb0e f303 	mul.w	r3, lr, r3
  40a580:	47b8      	blx	r7
  40a582:	2800      	cmp	r0, #0
  40a584:	f73f af0d 	bgt.w	40a3a2 <__sfvwrite_r+0xca>
  40a588:	e743      	b.n	40a412 <__sfvwrite_r+0x13a>
  40a58a:	4662      	mov	r2, ip
  40a58c:	4659      	mov	r1, fp
  40a58e:	f8cd c004 	str.w	ip, [sp, #4]
  40a592:	f000 fc67 	bl	40ae64 <memmove>
  40a596:	6823      	ldr	r3, [r4, #0]
  40a598:	4648      	mov	r0, r9
  40a59a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a59e:	4621      	mov	r1, r4
  40a5a0:	4463      	add	r3, ip
  40a5a2:	6023      	str	r3, [r4, #0]
  40a5a4:	f7ff fcb8 	bl	409f18 <_fflush_r>
  40a5a8:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a5ac:	2800      	cmp	r0, #0
  40a5ae:	f47f af30 	bne.w	40a412 <__sfvwrite_r+0x13a>
  40a5b2:	4667      	mov	r7, ip
  40a5b4:	e75a      	b.n	40a46c <__sfvwrite_r+0x194>
  40a5b6:	4648      	mov	r0, r9
  40a5b8:	f000 ffc6 	bl	40b548 <_realloc_r>
  40a5bc:	f8dd c000 	ldr.w	ip, [sp]
  40a5c0:	4682      	mov	sl, r0
  40a5c2:	2800      	cmp	r0, #0
  40a5c4:	d1c2      	bne.n	40a54c <__sfvwrite_r+0x274>
  40a5c6:	4648      	mov	r0, r9
  40a5c8:	6921      	ldr	r1, [r4, #16]
  40a5ca:	f7ff fdad 	bl	40a128 <_free_r>
  40a5ce:	89a3      	ldrh	r3, [r4, #12]
  40a5d0:	220c      	movs	r2, #12
  40a5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a5d6:	f8c9 2000 	str.w	r2, [r9]
  40a5da:	b29b      	uxth	r3, r3
  40a5dc:	e71a      	b.n	40a414 <__sfvwrite_r+0x13c>
  40a5de:	2301      	movs	r3, #1
  40a5e0:	f10a 0801 	add.w	r8, sl, #1
  40a5e4:	9300      	str	r3, [sp, #0]
  40a5e6:	e727      	b.n	40a438 <__sfvwrite_r+0x160>
  40a5e8:	f04f 30ff 	mov.w	r0, #4294967295
  40a5ec:	e6a6      	b.n	40a33c <__sfvwrite_r+0x64>
  40a5ee:	220c      	movs	r2, #12
  40a5f0:	89a3      	ldrh	r3, [r4, #12]
  40a5f2:	f8c9 2000 	str.w	r2, [r9]
  40a5f6:	e70d      	b.n	40a414 <__sfvwrite_r+0x13c>
  40a5f8:	7ffffc00 	.word	0x7ffffc00

0040a5fc <_fwalk_reent>:
  40a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a600:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a604:	d01e      	beq.n	40a644 <_fwalk_reent+0x48>
  40a606:	4688      	mov	r8, r1
  40a608:	4606      	mov	r6, r0
  40a60a:	f04f 0900 	mov.w	r9, #0
  40a60e:	687d      	ldr	r5, [r7, #4]
  40a610:	68bc      	ldr	r4, [r7, #8]
  40a612:	3d01      	subs	r5, #1
  40a614:	d410      	bmi.n	40a638 <_fwalk_reent+0x3c>
  40a616:	89a3      	ldrh	r3, [r4, #12]
  40a618:	3d01      	subs	r5, #1
  40a61a:	2b01      	cmp	r3, #1
  40a61c:	d908      	bls.n	40a630 <_fwalk_reent+0x34>
  40a61e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a622:	4621      	mov	r1, r4
  40a624:	4630      	mov	r0, r6
  40a626:	3301      	adds	r3, #1
  40a628:	d002      	beq.n	40a630 <_fwalk_reent+0x34>
  40a62a:	47c0      	blx	r8
  40a62c:	ea49 0900 	orr.w	r9, r9, r0
  40a630:	1c6b      	adds	r3, r5, #1
  40a632:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a636:	d1ee      	bne.n	40a616 <_fwalk_reent+0x1a>
  40a638:	683f      	ldr	r7, [r7, #0]
  40a63a:	2f00      	cmp	r7, #0
  40a63c:	d1e7      	bne.n	40a60e <_fwalk_reent+0x12>
  40a63e:	4648      	mov	r0, r9
  40a640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a644:	46b9      	mov	r9, r7
  40a646:	4648      	mov	r0, r9
  40a648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a64c <_localeconv_r>:
  40a64c:	4800      	ldr	r0, [pc, #0]	; (40a650 <_localeconv_r+0x4>)
  40a64e:	4770      	bx	lr
  40a650:	204004cc 	.word	0x204004cc

0040a654 <__smakebuf_r>:
  40a654:	898b      	ldrh	r3, [r1, #12]
  40a656:	b29a      	uxth	r2, r3
  40a658:	f012 0f02 	tst.w	r2, #2
  40a65c:	d13d      	bne.n	40a6da <__smakebuf_r+0x86>
  40a65e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a660:	460c      	mov	r4, r1
  40a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a666:	b091      	sub	sp, #68	; 0x44
  40a668:	4605      	mov	r5, r0
  40a66a:	2900      	cmp	r1, #0
  40a66c:	db19      	blt.n	40a6a2 <__smakebuf_r+0x4e>
  40a66e:	aa01      	add	r2, sp, #4
  40a670:	f001 fb4e 	bl	40bd10 <_fstat_r>
  40a674:	2800      	cmp	r0, #0
  40a676:	db12      	blt.n	40a69e <__smakebuf_r+0x4a>
  40a678:	9b02      	ldr	r3, [sp, #8]
  40a67a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40a67e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40a682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40a686:	fab7 f787 	clz	r7, r7
  40a68a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40a68e:	d02b      	beq.n	40a6e8 <__smakebuf_r+0x94>
  40a690:	89a3      	ldrh	r3, [r4, #12]
  40a692:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a69a:	81a3      	strh	r3, [r4, #12]
  40a69c:	e00c      	b.n	40a6b8 <__smakebuf_r+0x64>
  40a69e:	89a3      	ldrh	r3, [r4, #12]
  40a6a0:	b29a      	uxth	r2, r3
  40a6a2:	f012 0f80 	tst.w	r2, #128	; 0x80
  40a6a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a6aa:	f04f 0700 	mov.w	r7, #0
  40a6ae:	bf0c      	ite	eq
  40a6b0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40a6b4:	2640      	movne	r6, #64	; 0x40
  40a6b6:	81a3      	strh	r3, [r4, #12]
  40a6b8:	4628      	mov	r0, r5
  40a6ba:	4631      	mov	r1, r6
  40a6bc:	f000 f844 	bl	40a748 <_malloc_r>
  40a6c0:	89a3      	ldrh	r3, [r4, #12]
  40a6c2:	b340      	cbz	r0, 40a716 <__smakebuf_r+0xc2>
  40a6c4:	4a1a      	ldr	r2, [pc, #104]	; (40a730 <__smakebuf_r+0xdc>)
  40a6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a6ca:	63ea      	str	r2, [r5, #60]	; 0x3c
  40a6cc:	81a3      	strh	r3, [r4, #12]
  40a6ce:	6020      	str	r0, [r4, #0]
  40a6d0:	6120      	str	r0, [r4, #16]
  40a6d2:	6166      	str	r6, [r4, #20]
  40a6d4:	b99f      	cbnz	r7, 40a6fe <__smakebuf_r+0xaa>
  40a6d6:	b011      	add	sp, #68	; 0x44
  40a6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a6da:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40a6de:	2201      	movs	r2, #1
  40a6e0:	600b      	str	r3, [r1, #0]
  40a6e2:	610b      	str	r3, [r1, #16]
  40a6e4:	614a      	str	r2, [r1, #20]
  40a6e6:	4770      	bx	lr
  40a6e8:	4b12      	ldr	r3, [pc, #72]	; (40a734 <__smakebuf_r+0xe0>)
  40a6ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a6ec:	429a      	cmp	r2, r3
  40a6ee:	d1cf      	bne.n	40a690 <__smakebuf_r+0x3c>
  40a6f0:	89a3      	ldrh	r3, [r4, #12]
  40a6f2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a6f6:	4333      	orrs	r3, r6
  40a6f8:	64e6      	str	r6, [r4, #76]	; 0x4c
  40a6fa:	81a3      	strh	r3, [r4, #12]
  40a6fc:	e7dc      	b.n	40a6b8 <__smakebuf_r+0x64>
  40a6fe:	4628      	mov	r0, r5
  40a700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a704:	f001 fb18 	bl	40bd38 <_isatty_r>
  40a708:	2800      	cmp	r0, #0
  40a70a:	d0e4      	beq.n	40a6d6 <__smakebuf_r+0x82>
  40a70c:	89a3      	ldrh	r3, [r4, #12]
  40a70e:	f043 0301 	orr.w	r3, r3, #1
  40a712:	81a3      	strh	r3, [r4, #12]
  40a714:	e7df      	b.n	40a6d6 <__smakebuf_r+0x82>
  40a716:	059a      	lsls	r2, r3, #22
  40a718:	d4dd      	bmi.n	40a6d6 <__smakebuf_r+0x82>
  40a71a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a71e:	f043 0302 	orr.w	r3, r3, #2
  40a722:	2101      	movs	r1, #1
  40a724:	81a3      	strh	r3, [r4, #12]
  40a726:	6022      	str	r2, [r4, #0]
  40a728:	6122      	str	r2, [r4, #16]
  40a72a:	6161      	str	r1, [r4, #20]
  40a72c:	e7d3      	b.n	40a6d6 <__smakebuf_r+0x82>
  40a72e:	bf00      	nop
  40a730:	00409f45 	.word	0x00409f45
  40a734:	0040b9fd 	.word	0x0040b9fd

0040a738 <malloc>:
  40a738:	4b02      	ldr	r3, [pc, #8]	; (40a744 <malloc+0xc>)
  40a73a:	4601      	mov	r1, r0
  40a73c:	6818      	ldr	r0, [r3, #0]
  40a73e:	f000 b803 	b.w	40a748 <_malloc_r>
  40a742:	bf00      	nop
  40a744:	204004c8 	.word	0x204004c8

0040a748 <_malloc_r>:
  40a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a74c:	f101 040b 	add.w	r4, r1, #11
  40a750:	b083      	sub	sp, #12
  40a752:	4605      	mov	r5, r0
  40a754:	2c16      	cmp	r4, #22
  40a756:	d927      	bls.n	40a7a8 <_malloc_r+0x60>
  40a758:	f034 0407 	bics.w	r4, r4, #7
  40a75c:	d42a      	bmi.n	40a7b4 <_malloc_r+0x6c>
  40a75e:	42a1      	cmp	r1, r4
  40a760:	d828      	bhi.n	40a7b4 <_malloc_r+0x6c>
  40a762:	f000 fbe1 	bl	40af28 <__malloc_lock>
  40a766:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40a76a:	d22b      	bcs.n	40a7c4 <_malloc_r+0x7c>
  40a76c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40a770:	4ec0      	ldr	r6, [pc, #768]	; (40aa74 <_malloc_r+0x32c>)
  40a772:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40a776:	68d3      	ldr	r3, [r2, #12]
  40a778:	4293      	cmp	r3, r2
  40a77a:	f000 8171 	beq.w	40aa60 <_malloc_r+0x318>
  40a77e:	685a      	ldr	r2, [r3, #4]
  40a780:	f103 0808 	add.w	r8, r3, #8
  40a784:	68d9      	ldr	r1, [r3, #12]
  40a786:	4628      	mov	r0, r5
  40a788:	f022 0203 	bic.w	r2, r2, #3
  40a78c:	689c      	ldr	r4, [r3, #8]
  40a78e:	4413      	add	r3, r2
  40a790:	60e1      	str	r1, [r4, #12]
  40a792:	608c      	str	r4, [r1, #8]
  40a794:	685a      	ldr	r2, [r3, #4]
  40a796:	f042 0201 	orr.w	r2, r2, #1
  40a79a:	605a      	str	r2, [r3, #4]
  40a79c:	f000 fbc6 	bl	40af2c <__malloc_unlock>
  40a7a0:	4640      	mov	r0, r8
  40a7a2:	b003      	add	sp, #12
  40a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a7a8:	2910      	cmp	r1, #16
  40a7aa:	d803      	bhi.n	40a7b4 <_malloc_r+0x6c>
  40a7ac:	f000 fbbc 	bl	40af28 <__malloc_lock>
  40a7b0:	2410      	movs	r4, #16
  40a7b2:	e7db      	b.n	40a76c <_malloc_r+0x24>
  40a7b4:	f04f 0800 	mov.w	r8, #0
  40a7b8:	230c      	movs	r3, #12
  40a7ba:	4640      	mov	r0, r8
  40a7bc:	602b      	str	r3, [r5, #0]
  40a7be:	b003      	add	sp, #12
  40a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a7c4:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40a7c8:	f000 8089 	beq.w	40a8de <_malloc_r+0x196>
  40a7cc:	f1bc 0f04 	cmp.w	ip, #4
  40a7d0:	f200 80c4 	bhi.w	40a95c <_malloc_r+0x214>
  40a7d4:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40a7d8:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40a7dc:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a7e0:	4ea4      	ldr	r6, [pc, #656]	; (40aa74 <_malloc_r+0x32c>)
  40a7e2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40a7e6:	68c3      	ldr	r3, [r0, #12]
  40a7e8:	4298      	cmp	r0, r3
  40a7ea:	d105      	bne.n	40a7f8 <_malloc_r+0xb0>
  40a7ec:	e00c      	b.n	40a808 <_malloc_r+0xc0>
  40a7ee:	2900      	cmp	r1, #0
  40a7f0:	da79      	bge.n	40a8e6 <_malloc_r+0x19e>
  40a7f2:	68db      	ldr	r3, [r3, #12]
  40a7f4:	4298      	cmp	r0, r3
  40a7f6:	d007      	beq.n	40a808 <_malloc_r+0xc0>
  40a7f8:	685a      	ldr	r2, [r3, #4]
  40a7fa:	f022 0203 	bic.w	r2, r2, #3
  40a7fe:	1b11      	subs	r1, r2, r4
  40a800:	290f      	cmp	r1, #15
  40a802:	ddf4      	ble.n	40a7ee <_malloc_r+0xa6>
  40a804:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a808:	f10c 0c01 	add.w	ip, ip, #1
  40a80c:	4f99      	ldr	r7, [pc, #612]	; (40aa74 <_malloc_r+0x32c>)
  40a80e:	6933      	ldr	r3, [r6, #16]
  40a810:	f107 0e08 	add.w	lr, r7, #8
  40a814:	4573      	cmp	r3, lr
  40a816:	f000 8119 	beq.w	40aa4c <_malloc_r+0x304>
  40a81a:	685a      	ldr	r2, [r3, #4]
  40a81c:	f022 0203 	bic.w	r2, r2, #3
  40a820:	1b11      	subs	r1, r2, r4
  40a822:	290f      	cmp	r1, #15
  40a824:	f300 80ca 	bgt.w	40a9bc <_malloc_r+0x274>
  40a828:	2900      	cmp	r1, #0
  40a82a:	f8c7 e014 	str.w	lr, [r7, #20]
  40a82e:	f8c7 e010 	str.w	lr, [r7, #16]
  40a832:	da6a      	bge.n	40a90a <_malloc_r+0x1c2>
  40a834:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a838:	f080 809f 	bcs.w	40a97a <_malloc_r+0x232>
  40a83c:	08d2      	lsrs	r2, r2, #3
  40a83e:	2001      	movs	r0, #1
  40a840:	6879      	ldr	r1, [r7, #4]
  40a842:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40a846:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40a84a:	fa00 f008 	lsl.w	r0, r0, r8
  40a84e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40a852:	4308      	orrs	r0, r1
  40a854:	60da      	str	r2, [r3, #12]
  40a856:	f8c3 8008 	str.w	r8, [r3, #8]
  40a85a:	6078      	str	r0, [r7, #4]
  40a85c:	6093      	str	r3, [r2, #8]
  40a85e:	f8c8 300c 	str.w	r3, [r8, #12]
  40a862:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40a866:	2101      	movs	r1, #1
  40a868:	4099      	lsls	r1, r3
  40a86a:	4281      	cmp	r1, r0
  40a86c:	d85b      	bhi.n	40a926 <_malloc_r+0x1de>
  40a86e:	4208      	tst	r0, r1
  40a870:	d106      	bne.n	40a880 <_malloc_r+0x138>
  40a872:	f02c 0c03 	bic.w	ip, ip, #3
  40a876:	0049      	lsls	r1, r1, #1
  40a878:	f10c 0c04 	add.w	ip, ip, #4
  40a87c:	4208      	tst	r0, r1
  40a87e:	d0fa      	beq.n	40a876 <_malloc_r+0x12e>
  40a880:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40a884:	46e1      	mov	r9, ip
  40a886:	4640      	mov	r0, r8
  40a888:	68c7      	ldr	r7, [r0, #12]
  40a88a:	42b8      	cmp	r0, r7
  40a88c:	d107      	bne.n	40a89e <_malloc_r+0x156>
  40a88e:	e0df      	b.n	40aa50 <_malloc_r+0x308>
  40a890:	2a00      	cmp	r2, #0
  40a892:	f280 80f7 	bge.w	40aa84 <_malloc_r+0x33c>
  40a896:	68ff      	ldr	r7, [r7, #12]
  40a898:	42b8      	cmp	r0, r7
  40a89a:	f000 80d9 	beq.w	40aa50 <_malloc_r+0x308>
  40a89e:	687b      	ldr	r3, [r7, #4]
  40a8a0:	f023 0303 	bic.w	r3, r3, #3
  40a8a4:	1b1a      	subs	r2, r3, r4
  40a8a6:	2a0f      	cmp	r2, #15
  40a8a8:	ddf2      	ble.n	40a890 <_malloc_r+0x148>
  40a8aa:	46b8      	mov	r8, r7
  40a8ac:	68fb      	ldr	r3, [r7, #12]
  40a8ae:	f044 0901 	orr.w	r9, r4, #1
  40a8b2:	f042 0c01 	orr.w	ip, r2, #1
  40a8b6:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40a8ba:	443c      	add	r4, r7
  40a8bc:	f8c7 9004 	str.w	r9, [r7, #4]
  40a8c0:	4628      	mov	r0, r5
  40a8c2:	60cb      	str	r3, [r1, #12]
  40a8c4:	6099      	str	r1, [r3, #8]
  40a8c6:	6174      	str	r4, [r6, #20]
  40a8c8:	6134      	str	r4, [r6, #16]
  40a8ca:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a8ce:	f8c4 e008 	str.w	lr, [r4, #8]
  40a8d2:	f8c4 c004 	str.w	ip, [r4, #4]
  40a8d6:	50a2      	str	r2, [r4, r2]
  40a8d8:	f000 fb28 	bl	40af2c <__malloc_unlock>
  40a8dc:	e760      	b.n	40a7a0 <_malloc_r+0x58>
  40a8de:	207e      	movs	r0, #126	; 0x7e
  40a8e0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40a8e4:	e77c      	b.n	40a7e0 <_malloc_r+0x98>
  40a8e6:	441a      	add	r2, r3
  40a8e8:	68dc      	ldr	r4, [r3, #12]
  40a8ea:	689e      	ldr	r6, [r3, #8]
  40a8ec:	f103 0808 	add.w	r8, r3, #8
  40a8f0:	6851      	ldr	r1, [r2, #4]
  40a8f2:	4628      	mov	r0, r5
  40a8f4:	60f4      	str	r4, [r6, #12]
  40a8f6:	f041 0301 	orr.w	r3, r1, #1
  40a8fa:	60a6      	str	r6, [r4, #8]
  40a8fc:	6053      	str	r3, [r2, #4]
  40a8fe:	f000 fb15 	bl	40af2c <__malloc_unlock>
  40a902:	4640      	mov	r0, r8
  40a904:	b003      	add	sp, #12
  40a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a90a:	441a      	add	r2, r3
  40a90c:	f103 0808 	add.w	r8, r3, #8
  40a910:	4628      	mov	r0, r5
  40a912:	6853      	ldr	r3, [r2, #4]
  40a914:	f043 0301 	orr.w	r3, r3, #1
  40a918:	6053      	str	r3, [r2, #4]
  40a91a:	f000 fb07 	bl	40af2c <__malloc_unlock>
  40a91e:	4640      	mov	r0, r8
  40a920:	b003      	add	sp, #12
  40a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a926:	68b7      	ldr	r7, [r6, #8]
  40a928:	687a      	ldr	r2, [r7, #4]
  40a92a:	f022 0803 	bic.w	r8, r2, #3
  40a92e:	ebc4 0208 	rsb	r2, r4, r8
  40a932:	2a0f      	cmp	r2, #15
  40a934:	dd56      	ble.n	40a9e4 <_malloc_r+0x29c>
  40a936:	45a0      	cmp	r8, r4
  40a938:	d354      	bcc.n	40a9e4 <_malloc_r+0x29c>
  40a93a:	f044 0301 	orr.w	r3, r4, #1
  40a93e:	f042 0201 	orr.w	r2, r2, #1
  40a942:	443c      	add	r4, r7
  40a944:	f107 0808 	add.w	r8, r7, #8
  40a948:	607b      	str	r3, [r7, #4]
  40a94a:	4628      	mov	r0, r5
  40a94c:	60b4      	str	r4, [r6, #8]
  40a94e:	6062      	str	r2, [r4, #4]
  40a950:	f000 faec 	bl	40af2c <__malloc_unlock>
  40a954:	4640      	mov	r0, r8
  40a956:	b003      	add	sp, #12
  40a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a95c:	f1bc 0f14 	cmp.w	ip, #20
  40a960:	f240 809f 	bls.w	40aaa2 <_malloc_r+0x35a>
  40a964:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40a968:	f200 8127 	bhi.w	40abba <_malloc_r+0x472>
  40a96c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40a970:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40a974:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a978:	e732      	b.n	40a7e0 <_malloc_r+0x98>
  40a97a:	0a51      	lsrs	r1, r2, #9
  40a97c:	2904      	cmp	r1, #4
  40a97e:	f240 8095 	bls.w	40aaac <_malloc_r+0x364>
  40a982:	2914      	cmp	r1, #20
  40a984:	f200 8142 	bhi.w	40ac0c <_malloc_r+0x4c4>
  40a988:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40a98c:	0078      	lsls	r0, r7, #1
  40a98e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40a992:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40aa74 <_malloc_r+0x32c>
  40a996:	6881      	ldr	r1, [r0, #8]
  40a998:	4281      	cmp	r1, r0
  40a99a:	f000 811b 	beq.w	40abd4 <_malloc_r+0x48c>
  40a99e:	684f      	ldr	r7, [r1, #4]
  40a9a0:	f027 0703 	bic.w	r7, r7, #3
  40a9a4:	42ba      	cmp	r2, r7
  40a9a6:	d202      	bcs.n	40a9ae <_malloc_r+0x266>
  40a9a8:	6889      	ldr	r1, [r1, #8]
  40a9aa:	4288      	cmp	r0, r1
  40a9ac:	d1f7      	bne.n	40a99e <_malloc_r+0x256>
  40a9ae:	68ca      	ldr	r2, [r1, #12]
  40a9b0:	6870      	ldr	r0, [r6, #4]
  40a9b2:	60da      	str	r2, [r3, #12]
  40a9b4:	6099      	str	r1, [r3, #8]
  40a9b6:	6093      	str	r3, [r2, #8]
  40a9b8:	60cb      	str	r3, [r1, #12]
  40a9ba:	e752      	b.n	40a862 <_malloc_r+0x11a>
  40a9bc:	f044 0601 	orr.w	r6, r4, #1
  40a9c0:	f041 0201 	orr.w	r2, r1, #1
  40a9c4:	441c      	add	r4, r3
  40a9c6:	4628      	mov	r0, r5
  40a9c8:	605e      	str	r6, [r3, #4]
  40a9ca:	f103 0808 	add.w	r8, r3, #8
  40a9ce:	617c      	str	r4, [r7, #20]
  40a9d0:	613c      	str	r4, [r7, #16]
  40a9d2:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a9d6:	f8c4 e008 	str.w	lr, [r4, #8]
  40a9da:	6062      	str	r2, [r4, #4]
  40a9dc:	5061      	str	r1, [r4, r1]
  40a9de:	f000 faa5 	bl	40af2c <__malloc_unlock>
  40a9e2:	e6dd      	b.n	40a7a0 <_malloc_r+0x58>
  40a9e4:	4a24      	ldr	r2, [pc, #144]	; (40aa78 <_malloc_r+0x330>)
  40a9e6:	4b25      	ldr	r3, [pc, #148]	; (40aa7c <_malloc_r+0x334>)
  40a9e8:	6811      	ldr	r1, [r2, #0]
  40a9ea:	681b      	ldr	r3, [r3, #0]
  40a9ec:	3101      	adds	r1, #1
  40a9ee:	4423      	add	r3, r4
  40a9f0:	f000 8109 	beq.w	40ac06 <_malloc_r+0x4be>
  40a9f4:	f241 010f 	movw	r1, #4111	; 0x100f
  40a9f8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40aa80 <_malloc_r+0x338>
  40a9fc:	4419      	add	r1, r3
  40a9fe:	ea01 0909 	and.w	r9, r1, r9
  40aa02:	4628      	mov	r0, r5
  40aa04:	4649      	mov	r1, r9
  40aa06:	9201      	str	r2, [sp, #4]
  40aa08:	f000 ffb8 	bl	40b97c <_sbrk_r>
  40aa0c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40aa10:	4682      	mov	sl, r0
  40aa12:	9a01      	ldr	r2, [sp, #4]
  40aa14:	f000 8101 	beq.w	40ac1a <_malloc_r+0x4d2>
  40aa18:	1bbb      	subs	r3, r7, r6
  40aa1a:	eb07 0108 	add.w	r1, r7, r8
  40aa1e:	4815      	ldr	r0, [pc, #84]	; (40aa74 <_malloc_r+0x32c>)
  40aa20:	bf18      	it	ne
  40aa22:	2301      	movne	r3, #1
  40aa24:	4551      	cmp	r1, sl
  40aa26:	d967      	bls.n	40aaf8 <_malloc_r+0x3b0>
  40aa28:	2b00      	cmp	r3, #0
  40aa2a:	d065      	beq.n	40aaf8 <_malloc_r+0x3b0>
  40aa2c:	6887      	ldr	r7, [r0, #8]
  40aa2e:	687b      	ldr	r3, [r7, #4]
  40aa30:	f023 0303 	bic.w	r3, r3, #3
  40aa34:	1b1a      	subs	r2, r3, r4
  40aa36:	2a0f      	cmp	r2, #15
  40aa38:	dd02      	ble.n	40aa40 <_malloc_r+0x2f8>
  40aa3a:	429c      	cmp	r4, r3
  40aa3c:	f67f af7d 	bls.w	40a93a <_malloc_r+0x1f2>
  40aa40:	4628      	mov	r0, r5
  40aa42:	f04f 0800 	mov.w	r8, #0
  40aa46:	f000 fa71 	bl	40af2c <__malloc_unlock>
  40aa4a:	e6a9      	b.n	40a7a0 <_malloc_r+0x58>
  40aa4c:	6878      	ldr	r0, [r7, #4]
  40aa4e:	e708      	b.n	40a862 <_malloc_r+0x11a>
  40aa50:	f109 0901 	add.w	r9, r9, #1
  40aa54:	3008      	adds	r0, #8
  40aa56:	f019 0f03 	tst.w	r9, #3
  40aa5a:	f47f af15 	bne.w	40a888 <_malloc_r+0x140>
  40aa5e:	e02f      	b.n	40aac0 <_malloc_r+0x378>
  40aa60:	f103 0208 	add.w	r2, r3, #8
  40aa64:	695b      	ldr	r3, [r3, #20]
  40aa66:	429a      	cmp	r2, r3
  40aa68:	bf08      	it	eq
  40aa6a:	f10c 0c02 	addeq.w	ip, ip, #2
  40aa6e:	f43f aecd 	beq.w	40a80c <_malloc_r+0xc4>
  40aa72:	e684      	b.n	40a77e <_malloc_r+0x36>
  40aa74:	20400504 	.word	0x20400504
  40aa78:	20400910 	.word	0x20400910
  40aa7c:	204009f0 	.word	0x204009f0
  40aa80:	fffff000 	.word	0xfffff000
  40aa84:	18fa      	adds	r2, r7, r3
  40aa86:	46b8      	mov	r8, r7
  40aa88:	68f9      	ldr	r1, [r7, #12]
  40aa8a:	4628      	mov	r0, r5
  40aa8c:	6853      	ldr	r3, [r2, #4]
  40aa8e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40aa92:	f043 0301 	orr.w	r3, r3, #1
  40aa96:	6053      	str	r3, [r2, #4]
  40aa98:	60e1      	str	r1, [r4, #12]
  40aa9a:	608c      	str	r4, [r1, #8]
  40aa9c:	f000 fa46 	bl	40af2c <__malloc_unlock>
  40aaa0:	e67e      	b.n	40a7a0 <_malloc_r+0x58>
  40aaa2:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40aaa6:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40aaaa:	e699      	b.n	40a7e0 <_malloc_r+0x98>
  40aaac:	0991      	lsrs	r1, r2, #6
  40aaae:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40aab2:	0078      	lsls	r0, r7, #1
  40aab4:	e76b      	b.n	40a98e <_malloc_r+0x246>
  40aab6:	f8d8 8000 	ldr.w	r8, [r8]
  40aaba:	4598      	cmp	r8, r3
  40aabc:	f040 80e6 	bne.w	40ac8c <_malloc_r+0x544>
  40aac0:	f01c 0f03 	tst.w	ip, #3
  40aac4:	f1a8 0308 	sub.w	r3, r8, #8
  40aac8:	f10c 3cff 	add.w	ip, ip, #4294967295
  40aacc:	d1f3      	bne.n	40aab6 <_malloc_r+0x36e>
  40aace:	6873      	ldr	r3, [r6, #4]
  40aad0:	ea23 0301 	bic.w	r3, r3, r1
  40aad4:	6073      	str	r3, [r6, #4]
  40aad6:	0049      	lsls	r1, r1, #1
  40aad8:	4299      	cmp	r1, r3
  40aada:	f63f af24 	bhi.w	40a926 <_malloc_r+0x1de>
  40aade:	2900      	cmp	r1, #0
  40aae0:	f43f af21 	beq.w	40a926 <_malloc_r+0x1de>
  40aae4:	420b      	tst	r3, r1
  40aae6:	46cc      	mov	ip, r9
  40aae8:	f47f aeca 	bne.w	40a880 <_malloc_r+0x138>
  40aaec:	0049      	lsls	r1, r1, #1
  40aaee:	f10c 0c04 	add.w	ip, ip, #4
  40aaf2:	420b      	tst	r3, r1
  40aaf4:	d0fa      	beq.n	40aaec <_malloc_r+0x3a4>
  40aaf6:	e6c3      	b.n	40a880 <_malloc_r+0x138>
  40aaf8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40ac98 <_malloc_r+0x550>
  40aafc:	4551      	cmp	r1, sl
  40aafe:	f8db 0000 	ldr.w	r0, [fp]
  40ab02:	4448      	add	r0, r9
  40ab04:	f8cb 0000 	str.w	r0, [fp]
  40ab08:	f000 808c 	beq.w	40ac24 <_malloc_r+0x4dc>
  40ab0c:	6812      	ldr	r2, [r2, #0]
  40ab0e:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40ac9c <_malloc_r+0x554>
  40ab12:	3201      	adds	r2, #1
  40ab14:	f000 80a3 	beq.w	40ac5e <_malloc_r+0x516>
  40ab18:	ebc1 010a 	rsb	r1, r1, sl
  40ab1c:	4408      	add	r0, r1
  40ab1e:	f8cb 0000 	str.w	r0, [fp]
  40ab22:	f01a 0107 	ands.w	r1, sl, #7
  40ab26:	d052      	beq.n	40abce <_malloc_r+0x486>
  40ab28:	f1c1 0008 	rsb	r0, r1, #8
  40ab2c:	f241 0208 	movw	r2, #4104	; 0x1008
  40ab30:	4482      	add	sl, r0
  40ab32:	1a52      	subs	r2, r2, r1
  40ab34:	eb0a 0109 	add.w	r1, sl, r9
  40ab38:	4628      	mov	r0, r5
  40ab3a:	9301      	str	r3, [sp, #4]
  40ab3c:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40ab40:	ebc1 0902 	rsb	r9, r1, r2
  40ab44:	4649      	mov	r1, r9
  40ab46:	f000 ff19 	bl	40b97c <_sbrk_r>
  40ab4a:	1c43      	adds	r3, r0, #1
  40ab4c:	9b01      	ldr	r3, [sp, #4]
  40ab4e:	d07a      	beq.n	40ac46 <_malloc_r+0x4fe>
  40ab50:	ebca 0200 	rsb	r2, sl, r0
  40ab54:	444a      	add	r2, r9
  40ab56:	f042 0201 	orr.w	r2, r2, #1
  40ab5a:	f8db 0000 	ldr.w	r0, [fp]
  40ab5e:	f8c6 a008 	str.w	sl, [r6, #8]
  40ab62:	4448      	add	r0, r9
  40ab64:	f8ca 2004 	str.w	r2, [sl, #4]
  40ab68:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40ac98 <_malloc_r+0x550>
  40ab6c:	f8cb 0000 	str.w	r0, [fp]
  40ab70:	b1a3      	cbz	r3, 40ab9c <_malloc_r+0x454>
  40ab72:	f1b8 0f0f 	cmp.w	r8, #15
  40ab76:	d937      	bls.n	40abe8 <_malloc_r+0x4a0>
  40ab78:	687b      	ldr	r3, [r7, #4]
  40ab7a:	f1a8 020c 	sub.w	r2, r8, #12
  40ab7e:	f04f 0e05 	mov.w	lr, #5
  40ab82:	f022 0207 	bic.w	r2, r2, #7
  40ab86:	f003 0301 	and.w	r3, r3, #1
  40ab8a:	18b9      	adds	r1, r7, r2
  40ab8c:	4313      	orrs	r3, r2
  40ab8e:	2a0f      	cmp	r2, #15
  40ab90:	607b      	str	r3, [r7, #4]
  40ab92:	f8c1 e004 	str.w	lr, [r1, #4]
  40ab96:	f8c1 e008 	str.w	lr, [r1, #8]
  40ab9a:	d858      	bhi.n	40ac4e <_malloc_r+0x506>
  40ab9c:	4b3c      	ldr	r3, [pc, #240]	; (40ac90 <_malloc_r+0x548>)
  40ab9e:	681a      	ldr	r2, [r3, #0]
  40aba0:	4290      	cmp	r0, r2
  40aba2:	d900      	bls.n	40aba6 <_malloc_r+0x45e>
  40aba4:	6018      	str	r0, [r3, #0]
  40aba6:	4b3b      	ldr	r3, [pc, #236]	; (40ac94 <_malloc_r+0x54c>)
  40aba8:	68b7      	ldr	r7, [r6, #8]
  40abaa:	681a      	ldr	r2, [r3, #0]
  40abac:	4290      	cmp	r0, r2
  40abae:	d900      	bls.n	40abb2 <_malloc_r+0x46a>
  40abb0:	6018      	str	r0, [r3, #0]
  40abb2:	687b      	ldr	r3, [r7, #4]
  40abb4:	f023 0303 	bic.w	r3, r3, #3
  40abb8:	e73c      	b.n	40aa34 <_malloc_r+0x2ec>
  40abba:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40abbe:	d817      	bhi.n	40abf0 <_malloc_r+0x4a8>
  40abc0:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40abc4:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40abc8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40abcc:	e608      	b.n	40a7e0 <_malloc_r+0x98>
  40abce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40abd2:	e7af      	b.n	40ab34 <_malloc_r+0x3ec>
  40abd4:	10bf      	asrs	r7, r7, #2
  40abd6:	2001      	movs	r0, #1
  40abd8:	460a      	mov	r2, r1
  40abda:	40b8      	lsls	r0, r7
  40abdc:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40abe0:	4338      	orrs	r0, r7
  40abe2:	f8c9 0004 	str.w	r0, [r9, #4]
  40abe6:	e6e4      	b.n	40a9b2 <_malloc_r+0x26a>
  40abe8:	2301      	movs	r3, #1
  40abea:	f8ca 3004 	str.w	r3, [sl, #4]
  40abee:	e727      	b.n	40aa40 <_malloc_r+0x2f8>
  40abf0:	f240 5354 	movw	r3, #1364	; 0x554
  40abf4:	459c      	cmp	ip, r3
  40abf6:	d822      	bhi.n	40ac3e <_malloc_r+0x4f6>
  40abf8:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40abfc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40ac00:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40ac04:	e5ec      	b.n	40a7e0 <_malloc_r+0x98>
  40ac06:	f103 0910 	add.w	r9, r3, #16
  40ac0a:	e6fa      	b.n	40aa02 <_malloc_r+0x2ba>
  40ac0c:	2954      	cmp	r1, #84	; 0x54
  40ac0e:	d829      	bhi.n	40ac64 <_malloc_r+0x51c>
  40ac10:	0b11      	lsrs	r1, r2, #12
  40ac12:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40ac16:	0078      	lsls	r0, r7, #1
  40ac18:	e6b9      	b.n	40a98e <_malloc_r+0x246>
  40ac1a:	68b7      	ldr	r7, [r6, #8]
  40ac1c:	687b      	ldr	r3, [r7, #4]
  40ac1e:	f023 0303 	bic.w	r3, r3, #3
  40ac22:	e707      	b.n	40aa34 <_malloc_r+0x2ec>
  40ac24:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40ac28:	f1be 0f00 	cmp.w	lr, #0
  40ac2c:	f47f af6e 	bne.w	40ab0c <_malloc_r+0x3c4>
  40ac30:	eb09 0308 	add.w	r3, r9, r8
  40ac34:	68b2      	ldr	r2, [r6, #8]
  40ac36:	f043 0301 	orr.w	r3, r3, #1
  40ac3a:	6053      	str	r3, [r2, #4]
  40ac3c:	e7ae      	b.n	40ab9c <_malloc_r+0x454>
  40ac3e:	20fc      	movs	r0, #252	; 0xfc
  40ac40:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40ac44:	e5cc      	b.n	40a7e0 <_malloc_r+0x98>
  40ac46:	2201      	movs	r2, #1
  40ac48:	f04f 0900 	mov.w	r9, #0
  40ac4c:	e785      	b.n	40ab5a <_malloc_r+0x412>
  40ac4e:	4628      	mov	r0, r5
  40ac50:	f107 0108 	add.w	r1, r7, #8
  40ac54:	f7ff fa68 	bl	40a128 <_free_r>
  40ac58:	f8d9 0000 	ldr.w	r0, [r9]
  40ac5c:	e79e      	b.n	40ab9c <_malloc_r+0x454>
  40ac5e:	f8ce a000 	str.w	sl, [lr]
  40ac62:	e75e      	b.n	40ab22 <_malloc_r+0x3da>
  40ac64:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40ac68:	d804      	bhi.n	40ac74 <_malloc_r+0x52c>
  40ac6a:	0bd1      	lsrs	r1, r2, #15
  40ac6c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40ac70:	0078      	lsls	r0, r7, #1
  40ac72:	e68c      	b.n	40a98e <_malloc_r+0x246>
  40ac74:	f240 5054 	movw	r0, #1364	; 0x554
  40ac78:	4281      	cmp	r1, r0
  40ac7a:	d804      	bhi.n	40ac86 <_malloc_r+0x53e>
  40ac7c:	0c91      	lsrs	r1, r2, #18
  40ac7e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40ac82:	0078      	lsls	r0, r7, #1
  40ac84:	e683      	b.n	40a98e <_malloc_r+0x246>
  40ac86:	20fc      	movs	r0, #252	; 0xfc
  40ac88:	277e      	movs	r7, #126	; 0x7e
  40ac8a:	e680      	b.n	40a98e <_malloc_r+0x246>
  40ac8c:	6873      	ldr	r3, [r6, #4]
  40ac8e:	e722      	b.n	40aad6 <_malloc_r+0x38e>
  40ac90:	204009ec 	.word	0x204009ec
  40ac94:	204009e8 	.word	0x204009e8
  40ac98:	204009f4 	.word	0x204009f4
  40ac9c:	20400910 	.word	0x20400910

0040aca0 <memchr>:
  40aca0:	0783      	lsls	r3, r0, #30
  40aca2:	b2c9      	uxtb	r1, r1
  40aca4:	b470      	push	{r4, r5, r6}
  40aca6:	d03f      	beq.n	40ad28 <memchr+0x88>
  40aca8:	1e54      	subs	r4, r2, #1
  40acaa:	2a00      	cmp	r2, #0
  40acac:	d03e      	beq.n	40ad2c <memchr+0x8c>
  40acae:	7803      	ldrb	r3, [r0, #0]
  40acb0:	428b      	cmp	r3, r1
  40acb2:	bf18      	it	ne
  40acb4:	1c43      	addne	r3, r0, #1
  40acb6:	d105      	bne.n	40acc4 <memchr+0x24>
  40acb8:	e01c      	b.n	40acf4 <memchr+0x54>
  40acba:	b1ec      	cbz	r4, 40acf8 <memchr+0x58>
  40acbc:	7802      	ldrb	r2, [r0, #0]
  40acbe:	3c01      	subs	r4, #1
  40acc0:	428a      	cmp	r2, r1
  40acc2:	d017      	beq.n	40acf4 <memchr+0x54>
  40acc4:	f013 0f03 	tst.w	r3, #3
  40acc8:	4618      	mov	r0, r3
  40acca:	f103 0301 	add.w	r3, r3, #1
  40acce:	d1f4      	bne.n	40acba <memchr+0x1a>
  40acd0:	2c03      	cmp	r4, #3
  40acd2:	d814      	bhi.n	40acfe <memchr+0x5e>
  40acd4:	b184      	cbz	r4, 40acf8 <memchr+0x58>
  40acd6:	7803      	ldrb	r3, [r0, #0]
  40acd8:	428b      	cmp	r3, r1
  40acda:	d00b      	beq.n	40acf4 <memchr+0x54>
  40acdc:	1905      	adds	r5, r0, r4
  40acde:	1c43      	adds	r3, r0, #1
  40ace0:	e002      	b.n	40ace8 <memchr+0x48>
  40ace2:	7802      	ldrb	r2, [r0, #0]
  40ace4:	428a      	cmp	r2, r1
  40ace6:	d005      	beq.n	40acf4 <memchr+0x54>
  40ace8:	42ab      	cmp	r3, r5
  40acea:	4618      	mov	r0, r3
  40acec:	f103 0301 	add.w	r3, r3, #1
  40acf0:	d1f7      	bne.n	40ace2 <memchr+0x42>
  40acf2:	2000      	movs	r0, #0
  40acf4:	bc70      	pop	{r4, r5, r6}
  40acf6:	4770      	bx	lr
  40acf8:	4620      	mov	r0, r4
  40acfa:	bc70      	pop	{r4, r5, r6}
  40acfc:	4770      	bx	lr
  40acfe:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40ad02:	4602      	mov	r2, r0
  40ad04:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40ad08:	4610      	mov	r0, r2
  40ad0a:	3204      	adds	r2, #4
  40ad0c:	6803      	ldr	r3, [r0, #0]
  40ad0e:	4073      	eors	r3, r6
  40ad10:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40ad14:	ea25 0303 	bic.w	r3, r5, r3
  40ad18:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40ad1c:	d1da      	bne.n	40acd4 <memchr+0x34>
  40ad1e:	3c04      	subs	r4, #4
  40ad20:	4610      	mov	r0, r2
  40ad22:	2c03      	cmp	r4, #3
  40ad24:	d8f0      	bhi.n	40ad08 <memchr+0x68>
  40ad26:	e7d5      	b.n	40acd4 <memchr+0x34>
  40ad28:	4614      	mov	r4, r2
  40ad2a:	e7d1      	b.n	40acd0 <memchr+0x30>
  40ad2c:	4610      	mov	r0, r2
  40ad2e:	e7e1      	b.n	40acf4 <memchr+0x54>

0040ad30 <memcpy>:
  40ad30:	4684      	mov	ip, r0
  40ad32:	ea41 0300 	orr.w	r3, r1, r0
  40ad36:	f013 0303 	ands.w	r3, r3, #3
  40ad3a:	d16d      	bne.n	40ae18 <memcpy+0xe8>
  40ad3c:	3a40      	subs	r2, #64	; 0x40
  40ad3e:	d341      	bcc.n	40adc4 <memcpy+0x94>
  40ad40:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad44:	f840 3b04 	str.w	r3, [r0], #4
  40ad48:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad4c:	f840 3b04 	str.w	r3, [r0], #4
  40ad50:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad54:	f840 3b04 	str.w	r3, [r0], #4
  40ad58:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad5c:	f840 3b04 	str.w	r3, [r0], #4
  40ad60:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad64:	f840 3b04 	str.w	r3, [r0], #4
  40ad68:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad6c:	f840 3b04 	str.w	r3, [r0], #4
  40ad70:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad74:	f840 3b04 	str.w	r3, [r0], #4
  40ad78:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad7c:	f840 3b04 	str.w	r3, [r0], #4
  40ad80:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad84:	f840 3b04 	str.w	r3, [r0], #4
  40ad88:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad8c:	f840 3b04 	str.w	r3, [r0], #4
  40ad90:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad94:	f840 3b04 	str.w	r3, [r0], #4
  40ad98:	f851 3b04 	ldr.w	r3, [r1], #4
  40ad9c:	f840 3b04 	str.w	r3, [r0], #4
  40ada0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ada4:	f840 3b04 	str.w	r3, [r0], #4
  40ada8:	f851 3b04 	ldr.w	r3, [r1], #4
  40adac:	f840 3b04 	str.w	r3, [r0], #4
  40adb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40adb4:	f840 3b04 	str.w	r3, [r0], #4
  40adb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40adbc:	f840 3b04 	str.w	r3, [r0], #4
  40adc0:	3a40      	subs	r2, #64	; 0x40
  40adc2:	d2bd      	bcs.n	40ad40 <memcpy+0x10>
  40adc4:	3230      	adds	r2, #48	; 0x30
  40adc6:	d311      	bcc.n	40adec <memcpy+0xbc>
  40adc8:	f851 3b04 	ldr.w	r3, [r1], #4
  40adcc:	f840 3b04 	str.w	r3, [r0], #4
  40add0:	f851 3b04 	ldr.w	r3, [r1], #4
  40add4:	f840 3b04 	str.w	r3, [r0], #4
  40add8:	f851 3b04 	ldr.w	r3, [r1], #4
  40addc:	f840 3b04 	str.w	r3, [r0], #4
  40ade0:	f851 3b04 	ldr.w	r3, [r1], #4
  40ade4:	f840 3b04 	str.w	r3, [r0], #4
  40ade8:	3a10      	subs	r2, #16
  40adea:	d2ed      	bcs.n	40adc8 <memcpy+0x98>
  40adec:	320c      	adds	r2, #12
  40adee:	d305      	bcc.n	40adfc <memcpy+0xcc>
  40adf0:	f851 3b04 	ldr.w	r3, [r1], #4
  40adf4:	f840 3b04 	str.w	r3, [r0], #4
  40adf8:	3a04      	subs	r2, #4
  40adfa:	d2f9      	bcs.n	40adf0 <memcpy+0xc0>
  40adfc:	3204      	adds	r2, #4
  40adfe:	d008      	beq.n	40ae12 <memcpy+0xe2>
  40ae00:	07d2      	lsls	r2, r2, #31
  40ae02:	bf1c      	itt	ne
  40ae04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ae08:	f800 3b01 	strbne.w	r3, [r0], #1
  40ae0c:	d301      	bcc.n	40ae12 <memcpy+0xe2>
  40ae0e:	880b      	ldrh	r3, [r1, #0]
  40ae10:	8003      	strh	r3, [r0, #0]
  40ae12:	4660      	mov	r0, ip
  40ae14:	4770      	bx	lr
  40ae16:	bf00      	nop
  40ae18:	2a08      	cmp	r2, #8
  40ae1a:	d313      	bcc.n	40ae44 <memcpy+0x114>
  40ae1c:	078b      	lsls	r3, r1, #30
  40ae1e:	d08d      	beq.n	40ad3c <memcpy+0xc>
  40ae20:	f010 0303 	ands.w	r3, r0, #3
  40ae24:	d08a      	beq.n	40ad3c <memcpy+0xc>
  40ae26:	f1c3 0304 	rsb	r3, r3, #4
  40ae2a:	1ad2      	subs	r2, r2, r3
  40ae2c:	07db      	lsls	r3, r3, #31
  40ae2e:	bf1c      	itt	ne
  40ae30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ae34:	f800 3b01 	strbne.w	r3, [r0], #1
  40ae38:	d380      	bcc.n	40ad3c <memcpy+0xc>
  40ae3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40ae3e:	f820 3b02 	strh.w	r3, [r0], #2
  40ae42:	e77b      	b.n	40ad3c <memcpy+0xc>
  40ae44:	3a04      	subs	r2, #4
  40ae46:	d3d9      	bcc.n	40adfc <memcpy+0xcc>
  40ae48:	3a01      	subs	r2, #1
  40ae4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40ae4e:	f800 3b01 	strb.w	r3, [r0], #1
  40ae52:	d2f9      	bcs.n	40ae48 <memcpy+0x118>
  40ae54:	780b      	ldrb	r3, [r1, #0]
  40ae56:	7003      	strb	r3, [r0, #0]
  40ae58:	784b      	ldrb	r3, [r1, #1]
  40ae5a:	7043      	strb	r3, [r0, #1]
  40ae5c:	788b      	ldrb	r3, [r1, #2]
  40ae5e:	7083      	strb	r3, [r0, #2]
  40ae60:	4660      	mov	r0, ip
  40ae62:	4770      	bx	lr

0040ae64 <memmove>:
  40ae64:	4288      	cmp	r0, r1
  40ae66:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ae68:	d90d      	bls.n	40ae86 <memmove+0x22>
  40ae6a:	188b      	adds	r3, r1, r2
  40ae6c:	4298      	cmp	r0, r3
  40ae6e:	d20a      	bcs.n	40ae86 <memmove+0x22>
  40ae70:	1881      	adds	r1, r0, r2
  40ae72:	2a00      	cmp	r2, #0
  40ae74:	d053      	beq.n	40af1e <memmove+0xba>
  40ae76:	1a9a      	subs	r2, r3, r2
  40ae78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40ae7c:	4293      	cmp	r3, r2
  40ae7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40ae82:	d1f9      	bne.n	40ae78 <memmove+0x14>
  40ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ae86:	2a0f      	cmp	r2, #15
  40ae88:	d947      	bls.n	40af1a <memmove+0xb6>
  40ae8a:	ea40 0301 	orr.w	r3, r0, r1
  40ae8e:	079b      	lsls	r3, r3, #30
  40ae90:	d146      	bne.n	40af20 <memmove+0xbc>
  40ae92:	f100 0410 	add.w	r4, r0, #16
  40ae96:	f101 0310 	add.w	r3, r1, #16
  40ae9a:	4615      	mov	r5, r2
  40ae9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40aea0:	3d10      	subs	r5, #16
  40aea2:	3310      	adds	r3, #16
  40aea4:	3410      	adds	r4, #16
  40aea6:	f844 6c20 	str.w	r6, [r4, #-32]
  40aeaa:	2d0f      	cmp	r5, #15
  40aeac:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  40aeb0:	f844 6c1c 	str.w	r6, [r4, #-28]
  40aeb4:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40aeb8:	f844 6c18 	str.w	r6, [r4, #-24]
  40aebc:	f853 6c14 	ldr.w	r6, [r3, #-20]
  40aec0:	f844 6c14 	str.w	r6, [r4, #-20]
  40aec4:	d8ea      	bhi.n	40ae9c <memmove+0x38>
  40aec6:	f1a2 0310 	sub.w	r3, r2, #16
  40aeca:	f002 0e0f 	and.w	lr, r2, #15
  40aece:	f023 030f 	bic.w	r3, r3, #15
  40aed2:	f1be 0f03 	cmp.w	lr, #3
  40aed6:	f103 0310 	add.w	r3, r3, #16
  40aeda:	4419      	add	r1, r3
  40aedc:	4403      	add	r3, r0
  40aede:	d921      	bls.n	40af24 <memmove+0xc0>
  40aee0:	1f1e      	subs	r6, r3, #4
  40aee2:	460d      	mov	r5, r1
  40aee4:	4674      	mov	r4, lr
  40aee6:	3c04      	subs	r4, #4
  40aee8:	f855 7b04 	ldr.w	r7, [r5], #4
  40aeec:	2c03      	cmp	r4, #3
  40aeee:	f846 7f04 	str.w	r7, [r6, #4]!
  40aef2:	d8f8      	bhi.n	40aee6 <memmove+0x82>
  40aef4:	f1ae 0404 	sub.w	r4, lr, #4
  40aef8:	f002 0203 	and.w	r2, r2, #3
  40aefc:	f024 0403 	bic.w	r4, r4, #3
  40af00:	3404      	adds	r4, #4
  40af02:	4423      	add	r3, r4
  40af04:	4421      	add	r1, r4
  40af06:	b152      	cbz	r2, 40af1e <memmove+0xba>
  40af08:	3b01      	subs	r3, #1
  40af0a:	440a      	add	r2, r1
  40af0c:	f811 4b01 	ldrb.w	r4, [r1], #1
  40af10:	4291      	cmp	r1, r2
  40af12:	f803 4f01 	strb.w	r4, [r3, #1]!
  40af16:	d1f9      	bne.n	40af0c <memmove+0xa8>
  40af18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af1a:	4603      	mov	r3, r0
  40af1c:	e7f3      	b.n	40af06 <memmove+0xa2>
  40af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af20:	4603      	mov	r3, r0
  40af22:	e7f1      	b.n	40af08 <memmove+0xa4>
  40af24:	4672      	mov	r2, lr
  40af26:	e7ee      	b.n	40af06 <memmove+0xa2>

0040af28 <__malloc_lock>:
  40af28:	4770      	bx	lr
  40af2a:	bf00      	nop

0040af2c <__malloc_unlock>:
  40af2c:	4770      	bx	lr
  40af2e:	bf00      	nop

0040af30 <_Balloc>:
  40af30:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40af32:	b538      	push	{r3, r4, r5, lr}
  40af34:	4605      	mov	r5, r0
  40af36:	460c      	mov	r4, r1
  40af38:	b152      	cbz	r2, 40af50 <_Balloc+0x20>
  40af3a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40af3e:	b18b      	cbz	r3, 40af64 <_Balloc+0x34>
  40af40:	6819      	ldr	r1, [r3, #0]
  40af42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40af46:	2200      	movs	r2, #0
  40af48:	4618      	mov	r0, r3
  40af4a:	611a      	str	r2, [r3, #16]
  40af4c:	60da      	str	r2, [r3, #12]
  40af4e:	bd38      	pop	{r3, r4, r5, pc}
  40af50:	2221      	movs	r2, #33	; 0x21
  40af52:	2104      	movs	r1, #4
  40af54:	f000 fe58 	bl	40bc08 <_calloc_r>
  40af58:	64e8      	str	r0, [r5, #76]	; 0x4c
  40af5a:	4602      	mov	r2, r0
  40af5c:	2800      	cmp	r0, #0
  40af5e:	d1ec      	bne.n	40af3a <_Balloc+0xa>
  40af60:	2000      	movs	r0, #0
  40af62:	bd38      	pop	{r3, r4, r5, pc}
  40af64:	2101      	movs	r1, #1
  40af66:	4628      	mov	r0, r5
  40af68:	fa01 f504 	lsl.w	r5, r1, r4
  40af6c:	1d6a      	adds	r2, r5, #5
  40af6e:	0092      	lsls	r2, r2, #2
  40af70:	f000 fe4a 	bl	40bc08 <_calloc_r>
  40af74:	4603      	mov	r3, r0
  40af76:	2800      	cmp	r0, #0
  40af78:	d0f2      	beq.n	40af60 <_Balloc+0x30>
  40af7a:	6044      	str	r4, [r0, #4]
  40af7c:	6085      	str	r5, [r0, #8]
  40af7e:	e7e2      	b.n	40af46 <_Balloc+0x16>

0040af80 <_Bfree>:
  40af80:	b131      	cbz	r1, 40af90 <_Bfree+0x10>
  40af82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40af84:	684a      	ldr	r2, [r1, #4]
  40af86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40af8a:	6008      	str	r0, [r1, #0]
  40af8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40af90:	4770      	bx	lr
  40af92:	bf00      	nop

0040af94 <__multadd>:
  40af94:	b5f0      	push	{r4, r5, r6, r7, lr}
  40af96:	460c      	mov	r4, r1
  40af98:	b083      	sub	sp, #12
  40af9a:	4605      	mov	r5, r0
  40af9c:	690e      	ldr	r6, [r1, #16]
  40af9e:	f101 0e14 	add.w	lr, r1, #20
  40afa2:	2700      	movs	r7, #0
  40afa4:	f8de 1000 	ldr.w	r1, [lr]
  40afa8:	3701      	adds	r7, #1
  40afaa:	b288      	uxth	r0, r1
  40afac:	42be      	cmp	r6, r7
  40afae:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40afb2:	fb02 3300 	mla	r3, r2, r0, r3
  40afb6:	fb02 f101 	mul.w	r1, r2, r1
  40afba:	b298      	uxth	r0, r3
  40afbc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  40afc0:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  40afc4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40afc8:	f84e 1b04 	str.w	r1, [lr], #4
  40afcc:	dcea      	bgt.n	40afa4 <__multadd+0x10>
  40afce:	b13b      	cbz	r3, 40afe0 <__multadd+0x4c>
  40afd0:	68a2      	ldr	r2, [r4, #8]
  40afd2:	4296      	cmp	r6, r2
  40afd4:	da07      	bge.n	40afe6 <__multadd+0x52>
  40afd6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40afda:	3601      	adds	r6, #1
  40afdc:	6153      	str	r3, [r2, #20]
  40afde:	6126      	str	r6, [r4, #16]
  40afe0:	4620      	mov	r0, r4
  40afe2:	b003      	add	sp, #12
  40afe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40afe6:	6861      	ldr	r1, [r4, #4]
  40afe8:	4628      	mov	r0, r5
  40afea:	9301      	str	r3, [sp, #4]
  40afec:	3101      	adds	r1, #1
  40afee:	f7ff ff9f 	bl	40af30 <_Balloc>
  40aff2:	6922      	ldr	r2, [r4, #16]
  40aff4:	f104 010c 	add.w	r1, r4, #12
  40aff8:	4607      	mov	r7, r0
  40affa:	3202      	adds	r2, #2
  40affc:	300c      	adds	r0, #12
  40affe:	0092      	lsls	r2, r2, #2
  40b000:	f7ff fe96 	bl	40ad30 <memcpy>
  40b004:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40b006:	6861      	ldr	r1, [r4, #4]
  40b008:	9b01      	ldr	r3, [sp, #4]
  40b00a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b00e:	6020      	str	r0, [r4, #0]
  40b010:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40b014:	463c      	mov	r4, r7
  40b016:	e7de      	b.n	40afd6 <__multadd+0x42>

0040b018 <__hi0bits>:
  40b018:	4b0f      	ldr	r3, [pc, #60]	; (40b058 <__hi0bits+0x40>)
  40b01a:	4003      	ands	r3, r0
  40b01c:	b9b3      	cbnz	r3, 40b04c <__hi0bits+0x34>
  40b01e:	0400      	lsls	r0, r0, #16
  40b020:	2310      	movs	r3, #16
  40b022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40b026:	d101      	bne.n	40b02c <__hi0bits+0x14>
  40b028:	3308      	adds	r3, #8
  40b02a:	0200      	lsls	r0, r0, #8
  40b02c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40b030:	d101      	bne.n	40b036 <__hi0bits+0x1e>
  40b032:	3304      	adds	r3, #4
  40b034:	0100      	lsls	r0, r0, #4
  40b036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40b03a:	d101      	bne.n	40b040 <__hi0bits+0x28>
  40b03c:	3302      	adds	r3, #2
  40b03e:	0080      	lsls	r0, r0, #2
  40b040:	2800      	cmp	r0, #0
  40b042:	db07      	blt.n	40b054 <__hi0bits+0x3c>
  40b044:	0042      	lsls	r2, r0, #1
  40b046:	d403      	bmi.n	40b050 <__hi0bits+0x38>
  40b048:	2020      	movs	r0, #32
  40b04a:	4770      	bx	lr
  40b04c:	2300      	movs	r3, #0
  40b04e:	e7e8      	b.n	40b022 <__hi0bits+0xa>
  40b050:	1c58      	adds	r0, r3, #1
  40b052:	4770      	bx	lr
  40b054:	4618      	mov	r0, r3
  40b056:	4770      	bx	lr
  40b058:	ffff0000 	.word	0xffff0000

0040b05c <__lo0bits>:
  40b05c:	6803      	ldr	r3, [r0, #0]
  40b05e:	f013 0207 	ands.w	r2, r3, #7
  40b062:	d008      	beq.n	40b076 <__lo0bits+0x1a>
  40b064:	07d9      	lsls	r1, r3, #31
  40b066:	d422      	bmi.n	40b0ae <__lo0bits+0x52>
  40b068:	079a      	lsls	r2, r3, #30
  40b06a:	d423      	bmi.n	40b0b4 <__lo0bits+0x58>
  40b06c:	089b      	lsrs	r3, r3, #2
  40b06e:	2202      	movs	r2, #2
  40b070:	6003      	str	r3, [r0, #0]
  40b072:	4610      	mov	r0, r2
  40b074:	4770      	bx	lr
  40b076:	b299      	uxth	r1, r3
  40b078:	b909      	cbnz	r1, 40b07e <__lo0bits+0x22>
  40b07a:	0c1b      	lsrs	r3, r3, #16
  40b07c:	2210      	movs	r2, #16
  40b07e:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b082:	d101      	bne.n	40b088 <__lo0bits+0x2c>
  40b084:	3208      	adds	r2, #8
  40b086:	0a1b      	lsrs	r3, r3, #8
  40b088:	0719      	lsls	r1, r3, #28
  40b08a:	d101      	bne.n	40b090 <__lo0bits+0x34>
  40b08c:	3204      	adds	r2, #4
  40b08e:	091b      	lsrs	r3, r3, #4
  40b090:	0799      	lsls	r1, r3, #30
  40b092:	d101      	bne.n	40b098 <__lo0bits+0x3c>
  40b094:	3202      	adds	r2, #2
  40b096:	089b      	lsrs	r3, r3, #2
  40b098:	07d9      	lsls	r1, r3, #31
  40b09a:	d405      	bmi.n	40b0a8 <__lo0bits+0x4c>
  40b09c:	085b      	lsrs	r3, r3, #1
  40b09e:	d102      	bne.n	40b0a6 <__lo0bits+0x4a>
  40b0a0:	2220      	movs	r2, #32
  40b0a2:	4610      	mov	r0, r2
  40b0a4:	4770      	bx	lr
  40b0a6:	3201      	adds	r2, #1
  40b0a8:	6003      	str	r3, [r0, #0]
  40b0aa:	4610      	mov	r0, r2
  40b0ac:	4770      	bx	lr
  40b0ae:	2200      	movs	r2, #0
  40b0b0:	4610      	mov	r0, r2
  40b0b2:	4770      	bx	lr
  40b0b4:	085b      	lsrs	r3, r3, #1
  40b0b6:	2201      	movs	r2, #1
  40b0b8:	6003      	str	r3, [r0, #0]
  40b0ba:	4610      	mov	r0, r2
  40b0bc:	4770      	bx	lr
  40b0be:	bf00      	nop

0040b0c0 <__i2b>:
  40b0c0:	b510      	push	{r4, lr}
  40b0c2:	460c      	mov	r4, r1
  40b0c4:	2101      	movs	r1, #1
  40b0c6:	f7ff ff33 	bl	40af30 <_Balloc>
  40b0ca:	2201      	movs	r2, #1
  40b0cc:	6144      	str	r4, [r0, #20]
  40b0ce:	6102      	str	r2, [r0, #16]
  40b0d0:	bd10      	pop	{r4, pc}
  40b0d2:	bf00      	nop

0040b0d4 <__multiply>:
  40b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b0d8:	690e      	ldr	r6, [r1, #16]
  40b0da:	b085      	sub	sp, #20
  40b0dc:	6915      	ldr	r5, [r2, #16]
  40b0de:	460c      	mov	r4, r1
  40b0e0:	4691      	mov	r9, r2
  40b0e2:	42ae      	cmp	r6, r5
  40b0e4:	f2c0 8094 	blt.w	40b210 <__multiply+0x13c>
  40b0e8:	462b      	mov	r3, r5
  40b0ea:	4635      	mov	r5, r6
  40b0ec:	461e      	mov	r6, r3
  40b0ee:	eb05 0806 	add.w	r8, r5, r6
  40b0f2:	68a3      	ldr	r3, [r4, #8]
  40b0f4:	6861      	ldr	r1, [r4, #4]
  40b0f6:	4598      	cmp	r8, r3
  40b0f8:	dd00      	ble.n	40b0fc <__multiply+0x28>
  40b0fa:	3101      	adds	r1, #1
  40b0fc:	f7ff ff18 	bl	40af30 <_Balloc>
  40b100:	f100 0a14 	add.w	sl, r0, #20
  40b104:	9001      	str	r0, [sp, #4]
  40b106:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40b10a:	45da      	cmp	sl, fp
  40b10c:	d205      	bcs.n	40b11a <__multiply+0x46>
  40b10e:	4653      	mov	r3, sl
  40b110:	2100      	movs	r1, #0
  40b112:	f843 1b04 	str.w	r1, [r3], #4
  40b116:	459b      	cmp	fp, r3
  40b118:	d8fb      	bhi.n	40b112 <__multiply+0x3e>
  40b11a:	f109 0914 	add.w	r9, r9, #20
  40b11e:	f104 0314 	add.w	r3, r4, #20
  40b122:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40b126:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40b12a:	4591      	cmp	r9, r2
  40b12c:	d25b      	bcs.n	40b1e6 <__multiply+0x112>
  40b12e:	f8cd b008 	str.w	fp, [sp, #8]
  40b132:	4693      	mov	fp, r2
  40b134:	f8cd 800c 	str.w	r8, [sp, #12]
  40b138:	4698      	mov	r8, r3
  40b13a:	f859 6b04 	ldr.w	r6, [r9], #4
  40b13e:	fa1f fe86 	uxth.w	lr, r6
  40b142:	f1be 0f00 	cmp.w	lr, #0
  40b146:	d021      	beq.n	40b18c <__multiply+0xb8>
  40b148:	4647      	mov	r7, r8
  40b14a:	4656      	mov	r6, sl
  40b14c:	2100      	movs	r1, #0
  40b14e:	e000      	b.n	40b152 <__multiply+0x7e>
  40b150:	4626      	mov	r6, r4
  40b152:	f857 2b04 	ldr.w	r2, [r7], #4
  40b156:	4634      	mov	r4, r6
  40b158:	6835      	ldr	r5, [r6, #0]
  40b15a:	b290      	uxth	r0, r2
  40b15c:	45bc      	cmp	ip, r7
  40b15e:	b2ab      	uxth	r3, r5
  40b160:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b164:	fb0e 3000 	mla	r0, lr, r0, r3
  40b168:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40b16c:	4401      	add	r1, r0
  40b16e:	fb0e 3302 	mla	r3, lr, r2, r3
  40b172:	b28a      	uxth	r2, r1
  40b174:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40b178:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40b17c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40b180:	f844 3b04 	str.w	r3, [r4], #4
  40b184:	d8e4      	bhi.n	40b150 <__multiply+0x7c>
  40b186:	6071      	str	r1, [r6, #4]
  40b188:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40b18c:	0c36      	lsrs	r6, r6, #16
  40b18e:	d022      	beq.n	40b1d6 <__multiply+0x102>
  40b190:	f8da 3000 	ldr.w	r3, [sl]
  40b194:	2700      	movs	r7, #0
  40b196:	4655      	mov	r5, sl
  40b198:	4640      	mov	r0, r8
  40b19a:	461a      	mov	r2, r3
  40b19c:	46be      	mov	lr, r7
  40b19e:	e000      	b.n	40b1a2 <__multiply+0xce>
  40b1a0:	4625      	mov	r5, r4
  40b1a2:	8807      	ldrh	r7, [r0, #0]
  40b1a4:	0c12      	lsrs	r2, r2, #16
  40b1a6:	b299      	uxth	r1, r3
  40b1a8:	462c      	mov	r4, r5
  40b1aa:	fb06 2207 	mla	r2, r6, r7, r2
  40b1ae:	eb02 070e 	add.w	r7, r2, lr
  40b1b2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40b1b6:	f844 3b04 	str.w	r3, [r4], #4
  40b1ba:	f850 1b04 	ldr.w	r1, [r0], #4
  40b1be:	686a      	ldr	r2, [r5, #4]
  40b1c0:	0c09      	lsrs	r1, r1, #16
  40b1c2:	4584      	cmp	ip, r0
  40b1c4:	b293      	uxth	r3, r2
  40b1c6:	fb06 3101 	mla	r1, r6, r1, r3
  40b1ca:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  40b1ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40b1d2:	d8e5      	bhi.n	40b1a0 <__multiply+0xcc>
  40b1d4:	606b      	str	r3, [r5, #4]
  40b1d6:	45cb      	cmp	fp, r9
  40b1d8:	f10a 0a04 	add.w	sl, sl, #4
  40b1dc:	d8ad      	bhi.n	40b13a <__multiply+0x66>
  40b1de:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b1e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b1e6:	f1b8 0f00 	cmp.w	r8, #0
  40b1ea:	dd0b      	ble.n	40b204 <__multiply+0x130>
  40b1ec:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  40b1f0:	f1ab 0b04 	sub.w	fp, fp, #4
  40b1f4:	b11b      	cbz	r3, 40b1fe <__multiply+0x12a>
  40b1f6:	e005      	b.n	40b204 <__multiply+0x130>
  40b1f8:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  40b1fc:	b913      	cbnz	r3, 40b204 <__multiply+0x130>
  40b1fe:	f1b8 0801 	subs.w	r8, r8, #1
  40b202:	d1f9      	bne.n	40b1f8 <__multiply+0x124>
  40b204:	9801      	ldr	r0, [sp, #4]
  40b206:	f8c0 8010 	str.w	r8, [r0, #16]
  40b20a:	b005      	add	sp, #20
  40b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b210:	4614      	mov	r4, r2
  40b212:	4689      	mov	r9, r1
  40b214:	e76b      	b.n	40b0ee <__multiply+0x1a>
  40b216:	bf00      	nop

0040b218 <__pow5mult>:
  40b218:	f012 0303 	ands.w	r3, r2, #3
  40b21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b220:	4614      	mov	r4, r2
  40b222:	4607      	mov	r7, r0
  40b224:	460e      	mov	r6, r1
  40b226:	d12d      	bne.n	40b284 <__pow5mult+0x6c>
  40b228:	10a4      	asrs	r4, r4, #2
  40b22a:	d01c      	beq.n	40b266 <__pow5mult+0x4e>
  40b22c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40b22e:	b395      	cbz	r5, 40b296 <__pow5mult+0x7e>
  40b230:	07e3      	lsls	r3, r4, #31
  40b232:	f04f 0800 	mov.w	r8, #0
  40b236:	d406      	bmi.n	40b246 <__pow5mult+0x2e>
  40b238:	1064      	asrs	r4, r4, #1
  40b23a:	d014      	beq.n	40b266 <__pow5mult+0x4e>
  40b23c:	6828      	ldr	r0, [r5, #0]
  40b23e:	b1a8      	cbz	r0, 40b26c <__pow5mult+0x54>
  40b240:	4605      	mov	r5, r0
  40b242:	07e3      	lsls	r3, r4, #31
  40b244:	d5f8      	bpl.n	40b238 <__pow5mult+0x20>
  40b246:	4638      	mov	r0, r7
  40b248:	4631      	mov	r1, r6
  40b24a:	462a      	mov	r2, r5
  40b24c:	f7ff ff42 	bl	40b0d4 <__multiply>
  40b250:	b1b6      	cbz	r6, 40b280 <__pow5mult+0x68>
  40b252:	6872      	ldr	r2, [r6, #4]
  40b254:	1064      	asrs	r4, r4, #1
  40b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b25c:	6031      	str	r1, [r6, #0]
  40b25e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b262:	4606      	mov	r6, r0
  40b264:	d1ea      	bne.n	40b23c <__pow5mult+0x24>
  40b266:	4630      	mov	r0, r6
  40b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b26c:	4629      	mov	r1, r5
  40b26e:	462a      	mov	r2, r5
  40b270:	4638      	mov	r0, r7
  40b272:	f7ff ff2f 	bl	40b0d4 <__multiply>
  40b276:	6028      	str	r0, [r5, #0]
  40b278:	f8c0 8000 	str.w	r8, [r0]
  40b27c:	4605      	mov	r5, r0
  40b27e:	e7e0      	b.n	40b242 <__pow5mult+0x2a>
  40b280:	4606      	mov	r6, r0
  40b282:	e7d9      	b.n	40b238 <__pow5mult+0x20>
  40b284:	1e5a      	subs	r2, r3, #1
  40b286:	4d0b      	ldr	r5, [pc, #44]	; (40b2b4 <__pow5mult+0x9c>)
  40b288:	2300      	movs	r3, #0
  40b28a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b28e:	f7ff fe81 	bl	40af94 <__multadd>
  40b292:	4606      	mov	r6, r0
  40b294:	e7c8      	b.n	40b228 <__pow5mult+0x10>
  40b296:	2101      	movs	r1, #1
  40b298:	4638      	mov	r0, r7
  40b29a:	f7ff fe49 	bl	40af30 <_Balloc>
  40b29e:	f240 2171 	movw	r1, #625	; 0x271
  40b2a2:	2201      	movs	r2, #1
  40b2a4:	2300      	movs	r3, #0
  40b2a6:	6141      	str	r1, [r0, #20]
  40b2a8:	4605      	mov	r5, r0
  40b2aa:	6102      	str	r2, [r0, #16]
  40b2ac:	64b8      	str	r0, [r7, #72]	; 0x48
  40b2ae:	6003      	str	r3, [r0, #0]
  40b2b0:	e7be      	b.n	40b230 <__pow5mult+0x18>
  40b2b2:	bf00      	nop
  40b2b4:	0040d9f0 	.word	0x0040d9f0

0040b2b8 <__lshift>:
  40b2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b2bc:	690e      	ldr	r6, [r1, #16]
  40b2be:	ea4f 1962 	mov.w	r9, r2, asr #5
  40b2c2:	688b      	ldr	r3, [r1, #8]
  40b2c4:	460d      	mov	r5, r1
  40b2c6:	444e      	add	r6, r9
  40b2c8:	4690      	mov	r8, r2
  40b2ca:	4607      	mov	r7, r0
  40b2cc:	6849      	ldr	r1, [r1, #4]
  40b2ce:	1c74      	adds	r4, r6, #1
  40b2d0:	429c      	cmp	r4, r3
  40b2d2:	dd03      	ble.n	40b2dc <__lshift+0x24>
  40b2d4:	005b      	lsls	r3, r3, #1
  40b2d6:	3101      	adds	r1, #1
  40b2d8:	429c      	cmp	r4, r3
  40b2da:	dcfb      	bgt.n	40b2d4 <__lshift+0x1c>
  40b2dc:	4638      	mov	r0, r7
  40b2de:	f7ff fe27 	bl	40af30 <_Balloc>
  40b2e2:	f1b9 0f00 	cmp.w	r9, #0
  40b2e6:	4684      	mov	ip, r0
  40b2e8:	f100 0114 	add.w	r1, r0, #20
  40b2ec:	dd09      	ble.n	40b302 <__lshift+0x4a>
  40b2ee:	2300      	movs	r3, #0
  40b2f0:	460a      	mov	r2, r1
  40b2f2:	4618      	mov	r0, r3
  40b2f4:	3301      	adds	r3, #1
  40b2f6:	f842 0b04 	str.w	r0, [r2], #4
  40b2fa:	454b      	cmp	r3, r9
  40b2fc:	d1fa      	bne.n	40b2f4 <__lshift+0x3c>
  40b2fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40b302:	692a      	ldr	r2, [r5, #16]
  40b304:	f105 0314 	add.w	r3, r5, #20
  40b308:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40b30c:	f018 021f 	ands.w	r2, r8, #31
  40b310:	d023      	beq.n	40b35a <__lshift+0xa2>
  40b312:	f1c2 0920 	rsb	r9, r2, #32
  40b316:	f04f 0a00 	mov.w	sl, #0
  40b31a:	6818      	ldr	r0, [r3, #0]
  40b31c:	4688      	mov	r8, r1
  40b31e:	4090      	lsls	r0, r2
  40b320:	ea4a 0000 	orr.w	r0, sl, r0
  40b324:	f841 0b04 	str.w	r0, [r1], #4
  40b328:	f853 0b04 	ldr.w	r0, [r3], #4
  40b32c:	459e      	cmp	lr, r3
  40b32e:	fa20 fa09 	lsr.w	sl, r0, r9
  40b332:	d8f2      	bhi.n	40b31a <__lshift+0x62>
  40b334:	f8c8 a004 	str.w	sl, [r8, #4]
  40b338:	f1ba 0f00 	cmp.w	sl, #0
  40b33c:	d000      	beq.n	40b340 <__lshift+0x88>
  40b33e:	1cb4      	adds	r4, r6, #2
  40b340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b342:	3c01      	subs	r4, #1
  40b344:	686a      	ldr	r2, [r5, #4]
  40b346:	4660      	mov	r0, ip
  40b348:	f8cc 4010 	str.w	r4, [ip, #16]
  40b34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b350:	6029      	str	r1, [r5, #0]
  40b352:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b35a:	3904      	subs	r1, #4
  40b35c:	f853 2b04 	ldr.w	r2, [r3], #4
  40b360:	459e      	cmp	lr, r3
  40b362:	f841 2f04 	str.w	r2, [r1, #4]!
  40b366:	d8f9      	bhi.n	40b35c <__lshift+0xa4>
  40b368:	e7ea      	b.n	40b340 <__lshift+0x88>
  40b36a:	bf00      	nop

0040b36c <__mcmp>:
  40b36c:	6902      	ldr	r2, [r0, #16]
  40b36e:	690b      	ldr	r3, [r1, #16]
  40b370:	1ad2      	subs	r2, r2, r3
  40b372:	d113      	bne.n	40b39c <__mcmp+0x30>
  40b374:	009a      	lsls	r2, r3, #2
  40b376:	3014      	adds	r0, #20
  40b378:	3114      	adds	r1, #20
  40b37a:	1883      	adds	r3, r0, r2
  40b37c:	4411      	add	r1, r2
  40b37e:	b410      	push	{r4}
  40b380:	e001      	b.n	40b386 <__mcmp+0x1a>
  40b382:	4298      	cmp	r0, r3
  40b384:	d20c      	bcs.n	40b3a0 <__mcmp+0x34>
  40b386:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b38a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b38e:	4294      	cmp	r4, r2
  40b390:	d0f7      	beq.n	40b382 <__mcmp+0x16>
  40b392:	d309      	bcc.n	40b3a8 <__mcmp+0x3c>
  40b394:	2001      	movs	r0, #1
  40b396:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b39a:	4770      	bx	lr
  40b39c:	4610      	mov	r0, r2
  40b39e:	4770      	bx	lr
  40b3a0:	2000      	movs	r0, #0
  40b3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b3a6:	4770      	bx	lr
  40b3a8:	f04f 30ff 	mov.w	r0, #4294967295
  40b3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  40b3b0:	4770      	bx	lr
  40b3b2:	bf00      	nop

0040b3b4 <__mdiff>:
  40b3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b3b8:	460c      	mov	r4, r1
  40b3ba:	4605      	mov	r5, r0
  40b3bc:	4611      	mov	r1, r2
  40b3be:	4617      	mov	r7, r2
  40b3c0:	4620      	mov	r0, r4
  40b3c2:	f7ff ffd3 	bl	40b36c <__mcmp>
  40b3c6:	1e06      	subs	r6, r0, #0
  40b3c8:	d05c      	beq.n	40b484 <__mdiff+0xd0>
  40b3ca:	db55      	blt.n	40b478 <__mdiff+0xc4>
  40b3cc:	f04f 0800 	mov.w	r8, #0
  40b3d0:	6861      	ldr	r1, [r4, #4]
  40b3d2:	4628      	mov	r0, r5
  40b3d4:	f7ff fdac 	bl	40af30 <_Balloc>
  40b3d8:	f107 0514 	add.w	r5, r7, #20
  40b3dc:	693b      	ldr	r3, [r7, #16]
  40b3de:	f104 0114 	add.w	r1, r4, #20
  40b3e2:	6926      	ldr	r6, [r4, #16]
  40b3e4:	4684      	mov	ip, r0
  40b3e6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  40b3ea:	f100 0414 	add.w	r4, r0, #20
  40b3ee:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40b3f2:	2300      	movs	r3, #0
  40b3f4:	f8c0 800c 	str.w	r8, [r0, #12]
  40b3f8:	f851 9b04 	ldr.w	r9, [r1], #4
  40b3fc:	f855 2b04 	ldr.w	r2, [r5], #4
  40b400:	fa13 f889 	uxtah	r8, r3, r9
  40b404:	4608      	mov	r0, r1
  40b406:	b293      	uxth	r3, r2
  40b408:	45ae      	cmp	lr, r5
  40b40a:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b40e:	ebc3 0308 	rsb	r3, r3, r8
  40b412:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40b416:	fa1f f883 	uxth.w	r8, r3
  40b41a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40b41e:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40b422:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b426:	f844 2b04 	str.w	r2, [r4], #4
  40b42a:	d8e5      	bhi.n	40b3f8 <__mdiff+0x44>
  40b42c:	428f      	cmp	r7, r1
  40b42e:	4625      	mov	r5, r4
  40b430:	d916      	bls.n	40b460 <__mdiff+0xac>
  40b432:	f850 2b04 	ldr.w	r2, [r0], #4
  40b436:	fa13 f382 	uxtah	r3, r3, r2
  40b43a:	0c12      	lsrs	r2, r2, #16
  40b43c:	4287      	cmp	r7, r0
  40b43e:	fa1f fe83 	uxth.w	lr, r3
  40b442:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40b446:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40b44a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b44e:	f844 2b04 	str.w	r2, [r4], #4
  40b452:	d8ee      	bhi.n	40b432 <__mdiff+0x7e>
  40b454:	43c9      	mvns	r1, r1
  40b456:	4439      	add	r1, r7
  40b458:	f021 0403 	bic.w	r4, r1, #3
  40b45c:	3404      	adds	r4, #4
  40b45e:	442c      	add	r4, r5
  40b460:	3c04      	subs	r4, #4
  40b462:	b922      	cbnz	r2, 40b46e <__mdiff+0xba>
  40b464:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b468:	3e01      	subs	r6, #1
  40b46a:	2b00      	cmp	r3, #0
  40b46c:	d0fa      	beq.n	40b464 <__mdiff+0xb0>
  40b46e:	4660      	mov	r0, ip
  40b470:	f8cc 6010 	str.w	r6, [ip, #16]
  40b474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b478:	4623      	mov	r3, r4
  40b47a:	f04f 0801 	mov.w	r8, #1
  40b47e:	463c      	mov	r4, r7
  40b480:	461f      	mov	r7, r3
  40b482:	e7a5      	b.n	40b3d0 <__mdiff+0x1c>
  40b484:	4628      	mov	r0, r5
  40b486:	4631      	mov	r1, r6
  40b488:	f7ff fd52 	bl	40af30 <_Balloc>
  40b48c:	2201      	movs	r2, #1
  40b48e:	4603      	mov	r3, r0
  40b490:	6146      	str	r6, [r0, #20]
  40b492:	611a      	str	r2, [r3, #16]
  40b494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b498 <__d2b>:
  40b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b49c:	461c      	mov	r4, r3
  40b49e:	b082      	sub	sp, #8
  40b4a0:	2101      	movs	r1, #1
  40b4a2:	4616      	mov	r6, r2
  40b4a4:	f3c4 550a 	ubfx	r5, r4, #20, #11
  40b4a8:	f7ff fd42 	bl	40af30 <_Balloc>
  40b4ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b4b0:	4607      	mov	r7, r0
  40b4b2:	b10d      	cbz	r5, 40b4b8 <__d2b+0x20>
  40b4b4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b4b8:	9401      	str	r4, [sp, #4]
  40b4ba:	b30e      	cbz	r6, 40b500 <__d2b+0x68>
  40b4bc:	a802      	add	r0, sp, #8
  40b4be:	f840 6d08 	str.w	r6, [r0, #-8]!
  40b4c2:	f7ff fdcb 	bl	40b05c <__lo0bits>
  40b4c6:	2800      	cmp	r0, #0
  40b4c8:	d132      	bne.n	40b530 <__d2b+0x98>
  40b4ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b4ce:	617a      	str	r2, [r7, #20]
  40b4d0:	2b00      	cmp	r3, #0
  40b4d2:	61bb      	str	r3, [r7, #24]
  40b4d4:	bf14      	ite	ne
  40b4d6:	2402      	movne	r4, #2
  40b4d8:	2401      	moveq	r4, #1
  40b4da:	613c      	str	r4, [r7, #16]
  40b4dc:	b9dd      	cbnz	r5, 40b516 <__d2b+0x7e>
  40b4de:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40b4e2:	9a08      	ldr	r2, [sp, #32]
  40b4e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b4e8:	6010      	str	r0, [r2, #0]
  40b4ea:	6918      	ldr	r0, [r3, #16]
  40b4ec:	f7ff fd94 	bl	40b018 <__hi0bits>
  40b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b4f2:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40b4f6:	6018      	str	r0, [r3, #0]
  40b4f8:	4638      	mov	r0, r7
  40b4fa:	b002      	add	sp, #8
  40b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b500:	a801      	add	r0, sp, #4
  40b502:	f7ff fdab 	bl	40b05c <__lo0bits>
  40b506:	2301      	movs	r3, #1
  40b508:	9a01      	ldr	r2, [sp, #4]
  40b50a:	3020      	adds	r0, #32
  40b50c:	461c      	mov	r4, r3
  40b50e:	613b      	str	r3, [r7, #16]
  40b510:	617a      	str	r2, [r7, #20]
  40b512:	2d00      	cmp	r5, #0
  40b514:	d0e3      	beq.n	40b4de <__d2b+0x46>
  40b516:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40b51a:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40b51e:	9a08      	ldr	r2, [sp, #32]
  40b520:	4440      	add	r0, r8
  40b522:	6010      	str	r0, [r2, #0]
  40b524:	4638      	mov	r0, r7
  40b526:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b528:	6013      	str	r3, [r2, #0]
  40b52a:	b002      	add	sp, #8
  40b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b530:	9b01      	ldr	r3, [sp, #4]
  40b532:	f1c0 0120 	rsb	r1, r0, #32
  40b536:	9a00      	ldr	r2, [sp, #0]
  40b538:	fa03 f101 	lsl.w	r1, r3, r1
  40b53c:	40c3      	lsrs	r3, r0
  40b53e:	430a      	orrs	r2, r1
  40b540:	9301      	str	r3, [sp, #4]
  40b542:	617a      	str	r2, [r7, #20]
  40b544:	e7c4      	b.n	40b4d0 <__d2b+0x38>
  40b546:	bf00      	nop

0040b548 <_realloc_r>:
  40b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b54c:	4617      	mov	r7, r2
  40b54e:	b083      	sub	sp, #12
  40b550:	460e      	mov	r6, r1
  40b552:	2900      	cmp	r1, #0
  40b554:	f000 80e2 	beq.w	40b71c <_realloc_r+0x1d4>
  40b558:	f107 040b 	add.w	r4, r7, #11
  40b55c:	4681      	mov	r9, r0
  40b55e:	f7ff fce3 	bl	40af28 <__malloc_lock>
  40b562:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b566:	2c16      	cmp	r4, #22
  40b568:	f1a6 0808 	sub.w	r8, r6, #8
  40b56c:	f023 0503 	bic.w	r5, r3, #3
  40b570:	d850      	bhi.n	40b614 <_realloc_r+0xcc>
  40b572:	2210      	movs	r2, #16
  40b574:	2100      	movs	r1, #0
  40b576:	4614      	mov	r4, r2
  40b578:	42bc      	cmp	r4, r7
  40b57a:	f0c0 80dc 	bcc.w	40b736 <_realloc_r+0x1ee>
  40b57e:	2900      	cmp	r1, #0
  40b580:	f040 80d9 	bne.w	40b736 <_realloc_r+0x1ee>
  40b584:	4295      	cmp	r5, r2
  40b586:	da4a      	bge.n	40b61e <_realloc_r+0xd6>
  40b588:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40b934 <_realloc_r+0x3ec>
  40b58c:	eb08 0105 	add.w	r1, r8, r5
  40b590:	f8db 0008 	ldr.w	r0, [fp, #8]
  40b594:	4288      	cmp	r0, r1
  40b596:	f000 80d3 	beq.w	40b740 <_realloc_r+0x1f8>
  40b59a:	6848      	ldr	r0, [r1, #4]
  40b59c:	f020 0e01 	bic.w	lr, r0, #1
  40b5a0:	448e      	add	lr, r1
  40b5a2:	f8de e004 	ldr.w	lr, [lr, #4]
  40b5a6:	f01e 0f01 	tst.w	lr, #1
  40b5aa:	d14e      	bne.n	40b64a <_realloc_r+0x102>
  40b5ac:	f020 0003 	bic.w	r0, r0, #3
  40b5b0:	4428      	add	r0, r5
  40b5b2:	4290      	cmp	r0, r2
  40b5b4:	f280 80b8 	bge.w	40b728 <_realloc_r+0x1e0>
  40b5b8:	07db      	lsls	r3, r3, #31
  40b5ba:	f100 808b 	bmi.w	40b6d4 <_realloc_r+0x18c>
  40b5be:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b5c2:	ebc3 0a08 	rsb	sl, r3, r8
  40b5c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b5ca:	f023 0303 	bic.w	r3, r3, #3
  40b5ce:	eb00 0e03 	add.w	lr, r0, r3
  40b5d2:	4596      	cmp	lr, r2
  40b5d4:	db43      	blt.n	40b65e <_realloc_r+0x116>
  40b5d6:	68cb      	ldr	r3, [r1, #12]
  40b5d8:	4657      	mov	r7, sl
  40b5da:	6889      	ldr	r1, [r1, #8]
  40b5dc:	1f2a      	subs	r2, r5, #4
  40b5de:	60cb      	str	r3, [r1, #12]
  40b5e0:	2a24      	cmp	r2, #36	; 0x24
  40b5e2:	6099      	str	r1, [r3, #8]
  40b5e4:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40b5e8:	f8da 300c 	ldr.w	r3, [sl, #12]
  40b5ec:	60cb      	str	r3, [r1, #12]
  40b5ee:	6099      	str	r1, [r3, #8]
  40b5f0:	f200 813c 	bhi.w	40b86c <_realloc_r+0x324>
  40b5f4:	2a13      	cmp	r2, #19
  40b5f6:	f240 80fa 	bls.w	40b7ee <_realloc_r+0x2a6>
  40b5fa:	6833      	ldr	r3, [r6, #0]
  40b5fc:	2a1b      	cmp	r2, #27
  40b5fe:	f8ca 3008 	str.w	r3, [sl, #8]
  40b602:	6873      	ldr	r3, [r6, #4]
  40b604:	f8ca 300c 	str.w	r3, [sl, #12]
  40b608:	f200 813b 	bhi.w	40b882 <_realloc_r+0x33a>
  40b60c:	3608      	adds	r6, #8
  40b60e:	f10a 0310 	add.w	r3, sl, #16
  40b612:	e0ed      	b.n	40b7f0 <_realloc_r+0x2a8>
  40b614:	f024 0407 	bic.w	r4, r4, #7
  40b618:	4622      	mov	r2, r4
  40b61a:	0fe1      	lsrs	r1, r4, #31
  40b61c:	e7ac      	b.n	40b578 <_realloc_r+0x30>
  40b61e:	4637      	mov	r7, r6
  40b620:	1b2a      	subs	r2, r5, r4
  40b622:	f003 0301 	and.w	r3, r3, #1
  40b626:	2a0f      	cmp	r2, #15
  40b628:	d841      	bhi.n	40b6ae <_realloc_r+0x166>
  40b62a:	eb08 0205 	add.w	r2, r8, r5
  40b62e:	431d      	orrs	r5, r3
  40b630:	f8c8 5004 	str.w	r5, [r8, #4]
  40b634:	6853      	ldr	r3, [r2, #4]
  40b636:	f043 0301 	orr.w	r3, r3, #1
  40b63a:	6053      	str	r3, [r2, #4]
  40b63c:	4648      	mov	r0, r9
  40b63e:	f7ff fc75 	bl	40af2c <__malloc_unlock>
  40b642:	4638      	mov	r0, r7
  40b644:	b003      	add	sp, #12
  40b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b64a:	07d9      	lsls	r1, r3, #31
  40b64c:	d442      	bmi.n	40b6d4 <_realloc_r+0x18c>
  40b64e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b652:	ebc3 0a08 	rsb	sl, r3, r8
  40b656:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b65a:	f023 0303 	bic.w	r3, r3, #3
  40b65e:	442b      	add	r3, r5
  40b660:	4293      	cmp	r3, r2
  40b662:	db37      	blt.n	40b6d4 <_realloc_r+0x18c>
  40b664:	4657      	mov	r7, sl
  40b666:	1f2a      	subs	r2, r5, #4
  40b668:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b66c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40b670:	2a24      	cmp	r2, #36	; 0x24
  40b672:	60c1      	str	r1, [r0, #12]
  40b674:	6088      	str	r0, [r1, #8]
  40b676:	f200 80c6 	bhi.w	40b806 <_realloc_r+0x2be>
  40b67a:	2a13      	cmp	r2, #19
  40b67c:	f240 80ff 	bls.w	40b87e <_realloc_r+0x336>
  40b680:	6831      	ldr	r1, [r6, #0]
  40b682:	2a1b      	cmp	r2, #27
  40b684:	f8ca 1008 	str.w	r1, [sl, #8]
  40b688:	6871      	ldr	r1, [r6, #4]
  40b68a:	f8ca 100c 	str.w	r1, [sl, #12]
  40b68e:	f200 810d 	bhi.w	40b8ac <_realloc_r+0x364>
  40b692:	3608      	adds	r6, #8
  40b694:	f10a 0210 	add.w	r2, sl, #16
  40b698:	6831      	ldr	r1, [r6, #0]
  40b69a:	461d      	mov	r5, r3
  40b69c:	46d0      	mov	r8, sl
  40b69e:	6011      	str	r1, [r2, #0]
  40b6a0:	6873      	ldr	r3, [r6, #4]
  40b6a2:	6053      	str	r3, [r2, #4]
  40b6a4:	68b3      	ldr	r3, [r6, #8]
  40b6a6:	6093      	str	r3, [r2, #8]
  40b6a8:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b6ac:	e7b8      	b.n	40b620 <_realloc_r+0xd8>
  40b6ae:	eb08 0504 	add.w	r5, r8, r4
  40b6b2:	f042 0601 	orr.w	r6, r2, #1
  40b6b6:	431c      	orrs	r4, r3
  40b6b8:	4648      	mov	r0, r9
  40b6ba:	442a      	add	r2, r5
  40b6bc:	f105 0108 	add.w	r1, r5, #8
  40b6c0:	f8c8 4004 	str.w	r4, [r8, #4]
  40b6c4:	606e      	str	r6, [r5, #4]
  40b6c6:	6853      	ldr	r3, [r2, #4]
  40b6c8:	f043 0301 	orr.w	r3, r3, #1
  40b6cc:	6053      	str	r3, [r2, #4]
  40b6ce:	f7fe fd2b 	bl	40a128 <_free_r>
  40b6d2:	e7b3      	b.n	40b63c <_realloc_r+0xf4>
  40b6d4:	4639      	mov	r1, r7
  40b6d6:	4648      	mov	r0, r9
  40b6d8:	f7ff f836 	bl	40a748 <_malloc_r>
  40b6dc:	4607      	mov	r7, r0
  40b6de:	2800      	cmp	r0, #0
  40b6e0:	d0ac      	beq.n	40b63c <_realloc_r+0xf4>
  40b6e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b6e6:	f1a0 0108 	sub.w	r1, r0, #8
  40b6ea:	f023 0201 	bic.w	r2, r3, #1
  40b6ee:	4442      	add	r2, r8
  40b6f0:	4291      	cmp	r1, r2
  40b6f2:	f000 80b4 	beq.w	40b85e <_realloc_r+0x316>
  40b6f6:	1f2a      	subs	r2, r5, #4
  40b6f8:	2a24      	cmp	r2, #36	; 0x24
  40b6fa:	f200 80a1 	bhi.w	40b840 <_realloc_r+0x2f8>
  40b6fe:	2a13      	cmp	r2, #19
  40b700:	d86a      	bhi.n	40b7d8 <_realloc_r+0x290>
  40b702:	4603      	mov	r3, r0
  40b704:	4632      	mov	r2, r6
  40b706:	6811      	ldr	r1, [r2, #0]
  40b708:	6019      	str	r1, [r3, #0]
  40b70a:	6851      	ldr	r1, [r2, #4]
  40b70c:	6059      	str	r1, [r3, #4]
  40b70e:	6892      	ldr	r2, [r2, #8]
  40b710:	609a      	str	r2, [r3, #8]
  40b712:	4631      	mov	r1, r6
  40b714:	4648      	mov	r0, r9
  40b716:	f7fe fd07 	bl	40a128 <_free_r>
  40b71a:	e78f      	b.n	40b63c <_realloc_r+0xf4>
  40b71c:	4611      	mov	r1, r2
  40b71e:	b003      	add	sp, #12
  40b720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b724:	f7ff b810 	b.w	40a748 <_malloc_r>
  40b728:	68ca      	ldr	r2, [r1, #12]
  40b72a:	4637      	mov	r7, r6
  40b72c:	6889      	ldr	r1, [r1, #8]
  40b72e:	4605      	mov	r5, r0
  40b730:	60ca      	str	r2, [r1, #12]
  40b732:	6091      	str	r1, [r2, #8]
  40b734:	e774      	b.n	40b620 <_realloc_r+0xd8>
  40b736:	230c      	movs	r3, #12
  40b738:	2000      	movs	r0, #0
  40b73a:	f8c9 3000 	str.w	r3, [r9]
  40b73e:	e781      	b.n	40b644 <_realloc_r+0xfc>
  40b740:	6841      	ldr	r1, [r0, #4]
  40b742:	f104 0010 	add.w	r0, r4, #16
  40b746:	f021 0103 	bic.w	r1, r1, #3
  40b74a:	4429      	add	r1, r5
  40b74c:	4281      	cmp	r1, r0
  40b74e:	da63      	bge.n	40b818 <_realloc_r+0x2d0>
  40b750:	07db      	lsls	r3, r3, #31
  40b752:	d4bf      	bmi.n	40b6d4 <_realloc_r+0x18c>
  40b754:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b758:	ebc3 0a08 	rsb	sl, r3, r8
  40b75c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b760:	f023 0303 	bic.w	r3, r3, #3
  40b764:	eb01 0c03 	add.w	ip, r1, r3
  40b768:	4560      	cmp	r0, ip
  40b76a:	f73f af78 	bgt.w	40b65e <_realloc_r+0x116>
  40b76e:	4657      	mov	r7, sl
  40b770:	1f2a      	subs	r2, r5, #4
  40b772:	f8da 300c 	ldr.w	r3, [sl, #12]
  40b776:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40b77a:	2a24      	cmp	r2, #36	; 0x24
  40b77c:	60cb      	str	r3, [r1, #12]
  40b77e:	6099      	str	r1, [r3, #8]
  40b780:	f200 80b8 	bhi.w	40b8f4 <_realloc_r+0x3ac>
  40b784:	2a13      	cmp	r2, #19
  40b786:	f240 80a8 	bls.w	40b8da <_realloc_r+0x392>
  40b78a:	6833      	ldr	r3, [r6, #0]
  40b78c:	2a1b      	cmp	r2, #27
  40b78e:	f8ca 3008 	str.w	r3, [sl, #8]
  40b792:	6873      	ldr	r3, [r6, #4]
  40b794:	f8ca 300c 	str.w	r3, [sl, #12]
  40b798:	f200 80b5 	bhi.w	40b906 <_realloc_r+0x3be>
  40b79c:	3608      	adds	r6, #8
  40b79e:	f10a 0310 	add.w	r3, sl, #16
  40b7a2:	6832      	ldr	r2, [r6, #0]
  40b7a4:	601a      	str	r2, [r3, #0]
  40b7a6:	6872      	ldr	r2, [r6, #4]
  40b7a8:	605a      	str	r2, [r3, #4]
  40b7aa:	68b2      	ldr	r2, [r6, #8]
  40b7ac:	609a      	str	r2, [r3, #8]
  40b7ae:	ebc4 030c 	rsb	r3, r4, ip
  40b7b2:	eb0a 0204 	add.w	r2, sl, r4
  40b7b6:	4648      	mov	r0, r9
  40b7b8:	f043 0301 	orr.w	r3, r3, #1
  40b7bc:	f8cb 2008 	str.w	r2, [fp, #8]
  40b7c0:	6053      	str	r3, [r2, #4]
  40b7c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b7c6:	f003 0301 	and.w	r3, r3, #1
  40b7ca:	431c      	orrs	r4, r3
  40b7cc:	f8ca 4004 	str.w	r4, [sl, #4]
  40b7d0:	f7ff fbac 	bl	40af2c <__malloc_unlock>
  40b7d4:	4638      	mov	r0, r7
  40b7d6:	e735      	b.n	40b644 <_realloc_r+0xfc>
  40b7d8:	6833      	ldr	r3, [r6, #0]
  40b7da:	2a1b      	cmp	r2, #27
  40b7dc:	6003      	str	r3, [r0, #0]
  40b7de:	6873      	ldr	r3, [r6, #4]
  40b7e0:	6043      	str	r3, [r0, #4]
  40b7e2:	d831      	bhi.n	40b848 <_realloc_r+0x300>
  40b7e4:	f100 0308 	add.w	r3, r0, #8
  40b7e8:	f106 0208 	add.w	r2, r6, #8
  40b7ec:	e78b      	b.n	40b706 <_realloc_r+0x1be>
  40b7ee:	463b      	mov	r3, r7
  40b7f0:	6832      	ldr	r2, [r6, #0]
  40b7f2:	4675      	mov	r5, lr
  40b7f4:	46d0      	mov	r8, sl
  40b7f6:	601a      	str	r2, [r3, #0]
  40b7f8:	6872      	ldr	r2, [r6, #4]
  40b7fa:	605a      	str	r2, [r3, #4]
  40b7fc:	68b2      	ldr	r2, [r6, #8]
  40b7fe:	609a      	str	r2, [r3, #8]
  40b800:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b804:	e70c      	b.n	40b620 <_realloc_r+0xd8>
  40b806:	4631      	mov	r1, r6
  40b808:	4638      	mov	r0, r7
  40b80a:	461d      	mov	r5, r3
  40b80c:	46d0      	mov	r8, sl
  40b80e:	f7ff fb29 	bl	40ae64 <memmove>
  40b812:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b816:	e703      	b.n	40b620 <_realloc_r+0xd8>
  40b818:	1b0b      	subs	r3, r1, r4
  40b81a:	eb08 0204 	add.w	r2, r8, r4
  40b81e:	4648      	mov	r0, r9
  40b820:	f043 0301 	orr.w	r3, r3, #1
  40b824:	f8cb 2008 	str.w	r2, [fp, #8]
  40b828:	6053      	str	r3, [r2, #4]
  40b82a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b82e:	f003 0301 	and.w	r3, r3, #1
  40b832:	431c      	orrs	r4, r3
  40b834:	f846 4c04 	str.w	r4, [r6, #-4]
  40b838:	f7ff fb78 	bl	40af2c <__malloc_unlock>
  40b83c:	4630      	mov	r0, r6
  40b83e:	e701      	b.n	40b644 <_realloc_r+0xfc>
  40b840:	4631      	mov	r1, r6
  40b842:	f7ff fb0f 	bl	40ae64 <memmove>
  40b846:	e764      	b.n	40b712 <_realloc_r+0x1ca>
  40b848:	68b3      	ldr	r3, [r6, #8]
  40b84a:	2a24      	cmp	r2, #36	; 0x24
  40b84c:	6083      	str	r3, [r0, #8]
  40b84e:	68f3      	ldr	r3, [r6, #12]
  40b850:	60c3      	str	r3, [r0, #12]
  40b852:	d022      	beq.n	40b89a <_realloc_r+0x352>
  40b854:	f100 0310 	add.w	r3, r0, #16
  40b858:	f106 0210 	add.w	r2, r6, #16
  40b85c:	e753      	b.n	40b706 <_realloc_r+0x1be>
  40b85e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b862:	4637      	mov	r7, r6
  40b864:	f022 0203 	bic.w	r2, r2, #3
  40b868:	4415      	add	r5, r2
  40b86a:	e6d9      	b.n	40b620 <_realloc_r+0xd8>
  40b86c:	4631      	mov	r1, r6
  40b86e:	4638      	mov	r0, r7
  40b870:	4675      	mov	r5, lr
  40b872:	46d0      	mov	r8, sl
  40b874:	f7ff faf6 	bl	40ae64 <memmove>
  40b878:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b87c:	e6d0      	b.n	40b620 <_realloc_r+0xd8>
  40b87e:	463a      	mov	r2, r7
  40b880:	e70a      	b.n	40b698 <_realloc_r+0x150>
  40b882:	68b3      	ldr	r3, [r6, #8]
  40b884:	2a24      	cmp	r2, #36	; 0x24
  40b886:	f8ca 3010 	str.w	r3, [sl, #16]
  40b88a:	68f3      	ldr	r3, [r6, #12]
  40b88c:	f8ca 3014 	str.w	r3, [sl, #20]
  40b890:	d018      	beq.n	40b8c4 <_realloc_r+0x37c>
  40b892:	3610      	adds	r6, #16
  40b894:	f10a 0318 	add.w	r3, sl, #24
  40b898:	e7aa      	b.n	40b7f0 <_realloc_r+0x2a8>
  40b89a:	6931      	ldr	r1, [r6, #16]
  40b89c:	f100 0318 	add.w	r3, r0, #24
  40b8a0:	f106 0218 	add.w	r2, r6, #24
  40b8a4:	6101      	str	r1, [r0, #16]
  40b8a6:	6971      	ldr	r1, [r6, #20]
  40b8a8:	6141      	str	r1, [r0, #20]
  40b8aa:	e72c      	b.n	40b706 <_realloc_r+0x1be>
  40b8ac:	68b1      	ldr	r1, [r6, #8]
  40b8ae:	2a24      	cmp	r2, #36	; 0x24
  40b8b0:	f8ca 1010 	str.w	r1, [sl, #16]
  40b8b4:	68f1      	ldr	r1, [r6, #12]
  40b8b6:	f8ca 1014 	str.w	r1, [sl, #20]
  40b8ba:	d010      	beq.n	40b8de <_realloc_r+0x396>
  40b8bc:	3610      	adds	r6, #16
  40b8be:	f10a 0218 	add.w	r2, sl, #24
  40b8c2:	e6e9      	b.n	40b698 <_realloc_r+0x150>
  40b8c4:	6932      	ldr	r2, [r6, #16]
  40b8c6:	f10a 0320 	add.w	r3, sl, #32
  40b8ca:	3618      	adds	r6, #24
  40b8cc:	f8ca 2018 	str.w	r2, [sl, #24]
  40b8d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b8d4:	f8ca 201c 	str.w	r2, [sl, #28]
  40b8d8:	e78a      	b.n	40b7f0 <_realloc_r+0x2a8>
  40b8da:	463b      	mov	r3, r7
  40b8dc:	e761      	b.n	40b7a2 <_realloc_r+0x25a>
  40b8de:	6931      	ldr	r1, [r6, #16]
  40b8e0:	f10a 0220 	add.w	r2, sl, #32
  40b8e4:	3618      	adds	r6, #24
  40b8e6:	f8ca 1018 	str.w	r1, [sl, #24]
  40b8ea:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40b8ee:	f8ca 101c 	str.w	r1, [sl, #28]
  40b8f2:	e6d1      	b.n	40b698 <_realloc_r+0x150>
  40b8f4:	4631      	mov	r1, r6
  40b8f6:	4638      	mov	r0, r7
  40b8f8:	f8cd c004 	str.w	ip, [sp, #4]
  40b8fc:	f7ff fab2 	bl	40ae64 <memmove>
  40b900:	f8dd c004 	ldr.w	ip, [sp, #4]
  40b904:	e753      	b.n	40b7ae <_realloc_r+0x266>
  40b906:	68b3      	ldr	r3, [r6, #8]
  40b908:	2a24      	cmp	r2, #36	; 0x24
  40b90a:	f8ca 3010 	str.w	r3, [sl, #16]
  40b90e:	68f3      	ldr	r3, [r6, #12]
  40b910:	f8ca 3014 	str.w	r3, [sl, #20]
  40b914:	d003      	beq.n	40b91e <_realloc_r+0x3d6>
  40b916:	3610      	adds	r6, #16
  40b918:	f10a 0318 	add.w	r3, sl, #24
  40b91c:	e741      	b.n	40b7a2 <_realloc_r+0x25a>
  40b91e:	6932      	ldr	r2, [r6, #16]
  40b920:	f10a 0320 	add.w	r3, sl, #32
  40b924:	3618      	adds	r6, #24
  40b926:	f8ca 2018 	str.w	r2, [sl, #24]
  40b92a:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b92e:	f8ca 201c 	str.w	r2, [sl, #28]
  40b932:	e736      	b.n	40b7a2 <_realloc_r+0x25a>
  40b934:	20400504 	.word	0x20400504

0040b938 <__fpclassifyd>:
  40b938:	fab0 f080 	clz	r0, r0
  40b93c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  40b940:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40b944:	d102      	bne.n	40b94c <__fpclassifyd+0x14>
  40b946:	b108      	cbz	r0, 40b94c <__fpclassifyd+0x14>
  40b948:	2002      	movs	r0, #2
  40b94a:	4770      	bx	lr
  40b94c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40b950:	4b08      	ldr	r3, [pc, #32]	; (40b974 <__fpclassifyd+0x3c>)
  40b952:	429a      	cmp	r2, r3
  40b954:	d801      	bhi.n	40b95a <__fpclassifyd+0x22>
  40b956:	2004      	movs	r0, #4
  40b958:	4770      	bx	lr
  40b95a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b95e:	d201      	bcs.n	40b964 <__fpclassifyd+0x2c>
  40b960:	2003      	movs	r0, #3
  40b962:	4770      	bx	lr
  40b964:	4b04      	ldr	r3, [pc, #16]	; (40b978 <__fpclassifyd+0x40>)
  40b966:	4299      	cmp	r1, r3
  40b968:	bf14      	ite	ne
  40b96a:	2000      	movne	r0, #0
  40b96c:	f000 0001 	andeq.w	r0, r0, #1
  40b970:	4770      	bx	lr
  40b972:	bf00      	nop
  40b974:	7fdfffff 	.word	0x7fdfffff
  40b978:	7ff00000 	.word	0x7ff00000

0040b97c <_sbrk_r>:
  40b97c:	b538      	push	{r3, r4, r5, lr}
  40b97e:	2300      	movs	r3, #0
  40b980:	4c06      	ldr	r4, [pc, #24]	; (40b99c <_sbrk_r+0x20>)
  40b982:	4605      	mov	r5, r0
  40b984:	4608      	mov	r0, r1
  40b986:	6023      	str	r3, [r4, #0]
  40b988:	f7f6 fe30 	bl	4025ec <_sbrk>
  40b98c:	1c43      	adds	r3, r0, #1
  40b98e:	d000      	beq.n	40b992 <_sbrk_r+0x16>
  40b990:	bd38      	pop	{r3, r4, r5, pc}
  40b992:	6823      	ldr	r3, [r4, #0]
  40b994:	2b00      	cmp	r3, #0
  40b996:	d0fb      	beq.n	40b990 <_sbrk_r+0x14>
  40b998:	602b      	str	r3, [r5, #0]
  40b99a:	bd38      	pop	{r3, r4, r5, pc}
  40b99c:	20401868 	.word	0x20401868

0040b9a0 <__sread>:
  40b9a0:	b510      	push	{r4, lr}
  40b9a2:	460c      	mov	r4, r1
  40b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b9a8:	f000 f9ec 	bl	40bd84 <_read_r>
  40b9ac:	2800      	cmp	r0, #0
  40b9ae:	db03      	blt.n	40b9b8 <__sread+0x18>
  40b9b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b9b2:	4403      	add	r3, r0
  40b9b4:	6523      	str	r3, [r4, #80]	; 0x50
  40b9b6:	bd10      	pop	{r4, pc}
  40b9b8:	89a3      	ldrh	r3, [r4, #12]
  40b9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b9be:	81a3      	strh	r3, [r4, #12]
  40b9c0:	bd10      	pop	{r4, pc}
  40b9c2:	bf00      	nop

0040b9c4 <__swrite>:
  40b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b9c8:	461d      	mov	r5, r3
  40b9ca:	898b      	ldrh	r3, [r1, #12]
  40b9cc:	4616      	mov	r6, r2
  40b9ce:	460c      	mov	r4, r1
  40b9d0:	05da      	lsls	r2, r3, #23
  40b9d2:	4607      	mov	r7, r0
  40b9d4:	d506      	bpl.n	40b9e4 <__swrite+0x20>
  40b9d6:	2302      	movs	r3, #2
  40b9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b9dc:	2200      	movs	r2, #0
  40b9de:	f000 f9bd 	bl	40bd5c <_lseek_r>
  40b9e2:	89a3      	ldrh	r3, [r4, #12]
  40b9e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b9e8:	4638      	mov	r0, r7
  40b9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b9ee:	4632      	mov	r2, r6
  40b9f0:	81a3      	strh	r3, [r4, #12]
  40b9f2:	462b      	mov	r3, r5
  40b9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b9f8:	f000 b89e 	b.w	40bb38 <_write_r>

0040b9fc <__sseek>:
  40b9fc:	b510      	push	{r4, lr}
  40b9fe:	460c      	mov	r4, r1
  40ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ba04:	f000 f9aa 	bl	40bd5c <_lseek_r>
  40ba08:	1c42      	adds	r2, r0, #1
  40ba0a:	89a3      	ldrh	r3, [r4, #12]
  40ba0c:	d004      	beq.n	40ba18 <__sseek+0x1c>
  40ba0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40ba12:	6520      	str	r0, [r4, #80]	; 0x50
  40ba14:	81a3      	strh	r3, [r4, #12]
  40ba16:	bd10      	pop	{r4, pc}
  40ba18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40ba1c:	81a3      	strh	r3, [r4, #12]
  40ba1e:	bd10      	pop	{r4, pc}

0040ba20 <__sclose>:
  40ba20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ba24:	f000 b920 	b.w	40bc68 <_close_r>

0040ba28 <__ssprint_r>:
  40ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba2c:	6893      	ldr	r3, [r2, #8]
  40ba2e:	b083      	sub	sp, #12
  40ba30:	4691      	mov	r9, r2
  40ba32:	f8d2 8000 	ldr.w	r8, [r2]
  40ba36:	9001      	str	r0, [sp, #4]
  40ba38:	2b00      	cmp	r3, #0
  40ba3a:	d073      	beq.n	40bb24 <__ssprint_r+0xfc>
  40ba3c:	f04f 0b00 	mov.w	fp, #0
  40ba40:	460d      	mov	r5, r1
  40ba42:	6808      	ldr	r0, [r1, #0]
  40ba44:	688b      	ldr	r3, [r1, #8]
  40ba46:	465c      	mov	r4, fp
  40ba48:	2c00      	cmp	r4, #0
  40ba4a:	d046      	beq.n	40bada <__ssprint_r+0xb2>
  40ba4c:	429c      	cmp	r4, r3
  40ba4e:	461e      	mov	r6, r3
  40ba50:	469a      	mov	sl, r3
  40ba52:	d349      	bcc.n	40bae8 <__ssprint_r+0xc0>
  40ba54:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40ba58:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40ba5c:	d02d      	beq.n	40baba <__ssprint_r+0x92>
  40ba5e:	696b      	ldr	r3, [r5, #20]
  40ba60:	1c62      	adds	r2, r4, #1
  40ba62:	6929      	ldr	r1, [r5, #16]
  40ba64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40ba68:	1a46      	subs	r6, r0, r1
  40ba6a:	4610      	mov	r0, r2
  40ba6c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40ba70:	4430      	add	r0, r6
  40ba72:	105f      	asrs	r7, r3, #1
  40ba74:	4287      	cmp	r7, r0
  40ba76:	463a      	mov	r2, r7
  40ba78:	d201      	bcs.n	40ba7e <__ssprint_r+0x56>
  40ba7a:	4607      	mov	r7, r0
  40ba7c:	4602      	mov	r2, r0
  40ba7e:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40ba82:	d034      	beq.n	40baee <__ssprint_r+0xc6>
  40ba84:	4611      	mov	r1, r2
  40ba86:	9801      	ldr	r0, [sp, #4]
  40ba88:	f7fe fe5e 	bl	40a748 <_malloc_r>
  40ba8c:	4682      	mov	sl, r0
  40ba8e:	2800      	cmp	r0, #0
  40ba90:	d04e      	beq.n	40bb30 <__ssprint_r+0x108>
  40ba92:	4632      	mov	r2, r6
  40ba94:	6929      	ldr	r1, [r5, #16]
  40ba96:	f7ff f94b 	bl	40ad30 <memcpy>
  40ba9a:	89aa      	ldrh	r2, [r5, #12]
  40ba9c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40baa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40baa4:	81aa      	strh	r2, [r5, #12]
  40baa6:	eb0a 0006 	add.w	r0, sl, r6
  40baaa:	1bba      	subs	r2, r7, r6
  40baac:	f8c5 a010 	str.w	sl, [r5, #16]
  40bab0:	4626      	mov	r6, r4
  40bab2:	46a2      	mov	sl, r4
  40bab4:	6028      	str	r0, [r5, #0]
  40bab6:	60aa      	str	r2, [r5, #8]
  40bab8:	616f      	str	r7, [r5, #20]
  40baba:	4652      	mov	r2, sl
  40babc:	4659      	mov	r1, fp
  40babe:	f7ff f9d1 	bl	40ae64 <memmove>
  40bac2:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40bac6:	68ab      	ldr	r3, [r5, #8]
  40bac8:	6828      	ldr	r0, [r5, #0]
  40baca:	1b14      	subs	r4, r2, r4
  40bacc:	1b9b      	subs	r3, r3, r6
  40bace:	4450      	add	r0, sl
  40bad0:	60ab      	str	r3, [r5, #8]
  40bad2:	6028      	str	r0, [r5, #0]
  40bad4:	f8c9 4008 	str.w	r4, [r9, #8]
  40bad8:	b324      	cbz	r4, 40bb24 <__ssprint_r+0xfc>
  40bada:	f8d8 b000 	ldr.w	fp, [r8]
  40bade:	f108 0808 	add.w	r8, r8, #8
  40bae2:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40bae6:	e7af      	b.n	40ba48 <__ssprint_r+0x20>
  40bae8:	4626      	mov	r6, r4
  40baea:	46a2      	mov	sl, r4
  40baec:	e7e5      	b.n	40baba <__ssprint_r+0x92>
  40baee:	9801      	ldr	r0, [sp, #4]
  40baf0:	f7ff fd2a 	bl	40b548 <_realloc_r>
  40baf4:	4682      	mov	sl, r0
  40baf6:	2800      	cmp	r0, #0
  40baf8:	d1d5      	bne.n	40baa6 <__ssprint_r+0x7e>
  40bafa:	9c01      	ldr	r4, [sp, #4]
  40bafc:	6929      	ldr	r1, [r5, #16]
  40bafe:	4620      	mov	r0, r4
  40bb00:	f7fe fb12 	bl	40a128 <_free_r>
  40bb04:	230c      	movs	r3, #12
  40bb06:	6023      	str	r3, [r4, #0]
  40bb08:	89ab      	ldrh	r3, [r5, #12]
  40bb0a:	2200      	movs	r2, #0
  40bb0c:	f04f 30ff 	mov.w	r0, #4294967295
  40bb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bb14:	81ab      	strh	r3, [r5, #12]
  40bb16:	f8c9 2008 	str.w	r2, [r9, #8]
  40bb1a:	f8c9 2004 	str.w	r2, [r9, #4]
  40bb1e:	b003      	add	sp, #12
  40bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb24:	2000      	movs	r0, #0
  40bb26:	f8c9 0004 	str.w	r0, [r9, #4]
  40bb2a:	b003      	add	sp, #12
  40bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb30:	230c      	movs	r3, #12
  40bb32:	9a01      	ldr	r2, [sp, #4]
  40bb34:	6013      	str	r3, [r2, #0]
  40bb36:	e7e7      	b.n	40bb08 <__ssprint_r+0xe0>

0040bb38 <_write_r>:
  40bb38:	b570      	push	{r4, r5, r6, lr}
  40bb3a:	4c08      	ldr	r4, [pc, #32]	; (40bb5c <_write_r+0x24>)
  40bb3c:	2500      	movs	r5, #0
  40bb3e:	4606      	mov	r6, r0
  40bb40:	4608      	mov	r0, r1
  40bb42:	4611      	mov	r1, r2
  40bb44:	461a      	mov	r2, r3
  40bb46:	6025      	str	r5, [r4, #0]
  40bb48:	f7f4 fd0c 	bl	400564 <_write>
  40bb4c:	1c43      	adds	r3, r0, #1
  40bb4e:	d000      	beq.n	40bb52 <_write_r+0x1a>
  40bb50:	bd70      	pop	{r4, r5, r6, pc}
  40bb52:	6823      	ldr	r3, [r4, #0]
  40bb54:	2b00      	cmp	r3, #0
  40bb56:	d0fb      	beq.n	40bb50 <_write_r+0x18>
  40bb58:	6033      	str	r3, [r6, #0]
  40bb5a:	bd70      	pop	{r4, r5, r6, pc}
  40bb5c:	20401868 	.word	0x20401868

0040bb60 <__register_exitproc>:
  40bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bb64:	4c26      	ldr	r4, [pc, #152]	; (40bc00 <__register_exitproc+0xa0>)
  40bb66:	4606      	mov	r6, r0
  40bb68:	4688      	mov	r8, r1
  40bb6a:	4691      	mov	r9, r2
  40bb6c:	6825      	ldr	r5, [r4, #0]
  40bb6e:	469a      	mov	sl, r3
  40bb70:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40bb74:	2c00      	cmp	r4, #0
  40bb76:	d03a      	beq.n	40bbee <__register_exitproc+0x8e>
  40bb78:	6860      	ldr	r0, [r4, #4]
  40bb7a:	281f      	cmp	r0, #31
  40bb7c:	dc19      	bgt.n	40bbb2 <__register_exitproc+0x52>
  40bb7e:	1c41      	adds	r1, r0, #1
  40bb80:	b186      	cbz	r6, 40bba4 <__register_exitproc+0x44>
  40bb82:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40bb86:	2201      	movs	r2, #1
  40bb88:	2e02      	cmp	r6, #2
  40bb8a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40bb8e:	fa02 f200 	lsl.w	r2, r2, r0
  40bb92:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40bb96:	ea43 0302 	orr.w	r3, r3, r2
  40bb9a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40bb9e:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40bba2:	d01e      	beq.n	40bbe2 <__register_exitproc+0x82>
  40bba4:	1c83      	adds	r3, r0, #2
  40bba6:	6061      	str	r1, [r4, #4]
  40bba8:	2000      	movs	r0, #0
  40bbaa:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40bbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bbb2:	4b14      	ldr	r3, [pc, #80]	; (40bc04 <__register_exitproc+0xa4>)
  40bbb4:	b303      	cbz	r3, 40bbf8 <__register_exitproc+0x98>
  40bbb6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bbba:	f7fe fdbd 	bl	40a738 <malloc>
  40bbbe:	4604      	mov	r4, r0
  40bbc0:	b1d0      	cbz	r0, 40bbf8 <__register_exitproc+0x98>
  40bbc2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40bbc6:	2700      	movs	r7, #0
  40bbc8:	2101      	movs	r1, #1
  40bbca:	6003      	str	r3, [r0, #0]
  40bbcc:	4638      	mov	r0, r7
  40bbce:	6067      	str	r7, [r4, #4]
  40bbd0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bbd4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40bbd8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40bbdc:	2e00      	cmp	r6, #0
  40bbde:	d0e1      	beq.n	40bba4 <__register_exitproc+0x44>
  40bbe0:	e7cf      	b.n	40bb82 <__register_exitproc+0x22>
  40bbe2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40bbe6:	431a      	orrs	r2, r3
  40bbe8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40bbec:	e7da      	b.n	40bba4 <__register_exitproc+0x44>
  40bbee:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40bbf2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40bbf6:	e7bf      	b.n	40bb78 <__register_exitproc+0x18>
  40bbf8:	f04f 30ff 	mov.w	r0, #4294967295
  40bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bc00:	0040d8a0 	.word	0x0040d8a0
  40bc04:	0040a739 	.word	0x0040a739

0040bc08 <_calloc_r>:
  40bc08:	b510      	push	{r4, lr}
  40bc0a:	fb02 f101 	mul.w	r1, r2, r1
  40bc0e:	f7fe fd9b 	bl	40a748 <_malloc_r>
  40bc12:	4604      	mov	r4, r0
  40bc14:	b168      	cbz	r0, 40bc32 <_calloc_r+0x2a>
  40bc16:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bc1a:	f022 0203 	bic.w	r2, r2, #3
  40bc1e:	3a04      	subs	r2, #4
  40bc20:	2a24      	cmp	r2, #36	; 0x24
  40bc22:	d814      	bhi.n	40bc4e <_calloc_r+0x46>
  40bc24:	2a13      	cmp	r2, #19
  40bc26:	d806      	bhi.n	40bc36 <_calloc_r+0x2e>
  40bc28:	4603      	mov	r3, r0
  40bc2a:	2200      	movs	r2, #0
  40bc2c:	601a      	str	r2, [r3, #0]
  40bc2e:	605a      	str	r2, [r3, #4]
  40bc30:	609a      	str	r2, [r3, #8]
  40bc32:	4620      	mov	r0, r4
  40bc34:	bd10      	pop	{r4, pc}
  40bc36:	2100      	movs	r1, #0
  40bc38:	2a1b      	cmp	r2, #27
  40bc3a:	6001      	str	r1, [r0, #0]
  40bc3c:	6041      	str	r1, [r0, #4]
  40bc3e:	d90b      	bls.n	40bc58 <_calloc_r+0x50>
  40bc40:	2a24      	cmp	r2, #36	; 0x24
  40bc42:	6081      	str	r1, [r0, #8]
  40bc44:	60c1      	str	r1, [r0, #12]
  40bc46:	d00a      	beq.n	40bc5e <_calloc_r+0x56>
  40bc48:	f100 0310 	add.w	r3, r0, #16
  40bc4c:	e7ed      	b.n	40bc2a <_calloc_r+0x22>
  40bc4e:	2100      	movs	r1, #0
  40bc50:	f7fb fbc6 	bl	4073e0 <memset>
  40bc54:	4620      	mov	r0, r4
  40bc56:	bd10      	pop	{r4, pc}
  40bc58:	f100 0308 	add.w	r3, r0, #8
  40bc5c:	e7e5      	b.n	40bc2a <_calloc_r+0x22>
  40bc5e:	6101      	str	r1, [r0, #16]
  40bc60:	f100 0318 	add.w	r3, r0, #24
  40bc64:	6141      	str	r1, [r0, #20]
  40bc66:	e7e0      	b.n	40bc2a <_calloc_r+0x22>

0040bc68 <_close_r>:
  40bc68:	b538      	push	{r3, r4, r5, lr}
  40bc6a:	2300      	movs	r3, #0
  40bc6c:	4c06      	ldr	r4, [pc, #24]	; (40bc88 <_close_r+0x20>)
  40bc6e:	4605      	mov	r5, r0
  40bc70:	4608      	mov	r0, r1
  40bc72:	6023      	str	r3, [r4, #0]
  40bc74:	f7f6 fce6 	bl	402644 <_close>
  40bc78:	1c43      	adds	r3, r0, #1
  40bc7a:	d000      	beq.n	40bc7e <_close_r+0x16>
  40bc7c:	bd38      	pop	{r3, r4, r5, pc}
  40bc7e:	6823      	ldr	r3, [r4, #0]
  40bc80:	2b00      	cmp	r3, #0
  40bc82:	d0fb      	beq.n	40bc7c <_close_r+0x14>
  40bc84:	602b      	str	r3, [r5, #0]
  40bc86:	bd38      	pop	{r3, r4, r5, pc}
  40bc88:	20401868 	.word	0x20401868

0040bc8c <_fclose_r>:
  40bc8c:	2900      	cmp	r1, #0
  40bc8e:	d03d      	beq.n	40bd0c <_fclose_r+0x80>
  40bc90:	b570      	push	{r4, r5, r6, lr}
  40bc92:	4605      	mov	r5, r0
  40bc94:	460c      	mov	r4, r1
  40bc96:	b108      	cbz	r0, 40bc9c <_fclose_r+0x10>
  40bc98:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bc9a:	b37b      	cbz	r3, 40bcfc <_fclose_r+0x70>
  40bc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bca0:	b90b      	cbnz	r3, 40bca6 <_fclose_r+0x1a>
  40bca2:	2000      	movs	r0, #0
  40bca4:	bd70      	pop	{r4, r5, r6, pc}
  40bca6:	4628      	mov	r0, r5
  40bca8:	4621      	mov	r1, r4
  40bcaa:	f7fe f891 	bl	409dd0 <__sflush_r>
  40bcae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40bcb0:	4606      	mov	r6, r0
  40bcb2:	b133      	cbz	r3, 40bcc2 <_fclose_r+0x36>
  40bcb4:	4628      	mov	r0, r5
  40bcb6:	69e1      	ldr	r1, [r4, #28]
  40bcb8:	4798      	blx	r3
  40bcba:	2800      	cmp	r0, #0
  40bcbc:	bfb8      	it	lt
  40bcbe:	f04f 36ff 	movlt.w	r6, #4294967295
  40bcc2:	89a3      	ldrh	r3, [r4, #12]
  40bcc4:	061b      	lsls	r3, r3, #24
  40bcc6:	d41c      	bmi.n	40bd02 <_fclose_r+0x76>
  40bcc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bcca:	b141      	cbz	r1, 40bcde <_fclose_r+0x52>
  40bccc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bcd0:	4299      	cmp	r1, r3
  40bcd2:	d002      	beq.n	40bcda <_fclose_r+0x4e>
  40bcd4:	4628      	mov	r0, r5
  40bcd6:	f7fe fa27 	bl	40a128 <_free_r>
  40bcda:	2300      	movs	r3, #0
  40bcdc:	6323      	str	r3, [r4, #48]	; 0x30
  40bcde:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bce0:	b121      	cbz	r1, 40bcec <_fclose_r+0x60>
  40bce2:	4628      	mov	r0, r5
  40bce4:	f7fe fa20 	bl	40a128 <_free_r>
  40bce8:	2300      	movs	r3, #0
  40bcea:	6463      	str	r3, [r4, #68]	; 0x44
  40bcec:	f7fe f9b4 	bl	40a058 <__sfp_lock_acquire>
  40bcf0:	2300      	movs	r3, #0
  40bcf2:	81a3      	strh	r3, [r4, #12]
  40bcf4:	f7fe f9b2 	bl	40a05c <__sfp_lock_release>
  40bcf8:	4630      	mov	r0, r6
  40bcfa:	bd70      	pop	{r4, r5, r6, pc}
  40bcfc:	f7fe f9a6 	bl	40a04c <__sinit>
  40bd00:	e7cc      	b.n	40bc9c <_fclose_r+0x10>
  40bd02:	4628      	mov	r0, r5
  40bd04:	6921      	ldr	r1, [r4, #16]
  40bd06:	f7fe fa0f 	bl	40a128 <_free_r>
  40bd0a:	e7dd      	b.n	40bcc8 <_fclose_r+0x3c>
  40bd0c:	2000      	movs	r0, #0
  40bd0e:	4770      	bx	lr

0040bd10 <_fstat_r>:
  40bd10:	b538      	push	{r3, r4, r5, lr}
  40bd12:	2300      	movs	r3, #0
  40bd14:	4c07      	ldr	r4, [pc, #28]	; (40bd34 <_fstat_r+0x24>)
  40bd16:	4605      	mov	r5, r0
  40bd18:	4608      	mov	r0, r1
  40bd1a:	4611      	mov	r1, r2
  40bd1c:	6023      	str	r3, [r4, #0]
  40bd1e:	f7f6 fc9d 	bl	40265c <_fstat>
  40bd22:	1c43      	adds	r3, r0, #1
  40bd24:	d000      	beq.n	40bd28 <_fstat_r+0x18>
  40bd26:	bd38      	pop	{r3, r4, r5, pc}
  40bd28:	6823      	ldr	r3, [r4, #0]
  40bd2a:	2b00      	cmp	r3, #0
  40bd2c:	d0fb      	beq.n	40bd26 <_fstat_r+0x16>
  40bd2e:	602b      	str	r3, [r5, #0]
  40bd30:	bd38      	pop	{r3, r4, r5, pc}
  40bd32:	bf00      	nop
  40bd34:	20401868 	.word	0x20401868

0040bd38 <_isatty_r>:
  40bd38:	b538      	push	{r3, r4, r5, lr}
  40bd3a:	2300      	movs	r3, #0
  40bd3c:	4c06      	ldr	r4, [pc, #24]	; (40bd58 <_isatty_r+0x20>)
  40bd3e:	4605      	mov	r5, r0
  40bd40:	4608      	mov	r0, r1
  40bd42:	6023      	str	r3, [r4, #0]
  40bd44:	f7f6 fc9a 	bl	40267c <_isatty>
  40bd48:	1c43      	adds	r3, r0, #1
  40bd4a:	d000      	beq.n	40bd4e <_isatty_r+0x16>
  40bd4c:	bd38      	pop	{r3, r4, r5, pc}
  40bd4e:	6823      	ldr	r3, [r4, #0]
  40bd50:	2b00      	cmp	r3, #0
  40bd52:	d0fb      	beq.n	40bd4c <_isatty_r+0x14>
  40bd54:	602b      	str	r3, [r5, #0]
  40bd56:	bd38      	pop	{r3, r4, r5, pc}
  40bd58:	20401868 	.word	0x20401868

0040bd5c <_lseek_r>:
  40bd5c:	b570      	push	{r4, r5, r6, lr}
  40bd5e:	4c08      	ldr	r4, [pc, #32]	; (40bd80 <_lseek_r+0x24>)
  40bd60:	2500      	movs	r5, #0
  40bd62:	4606      	mov	r6, r0
  40bd64:	4608      	mov	r0, r1
  40bd66:	4611      	mov	r1, r2
  40bd68:	461a      	mov	r2, r3
  40bd6a:	6025      	str	r5, [r4, #0]
  40bd6c:	f7f6 fc92 	bl	402694 <_lseek>
  40bd70:	1c43      	adds	r3, r0, #1
  40bd72:	d000      	beq.n	40bd76 <_lseek_r+0x1a>
  40bd74:	bd70      	pop	{r4, r5, r6, pc}
  40bd76:	6823      	ldr	r3, [r4, #0]
  40bd78:	2b00      	cmp	r3, #0
  40bd7a:	d0fb      	beq.n	40bd74 <_lseek_r+0x18>
  40bd7c:	6033      	str	r3, [r6, #0]
  40bd7e:	bd70      	pop	{r4, r5, r6, pc}
  40bd80:	20401868 	.word	0x20401868

0040bd84 <_read_r>:
  40bd84:	b570      	push	{r4, r5, r6, lr}
  40bd86:	4c08      	ldr	r4, [pc, #32]	; (40bda8 <_read_r+0x24>)
  40bd88:	2500      	movs	r5, #0
  40bd8a:	4606      	mov	r6, r0
  40bd8c:	4608      	mov	r0, r1
  40bd8e:	4611      	mov	r1, r2
  40bd90:	461a      	mov	r2, r3
  40bd92:	6025      	str	r5, [r4, #0]
  40bd94:	f7f4 fbba 	bl	40050c <_read>
  40bd98:	1c43      	adds	r3, r0, #1
  40bd9a:	d000      	beq.n	40bd9e <_read_r+0x1a>
  40bd9c:	bd70      	pop	{r4, r5, r6, pc}
  40bd9e:	6823      	ldr	r3, [r4, #0]
  40bda0:	2b00      	cmp	r3, #0
  40bda2:	d0fb      	beq.n	40bd9c <_read_r+0x18>
  40bda4:	6033      	str	r3, [r6, #0]
  40bda6:	bd70      	pop	{r4, r5, r6, pc}
  40bda8:	20401868 	.word	0x20401868

0040bdac <__aeabi_drsub>:
  40bdac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40bdb0:	e002      	b.n	40bdb8 <__adddf3>
  40bdb2:	bf00      	nop

0040bdb4 <__aeabi_dsub>:
  40bdb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040bdb8 <__adddf3>:
  40bdb8:	b530      	push	{r4, r5, lr}
  40bdba:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40bdbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40bdc2:	ea94 0f05 	teq	r4, r5
  40bdc6:	bf08      	it	eq
  40bdc8:	ea90 0f02 	teqeq	r0, r2
  40bdcc:	bf1f      	itttt	ne
  40bdce:	ea54 0c00 	orrsne.w	ip, r4, r0
  40bdd2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40bdd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40bdda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bdde:	f000 80e2 	beq.w	40bfa6 <__adddf3+0x1ee>
  40bde2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40bde6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40bdea:	bfb8      	it	lt
  40bdec:	426d      	neglt	r5, r5
  40bdee:	dd0c      	ble.n	40be0a <__adddf3+0x52>
  40bdf0:	442c      	add	r4, r5
  40bdf2:	ea80 0202 	eor.w	r2, r0, r2
  40bdf6:	ea81 0303 	eor.w	r3, r1, r3
  40bdfa:	ea82 0000 	eor.w	r0, r2, r0
  40bdfe:	ea83 0101 	eor.w	r1, r3, r1
  40be02:	ea80 0202 	eor.w	r2, r0, r2
  40be06:	ea81 0303 	eor.w	r3, r1, r3
  40be0a:	2d36      	cmp	r5, #54	; 0x36
  40be0c:	bf88      	it	hi
  40be0e:	bd30      	pophi	{r4, r5, pc}
  40be10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40be14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40be18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40be1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40be20:	d002      	beq.n	40be28 <__adddf3+0x70>
  40be22:	4240      	negs	r0, r0
  40be24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40be28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40be2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40be30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40be34:	d002      	beq.n	40be3c <__adddf3+0x84>
  40be36:	4252      	negs	r2, r2
  40be38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40be3c:	ea94 0f05 	teq	r4, r5
  40be40:	f000 80a7 	beq.w	40bf92 <__adddf3+0x1da>
  40be44:	f1a4 0401 	sub.w	r4, r4, #1
  40be48:	f1d5 0e20 	rsbs	lr, r5, #32
  40be4c:	db0d      	blt.n	40be6a <__adddf3+0xb2>
  40be4e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40be52:	fa22 f205 	lsr.w	r2, r2, r5
  40be56:	1880      	adds	r0, r0, r2
  40be58:	f141 0100 	adc.w	r1, r1, #0
  40be5c:	fa03 f20e 	lsl.w	r2, r3, lr
  40be60:	1880      	adds	r0, r0, r2
  40be62:	fa43 f305 	asr.w	r3, r3, r5
  40be66:	4159      	adcs	r1, r3
  40be68:	e00e      	b.n	40be88 <__adddf3+0xd0>
  40be6a:	f1a5 0520 	sub.w	r5, r5, #32
  40be6e:	f10e 0e20 	add.w	lr, lr, #32
  40be72:	2a01      	cmp	r2, #1
  40be74:	fa03 fc0e 	lsl.w	ip, r3, lr
  40be78:	bf28      	it	cs
  40be7a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40be7e:	fa43 f305 	asr.w	r3, r3, r5
  40be82:	18c0      	adds	r0, r0, r3
  40be84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40be88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40be8c:	d507      	bpl.n	40be9e <__adddf3+0xe6>
  40be8e:	f04f 0e00 	mov.w	lr, #0
  40be92:	f1dc 0c00 	rsbs	ip, ip, #0
  40be96:	eb7e 0000 	sbcs.w	r0, lr, r0
  40be9a:	eb6e 0101 	sbc.w	r1, lr, r1
  40be9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40bea2:	d31b      	bcc.n	40bedc <__adddf3+0x124>
  40bea4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40bea8:	d30c      	bcc.n	40bec4 <__adddf3+0x10c>
  40beaa:	0849      	lsrs	r1, r1, #1
  40beac:	ea5f 0030 	movs.w	r0, r0, rrx
  40beb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40beb4:	f104 0401 	add.w	r4, r4, #1
  40beb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40bebc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40bec0:	f080 809a 	bcs.w	40bff8 <__adddf3+0x240>
  40bec4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40bec8:	bf08      	it	eq
  40beca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bece:	f150 0000 	adcs.w	r0, r0, #0
  40bed2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bed6:	ea41 0105 	orr.w	r1, r1, r5
  40beda:	bd30      	pop	{r4, r5, pc}
  40bedc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40bee0:	4140      	adcs	r0, r0
  40bee2:	eb41 0101 	adc.w	r1, r1, r1
  40bee6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40beea:	f1a4 0401 	sub.w	r4, r4, #1
  40beee:	d1e9      	bne.n	40bec4 <__adddf3+0x10c>
  40bef0:	f091 0f00 	teq	r1, #0
  40bef4:	bf04      	itt	eq
  40bef6:	4601      	moveq	r1, r0
  40bef8:	2000      	moveq	r0, #0
  40befa:	fab1 f381 	clz	r3, r1
  40befe:	bf08      	it	eq
  40bf00:	3320      	addeq	r3, #32
  40bf02:	f1a3 030b 	sub.w	r3, r3, #11
  40bf06:	f1b3 0220 	subs.w	r2, r3, #32
  40bf0a:	da0c      	bge.n	40bf26 <__adddf3+0x16e>
  40bf0c:	320c      	adds	r2, #12
  40bf0e:	dd08      	ble.n	40bf22 <__adddf3+0x16a>
  40bf10:	f102 0c14 	add.w	ip, r2, #20
  40bf14:	f1c2 020c 	rsb	r2, r2, #12
  40bf18:	fa01 f00c 	lsl.w	r0, r1, ip
  40bf1c:	fa21 f102 	lsr.w	r1, r1, r2
  40bf20:	e00c      	b.n	40bf3c <__adddf3+0x184>
  40bf22:	f102 0214 	add.w	r2, r2, #20
  40bf26:	bfd8      	it	le
  40bf28:	f1c2 0c20 	rsble	ip, r2, #32
  40bf2c:	fa01 f102 	lsl.w	r1, r1, r2
  40bf30:	fa20 fc0c 	lsr.w	ip, r0, ip
  40bf34:	bfdc      	itt	le
  40bf36:	ea41 010c 	orrle.w	r1, r1, ip
  40bf3a:	4090      	lslle	r0, r2
  40bf3c:	1ae4      	subs	r4, r4, r3
  40bf3e:	bfa2      	ittt	ge
  40bf40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40bf44:	4329      	orrge	r1, r5
  40bf46:	bd30      	popge	{r4, r5, pc}
  40bf48:	ea6f 0404 	mvn.w	r4, r4
  40bf4c:	3c1f      	subs	r4, #31
  40bf4e:	da1c      	bge.n	40bf8a <__adddf3+0x1d2>
  40bf50:	340c      	adds	r4, #12
  40bf52:	dc0e      	bgt.n	40bf72 <__adddf3+0x1ba>
  40bf54:	f104 0414 	add.w	r4, r4, #20
  40bf58:	f1c4 0220 	rsb	r2, r4, #32
  40bf5c:	fa20 f004 	lsr.w	r0, r0, r4
  40bf60:	fa01 f302 	lsl.w	r3, r1, r2
  40bf64:	ea40 0003 	orr.w	r0, r0, r3
  40bf68:	fa21 f304 	lsr.w	r3, r1, r4
  40bf6c:	ea45 0103 	orr.w	r1, r5, r3
  40bf70:	bd30      	pop	{r4, r5, pc}
  40bf72:	f1c4 040c 	rsb	r4, r4, #12
  40bf76:	f1c4 0220 	rsb	r2, r4, #32
  40bf7a:	fa20 f002 	lsr.w	r0, r0, r2
  40bf7e:	fa01 f304 	lsl.w	r3, r1, r4
  40bf82:	ea40 0003 	orr.w	r0, r0, r3
  40bf86:	4629      	mov	r1, r5
  40bf88:	bd30      	pop	{r4, r5, pc}
  40bf8a:	fa21 f004 	lsr.w	r0, r1, r4
  40bf8e:	4629      	mov	r1, r5
  40bf90:	bd30      	pop	{r4, r5, pc}
  40bf92:	f094 0f00 	teq	r4, #0
  40bf96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40bf9a:	bf06      	itte	eq
  40bf9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40bfa0:	3401      	addeq	r4, #1
  40bfa2:	3d01      	subne	r5, #1
  40bfa4:	e74e      	b.n	40be44 <__adddf3+0x8c>
  40bfa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40bfaa:	bf18      	it	ne
  40bfac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bfb0:	d029      	beq.n	40c006 <__adddf3+0x24e>
  40bfb2:	ea94 0f05 	teq	r4, r5
  40bfb6:	bf08      	it	eq
  40bfb8:	ea90 0f02 	teqeq	r0, r2
  40bfbc:	d005      	beq.n	40bfca <__adddf3+0x212>
  40bfbe:	ea54 0c00 	orrs.w	ip, r4, r0
  40bfc2:	bf04      	itt	eq
  40bfc4:	4619      	moveq	r1, r3
  40bfc6:	4610      	moveq	r0, r2
  40bfc8:	bd30      	pop	{r4, r5, pc}
  40bfca:	ea91 0f03 	teq	r1, r3
  40bfce:	bf1e      	ittt	ne
  40bfd0:	2100      	movne	r1, #0
  40bfd2:	2000      	movne	r0, #0
  40bfd4:	bd30      	popne	{r4, r5, pc}
  40bfd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40bfda:	d105      	bne.n	40bfe8 <__adddf3+0x230>
  40bfdc:	0040      	lsls	r0, r0, #1
  40bfde:	4149      	adcs	r1, r1
  40bfe0:	bf28      	it	cs
  40bfe2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40bfe6:	bd30      	pop	{r4, r5, pc}
  40bfe8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40bfec:	bf3c      	itt	cc
  40bfee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40bff2:	bd30      	popcc	{r4, r5, pc}
  40bff4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bff8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40bffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c000:	f04f 0000 	mov.w	r0, #0
  40c004:	bd30      	pop	{r4, r5, pc}
  40c006:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c00a:	bf1a      	itte	ne
  40c00c:	4619      	movne	r1, r3
  40c00e:	4610      	movne	r0, r2
  40c010:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c014:	bf1c      	itt	ne
  40c016:	460b      	movne	r3, r1
  40c018:	4602      	movne	r2, r0
  40c01a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c01e:	bf06      	itte	eq
  40c020:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c024:	ea91 0f03 	teqeq	r1, r3
  40c028:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c02c:	bd30      	pop	{r4, r5, pc}
  40c02e:	bf00      	nop

0040c030 <__aeabi_ui2d>:
  40c030:	f090 0f00 	teq	r0, #0
  40c034:	bf04      	itt	eq
  40c036:	2100      	moveq	r1, #0
  40c038:	4770      	bxeq	lr
  40c03a:	b530      	push	{r4, r5, lr}
  40c03c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c040:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c044:	f04f 0500 	mov.w	r5, #0
  40c048:	f04f 0100 	mov.w	r1, #0
  40c04c:	e750      	b.n	40bef0 <__adddf3+0x138>
  40c04e:	bf00      	nop

0040c050 <__aeabi_i2d>:
  40c050:	f090 0f00 	teq	r0, #0
  40c054:	bf04      	itt	eq
  40c056:	2100      	moveq	r1, #0
  40c058:	4770      	bxeq	lr
  40c05a:	b530      	push	{r4, r5, lr}
  40c05c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c060:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c064:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c068:	bf48      	it	mi
  40c06a:	4240      	negmi	r0, r0
  40c06c:	f04f 0100 	mov.w	r1, #0
  40c070:	e73e      	b.n	40bef0 <__adddf3+0x138>
  40c072:	bf00      	nop

0040c074 <__aeabi_f2d>:
  40c074:	0042      	lsls	r2, r0, #1
  40c076:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c07a:	ea4f 0131 	mov.w	r1, r1, rrx
  40c07e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c082:	bf1f      	itttt	ne
  40c084:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c088:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c08c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c090:	4770      	bxne	lr
  40c092:	f092 0f00 	teq	r2, #0
  40c096:	bf14      	ite	ne
  40c098:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c09c:	4770      	bxeq	lr
  40c09e:	b530      	push	{r4, r5, lr}
  40c0a0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c0a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c0a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c0ac:	e720      	b.n	40bef0 <__adddf3+0x138>
  40c0ae:	bf00      	nop

0040c0b0 <__aeabi_ul2d>:
  40c0b0:	ea50 0201 	orrs.w	r2, r0, r1
  40c0b4:	bf08      	it	eq
  40c0b6:	4770      	bxeq	lr
  40c0b8:	b530      	push	{r4, r5, lr}
  40c0ba:	f04f 0500 	mov.w	r5, #0
  40c0be:	e00a      	b.n	40c0d6 <__aeabi_l2d+0x16>

0040c0c0 <__aeabi_l2d>:
  40c0c0:	ea50 0201 	orrs.w	r2, r0, r1
  40c0c4:	bf08      	it	eq
  40c0c6:	4770      	bxeq	lr
  40c0c8:	b530      	push	{r4, r5, lr}
  40c0ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c0ce:	d502      	bpl.n	40c0d6 <__aeabi_l2d+0x16>
  40c0d0:	4240      	negs	r0, r0
  40c0d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c0d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c0da:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c0de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c0e2:	f43f aedc 	beq.w	40be9e <__adddf3+0xe6>
  40c0e6:	f04f 0203 	mov.w	r2, #3
  40c0ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c0ee:	bf18      	it	ne
  40c0f0:	3203      	addne	r2, #3
  40c0f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c0f6:	bf18      	it	ne
  40c0f8:	3203      	addne	r2, #3
  40c0fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c0fe:	f1c2 0320 	rsb	r3, r2, #32
  40c102:	fa00 fc03 	lsl.w	ip, r0, r3
  40c106:	fa20 f002 	lsr.w	r0, r0, r2
  40c10a:	fa01 fe03 	lsl.w	lr, r1, r3
  40c10e:	ea40 000e 	orr.w	r0, r0, lr
  40c112:	fa21 f102 	lsr.w	r1, r1, r2
  40c116:	4414      	add	r4, r2
  40c118:	e6c1      	b.n	40be9e <__adddf3+0xe6>
  40c11a:	bf00      	nop

0040c11c <__aeabi_dmul>:
  40c11c:	b570      	push	{r4, r5, r6, lr}
  40c11e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c12a:	bf1d      	ittte	ne
  40c12c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c130:	ea94 0f0c 	teqne	r4, ip
  40c134:	ea95 0f0c 	teqne	r5, ip
  40c138:	f000 f8de 	bleq	40c2f8 <__aeabi_dmul+0x1dc>
  40c13c:	442c      	add	r4, r5
  40c13e:	ea81 0603 	eor.w	r6, r1, r3
  40c142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c14a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c14e:	bf18      	it	ne
  40c150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c15c:	d038      	beq.n	40c1d0 <__aeabi_dmul+0xb4>
  40c15e:	fba0 ce02 	umull	ip, lr, r0, r2
  40c162:	f04f 0500 	mov.w	r5, #0
  40c166:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c16a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c16e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c172:	f04f 0600 	mov.w	r6, #0
  40c176:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c17a:	f09c 0f00 	teq	ip, #0
  40c17e:	bf18      	it	ne
  40c180:	f04e 0e01 	orrne.w	lr, lr, #1
  40c184:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c188:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c18c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c190:	d204      	bcs.n	40c19c <__aeabi_dmul+0x80>
  40c192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c196:	416d      	adcs	r5, r5
  40c198:	eb46 0606 	adc.w	r6, r6, r6
  40c19c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c1a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c1a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c1a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c1ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c1b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c1b4:	bf88      	it	hi
  40c1b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c1ba:	d81e      	bhi.n	40c1fa <__aeabi_dmul+0xde>
  40c1bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c1c0:	bf08      	it	eq
  40c1c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c1c6:	f150 0000 	adcs.w	r0, r0, #0
  40c1ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c1ce:	bd70      	pop	{r4, r5, r6, pc}
  40c1d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c1d4:	ea46 0101 	orr.w	r1, r6, r1
  40c1d8:	ea40 0002 	orr.w	r0, r0, r2
  40c1dc:	ea81 0103 	eor.w	r1, r1, r3
  40c1e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c1e4:	bfc2      	ittt	gt
  40c1e6:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c1ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c1ee:	bd70      	popgt	{r4, r5, r6, pc}
  40c1f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c1f4:	f04f 0e00 	mov.w	lr, #0
  40c1f8:	3c01      	subs	r4, #1
  40c1fa:	f300 80ab 	bgt.w	40c354 <__aeabi_dmul+0x238>
  40c1fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c202:	bfde      	ittt	le
  40c204:	2000      	movle	r0, #0
  40c206:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c20a:	bd70      	pople	{r4, r5, r6, pc}
  40c20c:	f1c4 0400 	rsb	r4, r4, #0
  40c210:	3c20      	subs	r4, #32
  40c212:	da35      	bge.n	40c280 <__aeabi_dmul+0x164>
  40c214:	340c      	adds	r4, #12
  40c216:	dc1b      	bgt.n	40c250 <__aeabi_dmul+0x134>
  40c218:	f104 0414 	add.w	r4, r4, #20
  40c21c:	f1c4 0520 	rsb	r5, r4, #32
  40c220:	fa00 f305 	lsl.w	r3, r0, r5
  40c224:	fa20 f004 	lsr.w	r0, r0, r4
  40c228:	fa01 f205 	lsl.w	r2, r1, r5
  40c22c:	ea40 0002 	orr.w	r0, r0, r2
  40c230:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c23c:	fa21 f604 	lsr.w	r6, r1, r4
  40c240:	eb42 0106 	adc.w	r1, r2, r6
  40c244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c248:	bf08      	it	eq
  40c24a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c24e:	bd70      	pop	{r4, r5, r6, pc}
  40c250:	f1c4 040c 	rsb	r4, r4, #12
  40c254:	f1c4 0520 	rsb	r5, r4, #32
  40c258:	fa00 f304 	lsl.w	r3, r0, r4
  40c25c:	fa20 f005 	lsr.w	r0, r0, r5
  40c260:	fa01 f204 	lsl.w	r2, r1, r4
  40c264:	ea40 0002 	orr.w	r0, r0, r2
  40c268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c26c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c270:	f141 0100 	adc.w	r1, r1, #0
  40c274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c278:	bf08      	it	eq
  40c27a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c27e:	bd70      	pop	{r4, r5, r6, pc}
  40c280:	f1c4 0520 	rsb	r5, r4, #32
  40c284:	fa00 f205 	lsl.w	r2, r0, r5
  40c288:	ea4e 0e02 	orr.w	lr, lr, r2
  40c28c:	fa20 f304 	lsr.w	r3, r0, r4
  40c290:	fa01 f205 	lsl.w	r2, r1, r5
  40c294:	ea43 0302 	orr.w	r3, r3, r2
  40c298:	fa21 f004 	lsr.w	r0, r1, r4
  40c29c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c2a0:	fa21 f204 	lsr.w	r2, r1, r4
  40c2a4:	ea20 0002 	bic.w	r0, r0, r2
  40c2a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c2ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c2b0:	bf08      	it	eq
  40c2b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c2b6:	bd70      	pop	{r4, r5, r6, pc}
  40c2b8:	f094 0f00 	teq	r4, #0
  40c2bc:	d10f      	bne.n	40c2de <__aeabi_dmul+0x1c2>
  40c2be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c2c2:	0040      	lsls	r0, r0, #1
  40c2c4:	eb41 0101 	adc.w	r1, r1, r1
  40c2c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c2cc:	bf08      	it	eq
  40c2ce:	3c01      	subeq	r4, #1
  40c2d0:	d0f7      	beq.n	40c2c2 <__aeabi_dmul+0x1a6>
  40c2d2:	ea41 0106 	orr.w	r1, r1, r6
  40c2d6:	f095 0f00 	teq	r5, #0
  40c2da:	bf18      	it	ne
  40c2dc:	4770      	bxne	lr
  40c2de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c2e2:	0052      	lsls	r2, r2, #1
  40c2e4:	eb43 0303 	adc.w	r3, r3, r3
  40c2e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c2ec:	bf08      	it	eq
  40c2ee:	3d01      	subeq	r5, #1
  40c2f0:	d0f7      	beq.n	40c2e2 <__aeabi_dmul+0x1c6>
  40c2f2:	ea43 0306 	orr.w	r3, r3, r6
  40c2f6:	4770      	bx	lr
  40c2f8:	ea94 0f0c 	teq	r4, ip
  40c2fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c300:	bf18      	it	ne
  40c302:	ea95 0f0c 	teqne	r5, ip
  40c306:	d00c      	beq.n	40c322 <__aeabi_dmul+0x206>
  40c308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c30c:	bf18      	it	ne
  40c30e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c312:	d1d1      	bne.n	40c2b8 <__aeabi_dmul+0x19c>
  40c314:	ea81 0103 	eor.w	r1, r1, r3
  40c318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c31c:	f04f 0000 	mov.w	r0, #0
  40c320:	bd70      	pop	{r4, r5, r6, pc}
  40c322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c326:	bf06      	itte	eq
  40c328:	4610      	moveq	r0, r2
  40c32a:	4619      	moveq	r1, r3
  40c32c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c330:	d019      	beq.n	40c366 <__aeabi_dmul+0x24a>
  40c332:	ea94 0f0c 	teq	r4, ip
  40c336:	d102      	bne.n	40c33e <__aeabi_dmul+0x222>
  40c338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c33c:	d113      	bne.n	40c366 <__aeabi_dmul+0x24a>
  40c33e:	ea95 0f0c 	teq	r5, ip
  40c342:	d105      	bne.n	40c350 <__aeabi_dmul+0x234>
  40c344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c348:	bf1c      	itt	ne
  40c34a:	4610      	movne	r0, r2
  40c34c:	4619      	movne	r1, r3
  40c34e:	d10a      	bne.n	40c366 <__aeabi_dmul+0x24a>
  40c350:	ea81 0103 	eor.w	r1, r1, r3
  40c354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c358:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c35c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c360:	f04f 0000 	mov.w	r0, #0
  40c364:	bd70      	pop	{r4, r5, r6, pc}
  40c366:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c36a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c36e:	bd70      	pop	{r4, r5, r6, pc}

0040c370 <__aeabi_ddiv>:
  40c370:	b570      	push	{r4, r5, r6, lr}
  40c372:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c37a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c37e:	bf1d      	ittte	ne
  40c380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c384:	ea94 0f0c 	teqne	r4, ip
  40c388:	ea95 0f0c 	teqne	r5, ip
  40c38c:	f000 f8a7 	bleq	40c4de <__aeabi_ddiv+0x16e>
  40c390:	eba4 0405 	sub.w	r4, r4, r5
  40c394:	ea81 0e03 	eor.w	lr, r1, r3
  40c398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c39c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c3a0:	f000 8088 	beq.w	40c4b4 <__aeabi_ddiv+0x144>
  40c3a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c3a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c3ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c3b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c3b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c3b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c3bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c3c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c3c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c3c8:	429d      	cmp	r5, r3
  40c3ca:	bf08      	it	eq
  40c3cc:	4296      	cmpeq	r6, r2
  40c3ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c3d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c3d6:	d202      	bcs.n	40c3de <__aeabi_ddiv+0x6e>
  40c3d8:	085b      	lsrs	r3, r3, #1
  40c3da:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3de:	1ab6      	subs	r6, r6, r2
  40c3e0:	eb65 0503 	sbc.w	r5, r5, r3
  40c3e4:	085b      	lsrs	r3, r3, #1
  40c3e6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c3ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c3ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c3f2:	ebb6 0e02 	subs.w	lr, r6, r2
  40c3f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c3fa:	bf22      	ittt	cs
  40c3fc:	1ab6      	subcs	r6, r6, r2
  40c3fe:	4675      	movcs	r5, lr
  40c400:	ea40 000c 	orrcs.w	r0, r0, ip
  40c404:	085b      	lsrs	r3, r3, #1
  40c406:	ea4f 0232 	mov.w	r2, r2, rrx
  40c40a:	ebb6 0e02 	subs.w	lr, r6, r2
  40c40e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c412:	bf22      	ittt	cs
  40c414:	1ab6      	subcs	r6, r6, r2
  40c416:	4675      	movcs	r5, lr
  40c418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c41c:	085b      	lsrs	r3, r3, #1
  40c41e:	ea4f 0232 	mov.w	r2, r2, rrx
  40c422:	ebb6 0e02 	subs.w	lr, r6, r2
  40c426:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c42a:	bf22      	ittt	cs
  40c42c:	1ab6      	subcs	r6, r6, r2
  40c42e:	4675      	movcs	r5, lr
  40c430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c434:	085b      	lsrs	r3, r3, #1
  40c436:	ea4f 0232 	mov.w	r2, r2, rrx
  40c43a:	ebb6 0e02 	subs.w	lr, r6, r2
  40c43e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c442:	bf22      	ittt	cs
  40c444:	1ab6      	subcs	r6, r6, r2
  40c446:	4675      	movcs	r5, lr
  40c448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c44c:	ea55 0e06 	orrs.w	lr, r5, r6
  40c450:	d018      	beq.n	40c484 <__aeabi_ddiv+0x114>
  40c452:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c45a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c45e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c46a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c46e:	d1c0      	bne.n	40c3f2 <__aeabi_ddiv+0x82>
  40c470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c474:	d10b      	bne.n	40c48e <__aeabi_ddiv+0x11e>
  40c476:	ea41 0100 	orr.w	r1, r1, r0
  40c47a:	f04f 0000 	mov.w	r0, #0
  40c47e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c482:	e7b6      	b.n	40c3f2 <__aeabi_ddiv+0x82>
  40c484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c488:	bf04      	itt	eq
  40c48a:	4301      	orreq	r1, r0
  40c48c:	2000      	moveq	r0, #0
  40c48e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c492:	bf88      	it	hi
  40c494:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c498:	f63f aeaf 	bhi.w	40c1fa <__aeabi_dmul+0xde>
  40c49c:	ebb5 0c03 	subs.w	ip, r5, r3
  40c4a0:	bf04      	itt	eq
  40c4a2:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c4a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c4aa:	f150 0000 	adcs.w	r0, r0, #0
  40c4ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c4b2:	bd70      	pop	{r4, r5, r6, pc}
  40c4b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c4b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c4bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c4c0:	bfc2      	ittt	gt
  40c4c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c4c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c4ca:	bd70      	popgt	{r4, r5, r6, pc}
  40c4cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c4d0:	f04f 0e00 	mov.w	lr, #0
  40c4d4:	3c01      	subs	r4, #1
  40c4d6:	e690      	b.n	40c1fa <__aeabi_dmul+0xde>
  40c4d8:	ea45 0e06 	orr.w	lr, r5, r6
  40c4dc:	e68d      	b.n	40c1fa <__aeabi_dmul+0xde>
  40c4de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c4e2:	ea94 0f0c 	teq	r4, ip
  40c4e6:	bf08      	it	eq
  40c4e8:	ea95 0f0c 	teqeq	r5, ip
  40c4ec:	f43f af3b 	beq.w	40c366 <__aeabi_dmul+0x24a>
  40c4f0:	ea94 0f0c 	teq	r4, ip
  40c4f4:	d10a      	bne.n	40c50c <__aeabi_ddiv+0x19c>
  40c4f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c4fa:	f47f af34 	bne.w	40c366 <__aeabi_dmul+0x24a>
  40c4fe:	ea95 0f0c 	teq	r5, ip
  40c502:	f47f af25 	bne.w	40c350 <__aeabi_dmul+0x234>
  40c506:	4610      	mov	r0, r2
  40c508:	4619      	mov	r1, r3
  40c50a:	e72c      	b.n	40c366 <__aeabi_dmul+0x24a>
  40c50c:	ea95 0f0c 	teq	r5, ip
  40c510:	d106      	bne.n	40c520 <__aeabi_ddiv+0x1b0>
  40c512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c516:	f43f aefd 	beq.w	40c314 <__aeabi_dmul+0x1f8>
  40c51a:	4610      	mov	r0, r2
  40c51c:	4619      	mov	r1, r3
  40c51e:	e722      	b.n	40c366 <__aeabi_dmul+0x24a>
  40c520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c524:	bf18      	it	ne
  40c526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c52a:	f47f aec5 	bne.w	40c2b8 <__aeabi_dmul+0x19c>
  40c52e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c532:	f47f af0d 	bne.w	40c350 <__aeabi_dmul+0x234>
  40c536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c53a:	f47f aeeb 	bne.w	40c314 <__aeabi_dmul+0x1f8>
  40c53e:	e712      	b.n	40c366 <__aeabi_dmul+0x24a>

0040c540 <__gedf2>:
  40c540:	f04f 3cff 	mov.w	ip, #4294967295
  40c544:	e006      	b.n	40c554 <__cmpdf2+0x4>
  40c546:	bf00      	nop

0040c548 <__ledf2>:
  40c548:	f04f 0c01 	mov.w	ip, #1
  40c54c:	e002      	b.n	40c554 <__cmpdf2+0x4>
  40c54e:	bf00      	nop

0040c550 <__cmpdf2>:
  40c550:	f04f 0c01 	mov.w	ip, #1
  40c554:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c55c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c564:	bf18      	it	ne
  40c566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c56a:	d01b      	beq.n	40c5a4 <__cmpdf2+0x54>
  40c56c:	b001      	add	sp, #4
  40c56e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c572:	bf0c      	ite	eq
  40c574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c578:	ea91 0f03 	teqne	r1, r3
  40c57c:	bf02      	ittt	eq
  40c57e:	ea90 0f02 	teqeq	r0, r2
  40c582:	2000      	moveq	r0, #0
  40c584:	4770      	bxeq	lr
  40c586:	f110 0f00 	cmn.w	r0, #0
  40c58a:	ea91 0f03 	teq	r1, r3
  40c58e:	bf58      	it	pl
  40c590:	4299      	cmppl	r1, r3
  40c592:	bf08      	it	eq
  40c594:	4290      	cmpeq	r0, r2
  40c596:	bf2c      	ite	cs
  40c598:	17d8      	asrcs	r0, r3, #31
  40c59a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c59e:	f040 0001 	orr.w	r0, r0, #1
  40c5a2:	4770      	bx	lr
  40c5a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c5a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c5ac:	d102      	bne.n	40c5b4 <__cmpdf2+0x64>
  40c5ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c5b2:	d107      	bne.n	40c5c4 <__cmpdf2+0x74>
  40c5b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c5b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c5bc:	d1d6      	bne.n	40c56c <__cmpdf2+0x1c>
  40c5be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c5c2:	d0d3      	beq.n	40c56c <__cmpdf2+0x1c>
  40c5c4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c5c8:	4770      	bx	lr
  40c5ca:	bf00      	nop

0040c5cc <__aeabi_cdrcmple>:
  40c5cc:	4684      	mov	ip, r0
  40c5ce:	4610      	mov	r0, r2
  40c5d0:	4662      	mov	r2, ip
  40c5d2:	468c      	mov	ip, r1
  40c5d4:	4619      	mov	r1, r3
  40c5d6:	4663      	mov	r3, ip
  40c5d8:	e000      	b.n	40c5dc <__aeabi_cdcmpeq>
  40c5da:	bf00      	nop

0040c5dc <__aeabi_cdcmpeq>:
  40c5dc:	b501      	push	{r0, lr}
  40c5de:	f7ff ffb7 	bl	40c550 <__cmpdf2>
  40c5e2:	2800      	cmp	r0, #0
  40c5e4:	bf48      	it	mi
  40c5e6:	f110 0f00 	cmnmi.w	r0, #0
  40c5ea:	bd01      	pop	{r0, pc}

0040c5ec <__aeabi_dcmpeq>:
  40c5ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c5f0:	f7ff fff4 	bl	40c5dc <__aeabi_cdcmpeq>
  40c5f4:	bf0c      	ite	eq
  40c5f6:	2001      	moveq	r0, #1
  40c5f8:	2000      	movne	r0, #0
  40c5fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40c5fe:	bf00      	nop

0040c600 <__aeabi_dcmplt>:
  40c600:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c604:	f7ff ffea 	bl	40c5dc <__aeabi_cdcmpeq>
  40c608:	bf34      	ite	cc
  40c60a:	2001      	movcc	r0, #1
  40c60c:	2000      	movcs	r0, #0
  40c60e:	f85d fb08 	ldr.w	pc, [sp], #8
  40c612:	bf00      	nop

0040c614 <__aeabi_dcmple>:
  40c614:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c618:	f7ff ffe0 	bl	40c5dc <__aeabi_cdcmpeq>
  40c61c:	bf94      	ite	ls
  40c61e:	2001      	movls	r0, #1
  40c620:	2000      	movhi	r0, #0
  40c622:	f85d fb08 	ldr.w	pc, [sp], #8
  40c626:	bf00      	nop

0040c628 <__aeabi_dcmpge>:
  40c628:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c62c:	f7ff ffce 	bl	40c5cc <__aeabi_cdrcmple>
  40c630:	bf94      	ite	ls
  40c632:	2001      	movls	r0, #1
  40c634:	2000      	movhi	r0, #0
  40c636:	f85d fb08 	ldr.w	pc, [sp], #8
  40c63a:	bf00      	nop

0040c63c <__aeabi_dcmpgt>:
  40c63c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c640:	f7ff ffc4 	bl	40c5cc <__aeabi_cdrcmple>
  40c644:	bf34      	ite	cc
  40c646:	2001      	movcc	r0, #1
  40c648:	2000      	movcs	r0, #0
  40c64a:	f85d fb08 	ldr.w	pc, [sp], #8
  40c64e:	bf00      	nop

0040c650 <__aeabi_d2iz>:
  40c650:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c658:	d215      	bcs.n	40c686 <__aeabi_d2iz+0x36>
  40c65a:	d511      	bpl.n	40c680 <__aeabi_d2iz+0x30>
  40c65c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c664:	d912      	bls.n	40c68c <__aeabi_d2iz+0x3c>
  40c666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c66a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c66e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c672:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c676:	fa23 f002 	lsr.w	r0, r3, r2
  40c67a:	bf18      	it	ne
  40c67c:	4240      	negne	r0, r0
  40c67e:	4770      	bx	lr
  40c680:	f04f 0000 	mov.w	r0, #0
  40c684:	4770      	bx	lr
  40c686:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c68a:	d105      	bne.n	40c698 <__aeabi_d2iz+0x48>
  40c68c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c690:	bf08      	it	eq
  40c692:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c696:	4770      	bx	lr
  40c698:	f04f 0000 	mov.w	r0, #0
  40c69c:	4770      	bx	lr
  40c69e:	bf00      	nop

0040c6a0 <__aeabi_uldivmod>:
  40c6a0:	b953      	cbnz	r3, 40c6b8 <__aeabi_uldivmod+0x18>
  40c6a2:	b94a      	cbnz	r2, 40c6b8 <__aeabi_uldivmod+0x18>
  40c6a4:	2900      	cmp	r1, #0
  40c6a6:	bf08      	it	eq
  40c6a8:	2800      	cmpeq	r0, #0
  40c6aa:	bf1c      	itt	ne
  40c6ac:	f04f 31ff 	movne.w	r1, #4294967295
  40c6b0:	f04f 30ff 	movne.w	r0, #4294967295
  40c6b4:	f000 b83c 	b.w	40c730 <__aeabi_idiv0>
  40c6b8:	b082      	sub	sp, #8
  40c6ba:	46ec      	mov	ip, sp
  40c6bc:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c6c0:	f000 f81e 	bl	40c700 <__gnu_uldivmod_helper>
  40c6c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c6c8:	b002      	add	sp, #8
  40c6ca:	bc0c      	pop	{r2, r3}
  40c6cc:	4770      	bx	lr
  40c6ce:	bf00      	nop

0040c6d0 <__gnu_ldivmod_helper>:
  40c6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c6d4:	4690      	mov	r8, r2
  40c6d6:	4606      	mov	r6, r0
  40c6d8:	460f      	mov	r7, r1
  40c6da:	461d      	mov	r5, r3
  40c6dc:	9c06      	ldr	r4, [sp, #24]
  40c6de:	f000 f829 	bl	40c734 <__divdi3>
  40c6e2:	fb08 fc01 	mul.w	ip, r8, r1
  40c6e6:	4686      	mov	lr, r0
  40c6e8:	fba8 2300 	umull	r2, r3, r8, r0
  40c6ec:	fb00 c505 	mla	r5, r0, r5, ip
  40c6f0:	1ab2      	subs	r2, r6, r2
  40c6f2:	442b      	add	r3, r5
  40c6f4:	eb67 0303 	sbc.w	r3, r7, r3
  40c6f8:	e9c4 2300 	strd	r2, r3, [r4]
  40c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c700 <__gnu_uldivmod_helper>:
  40c700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c704:	461d      	mov	r5, r3
  40c706:	4617      	mov	r7, r2
  40c708:	4680      	mov	r8, r0
  40c70a:	4689      	mov	r9, r1
  40c70c:	9e08      	ldr	r6, [sp, #32]
  40c70e:	f000 f953 	bl	40c9b8 <__udivdi3>
  40c712:	fb00 f305 	mul.w	r3, r0, r5
  40c716:	fba0 4507 	umull	r4, r5, r0, r7
  40c71a:	fb07 3701 	mla	r7, r7, r1, r3
  40c71e:	ebb8 0404 	subs.w	r4, r8, r4
  40c722:	443d      	add	r5, r7
  40c724:	eb69 0505 	sbc.w	r5, r9, r5
  40c728:	e9c6 4500 	strd	r4, r5, [r6]
  40c72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c730 <__aeabi_idiv0>:
  40c730:	4770      	bx	lr
  40c732:	bf00      	nop

0040c734 <__divdi3>:
  40c734:	2900      	cmp	r1, #0
  40c736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c73a:	f2c0 80a2 	blt.w	40c882 <__divdi3+0x14e>
  40c73e:	2600      	movs	r6, #0
  40c740:	2b00      	cmp	r3, #0
  40c742:	f2c0 8098 	blt.w	40c876 <__divdi3+0x142>
  40c746:	468c      	mov	ip, r1
  40c748:	4690      	mov	r8, r2
  40c74a:	469e      	mov	lr, r3
  40c74c:	4615      	mov	r5, r2
  40c74e:	4604      	mov	r4, r0
  40c750:	460f      	mov	r7, r1
  40c752:	bbcb      	cbnz	r3, 40c7c8 <__divdi3+0x94>
  40c754:	428a      	cmp	r2, r1
  40c756:	d956      	bls.n	40c806 <__divdi3+0xd2>
  40c758:	fab2 f382 	clz	r3, r2
  40c75c:	b13b      	cbz	r3, 40c76e <__divdi3+0x3a>
  40c75e:	f1c3 0220 	rsb	r2, r3, #32
  40c762:	409f      	lsls	r7, r3
  40c764:	409d      	lsls	r5, r3
  40c766:	409c      	lsls	r4, r3
  40c768:	fa20 f202 	lsr.w	r2, r0, r2
  40c76c:	4317      	orrs	r7, r2
  40c76e:	0c28      	lsrs	r0, r5, #16
  40c770:	0c22      	lsrs	r2, r4, #16
  40c772:	fa1f fe85 	uxth.w	lr, r5
  40c776:	fbb7 f1f0 	udiv	r1, r7, r0
  40c77a:	fb00 7711 	mls	r7, r0, r1, r7
  40c77e:	fb0e f301 	mul.w	r3, lr, r1
  40c782:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c786:	42bb      	cmp	r3, r7
  40c788:	d907      	bls.n	40c79a <__divdi3+0x66>
  40c78a:	197f      	adds	r7, r7, r5
  40c78c:	f080 8101 	bcs.w	40c992 <__divdi3+0x25e>
  40c790:	42bb      	cmp	r3, r7
  40c792:	f240 80fe 	bls.w	40c992 <__divdi3+0x25e>
  40c796:	3902      	subs	r1, #2
  40c798:	442f      	add	r7, r5
  40c79a:	1aff      	subs	r7, r7, r3
  40c79c:	b2a4      	uxth	r4, r4
  40c79e:	fbb7 f3f0 	udiv	r3, r7, r0
  40c7a2:	fb00 7713 	mls	r7, r0, r3, r7
  40c7a6:	fb0e fe03 	mul.w	lr, lr, r3
  40c7aa:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c7ae:	45be      	cmp	lr, r7
  40c7b0:	d906      	bls.n	40c7c0 <__divdi3+0x8c>
  40c7b2:	197f      	adds	r7, r7, r5
  40c7b4:	f080 80eb 	bcs.w	40c98e <__divdi3+0x25a>
  40c7b8:	45be      	cmp	lr, r7
  40c7ba:	f240 80e8 	bls.w	40c98e <__divdi3+0x25a>
  40c7be:	3b02      	subs	r3, #2
  40c7c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40c7c4:	2200      	movs	r2, #0
  40c7c6:	e003      	b.n	40c7d0 <__divdi3+0x9c>
  40c7c8:	428b      	cmp	r3, r1
  40c7ca:	d90f      	bls.n	40c7ec <__divdi3+0xb8>
  40c7cc:	2200      	movs	r2, #0
  40c7ce:	4613      	mov	r3, r2
  40c7d0:	1c34      	adds	r4, r6, #0
  40c7d2:	f04f 0500 	mov.w	r5, #0
  40c7d6:	bf18      	it	ne
  40c7d8:	2401      	movne	r4, #1
  40c7da:	4260      	negs	r0, r4
  40c7dc:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40c7e0:	4058      	eors	r0, r3
  40c7e2:	4051      	eors	r1, r2
  40c7e4:	1900      	adds	r0, r0, r4
  40c7e6:	4169      	adcs	r1, r5
  40c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c7ec:	fab3 f283 	clz	r2, r3
  40c7f0:	2a00      	cmp	r2, #0
  40c7f2:	f040 8083 	bne.w	40c8fc <__divdi3+0x1c8>
  40c7f6:	4580      	cmp	r8, r0
  40c7f8:	f240 80cd 	bls.w	40c996 <__divdi3+0x262>
  40c7fc:	428b      	cmp	r3, r1
  40c7fe:	f0c0 80ca 	bcc.w	40c996 <__divdi3+0x262>
  40c802:	4613      	mov	r3, r2
  40c804:	e7e4      	b.n	40c7d0 <__divdi3+0x9c>
  40c806:	b912      	cbnz	r2, 40c80e <__divdi3+0xda>
  40c808:	2301      	movs	r3, #1
  40c80a:	fbb3 f5f2 	udiv	r5, r3, r2
  40c80e:	fab5 f285 	clz	r2, r5
  40c812:	2a00      	cmp	r2, #0
  40c814:	d13b      	bne.n	40c88e <__divdi3+0x15a>
  40c816:	1b78      	subs	r0, r7, r5
  40c818:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c81c:	fa1f fc85 	uxth.w	ip, r5
  40c820:	2201      	movs	r2, #1
  40c822:	0c21      	lsrs	r1, r4, #16
  40c824:	fbb0 f8fe 	udiv	r8, r0, lr
  40c828:	fb0e 0018 	mls	r0, lr, r8, r0
  40c82c:	fb0c f308 	mul.w	r3, ip, r8
  40c830:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40c834:	42bb      	cmp	r3, r7
  40c836:	d908      	bls.n	40c84a <__divdi3+0x116>
  40c838:	197f      	adds	r7, r7, r5
  40c83a:	f080 80b0 	bcs.w	40c99e <__divdi3+0x26a>
  40c83e:	42bb      	cmp	r3, r7
  40c840:	f240 80ad 	bls.w	40c99e <__divdi3+0x26a>
  40c844:	f1a8 0802 	sub.w	r8, r8, #2
  40c848:	442f      	add	r7, r5
  40c84a:	1aff      	subs	r7, r7, r3
  40c84c:	b2a4      	uxth	r4, r4
  40c84e:	fbb7 f3fe 	udiv	r3, r7, lr
  40c852:	fb0e 7713 	mls	r7, lr, r3, r7
  40c856:	fb0c fc03 	mul.w	ip, ip, r3
  40c85a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c85e:	45bc      	cmp	ip, r7
  40c860:	d906      	bls.n	40c870 <__divdi3+0x13c>
  40c862:	197f      	adds	r7, r7, r5
  40c864:	f080 8099 	bcs.w	40c99a <__divdi3+0x266>
  40c868:	45bc      	cmp	ip, r7
  40c86a:	f240 8096 	bls.w	40c99a <__divdi3+0x266>
  40c86e:	3b02      	subs	r3, #2
  40c870:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c874:	e7ac      	b.n	40c7d0 <__divdi3+0x9c>
  40c876:	4252      	negs	r2, r2
  40c878:	ea6f 0606 	mvn.w	r6, r6
  40c87c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c880:	e761      	b.n	40c746 <__divdi3+0x12>
  40c882:	4240      	negs	r0, r0
  40c884:	f04f 36ff 	mov.w	r6, #4294967295
  40c888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c88c:	e758      	b.n	40c740 <__divdi3+0xc>
  40c88e:	4095      	lsls	r5, r2
  40c890:	f1c2 0120 	rsb	r1, r2, #32
  40c894:	fa07 f302 	lsl.w	r3, r7, r2
  40c898:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c89c:	40cf      	lsrs	r7, r1
  40c89e:	fa24 f101 	lsr.w	r1, r4, r1
  40c8a2:	4094      	lsls	r4, r2
  40c8a4:	fa1f fc85 	uxth.w	ip, r5
  40c8a8:	4319      	orrs	r1, r3
  40c8aa:	fbb7 f2fe 	udiv	r2, r7, lr
  40c8ae:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40c8b2:	fb0e 7712 	mls	r7, lr, r2, r7
  40c8b6:	fb0c f302 	mul.w	r3, ip, r2
  40c8ba:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40c8be:	42bb      	cmp	r3, r7
  40c8c0:	d905      	bls.n	40c8ce <__divdi3+0x19a>
  40c8c2:	197f      	adds	r7, r7, r5
  40c8c4:	d271      	bcs.n	40c9aa <__divdi3+0x276>
  40c8c6:	42bb      	cmp	r3, r7
  40c8c8:	d96f      	bls.n	40c9aa <__divdi3+0x276>
  40c8ca:	3a02      	subs	r2, #2
  40c8cc:	442f      	add	r7, r5
  40c8ce:	1aff      	subs	r7, r7, r3
  40c8d0:	b289      	uxth	r1, r1
  40c8d2:	fbb7 f8fe 	udiv	r8, r7, lr
  40c8d6:	fb0e 7718 	mls	r7, lr, r8, r7
  40c8da:	fb0c f008 	mul.w	r0, ip, r8
  40c8de:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40c8e2:	4298      	cmp	r0, r3
  40c8e4:	d906      	bls.n	40c8f4 <__divdi3+0x1c0>
  40c8e6:	195b      	adds	r3, r3, r5
  40c8e8:	d261      	bcs.n	40c9ae <__divdi3+0x27a>
  40c8ea:	4298      	cmp	r0, r3
  40c8ec:	d95f      	bls.n	40c9ae <__divdi3+0x27a>
  40c8ee:	f1a8 0802 	sub.w	r8, r8, #2
  40c8f2:	442b      	add	r3, r5
  40c8f4:	1a18      	subs	r0, r3, r0
  40c8f6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40c8fa:	e792      	b.n	40c822 <__divdi3+0xee>
  40c8fc:	f1c2 0720 	rsb	r7, r2, #32
  40c900:	fa03 fe02 	lsl.w	lr, r3, r2
  40c904:	fa08 f502 	lsl.w	r5, r8, r2
  40c908:	4091      	lsls	r1, r2
  40c90a:	fa28 f307 	lsr.w	r3, r8, r7
  40c90e:	fa2c fc07 	lsr.w	ip, ip, r7
  40c912:	40f8      	lsrs	r0, r7
  40c914:	ea43 0e0e 	orr.w	lr, r3, lr
  40c918:	4308      	orrs	r0, r1
  40c91a:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40c91e:	0c07      	lsrs	r7, r0, #16
  40c920:	fa1f fa8e 	uxth.w	sl, lr
  40c924:	fbbc f9f8 	udiv	r9, ip, r8
  40c928:	fb08 cc19 	mls	ip, r8, r9, ip
  40c92c:	fb0a f109 	mul.w	r1, sl, r9
  40c930:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40c934:	4561      	cmp	r1, ip
  40c936:	d907      	bls.n	40c948 <__divdi3+0x214>
  40c938:	eb1c 0c0e 	adds.w	ip, ip, lr
  40c93c:	d232      	bcs.n	40c9a4 <__divdi3+0x270>
  40c93e:	4561      	cmp	r1, ip
  40c940:	d930      	bls.n	40c9a4 <__divdi3+0x270>
  40c942:	f1a9 0902 	sub.w	r9, r9, #2
  40c946:	44f4      	add	ip, lr
  40c948:	ebc1 0c0c 	rsb	ip, r1, ip
  40c94c:	b280      	uxth	r0, r0
  40c94e:	fbbc f3f8 	udiv	r3, ip, r8
  40c952:	fb08 cc13 	mls	ip, r8, r3, ip
  40c956:	fb0a fa03 	mul.w	sl, sl, r3
  40c95a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40c95e:	458a      	cmp	sl, r1
  40c960:	d906      	bls.n	40c970 <__divdi3+0x23c>
  40c962:	eb11 010e 	adds.w	r1, r1, lr
  40c966:	d225      	bcs.n	40c9b4 <__divdi3+0x280>
  40c968:	458a      	cmp	sl, r1
  40c96a:	d923      	bls.n	40c9b4 <__divdi3+0x280>
  40c96c:	3b02      	subs	r3, #2
  40c96e:	4471      	add	r1, lr
  40c970:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40c974:	ebca 0101 	rsb	r1, sl, r1
  40c978:	fba3 8905 	umull	r8, r9, r3, r5
  40c97c:	4549      	cmp	r1, r9
  40c97e:	d303      	bcc.n	40c988 <__divdi3+0x254>
  40c980:	d103      	bne.n	40c98a <__divdi3+0x256>
  40c982:	4094      	lsls	r4, r2
  40c984:	4544      	cmp	r4, r8
  40c986:	d200      	bcs.n	40c98a <__divdi3+0x256>
  40c988:	3b01      	subs	r3, #1
  40c98a:	2200      	movs	r2, #0
  40c98c:	e720      	b.n	40c7d0 <__divdi3+0x9c>
  40c98e:	3b01      	subs	r3, #1
  40c990:	e716      	b.n	40c7c0 <__divdi3+0x8c>
  40c992:	3901      	subs	r1, #1
  40c994:	e701      	b.n	40c79a <__divdi3+0x66>
  40c996:	2301      	movs	r3, #1
  40c998:	e71a      	b.n	40c7d0 <__divdi3+0x9c>
  40c99a:	3b01      	subs	r3, #1
  40c99c:	e768      	b.n	40c870 <__divdi3+0x13c>
  40c99e:	f108 38ff 	add.w	r8, r8, #4294967295
  40c9a2:	e752      	b.n	40c84a <__divdi3+0x116>
  40c9a4:	f109 39ff 	add.w	r9, r9, #4294967295
  40c9a8:	e7ce      	b.n	40c948 <__divdi3+0x214>
  40c9aa:	3a01      	subs	r2, #1
  40c9ac:	e78f      	b.n	40c8ce <__divdi3+0x19a>
  40c9ae:	f108 38ff 	add.w	r8, r8, #4294967295
  40c9b2:	e79f      	b.n	40c8f4 <__divdi3+0x1c0>
  40c9b4:	3b01      	subs	r3, #1
  40c9b6:	e7db      	b.n	40c970 <__divdi3+0x23c>

0040c9b8 <__udivdi3>:
  40c9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40c9bc:	2b00      	cmp	r3, #0
  40c9be:	d140      	bne.n	40ca42 <__udivdi3+0x8a>
  40c9c0:	428a      	cmp	r2, r1
  40c9c2:	4604      	mov	r4, r0
  40c9c4:	4615      	mov	r5, r2
  40c9c6:	d94a      	bls.n	40ca5e <__udivdi3+0xa6>
  40c9c8:	fab2 f382 	clz	r3, r2
  40c9cc:	460f      	mov	r7, r1
  40c9ce:	b14b      	cbz	r3, 40c9e4 <__udivdi3+0x2c>
  40c9d0:	f1c3 0620 	rsb	r6, r3, #32
  40c9d4:	4099      	lsls	r1, r3
  40c9d6:	fa00 f403 	lsl.w	r4, r0, r3
  40c9da:	fa02 f503 	lsl.w	r5, r2, r3
  40c9de:	40f0      	lsrs	r0, r6
  40c9e0:	ea40 0701 	orr.w	r7, r0, r1
  40c9e4:	0c29      	lsrs	r1, r5, #16
  40c9e6:	0c26      	lsrs	r6, r4, #16
  40c9e8:	fa1f fe85 	uxth.w	lr, r5
  40c9ec:	fbb7 f0f1 	udiv	r0, r7, r1
  40c9f0:	fb01 7710 	mls	r7, r1, r0, r7
  40c9f4:	fb0e f200 	mul.w	r2, lr, r0
  40c9f8:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40c9fc:	429a      	cmp	r2, r3
  40c9fe:	d907      	bls.n	40ca10 <__udivdi3+0x58>
  40ca00:	195b      	adds	r3, r3, r5
  40ca02:	f080 80ea 	bcs.w	40cbda <__udivdi3+0x222>
  40ca06:	429a      	cmp	r2, r3
  40ca08:	f240 80e7 	bls.w	40cbda <__udivdi3+0x222>
  40ca0c:	3802      	subs	r0, #2
  40ca0e:	442b      	add	r3, r5
  40ca10:	1a9a      	subs	r2, r3, r2
  40ca12:	b2a4      	uxth	r4, r4
  40ca14:	fbb2 f3f1 	udiv	r3, r2, r1
  40ca18:	fb01 2213 	mls	r2, r1, r3, r2
  40ca1c:	fb0e fe03 	mul.w	lr, lr, r3
  40ca20:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40ca24:	4596      	cmp	lr, r2
  40ca26:	d906      	bls.n	40ca36 <__udivdi3+0x7e>
  40ca28:	1952      	adds	r2, r2, r5
  40ca2a:	f080 80da 	bcs.w	40cbe2 <__udivdi3+0x22a>
  40ca2e:	4596      	cmp	lr, r2
  40ca30:	f240 80d7 	bls.w	40cbe2 <__udivdi3+0x22a>
  40ca34:	3b02      	subs	r3, #2
  40ca36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40ca3a:	2600      	movs	r6, #0
  40ca3c:	4631      	mov	r1, r6
  40ca3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ca42:	428b      	cmp	r3, r1
  40ca44:	d844      	bhi.n	40cad0 <__udivdi3+0x118>
  40ca46:	fab3 f683 	clz	r6, r3
  40ca4a:	2e00      	cmp	r6, #0
  40ca4c:	d145      	bne.n	40cada <__udivdi3+0x122>
  40ca4e:	4282      	cmp	r2, r0
  40ca50:	f240 80bf 	bls.w	40cbd2 <__udivdi3+0x21a>
  40ca54:	428b      	cmp	r3, r1
  40ca56:	f0c0 80bc 	bcc.w	40cbd2 <__udivdi3+0x21a>
  40ca5a:	4630      	mov	r0, r6
  40ca5c:	e7ee      	b.n	40ca3c <__udivdi3+0x84>
  40ca5e:	b912      	cbnz	r2, 40ca66 <__udivdi3+0xae>
  40ca60:	2501      	movs	r5, #1
  40ca62:	fbb5 f5f2 	udiv	r5, r5, r2
  40ca66:	fab5 f285 	clz	r2, r5
  40ca6a:	2a00      	cmp	r2, #0
  40ca6c:	d17b      	bne.n	40cb66 <__udivdi3+0x1ae>
  40ca6e:	1b4a      	subs	r2, r1, r5
  40ca70:	0c2f      	lsrs	r7, r5, #16
  40ca72:	fa1f fe85 	uxth.w	lr, r5
  40ca76:	2601      	movs	r6, #1
  40ca78:	0c23      	lsrs	r3, r4, #16
  40ca7a:	fbb2 f0f7 	udiv	r0, r2, r7
  40ca7e:	fb07 2210 	mls	r2, r7, r0, r2
  40ca82:	fb0e fc00 	mul.w	ip, lr, r0
  40ca86:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40ca8a:	458c      	cmp	ip, r1
  40ca8c:	d907      	bls.n	40ca9e <__udivdi3+0xe6>
  40ca8e:	1949      	adds	r1, r1, r5
  40ca90:	f080 80a1 	bcs.w	40cbd6 <__udivdi3+0x21e>
  40ca94:	458c      	cmp	ip, r1
  40ca96:	f240 809e 	bls.w	40cbd6 <__udivdi3+0x21e>
  40ca9a:	3802      	subs	r0, #2
  40ca9c:	4429      	add	r1, r5
  40ca9e:	ebcc 0101 	rsb	r1, ip, r1
  40caa2:	b2a4      	uxth	r4, r4
  40caa4:	fbb1 f3f7 	udiv	r3, r1, r7
  40caa8:	fb07 1113 	mls	r1, r7, r3, r1
  40caac:	fb0e fe03 	mul.w	lr, lr, r3
  40cab0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40cab4:	45a6      	cmp	lr, r4
  40cab6:	d906      	bls.n	40cac6 <__udivdi3+0x10e>
  40cab8:	1964      	adds	r4, r4, r5
  40caba:	f080 8090 	bcs.w	40cbde <__udivdi3+0x226>
  40cabe:	45a6      	cmp	lr, r4
  40cac0:	f240 808d 	bls.w	40cbde <__udivdi3+0x226>
  40cac4:	3b02      	subs	r3, #2
  40cac6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40caca:	4631      	mov	r1, r6
  40cacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cad0:	2600      	movs	r6, #0
  40cad2:	4630      	mov	r0, r6
  40cad4:	4631      	mov	r1, r6
  40cad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cada:	f1c6 0520 	rsb	r5, r6, #32
  40cade:	40b3      	lsls	r3, r6
  40cae0:	fa02 f706 	lsl.w	r7, r2, r6
  40cae4:	fa01 f406 	lsl.w	r4, r1, r6
  40cae8:	40ea      	lsrs	r2, r5
  40caea:	40e9      	lsrs	r1, r5
  40caec:	fa20 f505 	lsr.w	r5, r0, r5
  40caf0:	431a      	orrs	r2, r3
  40caf2:	4325      	orrs	r5, r4
  40caf4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40caf8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40cafc:	b293      	uxth	r3, r2
  40cafe:	fbb1 f8fc 	udiv	r8, r1, ip
  40cb02:	fb0c 1118 	mls	r1, ip, r8, r1
  40cb06:	fb03 f408 	mul.w	r4, r3, r8
  40cb0a:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40cb0e:	428c      	cmp	r4, r1
  40cb10:	d906      	bls.n	40cb20 <__udivdi3+0x168>
  40cb12:	1889      	adds	r1, r1, r2
  40cb14:	d269      	bcs.n	40cbea <__udivdi3+0x232>
  40cb16:	428c      	cmp	r4, r1
  40cb18:	d967      	bls.n	40cbea <__udivdi3+0x232>
  40cb1a:	f1a8 0802 	sub.w	r8, r8, #2
  40cb1e:	4411      	add	r1, r2
  40cb20:	1b09      	subs	r1, r1, r4
  40cb22:	b2ad      	uxth	r5, r5
  40cb24:	fbb1 f4fc 	udiv	r4, r1, ip
  40cb28:	fb0c 1114 	mls	r1, ip, r4, r1
  40cb2c:	fb03 fe04 	mul.w	lr, r3, r4
  40cb30:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40cb34:	459e      	cmp	lr, r3
  40cb36:	d905      	bls.n	40cb44 <__udivdi3+0x18c>
  40cb38:	189b      	adds	r3, r3, r2
  40cb3a:	d254      	bcs.n	40cbe6 <__udivdi3+0x22e>
  40cb3c:	459e      	cmp	lr, r3
  40cb3e:	d952      	bls.n	40cbe6 <__udivdi3+0x22e>
  40cb40:	3c02      	subs	r4, #2
  40cb42:	4413      	add	r3, r2
  40cb44:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40cb48:	ebce 0303 	rsb	r3, lr, r3
  40cb4c:	fba4 8907 	umull	r8, r9, r4, r7
  40cb50:	454b      	cmp	r3, r9
  40cb52:	d303      	bcc.n	40cb5c <__udivdi3+0x1a4>
  40cb54:	d151      	bne.n	40cbfa <__udivdi3+0x242>
  40cb56:	40b0      	lsls	r0, r6
  40cb58:	4540      	cmp	r0, r8
  40cb5a:	d24e      	bcs.n	40cbfa <__udivdi3+0x242>
  40cb5c:	2600      	movs	r6, #0
  40cb5e:	1e60      	subs	r0, r4, #1
  40cb60:	4631      	mov	r1, r6
  40cb62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cb66:	f1c2 0620 	rsb	r6, r2, #32
  40cb6a:	4095      	lsls	r5, r2
  40cb6c:	fa01 f302 	lsl.w	r3, r1, r2
  40cb70:	fa00 f402 	lsl.w	r4, r0, r2
  40cb74:	0c2f      	lsrs	r7, r5, #16
  40cb76:	40f1      	lsrs	r1, r6
  40cb78:	40f0      	lsrs	r0, r6
  40cb7a:	fa1f fe85 	uxth.w	lr, r5
  40cb7e:	fbb1 f6f7 	udiv	r6, r1, r7
  40cb82:	4318      	orrs	r0, r3
  40cb84:	fb07 1116 	mls	r1, r7, r6, r1
  40cb88:	fb0e f206 	mul.w	r2, lr, r6
  40cb8c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40cb90:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40cb94:	429a      	cmp	r2, r3
  40cb96:	d905      	bls.n	40cba4 <__udivdi3+0x1ec>
  40cb98:	195b      	adds	r3, r3, r5
  40cb9a:	d229      	bcs.n	40cbf0 <__udivdi3+0x238>
  40cb9c:	429a      	cmp	r2, r3
  40cb9e:	d927      	bls.n	40cbf0 <__udivdi3+0x238>
  40cba0:	3e02      	subs	r6, #2
  40cba2:	442b      	add	r3, r5
  40cba4:	1a9b      	subs	r3, r3, r2
  40cba6:	b280      	uxth	r0, r0
  40cba8:	fbb3 fcf7 	udiv	ip, r3, r7
  40cbac:	fb07 331c 	mls	r3, r7, ip, r3
  40cbb0:	fb0e f10c 	mul.w	r1, lr, ip
  40cbb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40cbb8:	4299      	cmp	r1, r3
  40cbba:	d906      	bls.n	40cbca <__udivdi3+0x212>
  40cbbc:	195b      	adds	r3, r3, r5
  40cbbe:	d219      	bcs.n	40cbf4 <__udivdi3+0x23c>
  40cbc0:	4299      	cmp	r1, r3
  40cbc2:	d917      	bls.n	40cbf4 <__udivdi3+0x23c>
  40cbc4:	f1ac 0c02 	sub.w	ip, ip, #2
  40cbc8:	442b      	add	r3, r5
  40cbca:	1a5a      	subs	r2, r3, r1
  40cbcc:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40cbd0:	e752      	b.n	40ca78 <__udivdi3+0xc0>
  40cbd2:	2001      	movs	r0, #1
  40cbd4:	e732      	b.n	40ca3c <__udivdi3+0x84>
  40cbd6:	3801      	subs	r0, #1
  40cbd8:	e761      	b.n	40ca9e <__udivdi3+0xe6>
  40cbda:	3801      	subs	r0, #1
  40cbdc:	e718      	b.n	40ca10 <__udivdi3+0x58>
  40cbde:	3b01      	subs	r3, #1
  40cbe0:	e771      	b.n	40cac6 <__udivdi3+0x10e>
  40cbe2:	3b01      	subs	r3, #1
  40cbe4:	e727      	b.n	40ca36 <__udivdi3+0x7e>
  40cbe6:	3c01      	subs	r4, #1
  40cbe8:	e7ac      	b.n	40cb44 <__udivdi3+0x18c>
  40cbea:	f108 38ff 	add.w	r8, r8, #4294967295
  40cbee:	e797      	b.n	40cb20 <__udivdi3+0x168>
  40cbf0:	3e01      	subs	r6, #1
  40cbf2:	e7d7      	b.n	40cba4 <__udivdi3+0x1ec>
  40cbf4:	f10c 3cff 	add.w	ip, ip, #4294967295
  40cbf8:	e7e7      	b.n	40cbca <__udivdi3+0x212>
  40cbfa:	4620      	mov	r0, r4
  40cbfc:	2600      	movs	r6, #0
  40cbfe:	e71d      	b.n	40ca3c <__udivdi3+0x84>
  40cc00:	00000001 	.word	0x00000001
  40cc04:	00000002 	.word	0x00000002
  40cc08:	00000004 	.word	0x00000004
  40cc0c:	00000008 	.word	0x00000008
  40cc10:	00000010 	.word	0x00000010
  40cc14:	00000020 	.word	0x00000020
  40cc18:	00000040 	.word	0x00000040
  40cc1c:	00000080 	.word	0x00000080
  40cc20:	00000100 	.word	0x00000100
  40cc24:	00000200 	.word	0x00000200
  40cc28:	00000400 	.word	0x00000400
  40cc2c:	39414350 	.word	0x39414350
  40cc30:	3a323539 	.word	0x3a323539
  40cc34:	706d7420 	.word	0x706d7420
  40cc38:	25203a31 	.word	0x25203a31
  40cc3c:	6d742078 	.word	0x6d742078
  40cc40:	203a3270 	.word	0x203a3270
  40cc44:	74207825 	.word	0x74207825
  40cc48:	3a33706d 	.word	0x3a33706d
  40cc4c:	20782520 	.word	0x20782520
  40cc50:	34706d74 	.word	0x34706d74
  40cc54:	7825203a 	.word	0x7825203a
  40cc58:	00000a0d 	.word	0x00000a0d
  40cc5c:	0001c200 	.word	0x0001c200
  40cc60:	000000c0 	.word	0x000000c0
  40cc64:	00000800 	.word	0x00000800
	...
  40cc74:	202d462d 	.word	0x202d462d
  40cc78:	74737953 	.word	0x74737953
  40cc7c:	206b6369 	.word	0x206b6369
  40cc80:	666e6f63 	.word	0x666e6f63
  40cc84:	72756769 	.word	0x72756769
  40cc88:	6f697461 	.word	0x6f697461
  40cc8c:	7265206e 	.word	0x7265206e
  40cc90:	0d726f72 	.word	0x0d726f72
  40cc94:	00000000 	.word	0x00000000
  40cc98:	00000960 	.word	0x00000960
  40cc9c:	000000c0 	.word	0x000000c0
  40cca0:	00000800 	.word	0x00000800
  40cca4:	00000000 	.word	0x00000000
  40cca8:	00006325 	.word	0x00006325
  40ccac:	2d2d2d2b 	.word	0x2d2d2d2b
  40ccb0:	2d2d2d2d 	.word	0x2d2d2d2d
  40ccb4:	0a0d2b2d 	.word	0x0a0d2b2d
  40ccb8:	00000000 	.word	0x00000000
  40ccbc:	2042504b 	.word	0x2042504b
  40ccc0:	52415453 	.word	0x52415453
  40ccc4:	000a0d54 	.word	0x000a0d54
  40ccc8:	2042504b 	.word	0x2042504b
  40cccc:	0d315753 	.word	0x0d315753
  40ccd0:	0000000a 	.word	0x0000000a
  40ccd4:	2042504b 	.word	0x2042504b
  40ccd8:	0d325753 	.word	0x0d325753
  40ccdc:	0000000a 	.word	0x0000000a
  40cce0:	2042504b 	.word	0x2042504b
  40cce4:	0d335753 	.word	0x0d335753
  40cce8:	0000000a 	.word	0x0000000a
  40ccec:	2042504b 	.word	0x2042504b
  40ccf0:	0d345753 	.word	0x0d345753
  40ccf4:	0000000a 	.word	0x0000000a
  40ccf8:	2042504b 	.word	0x2042504b
  40ccfc:	0d355753 	.word	0x0d355753
  40cd00:	0000000a 	.word	0x0000000a
  40cd04:	65706572 	.word	0x65706572
  40cd08:	6f437461 	.word	0x6f437461
  40cd0c:	3a746e75 	.word	0x3a746e75
  40cd10:	00000020 	.word	0x00000020
  40cd14:	00000a0d 	.word	0x00000a0d
  40cd18:	7473616c 	.word	0x7473616c
  40cd1c:	7465725f 	.word	0x7465725f
  40cd20:	3a42504b 	.word	0x3a42504b
  40cd24:	00000020 	.word	0x00000020
  40cd28:	6d657420 	.word	0x6d657420
  40cd2c:	79654b70 	.word	0x79654b70
  40cd30:	3a646170 	.word	0x3a646170
  40cd34:	00000020 	.word	0x00000020
  40cd38:	636f7270 	.word	0x636f7270
  40cd3c:	5f737365 	.word	0x5f737365
  40cd40:	2862706b 	.word	0x2862706b
  40cd44:	69742029 	.word	0x69742029
  40cd48:	756f656d 	.word	0x756f656d
  40cd4c:	65282074 	.word	0x65282074
  40cd50:	726f7272 	.word	0x726f7272
  40cd54:	000a0d29 	.word	0x000a0d29
  40cd58:	2042504b 	.word	0x2042504b
  40cd5c:	74617453 	.word	0x74617453
  40cd60:	44203a65 	.word	0x44203a65
  40cd64:	0d314749 	.word	0x0d314749
  40cd68:	0000000a 	.word	0x0000000a
  40cd6c:	2042504b 	.word	0x2042504b
  40cd70:	74617453 	.word	0x74617453
  40cd74:	44203a65 	.word	0x44203a65
  40cd78:	0d324749 	.word	0x0d324749
  40cd7c:	0000000a 	.word	0x0000000a
  40cd80:	2042504b 	.word	0x2042504b
  40cd84:	74617453 	.word	0x74617453
  40cd88:	44203a65 	.word	0x44203a65
  40cd8c:	0d334749 	.word	0x0d334749
  40cd90:	0000000a 	.word	0x0000000a
  40cd94:	2042504b 	.word	0x2042504b
  40cd98:	74617453 	.word	0x74617453
  40cd9c:	53203a65 	.word	0x53203a65
  40cda0:	54524154 	.word	0x54524154
  40cda4:	00000a0d 	.word	0x00000a0d
  40cda8:	2042504b 	.word	0x2042504b
  40cdac:	74617453 	.word	0x74617453
  40cdb0:	53203a65 	.word	0x53203a65
  40cdb4:	54524154 	.word	0x54524154
  40cdb8:	52452820 	.word	0x52452820
  40cdbc:	29524f52 	.word	0x29524f52
  40cdc0:	00000a0d 	.word	0x00000a0d
  40cdc4:	73616843 	.word	0x73616843
  40cdc8:	20736973 	.word	0x20736973
  40cdcc:	6f727265 	.word	0x6f727265
  40cdd0:	2e2e2e72 	.word	0x2e2e2e72
  40cdd4:	74756873 	.word	0x74756873
  40cdd8:	676e6974 	.word	0x676e6974
  40cddc:	776f6420 	.word	0x776f6420
  40cde0:	0a0d2e6e 	.word	0x0a0d2e6e
  40cde4:	00000000 	.word	0x00000000
  40cde8:	00006425 	.word	0x00006425
  40cdec:	2044454c 	.word	0x2044454c
  40cdf0:	72616f62 	.word	0x72616f62
  40cdf4:	65642064 	.word	0x65642064
  40cdf8:	74636574 	.word	0x74636574
  40cdfc:	69206465 	.word	0x69206465
  40ce00:	6c73206e 	.word	0x6c73206e
  40ce04:	0020746f 	.word	0x0020746f
  40ce08:	6c656853 	.word	0x6c656853
  40ce0c:	20302066 	.word	0x20302066
  40ce10:	73657270 	.word	0x73657270
  40ce14:	0d746e65 	.word	0x0d746e65
  40ce18:	0000000a 	.word	0x0000000a
  40ce1c:	6c656853 	.word	0x6c656853
  40ce20:	20312066 	.word	0x20312066
  40ce24:	73657270 	.word	0x73657270
  40ce28:	0d746e65 	.word	0x0d746e65
  40ce2c:	0000000a 	.word	0x0000000a
  40ce30:	6c656853 	.word	0x6c656853
  40ce34:	20322066 	.word	0x20322066
  40ce38:	73657270 	.word	0x73657270
  40ce3c:	0d746e65 	.word	0x0d746e65
  40ce40:	0000000a 	.word	0x0000000a
  40ce44:	6c656853 	.word	0x6c656853
  40ce48:	20332066 	.word	0x20332066
  40ce4c:	73657270 	.word	0x73657270
  40ce50:	0d746e65 	.word	0x0d746e65
  40ce54:	0000000a 	.word	0x0000000a
  40ce58:	61766e49 	.word	0x61766e49
  40ce5c:	2064696c 	.word	0x2064696c
  40ce60:	69726573 	.word	0x69726573
  40ce64:	49206c61 	.word	0x49206c61
  40ce68:	68632044 	.word	0x68632044
  40ce6c:	736b6365 	.word	0x736b6365
  40ce70:	0d2e6d75 	.word	0x0d2e6d75
  40ce74:	0000000a 	.word	0x0000000a
  40ce78:	6c656873 	.word	0x6c656873
  40ce7c:	64252066 	.word	0x64252066
  40ce80:	6c62203a 	.word	0x6c62203a
  40ce84:	65736575 	.word	0x65736575
  40ce88:	5b65736e 	.word	0x5b65736e
  40ce8c:	3d5d6425 	.word	0x3d5d6425
  40ce90:	58257830 	.word	0x58257830
  40ce94:	00000a0d 	.word	0x00000a0d
  40ce98:	69766544 	.word	0x69766544
  40ce9c:	20736563 	.word	0x20736563
  40cea0:	65746564 	.word	0x65746564
  40cea4:	64657463 	.word	0x64657463
  40cea8:	206e6f20 	.word	0x206e6f20
  40ceac:	6c656873 	.word	0x6c656873
  40ceb0:	00002066 	.word	0x00002066
  40ceb4:	39414350 	.word	0x39414350
  40ceb8:	20323539 	.word	0x20323539
  40cebc:	6f727245 	.word	0x6f727245
  40cec0:	29732872 	.word	0x29732872
  40cec4:	206e6f20 	.word	0x206e6f20
  40cec8:	44504f54 	.word	0x44504f54
  40cecc:	45564952 	.word	0x45564952
  40ced0:	00000020 	.word	0x00000020
  40ced4:	00000020 	.word	0x00000020
  40ced8:	4f525245 	.word	0x4f525245
  40cedc:	6e6f2052 	.word	0x6e6f2052
  40cee0:	756e7520 	.word	0x756e7520
  40cee4:	20646573 	.word	0x20646573
  40cee8:	6e616863 	.word	0x6e616863
  40ceec:	736c656e 	.word	0x736c656e
  40cef0:	4350203a 	.word	0x4350203a
  40cef4:	35393941 	.word	0x35393941
  40cef8:	202d2032 	.word	0x202d2032
  40cefc:	746e6f43 	.word	0x746e6f43
  40cf00:	6c6c6f72 	.word	0x6c6c6f72
  40cf04:	62207265 	.word	0x62207265
  40cf08:	6472616f 	.word	0x6472616f
  40cf0c:	0d375520 	.word	0x0d375520
  40cf10:	0000000a 	.word	0x0000000a
  40cf14:	39414350 	.word	0x39414350
  40cf18:	20323539 	.word	0x20323539
  40cf1c:	6f727245 	.word	0x6f727245
  40cf20:	29732872 	.word	0x29732872
  40cf24:	206e6f20 	.word	0x206e6f20
  40cf28:	44544f42 	.word	0x44544f42
  40cf2c:	45564952 	.word	0x45564952
  40cf30:	00000020 	.word	0x00000020
  40cf34:	4f525245 	.word	0x4f525245
  40cf38:	6e6f2052 	.word	0x6e6f2052
  40cf3c:	756e7520 	.word	0x756e7520
  40cf40:	20646573 	.word	0x20646573
  40cf44:	6e616863 	.word	0x6e616863
  40cf48:	736c656e 	.word	0x736c656e
  40cf4c:	4350203a 	.word	0x4350203a
  40cf50:	35393941 	.word	0x35393941
  40cf54:	202d2032 	.word	0x202d2032
  40cf58:	746e6f43 	.word	0x746e6f43
  40cf5c:	6c6c6f72 	.word	0x6c6c6f72
  40cf60:	62207265 	.word	0x62207265
  40cf64:	6472616f 	.word	0x6472616f
  40cf68:	0d385520 	.word	0x0d385520
  40cf6c:	0000000a 	.word	0x0000000a
  40cf70:	6c656853 	.word	0x6c656853
  40cf74:	20302066 	.word	0x20302066
  40cf78:	69746361 	.word	0x69746361
  40cf7c:	0a0d6576 	.word	0x0a0d6576
  40cf80:	00000000 	.word	0x00000000
  40cf84:	6c656853 	.word	0x6c656853
  40cf88:	20312066 	.word	0x20312066
  40cf8c:	69746361 	.word	0x69746361
  40cf90:	0a0d6576 	.word	0x0a0d6576
  40cf94:	00000000 	.word	0x00000000
  40cf98:	6c656853 	.word	0x6c656853
  40cf9c:	20322066 	.word	0x20322066
  40cfa0:	69746361 	.word	0x69746361
  40cfa4:	0a0d6576 	.word	0x0a0d6576
  40cfa8:	00000000 	.word	0x00000000
  40cfac:	6c656853 	.word	0x6c656853
  40cfb0:	20332066 	.word	0x20332066
  40cfb4:	69746361 	.word	0x69746361
  40cfb8:	0a0d6576 	.word	0x0a0d6576
  40cfbc:	00000000 	.word	0x00000000
  40cfc0:	726f6f44 	.word	0x726f6f44
  40cfc4:	74616c20 	.word	0x74616c20
  40cfc8:	6f206863 	.word	0x6f206863
  40cfcc:	656e6570 	.word	0x656e6570
  40cfd0:	6b202c64 	.word	0x6b202c64
  40cfd4:	206c6c69 	.word	0x206c6c69
  40cfd8:	206c6c61 	.word	0x206c6c61
  40cfdc:	6c656873 	.word	0x6c656873
  40cfe0:	20736576 	.word	0x20736576
  40cfe4:	20726f66 	.word	0x20726f66
  40cfe8:	65666173 	.word	0x65666173
  40cfec:	0d2e7974 	.word	0x0d2e7974
  40cff0:	0000000a 	.word	0x0000000a
  40cff4:	6d206f4e 	.word	0x6d206f4e
  40cff8:	2065726f 	.word	0x2065726f
  40cffc:	6d6f6f72 	.word	0x6d6f6f72
  40d000:	726f6620 	.word	0x726f6620
  40d004:	44454c20 	.word	0x44454c20
  40d008:	616f6220 	.word	0x616f6220
  40d00c:	69206472 	.word	0x69206472
  40d010:	2e6f666e 	.word	0x2e6f666e
  40d014:	6e614320 	.word	0x6e614320
  40d018:	20746f6e 	.word	0x20746f6e
  40d01c:	63617274 	.word	0x63617274
  40d020:	696d206b 	.word	0x696d206b
  40d024:	6574756e 	.word	0x6574756e
  40d028:	61737520 	.word	0x61737520
  40d02c:	66206567 	.word	0x66206567
  40d030:	6120726f 	.word	0x6120726f
  40d034:	74696464 	.word	0x74696464
  40d038:	616e6f69 	.word	0x616e6f69
  40d03c:	6f62206c 	.word	0x6f62206c
  40d040:	73647261 	.word	0x73647261
  40d044:	000a0d2e 	.word	0x000a0d2e
  40d048:	2d2a0a0d 	.word	0x2d2a0a0d
  40d04c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d050:	2d2d2d2d 	.word	0x2d2d2d2d
  40d054:	2d2d2d2d 	.word	0x2d2d2d2d
  40d058:	2d2d2d2d 	.word	0x2d2d2d2d
  40d05c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d060:	2d2d2d2d 	.word	0x2d2d2d2d
  40d064:	2d2d2d2d 	.word	0x2d2d2d2d
  40d068:	2d2d2d2d 	.word	0x2d2d2d2d
  40d06c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d070:	2d2d2d2d 	.word	0x2d2d2d2d
  40d074:	2d2d2d2d 	.word	0x2d2d2d2d
  40d078:	2d2d2d2d 	.word	0x2d2d2d2d
  40d07c:	0d2a2d2d 	.word	0x0d2a2d2d
  40d080:	0000000a 	.word	0x0000000a
  40d084:	43454c45 	.word	0x43454c45
  40d088:	434f5254 	.word	0x434f5254
  40d08c:	4556414c 	.word	0x4556414c
  40d090:	6f430a0d 	.word	0x6f430a0d
  40d094:	69727970 	.word	0x69727970
  40d098:	20746867 	.word	0x20746867
  40d09c:	20296328 	.word	0x20296328
  40d0a0:	36313032 	.word	0x36313032
  40d0a4:	61655320 	.word	0x61655320
  40d0a8:	6853206c 	.word	0x6853206c
  40d0ac:	646c6569 	.word	0x646c6569
  40d0b0:	6e49202c 	.word	0x6e49202c
  40d0b4:	0d202e63 	.word	0x0d202e63
  40d0b8:	0000000a 	.word	0x0000000a
  40d0bc:	64726148 	.word	0x64726148
  40d0c0:	65726177 	.word	0x65726177
  40d0c4:	72655620 	.word	0x72655620
  40d0c8:	6e6f6973 	.word	0x6e6f6973
  40d0cc:	6c43203a 	.word	0x6c43203a
  40d0d0:	69737361 	.word	0x69737361
  40d0d4:	2b2b2063 	.word	0x2b2b2063
  40d0d8:	6f53202b 	.word	0x6f53202b
  40d0dc:	61777466 	.word	0x61777466
  40d0e0:	56206572 	.word	0x56206572
  40d0e4:	69737265 	.word	0x69737265
  40d0e8:	203a6e6f 	.word	0x203a6e6f
  40d0ec:	37302e30 	.word	0x37302e30
  40d0f0:	000a0d38 	.word	0x000a0d38
  40d0f4:	2a2a0a0d 	.word	0x2a2a0a0d
  40d0f8:	534e492a 	.word	0x534e492a
  40d0fc:	4c4c4154 	.word	0x4c4c4154
  40d100:	4c204445 	.word	0x4c204445
  40d104:	42204445 	.word	0x42204445
  40d108:	4452414f 	.word	0x4452414f
  40d10c:	2a2a2a53 	.word	0x2a2a2a53
  40d110:	0a0d0a0d 	.word	0x0a0d0a0d
  40d114:	00000000 	.word	0x00000000
  40d118:	44454c20 	.word	0x44454c20
  40d11c:	4c207c20 	.word	0x4c207c20
  40d120:	42204445 	.word	0x42204445
  40d124:	4452414f 	.word	0x4452414f
  40d128:	20202020 	.word	0x20202020
  40d12c:	2020207c 	.word	0x2020207c
  40d130:	45505055 	.word	0x45505055
  40d134:	49532052 	.word	0x49532052
  40d138:	20204544 	.word	0x20204544
  40d13c:	7c202020 	.word	0x7c202020
  40d140:	4c202020 	.word	0x4c202020
  40d144:	5245574f 	.word	0x5245574f
  40d148:	44495320 	.word	0x44495320
  40d14c:	20202045 	.word	0x20202045
  40d150:	000a0d20 	.word	0x000a0d20
  40d154:	544f4c53 	.word	0x544f4c53
  40d158:	20207c20 	.word	0x20207c20
  40d15c:	44492020 	.word	0x44492020
  40d160:	20202020 	.word	0x20202020
  40d164:	20202020 	.word	0x20202020
  40d168:	5248207c 	.word	0x5248207c
  40d16c:	494d3a53 	.word	0x494d3a53
  40d170:	2020204e 	.word	0x2020204e
  40d174:	45544420 	.word	0x45544420
  40d178:	7c202020 	.word	0x7c202020
  40d17c:	53524820 	.word	0x53524820
  40d180:	4e494d3a 	.word	0x4e494d3a
  40d184:	20202020 	.word	0x20202020
  40d188:	20455444 	.word	0x20455444
  40d18c:	0a0d2020 	.word	0x0a0d2020
  40d190:	00000000 	.word	0x00000000
  40d194:	2d2d2d2d 	.word	0x2d2d2d2d
  40d198:	2d2d2d2d 	.word	0x2d2d2d2d
  40d19c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1a0:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1a4:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1a8:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1ac:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1b0:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1b4:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1b8:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1bc:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1c0:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1c4:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1c8:	2d2d2d2d 	.word	0x2d2d2d2d
  40d1cc:	0a0d2d2d 	.word	0x0a0d2d2d
  40d1d0:	00000000 	.word	0x00000000
  40d1d4:	20643225 	.word	0x20643225
  40d1d8:	20202020 	.word	0x20202020
  40d1dc:	58323025 	.word	0x58323025
  40d1e0:	58323025 	.word	0x58323025
  40d1e4:	58323025 	.word	0x58323025
  40d1e8:	58323025 	.word	0x58323025
  40d1ec:	58323025 	.word	0x58323025
  40d1f0:	58323025 	.word	0x58323025
  40d1f4:	30252020 	.word	0x30252020
  40d1f8:	253a6434 	.word	0x253a6434
  40d1fc:	20643230 	.word	0x20643230
  40d200:	20202020 	.word	0x20202020
  40d204:	64323025 	.word	0x64323025
  40d208:	20202020 	.word	0x20202020
  40d20c:	34302520 	.word	0x34302520
  40d210:	30253a64 	.word	0x30253a64
  40d214:	20206432 	.word	0x20206432
  40d218:	25202020 	.word	0x25202020
  40d21c:	0d643230 	.word	0x0d643230
  40d220:	0000000a 	.word	0x0000000a
  40d224:	2058414d 	.word	0x2058414d
  40d228:	3a455444 	.word	0x3a455444
  40d22c:	00000020 	.word	0x00000020
  40d230:	4e494d20 	.word	0x4e494d20
  40d234:	45544420 	.word	0x45544420
  40d238:	0000203a 	.word	0x0000203a
  40d23c:	41544f54 	.word	0x41544f54
  40d240:	4153204c 	.word	0x4153204c
  40d244:	4954494e 	.word	0x4954494e
  40d248:	5420455a 	.word	0x5420455a
  40d24c:	3a454d49 	.word	0x3a454d49
  40d250:	00000020 	.word	0x00000020
  40d254:	00000030 	.word	0x00000030
  40d258:	0000003a 	.word	0x0000003a
  40d25c:	4f542020 	.word	0x4f542020
  40d260:	204c4154 	.word	0x204c4154
  40d264:	494e4153 	.word	0x494e4153
  40d268:	455a4954 	.word	0x455a4954
  40d26c:	43594320 	.word	0x43594320
  40d270:	3a53454c 	.word	0x3a53454c
  40d274:	00000020 	.word	0x00000020
  40d278:	2a2a0a0d 	.word	0x2a2a0a0d
  40d27c:	5359532a 	.word	0x5359532a
  40d280:	204d4554 	.word	0x204d4554
  40d284:	54534554 	.word	0x54534554
  40d288:	2a2a2a53 	.word	0x2a2a2a53
  40d28c:	0a0d0a0d 	.word	0x0a0d0a0d
  40d290:	00000000 	.word	0x00000000
  40d294:	2044454c 	.word	0x2044454c
  40d298:	76697244 	.word	0x76697244
  40d29c:	203a7265 	.word	0x203a7265
  40d2a0:	20504f54 	.word	0x20504f54
  40d2a4:	2e2e3028 	.word	0x2e2e3028
  40d2a8:	20202937 	.word	0x20202937
  40d2ac:	20202020 	.word	0x20202020
  40d2b0:	20202020 	.word	0x20202020
  40d2b4:	20202020 	.word	0x20202020
  40d2b8:	00202020 	.word	0x00202020
  40d2bc:	00002046 	.word	0x00002046
  40d2c0:	00002050 	.word	0x00002050
  40d2c4:	2044454c 	.word	0x2044454c
  40d2c8:	76697244 	.word	0x76697244
  40d2cc:	203a7265 	.word	0x203a7265
  40d2d0:	54544f42 	.word	0x54544f42
  40d2d4:	28204d4f 	.word	0x28204d4f
  40d2d8:	312e2e30 	.word	0x312e2e30
  40d2dc:	20202931 	.word	0x20202931
  40d2e0:	20202020 	.word	0x20202020
  40d2e4:	20202020 	.word	0x20202020
  40d2e8:	00202020 	.word	0x00202020
  40d2ec:	73616c46 	.word	0x73616c46
  40d2f0:	30282068 	.word	0x30282068
  40d2f4:	29342e2e 	.word	0x29342e2e
  40d2f8:	20202020 	.word	0x20202020
  40d2fc:	20202020 	.word	0x20202020
  40d300:	20202020 	.word	0x20202020
  40d304:	20202020 	.word	0x20202020
  40d308:	20202020 	.word	0x20202020
  40d30c:	20202020 	.word	0x20202020
  40d310:	00202020 	.word	0x00202020
  40d314:	2044454c 	.word	0x2044454c
  40d318:	72616f42 	.word	0x72616f42
  40d31c:	65532064 	.word	0x65532064
  40d320:	6c616972 	.word	0x6c616972
  40d324:	20444920 	.word	0x20444920
  40d328:	63656843 	.word	0x63656843
  40d32c:	6d75736b 	.word	0x6d75736b
  40d330:	30282073 	.word	0x30282073
  40d334:	29342e2e 	.word	0x29342e2e
  40d338:	00202020 	.word	0x00202020
  40d33c:	2044454c 	.word	0x2044454c
  40d340:	72616f42 	.word	0x72616f42
  40d344:	69532064 	.word	0x69532064
  40d348:	4d206564 	.word	0x4d206564
  40d34c:	55207861 	.word	0x55207861
  40d350:	65676173 	.word	0x65676173
  40d354:	2e302820 	.word	0x2e302820
  40d358:	2029372e 	.word	0x2029372e
  40d35c:	20202020 	.word	0x20202020
  40d360:	00202020 	.word	0x00202020
  40d364:	67617355 	.word	0x67617355
  40d368:	74532065 	.word	0x74532065
  40d36c:	74637572 	.word	0x74637572
  40d370:	65704f20 	.word	0x65704f20
  40d374:	6c53206e 	.word	0x6c53206e
  40d378:	2073746f 	.word	0x2073746f
  40d37c:	20202020 	.word	0x20202020
  40d380:	20202020 	.word	0x20202020
  40d384:	20202020 	.word	0x20202020
  40d388:	00202020 	.word	0x00202020
  40d38c:	0a0d2046 	.word	0x0a0d2046
  40d390:	00000000 	.word	0x00000000
  40d394:	0a0d2050 	.word	0x0a0d2050
  40d398:	00000000 	.word	0x00000000
  40d39c:	2a2a0a0d 	.word	0x2a2a0a0d
  40d3a0:	44454c2a 	.word	0x44454c2a
  40d3a4:	414f4220 	.word	0x414f4220
  40d3a8:	20534452 	.word	0x20534452
  40d3ac:	5453414d 	.word	0x5453414d
  40d3b0:	4c205245 	.word	0x4c205245
  40d3b4:	2a545349 	.word	0x2a545349
  40d3b8:	0a0d2a2a 	.word	0x0a0d2a2a
  40d3bc:	00000a0d 	.word	0x00000a0d
  40d3c0:	29643225 	.word	0x29643225
  40d3c4:	32302520 	.word	0x32302520
  40d3c8:	32302558 	.word	0x32302558
  40d3cc:	32302558 	.word	0x32302558
  40d3d0:	32302558 	.word	0x32302558
  40d3d4:	32302558 	.word	0x32302558
  40d3d8:	32302558 	.word	0x32302558
  40d3dc:	00002058 	.word	0x00002058
  40d3e0:	504f5420 	.word	0x504f5420
  40d3e4:	00000a0d 	.word	0x00000a0d
  40d3e8:	544f4220 	.word	0x544f4220
  40d3ec:	00000a0d 	.word	0x00000a0d
  40d3f0:	0a0d0a0d 	.word	0x0a0d0a0d
  40d3f4:	00000000 	.word	0x00000000
  40d3f8:	65707954 	.word	0x65707954
  40d3fc:	27482720 	.word	0x27482720
  40d400:	726f6620 	.word	0x726f6620
  40d404:	6c656820 	.word	0x6c656820
  40d408:	0a0d2e70 	.word	0x0a0d2e70
  40d40c:	00000a0d 	.word	0x00000a0d
  40d410:	2a2a0a0d 	.word	0x2a2a0a0d
  40d414:	2d2d2d2d 	.word	0x2d2d2d2d
  40d418:	2d2d2d2d 	.word	0x2d2d2d2d
  40d41c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d420:	2d2d2d2d 	.word	0x2d2d2d2d
  40d424:	0d2a2a2d 	.word	0x0d2a2a2d
  40d428:	0000000a 	.word	0x0000000a
  40d42c:	6c452020 	.word	0x6c452020
  40d430:	72746365 	.word	0x72746365
  40d434:	616c636f 	.word	0x616c636f
  40d438:	48206576 	.word	0x48206576
  40d43c:	0d504c45 	.word	0x0d504c45
  40d440:	0000000a 	.word	0x0000000a
  40d444:	2d2d2a2a 	.word	0x2d2d2a2a
  40d448:	2d2d2d2d 	.word	0x2d2d2d2d
  40d44c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d450:	2d2d2d2d 	.word	0x2d2d2d2d
  40d454:	2a2d2d2d 	.word	0x2a2d2d2d
  40d458:	000a0d2a 	.word	0x000a0d2a
  40d45c:	20202020 	.word	0x20202020
  40d460:	20202048 	.word	0x20202048
  40d464:	20202020 	.word	0x20202020
  40d468:	54202d20 	.word	0x54202d20
  40d46c:	20736968 	.word	0x20736968
  40d470:	706c6568 	.word	0x706c6568
  40d474:	6e656d20 	.word	0x6e656d20
  40d478:	000a0d75 	.word	0x000a0d75
  40d47c:	20202020 	.word	0x20202020
  40d480:	20202044 	.word	0x20202044
  40d484:	20202020 	.word	0x20202020
  40d488:	53202d20 	.word	0x53202d20
  40d48c:	20776f68 	.word	0x20776f68
  40d490:	72727563 	.word	0x72727563
  40d494:	20746e65 	.word	0x20746e65
  40d498:	20455444 	.word	0x20455444
  40d49c:	74746573 	.word	0x74746573
  40d4a0:	0d676e69 	.word	0x0d676e69
  40d4a4:	0000000a 	.word	0x0000000a
  40d4a8:	20202020 	.word	0x20202020
  40d4ac:	78202044 	.word	0x78202044
  40d4b0:	20202078 	.word	0x20202078
  40d4b4:	43202d20 	.word	0x43202d20
  40d4b8:	676e6168 	.word	0x676e6168
  40d4bc:	6e692065 	.word	0x6e692065
  40d4c0:	61697469 	.word	0x61697469
  40d4c4:	5444206c 	.word	0x5444206c
  40d4c8:	6f742045 	.word	0x6f742045
  40d4cc:	20787820 	.word	0x20787820
  40d4d0:	756e696d 	.word	0x756e696d
  40d4d4:	20736574 	.word	0x20736574
  40d4d8:	72656877 	.word	0x72656877
  40d4dc:	20322065 	.word	0x20322065
  40d4e0:	78203d3e 	.word	0x78203d3e
  40d4e4:	3d3e2078 	.word	0x3d3e2078
  40d4e8:	2e393520 	.word	0x2e393520
  40d4ec:	00000a0d 	.word	0x00000a0d
  40d4f0:	20202020 	.word	0x20202020
  40d4f4:	20202053 	.word	0x20202053
  40d4f8:	20202020 	.word	0x20202020
  40d4fc:	53202d20 	.word	0x53202d20
  40d500:	65747379 	.word	0x65747379
  40d504:	7473206d 	.word	0x7473206d
  40d508:	73757461 	.word	0x73757461
  40d50c:	00000a0d 	.word	0x00000a0d
  40d510:	0000003e 	.word	0x0000003e
  40d514:	74696e49 	.word	0x74696e49
  40d518:	206c6169 	.word	0x206c6169
  40d51c:	20455444 	.word	0x20455444
  40d520:	20746573 	.word	0x20746573
  40d524:	203a6f74 	.word	0x203a6f74
  40d528:	00000000 	.word	0x00000000
  40d52c:	6e696d20 	.word	0x6e696d20
  40d530:	73657475 	.word	0x73657475
  40d534:	3e0a0d2e 	.word	0x3e0a0d2e
  40d538:	00000000 	.word	0x00000000
  40d53c:	696c6156 	.word	0x696c6156
  40d540:	654b2064 	.word	0x654b2064
  40d544:	64617079 	.word	0x64617079
  40d548:	646f4320 	.word	0x646f4320
  40d54c:	000a0d65 	.word	0x000a0d65
  40d550:	72617453 	.word	0x72617453
  40d554:	75622074 	.word	0x75622074
  40d558:	6e6f7474 	.word	0x6e6f7474
  40d55c:	65727020 	.word	0x65727020
  40d560:	64657373 	.word	0x64657373
  40d564:	00000a0d 	.word	0x00000a0d
  40d568:	74696e49 	.word	0x74696e49
  40d56c:	206c6169 	.word	0x206c6169
  40d570:	20455444 	.word	0x20455444
  40d574:	20776f6e 	.word	0x20776f6e
  40d578:	20746573 	.word	0x20746573
  40d57c:	203a6f74 	.word	0x203a6f74
  40d580:	00000000 	.word	0x00000000
  40d584:	003e0a0d 	.word	0x003e0a0d
  40d588:	6f727245 	.word	0x6f727245
  40d58c:	49202e72 	.word	0x49202e72
  40d590:	6974696e 	.word	0x6974696e
  40d594:	44206c61 	.word	0x44206c61
  40d598:	6e204554 	.word	0x6e204554
  40d59c:	6d20746f 	.word	0x6d20746f
  40d5a0:	6669646f 	.word	0x6669646f
  40d5a4:	2e646569 	.word	0x2e646569
  40d5a8:	000a0d20 	.word	0x000a0d20
  40d5ac:	7473754d 	.word	0x7473754d
  40d5b0:	20656220 	.word	0x20656220
  40d5b4:	61762061 	.word	0x61762061
  40d5b8:	2065756c 	.word	0x2065756c
  40d5bc:	77746562 	.word	0x77746562
  40d5c0:	206e6565 	.word	0x206e6565
  40d5c4:	6e612032 	.word	0x6e612032
  40d5c8:	39352064 	.word	0x39352064
  40d5cc:	3e0a0d2e 	.word	0x3e0a0d2e
  40d5d0:	00000000 	.word	0x00000000
  40d5d4:	726f6f44 	.word	0x726f6f44
  40d5d8:	74616c20 	.word	0x74616c20
  40d5dc:	64206863 	.word	0x64206863
  40d5e0:	63657465 	.word	0x63657465
  40d5e4:	0d646574 	.word	0x0d646574
  40d5e8:	0000000a 	.word	0x0000000a
  40d5ec:	54415453 	.word	0x54415453
  40d5f0:	4f445f45 	.word	0x4f445f45
  40d5f4:	4f5f524f 	.word	0x4f5f524f
  40d5f8:	0d4e4550 	.word	0x0d4e4550
  40d5fc:	0000000a 	.word	0x0000000a
  40d600:	54415453 	.word	0x54415453
  40d604:	4f445f45 	.word	0x4f445f45
  40d608:	415f524f 	.word	0x415f524f
  40d60c:	0d52414a 	.word	0x0d52414a
  40d610:	0000000a 	.word	0x0000000a
  40d614:	54415453 	.word	0x54415453
  40d618:	4f445f45 	.word	0x4f445f45
  40d61c:	4c5f524f 	.word	0x4c5f524f
  40d620:	48435441 	.word	0x48435441
  40d624:	0a0d4445 	.word	0x0a0d4445
  40d628:	00000000 	.word	0x00000000
  40d62c:	54415453 	.word	0x54415453
  40d630:	43455f45 	.word	0x43455f45
  40d634:	4c44495f 	.word	0x4c44495f
  40d638:	000a0d45 	.word	0x000a0d45
  40d63c:	54415453 	.word	0x54415453
  40d640:	54535f45 	.word	0x54535f45
  40d644:	5f545241 	.word	0x5f545241
  40d648:	494e4153 	.word	0x494e4153
  40d64c:	455a4954 	.word	0x455a4954
  40d650:	00000a0d 	.word	0x00000a0d
  40d654:	696e6153 	.word	0x696e6153
  40d658:	697a6974 	.word	0x697a6974
  40d65c:	0a0d676e 	.word	0x0a0d676e
  40d660:	00000000 	.word	0x00000000
  40d664:	6c207441 	.word	0x6c207441
  40d668:	74736165 	.word	0x74736165
  40d66c:	656e6f20 	.word	0x656e6f20
  40d670:	65687320 	.word	0x65687320
  40d674:	6920666c 	.word	0x6920666c
  40d678:	72702073 	.word	0x72702073
  40d67c:	6e657365 	.word	0x6e657365
  40d680:	62202c74 	.word	0x62202c74
  40d684:	6e207475 	.word	0x6e207475
  40d688:	6564206f 	.word	0x6564206f
  40d68c:	65636976 	.word	0x65636976
  40d690:	6f742073 	.word	0x6f742073
  40d694:	20656220 	.word	0x20656220
  40d698:	61656c63 	.word	0x61656c63
  40d69c:	2e64656e 	.word	0x2e64656e
  40d6a0:	00000a0d 	.word	0x00000a0d
  40d6a4:	73206f4e 	.word	0x73206f4e
  40d6a8:	766c6568 	.word	0x766c6568
  40d6ac:	202c7365 	.word	0x202c7365
  40d6b0:	7320726f 	.word	0x7320726f
  40d6b4:	766c6568 	.word	0x766c6568
  40d6b8:	61207365 	.word	0x61207365
  40d6bc:	70206572 	.word	0x70206572
  40d6c0:	20747361 	.word	0x20747361
  40d6c4:	6566696c 	.word	0x6566696c
  40d6c8:	656d6974 	.word	0x656d6974
  40d6cc:	00000a0d 	.word	0x00000a0d
  40d6d0:	696e6173 	.word	0x696e6173
  40d6d4:	657a6974 	.word	0x657a6974
  40d6d8:	756e694d 	.word	0x756e694d
  40d6dc:	3a736574 	.word	0x3a736574
  40d6e0:	646c2520 	.word	0x646c2520
  40d6e4:	706d7420 	.word	0x706d7420
  40d6e8:	696e6153 	.word	0x696e6153
  40d6ec:	657a6974 	.word	0x657a6974
  40d6f0:	756e694d 	.word	0x756e694d
  40d6f4:	3a736574 	.word	0x3a736574
  40d6f8:	646c2520 	.word	0x646c2520
  40d6fc:	00000a0d 	.word	0x00000a0d
  40d700:	54415453 	.word	0x54415453
  40d704:	41535f45 	.word	0x41535f45
  40d708:	4954494e 	.word	0x4954494e
  40d70c:	0a0d455a 	.word	0x0a0d455a
  40d710:	00000000 	.word	0x00000000
  40d714:	6c656853 	.word	0x6c656853
  40d718:	6c632066 	.word	0x6c632066
  40d71c:	0d6e6165 	.word	0x0d6e6165
  40d720:	0000000a 	.word	0x0000000a
  40d724:	54415453 	.word	0x54415453
  40d728:	54535f45 	.word	0x54535f45
  40d72c:	5f545241 	.word	0x5f545241
  40d730:	41454c43 	.word	0x41454c43
  40d734:	000a0d4e 	.word	0x000a0d4e
  40d738:	54415453 	.word	0x54415453
  40d73c:	4c435f45 	.word	0x4c435f45
  40d740:	0d4e4145 	.word	0x0d4e4145
  40d744:	0000000a 	.word	0x0000000a
  40d748:	54415453 	.word	0x54415453
  40d74c:	48535f45 	.word	0x48535f45
  40d750:	4f445455 	.word	0x4f445455
  40d754:	505f4e57 	.word	0x505f4e57
  40d758:	45434f52 	.word	0x45434f52
  40d75c:	53455353 	.word	0x53455353
  40d760:	00000a0d 	.word	0x00000a0d
  40d764:	726f6f44 	.word	0x726f6f44
  40d768:	74616c20 	.word	0x74616c20
  40d76c:	6f206863 	.word	0x6f206863
  40d770:	656e6570 	.word	0x656e6570
  40d774:	73202c64 	.word	0x73202c64
  40d778:	74747568 	.word	0x74747568
  40d77c:	20676e69 	.word	0x20676e69
  40d780:	6e776f64 	.word	0x6e776f64
  40d784:	6c6c6120 	.word	0x6c6c6120
  40d788:	6f727020 	.word	0x6f727020
  40d78c:	73736563 	.word	0x73736563
  40d790:	0a0d7365 	.word	0x0a0d7365
  40d794:	00000000 	.word	0x00000000

0040d798 <_ctype_>:
  40d798:	20202000 20202020 28282020 20282828     .         ((((( 
  40d7a8:	20202020 20202020 20202020 20202020                     
  40d7b8:	10108820 10101010 10101010 10101010      ...............
  40d7c8:	04040410 04040404 10040404 10101010     ................
  40d7d8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40d7e8:	01010101 01010101 01010101 10101010     ................
  40d7f8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40d808:	02020202 02020202 02020202 10101010     ................
  40d818:	00000020 00000000 00000000 00000000      ...............
	...
  40d89c:	00000043                                C...

0040d8a0 <_global_impure_ptr>:
  40d8a0:	204000a0 0000000a                       ..@ ....

0040d8a8 <zeroes.6911>:
  40d8a8:	30303030 30303030 30303030 30303030     0000000000000000

0040d8b8 <blanks.6910>:
  40d8b8:	20202020 20202020 20202020 20202020                     
  40d8c8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40d8d8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40d8e8:	00000000 33323130 37363534 62613938     ....0123456789ab
  40d8f8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40d908:	00000030 69666e49 7974696e 00000000     0...Infinity....
  40d918:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

0040d928 <__mprec_tens>:
  40d928:	00000000 3ff00000 00000000 40240000     .......?......$@
  40d938:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40d948:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40d958:	00000000 412e8480 00000000 416312d0     .......A......cA
  40d968:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40d978:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40d988:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40d998:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40d9a8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40d9b8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40d9c8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40d9d8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40d9e8:	79d99db4 44ea7843                       ...yCx.D

0040d9f0 <p05.5302>:
  40d9f0:	00000005 00000019 0000007d 00000000     ........}.......

0040da00 <__mprec_bigtens>:
  40da00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40da10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40da20:	7f73bf3c 75154fdd                       <.s..O.u

0040da28 <_init>:
  40da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40da2a:	bf00      	nop
  40da2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40da2e:	bc08      	pop	{r3}
  40da30:	469e      	mov	lr, r3
  40da32:	4770      	bx	lr

0040da34 <__init_array_start>:
  40da34:	00408d89 	.word	0x00408d89

0040da38 <__frame_dummy_init_array_entry>:
  40da38:	00400165                                e.@.

0040da3c <_fini>:
  40da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40da3e:	bf00      	nop
  40da40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40da42:	bc08      	pop	{r3}
  40da44:	469e      	mov	lr, r3
  40da46:	4770      	bx	lr

0040da48 <__fini_array_start>:
  40da48:	00400141 	.word	0x00400141
