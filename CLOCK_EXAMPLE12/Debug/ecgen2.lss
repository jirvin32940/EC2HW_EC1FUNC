
ecgen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d26c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d26c  0040d26c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000090c  20400000  0040d274  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000f30  2040090c  0040db80  0001890c  2**2
                  ALLOC
  4 .stack        00002004  2040183c  0040eab0  0001890c  2**0
                  ALLOC
  5 .heap         00000200  20403840  00410ab4  0001890c  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  0001890c  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  0001893f  2**0
                  CONTENTS, READONLY
  8 .debug_info   00016153  00000000  00000000  0001899a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ba9  00000000  00000000  0002eaed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b086  00000000  00000000  00031696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012c8  00000000  00000000  0003c71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001150  00000000  00000000  0003d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000217d7  00000000  00000000  0003eb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011f9e  00000000  00000000  0006030b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008f87a  00000000  00000000  000722a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005fcc  00000000  00000000  00101b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403840 	.word	0x20403840
  400004:	00402365 	.word	0x00402365
  400008:	004023e9 	.word	0x004023e9
  40000c:	004023e9 	.word	0x004023e9
  400010:	004023e9 	.word	0x004023e9
  400014:	004023e9 	.word	0x004023e9
  400018:	004023e9 	.word	0x004023e9
	...
  40002c:	004023e9 	.word	0x004023e9
  400030:	004023e9 	.word	0x004023e9
  400034:	00000000 	.word	0x00000000
  400038:	004023e9 	.word	0x004023e9
  40003c:	00403a75 	.word	0x00403a75
  400040:	004023e9 	.word	0x004023e9
  400044:	004023e9 	.word	0x004023e9
  400048:	004023e9 	.word	0x004023e9
  40004c:	004023e9 	.word	0x004023e9
  400050:	004023e9 	.word	0x004023e9
  400054:	004023e9 	.word	0x004023e9
  400058:	004023e9 	.word	0x004023e9
  40005c:	004023e9 	.word	0x004023e9
  400060:	004023e9 	.word	0x004023e9
  400064:	00000000 	.word	0x00000000
  400068:	0040139d 	.word	0x0040139d
  40006c:	004013b5 	.word	0x004013b5
  400070:	004013cd 	.word	0x004013cd
  400074:	00403bb9 	.word	0x00403bb9
  400078:	004023e9 	.word	0x004023e9
  40007c:	004023e9 	.word	0x004023e9
  400080:	004013e5 	.word	0x004013e5
  400084:	004013fd 	.word	0x004013fd
  400088:	004023e9 	.word	0x004023e9
  40008c:	004023e9 	.word	0x004023e9
  400090:	004023e9 	.word	0x004023e9
  400094:	004023e9 	.word	0x004023e9
  400098:	004023e9 	.word	0x004023e9
  40009c:	004023e9 	.word	0x004023e9
  4000a0:	004023e9 	.word	0x004023e9
  4000a4:	004023e9 	.word	0x004023e9
  4000a8:	004023e9 	.word	0x004023e9
  4000ac:	004023e9 	.word	0x004023e9
  4000b0:	004023e9 	.word	0x004023e9
  4000b4:	00401269 	.word	0x00401269
  4000b8:	004023e9 	.word	0x004023e9
  4000bc:	00403f0d 	.word	0x00403f0d
  4000c0:	004023e9 	.word	0x004023e9
  4000c4:	004023e9 	.word	0x004023e9
  4000c8:	004023e9 	.word	0x004023e9
  4000cc:	004023e9 	.word	0x004023e9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004023e9 	.word	0x004023e9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004023e9 	.word	0x004023e9
  4000e0:	0040127d 	.word	0x0040127d
  4000e4:	004023e9 	.word	0x004023e9
  4000e8:	004023e9 	.word	0x004023e9
  4000ec:	004023e9 	.word	0x004023e9
  4000f0:	004023e9 	.word	0x004023e9
  4000f4:	004023e9 	.word	0x004023e9
  4000f8:	004023e9 	.word	0x004023e9
  4000fc:	004023e9 	.word	0x004023e9
  400100:	004023e9 	.word	0x004023e9
  400104:	004023e9 	.word	0x004023e9
  400108:	004023e9 	.word	0x004023e9
  40010c:	004023e9 	.word	0x004023e9
  400110:	004023e9 	.word	0x004023e9
	...
  400120:	004023e9 	.word	0x004023e9
  400124:	004023e9 	.word	0x004023e9
  400128:	004023e9 	.word	0x004023e9
  40012c:	004023e9 	.word	0x004023e9
  400130:	004023e9 	.word	0x004023e9
  400134:	00000000 	.word	0x00000000
  400138:	004023e9 	.word	0x004023e9
  40013c:	004023e9 	.word	0x004023e9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040090c 	.word	0x2040090c
  40015c:	00000000 	.word	0x00000000
  400160:	0040d274 	.word	0x0040d274

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040d274 	.word	0x0040d274
  400190:	20400910 	.word	0x20400910
  400194:	0040d274 	.word	0x0040d274
  400198:	00000000 	.word	0x00000000

0040019c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	b082      	sub	sp, #8
  4001a0:	af00      	add	r7, sp, #0
  4001a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001a4:	687b      	ldr	r3, [r7, #4]
  4001a6:	2b07      	cmp	r3, #7
  4001a8:	d830      	bhi.n	40020c <osc_enable+0x70>
  4001aa:	a201      	add	r2, pc, #4	; (adr r2, 4001b0 <osc_enable+0x14>)
  4001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001b0:	0040020d 	.word	0x0040020d
  4001b4:	004001d1 	.word	0x004001d1
  4001b8:	004001d9 	.word	0x004001d9
  4001bc:	004001e1 	.word	0x004001e1
  4001c0:	004001e9 	.word	0x004001e9
  4001c4:	004001f1 	.word	0x004001f1
  4001c8:	004001f9 	.word	0x004001f9
  4001cc:	00400203 	.word	0x00400203
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001d0:	2000      	movs	r0, #0
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <osc_enable+0x78>)
  4001d4:	4798      	blx	r3
		break;
  4001d6:	e019      	b.n	40020c <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001d8:	2001      	movs	r0, #1
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <osc_enable+0x78>)
  4001dc:	4798      	blx	r3
		break;
  4001de:	e015      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e011      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001e8:	2010      	movs	r0, #16
  4001ea:	4b0b      	ldr	r3, [pc, #44]	; (400218 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e00d      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4001f0:	2020      	movs	r0, #32
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <osc_enable+0x7c>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e009      	b.n	40020c <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001f8:	2000      	movs	r0, #0
  4001fa:	213e      	movs	r1, #62	; 0x3e
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <osc_enable+0x80>)
  4001fe:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400200:	e004      	b.n	40020c <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400202:	2001      	movs	r0, #1
  400204:	213e      	movs	r1, #62	; 0x3e
  400206:	4b05      	ldr	r3, [pc, #20]	; (40021c <osc_enable+0x80>)
  400208:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40020a:	bf00      	nop
	}
}
  40020c:	3708      	adds	r7, #8
  40020e:	46bd      	mov	sp, r7
  400210:	bd80      	pop	{r7, pc}
  400212:	bf00      	nop
  400214:	00401511 	.word	0x00401511
  400218:	0040157d 	.word	0x0040157d
  40021c:	004015ed 	.word	0x004015ed

00400220 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400220:	b580      	push	{r7, lr}
  400222:	b082      	sub	sp, #8
  400224:	af00      	add	r7, sp, #0
  400226:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400228:	687b      	ldr	r3, [r7, #4]
  40022a:	2b07      	cmp	r3, #7
  40022c:	d826      	bhi.n	40027c <osc_is_ready+0x5c>
  40022e:	a201      	add	r2, pc, #4	; (adr r2, 400234 <osc_is_ready+0x14>)
  400230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400234:	00400255 	.word	0x00400255
  400238:	00400259 	.word	0x00400259
  40023c:	00400259 	.word	0x00400259
  400240:	0040026b 	.word	0x0040026b
  400244:	0040026b 	.word	0x0040026b
  400248:	0040026b 	.word	0x0040026b
  40024c:	0040026b 	.word	0x0040026b
  400250:	0040026b 	.word	0x0040026b
	case OSC_SLCK_32K_RC:
		return 1;
  400254:	2301      	movs	r3, #1
  400256:	e012      	b.n	40027e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400258:	4b0b      	ldr	r3, [pc, #44]	; (400288 <osc_is_ready+0x68>)
  40025a:	4798      	blx	r3
  40025c:	4603      	mov	r3, r0
  40025e:	2b00      	cmp	r3, #0
  400260:	bf14      	ite	ne
  400262:	2301      	movne	r3, #1
  400264:	2300      	moveq	r3, #0
  400266:	b2db      	uxtb	r3, r3
  400268:	e009      	b.n	40027e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40026a:	4b08      	ldr	r3, [pc, #32]	; (40028c <osc_is_ready+0x6c>)
  40026c:	4798      	blx	r3
  40026e:	4603      	mov	r3, r0
  400270:	2b00      	cmp	r3, #0
  400272:	bf14      	ite	ne
  400274:	2301      	movne	r3, #1
  400276:	2300      	moveq	r3, #0
  400278:	b2db      	uxtb	r3, r3
  40027a:	e000      	b.n	40027e <osc_is_ready+0x5e>
	}

	return 0;
  40027c:	2300      	movs	r3, #0
}
  40027e:	4618      	mov	r0, r3
  400280:	3708      	adds	r7, #8
  400282:	46bd      	mov	sp, r7
  400284:	bd80      	pop	{r7, pc}
  400286:	bf00      	nop
  400288:	00401549 	.word	0x00401549
  40028c:	00401665 	.word	0x00401665

00400290 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	2b07      	cmp	r3, #7
  40029c:	d825      	bhi.n	4002ea <osc_get_rate+0x5a>
  40029e:	a201      	add	r2, pc, #4	; (adr r2, 4002a4 <osc_get_rate+0x14>)
  4002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002a4:	004002c5 	.word	0x004002c5
  4002a8:	004002cb 	.word	0x004002cb
  4002ac:	004002d1 	.word	0x004002d1
  4002b0:	004002d7 	.word	0x004002d7
  4002b4:	004002db 	.word	0x004002db
  4002b8:	004002df 	.word	0x004002df
  4002bc:	004002e3 	.word	0x004002e3
  4002c0:	004002e7 	.word	0x004002e7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002c8:	e010      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002ce:	e00d      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002d4:	e00a      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002d6:	4b08      	ldr	r3, [pc, #32]	; (4002f8 <osc_get_rate+0x68>)
  4002d8:	e008      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <osc_get_rate+0x6c>)
  4002dc:	e006      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002de:	4b08      	ldr	r3, [pc, #32]	; (400300 <osc_get_rate+0x70>)
  4002e0:	e004      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002e2:	4b08      	ldr	r3, [pc, #32]	; (400304 <osc_get_rate+0x74>)
  4002e4:	e002      	b.n	4002ec <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002e6:	4b06      	ldr	r3, [pc, #24]	; (400300 <osc_get_rate+0x70>)
  4002e8:	e000      	b.n	4002ec <osc_get_rate+0x5c>
	}

	return 0;
  4002ea:	2300      	movs	r3, #0
}
  4002ec:	4618      	mov	r0, r3
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr
  4002f8:	003d0900 	.word	0x003d0900
  4002fc:	007a1200 	.word	0x007a1200
  400300:	00b71b00 	.word	0x00b71b00
  400304:	00f42400 	.word	0x00f42400

00400308 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400308:	b580      	push	{r7, lr}
  40030a:	b082      	sub	sp, #8
  40030c:	af00      	add	r7, sp, #0
  40030e:	4603      	mov	r3, r0
  400310:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400312:	bf00      	nop
  400314:	79fb      	ldrb	r3, [r7, #7]
  400316:	4618      	mov	r0, r3
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <osc_wait_ready+0x28>)
  40031a:	4798      	blx	r3
  40031c:	4603      	mov	r3, r0
  40031e:	f083 0301 	eor.w	r3, r3, #1
  400322:	b2db      	uxtb	r3, r3
  400324:	2b00      	cmp	r3, #0
  400326:	d1f5      	bne.n	400314 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400328:	3708      	adds	r7, #8
  40032a:	46bd      	mov	sp, r7
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	00400221 	.word	0x00400221

00400334 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400334:	b580      	push	{r7, lr}
  400336:	b086      	sub	sp, #24
  400338:	af00      	add	r7, sp, #0
  40033a:	60f8      	str	r0, [r7, #12]
  40033c:	607a      	str	r2, [r7, #4]
  40033e:	603b      	str	r3, [r7, #0]
  400340:	460b      	mov	r3, r1
  400342:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	2b00      	cmp	r3, #0
  400348:	d107      	bne.n	40035a <pll_config_init+0x26>
  40034a:	683b      	ldr	r3, [r7, #0]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d104      	bne.n	40035a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400356:	601a      	str	r2, [r3, #0]
  400358:	e019      	b.n	40038e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40035a:	7afb      	ldrb	r3, [r7, #11]
  40035c:	4618      	mov	r0, r3
  40035e:	4b0d      	ldr	r3, [pc, #52]	; (400394 <pll_config_init+0x60>)
  400360:	4798      	blx	r3
  400362:	4602      	mov	r2, r0
  400364:	687b      	ldr	r3, [r7, #4]
  400366:	fbb2 f3f3 	udiv	r3, r2, r3
  40036a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	683a      	ldr	r2, [r7, #0]
  400370:	fb02 f303 	mul.w	r3, r2, r3
  400374:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400376:	683b      	ldr	r3, [r7, #0]
  400378:	3b01      	subs	r3, #1
  40037a:	041a      	lsls	r2, r3, #16
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <pll_config_init+0x64>)
  40037e:	4013      	ands	r3, r2
  400380:	687a      	ldr	r2, [r7, #4]
  400382:	b2d2      	uxtb	r2, r2
  400384:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400386:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
	vco_hz *= ul_mul;
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40038a:	68fb      	ldr	r3, [r7, #12]
  40038c:	601a      	str	r2, [r3, #0]
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
  40038e:	3718      	adds	r7, #24
  400390:	46bd      	mov	sp, r7
  400392:	bd80      	pop	{r7, pc}
  400394:	00400291 	.word	0x00400291
  400398:	07ff0000 	.word	0x07ff0000

0040039c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  40039c:	b580      	push	{r7, lr}
  40039e:	b082      	sub	sp, #8
  4003a0:	af00      	add	r7, sp, #0
  4003a2:	6078      	str	r0, [r7, #4]
  4003a4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003a6:	683b      	ldr	r3, [r7, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d108      	bne.n	4003be <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003ac:	4b08      	ldr	r3, [pc, #32]	; (4003d0 <pll_enable+0x34>)
  4003ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b0:	4a08      	ldr	r2, [pc, #32]	; (4003d4 <pll_enable+0x38>)
  4003b2:	687b      	ldr	r3, [r7, #4]
  4003b4:	681b      	ldr	r3, [r3, #0]
  4003b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ba:	6293      	str	r3, [r2, #40]	; 0x28
  4003bc:	e005      	b.n	4003ca <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003be:	4a05      	ldr	r2, [pc, #20]	; (4003d4 <pll_enable+0x38>)
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003c8:	61d3      	str	r3, [r2, #28]
	}
}
  4003ca:	3708      	adds	r7, #8
  4003cc:	46bd      	mov	sp, r7
  4003ce:	bd80      	pop	{r7, pc}
  4003d0:	00401681 	.word	0x00401681
  4003d4:	400e0600 	.word	0x400e0600

004003d8 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e0:	687b      	ldr	r3, [r7, #4]
  4003e2:	2b00      	cmp	r3, #0
  4003e4:	d103      	bne.n	4003ee <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003e6:	4b05      	ldr	r3, [pc, #20]	; (4003fc <pll_is_locked+0x24>)
  4003e8:	4798      	blx	r3
  4003ea:	4603      	mov	r3, r0
  4003ec:	e002      	b.n	4003f4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <pll_is_locked+0x28>)
  4003f0:	4798      	blx	r3
  4003f2:	4603      	mov	r3, r0
	}
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3708      	adds	r7, #8
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bd80      	pop	{r7, pc}
  4003fc:	00401699 	.word	0x00401699
  400400:	004016b5 	.word	0x004016b5

00400404 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400404:	b580      	push	{r7, lr}
  400406:	b082      	sub	sp, #8
  400408:	af00      	add	r7, sp, #0
  40040a:	4603      	mov	r3, r0
  40040c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40040e:	79fb      	ldrb	r3, [r7, #7]
  400410:	3b03      	subs	r3, #3
  400412:	2b04      	cmp	r3, #4
  400414:	d808      	bhi.n	400428 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400416:	79fb      	ldrb	r3, [r7, #7]
  400418:	4618      	mov	r0, r3
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <pll_enable_source+0x2c>)
  40041c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40041e:	79fb      	ldrb	r3, [r7, #7]
  400420:	4618      	mov	r0, r3
  400422:	4b04      	ldr	r3, [pc, #16]	; (400434 <pll_enable_source+0x30>)
  400424:	4798      	blx	r3
		break;
  400426:	e000      	b.n	40042a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400428:	bf00      	nop
	}
}
  40042a:	3708      	adds	r7, #8
  40042c:	46bd      	mov	sp, r7
  40042e:	bd80      	pop	{r7, pc}
  400430:	0040019d 	.word	0x0040019d
  400434:	00400309 	.word	0x00400309

00400438 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400438:	b580      	push	{r7, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	af00      	add	r7, sp, #0
  40043e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400440:	bf00      	nop
  400442:	6878      	ldr	r0, [r7, #4]
  400444:	4b04      	ldr	r3, [pc, #16]	; (400458 <pll_wait_for_lock+0x20>)
  400446:	4798      	blx	r3
  400448:	4603      	mov	r3, r0
  40044a:	2b00      	cmp	r3, #0
  40044c:	d0f9      	beq.n	400442 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40044e:	2300      	movs	r3, #0
}
  400450:	4618      	mov	r0, r3
  400452:	3708      	adds	r7, #8
  400454:	46bd      	mov	sp, r7
  400456:	bd80      	pop	{r7, pc}
  400458:	004003d9 	.word	0x004003d9

0040045c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40045c:	b580      	push	{r7, lr}
  40045e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400460:	2006      	movs	r0, #6
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <sysclk_get_main_hz+0x1c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4613      	mov	r3, r2
  40046a:	009b      	lsls	r3, r3, #2
  40046c:	4413      	add	r3, r2
  40046e:	009a      	lsls	r2, r3, #2
  400470:	4413      	add	r3, r2
  400472:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400474:	4618      	mov	r0, r3
  400476:	bd80      	pop	{r7, pc}
  400478:	00400291 	.word	0x00400291

0040047c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400480:	4b02      	ldr	r3, [pc, #8]	; (40048c <sysclk_get_cpu_hz+0x10>)
  400482:	4798      	blx	r3
  400484:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400486:	4618      	mov	r0, r3
  400488:	bd80      	pop	{r7, pc}
  40048a:	bf00      	nop
  40048c:	0040045d 	.word	0x0040045d

00400490 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400490:	b590      	push	{r4, r7, lr}
  400492:	b083      	sub	sp, #12
  400494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400496:	4813      	ldr	r0, [pc, #76]	; (4004e4 <sysclk_init+0x54>)
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <sysclk_init+0x58>)
  40049a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40049c:	2006      	movs	r0, #6
  40049e:	4b13      	ldr	r3, [pc, #76]	; (4004ec <sysclk_init+0x5c>)
  4004a0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004a2:	1d3b      	adds	r3, r7, #4
  4004a4:	4618      	mov	r0, r3
  4004a6:	2106      	movs	r1, #6
  4004a8:	2204      	movs	r2, #4
  4004aa:	2319      	movs	r3, #25
  4004ac:	4c10      	ldr	r4, [pc, #64]	; (4004f0 <sysclk_init+0x60>)
  4004ae:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004b0:	1d3b      	adds	r3, r7, #4
  4004b2:	4618      	mov	r0, r3
  4004b4:	2100      	movs	r1, #0
  4004b6:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <sysclk_init+0x64>)
  4004b8:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <sysclk_init+0x68>)
  4004be:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004c0:	2001      	movs	r0, #1
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <sysclk_init+0x6c>)
  4004c4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004c6:	2000      	movs	r0, #0
  4004c8:	4b0d      	ldr	r3, [pc, #52]	; (400500 <sysclk_init+0x70>)
  4004ca:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004cc:	4b0d      	ldr	r3, [pc, #52]	; (400504 <sysclk_init+0x74>)
  4004ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004d0:	4b0d      	ldr	r3, [pc, #52]	; (400508 <sysclk_init+0x78>)
  4004d2:	4798      	blx	r3
  4004d4:	4603      	mov	r3, r0
  4004d6:	4618      	mov	r0, r3
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <sysclk_init+0x58>)
  4004da:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004dc:	370c      	adds	r7, #12
  4004de:	46bd      	mov	sp, r7
  4004e0:	bd90      	pop	{r4, r7, pc}
  4004e2:	bf00      	nop
  4004e4:	11e1a300 	.word	0x11e1a300
  4004e8:	00402559 	.word	0x00402559
  4004ec:	00400405 	.word	0x00400405
  4004f0:	00400335 	.word	0x00400335
  4004f4:	0040039d 	.word	0x0040039d
  4004f8:	00400439 	.word	0x00400439
  4004fc:	00401415 	.word	0x00401415
  400500:	0040148d 	.word	0x0040148d
  400504:	004023f1 	.word	0x004023f1
  400508:	0040047d 	.word	0x0040047d

0040050c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b086      	sub	sp, #24
  400510:	af00      	add	r7, sp, #0
  400512:	60f8      	str	r0, [r7, #12]
  400514:	60b9      	str	r1, [r7, #8]
  400516:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400518:	2300      	movs	r3, #0
  40051a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40051c:	68fb      	ldr	r3, [r7, #12]
  40051e:	2b00      	cmp	r3, #0
  400520:	d002      	beq.n	400528 <_read+0x1c>
		return -1;
  400522:	f04f 33ff 	mov.w	r3, #4294967295
  400526:	e014      	b.n	400552 <_read+0x46>
	}

	for (; len > 0; --len) {
  400528:	e00f      	b.n	40054a <_read+0x3e>
		ptr_get(stdio_base, ptr);
  40052a:	4b0c      	ldr	r3, [pc, #48]	; (40055c <_read+0x50>)
  40052c:	681b      	ldr	r3, [r3, #0]
  40052e:	4a0c      	ldr	r2, [pc, #48]	; (400560 <_read+0x54>)
  400530:	6812      	ldr	r2, [r2, #0]
  400532:	4610      	mov	r0, r2
  400534:	68b9      	ldr	r1, [r7, #8]
  400536:	4798      	blx	r3
		ptr++;
  400538:	68bb      	ldr	r3, [r7, #8]
  40053a:	3301      	adds	r3, #1
  40053c:	60bb      	str	r3, [r7, #8]
		nChars++;
  40053e:	697b      	ldr	r3, [r7, #20]
  400540:	3301      	adds	r3, #1
  400542:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	3b01      	subs	r3, #1
  400548:	607b      	str	r3, [r7, #4]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	2b00      	cmp	r3, #0
  40054e:	dcec      	bgt.n	40052a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  400550:	697b      	ldr	r3, [r7, #20]
}
  400552:	4618      	mov	r0, r3
  400554:	3718      	adds	r7, #24
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	20400a10 	.word	0x20400a10
  400560:	20400a18 	.word	0x20400a18

00400564 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400564:	b580      	push	{r7, lr}
  400566:	b086      	sub	sp, #24
  400568:	af00      	add	r7, sp, #0
  40056a:	60f8      	str	r0, [r7, #12]
  40056c:	60b9      	str	r1, [r7, #8]
  40056e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  400570:	2300      	movs	r3, #0
  400572:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  400574:	68fb      	ldr	r3, [r7, #12]
  400576:	2b01      	cmp	r3, #1
  400578:	d008      	beq.n	40058c <_write+0x28>
  40057a:	68fb      	ldr	r3, [r7, #12]
  40057c:	2b02      	cmp	r3, #2
  40057e:	d005      	beq.n	40058c <_write+0x28>
  400580:	68fb      	ldr	r3, [r7, #12]
  400582:	2b03      	cmp	r3, #3
  400584:	d002      	beq.n	40058c <_write+0x28>
		return -1;
  400586:	f04f 33ff 	mov.w	r3, #4294967295
  40058a:	e01a      	b.n	4005c2 <_write+0x5e>
	}

	for (; len != 0; --len) {
  40058c:	e015      	b.n	4005ba <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40058e:	4b0f      	ldr	r3, [pc, #60]	; (4005cc <_write+0x68>)
  400590:	681a      	ldr	r2, [r3, #0]
  400592:	4b0f      	ldr	r3, [pc, #60]	; (4005d0 <_write+0x6c>)
  400594:	6818      	ldr	r0, [r3, #0]
  400596:	68bb      	ldr	r3, [r7, #8]
  400598:	1c59      	adds	r1, r3, #1
  40059a:	60b9      	str	r1, [r7, #8]
  40059c:	781b      	ldrb	r3, [r3, #0]
  40059e:	4619      	mov	r1, r3
  4005a0:	4790      	blx	r2
  4005a2:	4603      	mov	r3, r0
  4005a4:	2b00      	cmp	r3, #0
  4005a6:	da02      	bge.n	4005ae <_write+0x4a>
			return -1;
  4005a8:	f04f 33ff 	mov.w	r3, #4294967295
  4005ac:	e009      	b.n	4005c2 <_write+0x5e>
		}
		++nChars;
  4005ae:	697b      	ldr	r3, [r7, #20]
  4005b0:	3301      	adds	r3, #1
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	3b01      	subs	r3, #1
  4005b8:	607b      	str	r3, [r7, #4]
  4005ba:	687b      	ldr	r3, [r7, #4]
  4005bc:	2b00      	cmp	r3, #0
  4005be:	d1e6      	bne.n	40058e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4005c0:	697b      	ldr	r3, [r7, #20]
}
  4005c2:	4618      	mov	r0, r3
  4005c4:	3718      	adds	r7, #24
  4005c6:	46bd      	mov	sp, r7
  4005c8:	bd80      	pop	{r7, pc}
  4005ca:	bf00      	nop
  4005cc:	20400a14 	.word	0x20400a14
  4005d0:	20400a18 	.word	0x20400a18

004005d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4005d4:	b580      	push	{r7, lr}
  4005d6:	b082      	sub	sp, #8
  4005d8:	af00      	add	r7, sp, #0
  4005da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <sysclk_enable_peripheral_clock+0x14>)
  4005e0:	4798      	blx	r3
}
  4005e2:	3708      	adds	r7, #8
  4005e4:	46bd      	mov	sp, r7
  4005e6:	bd80      	pop	{r7, pc}
  4005e8:	004016d1 	.word	0x004016d1

004005ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4005ec:	b580      	push	{r7, lr}
  4005ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4005f0:	200a      	movs	r0, #10
  4005f2:	4b07      	ldr	r3, [pc, #28]	; (400610 <ioport_init+0x24>)
  4005f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4005f6:	200b      	movs	r0, #11
  4005f8:	4b05      	ldr	r3, [pc, #20]	; (400610 <ioport_init+0x24>)
  4005fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4005fc:	200c      	movs	r0, #12
  4005fe:	4b04      	ldr	r3, [pc, #16]	; (400610 <ioport_init+0x24>)
  400600:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400602:	2010      	movs	r0, #16
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <ioport_init+0x24>)
  400606:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400608:	2011      	movs	r0, #17
  40060a:	4b01      	ldr	r3, [pc, #4]	; (400610 <ioport_init+0x24>)
  40060c:	4798      	blx	r3
	arch_ioport_init();
}
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005d5 	.word	0x004005d5

00400614 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400614:	b480      	push	{r7}
  400616:	b089      	sub	sp, #36	; 0x24
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	61fb      	str	r3, [r7, #28]
  400620:	69fb      	ldr	r3, [r7, #28]
  400622:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400624:	69bb      	ldr	r3, [r7, #24]
  400626:	095a      	lsrs	r2, r3, #5
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40062c:	697b      	ldr	r3, [r7, #20]
  40062e:	f003 031f 	and.w	r3, r3, #31
  400632:	2101      	movs	r1, #1
  400634:	fa01 f303 	lsl.w	r3, r1, r3
  400638:	613a      	str	r2, [r7, #16]
  40063a:	60fb      	str	r3, [r7, #12]
  40063c:	693b      	ldr	r3, [r7, #16]
  40063e:	60bb      	str	r3, [r7, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400640:	68ba      	ldr	r2, [r7, #8]
  400642:	4b05      	ldr	r3, [pc, #20]	; (400658 <ioport_disable_pin+0x44>)
  400644:	4413      	add	r3, r2
  400646:	025b      	lsls	r3, r3, #9
  400648:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40064a:	68fb      	ldr	r3, [r7, #12]
  40064c:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40064e:	3724      	adds	r7, #36	; 0x24
  400650:	46bd      	mov	sp, r7
  400652:	f85d 7b04 	ldr.w	r7, [sp], #4
  400656:	4770      	bx	lr
  400658:	00200707 	.word	0x00200707

0040065c <ioport_disable_port>:
 * \param port IOPORT port to disable
 * \param mask Pin mask of pins to disable
 */
static inline void ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
  40065c:	b480      	push	{r7}
  40065e:	b087      	sub	sp, #28
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	617b      	str	r3, [r7, #20]
  40066a:	683b      	ldr	r3, [r7, #0]
  40066c:	613b      	str	r3, [r7, #16]
  40066e:	697b      	ldr	r3, [r7, #20]
  400670:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400672:	68fa      	ldr	r2, [r7, #12]
  400674:	4b05      	ldr	r3, [pc, #20]	; (40068c <ioport_disable_port+0x30>)
  400676:	4413      	add	r3, r2
  400678:	025b      	lsls	r3, r3, #9
  40067a:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40067c:	693b      	ldr	r3, [r7, #16]
  40067e:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_port(port, mask);
}
  400680:	371c      	adds	r7, #28
  400682:	46bd      	mov	sp, r7
  400684:	f85d 7b04 	ldr.w	r7, [sp], #4
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	00200707 	.word	0x00200707

00400690 <ioport_set_port_mode>:
 * \param mode Mode masks to configure for the specified pins (\ref
 * ioport_modes)
 */
static inline void ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
  400690:	b480      	push	{r7}
  400692:	b08b      	sub	sp, #44	; 0x2c
  400694:	af00      	add	r7, sp, #0
  400696:	60f8      	str	r0, [r7, #12]
  400698:	60b9      	str	r1, [r7, #8]
  40069a:	607a      	str	r2, [r7, #4]
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	627b      	str	r3, [r7, #36]	; 0x24
  4006a0:	68bb      	ldr	r3, [r7, #8]
  4006a2:	623b      	str	r3, [r7, #32]
  4006a4:	687b      	ldr	r3, [r7, #4]
  4006a6:	61fb      	str	r3, [r7, #28]
  4006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006aa:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006ac:	69ba      	ldr	r2, [r7, #24]
  4006ae:	4b37      	ldr	r3, [pc, #220]	; (40078c <ioport_set_port_mode+0xfc>)
  4006b0:	4413      	add	r3, r2
  4006b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006b4:	617b      	str	r3, [r7, #20]

	if (mode & IOPORT_MODE_PULLUP) {
  4006b6:	69fb      	ldr	r3, [r7, #28]
  4006b8:	f003 0308 	and.w	r3, r3, #8
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d003      	beq.n	4006c8 <ioport_set_port_mode+0x38>
		base->PIO_PUER = mask;
  4006c0:	697b      	ldr	r3, [r7, #20]
  4006c2:	6a3a      	ldr	r2, [r7, #32]
  4006c4:	665a      	str	r2, [r3, #100]	; 0x64
  4006c6:	e002      	b.n	4006ce <ioport_set_port_mode+0x3e>
	} else {
		base->PIO_PUDR = mask;
  4006c8:	697b      	ldr	r3, [r7, #20]
  4006ca:	6a3a      	ldr	r2, [r7, #32]
  4006cc:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006ce:	69fb      	ldr	r3, [r7, #28]
  4006d0:	f003 0310 	and.w	r3, r3, #16
  4006d4:	2b00      	cmp	r3, #0
  4006d6:	d004      	beq.n	4006e2 <ioport_set_port_mode+0x52>
		base->PIO_PPDER = mask;
  4006d8:	697b      	ldr	r3, [r7, #20]
  4006da:	6a3a      	ldr	r2, [r7, #32]
  4006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4006e0:	e003      	b.n	4006ea <ioport_set_port_mode+0x5a>
	} else {
		base->PIO_PPDDR = mask;
  4006e2:	697b      	ldr	r3, [r7, #20]
  4006e4:	6a3a      	ldr	r2, [r7, #32]
  4006e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4006ea:	69fb      	ldr	r3, [r7, #28]
  4006ec:	f003 0320 	and.w	r3, r3, #32
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	d003      	beq.n	4006fc <ioport_set_port_mode+0x6c>
		base->PIO_MDER = mask;
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	6a3a      	ldr	r2, [r7, #32]
  4006f8:	651a      	str	r2, [r3, #80]	; 0x50
  4006fa:	e002      	b.n	400702 <ioport_set_port_mode+0x72>
	} else {
		base->PIO_MDDR = mask;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	6a3a      	ldr	r2, [r7, #32]
  400700:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400702:	69fb      	ldr	r3, [r7, #28]
  400704:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400708:	2b00      	cmp	r3, #0
  40070a:	d003      	beq.n	400714 <ioport_set_port_mode+0x84>
		base->PIO_IFER = mask;
  40070c:	697b      	ldr	r3, [r7, #20]
  40070e:	6a3a      	ldr	r2, [r7, #32]
  400710:	621a      	str	r2, [r3, #32]
  400712:	e002      	b.n	40071a <ioport_set_port_mode+0x8a>
	} else {
		base->PIO_IFDR = mask;
  400714:	697b      	ldr	r3, [r7, #20]
  400716:	6a3a      	ldr	r2, [r7, #32]
  400718:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40071a:	69fb      	ldr	r3, [r7, #28]
  40071c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <ioport_set_port_mode+0x9e>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400724:	697b      	ldr	r3, [r7, #20]
  400726:	6a3a      	ldr	r2, [r7, #32]
  400728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40072c:	e003      	b.n	400736 <ioport_set_port_mode+0xa6>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40072e:	697b      	ldr	r3, [r7, #20]
  400730:	6a3a      	ldr	r2, [r7, #32]
  400732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400736:	69fb      	ldr	r3, [r7, #28]
  400738:	f003 0301 	and.w	r3, r3, #1
  40073c:	2b00      	cmp	r3, #0
  40073e:	d006      	beq.n	40074e <ioport_set_port_mode+0xbe>
		base->PIO_ABCDSR[0] |= mask;
  400740:	697b      	ldr	r3, [r7, #20]
  400742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400744:	6a3b      	ldr	r3, [r7, #32]
  400746:	431a      	orrs	r2, r3
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	671a      	str	r2, [r3, #112]	; 0x70
  40074c:	e006      	b.n	40075c <ioport_set_port_mode+0xcc>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40074e:	697b      	ldr	r3, [r7, #20]
  400750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400752:	6a3b      	ldr	r3, [r7, #32]
  400754:	43db      	mvns	r3, r3
  400756:	401a      	ands	r2, r3
  400758:	697b      	ldr	r3, [r7, #20]
  40075a:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	f003 0302 	and.w	r3, r3, #2
  400762:	2b00      	cmp	r3, #0
  400764:	d006      	beq.n	400774 <ioport_set_port_mode+0xe4>
		base->PIO_ABCDSR[1] |= mask;
  400766:	697b      	ldr	r3, [r7, #20]
  400768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40076a:	6a3b      	ldr	r3, [r7, #32]
  40076c:	431a      	orrs	r2, r3
  40076e:	697b      	ldr	r3, [r7, #20]
  400770:	675a      	str	r2, [r3, #116]	; 0x74
  400772:	e006      	b.n	400782 <ioport_set_port_mode+0xf2>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400774:	697b      	ldr	r3, [r7, #20]
  400776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400778:	6a3b      	ldr	r3, [r7, #32]
  40077a:	43db      	mvns	r3, r3
  40077c:	401a      	ands	r2, r3
  40077e:	697b      	ldr	r3, [r7, #20]
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_port_mode(port, mask, mode);
}
  400782:	372c      	adds	r7, #44	; 0x2c
  400784:	46bd      	mov	sp, r7
  400786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40078a:	4770      	bx	lr
  40078c:	00200707 	.word	0x00200707

00400790 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400790:	b480      	push	{r7}
  400792:	b08d      	sub	sp, #52	; 0x34
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	6039      	str	r1, [r7, #0]
  40079a:	687b      	ldr	r3, [r7, #4]
  40079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40079e:	683b      	ldr	r3, [r7, #0]
  4007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  4007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007a4:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a8:	095a      	lsrs	r2, r3, #5
  4007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007ac:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4007ae:	6a3b      	ldr	r3, [r7, #32]
  4007b0:	f003 031f 	and.w	r3, r3, #31
  4007b4:	2101      	movs	r1, #1
  4007b6:	fa01 f303 	lsl.w	r3, r1, r3
  4007ba:	61fa      	str	r2, [r7, #28]
  4007bc:	61bb      	str	r3, [r7, #24]
  4007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4007c0:	617b      	str	r3, [r7, #20]
  4007c2:	69fb      	ldr	r3, [r7, #28]
  4007c4:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007c6:	693a      	ldr	r2, [r7, #16]
  4007c8:	4b37      	ldr	r3, [pc, #220]	; (4008a8 <ioport_set_pin_mode+0x118>)
  4007ca:	4413      	add	r3, r2
  4007cc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4007ce:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	f003 0308 	and.w	r3, r3, #8
  4007d6:	2b00      	cmp	r3, #0
  4007d8:	d003      	beq.n	4007e2 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	69ba      	ldr	r2, [r7, #24]
  4007de:	665a      	str	r2, [r3, #100]	; 0x64
  4007e0:	e002      	b.n	4007e8 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4007e2:	68fb      	ldr	r3, [r7, #12]
  4007e4:	69ba      	ldr	r2, [r7, #24]
  4007e6:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4007e8:	697b      	ldr	r3, [r7, #20]
  4007ea:	f003 0310 	and.w	r3, r3, #16
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	d004      	beq.n	4007fc <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4007f2:	68fb      	ldr	r3, [r7, #12]
  4007f4:	69ba      	ldr	r2, [r7, #24]
  4007f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4007fa:	e003      	b.n	400804 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	69ba      	ldr	r2, [r7, #24]
  400800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400804:	697b      	ldr	r3, [r7, #20]
  400806:	f003 0320 	and.w	r3, r3, #32
  40080a:	2b00      	cmp	r3, #0
  40080c:	d003      	beq.n	400816 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	69ba      	ldr	r2, [r7, #24]
  400812:	651a      	str	r2, [r3, #80]	; 0x50
  400814:	e002      	b.n	40081c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	69ba      	ldr	r2, [r7, #24]
  40081a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40081c:	697b      	ldr	r3, [r7, #20]
  40081e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400822:	2b00      	cmp	r3, #0
  400824:	d003      	beq.n	40082e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	69ba      	ldr	r2, [r7, #24]
  40082a:	621a      	str	r2, [r3, #32]
  40082c:	e002      	b.n	400834 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	69ba      	ldr	r2, [r7, #24]
  400832:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400834:	697b      	ldr	r3, [r7, #20]
  400836:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40083a:	2b00      	cmp	r3, #0
  40083c:	d004      	beq.n	400848 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	69ba      	ldr	r2, [r7, #24]
  400842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400846:	e003      	b.n	400850 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	69ba      	ldr	r2, [r7, #24]
  40084c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400850:	697b      	ldr	r3, [r7, #20]
  400852:	f003 0301 	and.w	r3, r3, #1
  400856:	2b00      	cmp	r3, #0
  400858:	d006      	beq.n	400868 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	69bb      	ldr	r3, [r7, #24]
  400860:	431a      	orrs	r2, r3
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	671a      	str	r2, [r3, #112]	; 0x70
  400866:	e006      	b.n	400876 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40086c:	69bb      	ldr	r3, [r7, #24]
  40086e:	43db      	mvns	r3, r3
  400870:	401a      	ands	r2, r3
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400876:	697b      	ldr	r3, [r7, #20]
  400878:	f003 0302 	and.w	r3, r3, #2
  40087c:	2b00      	cmp	r3, #0
  40087e:	d006      	beq.n	40088e <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400884:	69bb      	ldr	r3, [r7, #24]
  400886:	431a      	orrs	r2, r3
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	675a      	str	r2, [r3, #116]	; 0x74
  40088c:	e006      	b.n	40089c <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400892:	69bb      	ldr	r3, [r7, #24]
  400894:	43db      	mvns	r3, r3
  400896:	401a      	ands	r2, r3
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  40089c:	3734      	adds	r7, #52	; 0x34
  40089e:	46bd      	mov	sp, r7
  4008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	00200707 	.word	0x00200707

004008ac <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4008ac:	b480      	push	{r7}
  4008ae:	b08d      	sub	sp, #52	; 0x34
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
  4008b4:	460b      	mov	r3, r1
  4008b6:	70fb      	strb	r3, [r7, #3]
  4008b8:	687b      	ldr	r3, [r7, #4]
  4008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008bc:	78fb      	ldrb	r3, [r7, #3]
  4008be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008c4:	627b      	str	r3, [r7, #36]	; 0x24
  4008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008c8:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4008ca:	6a3b      	ldr	r3, [r7, #32]
  4008cc:	095b      	lsrs	r3, r3, #5
  4008ce:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008d0:	69fa      	ldr	r2, [r7, #28]
  4008d2:	4b17      	ldr	r3, [pc, #92]	; (400930 <ioport_set_pin_dir+0x84>)
  4008d4:	4413      	add	r3, r2
  4008d6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4008d8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4008da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008de:	2b01      	cmp	r3, #1
  4008e0:	d109      	bne.n	4008f6 <ioport_set_pin_dir+0x4a>
  4008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008e4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4008e6:	697b      	ldr	r3, [r7, #20]
  4008e8:	f003 031f 	and.w	r3, r3, #31
  4008ec:	2201      	movs	r2, #1
  4008ee:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008f0:	69bb      	ldr	r3, [r7, #24]
  4008f2:	611a      	str	r2, [r3, #16]
  4008f4:	e00c      	b.n	400910 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4008f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d108      	bne.n	400910 <ioport_set_pin_dir+0x64>
  4008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400900:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400902:	693b      	ldr	r3, [r7, #16]
  400904:	f003 031f 	and.w	r3, r3, #31
  400908:	2201      	movs	r2, #1
  40090a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40090c:	69bb      	ldr	r3, [r7, #24]
  40090e:	615a      	str	r2, [r3, #20]
  400910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400912:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400914:	68fb      	ldr	r3, [r7, #12]
  400916:	f003 031f 	and.w	r3, r3, #31
  40091a:	2201      	movs	r2, #1
  40091c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	69bb      	ldr	r3, [r7, #24]
  400920:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400924:	3734      	adds	r7, #52	; 0x34
  400926:	46bd      	mov	sp, r7
  400928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	00200707 	.word	0x00200707

00400934 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400934:	b480      	push	{r7}
  400936:	b08b      	sub	sp, #44	; 0x2c
  400938:	af00      	add	r7, sp, #0
  40093a:	6078      	str	r0, [r7, #4]
  40093c:	460b      	mov	r3, r1
  40093e:	70fb      	strb	r3, [r7, #3]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	627b      	str	r3, [r7, #36]	; 0x24
  400944:	78fb      	ldrb	r3, [r7, #3]
  400946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40094c:	61fb      	str	r3, [r7, #28]
  40094e:	69fb      	ldr	r3, [r7, #28]
  400950:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	095b      	lsrs	r3, r3, #5
  400956:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400958:	697a      	ldr	r2, [r7, #20]
  40095a:	4b10      	ldr	r3, [pc, #64]	; (40099c <ioport_set_pin_level+0x68>)
  40095c:	4413      	add	r3, r2
  40095e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400960:	613b      	str	r3, [r7, #16]

	if (level) {
  400962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400966:	2b00      	cmp	r3, #0
  400968:	d009      	beq.n	40097e <ioport_set_pin_level+0x4a>
  40096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40096c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40096e:	68fb      	ldr	r3, [r7, #12]
  400970:	f003 031f 	and.w	r3, r3, #31
  400974:	2201      	movs	r2, #1
  400976:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400978:	693b      	ldr	r3, [r7, #16]
  40097a:	631a      	str	r2, [r3, #48]	; 0x30
  40097c:	e008      	b.n	400990 <ioport_set_pin_level+0x5c>
  40097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400980:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400982:	68bb      	ldr	r3, [r7, #8]
  400984:	f003 031f 	and.w	r3, r3, #31
  400988:	2201      	movs	r2, #1
  40098a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40098c:	693b      	ldr	r3, [r7, #16]
  40098e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  400990:	372c      	adds	r7, #44	; 0x2c
  400992:	46bd      	mov	sp, r7
  400994:	f85d 7b04 	ldr.w	r7, [sp], #4
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	00200707 	.word	0x00200707

004009a0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4009a0:	b480      	push	{r7}
  4009a2:	b08d      	sub	sp, #52	; 0x34
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	6078      	str	r0, [r7, #4]
  4009a8:	460b      	mov	r3, r1
  4009aa:	70fb      	strb	r3, [r7, #3]
  4009ac:	687b      	ldr	r3, [r7, #4]
  4009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  4009b0:	78fb      	ldrb	r3, [r7, #3]
  4009b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009b8:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4009bc:	095a      	lsrs	r2, r3, #5
  4009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4009c0:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4009c2:	6a3b      	ldr	r3, [r7, #32]
  4009c4:	f003 031f 	and.w	r3, r3, #31
  4009c8:	2101      	movs	r1, #1
  4009ca:	fa01 f303 	lsl.w	r3, r1, r3
  4009ce:	61fa      	str	r2, [r7, #28]
  4009d0:	61bb      	str	r3, [r7, #24]
  4009d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4009d6:	75fb      	strb	r3, [r7, #23]
  4009d8:	69fb      	ldr	r3, [r7, #28]
  4009da:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4009dc:	693a      	ldr	r2, [r7, #16]
  4009de:	4b22      	ldr	r3, [pc, #136]	; (400a68 <ioport_set_pin_sense_mode+0xc8>)
  4009e0:	4413      	add	r3, r2
  4009e2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4009e4:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4009e6:	7dfb      	ldrb	r3, [r7, #23]
  4009e8:	3b01      	subs	r3, #1
  4009ea:	2b03      	cmp	r3, #3
  4009ec:	d82e      	bhi.n	400a4c <ioport_set_pin_sense_mode+0xac>
  4009ee:	a201      	add	r2, pc, #4	; (adr r2, 4009f4 <ioport_set_pin_sense_mode+0x54>)
  4009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009f4:	00400a29 	.word	0x00400a29
  4009f8:	00400a3b 	.word	0x00400a3b
  4009fc:	00400a05 	.word	0x00400a05
  400a00:	00400a17 	.word	0x00400a17
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	69ba      	ldr	r2, [r7, #24]
  400a08:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	69ba      	ldr	r2, [r7, #24]
  400a10:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a14:	e01f      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	69ba      	ldr	r2, [r7, #24]
  400a1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400a1e:	68fb      	ldr	r3, [r7, #12]
  400a20:	69ba      	ldr	r2, [r7, #24]
  400a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a26:	e016      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  400a28:	68fb      	ldr	r3, [r7, #12]
  400a2a:	69ba      	ldr	r2, [r7, #24]
  400a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	69ba      	ldr	r2, [r7, #24]
  400a34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400a38:	e00d      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400a3a:	68fb      	ldr	r3, [r7, #12]
  400a3c:	69ba      	ldr	r2, [r7, #24]
  400a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	69ba      	ldr	r2, [r7, #24]
  400a46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400a4a:	e004      	b.n	400a56 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	69ba      	ldr	r2, [r7, #24]
  400a50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  400a54:	e003      	b.n	400a5e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  400a56:	68fb      	ldr	r3, [r7, #12]
  400a58:	69ba      	ldr	r2, [r7, #24]
  400a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400a5e:	3734      	adds	r7, #52	; 0x34
  400a60:	46bd      	mov	sp, r7
  400a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a66:	4770      	bx	lr
  400a68:	00200707 	.word	0x00200707

00400a6c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a70:	4b3b      	ldr	r3, [pc, #236]	; (400b60 <board_init+0xf4>)
  400a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a76:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400a78:	4b3a      	ldr	r3, [pc, #232]	; (400b64 <board_init+0xf8>)
  400a7a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400a7c:	2050      	movs	r0, #80	; 0x50
  400a7e:	2101      	movs	r1, #1
  400a80:	4b39      	ldr	r3, [pc, #228]	; (400b68 <board_init+0xfc>)
  400a82:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400a84:	2050      	movs	r0, #80	; 0x50
  400a86:	2101      	movs	r1, #1
  400a88:	4b38      	ldr	r3, [pc, #224]	; (400b6c <board_init+0x100>)
  400a8a:	4798      	blx	r3
	
	ioport_set_pin_dir(ECLAVE_PSUPPLY_ONn, IOPORT_DIR_OUTPUT);
  400a8c:	2002      	movs	r0, #2
  400a8e:	2101      	movs	r1, #1
  400a90:	4b35      	ldr	r3, [pc, #212]	; (400b68 <board_init+0xfc>)
  400a92:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_HIGH);
  400a94:	2002      	movs	r0, #2
  400a96:	2101      	movs	r1, #1
  400a98:	4b34      	ldr	r3, [pc, #208]	; (400b6c <board_init+0x100>)
  400a9a:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_LED_OEn, IOPORT_DIR_OUTPUT);
  400a9c:	2001      	movs	r0, #1
  400a9e:	2101      	movs	r1, #1
  400aa0:	4b31      	ldr	r3, [pc, #196]	; (400b68 <board_init+0xfc>)
  400aa2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH);
  400aa4:	2001      	movs	r0, #1
  400aa6:	2101      	movs	r1, #1
  400aa8:	4b30      	ldr	r3, [pc, #192]	; (400b6c <board_init+0x100>)
  400aaa:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_MFP, IOPORT_DIR_OUTPUT);
  400aac:	2000      	movs	r0, #0
  400aae:	2101      	movs	r1, #1
  400ab0:	4b2d      	ldr	r3, [pc, #180]	; (400b68 <board_init+0xfc>)
  400ab2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_MFP, IOPORT_PIN_LEVEL_LOW);  //high=1x multiplier, low=4x multiplier 10apr15;
  400ab4:	2000      	movs	r0, #0
  400ab6:	2100      	movs	r1, #0
  400ab8:	4b2c      	ldr	r3, [pc, #176]	; (400b6c <board_init+0x100>)
  400aba:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_SOLENOID, IOPORT_DIR_OUTPUT);
  400abc:	2015      	movs	r0, #21
  400abe:	2101      	movs	r1, #1
  400ac0:	4b29      	ldr	r3, [pc, #164]	; (400b68 <board_init+0xfc>)
  400ac2:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  400ac4:	2015      	movs	r0, #21
  400ac6:	2100      	movs	r1, #0
  400ac8:	4b28      	ldr	r3, [pc, #160]	; (400b6c <board_init+0x100>)
  400aca:	4798      	blx	r3

	ioport_set_pin_dir(ECLAVE_DOORSW1, IOPORT_DIR_INPUT);
  400acc:	204d      	movs	r0, #77	; 0x4d
  400ace:	2100      	movs	r1, #0
  400ad0:	4b25      	ldr	r3, [pc, #148]	; (400b68 <board_init+0xfc>)
  400ad2:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_DOORSW2, IOPORT_DIR_INPUT);
  400ad4:	204e      	movs	r0, #78	; 0x4e
  400ad6:	2100      	movs	r1, #0
  400ad8:	4b23      	ldr	r3, [pc, #140]	; (400b68 <board_init+0xfc>)
  400ada:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400adc:	200b      	movs	r0, #11
  400ade:	2100      	movs	r1, #0
  400ae0:	4b21      	ldr	r3, [pc, #132]	; (400b68 <board_init+0xfc>)
  400ae2:	4798      	blx	r3
  400ae4:	200b      	movs	r0, #11
  400ae6:	2188      	movs	r1, #136	; 0x88
  400ae8:	4b21      	ldr	r3, [pc, #132]	; (400b70 <board_init+0x104>)
  400aea:	4798      	blx	r3
  400aec:	200b      	movs	r0, #11
  400aee:	2102      	movs	r1, #2
  400af0:	4b20      	ldr	r3, [pc, #128]	; (400b74 <board_init+0x108>)
  400af2:	4798      	blx	r3
//jsi 7feb16 following defines are from the DMA-UART example project for the SAM4E
#define PINS_UART0_PORT		IOPORT_PIOA
#define PINS_UART0			(PIO_PA9A_URXD0 | PIO_PA10A_UTXD0)
#define PINS_UART0_FLAGS	IOPORT_MODE_MUX_A

	ioport_set_port_peripheral_mode(PINS_UART0_PORT, PINS_UART0, PINS_UART0_FLAGS); //jsi 6feb16 was USART1
  400af4:	2000      	movs	r0, #0
  400af6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400afa:	2200      	movs	r2, #0
  400afc:	4b1e      	ldr	r3, [pc, #120]	; (400b78 <board_init+0x10c>)
  400afe:	4798      	blx	r3
  400b00:	2000      	movs	r0, #0
  400b02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400b06:	4b1d      	ldr	r3, [pc, #116]	; (400b7c <board_init+0x110>)
  400b08:	4798      	blx	r3

#endif

#define CONF_BOARD_TWIHS0 //jsi 7feb16
#ifdef CONF_BOARD_TWIHS0
	ioport_set_pin_peripheral_mode(TWIHS0_DATA_GPIO, TWIHS0_DATA_FLAGS);
  400b0a:	2003      	movs	r0, #3
  400b0c:	2100      	movs	r1, #0
  400b0e:	4b18      	ldr	r3, [pc, #96]	; (400b70 <board_init+0x104>)
  400b10:	4798      	blx	r3
  400b12:	2003      	movs	r0, #3
  400b14:	4b1a      	ldr	r3, [pc, #104]	; (400b80 <board_init+0x114>)
  400b16:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWIHS0_CLK_GPIO, TWIHS0_CLK_FLAGS);
  400b18:	2004      	movs	r0, #4
  400b1a:	2100      	movs	r1, #0
  400b1c:	4b14      	ldr	r3, [pc, #80]	; (400b70 <board_init+0x104>)
  400b1e:	4798      	blx	r3
  400b20:	2004      	movs	r0, #4
  400b22:	4b17      	ldr	r3, [pc, #92]	; (400b80 <board_init+0x114>)
  400b24:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(QSPI_QIO3_GPIO, QSPI_QIO3_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400b26:	200b      	movs	r0, #11
  400b28:	2101      	movs	r1, #1
  400b2a:	4b11      	ldr	r3, [pc, #68]	; (400b70 <board_init+0x104>)
  400b2c:	4798      	blx	r3
  400b2e:	200b      	movs	r0, #11
  400b30:	4b13      	ldr	r3, [pc, #76]	; (400b80 <board_init+0x114>)
  400b32:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	ioport_set_pin_peripheral_mode(USART0_RXD_GPIO, USART0_RXD_FLAGS);
  400b34:	2020      	movs	r0, #32
  400b36:	2102      	movs	r1, #2
  400b38:	4b0d      	ldr	r3, [pc, #52]	; (400b70 <board_init+0x104>)
  400b3a:	4798      	blx	r3
  400b3c:	2020      	movs	r0, #32
  400b3e:	4b10      	ldr	r3, [pc, #64]	; (400b80 <board_init+0x114>)
  400b40:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	ioport_set_pin_peripheral_mode(USART0_TXD_GPIO, USART0_TXD_FLAGS);
  400b42:	2021      	movs	r0, #33	; 0x21
  400b44:	2102      	movs	r1, #2
  400b46:	4b0a      	ldr	r3, [pc, #40]	; (400b70 <board_init+0x104>)
  400b48:	4798      	blx	r3
  400b4a:	2021      	movs	r0, #33	; 0x21
  400b4c:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <board_init+0x114>)
  400b4e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_USART0_CTS_IDX,PIN_USART0_CTS_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RTS
	/* Configure USART RTS pin */
	ioport_set_pin_peripheral_mode(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  400b50:	2023      	movs	r0, #35	; 0x23
  400b52:	2102      	movs	r1, #2
  400b54:	4b06      	ldr	r3, [pc, #24]	; (400b70 <board_init+0x104>)
  400b56:	4798      	blx	r3
  400b58:	2023      	movs	r0, #35	; 0x23
  400b5a:	4b09      	ldr	r3, [pc, #36]	; (400b80 <board_init+0x114>)
  400b5c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CONFIG_MPU_AT_INIT
	_setup_memory_region();
#endif
}
  400b5e:	bd80      	pop	{r7, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	004005ed 	.word	0x004005ed
  400b68:	004008ad 	.word	0x004008ad
  400b6c:	00400935 	.word	0x00400935
  400b70:	00400791 	.word	0x00400791
  400b74:	004009a1 	.word	0x004009a1
  400b78:	00400691 	.word	0x00400691
  400b7c:	0040065d 	.word	0x0040065d
  400b80:	00400615 	.word	0x00400615

00400b84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400b84:	b480      	push	{r7}
  400b86:	b083      	sub	sp, #12
  400b88:	af00      	add	r7, sp, #0
  400b8a:	4603      	mov	r3, r0
  400b8c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8e:	4908      	ldr	r1, [pc, #32]	; (400bb0 <NVIC_EnableIRQ+0x2c>)
  400b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b94:	095b      	lsrs	r3, r3, #5
  400b96:	79fa      	ldrb	r2, [r7, #7]
  400b98:	f002 021f 	and.w	r2, r2, #31
  400b9c:	2001      	movs	r0, #1
  400b9e:	fa00 f202 	lsl.w	r2, r0, r2
  400ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ba6:	370c      	adds	r7, #12
  400ba8:	46bd      	mov	sp, r7
  400baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bae:	4770      	bx	lr
  400bb0:	e000e100 	.word	0xe000e100

00400bb4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b083      	sub	sp, #12
  400bb8:	af00      	add	r7, sp, #0
  400bba:	4603      	mov	r3, r0
  400bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bbe:	4909      	ldr	r1, [pc, #36]	; (400be4 <NVIC_ClearPendingIRQ+0x30>)
  400bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bc4:	095b      	lsrs	r3, r3, #5
  400bc6:	79fa      	ldrb	r2, [r7, #7]
  400bc8:	f002 021f 	and.w	r2, r2, #31
  400bcc:	2001      	movs	r0, #1
  400bce:	fa00 f202 	lsl.w	r2, r0, r2
  400bd2:	3360      	adds	r3, #96	; 0x60
  400bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400bd8:	370c      	adds	r7, #12
  400bda:	46bd      	mov	sp, r7
  400bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	e000e100 	.word	0xe000e100

00400be8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	4603      	mov	r3, r0
  400bf0:	6039      	str	r1, [r7, #0]
  400bf2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400bf8:	2b00      	cmp	r3, #0
  400bfa:	da0b      	bge.n	400c14 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400bfc:	490d      	ldr	r1, [pc, #52]	; (400c34 <NVIC_SetPriority+0x4c>)
  400bfe:	79fb      	ldrb	r3, [r7, #7]
  400c00:	f003 030f 	and.w	r3, r3, #15
  400c04:	3b04      	subs	r3, #4
  400c06:	683a      	ldr	r2, [r7, #0]
  400c08:	b2d2      	uxtb	r2, r2
  400c0a:	0152      	lsls	r2, r2, #5
  400c0c:	b2d2      	uxtb	r2, r2
  400c0e:	440b      	add	r3, r1
  400c10:	761a      	strb	r2, [r3, #24]
  400c12:	e009      	b.n	400c28 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c14:	4908      	ldr	r1, [pc, #32]	; (400c38 <NVIC_SetPriority+0x50>)
  400c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400c1a:	683a      	ldr	r2, [r7, #0]
  400c1c:	b2d2      	uxtb	r2, r2
  400c1e:	0152      	lsls	r2, r2, #5
  400c20:	b2d2      	uxtb	r2, r2
  400c22:	440b      	add	r3, r1
  400c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400c28:	370c      	adds	r7, #12
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	e000ed00 	.word	0xe000ed00
  400c38:	e000e100 	.word	0xe000e100

00400c3c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400c3c:	b480      	push	{r7}
  400c3e:	b083      	sub	sp, #12
  400c40:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c42:	f3ef 8310 	mrs	r3, PRIMASK
  400c46:	603b      	str	r3, [r7, #0]
  return(result);
  400c48:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	bf0c      	ite	eq
  400c4e:	2301      	moveq	r3, #1
  400c50:	2300      	movne	r3, #0
  400c52:	b2db      	uxtb	r3, r3
  400c54:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c56:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400c5c:	4b04      	ldr	r3, [pc, #16]	; (400c70 <cpu_irq_save+0x34>)
  400c5e:	2200      	movs	r2, #0
  400c60:	701a      	strb	r2, [r3, #0]
	return flags;
  400c62:	687b      	ldr	r3, [r7, #4]
}
  400c64:	4618      	mov	r0, r3
  400c66:	370c      	adds	r7, #12
  400c68:	46bd      	mov	sp, r7
  400c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c6e:	4770      	bx	lr
  400c70:	20400000 	.word	0x20400000

00400c74 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	return (flags);
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	2b00      	cmp	r3, #0
  400c80:	bf14      	ite	ne
  400c82:	2301      	movne	r3, #1
  400c84:	2300      	moveq	r3, #0
  400c86:	b2db      	uxtb	r3, r3
}
  400c88:	4618      	mov	r0, r3
  400c8a:	370c      	adds	r7, #12
  400c8c:	46bd      	mov	sp, r7
  400c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c92:	4770      	bx	lr

00400c94 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400c94:	b580      	push	{r7, lr}
  400c96:	b082      	sub	sp, #8
  400c98:	af00      	add	r7, sp, #0
  400c9a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400c9c:	6878      	ldr	r0, [r7, #4]
  400c9e:	4b07      	ldr	r3, [pc, #28]	; (400cbc <cpu_irq_restore+0x28>)
  400ca0:	4798      	blx	r3
  400ca2:	4603      	mov	r3, r0
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d005      	beq.n	400cb4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <cpu_irq_restore+0x2c>)
  400caa:	2201      	movs	r2, #1
  400cac:	701a      	strb	r2, [r3, #0]
  400cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400cb2:	b662      	cpsie	i
}
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	00400c75 	.word	0x00400c75
  400cc0:	20400000 	.word	0x20400000

00400cc4 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  400cc4:	b480      	push	{r7}
  400cc6:	b083      	sub	sp, #12
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	460b      	mov	r3, r1
  400cce:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  400cd0:	370c      	adds	r7, #12
  400cd2:	46bd      	mov	sp, r7
  400cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop

00400cdc <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400cdc:	b480      	push	{r7}
  400cde:	b083      	sub	sp, #12
  400ce0:	af00      	add	r7, sp, #0
  400ce2:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400ce8:	4618      	mov	r0, r3
  400cea:	370c      	adds	r7, #12
  400cec:	46bd      	mov	sp, r7
  400cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cf2:	4770      	bx	lr

00400cf4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  400cf4:	b580      	push	{r7, lr}
  400cf6:	b084      	sub	sp, #16
  400cf8:	af00      	add	r7, sp, #0
  400cfa:	4603      	mov	r3, r0
  400cfc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400cfe:	79fb      	ldrb	r3, [r7, #7]
  400d00:	4a0a      	ldr	r2, [pc, #40]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d02:	5cd3      	ldrb	r3, [r2, r3]
  400d04:	2bff      	cmp	r3, #255	; 0xff
  400d06:	d100      	bne.n	400d0a <sleepmgr_lock_mode+0x16>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
  400d08:	e7fe      	b.n	400d08 <sleepmgr_lock_mode+0x14>
	}

	// Enter a critical section
	flags = cpu_irq_save();
  400d0a:	4b09      	ldr	r3, [pc, #36]	; (400d30 <sleepmgr_lock_mode+0x3c>)
  400d0c:	4798      	blx	r3
  400d0e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  400d10:	79fb      	ldrb	r3, [r7, #7]
  400d12:	4a06      	ldr	r2, [pc, #24]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d14:	5cd2      	ldrb	r2, [r2, r3]
  400d16:	3201      	adds	r2, #1
  400d18:	b2d1      	uxtb	r1, r2
  400d1a:	4a04      	ldr	r2, [pc, #16]	; (400d2c <sleepmgr_lock_mode+0x38>)
  400d1c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  400d1e:	68f8      	ldr	r0, [r7, #12]
  400d20:	4b04      	ldr	r3, [pc, #16]	; (400d34 <sleepmgr_lock_mode+0x40>)
  400d22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  400d24:	3710      	adds	r7, #16
  400d26:	46bd      	mov	sp, r7
  400d28:	bd80      	pop	{r7, pc}
  400d2a:	bf00      	nop
  400d2c:	20400a08 	.word	0x20400a08
  400d30:	00400c3d 	.word	0x00400c3d
  400d34:	00400c95 	.word	0x00400c95

00400d38 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400d38:	b480      	push	{r7}
  400d3a:	b083      	sub	sp, #12
  400d3c:	af00      	add	r7, sp, #0
  400d3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d40:	687b      	ldr	r3, [r7, #4]
  400d42:	2b07      	cmp	r3, #7
  400d44:	d825      	bhi.n	400d92 <osc_get_rate+0x5a>
  400d46:	a201      	add	r2, pc, #4	; (adr r2, 400d4c <osc_get_rate+0x14>)
  400d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d4c:	00400d6d 	.word	0x00400d6d
  400d50:	00400d73 	.word	0x00400d73
  400d54:	00400d79 	.word	0x00400d79
  400d58:	00400d7f 	.word	0x00400d7f
  400d5c:	00400d83 	.word	0x00400d83
  400d60:	00400d87 	.word	0x00400d87
  400d64:	00400d8b 	.word	0x00400d8b
  400d68:	00400d8f 	.word	0x00400d8f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400d70:	e010      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d76:	e00d      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d7c:	e00a      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400d7e:	4b08      	ldr	r3, [pc, #32]	; (400da0 <osc_get_rate+0x68>)
  400d80:	e008      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400d82:	4b08      	ldr	r3, [pc, #32]	; (400da4 <osc_get_rate+0x6c>)
  400d84:	e006      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400d86:	4b08      	ldr	r3, [pc, #32]	; (400da8 <osc_get_rate+0x70>)
  400d88:	e004      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400d8a:	4b08      	ldr	r3, [pc, #32]	; (400dac <osc_get_rate+0x74>)
  400d8c:	e002      	b.n	400d94 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <osc_get_rate+0x70>)
  400d90:	e000      	b.n	400d94 <osc_get_rate+0x5c>
	}

	return 0;
  400d92:	2300      	movs	r3, #0
}
  400d94:	4618      	mov	r0, r3
  400d96:	370c      	adds	r7, #12
  400d98:	46bd      	mov	sp, r7
  400d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d9e:	4770      	bx	lr
  400da0:	003d0900 	.word	0x003d0900
  400da4:	007a1200 	.word	0x007a1200
  400da8:	00b71b00 	.word	0x00b71b00
  400dac:	00f42400 	.word	0x00f42400

00400db0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400db4:	2006      	movs	r0, #6
  400db6:	4b05      	ldr	r3, [pc, #20]	; (400dcc <sysclk_get_main_hz+0x1c>)
  400db8:	4798      	blx	r3
  400dba:	4602      	mov	r2, r0
  400dbc:	4613      	mov	r3, r2
  400dbe:	009b      	lsls	r3, r3, #2
  400dc0:	4413      	add	r3, r2
  400dc2:	009a      	lsls	r2, r3, #2
  400dc4:	4413      	add	r3, r2
  400dc6:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400dc8:	4618      	mov	r0, r3
  400dca:	bd80      	pop	{r7, pc}
  400dcc:	00400d39 	.word	0x00400d39

00400dd0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <sysclk_get_cpu_hz+0x10>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400dda:	4618      	mov	r0, r3
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400db1 	.word	0x00400db1

00400de4 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400de4:	b480      	push	{r7}
  400de6:	b083      	sub	sp, #12
  400de8:	af00      	add	r7, sp, #0
  400dea:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400dec:	687b      	ldr	r3, [r7, #4]
  400dee:	4a09      	ldr	r2, [pc, #36]	; (400e14 <afec_find_inst_num+0x30>)
  400df0:	4293      	cmp	r3, r2
  400df2:	d101      	bne.n	400df8 <afec_find_inst_num+0x14>
		return 1;
  400df4:	2301      	movs	r3, #1
  400df6:	e006      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  400df8:	687b      	ldr	r3, [r7, #4]
  400dfa:	4a07      	ldr	r2, [pc, #28]	; (400e18 <afec_find_inst_num+0x34>)
  400dfc:	4293      	cmp	r3, r2
  400dfe:	d101      	bne.n	400e04 <afec_find_inst_num+0x20>
		return 0;
  400e00:	2300      	movs	r3, #0
  400e02:	e000      	b.n	400e06 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400e04:	2300      	movs	r3, #0
}
  400e06:	4618      	mov	r0, r3
  400e08:	370c      	adds	r7, #12
  400e0a:	46bd      	mov	sp, r7
  400e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	40064000 	.word	0x40064000
  400e18:	4003c000 	.word	0x4003c000

00400e1c <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  400e1c:	b480      	push	{r7}
  400e1e:	b083      	sub	sp, #12
  400e20:	af00      	add	r7, sp, #0
  400e22:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	4a09      	ldr	r2, [pc, #36]	; (400e4c <afec_find_pid+0x30>)
  400e28:	4293      	cmp	r3, r2
  400e2a:	d101      	bne.n	400e30 <afec_find_pid+0x14>
		return ID_AFEC1;
  400e2c:	2328      	movs	r3, #40	; 0x28
  400e2e:	e006      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	4a07      	ldr	r2, [pc, #28]	; (400e50 <afec_find_pid+0x34>)
  400e34:	4293      	cmp	r3, r2
  400e36:	d101      	bne.n	400e3c <afec_find_pid+0x20>
		return ID_AFEC0;
  400e38:	231d      	movs	r3, #29
  400e3a:	e000      	b.n	400e3e <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  400e3c:	231d      	movs	r3, #29
}
  400e3e:	4618      	mov	r0, r3
  400e40:	370c      	adds	r7, #12
  400e42:	46bd      	mov	sp, r7
  400e44:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	40064000 	.word	0x40064000
  400e50:	4003c000 	.word	0x4003c000

00400e54 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  400e54:	b480      	push	{r7}
  400e56:	b085      	sub	sp, #20
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  400e5e:	2300      	movs	r3, #0
  400e60:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e62:	683b      	ldr	r3, [r7, #0]
  400e64:	7cdb      	ldrb	r3, [r3, #19]
  400e66:	2b00      	cmp	r3, #0
  400e68:	d002      	beq.n	400e70 <afec_set_config+0x1c>
  400e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e6e:	e000      	b.n	400e72 <afec_set_config+0x1e>
  400e70:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400e72:	683b      	ldr	r3, [r7, #0]
  400e74:	6859      	ldr	r1, [r3, #4]
  400e76:	683b      	ldr	r3, [r7, #0]
  400e78:	689b      	ldr	r3, [r3, #8]
  400e7a:	fbb1 f3f3 	udiv	r3, r1, r3
  400e7e:	3b01      	subs	r3, #1
  400e80:	021b      	lsls	r3, r3, #8
  400e82:	b29b      	uxth	r3, r3
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400e84:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e86:	683b      	ldr	r3, [r7, #0]
  400e88:	7c1b      	ldrb	r3, [r3, #16]
  400e8a:	061b      	lsls	r3, r3, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  400e8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  400e90:	431a      	orrs	r2, r3
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400e92:	683b      	ldr	r3, [r7, #0]
  400e94:	7c5b      	ldrb	r3, [r3, #17]
  400e96:	071b      	lsls	r3, r3, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  400e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400e9c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);
  400e9e:	683b      	ldr	r3, [r7, #0]
  400ea0:	68db      	ldr	r3, [r3, #12]
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  400ea2:	4313      	orrs	r3, r2
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400ea8:	60fb      	str	r3, [r7, #12]
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  400eaa:	687b      	ldr	r3, [r7, #4]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400eb0:	683b      	ldr	r3, [r7, #0]
  400eb2:	7d1b      	ldrb	r3, [r3, #20]
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d002      	beq.n	400ebe <afec_set_config+0x6a>
  400eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ebc:	e000      	b.n	400ec0 <afec_set_config+0x6c>
  400ebe:	2200      	movs	r2, #0
			(config->resolution) |
  400ec0:	683b      	ldr	r3, [r7, #0]
  400ec2:	681b      	ldr	r3, [r3, #0]
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ec4:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  400ec6:	683b      	ldr	r3, [r7, #0]
  400ec8:	7d5b      	ldrb	r3, [r3, #21]
  400eca:	2b00      	cmp	r3, #0
  400ecc:	d002      	beq.n	400ed4 <afec_set_config+0x80>
  400ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400ed2:	e000      	b.n	400ed6 <afec_set_config+0x82>
  400ed4:	2300      	movs	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  400ed6:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	609a      	str	r2, [r3, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400edc:	683b      	ldr	r3, [r7, #0]
  400ede:	7d9b      	ldrb	r3, [r3, #22]
  400ee0:	021b      	lsls	r3, r3, #8
  400ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400ee6:	f043 020c 	orr.w	r2, r3, #12
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  400ef0:	3714      	adds	r7, #20
  400ef2:	46bd      	mov	sp, r7
  400ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop

00400efc <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b086      	sub	sp, #24
  400f00:	af00      	add	r7, sp, #0
  400f02:	60f8      	str	r0, [r7, #12]
  400f04:	460b      	mov	r3, r1
  400f06:	607a      	str	r2, [r7, #4]
  400f08:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  400f0a:	897b      	ldrh	r3, [r7, #10]
  400f0c:	68f8      	ldr	r0, [r7, #12]
  400f0e:	4619      	mov	r1, r3
  400f10:	4b1d      	ldr	r3, [pc, #116]	; (400f88 <afec_ch_set_config+0x8c>)
  400f12:	4798      	blx	r3
	uint32_t reg = 0;
  400f14:	2300      	movs	r3, #0
  400f16:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  400f1c:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  400f1e:	897b      	ldrh	r3, [r7, #10]
  400f20:	2201      	movs	r2, #1
  400f22:	fa02 f303 	lsl.w	r3, r2, r3
  400f26:	43db      	mvns	r3, r3
  400f28:	697a      	ldr	r2, [r7, #20]
  400f2a:	4013      	ands	r3, r2
  400f2c:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	781b      	ldrb	r3, [r3, #0]
  400f32:	2b00      	cmp	r3, #0
  400f34:	d004      	beq.n	400f40 <afec_ch_set_config+0x44>
  400f36:	897b      	ldrh	r3, [r7, #10]
  400f38:	2201      	movs	r2, #1
  400f3a:	fa02 f303 	lsl.w	r3, r2, r3
  400f3e:	e000      	b.n	400f42 <afec_ch_set_config+0x46>
  400f40:	2300      	movs	r3, #0
  400f42:	697a      	ldr	r2, [r7, #20]
  400f44:	4313      	orrs	r3, r2
  400f46:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	697a      	ldr	r2, [r7, #20]
  400f4c:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  400f4e:	68fb      	ldr	r3, [r7, #12]
  400f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  400f52:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  400f54:	897b      	ldrh	r3, [r7, #10]
  400f56:	005b      	lsls	r3, r3, #1
  400f58:	2203      	movs	r2, #3
  400f5a:	fa02 f303 	lsl.w	r3, r2, r3
  400f5e:	43db      	mvns	r3, r3
  400f60:	697a      	ldr	r2, [r7, #20]
  400f62:	4013      	ands	r3, r2
  400f64:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  400f66:	687b      	ldr	r3, [r7, #4]
  400f68:	785b      	ldrb	r3, [r3, #1]
  400f6a:	461a      	mov	r2, r3
  400f6c:	897b      	ldrh	r3, [r7, #10]
  400f6e:	005b      	lsls	r3, r3, #1
  400f70:	fa02 f303 	lsl.w	r3, r2, r3
  400f74:	461a      	mov	r2, r3
  400f76:	697b      	ldr	r3, [r7, #20]
  400f78:	4313      	orrs	r3, r2
  400f7a:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  400f7c:	68fb      	ldr	r3, [r7, #12]
  400f7e:	697a      	ldr	r2, [r7, #20]
  400f80:	655a      	str	r2, [r3, #84]	; 0x54
}
  400f82:	3718      	adds	r7, #24
  400f84:	46bd      	mov	sp, r7
  400f86:	bd80      	pop	{r7, pc}
  400f88:	00400cc5 	.word	0x00400cc5

00400f8c <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	b082      	sub	sp, #8
  400f90:	af00      	add	r7, sp, #0
  400f92:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	2200      	movs	r2, #0
  400f98:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400f9a:	4b12      	ldr	r3, [pc, #72]	; (400fe4 <afec_get_config_defaults+0x58>)
  400f9c:	4798      	blx	r3
  400f9e:	4602      	mov	r2, r0
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	4a10      	ldr	r2, [pc, #64]	; (400fe8 <afec_get_config_defaults+0x5c>)
  400fa8:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400faa:	687b      	ldr	r3, [r7, #4]
  400fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400fb0:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400fb2:	687b      	ldr	r3, [r7, #4]
  400fb4:	2202      	movs	r2, #2
  400fb6:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2201      	movs	r2, #1
  400fbc:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	2201      	movs	r2, #1
  400fc2:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2200      	movs	r2, #0
  400fc8:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  400fca:	687b      	ldr	r3, [r7, #4]
  400fcc:	2201      	movs	r2, #1
  400fce:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	2201      	movs	r2, #1
  400fd4:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  400fd6:	687b      	ldr	r3, [r7, #4]
  400fd8:	2201      	movs	r2, #1
  400fda:	759a      	strb	r2, [r3, #22]
}
  400fdc:	3708      	adds	r7, #8
  400fde:	46bd      	mov	sp, r7
  400fe0:	bd80      	pop	{r7, pc}
  400fe2:	bf00      	nop
  400fe4:	00400dd1 	.word	0x00400dd1
  400fe8:	005b8d80 	.word	0x005b8d80

00400fec <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  400fec:	b480      	push	{r7}
  400fee:	b083      	sub	sp, #12
  400ff0:	af00      	add	r7, sp, #0
  400ff2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	2200      	movs	r2, #0
  400ff8:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	2201      	movs	r2, #1
  400ffe:	705a      	strb	r2, [r3, #1]

}
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr
  40100a:	bf00      	nop

0040100c <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40100c:	b580      	push	{r7, lr}
  40100e:	b084      	sub	sp, #16
  401010:	af00      	add	r7, sp, #0
  401012:	6078      	str	r0, [r7, #4]
  401014:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401016:	6878      	ldr	r0, [r7, #4]
  401018:	4b17      	ldr	r3, [pc, #92]	; (401078 <afec_init+0x6c>)
  40101a:	4798      	blx	r3
  40101c:	4603      	mov	r3, r0
  40101e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401022:	2b00      	cmp	r3, #0
  401024:	d001      	beq.n	40102a <afec_init+0x1e>
		return STATUS_ERR_BUSY;
  401026:	2319      	movs	r3, #25
  401028:	e021      	b.n	40106e <afec_init+0x62>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40102a:	687b      	ldr	r3, [r7, #4]
  40102c:	2201      	movs	r2, #1
  40102e:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  401030:	6878      	ldr	r0, [r7, #4]
  401032:	6839      	ldr	r1, [r7, #0]
  401034:	4b11      	ldr	r3, [pc, #68]	; (40107c <afec_init+0x70>)
  401036:	4798      	blx	r3

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401038:	2300      	movs	r3, #0
  40103a:	60fb      	str	r3, [r7, #12]
  40103c:	e013      	b.n	401066 <afec_init+0x5a>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  40103e:	2300      	movs	r3, #0
  401040:	60bb      	str	r3, [r7, #8]
  401042:	e00a      	b.n	40105a <afec_init+0x4e>
			afec_callback_pointer[i][j] = 0;
  401044:	490e      	ldr	r1, [pc, #56]	; (401080 <afec_init+0x74>)
  401046:	68fb      	ldr	r3, [r7, #12]
  401048:	011a      	lsls	r2, r3, #4
  40104a:	68bb      	ldr	r3, [r7, #8]
  40104c:	4413      	add	r3, r2
  40104e:	2200      	movs	r2, #0
  401050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
  401054:	68bb      	ldr	r3, [r7, #8]
  401056:	3301      	adds	r3, #1
  401058:	60bb      	str	r3, [r7, #8]
  40105a:	68bb      	ldr	r3, [r7, #8]
  40105c:	2b0f      	cmp	r3, #15
  40105e:	d9f1      	bls.n	401044 <afec_init+0x38>
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i, j;
	for (i = 0; i < NUM_OF_AFEC; i++) {
  401060:	68fb      	ldr	r3, [r7, #12]
  401062:	3301      	adds	r3, #1
  401064:	60fb      	str	r3, [r7, #12]
  401066:	68fb      	ldr	r3, [r7, #12]
  401068:	2b01      	cmp	r3, #1
  40106a:	d9e8      	bls.n	40103e <afec_init+0x32>
		for (j = 0; j < _AFEC_NUM_OF_INTERRUPT_SOURCE; j++) {
			afec_callback_pointer[i][j] = 0;
		}
	}

	return STATUS_OK;
  40106c:	2300      	movs	r3, #0
  40106e:	b25b      	sxtb	r3, r3
}
  401070:	4618      	mov	r0, r3
  401072:	3710      	adds	r7, #16
  401074:	46bd      	mov	sp, r7
  401076:	bd80      	pop	{r7, pc}
  401078:	00400cdd 	.word	0x00400cdd
  40107c:	00400e55 	.word	0x00400e55
  401080:	20400a1c 	.word	0x20400a1c

00401084 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  401084:	b580      	push	{r7, lr}
  401086:	b086      	sub	sp, #24
  401088:	af00      	add	r7, sp, #0
  40108a:	60f8      	str	r0, [r7, #12]
  40108c:	60b9      	str	r1, [r7, #8]
  40108e:	607a      	str	r2, [r7, #4]
  401090:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b17      	ldr	r3, [pc, #92]	; (4010f4 <afec_set_callback+0x70>)
  401096:	4798      	blx	r3
  401098:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  40109a:	4917      	ldr	r1, [pc, #92]	; (4010f8 <afec_set_callback+0x74>)
  40109c:	697b      	ldr	r3, [r7, #20]
  40109e:	011a      	lsls	r2, r3, #4
  4010a0:	68bb      	ldr	r3, [r7, #8]
  4010a2:	4413      	add	r3, r2
  4010a4:	687a      	ldr	r2, [r7, #4]
  4010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  4010aa:	697b      	ldr	r3, [r7, #20]
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d10b      	bne.n	4010c8 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  4010b0:	201d      	movs	r0, #29
  4010b2:	4b12      	ldr	r3, [pc, #72]	; (4010fc <afec_set_callback+0x78>)
  4010b4:	4798      	blx	r3
  4010b6:	78fb      	ldrb	r3, [r7, #3]
  4010b8:	201d      	movs	r0, #29
  4010ba:	4619      	mov	r1, r3
  4010bc:	4b10      	ldr	r3, [pc, #64]	; (401100 <afec_set_callback+0x7c>)
  4010be:	4798      	blx	r3
  4010c0:	201d      	movs	r0, #29
  4010c2:	4b10      	ldr	r3, [pc, #64]	; (401104 <afec_set_callback+0x80>)
  4010c4:	4798      	blx	r3
  4010c6:	e00d      	b.n	4010e4 <afec_set_callback+0x60>
	} else if (i == 1) {
  4010c8:	697b      	ldr	r3, [r7, #20]
  4010ca:	2b01      	cmp	r3, #1
  4010cc:	d10a      	bne.n	4010e4 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  4010ce:	2028      	movs	r0, #40	; 0x28
  4010d0:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <afec_set_callback+0x78>)
  4010d2:	4798      	blx	r3
  4010d4:	78fb      	ldrb	r3, [r7, #3]
  4010d6:	2028      	movs	r0, #40	; 0x28
  4010d8:	4619      	mov	r1, r3
  4010da:	4b09      	ldr	r3, [pc, #36]	; (401100 <afec_set_callback+0x7c>)
  4010dc:	4798      	blx	r3
  4010de:	2028      	movs	r0, #40	; 0x28
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <afec_set_callback+0x80>)
  4010e2:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4010e4:	68f8      	ldr	r0, [r7, #12]
  4010e6:	68b9      	ldr	r1, [r7, #8]
  4010e8:	4b07      	ldr	r3, [pc, #28]	; (401108 <afec_set_callback+0x84>)
  4010ea:	4798      	blx	r3
}
  4010ec:	3718      	adds	r7, #24
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bd80      	pop	{r7, pc}
  4010f2:	bf00      	nop
  4010f4:	00400de5 	.word	0x00400de5
  4010f8:	20400a1c 	.word	0x20400a1c
  4010fc:	00400bb5 	.word	0x00400bb5
  401100:	00400be9 	.word	0x00400be9
  401104:	00400b85 	.word	0x00400b85
  401108:	0040110d 	.word	0x0040110d

0040110c <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
  401114:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  401116:	683b      	ldr	r3, [r7, #0]
  401118:	4a19      	ldr	r2, [pc, #100]	; (401180 <afec_enable_interrupt+0x74>)
  40111a:	4293      	cmp	r3, r2
  40111c:	d103      	bne.n	401126 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40111e:	687b      	ldr	r3, [r7, #4]
  401120:	4a17      	ldr	r2, [pc, #92]	; (401180 <afec_enable_interrupt+0x74>)
  401122:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  401124:	e026      	b.n	401174 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  401126:	683b      	ldr	r3, [r7, #0]
  401128:	2b0b      	cmp	r3, #11
  40112a:	d80f      	bhi.n	40114c <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40112c:	683b      	ldr	r3, [r7, #0]
  40112e:	2b0b      	cmp	r3, #11
  401130:	d104      	bne.n	40113c <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  401132:	687b      	ldr	r3, [r7, #4]
  401134:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401138:	625a      	str	r2, [r3, #36]	; 0x24
  40113a:	e01b      	b.n	401174 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	2201      	movs	r2, #1
  401140:	fa02 f303 	lsl.w	r3, r2, r3
  401144:	461a      	mov	r2, r3
  401146:	687b      	ldr	r3, [r7, #4]
  401148:	625a      	str	r2, [r3, #36]	; 0x24
  40114a:	e013      	b.n	401174 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40114c:	683b      	ldr	r3, [r7, #0]
  40114e:	2b0e      	cmp	r3, #14
  401150:	d808      	bhi.n	401164 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  401152:	683b      	ldr	r3, [r7, #0]
  401154:	330c      	adds	r3, #12
  401156:	461a      	mov	r2, r3
  401158:	2301      	movs	r3, #1
  40115a:	4093      	lsls	r3, r2
  40115c:	461a      	mov	r2, r3
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	625a      	str	r2, [r3, #36]	; 0x24
  401162:	e007      	b.n	401174 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  401164:	683b      	ldr	r3, [r7, #0]
  401166:	330f      	adds	r3, #15
			afec->AFEC_IER = 1 << interrupt_source;
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  401168:	461a      	mov	r2, r3
  40116a:	2301      	movs	r3, #1
  40116c:	4093      	lsls	r3, r2
  40116e:	461a      	mov	r2, r3
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	625a      	str	r2, [r3, #36]	; 0x24
				+ AFEC_INTERRUPT_GAP2);
	}
}
  401174:	370c      	adds	r7, #12
  401176:	46bd      	mov	sp, r7
  401178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	47000fff 	.word	0x47000fff

00401184 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401184:	b580      	push	{r7, lr}
  401186:	b082      	sub	sp, #8
  401188:	af00      	add	r7, sp, #0
  40118a:	4603      	mov	r3, r0
  40118c:	6039      	str	r1, [r7, #0]
  40118e:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  401190:	79fb      	ldrb	r3, [r7, #7]
  401192:	4909      	ldr	r1, [pc, #36]	; (4011b8 <afec_interrupt+0x34>)
  401194:	011a      	lsls	r2, r3, #4
  401196:	683b      	ldr	r3, [r7, #0]
  401198:	4413      	add	r3, r2
  40119a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40119e:	2b00      	cmp	r3, #0
  4011a0:	d007      	beq.n	4011b2 <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4011a2:	79fb      	ldrb	r3, [r7, #7]
  4011a4:	4904      	ldr	r1, [pc, #16]	; (4011b8 <afec_interrupt+0x34>)
  4011a6:	011a      	lsls	r2, r3, #4
  4011a8:	683b      	ldr	r3, [r7, #0]
  4011aa:	4413      	add	r3, r2
  4011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4011b0:	4798      	blx	r3
	}
}
  4011b2:	3708      	adds	r7, #8
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	20400a1c 	.word	0x20400a1c

004011bc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b086      	sub	sp, #24
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
  4011c4:	6878      	ldr	r0, [r7, #4]
  4011c6:	4b25      	ldr	r3, [pc, #148]	; (40125c <afec_process_callback+0xa0>)
  4011c8:	4798      	blx	r3
  4011ca:	4603      	mov	r3, r0
  4011cc:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4011ce:	6878      	ldr	r0, [r7, #4]
  4011d0:	4b23      	ldr	r3, [pc, #140]	; (401260 <afec_process_callback+0xa4>)
  4011d2:	4798      	blx	r3
  4011d4:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4011d6:	2300      	movs	r3, #0
  4011d8:	617b      	str	r3, [r7, #20]
  4011da:	e039      	b.n	401250 <afec_process_callback+0x94>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4011dc:	697b      	ldr	r3, [r7, #20]
  4011de:	2b0b      	cmp	r3, #11
  4011e0:	d80f      	bhi.n	401202 <afec_process_callback+0x46>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	2201      	movs	r2, #1
  4011e6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ea:	461a      	mov	r2, r3
  4011ec:	68fb      	ldr	r3, [r7, #12]
  4011ee:	4013      	ands	r3, r2
  4011f0:	2b00      	cmp	r3, #0
  4011f2:	d02a      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4011f4:	693b      	ldr	r3, [r7, #16]
  4011f6:	b2db      	uxtb	r3, r3
  4011f8:	4618      	mov	r0, r3
  4011fa:	6979      	ldr	r1, [r7, #20]
  4011fc:	4b19      	ldr	r3, [pc, #100]	; (401264 <afec_process_callback+0xa8>)
  4011fe:	4798      	blx	r3
  401200:	e023      	b.n	40124a <afec_process_callback+0x8e>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401202:	697b      	ldr	r3, [r7, #20]
  401204:	2b0e      	cmp	r3, #14
  401206:	d810      	bhi.n	40122a <afec_process_callback+0x6e>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401208:	697b      	ldr	r3, [r7, #20]
  40120a:	330c      	adds	r3, #12
  40120c:	461a      	mov	r2, r3
  40120e:	2301      	movs	r3, #1
  401210:	4093      	lsls	r3, r2
  401212:	461a      	mov	r2, r3
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	4013      	ands	r3, r2
  401218:	2b00      	cmp	r3, #0
  40121a:	d016      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40121c:	693b      	ldr	r3, [r7, #16]
  40121e:	b2db      	uxtb	r3, r3
  401220:	4618      	mov	r0, r3
  401222:	6979      	ldr	r1, [r7, #20]
  401224:	4b0f      	ldr	r3, [pc, #60]	; (401264 <afec_process_callback+0xa8>)
  401226:	4798      	blx	r3
  401228:	e00f      	b.n	40124a <afec_process_callback+0x8e>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40122a:	697b      	ldr	r3, [r7, #20]
  40122c:	330f      	adds	r3, #15
  40122e:	461a      	mov	r2, r3
  401230:	2301      	movs	r3, #1
  401232:	4093      	lsls	r3, r2
  401234:	461a      	mov	r2, r3
  401236:	68fb      	ldr	r3, [r7, #12]
  401238:	4013      	ands	r3, r2
  40123a:	2b00      	cmp	r3, #0
  40123c:	d005      	beq.n	40124a <afec_process_callback+0x8e>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40123e:	693b      	ldr	r3, [r7, #16]
  401240:	b2db      	uxtb	r3, r3
  401242:	4618      	mov	r0, r3
  401244:	6979      	ldr	r1, [r7, #20]
  401246:	4b07      	ldr	r3, [pc, #28]	; (401264 <afec_process_callback+0xa8>)
  401248:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40124a:	697b      	ldr	r3, [r7, #20]
  40124c:	3301      	adds	r3, #1
  40124e:	617b      	str	r3, [r7, #20]
  401250:	697b      	ldr	r3, [r7, #20]
  401252:	2b0f      	cmp	r3, #15
  401254:	d9c2      	bls.n	4011dc <afec_process_callback+0x20>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401256:	3718      	adds	r7, #24
  401258:	46bd      	mov	sp, r7
  40125a:	bd80      	pop	{r7, pc}
  40125c:	00400cdd 	.word	0x00400cdd
  401260:	00400de5 	.word	0x00400de5
  401264:	00401185 	.word	0x00401185

00401268 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401268:	b580      	push	{r7, lr}
  40126a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40126c:	4801      	ldr	r0, [pc, #4]	; (401274 <AFEC0_Handler+0xc>)
  40126e:	4b02      	ldr	r3, [pc, #8]	; (401278 <AFEC0_Handler+0x10>)
  401270:	4798      	blx	r3
}
  401272:	bd80      	pop	{r7, pc}
  401274:	4003c000 	.word	0x4003c000
  401278:	004011bd 	.word	0x004011bd

0040127c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  401280:	4801      	ldr	r0, [pc, #4]	; (401288 <AFEC1_Handler+0xc>)
  401282:	4b02      	ldr	r3, [pc, #8]	; (40128c <AFEC1_Handler+0x10>)
  401284:	4798      	blx	r3
}
  401286:	bd80      	pop	{r7, pc}
  401288:	40064000 	.word	0x40064000
  40128c:	004011bd 	.word	0x004011bd

00401290 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401290:	b580      	push	{r7, lr}
  401292:	b084      	sub	sp, #16
  401294:	af00      	add	r7, sp, #0
  401296:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  401298:	6878      	ldr	r0, [r7, #4]
  40129a:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <afec_enable+0x24>)
  40129c:	4798      	blx	r3
  40129e:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <afec_enable+0x28>)
  4012a4:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4012a6:	2002      	movs	r0, #2
  4012a8:	4b04      	ldr	r3, [pc, #16]	; (4012bc <afec_enable+0x2c>)
  4012aa:	4798      	blx	r3
}
  4012ac:	3710      	adds	r7, #16
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bd80      	pop	{r7, pc}
  4012b2:	bf00      	nop
  4012b4:	00400e1d 	.word	0x00400e1d
  4012b8:	004016d1 	.word	0x004016d1
  4012bc:	00400cf5 	.word	0x00400cf5

004012c0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4012c0:	b480      	push	{r7}
  4012c2:	b083      	sub	sp, #12
  4012c4:	af00      	add	r7, sp, #0
  4012c6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4012cc:	4618      	mov	r0, r3
  4012ce:	370c      	adds	r7, #12
  4012d0:	46bd      	mov	sp, r7
  4012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012d6:	4770      	bx	lr

004012d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4012d8:	b480      	push	{r7}
  4012da:	b083      	sub	sp, #12
  4012dc:	af00      	add	r7, sp, #0
  4012de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	370c      	adds	r7, #12
  4012e8:	46bd      	mov	sp, r7
  4012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ee:	4770      	bx	lr

004012f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012f0:	b580      	push	{r7, lr}
  4012f2:	b084      	sub	sp, #16
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
  4012f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012fa:	6878      	ldr	r0, [r7, #4]
  4012fc:	4b24      	ldr	r3, [pc, #144]	; (401390 <pio_handler_process+0xa0>)
  4012fe:	4798      	blx	r3
  401300:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401302:	6878      	ldr	r0, [r7, #4]
  401304:	4b23      	ldr	r3, [pc, #140]	; (401394 <pio_handler_process+0xa4>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	4013      	ands	r3, r2
  40130e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401310:	68fb      	ldr	r3, [r7, #12]
  401312:	2b00      	cmp	r3, #0
  401314:	d038      	beq.n	401388 <pio_handler_process+0x98>
		/* Find triggering source */
		i = 0;
  401316:	2300      	movs	r3, #0
  401318:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40131a:	e032      	b.n	401382 <pio_handler_process+0x92>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40131c:	4a1e      	ldr	r2, [pc, #120]	; (401398 <pio_handler_process+0xa8>)
  40131e:	68bb      	ldr	r3, [r7, #8]
  401320:	011b      	lsls	r3, r3, #4
  401322:	4413      	add	r3, r2
  401324:	681a      	ldr	r2, [r3, #0]
  401326:	683b      	ldr	r3, [r7, #0]
  401328:	429a      	cmp	r2, r3
  40132a:	d123      	bne.n	401374 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40132c:	4a1a      	ldr	r2, [pc, #104]	; (401398 <pio_handler_process+0xa8>)
  40132e:	68bb      	ldr	r3, [r7, #8]
  401330:	011b      	lsls	r3, r3, #4
  401332:	4413      	add	r3, r2
  401334:	685a      	ldr	r2, [r3, #4]
  401336:	68fb      	ldr	r3, [r7, #12]
  401338:	4013      	ands	r3, r2
  40133a:	2b00      	cmp	r3, #0
  40133c:	d01a      	beq.n	401374 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40133e:	4a16      	ldr	r2, [pc, #88]	; (401398 <pio_handler_process+0xa8>)
  401340:	68bb      	ldr	r3, [r7, #8]
  401342:	011b      	lsls	r3, r3, #4
  401344:	4413      	add	r3, r2
  401346:	3308      	adds	r3, #8
  401348:	685b      	ldr	r3, [r3, #4]
  40134a:	4913      	ldr	r1, [pc, #76]	; (401398 <pio_handler_process+0xa8>)
  40134c:	68ba      	ldr	r2, [r7, #8]
  40134e:	0112      	lsls	r2, r2, #4
  401350:	440a      	add	r2, r1
  401352:	6810      	ldr	r0, [r2, #0]
  401354:	4910      	ldr	r1, [pc, #64]	; (401398 <pio_handler_process+0xa8>)
  401356:	68ba      	ldr	r2, [r7, #8]
  401358:	0112      	lsls	r2, r2, #4
  40135a:	440a      	add	r2, r1
  40135c:	6852      	ldr	r2, [r2, #4]
  40135e:	4611      	mov	r1, r2
  401360:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401362:	4a0d      	ldr	r2, [pc, #52]	; (401398 <pio_handler_process+0xa8>)
  401364:	68bb      	ldr	r3, [r7, #8]
  401366:	011b      	lsls	r3, r3, #4
  401368:	4413      	add	r3, r2
  40136a:	685b      	ldr	r3, [r3, #4]
  40136c:	43db      	mvns	r3, r3
  40136e:	68fa      	ldr	r2, [r7, #12]
  401370:	4013      	ands	r3, r2
  401372:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401374:	68bb      	ldr	r3, [r7, #8]
  401376:	3301      	adds	r3, #1
  401378:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40137a:	68bb      	ldr	r3, [r7, #8]
  40137c:	2b06      	cmp	r3, #6
  40137e:	d900      	bls.n	401382 <pio_handler_process+0x92>
				break;
  401380:	e002      	b.n	401388 <pio_handler_process+0x98>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401382:	68fb      	ldr	r3, [r7, #12]
  401384:	2b00      	cmp	r3, #0
  401386:	d1c9      	bne.n	40131c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401388:	3710      	adds	r7, #16
  40138a:	46bd      	mov	sp, r7
  40138c:	bd80      	pop	{r7, pc}
  40138e:	bf00      	nop
  401390:	004012c1 	.word	0x004012c1
  401394:	004012d9 	.word	0x004012d9
  401398:	20400928 	.word	0x20400928

0040139c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4013a0:	4802      	ldr	r0, [pc, #8]	; (4013ac <PIOA_Handler+0x10>)
  4013a2:	210a      	movs	r1, #10
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <PIOA_Handler+0x14>)
  4013a6:	4798      	blx	r3
}
  4013a8:	bd80      	pop	{r7, pc}
  4013aa:	bf00      	nop
  4013ac:	400e0e00 	.word	0x400e0e00
  4013b0:	004012f1 	.word	0x004012f1

004013b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4013b8:	4802      	ldr	r0, [pc, #8]	; (4013c4 <PIOB_Handler+0x10>)
  4013ba:	210b      	movs	r1, #11
  4013bc:	4b02      	ldr	r3, [pc, #8]	; (4013c8 <PIOB_Handler+0x14>)
  4013be:	4798      	blx	r3
}
  4013c0:	bd80      	pop	{r7, pc}
  4013c2:	bf00      	nop
  4013c4:	400e1000 	.word	0x400e1000
  4013c8:	004012f1 	.word	0x004012f1

004013cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4013cc:	b580      	push	{r7, lr}
  4013ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4013d0:	4802      	ldr	r0, [pc, #8]	; (4013dc <PIOC_Handler+0x10>)
  4013d2:	210c      	movs	r1, #12
  4013d4:	4b02      	ldr	r3, [pc, #8]	; (4013e0 <PIOC_Handler+0x14>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bd80      	pop	{r7, pc}
  4013da:	bf00      	nop
  4013dc:	400e1200 	.word	0x400e1200
  4013e0:	004012f1 	.word	0x004012f1

004013e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4013e4:	b580      	push	{r7, lr}
  4013e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4013e8:	4802      	ldr	r0, [pc, #8]	; (4013f4 <PIOD_Handler+0x10>)
  4013ea:	2110      	movs	r1, #16
  4013ec:	4b02      	ldr	r3, [pc, #8]	; (4013f8 <PIOD_Handler+0x14>)
  4013ee:	4798      	blx	r3
}
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	400e1400 	.word	0x400e1400
  4013f8:	004012f1 	.word	0x004012f1

004013fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401400:	4802      	ldr	r0, [pc, #8]	; (40140c <PIOE_Handler+0x10>)
  401402:	2111      	movs	r1, #17
  401404:	4b02      	ldr	r3, [pc, #8]	; (401410 <PIOE_Handler+0x14>)
  401406:	4798      	blx	r3
}
  401408:	bd80      	pop	{r7, pc}
  40140a:	bf00      	nop
  40140c:	400e1600 	.word	0x400e1600
  401410:	004012f1 	.word	0x004012f1

00401414 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401414:	b480      	push	{r7}
  401416:	b083      	sub	sp, #12
  401418:	af00      	add	r7, sp, #0
  40141a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	3b01      	subs	r3, #1
  401420:	2b03      	cmp	r3, #3
  401422:	d81a      	bhi.n	40145a <pmc_mck_set_division+0x46>
  401424:	a201      	add	r2, pc, #4	; (adr r2, 40142c <pmc_mck_set_division+0x18>)
  401426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40142a:	bf00      	nop
  40142c:	0040143d 	.word	0x0040143d
  401430:	00401443 	.word	0x00401443
  401434:	0040144b 	.word	0x0040144b
  401438:	00401453 	.word	0x00401453
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40143c:	2300      	movs	r3, #0
  40143e:	607b      	str	r3, [r7, #4]
			break;
  401440:	e00e      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401442:	f44f 7380 	mov.w	r3, #256	; 0x100
  401446:	607b      	str	r3, [r7, #4]
			break;
  401448:	e00a      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40144a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40144e:	607b      	str	r3, [r7, #4]
			break;
  401450:	e006      	b.n	401460 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401452:	f44f 7300 	mov.w	r3, #512	; 0x200
  401456:	607b      	str	r3, [r7, #4]
			break;
  401458:	e002      	b.n	401460 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40145a:	2300      	movs	r3, #0
  40145c:	607b      	str	r3, [r7, #4]
			break;
  40145e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  401460:	4909      	ldr	r1, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401462:	4b09      	ldr	r3, [pc, #36]	; (401488 <pmc_mck_set_division+0x74>)
  401464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40146a:	687b      	ldr	r3, [r7, #4]
  40146c:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  40146e:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401470:	bf00      	nop
  401472:	4b05      	ldr	r3, [pc, #20]	; (401488 <pmc_mck_set_division+0x74>)
  401474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401476:	f003 0308 	and.w	r3, r3, #8
  40147a:	2b00      	cmp	r3, #0
  40147c:	d0f9      	beq.n	401472 <pmc_mck_set_division+0x5e>
}
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	f85d 7b04 	ldr.w	r7, [sp], #4
  401486:	4770      	bx	lr
  401488:	400e0600 	.word	0x400e0600

0040148c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40148c:	b480      	push	{r7}
  40148e:	b085      	sub	sp, #20
  401490:	af00      	add	r7, sp, #0
  401492:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401494:	491d      	ldr	r1, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401496:	4b1d      	ldr	r3, [pc, #116]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  401498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40149a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40149e:	687b      	ldr	r3, [r7, #4]
  4014a0:	4313      	orrs	r3, r2
  4014a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014a8:	60fb      	str	r3, [r7, #12]
  4014aa:	e007      	b.n	4014bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014ac:	68fb      	ldr	r3, [r7, #12]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d101      	bne.n	4014b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4014b2:	2301      	movs	r3, #1
  4014b4:	e023      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014b6:	68fb      	ldr	r3, [r7, #12]
  4014b8:	3b01      	subs	r3, #1
  4014ba:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014bc:	4b13      	ldr	r3, [pc, #76]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014c0:	f003 0308 	and.w	r3, r3, #8
  4014c4:	2b00      	cmp	r3, #0
  4014c6:	d0f1      	beq.n	4014ac <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4014c8:	4a10      	ldr	r2, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014ca:	4b10      	ldr	r3, [pc, #64]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014ce:	f023 0303 	bic.w	r3, r3, #3
  4014d2:	f043 0302 	orr.w	r3, r3, #2
  4014d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4014dc:	60fb      	str	r3, [r7, #12]
  4014de:	e007      	b.n	4014f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d101      	bne.n	4014ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4014e6:	2301      	movs	r3, #1
  4014e8:	e009      	b.n	4014fe <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	3b01      	subs	r3, #1
  4014ee:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <pmc_switch_mck_to_pllack+0x80>)
  4014f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014f4:	f003 0308 	and.w	r3, r3, #8
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d0f1      	beq.n	4014e0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4014fc:	2300      	movs	r3, #0
}
  4014fe:	4618      	mov	r0, r3
  401500:	3714      	adds	r7, #20
  401502:	46bd      	mov	sp, r7
  401504:	f85d 7b04 	ldr.w	r7, [sp], #4
  401508:	4770      	bx	lr
  40150a:	bf00      	nop
  40150c:	400e0600 	.word	0x400e0600

00401510 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401518:	687b      	ldr	r3, [r7, #4]
  40151a:	2b01      	cmp	r3, #1
  40151c:	d105      	bne.n	40152a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40151e:	4907      	ldr	r1, [pc, #28]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401520:	4b06      	ldr	r3, [pc, #24]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401522:	689a      	ldr	r2, [r3, #8]
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <pmc_switch_sclk_to_32kxtal+0x30>)
  401526:	4313      	orrs	r3, r2
  401528:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40152a:	4b04      	ldr	r3, [pc, #16]	; (40153c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40152c:	4a05      	ldr	r2, [pc, #20]	; (401544 <pmc_switch_sclk_to_32kxtal+0x34>)
  40152e:	601a      	str	r2, [r3, #0]
}
  401530:	370c      	adds	r7, #12
  401532:	46bd      	mov	sp, r7
  401534:	f85d 7b04 	ldr.w	r7, [sp], #4
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e1810 	.word	0x400e1810
  401540:	a5100000 	.word	0xa5100000
  401544:	a5000008 	.word	0xa5000008

00401548 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401548:	b480      	push	{r7}
  40154a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40154c:	4b09      	ldr	r3, [pc, #36]	; (401574 <pmc_osc_is_ready_32kxtal+0x2c>)
  40154e:	695b      	ldr	r3, [r3, #20]
  401550:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401554:	2b00      	cmp	r3, #0
  401556:	d007      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401558:	4b07      	ldr	r3, [pc, #28]	; (401578 <pmc_osc_is_ready_32kxtal+0x30>)
  40155a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401560:	2b00      	cmp	r3, #0
  401562:	d001      	beq.n	401568 <pmc_osc_is_ready_32kxtal+0x20>
  401564:	2301      	movs	r3, #1
  401566:	e000      	b.n	40156a <pmc_osc_is_ready_32kxtal+0x22>
  401568:	2300      	movs	r3, #0
}
  40156a:	4618      	mov	r0, r3
  40156c:	46bd      	mov	sp, r7
  40156e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401572:	4770      	bx	lr
  401574:	400e1810 	.word	0x400e1810
  401578:	400e0600 	.word	0x400e0600

0040157c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40157c:	b480      	push	{r7}
  40157e:	b083      	sub	sp, #12
  401580:	af00      	add	r7, sp, #0
  401582:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401584:	4915      	ldr	r1, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401586:	4b15      	ldr	r3, [pc, #84]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401588:	6a1a      	ldr	r2, [r3, #32]
  40158a:	4b15      	ldr	r3, [pc, #84]	; (4015e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40158c:	4313      	orrs	r3, r2
  40158e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401590:	bf00      	nop
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  401594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40159a:	2b00      	cmp	r3, #0
  40159c:	d0f9      	beq.n	401592 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40159e:	490f      	ldr	r1, [pc, #60]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a0:	4b0e      	ldr	r3, [pc, #56]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015a2:	6a1a      	ldr	r2, [r3, #32]
  4015a4:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4015a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4015a8:	687a      	ldr	r2, [r7, #4]
  4015aa:	4313      	orrs	r3, r2
  4015ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4015b0:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4015b2:	bf00      	nop
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4015bc:	2b00      	cmp	r3, #0
  4015be:	d0f9      	beq.n	4015b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4015c0:	4906      	ldr	r1, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c2:	4b06      	ldr	r3, [pc, #24]	; (4015dc <pmc_switch_mainck_to_fastrc+0x60>)
  4015c4:	6a1a      	ldr	r2, [r3, #32]
  4015c6:	4b08      	ldr	r3, [pc, #32]	; (4015e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4015c8:	4013      	ands	r3, r2
  4015ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4015d0:	370c      	adds	r7, #12
  4015d2:	46bd      	mov	sp, r7
  4015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop
  4015dc:	400e0600 	.word	0x400e0600
  4015e0:	00370008 	.word	0x00370008
  4015e4:	ffc8ff8f 	.word	0xffc8ff8f
  4015e8:	fec8ffff 	.word	0xfec8ffff

004015ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
  4015f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	2b00      	cmp	r3, #0
  4015fa:	d008      	beq.n	40160e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015fc:	4913      	ldr	r1, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  4015fe:	4b13      	ldr	r3, [pc, #76]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401600:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401602:	4a13      	ldr	r2, [pc, #76]	; (401650 <pmc_switch_mainck_to_xtal+0x64>)
  401604:	401a      	ands	r2, r3
  401606:	4b13      	ldr	r3, [pc, #76]	; (401654 <pmc_switch_mainck_to_xtal+0x68>)
  401608:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40160a:	620b      	str	r3, [r1, #32]
  40160c:	e018      	b.n	401640 <pmc_switch_mainck_to_xtal+0x54>
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40160e:	490f      	ldr	r1, [pc, #60]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401610:	4b0e      	ldr	r3, [pc, #56]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401612:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401614:	4b10      	ldr	r3, [pc, #64]	; (401658 <pmc_switch_mainck_to_xtal+0x6c>)
  401616:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401618:	683a      	ldr	r2, [r7, #0]
  40161a:	0212      	lsls	r2, r2, #8
  40161c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40161e:	431a      	orrs	r2, r3
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <pmc_switch_mainck_to_xtal+0x70>)
  401622:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401624:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401626:	bf00      	nop
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  40162a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40162c:	f003 0301 	and.w	r3, r3, #1
  401630:	2b00      	cmp	r3, #0
  401632:	d0f9      	beq.n	401628 <pmc_switch_mainck_to_xtal+0x3c>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401634:	4905      	ldr	r1, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401636:	4b05      	ldr	r3, [pc, #20]	; (40164c <pmc_switch_mainck_to_xtal+0x60>)
  401638:	6a1a      	ldr	r2, [r3, #32]
  40163a:	4b09      	ldr	r3, [pc, #36]	; (401660 <pmc_switch_mainck_to_xtal+0x74>)
  40163c:	4313      	orrs	r3, r2
  40163e:	620b      	str	r3, [r1, #32]
	}
}
  401640:	370c      	adds	r7, #12
  401642:	46bd      	mov	sp, r7
  401644:	f85d 7b04 	ldr.w	r7, [sp], #4
  401648:	4770      	bx	lr
  40164a:	bf00      	nop
  40164c:	400e0600 	.word	0x400e0600
  401650:	fec8fffc 	.word	0xfec8fffc
  401654:	01370002 	.word	0x01370002
  401658:	ffc8fffc 	.word	0xffc8fffc
  40165c:	00370001 	.word	0x00370001
  401660:	01370000 	.word	0x01370000

00401664 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401664:	b480      	push	{r7}
  401666:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401668:	4b04      	ldr	r3, [pc, #16]	; (40167c <pmc_osc_is_ready_mainck+0x18>)
  40166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401670:	4618      	mov	r0, r3
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401684:	4b03      	ldr	r3, [pc, #12]	; (401694 <pmc_disable_pllack+0x14>)
  401686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40168a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40168c:	46bd      	mov	sp, r7
  40168e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401692:	4770      	bx	lr
  401694:	400e0600 	.word	0x400e0600

00401698 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401698:	b480      	push	{r7}
  40169a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40169c:	4b04      	ldr	r3, [pc, #16]	; (4016b0 <pmc_is_locked_pllack+0x18>)
  40169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016a0:	f003 0302 	and.w	r3, r3, #2
}
  4016a4:	4618      	mov	r0, r3
  4016a6:	46bd      	mov	sp, r7
  4016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop
  4016b0:	400e0600 	.word	0x400e0600

004016b4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4016b4:	b480      	push	{r7}
  4016b6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4016b8:	4b04      	ldr	r3, [pc, #16]	; (4016cc <pmc_is_locked_upll+0x18>)
  4016ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	46bd      	mov	sp, r7
  4016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016c8:	4770      	bx	lr
  4016ca:	bf00      	nop
  4016cc:	400e0600 	.word	0x400e0600

004016d0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4016d0:	b480      	push	{r7}
  4016d2:	b083      	sub	sp, #12
  4016d4:	af00      	add	r7, sp, #0
  4016d6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	2b3f      	cmp	r3, #63	; 0x3f
  4016dc:	d901      	bls.n	4016e2 <pmc_enable_periph_clk+0x12>
		return 1;
  4016de:	2301      	movs	r3, #1
  4016e0:	e02f      	b.n	401742 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	2b1f      	cmp	r3, #31
  4016e6:	d813      	bhi.n	401710 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4016e8:	4b19      	ldr	r3, [pc, #100]	; (401750 <pmc_enable_periph_clk+0x80>)
  4016ea:	699a      	ldr	r2, [r3, #24]
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	2101      	movs	r1, #1
  4016f0:	fa01 f303 	lsl.w	r3, r1, r3
  4016f4:	401a      	ands	r2, r3
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	2101      	movs	r1, #1
  4016fa:	fa01 f303 	lsl.w	r3, r1, r3
  4016fe:	429a      	cmp	r2, r3
  401700:	d01e      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401702:	4a13      	ldr	r2, [pc, #76]	; (401750 <pmc_enable_periph_clk+0x80>)
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	2101      	movs	r1, #1
  401708:	fa01 f303 	lsl.w	r3, r1, r3
  40170c:	6113      	str	r3, [r2, #16]
  40170e:	e017      	b.n	401740 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	3b20      	subs	r3, #32
  401714:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pmc_enable_periph_clk+0x80>)
  401718:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	2101      	movs	r1, #1
  401720:	fa01 f303 	lsl.w	r3, r1, r3
  401724:	401a      	ands	r2, r3
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2101      	movs	r1, #1
  40172a:	fa01 f303 	lsl.w	r3, r1, r3
  40172e:	429a      	cmp	r2, r3
  401730:	d006      	beq.n	401740 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401732:	4a07      	ldr	r2, [pc, #28]	; (401750 <pmc_enable_periph_clk+0x80>)
  401734:	687b      	ldr	r3, [r7, #4]
  401736:	2101      	movs	r1, #1
  401738:	fa01 f303 	lsl.w	r3, r1, r3
  40173c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401740:	2300      	movs	r3, #0
}
  401742:	4618      	mov	r0, r3
  401744:	370c      	adds	r7, #12
  401746:	46bd      	mov	sp, r7
  401748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	400e0600 	.word	0x400e0600

00401754 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401754:	b4b0      	push	{r4, r5, r7}
  401756:	b091      	sub	sp, #68	; 0x44
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40175e:	4b1b      	ldr	r3, [pc, #108]	; (4017cc <pwm_clocks_generate+0x78>)
  401760:	f107 040c 	add.w	r4, r7, #12
  401764:	461d      	mov	r5, r3
  401766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40176c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40176e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401776:	2300      	movs	r3, #0
  401778:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  40177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40177c:	009b      	lsls	r3, r3, #2
  40177e:	f107 0240 	add.w	r2, r7, #64	; 0x40
  401782:	4413      	add	r3, r2
  401784:	f853 3c34 	ldr.w	r3, [r3, #-52]
  401788:	683a      	ldr	r2, [r7, #0]
  40178a:	fbb2 f2f3 	udiv	r2, r2, r3
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	fbb2 f3f3 	udiv	r3, r2, r3
  401794:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40179c:	d800      	bhi.n	4017a0 <pwm_clocks_generate+0x4c>
			break;
  40179e:	e005      	b.n	4017ac <pwm_clocks_generate+0x58>
		}
		ul_pre++;
  4017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a2:	3301      	adds	r3, #1
  4017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017a8:	2b0a      	cmp	r3, #10
  4017aa:	d9e6      	bls.n	40177a <pwm_clocks_generate+0x26>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017ae:	2b0a      	cmp	r3, #10
  4017b0:	d804      	bhi.n	4017bc <pwm_clocks_generate+0x68>
		return ul_div | (ul_pre << 8);
  4017b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4017b4:	021a      	lsls	r2, r3, #8
  4017b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4017b8:	4313      	orrs	r3, r2
  4017ba:	e001      	b.n	4017c0 <pwm_clocks_generate+0x6c>
	} else {
		return PWM_INVALID_ARGUMENT;
  4017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  4017c0:	4618      	mov	r0, r3
  4017c2:	3744      	adds	r7, #68	; 0x44
  4017c4:	46bd      	mov	sp, r7
  4017c6:	bcb0      	pop	{r4, r5, r7}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	0040c5e8 	.word	0x0040c5e8

004017d0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4017d0:	b580      	push	{r7, lr}
  4017d2:	b084      	sub	sp, #16
  4017d4:	af00      	add	r7, sp, #0
  4017d6:	6078      	str	r0, [r7, #4]
  4017d8:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  4017da:	2300      	movs	r3, #0
  4017dc:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4017de:	683b      	ldr	r3, [r7, #0]
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d011      	beq.n	40180a <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	681a      	ldr	r2, [r3, #0]
  4017ea:	683b      	ldr	r3, [r7, #0]
  4017ec:	689b      	ldr	r3, [r3, #8]
  4017ee:	4610      	mov	r0, r2
  4017f0:	4619      	mov	r1, r3
  4017f2:	4b16      	ldr	r3, [pc, #88]	; (40184c <pwm_init+0x7c>)
  4017f4:	4798      	blx	r3
  4017f6:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  4017f8:	68bb      	ldr	r3, [r7, #8]
  4017fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4017fe:	4293      	cmp	r3, r2
  401800:	d101      	bne.n	401806 <pwm_init+0x36>
			return result;
  401802:	68bb      	ldr	r3, [r7, #8]
  401804:	e01e      	b.n	401844 <pwm_init+0x74>
		}

		clock = result;
  401806:	68bb      	ldr	r3, [r7, #8]
  401808:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	685b      	ldr	r3, [r3, #4]
  40180e:	2b00      	cmp	r3, #0
  401810:	d014      	beq.n	40183c <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401812:	683b      	ldr	r3, [r7, #0]
  401814:	685a      	ldr	r2, [r3, #4]
  401816:	683b      	ldr	r3, [r7, #0]
  401818:	689b      	ldr	r3, [r3, #8]
  40181a:	4610      	mov	r0, r2
  40181c:	4619      	mov	r1, r3
  40181e:	4b0b      	ldr	r3, [pc, #44]	; (40184c <pwm_init+0x7c>)
  401820:	4798      	blx	r3
  401822:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  401824:	68bb      	ldr	r3, [r7, #8]
  401826:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40182a:	4293      	cmp	r3, r2
  40182c:	d101      	bne.n	401832 <pwm_init+0x62>
			return result;
  40182e:	68bb      	ldr	r3, [r7, #8]
  401830:	e008      	b.n	401844 <pwm_init+0x74>
		}

		clock |= (result << 16);
  401832:	68bb      	ldr	r3, [r7, #8]
  401834:	041b      	lsls	r3, r3, #16
  401836:	68fa      	ldr	r2, [r7, #12]
  401838:	4313      	orrs	r3, r2
  40183a:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	68fa      	ldr	r2, [r7, #12]
  401840:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  401842:	2300      	movs	r3, #0
}
  401844:	4618      	mov	r0, r3
  401846:	3710      	adds	r7, #16
  401848:	46bd      	mov	sp, r7
  40184a:	bd80      	pop	{r7, pc}
  40184c:	00401755 	.word	0x00401755

00401850 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401850:	b480      	push	{r7}
  401852:	b087      	sub	sp, #28
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
  401858:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  40185a:	2300      	movs	r3, #0
  40185c:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  40185e:	683b      	ldr	r3, [r7, #0]
  401860:	681b      	ldr	r3, [r3, #0]
  401862:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401864:	683b      	ldr	r3, [r7, #0]
  401866:	685b      	ldr	r3, [r3, #4]
  401868:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  40186c:	683a      	ldr	r2, [r7, #0]
  40186e:	7a92      	ldrb	r2, [r2, #10]
  401870:	0252      	lsls	r2, r2, #9
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401872:	4313      	orrs	r3, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401874:	683a      	ldr	r2, [r7, #0]
  401876:	8a92      	ldrh	r2, [r2, #20]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  401878:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  40187a:	683a      	ldr	r2, [r7, #0]
  40187c:	7d92      	ldrb	r2, [r2, #22]
  40187e:	0412      	lsls	r2, r2, #16

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401880:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401882:	683a      	ldr	r2, [r7, #0]
  401884:	7dd2      	ldrb	r2, [r2, #23]
  401886:	0452      	lsls	r2, r2, #17
	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
  401888:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  40188a:	683a      	ldr	r2, [r7, #0]
  40188c:	7e12      	ldrb	r2, [r2, #24]
  40188e:	0492      	lsls	r2, r2, #18
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
  401890:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401892:	683a      	ldr	r2, [r7, #0]
  401894:	8912      	ldrh	r2, [r2, #8]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401896:	4313      	orrs	r3, r2
  401898:	617b      	str	r3, [r7, #20]
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40189a:	687a      	ldr	r2, [r7, #4]
  40189c:	693b      	ldr	r3, [r7, #16]
  40189e:	3310      	adds	r3, #16
  4018a0:	015b      	lsls	r3, r3, #5
  4018a2:	4413      	add	r3, r2
  4018a4:	697a      	ldr	r2, [r7, #20]
  4018a6:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	68da      	ldr	r2, [r3, #12]
  4018ac:	6879      	ldr	r1, [r7, #4]
  4018ae:	693b      	ldr	r3, [r7, #16]
  4018b0:	3310      	adds	r3, #16
  4018b2:	015b      	lsls	r3, r3, #5
  4018b4:	440b      	add	r3, r1
  4018b6:	605a      	str	r2, [r3, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4018b8:	683b      	ldr	r3, [r7, #0]
  4018ba:	691a      	ldr	r2, [r3, #16]
  4018bc:	6879      	ldr	r1, [r7, #4]
  4018be:	693b      	ldr	r3, [r7, #16]
  4018c0:	015b      	lsls	r3, r3, #5
  4018c2:	440b      	add	r3, r1
  4018c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4018c8:	605a      	str	r2, [r3, #4]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	7d9b      	ldrb	r3, [r3, #22]
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d00d      	beq.n	4018ee <pwm_channel_init+0x9e>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  4018d2:	683b      	ldr	r3, [r7, #0]
  4018d4:	8b9b      	ldrh	r3, [r3, #28]
  4018d6:	041b      	lsls	r3, r3, #16
  4018d8:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4018da:	683b      	ldr	r3, [r7, #0]
  4018dc:	8b5b      	ldrh	r3, [r3, #26]
  4018de:	431a      	orrs	r2, r3
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4018e0:	6879      	ldr	r1, [r7, #4]
  4018e2:	693b      	ldr	r3, [r7, #16]
  4018e4:	015b      	lsls	r3, r3, #5
  4018e6:	440b      	add	r3, r1
  4018e8:	f503 7306 	add.w	r3, r3, #536	; 0x218
  4018ec:	601a      	str	r2, [r3, #0]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4018f2:	693b      	ldr	r3, [r7, #16]
  4018f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4018f8:	fa01 f303 	lsl.w	r3, r1, r3
  4018fc:	43db      	mvns	r3, r3
  4018fe:	4013      	ands	r3, r2
  401900:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401902:	683b      	ldr	r3, [r7, #0]
  401904:	7f9b      	ldrb	r3, [r3, #30]
  401906:	461a      	mov	r2, r3
  401908:	693b      	ldr	r3, [r7, #16]
  40190a:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40190c:	683b      	ldr	r3, [r7, #0]
  40190e:	7fdb      	ldrb	r3, [r3, #31]
  401910:	4619      	mov	r1, r3
  401912:	693b      	ldr	r3, [r7, #16]
  401914:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401918:	041b      	lsls	r3, r3, #16
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40191a:	4313      	orrs	r3, r2
  40191c:	461a      	mov	r2, r3
  40191e:	697b      	ldr	r3, [r7, #20]
  401920:	4313      	orrs	r3, r2
  401922:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401924:	687b      	ldr	r3, [r7, #4]
  401926:	697a      	ldr	r2, [r7, #20]
  401928:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40192a:	687b      	ldr	r3, [r7, #4]
  40192c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  40192e:	693b      	ldr	r3, [r7, #16]
  401930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  401934:	fa01 f303 	lsl.w	r3, r1, r3
  401938:	43db      	mvns	r3, r3
  40193a:	4013      	ands	r3, r2
  40193c:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40193e:	683b      	ldr	r3, [r7, #0]
  401940:	f893 3020 	ldrb.w	r3, [r3, #32]
  401944:	461a      	mov	r2, r3
  401946:	693b      	ldr	r3, [r7, #16]
  401948:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  401950:	4619      	mov	r1, r3
  401952:	693b      	ldr	r3, [r7, #16]
  401954:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  401958:	041b      	lsls	r3, r3, #16
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40195a:	4313      	orrs	r3, r2
  40195c:	461a      	mov	r2, r3
  40195e:	697b      	ldr	r3, [r7, #20]
  401960:	4313      	orrs	r3, r2
  401962:	617b      	str	r3, [r7, #20]
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401964:	687b      	ldr	r3, [r7, #4]
  401966:	697a      	ldr	r2, [r7, #20]
  401968:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40196a:	693b      	ldr	r3, [r7, #16]
  40196c:	2201      	movs	r2, #1
  40196e:	fa02 f303 	lsl.w	r3, r2, r3
  401972:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  401974:	683b      	ldr	r3, [r7, #0]
  401976:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  40197a:	2b00      	cmp	r3, #0
  40197c:	d006      	beq.n	40198c <pwm_channel_init+0x13c>
		p_pwm->PWM_SCM |= channel;
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	6a1a      	ldr	r2, [r3, #32]
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	431a      	orrs	r2, r3
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	621a      	str	r2, [r3, #32]
  40198a:	e006      	b.n	40199a <pwm_channel_init+0x14a>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	6a1a      	ldr	r2, [r3, #32]
  401990:	68fb      	ldr	r3, [r7, #12]
  401992:	43db      	mvns	r3, r3
  401994:	401a      	ands	r2, r3
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	621a      	str	r2, [r3, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40199a:	683b      	ldr	r3, [r7, #0]
  40199c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019a0:	2b02      	cmp	r3, #2
  4019a2:	d10b      	bne.n	4019bc <pwm_channel_init+0x16c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019aa:	693a      	ldr	r2, [r7, #16]
  4019ac:	2101      	movs	r1, #1
  4019ae:	fa01 f202 	lsl.w	r2, r1, r2
  4019b2:	431a      	orrs	r2, r3
  4019b4:	687b      	ldr	r3, [r7, #4]
  4019b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  4019ba:	e024      	b.n	401a06 <pwm_channel_init+0x1b6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  4019c2:	693a      	ldr	r2, [r7, #16]
  4019c4:	2101      	movs	r1, #1
  4019c6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ca:	43d2      	mvns	r2, r2
  4019cc:	401a      	ands	r2, r3
  4019ce:	687b      	ldr	r3, [r7, #4]
  4019d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4019d4:	683b      	ldr	r3, [r7, #0]
  4019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4019da:	2b01      	cmp	r3, #1
  4019dc:	d109      	bne.n	4019f2 <pwm_channel_init+0x1a2>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019e2:	693a      	ldr	r2, [r7, #16]
  4019e4:	2101      	movs	r1, #1
  4019e6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ea:	431a      	orrs	r2, r3
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	669a      	str	r2, [r3, #104]	; 0x68
  4019f0:	e009      	b.n	401a06 <pwm_channel_init+0x1b6>
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019f6:	693a      	ldr	r2, [r7, #16]
  4019f8:	2101      	movs	r1, #1
  4019fa:	fa01 f202 	lsl.w	r2, r1, r2
  4019fe:	43d2      	mvns	r2, r2
  401a00:	401a      	ands	r2, r3
  401a02:	687b      	ldr	r3, [r7, #4]
  401a04:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  401a06:	683b      	ldr	r3, [r7, #0]
  401a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a0c:	2b02      	cmp	r3, #2
  401a0e:	d10c      	bne.n	401a2a <pwm_channel_init+0x1da>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  401a10:	687b      	ldr	r3, [r7, #4]
  401a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a16:	693a      	ldr	r2, [r7, #16]
  401a18:	2101      	movs	r1, #1
  401a1a:	fa01 f202 	lsl.w	r2, r1, r2
  401a1e:	0412      	lsls	r2, r2, #16
  401a20:	431a      	orrs	r2, r3
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401a28:	e027      	b.n	401a7a <pwm_channel_init+0x22a>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  401a30:	693a      	ldr	r2, [r7, #16]
  401a32:	2101      	movs	r1, #1
  401a34:	fa01 f202 	lsl.w	r2, r1, r2
  401a38:	0412      	lsls	r2, r2, #16
  401a3a:	43d2      	mvns	r2, r2
  401a3c:	401a      	ands	r2, r3
  401a3e:	687b      	ldr	r3, [r7, #4]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401a44:	683b      	ldr	r3, [r7, #0]
  401a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  401a4a:	2b01      	cmp	r3, #1
  401a4c:	d10a      	bne.n	401a64 <pwm_channel_init+0x214>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a52:	693a      	ldr	r2, [r7, #16]
  401a54:	2101      	movs	r1, #1
  401a56:	fa01 f202 	lsl.w	r2, r1, r2
  401a5a:	0412      	lsls	r2, r2, #16
  401a5c:	431a      	orrs	r2, r3
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	669a      	str	r2, [r3, #104]	; 0x68
  401a62:	e00a      	b.n	401a7a <pwm_channel_init+0x22a>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401a64:	687b      	ldr	r3, [r7, #4]
  401a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a68:	693a      	ldr	r2, [r7, #16]
  401a6a:	2101      	movs	r1, #1
  401a6c:	fa01 f202 	lsl.w	r2, r1, r2
  401a70:	0412      	lsls	r2, r2, #16
  401a72:	43d2      	mvns	r2, r2
  401a74:	401a      	ands	r2, r3
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	669a      	str	r2, [r3, #104]	; 0x68
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  401a7a:	2300      	movs	r3, #0
  401a7c:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a7e:	693b      	ldr	r3, [r7, #16]
  401a80:	00db      	lsls	r3, r3, #3
  401a82:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  401a88:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  401a8a:	693b      	ldr	r3, [r7, #16]
  401a8c:	22ff      	movs	r2, #255	; 0xff
  401a8e:	fa02 f303 	lsl.w	r3, r2, r3
  401a92:	43db      	mvns	r3, r3
  401a94:	461a      	mov	r2, r3
  401a96:	68bb      	ldr	r3, [r7, #8]
  401a98:	4013      	ands	r3, r2
  401a9a:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a9c:	683b      	ldr	r3, [r7, #0]
  401a9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  401aa2:	461a      	mov	r2, r3
  401aa4:	693b      	ldr	r3, [r7, #16]
  401aa6:	fa02 f303 	lsl.w	r3, r2, r3
  401aaa:	461a      	mov	r2, r3
  401aac:	68bb      	ldr	r3, [r7, #8]
  401aae:	4313      	orrs	r3, r2
  401ab0:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  401ab2:	687b      	ldr	r3, [r7, #4]
  401ab4:	68ba      	ldr	r2, [r7, #8]
  401ab6:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401ab8:	693b      	ldr	r3, [r7, #16]
  401aba:	2b00      	cmp	r3, #0
  401abc:	d115      	bne.n	401aea <pwm_channel_init+0x29a>
		if (p_channel->spread_spectrum_mode ==
  401abe:	683b      	ldr	r3, [r7, #0]
  401ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  401ac4:	2b01      	cmp	r3, #1
  401ac6:	d109      	bne.n	401adc <pwm_channel_init+0x28c>
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  401ad4:	687b      	ldr	r3, [r7, #4]
  401ad6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ada:	e006      	b.n	401aea <pwm_channel_init+0x29a>
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401adc:	683b      	ldr	r3, [r7, #0]
  401ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ae0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401aea:	687a      	ldr	r2, [r7, #4]
  401aec:	693b      	ldr	r3, [r7, #16]
  401aee:	3310      	adds	r3, #16
  401af0:	015b      	lsls	r3, r3, #5
  401af2:	4413      	add	r3, r2
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
  401afa:	6879      	ldr	r1, [r7, #4]
  401afc:	693b      	ldr	r3, [r7, #16]
  401afe:	3310      	adds	r3, #16
  401b00:	015b      	lsls	r3, r3, #5
  401b02:	440b      	add	r3, r1
  401b04:	601a      	str	r2, [r3, #0]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401b06:	687a      	ldr	r2, [r7, #4]
  401b08:	693b      	ldr	r3, [r7, #16]
  401b0a:	3310      	adds	r3, #16
  401b0c:	015b      	lsls	r3, r3, #5
  401b0e:	4413      	add	r3, r2
  401b10:	681a      	ldr	r2, [r3, #0]
  401b12:	683b      	ldr	r3, [r7, #0]
  401b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401b1a:	431a      	orrs	r2, r3
  401b1c:	6879      	ldr	r1, [r7, #4]
  401b1e:	693b      	ldr	r3, [r7, #16]
  401b20:	3310      	adds	r3, #16
  401b22:	015b      	lsls	r3, r3, #5
  401b24:	440b      	add	r3, r1
  401b26:	601a      	str	r2, [r3, #0]
#endif

	return 0;
  401b28:	2300      	movs	r3, #0
}
  401b2a:	4618      	mov	r0, r3
  401b2c:	371c      	adds	r7, #28
  401b2e:	46bd      	mov	sp, r7
  401b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop

00401b38 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  401b38:	b480      	push	{r7}
  401b3a:	b087      	sub	sp, #28
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	60f8      	str	r0, [r7, #12]
  401b40:	60b9      	str	r1, [r7, #8]
  401b42:	607a      	str	r2, [r7, #4]
	uint32_t ch_num = p_channel->channel;
  401b44:	68bb      	ldr	r3, [r7, #8]
  401b46:	681b      	ldr	r3, [r3, #0]
  401b48:	617b      	str	r3, [r7, #20]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401b4a:	68bb      	ldr	r3, [r7, #8]
  401b4c:	691a      	ldr	r2, [r3, #16]
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	429a      	cmp	r2, r3
  401b52:	d202      	bcs.n	401b5a <pwm_channel_update_duty+0x22>
		return PWM_INVALID_ARGUMENT;
  401b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b58:	e00b      	b.n	401b72 <pwm_channel_update_duty+0x3a>
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401b5a:	68bb      	ldr	r3, [r7, #8]
  401b5c:	687a      	ldr	r2, [r7, #4]
  401b5e:	60da      	str	r2, [r3, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401b60:	68fa      	ldr	r2, [r7, #12]
  401b62:	697b      	ldr	r3, [r7, #20]
  401b64:	015b      	lsls	r3, r3, #5
  401b66:	4413      	add	r3, r2
  401b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401b6c:	687a      	ldr	r2, [r7, #4]
  401b6e:	601a      	str	r2, [r3, #0]
#endif
	}

	return 0;
  401b70:	2300      	movs	r3, #0
}
  401b72:	4618      	mov	r0, r3
  401b74:	371c      	adds	r7, #28
  401b76:	46bd      	mov	sp, r7
  401b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
  401b86:	6078      	str	r0, [r7, #4]
  401b88:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  401b8a:	683b      	ldr	r3, [r7, #0]
  401b8c:	2201      	movs	r2, #1
  401b8e:	fa02 f303 	lsl.w	r3, r2, r3
  401b92:	461a      	mov	r2, r3
  401b94:	687b      	ldr	r3, [r7, #4]
  401b96:	605a      	str	r2, [r3, #4]
}
  401b98:	370c      	adds	r7, #12
  401b9a:	46bd      	mov	sp, r7
  401b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba0:	4770      	bx	lr
  401ba2:	bf00      	nop

00401ba4 <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  401bae:	683b      	ldr	r3, [r7, #0]
  401bb0:	2201      	movs	r2, #1
  401bb2:	fa02 f303 	lsl.w	r3, r2, r3
  401bb6:	461a      	mov	r2, r3
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	609a      	str	r2, [r3, #8]
}
  401bbc:	370c      	adds	r7, #12
  401bbe:	46bd      	mov	sp, r7
  401bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc4:	4770      	bx	lr
  401bc6:	bf00      	nop

00401bc8 <pwm_channel_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Channel counter event and fault protection trigger interrupt status.
 */
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
  401bc8:	b480      	push	{r7}
  401bca:	b083      	sub	sp, #12
  401bcc:	af00      	add	r7, sp, #0
  401bce:	6078      	str	r0, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	69db      	ldr	r3, [r3, #28]
#endif
}
  401bd4:	4618      	mov	r0, r3
  401bd6:	370c      	adds	r7, #12
  401bd8:	46bd      	mov	sp, r7
  401bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bde:	4770      	bx	lr

00401be0 <pwm_channel_enable_interrupt>:
 * \param ul_fault Channel number to enable fault protection interrupt(ignored
 * by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_enable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401be0:	b480      	push	{r7}
  401be2:	b085      	sub	sp, #20
  401be4:	af00      	add	r7, sp, #0
  401be6:	60f8      	str	r0, [r7, #12]
  401be8:	60b9      	str	r1, [r7, #8]
  401bea:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401bec:	68bb      	ldr	r3, [r7, #8]
  401bee:	2201      	movs	r2, #1
  401bf0:	409a      	lsls	r2, r3
  401bf2:	687b      	ldr	r3, [r7, #4]
  401bf4:	3310      	adds	r3, #16
  401bf6:	4619      	mov	r1, r3
  401bf8:	2301      	movs	r3, #1
  401bfa:	408b      	lsls	r3, r1
  401bfc:	4313      	orrs	r3, r2
  401bfe:	461a      	mov	r2, r3
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	611a      	str	r2, [r3, #16]
#endif
}
  401c04:	3714      	adds	r7, #20
  401c06:	46bd      	mov	sp, r7
  401c08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <pwm_channel_disable_interrupt>:
 * \param ul_fault Bitmask of channel number to disable fault protection
 * interrupt(ignored by SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM).
 */
void pwm_channel_disable_interrupt(Pwm *p_pwm, uint32_t ul_event,
		uint32_t ul_fault)
{
  401c10:	b480      	push	{r7}
  401c12:	b085      	sub	sp, #20
  401c14:	af00      	add	r7, sp, #0
  401c16:	60f8      	str	r0, [r7, #12]
  401c18:	60b9      	str	r1, [r7, #8]
  401c1a:	607a      	str	r2, [r7, #4]
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401c1c:	68bb      	ldr	r3, [r7, #8]
  401c1e:	2201      	movs	r2, #1
  401c20:	409a      	lsls	r2, r3
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	3310      	adds	r3, #16
  401c26:	4619      	mov	r1, r3
  401c28:	2301      	movs	r3, #1
  401c2a:	408b      	lsls	r3, r1
  401c2c:	4313      	orrs	r3, r2
  401c2e:	461a      	mov	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	615a      	str	r2, [r3, #20]
#endif
}
  401c34:	3714      	adds	r7, #20
  401c36:	46bd      	mov	sp, r7
  401c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop

00401c40 <twihs_enable_master_mode>:
 * \brief Enable TWIHS master mode.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
  401c40:	b480      	push	{r7}
  401c42:	b083      	sub	sp, #12
  401c44:	af00      	add	r7, sp, #0
  401c46:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c48:	687b      	ldr	r3, [r7, #4]
  401c4a:	2208      	movs	r2, #8
  401c4c:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	2220      	movs	r2, #32
  401c52:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c54:	687b      	ldr	r3, [r7, #4]
  401c56:	2204      	movs	r2, #4
  401c58:	601a      	str	r2, [r3, #0]
}
  401c5a:	370c      	adds	r7, #12
  401c5c:	46bd      	mov	sp, r7
  401c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c62:	4770      	bx	lr

00401c64 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401c64:	b580      	push	{r7, lr}
  401c66:	b084      	sub	sp, #16
  401c68:	af00      	add	r7, sp, #0
  401c6a:	6078      	str	r0, [r7, #4]
  401c6c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWIHS_SUCCESS;
  401c6e:	2300      	movs	r3, #0
  401c70:	60fb      	str	r3, [r7, #12]

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	f04f 32ff 	mov.w	r2, #4294967295
  401c78:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWIHS peripheral */
	twihs_reset(p_twihs);
  401c7e:	6878      	ldr	r0, [r7, #4]
  401c80:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <twihs_master_init+0x4c>)
  401c82:	4798      	blx	r3

	twihs_enable_master_mode(p_twihs);
  401c84:	6878      	ldr	r0, [r7, #4]
  401c86:	4b0b      	ldr	r3, [pc, #44]	; (401cb4 <twihs_master_init+0x50>)
  401c88:	4798      	blx	r3

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c8a:	683b      	ldr	r3, [r7, #0]
  401c8c:	685a      	ldr	r2, [r3, #4]
  401c8e:	683b      	ldr	r3, [r7, #0]
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	6878      	ldr	r0, [r7, #4]
  401c94:	4611      	mov	r1, r2
  401c96:	461a      	mov	r2, r3
  401c98:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <twihs_master_init+0x54>)
  401c9a:	4798      	blx	r3
  401c9c:	4603      	mov	r3, r0
  401c9e:	2b01      	cmp	r3, #1
  401ca0:	d101      	bne.n	401ca6 <twihs_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
  401ca2:	2301      	movs	r3, #1
  401ca4:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401ca6:	68fb      	ldr	r3, [r7, #12]
}
  401ca8:	4618      	mov	r0, r3
  401caa:	3710      	adds	r7, #16
  401cac:	46bd      	mov	sp, r7
  401cae:	bd80      	pop	{r7, pc}
  401cb0:	00401f4d 	.word	0x00401f4d
  401cb4:	00401c41 	.word	0x00401c41
  401cb8:	00401cbd 	.word	0x00401cbd

00401cbc <twihs_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401cc8:	2300      	movs	r3, #0
  401cca:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401ccc:	68bb      	ldr	r3, [r7, #8]
  401cce:	4a16      	ldr	r2, [pc, #88]	; (401d28 <twihs_set_speed+0x6c>)
  401cd0:	4293      	cmp	r3, r2
  401cd2:	d901      	bls.n	401cd8 <twihs_set_speed+0x1c>
		return FAIL;
  401cd4:	2301      	movs	r3, #1
  401cd6:	e021      	b.n	401d1c <twihs_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cd8:	68bb      	ldr	r3, [r7, #8]
  401cda:	005b      	lsls	r3, r3, #1
  401cdc:	687a      	ldr	r2, [r7, #4]
  401cde:	fbb2 f3f3 	udiv	r3, r2, r3
  401ce2:	3b04      	subs	r3, #4
  401ce4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401ce6:	e005      	b.n	401cf4 <twihs_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401ce8:	697b      	ldr	r3, [r7, #20]
  401cea:	3301      	adds	r3, #1
  401cec:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401cee:	693b      	ldr	r3, [r7, #16]
  401cf0:	085b      	lsrs	r3, r3, #1
  401cf2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cf4:	693b      	ldr	r3, [r7, #16]
  401cf6:	2bff      	cmp	r3, #255	; 0xff
  401cf8:	d902      	bls.n	401d00 <twihs_set_speed+0x44>
  401cfa:	697b      	ldr	r3, [r7, #20]
  401cfc:	2b06      	cmp	r3, #6
  401cfe:	d9f3      	bls.n	401ce8 <twihs_set_speed+0x2c>
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d00:	693b      	ldr	r3, [r7, #16]
  401d02:	b2da      	uxtb	r2, r3
  401d04:	693b      	ldr	r3, [r7, #16]
  401d06:	021b      	lsls	r3, r3, #8
  401d08:	b29b      	uxth	r3, r3
  401d0a:	431a      	orrs	r2, r3
			TWIHS_CWGR_CKDIV(ckdiv);
  401d0c:	697b      	ldr	r3, [r7, #20]
  401d0e:	041b      	lsls	r3, r3, #16
  401d10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d14:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	611a      	str	r2, [r3, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  401d1a:	2300      	movs	r3, #0
}
  401d1c:	4618      	mov	r0, r3
  401d1e:	371c      	adds	r7, #28
  401d20:	46bd      	mov	sp, r7
  401d22:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d26:	4770      	bx	lr
  401d28:	00061a80 	.word	0x00061a80

00401d2c <twihs_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
  401d2c:	b480      	push	{r7}
  401d2e:	b085      	sub	sp, #20
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
  401d34:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401d36:	683b      	ldr	r3, [r7, #0]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d101      	bne.n	401d40 <twihs_mk_addr+0x14>
		return 0;
  401d3c:	2300      	movs	r3, #0
  401d3e:	e01d      	b.n	401d7c <twihs_mk_addr+0x50>

	val = addr[0];
  401d40:	687b      	ldr	r3, [r7, #4]
  401d42:	781b      	ldrb	r3, [r3, #0]
  401d44:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401d46:	683b      	ldr	r3, [r7, #0]
  401d48:	2b01      	cmp	r3, #1
  401d4a:	dd09      	ble.n	401d60 <twihs_mk_addr+0x34>
		val <<= 8;
  401d4c:	68fb      	ldr	r3, [r7, #12]
  401d4e:	021b      	lsls	r3, r3, #8
  401d50:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	3301      	adds	r3, #1
  401d56:	781b      	ldrb	r3, [r3, #0]
  401d58:	461a      	mov	r2, r3
  401d5a:	68fb      	ldr	r3, [r7, #12]
  401d5c:	4313      	orrs	r3, r2
  401d5e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b02      	cmp	r3, #2
  401d64:	dd09      	ble.n	401d7a <twihs_mk_addr+0x4e>
		val <<= 8;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	021b      	lsls	r3, r3, #8
  401d6a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	3302      	adds	r3, #2
  401d70:	781b      	ldrb	r3, [r3, #0]
  401d72:	461a      	mov	r2, r3
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	4313      	orrs	r3, r2
  401d78:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d7a:	68fb      	ldr	r3, [r7, #12]
}
  401d7c:	4618      	mov	r0, r3
  401d7e:	3714      	adds	r7, #20
  401d80:	46bd      	mov	sp, r7
  401d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d86:	4770      	bx	lr

00401d88 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b086      	sub	sp, #24
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	6078      	str	r0, [r7, #4]
  401d90:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401d92:	683b      	ldr	r3, [r7, #0]
  401d94:	68db      	ldr	r3, [r3, #12]
  401d96:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401d98:	683b      	ldr	r3, [r7, #0]
  401d9a:	689b      	ldr	r3, [r3, #8]
  401d9c:	613b      	str	r3, [r7, #16]
	uint32_t timeout = TWIHS_TIMEOUT;
  401d9e:	f643 2398 	movw	r3, #15000	; 0x3a98
  401da2:	60fb      	str	r3, [r7, #12]

	/* Check argument */
	if (cnt == 0) {
  401da4:	697b      	ldr	r3, [r7, #20]
  401da6:	2b00      	cmp	r3, #0
  401da8:	d101      	bne.n	401dae <twihs_master_read+0x26>
		return TWIHS_INVALID_ARGUMENT;
  401daa:	2301      	movs	r3, #1
  401dac:	e059      	b.n	401e62 <twihs_master_read+0xda>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401dae:	687b      	ldr	r3, [r7, #4]
  401db0:	2200      	movs	r2, #0
  401db2:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401db4:	683b      	ldr	r3, [r7, #0]
  401db6:	7c1b      	ldrb	r3, [r3, #16]
  401db8:	041b      	lsls	r3, r3, #16
  401dba:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dbe:	683b      	ldr	r3, [r7, #0]
  401dc0:	685b      	ldr	r3, [r3, #4]
  401dc2:	021b      	lsls	r3, r3, #8
  401dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dc8:	4313      	orrs	r3, r2
  401dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401dce:	687b      	ldr	r3, [r7, #4]
  401dd0:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401dd2:	687b      	ldr	r3, [r7, #4]
  401dd4:	2200      	movs	r2, #0
  401dd6:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dd8:	683a      	ldr	r2, [r7, #0]
  401dda:	683b      	ldr	r3, [r7, #0]
  401ddc:	685b      	ldr	r3, [r3, #4]
  401dde:	4610      	mov	r0, r2
  401de0:	4619      	mov	r1, r3
  401de2:	4b22      	ldr	r3, [pc, #136]	; (401e6c <twihs_master_read+0xe4>)
  401de4:	4798      	blx	r3
  401de6:	4602      	mov	r2, r0
  401de8:	687b      	ldr	r3, [r7, #4]
  401dea:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401dec:	687b      	ldr	r3, [r7, #4]
  401dee:	2201      	movs	r2, #1
  401df0:	601a      	str	r2, [r3, #0]

	while (cnt > 0) {
  401df2:	e029      	b.n	401e48 <twihs_master_read+0xc0>
		status = p_twihs->TWIHS_SR;
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	6a1b      	ldr	r3, [r3, #32]
  401df8:	60bb      	str	r3, [r7, #8]
		if (status & TWIHS_SR_NACK) {
  401dfa:	68bb      	ldr	r3, [r7, #8]
  401dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401e00:	2b00      	cmp	r3, #0
  401e02:	d001      	beq.n	401e08 <twihs_master_read+0x80>
			return TWIHS_RECEIVE_NACK;
  401e04:	2305      	movs	r3, #5
  401e06:	e02c      	b.n	401e62 <twihs_master_read+0xda>
		}
		if (!timeout--) {
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	1e5a      	subs	r2, r3, #1
  401e0c:	60fa      	str	r2, [r7, #12]
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d101      	bne.n	401e16 <twihs_master_read+0x8e>
			return TWIHS_ERROR_TIMEOUT;
  401e12:	2309      	movs	r3, #9
  401e14:	e025      	b.n	401e62 <twihs_master_read+0xda>
		}
		/* Last byte ? */
		if (cnt == 1) {
  401e16:	697b      	ldr	r3, [r7, #20]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d102      	bne.n	401e22 <twihs_master_read+0x9a>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	2202      	movs	r2, #2
  401e20:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401e22:	68bb      	ldr	r3, [r7, #8]
  401e24:	f003 0302 	and.w	r3, r3, #2
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d100      	bne.n	401e2e <twihs_master_read+0xa6>
			continue;
  401e2c:	e00c      	b.n	401e48 <twihs_master_read+0xc0>
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401e2e:	693b      	ldr	r3, [r7, #16]
  401e30:	1c5a      	adds	r2, r3, #1
  401e32:	613a      	str	r2, [r7, #16]
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401e38:	b2d2      	uxtb	r2, r2
  401e3a:	701a      	strb	r2, [r3, #0]

		cnt--;
  401e3c:	697b      	ldr	r3, [r7, #20]
  401e3e:	3b01      	subs	r3, #1
  401e40:	617b      	str	r3, [r7, #20]
		timeout = TWIHS_TIMEOUT;
  401e42:	f643 2398 	movw	r3, #15000	; 0x3a98
  401e46:	60fb      	str	r3, [r7, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401e48:	697b      	ldr	r3, [r7, #20]
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d1d2      	bne.n	401df4 <twihs_master_read+0x6c>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e4e:	bf00      	nop
  401e50:	687b      	ldr	r3, [r7, #4]
  401e52:	6a1b      	ldr	r3, [r3, #32]
  401e54:	f003 0301 	and.w	r3, r3, #1
  401e58:	2b00      	cmp	r3, #0
  401e5a:	d0f9      	beq.n	401e50 <twihs_master_read+0xc8>
	}

	p_twihs->TWIHS_SR;
  401e5c:	687b      	ldr	r3, [r7, #4]
  401e5e:	6a1b      	ldr	r3, [r3, #32]

	return TWIHS_SUCCESS;
  401e60:	2300      	movs	r3, #0
}
  401e62:	4618      	mov	r0, r3
  401e64:	3718      	adds	r7, #24
  401e66:	46bd      	mov	sp, r7
  401e68:	bd80      	pop	{r7, pc}
  401e6a:	bf00      	nop
  401e6c:	00401d2d 	.word	0x00401d2d

00401e70 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e70:	b580      	push	{r7, lr}
  401e72:	b086      	sub	sp, #24
  401e74:	af00      	add	r7, sp, #0
  401e76:	6078      	str	r0, [r7, #4]
  401e78:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
  401e7a:	683b      	ldr	r3, [r7, #0]
  401e7c:	68db      	ldr	r3, [r3, #12]
  401e7e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e80:	683b      	ldr	r3, [r7, #0]
  401e82:	689b      	ldr	r3, [r3, #8]
  401e84:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e86:	697b      	ldr	r3, [r7, #20]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	d101      	bne.n	401e90 <twihs_master_write+0x20>
		return TWIHS_INVALID_ARGUMENT;
  401e8c:	2301      	movs	r3, #1
  401e8e:	e056      	b.n	401f3e <twihs_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e90:	687b      	ldr	r3, [r7, #4]
  401e92:	2200      	movs	r2, #0
  401e94:	605a      	str	r2, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	7c1b      	ldrb	r3, [r3, #16]
  401e9a:	041b      	lsls	r3, r3, #16
  401e9c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ea0:	683b      	ldr	r3, [r7, #0]
  401ea2:	685b      	ldr	r3, [r3, #4]
  401ea4:	021b      	lsls	r3, r3, #8
  401ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401eaa:	431a      	orrs	r2, r3
  401eac:	687b      	ldr	r3, [r7, #4]
  401eae:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401eb0:	687b      	ldr	r3, [r7, #4]
  401eb2:	2200      	movs	r2, #0
  401eb4:	60da      	str	r2, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eb6:	683a      	ldr	r2, [r7, #0]
  401eb8:	683b      	ldr	r3, [r7, #0]
  401eba:	685b      	ldr	r3, [r3, #4]
  401ebc:	4610      	mov	r0, r2
  401ebe:	4619      	mov	r1, r3
  401ec0:	4b21      	ldr	r3, [pc, #132]	; (401f48 <twihs_master_write+0xd8>)
  401ec2:	4798      	blx	r3
  401ec4:	4602      	mov	r2, r0
  401ec6:	687b      	ldr	r3, [r7, #4]
  401ec8:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401eca:	e019      	b.n	401f00 <twihs_master_write+0x90>
		status = p_twihs->TWIHS_SR;
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	6a1b      	ldr	r3, [r3, #32]
  401ed0:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ed8:	2b00      	cmp	r3, #0
  401eda:	d001      	beq.n	401ee0 <twihs_master_write+0x70>
			return TWIHS_RECEIVE_NACK;
  401edc:	2305      	movs	r3, #5
  401ede:	e02e      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	f003 0304 	and.w	r3, r3, #4
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d100      	bne.n	401eec <twihs_master_write+0x7c>
			continue;
  401eea:	e009      	b.n	401f00 <twihs_master_write+0x90>
		}
		p_twihs->TWIHS_THR = *buffer++;
  401eec:	693b      	ldr	r3, [r7, #16]
  401eee:	1c5a      	adds	r2, r3, #1
  401ef0:	613a      	str	r2, [r7, #16]
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	461a      	mov	r2, r3
  401ef6:	687b      	ldr	r3, [r7, #4]
  401ef8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401efa:	697b      	ldr	r3, [r7, #20]
  401efc:	3b01      	subs	r3, #1
  401efe:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f00:	697b      	ldr	r3, [r7, #20]
  401f02:	2b00      	cmp	r3, #0
  401f04:	d1e2      	bne.n	401ecc <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	6a1b      	ldr	r3, [r3, #32]
  401f0a:	60fb      	str	r3, [r7, #12]
		if (status & TWIHS_SR_NACK) {
  401f0c:	68fb      	ldr	r3, [r7, #12]
  401f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401f12:	2b00      	cmp	r3, #0
  401f14:	d001      	beq.n	401f1a <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
  401f16:	2305      	movs	r3, #5
  401f18:	e011      	b.n	401f3e <twihs_master_write+0xce>
		}

		if (status & TWIHS_SR_TXRDY) {
  401f1a:	68fb      	ldr	r3, [r7, #12]
  401f1c:	f003 0304 	and.w	r3, r3, #4
  401f20:	2b00      	cmp	r3, #0
  401f22:	d004      	beq.n	401f2e <twihs_master_write+0xbe>
			break;
  401f24:	bf00      	nop
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401f26:	687b      	ldr	r3, [r7, #4]
  401f28:	2202      	movs	r2, #2
  401f2a:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f2c:	e000      	b.n	401f30 <twihs_master_write+0xc0>
		}

		if (status & TWIHS_SR_TXRDY) {
			break;
		}
	}
  401f2e:	e7ea      	b.n	401f06 <twihs_master_write+0x96>

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f30:	687b      	ldr	r3, [r7, #4]
  401f32:	6a1b      	ldr	r3, [r3, #32]
  401f34:	f003 0301 	and.w	r3, r3, #1
  401f38:	2b00      	cmp	r3, #0
  401f3a:	d0f9      	beq.n	401f30 <twihs_master_write+0xc0>
	}

	return TWIHS_SUCCESS;
  401f3c:	2300      	movs	r3, #0
}
  401f3e:	4618      	mov	r0, r3
  401f40:	3718      	adds	r7, #24
  401f42:	46bd      	mov	sp, r7
  401f44:	bd80      	pop	{r7, pc}
  401f46:	bf00      	nop
  401f48:	00401d2d 	.word	0x00401d2d

00401f4c <twihs_reset>:
 * \brief Reset TWIHS.
 *
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	2280      	movs	r2, #128	; 0x80
  401f58:	601a      	str	r2, [r3, #0]
	p_twihs->TWIHS_RHR;
  401f5a:	687b      	ldr	r3, [r7, #4]
  401f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr

00401f68 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401f68:	b480      	push	{r7}
  401f6a:	b085      	sub	sp, #20
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401f72:	2300      	movs	r3, #0
  401f74:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401f76:	687b      	ldr	r3, [r7, #4]
  401f78:	22ac      	movs	r2, #172	; 0xac
  401f7a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401f7c:	683b      	ldr	r3, [r7, #0]
  401f7e:	681a      	ldr	r2, [r3, #0]
  401f80:	683b      	ldr	r3, [r7, #0]
  401f82:	685b      	ldr	r3, [r3, #4]
  401f84:	fbb2 f3f3 	udiv	r3, r2, r3
  401f88:	091b      	lsrs	r3, r3, #4
  401f8a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d003      	beq.n	401f9a <uart_init+0x32>
  401f92:	68fb      	ldr	r3, [r7, #12]
  401f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401f98:	d301      	bcc.n	401f9e <uart_init+0x36>
		return 1;
  401f9a:	2301      	movs	r3, #1
  401f9c:	e00a      	b.n	401fb4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	68fa      	ldr	r2, [r7, #12]
  401fa2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401fa4:	683b      	ldr	r3, [r7, #0]
  401fa6:	689a      	ldr	r2, [r3, #8]
  401fa8:	687b      	ldr	r3, [r7, #4]
  401faa:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401fac:	687b      	ldr	r3, [r7, #4]
  401fae:	2250      	movs	r2, #80	; 0x50
  401fb0:	601a      	str	r2, [r3, #0]

	return 0;
  401fb2:	2300      	movs	r3, #0
}
  401fb4:	4618      	mov	r0, r3
  401fb6:	3714      	adds	r7, #20
  401fb8:	46bd      	mov	sp, r7
  401fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fbe:	4770      	bx	lr

00401fc0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401fc0:	b480      	push	{r7}
  401fc2:	b083      	sub	sp, #12
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	6078      	str	r0, [r7, #4]
  401fc8:	460b      	mov	r3, r1
  401fca:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401fcc:	687b      	ldr	r3, [r7, #4]
  401fce:	695b      	ldr	r3, [r3, #20]
  401fd0:	f003 0302 	and.w	r3, r3, #2
  401fd4:	2b00      	cmp	r3, #0
  401fd6:	d101      	bne.n	401fdc <uart_write+0x1c>
		return 1;
  401fd8:	2301      	movs	r3, #1
  401fda:	e003      	b.n	401fe4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401fdc:	78fa      	ldrb	r2, [r7, #3]
  401fde:	687b      	ldr	r3, [r7, #4]
  401fe0:	61da      	str	r2, [r3, #28]
	return 0;
  401fe2:	2300      	movs	r3, #0
}
  401fe4:	4618      	mov	r0, r3
  401fe6:	370c      	adds	r7, #12
  401fe8:	46bd      	mov	sp, r7
  401fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fee:	4770      	bx	lr

00401ff0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401ff0:	b480      	push	{r7}
  401ff2:	b083      	sub	sp, #12
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
  401ff8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	695b      	ldr	r3, [r3, #20]
  401ffe:	f003 0301 	and.w	r3, r3, #1
  402002:	2b00      	cmp	r3, #0
  402004:	d101      	bne.n	40200a <uart_read+0x1a>
		return 1;
  402006:	2301      	movs	r3, #1
  402008:	e005      	b.n	402016 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	699b      	ldr	r3, [r3, #24]
  40200e:	b2da      	uxtb	r2, r3
  402010:	683b      	ldr	r3, [r7, #0]
  402012:	701a      	strb	r2, [r3, #0]
	return 0;
  402014:	2300      	movs	r3, #0
}
  402016:	4618      	mov	r0, r3
  402018:	370c      	adds	r7, #12
  40201a:	46bd      	mov	sp, r7
  40201c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402020:	4770      	bx	lr
  402022:	bf00      	nop

00402024 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402024:	b480      	push	{r7}
  402026:	b089      	sub	sp, #36	; 0x24
  402028:	af00      	add	r7, sp, #0
  40202a:	60f8      	str	r0, [r7, #12]
  40202c:	60b9      	str	r1, [r7, #8]
  40202e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402030:	68bb      	ldr	r3, [r7, #8]
  402032:	011a      	lsls	r2, r3, #4
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	429a      	cmp	r2, r3
  402038:	d802      	bhi.n	402040 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40203a:	2310      	movs	r3, #16
  40203c:	61fb      	str	r3, [r7, #28]
  40203e:	e001      	b.n	402044 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  402040:	2308      	movs	r3, #8
  402042:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	00da      	lsls	r2, r3, #3
  402048:	69fb      	ldr	r3, [r7, #28]
  40204a:	68b9      	ldr	r1, [r7, #8]
  40204c:	fb01 f303 	mul.w	r3, r1, r3
  402050:	085b      	lsrs	r3, r3, #1
  402052:	441a      	add	r2, r3
  402054:	69fb      	ldr	r3, [r7, #28]
  402056:	68b9      	ldr	r1, [r7, #8]
  402058:	fb01 f303 	mul.w	r3, r1, r3
  40205c:	fbb2 f3f3 	udiv	r3, r2, r3
  402060:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  402062:	69bb      	ldr	r3, [r7, #24]
  402064:	08db      	lsrs	r3, r3, #3
  402066:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  402068:	69bb      	ldr	r3, [r7, #24]
  40206a:	f003 0307 	and.w	r3, r3, #7
  40206e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402070:	697b      	ldr	r3, [r7, #20]
  402072:	2b00      	cmp	r3, #0
  402074:	d003      	beq.n	40207e <usart_set_async_baudrate+0x5a>
  402076:	697b      	ldr	r3, [r7, #20]
  402078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40207c:	d301      	bcc.n	402082 <usart_set_async_baudrate+0x5e>
		return 1;
  40207e:	2301      	movs	r3, #1
  402080:	e00f      	b.n	4020a2 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  402082:	69fb      	ldr	r3, [r7, #28]
  402084:	2b08      	cmp	r3, #8
  402086:	d105      	bne.n	402094 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  402088:	68fb      	ldr	r3, [r7, #12]
  40208a:	685b      	ldr	r3, [r3, #4]
  40208c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  402090:	68fb      	ldr	r3, [r7, #12]
  402092:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402094:	693b      	ldr	r3, [r7, #16]
  402096:	041a      	lsls	r2, r3, #16
  402098:	697b      	ldr	r3, [r7, #20]
  40209a:	431a      	orrs	r2, r3
  40209c:	68fb      	ldr	r3, [r7, #12]
  40209e:	621a      	str	r2, [r3, #32]

	return 0;
  4020a0:	2300      	movs	r3, #0
}
  4020a2:	4618      	mov	r0, r3
  4020a4:	3724      	adds	r7, #36	; 0x24
  4020a6:	46bd      	mov	sp, r7
  4020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop

004020b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	b082      	sub	sp, #8
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4020b8:	6878      	ldr	r0, [r7, #4]
  4020ba:	4b0d      	ldr	r3, [pc, #52]	; (4020f0 <usart_reset+0x40>)
  4020bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2200      	movs	r2, #0
  4020c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	2200      	movs	r2, #0
  4020c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	2200      	movs	r2, #0
  4020ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4020d0:	6878      	ldr	r0, [r7, #4]
  4020d2:	4b08      	ldr	r3, [pc, #32]	; (4020f4 <usart_reset+0x44>)
  4020d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4020d6:	6878      	ldr	r0, [r7, #4]
  4020d8:	4b07      	ldr	r3, [pc, #28]	; (4020f8 <usart_reset+0x48>)
  4020da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4020dc:	6878      	ldr	r0, [r7, #4]
  4020de:	4b07      	ldr	r3, [pc, #28]	; (4020fc <usart_reset+0x4c>)
  4020e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4020e2:	6878      	ldr	r0, [r7, #4]
  4020e4:	4b06      	ldr	r3, [pc, #24]	; (402100 <usart_reset+0x50>)
  4020e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4020e8:	3708      	adds	r7, #8
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bd80      	pop	{r7, pc}
  4020ee:	bf00      	nop
  4020f0:	00402345 	.word	0x00402345
  4020f4:	004021a1 	.word	0x004021a1
  4020f8:	004021ed 	.word	0x004021ed
  4020fc:	00402255 	.word	0x00402255
  402100:	00402271 	.word	0x00402271

00402104 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402104:	b580      	push	{r7, lr}
  402106:	b084      	sub	sp, #16
  402108:	af00      	add	r7, sp, #0
  40210a:	60f8      	str	r0, [r7, #12]
  40210c:	60b9      	str	r1, [r7, #8]
  40210e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402110:	68f8      	ldr	r0, [r7, #12]
  402112:	4b1a      	ldr	r3, [pc, #104]	; (40217c <usart_init_rs232+0x78>)
  402114:	4798      	blx	r3

	ul_reg_val = 0;
  402116:	4b1a      	ldr	r3, [pc, #104]	; (402180 <usart_init_rs232+0x7c>)
  402118:	2200      	movs	r2, #0
  40211a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40211c:	68bb      	ldr	r3, [r7, #8]
  40211e:	2b00      	cmp	r3, #0
  402120:	d009      	beq.n	402136 <usart_init_rs232+0x32>
  402122:	68bb      	ldr	r3, [r7, #8]
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	68f8      	ldr	r0, [r7, #12]
  402128:	4619      	mov	r1, r3
  40212a:	687a      	ldr	r2, [r7, #4]
  40212c:	4b15      	ldr	r3, [pc, #84]	; (402184 <usart_init_rs232+0x80>)
  40212e:	4798      	blx	r3
  402130:	4603      	mov	r3, r0
  402132:	2b00      	cmp	r3, #0
  402134:	d001      	beq.n	40213a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402136:	2301      	movs	r3, #1
  402138:	e01b      	b.n	402172 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	685a      	ldr	r2, [r3, #4]
  40213e:	68bb      	ldr	r3, [r7, #8]
  402140:	689b      	ldr	r3, [r3, #8]
  402142:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402144:	68bb      	ldr	r3, [r7, #8]
  402146:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402148:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40214a:	68bb      	ldr	r3, [r7, #8]
  40214c:	68db      	ldr	r3, [r3, #12]
  40214e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402150:	4b0b      	ldr	r3, [pc, #44]	; (402180 <usart_init_rs232+0x7c>)
  402152:	681b      	ldr	r3, [r3, #0]
  402154:	4313      	orrs	r3, r2
  402156:	4a0a      	ldr	r2, [pc, #40]	; (402180 <usart_init_rs232+0x7c>)
  402158:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40215a:	4b09      	ldr	r3, [pc, #36]	; (402180 <usart_init_rs232+0x7c>)
  40215c:	681b      	ldr	r3, [r3, #0]
  40215e:	4a08      	ldr	r2, [pc, #32]	; (402180 <usart_init_rs232+0x7c>)
  402160:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  402162:	68fb      	ldr	r3, [r7, #12]
  402164:	685a      	ldr	r2, [r3, #4]
  402166:	4b06      	ldr	r3, [pc, #24]	; (402180 <usart_init_rs232+0x7c>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	431a      	orrs	r2, r3
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	605a      	str	r2, [r3, #4]

	return 0;
  402170:	2300      	movs	r3, #0
}
  402172:	4618      	mov	r0, r3
  402174:	3710      	adds	r7, #16
  402176:	46bd      	mov	sp, r7
  402178:	bd80      	pop	{r7, pc}
  40217a:	bf00      	nop
  40217c:	004020b1 	.word	0x004020b1
  402180:	20400998 	.word	0x20400998
  402184:	00402025 	.word	0x00402025

00402188 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  402188:	b480      	push	{r7}
  40218a:	b083      	sub	sp, #12
  40218c:	af00      	add	r7, sp, #0
  40218e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	2240      	movs	r2, #64	; 0x40
  402194:	601a      	str	r2, [r3, #0]
}
  402196:	370c      	adds	r7, #12
  402198:	46bd      	mov	sp, r7
  40219a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40219e:	4770      	bx	lr

004021a0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4021a0:	b480      	push	{r7}
  4021a2:	b083      	sub	sp, #12
  4021a4:	af00      	add	r7, sp, #0
  4021a6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	2288      	movs	r2, #136	; 0x88
  4021ac:	601a      	str	r2, [r3, #0]
}
  4021ae:	370c      	adds	r7, #12
  4021b0:	46bd      	mov	sp, r7
  4021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021b6:	4770      	bx	lr

004021b8 <usart_set_tx_timeguard>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param timeguard The value of transmit timeguard.
 */
void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
  4021c0:	6039      	str	r1, [r7, #0]
	p_usart->US_TTGR = timeguard;
  4021c2:	687b      	ldr	r3, [r7, #4]
  4021c4:	683a      	ldr	r2, [r7, #0]
  4021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
  4021c8:	370c      	adds	r7, #12
  4021ca:	46bd      	mov	sp, r7
  4021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop

004021d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4021d4:	b480      	push	{r7}
  4021d6:	b083      	sub	sp, #12
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4021dc:	687b      	ldr	r3, [r7, #4]
  4021de:	2210      	movs	r2, #16
  4021e0:	601a      	str	r2, [r3, #0]
}
  4021e2:	370c      	adds	r7, #12
  4021e4:	46bd      	mov	sp, r7
  4021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ea:	4770      	bx	lr

004021ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4021ec:	b480      	push	{r7}
  4021ee:	b083      	sub	sp, #12
  4021f0:	af00      	add	r7, sp, #0
  4021f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4021f4:	687b      	ldr	r3, [r7, #4]
  4021f6:	2224      	movs	r2, #36	; 0x24
  4021f8:	601a      	str	r2, [r3, #0]
}
  4021fa:	370c      	adds	r7, #12
  4021fc:	46bd      	mov	sp, r7
  4021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402202:	4770      	bx	lr

00402204 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402204:	b480      	push	{r7}
  402206:	b083      	sub	sp, #12
  402208:	af00      	add	r7, sp, #0
  40220a:	6078      	str	r0, [r7, #4]
  40220c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40220e:	687b      	ldr	r3, [r7, #4]
  402210:	683a      	ldr	r2, [r7, #0]
  402212:	609a      	str	r2, [r3, #8]
}
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop

00402220 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  402220:	b480      	push	{r7}
  402222:	b083      	sub	sp, #12
  402224:	af00      	add	r7, sp, #0
  402226:	6078      	str	r0, [r7, #4]
  402228:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40222a:	687b      	ldr	r3, [r7, #4]
  40222c:	683a      	ldr	r2, [r7, #0]
  40222e:	60da      	str	r2, [r3, #12]
}
  402230:	370c      	adds	r7, #12
  402232:	46bd      	mov	sp, r7
  402234:	f85d 7b04 	ldr.w	r7, [sp], #4
  402238:	4770      	bx	lr
  40223a:	bf00      	nop

0040223c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  402244:	687b      	ldr	r3, [r7, #4]
  402246:	695b      	ldr	r3, [r3, #20]
}
  402248:	4618      	mov	r0, r3
  40224a:	370c      	adds	r7, #12
  40224c:	46bd      	mov	sp, r7
  40224e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402252:	4770      	bx	lr

00402254 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  402254:	b480      	push	{r7}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
  40225a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402262:	601a      	str	r2, [r3, #0]
}
  402264:	370c      	adds	r7, #12
  402266:	46bd      	mov	sp, r7
  402268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop

00402270 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40227e:	601a      	str	r2, [r3, #0]
}
  402280:	370c      	adds	r7, #12
  402282:	46bd      	mov	sp, r7
  402284:	f85d 7b04 	ldr.w	r7, [sp], #4
  402288:	4770      	bx	lr
  40228a:	bf00      	nop

0040228c <usart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t usart_is_tx_empty(Usart *p_usart)
{
  40228c:	b480      	push	{r7}
  40228e:	b083      	sub	sp, #12
  402290:	af00      	add	r7, sp, #0
  402292:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
  402294:	687b      	ldr	r3, [r7, #4]
  402296:	695b      	ldr	r3, [r3, #20]
  402298:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40229c:	2b00      	cmp	r3, #0
  40229e:	bf14      	ite	ne
  4022a0:	2301      	movne	r3, #1
  4022a2:	2300      	moveq	r3, #0
  4022a4:	b2db      	uxtb	r3, r3
}
  4022a6:	4618      	mov	r0, r3
  4022a8:	370c      	adds	r7, #12
  4022aa:	46bd      	mov	sp, r7
  4022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop

004022b4 <usart_is_rx_ready>:
 *
 * \retval 1 Some data has been received.
 * \retval 0 No data has been received.
 */
uint32_t usart_is_rx_ready(Usart *p_usart)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	695b      	ldr	r3, [r3, #20]
  4022c0:	f003 0301 	and.w	r3, r3, #1
  4022c4:	2b00      	cmp	r3, #0
  4022c6:	bf14      	ite	ne
  4022c8:	2301      	movne	r3, #1
  4022ca:	2300      	moveq	r3, #0
  4022cc:	b2db      	uxtb	r3, r3
}
  4022ce:	4618      	mov	r0, r3
  4022d0:	370c      	adds	r7, #12
  4022d2:	46bd      	mov	sp, r7
  4022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022d8:	4770      	bx	lr
  4022da:	bf00      	nop

004022dc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  4022dc:	b480      	push	{r7}
  4022de:	b083      	sub	sp, #12
  4022e0:	af00      	add	r7, sp, #0
  4022e2:	6078      	str	r0, [r7, #4]
  4022e4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4022e6:	687b      	ldr	r3, [r7, #4]
  4022e8:	695b      	ldr	r3, [r3, #20]
  4022ea:	f003 0302 	and.w	r3, r3, #2
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d101      	bne.n	4022f6 <usart_write+0x1a>
		return 1;
  4022f2:	2301      	movs	r3, #1
  4022f4:	e005      	b.n	402302 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4022f6:	683b      	ldr	r3, [r7, #0]
  4022f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4022fc:	687b      	ldr	r3, [r7, #4]
  4022fe:	61da      	str	r2, [r3, #28]
	return 0;
  402300:	2300      	movs	r3, #0
}
  402302:	4618      	mov	r0, r3
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	f85d 7b04 	ldr.w	r7, [sp], #4
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop

00402310 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  402310:	b480      	push	{r7}
  402312:	b083      	sub	sp, #12
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
  402318:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40231a:	687b      	ldr	r3, [r7, #4]
  40231c:	695b      	ldr	r3, [r3, #20]
  40231e:	f003 0301 	and.w	r3, r3, #1
  402322:	2b00      	cmp	r3, #0
  402324:	d101      	bne.n	40232a <usart_read+0x1a>
		return 1;
  402326:	2301      	movs	r3, #1
  402328:	e006      	b.n	402338 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	699b      	ldr	r3, [r3, #24]
  40232e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  402332:	683b      	ldr	r3, [r7, #0]
  402334:	601a      	str	r2, [r3, #0]

	return 0;
  402336:	2300      	movs	r3, #0
}
  402338:	4618      	mov	r0, r3
  40233a:	370c      	adds	r7, #12
  40233c:	46bd      	mov	sp, r7
  40233e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402342:	4770      	bx	lr

00402344 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  402344:	b480      	push	{r7}
  402346:	b083      	sub	sp, #12
  402348:	af00      	add	r7, sp, #0
  40234a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40234c:	687b      	ldr	r3, [r7, #4]
  40234e:	4a04      	ldr	r2, [pc, #16]	; (402360 <usart_disable_writeprotect+0x1c>)
  402350:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  402354:	370c      	adds	r7, #12
  402356:	46bd      	mov	sp, r7
  402358:	f85d 7b04 	ldr.w	r7, [sp], #4
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop
  402360:	55534100 	.word	0x55534100

00402364 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402364:	b580      	push	{r7, lr}
  402366:	b082      	sub	sp, #8
  402368:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40236a:	4b16      	ldr	r3, [pc, #88]	; (4023c4 <Reset_Handler+0x60>)
  40236c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40236e:	4b16      	ldr	r3, [pc, #88]	; (4023c8 <Reset_Handler+0x64>)
  402370:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  402372:	687a      	ldr	r2, [r7, #4]
  402374:	683b      	ldr	r3, [r7, #0]
  402376:	429a      	cmp	r2, r3
  402378:	d00c      	beq.n	402394 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40237a:	e007      	b.n	40238c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40237c:	683b      	ldr	r3, [r7, #0]
  40237e:	1d1a      	adds	r2, r3, #4
  402380:	603a      	str	r2, [r7, #0]
  402382:	687a      	ldr	r2, [r7, #4]
  402384:	1d11      	adds	r1, r2, #4
  402386:	6079      	str	r1, [r7, #4]
  402388:	6812      	ldr	r2, [r2, #0]
  40238a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40238c:	683b      	ldr	r3, [r7, #0]
  40238e:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <Reset_Handler+0x68>)
  402390:	4293      	cmp	r3, r2
  402392:	d3f3      	bcc.n	40237c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402394:	4b0e      	ldr	r3, [pc, #56]	; (4023d0 <Reset_Handler+0x6c>)
  402396:	603b      	str	r3, [r7, #0]
  402398:	e004      	b.n	4023a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40239a:	683b      	ldr	r3, [r7, #0]
  40239c:	1d1a      	adds	r2, r3, #4
  40239e:	603a      	str	r2, [r7, #0]
  4023a0:	2200      	movs	r2, #0
  4023a2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4023a4:	683b      	ldr	r3, [r7, #0]
  4023a6:	4a0b      	ldr	r2, [pc, #44]	; (4023d4 <Reset_Handler+0x70>)
  4023a8:	4293      	cmp	r3, r2
  4023aa:	d3f6      	bcc.n	40239a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4023ac:	4b0a      	ldr	r3, [pc, #40]	; (4023d8 <Reset_Handler+0x74>)
  4023ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4023b0:	4a0a      	ldr	r2, [pc, #40]	; (4023dc <Reset_Handler+0x78>)
  4023b2:	687b      	ldr	r3, [r7, #4]
  4023b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4023b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4023ba:	4b09      	ldr	r3, [pc, #36]	; (4023e0 <Reset_Handler+0x7c>)
  4023bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4023be:	4b09      	ldr	r3, [pc, #36]	; (4023e4 <Reset_Handler+0x80>)
  4023c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4023c2:	e7fe      	b.n	4023c2 <Reset_Handler+0x5e>
  4023c4:	0040d274 	.word	0x0040d274
  4023c8:	20400000 	.word	0x20400000
  4023cc:	2040090c 	.word	0x2040090c
  4023d0:	2040090c 	.word	0x2040090c
  4023d4:	2040183c 	.word	0x2040183c
  4023d8:	00400000 	.word	0x00400000
  4023dc:	e000ed00 	.word	0xe000ed00
  4023e0:	00406d75 	.word	0x00406d75
  4023e4:	00406559 	.word	0x00406559

004023e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4023e8:	b480      	push	{r7}
  4023ea:	af00      	add	r7, sp, #0
        while (1) {
        }
  4023ec:	e7fe      	b.n	4023ec <Dummy_Handler+0x4>
  4023ee:	bf00      	nop

004023f0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4023f0:	b480      	push	{r7}
  4023f2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023f4:	4b51      	ldr	r3, [pc, #324]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023f8:	f003 0303 	and.w	r3, r3, #3
  4023fc:	2b01      	cmp	r3, #1
  4023fe:	d014      	beq.n	40242a <SystemCoreClockUpdate+0x3a>
  402400:	2b01      	cmp	r3, #1
  402402:	d302      	bcc.n	40240a <SystemCoreClockUpdate+0x1a>
  402404:	2b02      	cmp	r3, #2
  402406:	d038      	beq.n	40247a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402408:	e07b      	b.n	402502 <SystemCoreClockUpdate+0x112>
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40240a:	4b4d      	ldr	r3, [pc, #308]	; (402540 <SystemCoreClockUpdate+0x150>)
  40240c:	695b      	ldr	r3, [r3, #20]
  40240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402412:	2b00      	cmp	r3, #0
  402414:	d004      	beq.n	402420 <SystemCoreClockUpdate+0x30>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402416:	4b4b      	ldr	r3, [pc, #300]	; (402544 <SystemCoreClockUpdate+0x154>)
  402418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40241c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
      }
    break;
  40241e:	e070      	b.n	402502 <SystemCoreClockUpdate+0x112>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402420:	4b48      	ldr	r3, [pc, #288]	; (402544 <SystemCoreClockUpdate+0x154>)
  402422:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402426:	601a      	str	r2, [r3, #0]
      }
    break;
  402428:	e06b      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40242a:	4b44      	ldr	r3, [pc, #272]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40242c:	6a1b      	ldr	r3, [r3, #32]
  40242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402432:	2b00      	cmp	r3, #0
  402434:	d003      	beq.n	40243e <SystemCoreClockUpdate+0x4e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402436:	4b43      	ldr	r3, [pc, #268]	; (402544 <SystemCoreClockUpdate+0x154>)
  402438:	4a43      	ldr	r2, [pc, #268]	; (402548 <SystemCoreClockUpdate+0x158>)
  40243a:	601a      	str	r2, [r3, #0]
  40243c:	e01c      	b.n	402478 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40243e:	4b41      	ldr	r3, [pc, #260]	; (402544 <SystemCoreClockUpdate+0x154>)
  402440:	4a42      	ldr	r2, [pc, #264]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402442:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402444:	4b3d      	ldr	r3, [pc, #244]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40244c:	2b10      	cmp	r3, #16
  40244e:	d004      	beq.n	40245a <SystemCoreClockUpdate+0x6a>
  402450:	2b20      	cmp	r3, #32
  402452:	d008      	beq.n	402466 <SystemCoreClockUpdate+0x76>
  402454:	2b00      	cmp	r3, #0
  402456:	d00e      	beq.n	402476 <SystemCoreClockUpdate+0x86>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  402458:	e00e      	b.n	402478 <SystemCoreClockUpdate+0x88>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40245a:	4b3a      	ldr	r3, [pc, #232]	; (402544 <SystemCoreClockUpdate+0x154>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	005b      	lsls	r3, r3, #1
  402460:	4a38      	ldr	r2, [pc, #224]	; (402544 <SystemCoreClockUpdate+0x154>)
  402462:	6013      	str	r3, [r2, #0]
          break;
  402464:	e008      	b.n	402478 <SystemCoreClockUpdate+0x88>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402466:	4b37      	ldr	r3, [pc, #220]	; (402544 <SystemCoreClockUpdate+0x154>)
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	4613      	mov	r3, r2
  40246c:	005b      	lsls	r3, r3, #1
  40246e:	4413      	add	r3, r2
  402470:	4a34      	ldr	r2, [pc, #208]	; (402544 <SystemCoreClockUpdate+0x154>)
  402472:	6013      	str	r3, [r2, #0]
          break;
  402474:	e000      	b.n	402478 <SystemCoreClockUpdate+0x88>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  402476:	bf00      	nop

          default:
          break;
        }
      }
    break;
  402478:	e043      	b.n	402502 <SystemCoreClockUpdate+0x112>

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40247a:	4b30      	ldr	r3, [pc, #192]	; (40253c <SystemCoreClockUpdate+0x14c>)
  40247c:	6a1b      	ldr	r3, [r3, #32]
  40247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402482:	2b00      	cmp	r3, #0
  402484:	d003      	beq.n	40248e <SystemCoreClockUpdate+0x9e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <SystemCoreClockUpdate+0x154>)
  402488:	4a2f      	ldr	r2, [pc, #188]	; (402548 <SystemCoreClockUpdate+0x158>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	e01c      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40248e:	4b2d      	ldr	r3, [pc, #180]	; (402544 <SystemCoreClockUpdate+0x154>)
  402490:	4a2e      	ldr	r2, [pc, #184]	; (40254c <SystemCoreClockUpdate+0x15c>)
  402492:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402494:	4b29      	ldr	r3, [pc, #164]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402496:	6a1b      	ldr	r3, [r3, #32]
  402498:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40249c:	2b10      	cmp	r3, #16
  40249e:	d004      	beq.n	4024aa <SystemCoreClockUpdate+0xba>
  4024a0:	2b20      	cmp	r3, #32
  4024a2:	d008      	beq.n	4024b6 <SystemCoreClockUpdate+0xc6>
  4024a4:	2b00      	cmp	r3, #0
  4024a6:	d00e      	beq.n	4024c6 <SystemCoreClockUpdate+0xd6>
          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
          break;

          default:
          break;
  4024a8:	e00e      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4024aa:	4b26      	ldr	r3, [pc, #152]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ac:	681b      	ldr	r3, [r3, #0]
  4024ae:	005b      	lsls	r3, r3, #1
  4024b0:	4a24      	ldr	r2, [pc, #144]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b2:	6013      	str	r3, [r2, #0]
          break;
  4024b4:	e008      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4024b6:	4b23      	ldr	r3, [pc, #140]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024b8:	681a      	ldr	r2, [r3, #0]
  4024ba:	4613      	mov	r3, r2
  4024bc:	005b      	lsls	r3, r3, #1
  4024be:	4413      	add	r3, r2
  4024c0:	4a20      	ldr	r2, [pc, #128]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024c2:	6013      	str	r3, [r2, #0]
          break;
  4024c4:	e000      	b.n	4024c8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;
  4024c6:	bf00      	nop
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4024c8:	4b1c      	ldr	r3, [pc, #112]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024cc:	f003 0303 	and.w	r3, r3, #3
  4024d0:	2b02      	cmp	r3, #2
  4024d2:	d115      	bne.n	402500 <SystemCoreClockUpdate+0x110>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4024d4:	4b19      	ldr	r3, [pc, #100]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4024d8:	4b1d      	ldr	r3, [pc, #116]	; (402550 <SystemCoreClockUpdate+0x160>)
  4024da:	4013      	ands	r3, r2
  4024dc:	0c1b      	lsrs	r3, r3, #16
  4024de:	3301      	adds	r3, #1
  4024e0:	4a18      	ldr	r2, [pc, #96]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024e2:	6812      	ldr	r2, [r2, #0]
  4024e4:	fb02 f303 	mul.w	r3, r2, r3
  4024e8:	4a16      	ldr	r2, [pc, #88]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024ea:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4024ec:	4b13      	ldr	r3, [pc, #76]	; (40253c <SystemCoreClockUpdate+0x14c>)
  4024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4024f0:	b2db      	uxtb	r3, r3
  4024f2:	4a14      	ldr	r2, [pc, #80]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024f4:	6812      	ldr	r2, [r2, #0]
  4024f6:	fbb2 f3f3 	udiv	r3, r2, r3
  4024fa:	4a12      	ldr	r2, [pc, #72]	; (402544 <SystemCoreClockUpdate+0x154>)
  4024fc:	6013      	str	r3, [r2, #0]
      }
    break;
  4024fe:	e7ff      	b.n	402500 <SystemCoreClockUpdate+0x110>
  402500:	bf00      	nop

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402502:	4b0e      	ldr	r3, [pc, #56]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402506:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40250a:	2b70      	cmp	r3, #112	; 0x70
  40250c:	d108      	bne.n	402520 <SystemCoreClockUpdate+0x130>
  {
    SystemCoreClock /= 3U;
  40250e:	4b0d      	ldr	r3, [pc, #52]	; (402544 <SystemCoreClockUpdate+0x154>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	4a10      	ldr	r2, [pc, #64]	; (402554 <SystemCoreClockUpdate+0x164>)
  402514:	fba2 2303 	umull	r2, r3, r2, r3
  402518:	085b      	lsrs	r3, r3, #1
  40251a:	4a0a      	ldr	r2, [pc, #40]	; (402544 <SystemCoreClockUpdate+0x154>)
  40251c:	6013      	str	r3, [r2, #0]
  40251e:	e009      	b.n	402534 <SystemCoreClockUpdate+0x144>
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402520:	4b06      	ldr	r3, [pc, #24]	; (40253c <SystemCoreClockUpdate+0x14c>)
  402522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402524:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402528:	091a      	lsrs	r2, r3, #4
  40252a:	4b06      	ldr	r3, [pc, #24]	; (402544 <SystemCoreClockUpdate+0x154>)
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	40d3      	lsrs	r3, r2
  402530:	4a04      	ldr	r2, [pc, #16]	; (402544 <SystemCoreClockUpdate+0x154>)
  402532:	6013      	str	r3, [r2, #0]
  }
}
  402534:	46bd      	mov	sp, r7
  402536:	f85d 7b04 	ldr.w	r7, [sp], #4
  40253a:	4770      	bx	lr
  40253c:	400e0600 	.word	0x400e0600
  402540:	400e1810 	.word	0x400e1810
  402544:	20400004 	.word	0x20400004
  402548:	00b71b00 	.word	0x00b71b00
  40254c:	003d0900 	.word	0x003d0900
  402550:	07ff0000 	.word	0x07ff0000
  402554:	aaaaaaab 	.word	0xaaaaaaab

00402558 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402558:	b480      	push	{r7}
  40255a:	b083      	sub	sp, #12
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402560:	687b      	ldr	r3, [r7, #4]
  402562:	4a18      	ldr	r2, [pc, #96]	; (4025c4 <system_init_flash+0x6c>)
  402564:	4293      	cmp	r3, r2
  402566:	d804      	bhi.n	402572 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402568:	4b17      	ldr	r3, [pc, #92]	; (4025c8 <system_init_flash+0x70>)
  40256a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40256e:	601a      	str	r2, [r3, #0]
  402570:	e023      	b.n	4025ba <system_init_flash+0x62>
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402572:	687b      	ldr	r3, [r7, #4]
  402574:	4a15      	ldr	r2, [pc, #84]	; (4025cc <system_init_flash+0x74>)
  402576:	4293      	cmp	r3, r2
  402578:	d803      	bhi.n	402582 <system_init_flash+0x2a>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40257a:	4b13      	ldr	r3, [pc, #76]	; (4025c8 <system_init_flash+0x70>)
  40257c:	4a14      	ldr	r2, [pc, #80]	; (4025d0 <system_init_flash+0x78>)
  40257e:	601a      	str	r2, [r3, #0]
  402580:	e01b      	b.n	4025ba <system_init_flash+0x62>
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402582:	687b      	ldr	r3, [r7, #4]
  402584:	4a13      	ldr	r2, [pc, #76]	; (4025d4 <system_init_flash+0x7c>)
  402586:	4293      	cmp	r3, r2
  402588:	d803      	bhi.n	402592 <system_init_flash+0x3a>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40258a:	4b0f      	ldr	r3, [pc, #60]	; (4025c8 <system_init_flash+0x70>)
  40258c:	4a12      	ldr	r2, [pc, #72]	; (4025d8 <system_init_flash+0x80>)
  40258e:	601a      	str	r2, [r3, #0]
  402590:	e013      	b.n	4025ba <system_init_flash+0x62>
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402592:	687b      	ldr	r3, [r7, #4]
  402594:	4a11      	ldr	r2, [pc, #68]	; (4025dc <system_init_flash+0x84>)
  402596:	4293      	cmp	r3, r2
  402598:	d803      	bhi.n	4025a2 <system_init_flash+0x4a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40259a:	4b0b      	ldr	r3, [pc, #44]	; (4025c8 <system_init_flash+0x70>)
  40259c:	4a10      	ldr	r2, [pc, #64]	; (4025e0 <system_init_flash+0x88>)
  40259e:	601a      	str	r2, [r3, #0]
  4025a0:	e00b      	b.n	4025ba <system_init_flash+0x62>
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4025a2:	687b      	ldr	r3, [r7, #4]
  4025a4:	4a0f      	ldr	r2, [pc, #60]	; (4025e4 <system_init_flash+0x8c>)
  4025a6:	4293      	cmp	r3, r2
  4025a8:	d804      	bhi.n	4025b4 <system_init_flash+0x5c>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4025aa:	4b07      	ldr	r3, [pc, #28]	; (4025c8 <system_init_flash+0x70>)
  4025ac:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	e002      	b.n	4025ba <system_init_flash+0x62>
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4025b4:	4b04      	ldr	r3, [pc, #16]	; (4025c8 <system_init_flash+0x70>)
  4025b6:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <system_init_flash+0x90>)
  4025b8:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4025ba:	370c      	adds	r7, #12
  4025bc:	46bd      	mov	sp, r7
  4025be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025c2:	4770      	bx	lr
  4025c4:	01312cff 	.word	0x01312cff
  4025c8:	400e0c00 	.word	0x400e0c00
  4025cc:	026259ff 	.word	0x026259ff
  4025d0:	04000100 	.word	0x04000100
  4025d4:	039386ff 	.word	0x039386ff
  4025d8:	04000200 	.word	0x04000200
  4025dc:	04c4b3ff 	.word	0x04c4b3ff
  4025e0:	04000300 	.word	0x04000300
  4025e4:	05f5e0ff 	.word	0x05f5e0ff
  4025e8:	04000500 	.word	0x04000500

004025ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4025ec:	b480      	push	{r7}
  4025ee:	b085      	sub	sp, #20
  4025f0:	af00      	add	r7, sp, #0
  4025f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4025f4:	4b10      	ldr	r3, [pc, #64]	; (402638 <_sbrk+0x4c>)
  4025f6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4025f8:	4b10      	ldr	r3, [pc, #64]	; (40263c <_sbrk+0x50>)
  4025fa:	681b      	ldr	r3, [r3, #0]
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d102      	bne.n	402606 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402600:	4b0e      	ldr	r3, [pc, #56]	; (40263c <_sbrk+0x50>)
  402602:	4a0f      	ldr	r2, [pc, #60]	; (402640 <_sbrk+0x54>)
  402604:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402606:	4b0d      	ldr	r3, [pc, #52]	; (40263c <_sbrk+0x50>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40260c:	68ba      	ldr	r2, [r7, #8]
  40260e:	687b      	ldr	r3, [r7, #4]
  402610:	441a      	add	r2, r3
  402612:	68fb      	ldr	r3, [r7, #12]
  402614:	429a      	cmp	r2, r3
  402616:	dd02      	ble.n	40261e <_sbrk+0x32>
		return (caddr_t) -1;	
  402618:	f04f 33ff 	mov.w	r3, #4294967295
  40261c:	e006      	b.n	40262c <_sbrk+0x40>
	}

	heap += incr;
  40261e:	4b07      	ldr	r3, [pc, #28]	; (40263c <_sbrk+0x50>)
  402620:	681a      	ldr	r2, [r3, #0]
  402622:	687b      	ldr	r3, [r7, #4]
  402624:	4413      	add	r3, r2
  402626:	4a05      	ldr	r2, [pc, #20]	; (40263c <_sbrk+0x50>)
  402628:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40262a:	68bb      	ldr	r3, [r7, #8]
}
  40262c:	4618      	mov	r0, r3
  40262e:	3714      	adds	r7, #20
  402630:	46bd      	mov	sp, r7
  402632:	f85d 7b04 	ldr.w	r7, [sp], #4
  402636:	4770      	bx	lr
  402638:	2045fffc 	.word	0x2045fffc
  40263c:	2040099c 	.word	0x2040099c
  402640:	20403a40 	.word	0x20403a40

00402644 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402644:	b480      	push	{r7}
  402646:	b083      	sub	sp, #12
  402648:	af00      	add	r7, sp, #0
  40264a:	6078      	str	r0, [r7, #4]
	return -1;
  40264c:	f04f 33ff 	mov.w	r3, #4294967295
}
  402650:	4618      	mov	r0, r3
  402652:	370c      	adds	r7, #12
  402654:	46bd      	mov	sp, r7
  402656:	f85d 7b04 	ldr.w	r7, [sp], #4
  40265a:	4770      	bx	lr

0040265c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40265c:	b480      	push	{r7}
  40265e:	b083      	sub	sp, #12
  402660:	af00      	add	r7, sp, #0
  402662:	6078      	str	r0, [r7, #4]
  402664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402666:	683b      	ldr	r3, [r7, #0]
  402668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40266c:	605a      	str	r2, [r3, #4]

	return 0;
  40266e:	2300      	movs	r3, #0
}
  402670:	4618      	mov	r0, r3
  402672:	370c      	adds	r7, #12
  402674:	46bd      	mov	sp, r7
  402676:	f85d 7b04 	ldr.w	r7, [sp], #4
  40267a:	4770      	bx	lr

0040267c <_isatty>:

extern int _isatty(int file)
{
  40267c:	b480      	push	{r7}
  40267e:	b083      	sub	sp, #12
  402680:	af00      	add	r7, sp, #0
  402682:	6078      	str	r0, [r7, #4]
	return 1;
  402684:	2301      	movs	r3, #1
}
  402686:	4618      	mov	r0, r3
  402688:	370c      	adds	r7, #12
  40268a:	46bd      	mov	sp, r7
  40268c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402690:	4770      	bx	lr
  402692:	bf00      	nop

00402694 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  402694:	b480      	push	{r7}
  402696:	b085      	sub	sp, #20
  402698:	af00      	add	r7, sp, #0
  40269a:	60f8      	str	r0, [r7, #12]
  40269c:	60b9      	str	r1, [r7, #8]
  40269e:	607a      	str	r2, [r7, #4]
	return 0;
  4026a0:	2300      	movs	r3, #0
}
  4026a2:	4618      	mov	r0, r3
  4026a4:	3714      	adds	r7, #20
  4026a6:	46bd      	mov	sp, r7
  4026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ac:	4770      	bx	lr
  4026ae:	bf00      	nop

004026b0 <print_ecdbg>:
static const char HEX_DIGITS[16] = "0123456789ABCDEF";



void print_ecdbg(const char *str)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b082      	sub	sp, #8
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]
  // Redirection to the debug USART.
  func_transmit(str, strlen(str));
  4026b8:	6878      	ldr	r0, [r7, #4]
  4026ba:	4b05      	ldr	r3, [pc, #20]	; (4026d0 <print_ecdbg+0x20>)
  4026bc:	4798      	blx	r3
  4026be:	4603      	mov	r3, r0
  4026c0:	6878      	ldr	r0, [r7, #4]
  4026c2:	4619      	mov	r1, r3
  4026c4:	4b03      	ldr	r3, [pc, #12]	; (4026d4 <print_ecdbg+0x24>)
  4026c6:	4798      	blx	r3
}
  4026c8:	3708      	adds	r7, #8
  4026ca:	46bd      	mov	sp, r7
  4026cc:	bd80      	pop	{r7, pc}
  4026ce:	bf00      	nop
  4026d0:	0040702d 	.word	0x0040702d
  4026d4:	00403d45 	.word	0x00403d45

004026d8 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
  4026d8:	b580      	push	{r7, lr}
  4026da:	b088      	sub	sp, #32
  4026dc:	af00      	add	r7, sp, #0
  4026de:	4603      	mov	r3, r0
  4026e0:	71fb      	strb	r3, [r7, #7]
  4026e2:	460b      	mov	r3, r1
  4026e4:	71bb      	strb	r3, [r7, #6]
  4026e6:	4613      	mov	r3, r2
  4026e8:	717b      	strb	r3, [r7, #5]
	uint8_t pack[2];
	twihs_packet_t twi_package;

	pack[0] = reg_index;
  4026ea:	79bb      	ldrb	r3, [r7, #6]
  4026ec:	773b      	strb	r3, [r7, #28]
	pack[1] = data;
  4026ee:	797b      	ldrb	r3, [r7, #5]
  4026f0:	777b      	strb	r3, [r7, #29]

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  4026f2:	79fb      	ldrb	r3, [r7, #7]
  4026f4:	2b00      	cmp	r3, #0
  4026f6:	d102      	bne.n	4026fe <PCA9952_write_reg+0x26>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  4026f8:	2360      	movs	r3, #96	; 0x60
  4026fa:	763b      	strb	r3, [r7, #24]
  4026fc:	e004      	b.n	402708 <PCA9952_write_reg+0x30>
	}
	else if (topBotn == LED_BOTTOM)
  4026fe:	79fb      	ldrb	r3, [r7, #7]
  402700:	2b01      	cmp	r3, #1
  402702:	d101      	bne.n	402708 <PCA9952_write_reg+0x30>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  402704:	2361      	movs	r3, #97	; 0x61
  402706:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  402708:	2300      	movs	r3, #0
  40270a:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  40270c:	2300      	movs	r3, #0
  40270e:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402710:	2300      	movs	r3, #0
  402712:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  402714:	2300      	movs	r3, #0
  402716:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &pack;
  402718:	f107 031c 	add.w	r3, r7, #28
  40271c:	613b      	str	r3, [r7, #16]
	twi_package.length = sizeof(pack);
  40271e:	2302      	movs	r3, #2
  402720:	617b      	str	r3, [r7, #20]

	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402722:	bf00      	nop
  402724:	f107 0308 	add.w	r3, r7, #8
  402728:	4805      	ldr	r0, [pc, #20]	; (402740 <PCA9952_write_reg+0x68>)
  40272a:	4619      	mov	r1, r3
  40272c:	4b05      	ldr	r3, [pc, #20]	; (402744 <PCA9952_write_reg+0x6c>)
  40272e:	4798      	blx	r3
  402730:	4603      	mov	r3, r0
  402732:	2b00      	cmp	r3, #0
  402734:	d1f6      	bne.n	402724 <PCA9952_write_reg+0x4c>

	return;
  402736:	bf00      	nop
}
  402738:	3720      	adds	r7, #32
  40273a:	46bd      	mov	sp, r7
  40273c:	bd80      	pop	{r7, pc}
  40273e:	bf00      	nop
  402740:	40018000 	.word	0x40018000
  402744:	00401e71 	.word	0x00401e71

00402748 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
  402748:	b580      	push	{r7, lr}
  40274a:	b088      	sub	sp, #32
  40274c:	af00      	add	r7, sp, #0
  40274e:	4603      	mov	r3, r0
  402750:	460a      	mov	r2, r1
  402752:	71fb      	strb	r3, [r7, #7]
  402754:	4613      	mov	r3, r2
  402756:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	twihs_packet_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
  402758:	79fb      	ldrb	r3, [r7, #7]
  40275a:	2b00      	cmp	r3, #0
  40275c:	d102      	bne.n	402764 <PCA9952_read_reg+0x1c>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
  40275e:	2360      	movs	r3, #96	; 0x60
  402760:	763b      	strb	r3, [r7, #24]
  402762:	e004      	b.n	40276e <PCA9952_read_reg+0x26>
	}
	else if (topBotn == LED_BOTTOM)
  402764:	79fb      	ldrb	r3, [r7, #7]
  402766:	2b01      	cmp	r3, #1
  402768:	d101      	bne.n	40276e <PCA9952_read_reg+0x26>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
  40276a:	2361      	movs	r3, #97	; 0x61
  40276c:	763b      	strb	r3, [r7, #24]
	}

	twi_package.addr[0] = 0;		//is this right? 8feb16
  40276e:	2300      	movs	r3, #0
  402770:	723b      	strb	r3, [r7, #8]
	twi_package.addr[1] = 0;		//is this right? 8feb16
  402772:	2300      	movs	r3, #0
  402774:	727b      	strb	r3, [r7, #9]
	twi_package.addr[2] = 0;		//is this right? 8feb16
  402776:	2300      	movs	r3, #0
  402778:	72bb      	strb	r3, [r7, #10]
	twi_package.addr_length = 0;
  40277a:	2300      	movs	r3, #0
  40277c:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &reg_index;
  40277e:	1dbb      	adds	r3, r7, #6
  402780:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  402782:	2301      	movs	r3, #1
  402784:	617b      	str	r3, [r7, #20]
	while(twihs_master_write(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  402786:	bf00      	nop
  402788:	f107 0308 	add.w	r3, r7, #8
  40278c:	480f      	ldr	r0, [pc, #60]	; (4027cc <PCA9952_read_reg+0x84>)
  40278e:	4619      	mov	r1, r3
  402790:	4b0f      	ldr	r3, [pc, #60]	; (4027d0 <PCA9952_read_reg+0x88>)
  402792:	4798      	blx	r3
  402794:	4603      	mov	r3, r0
  402796:	2b00      	cmp	r3, #0
  402798:	d1f6      	bne.n	402788 <PCA9952_read_reg+0x40>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	mdelay(20);
  40279a:	2014      	movs	r0, #20
  40279c:	4b0d      	ldr	r3, [pc, #52]	; (4027d4 <PCA9952_read_reg+0x8c>)
  40279e:	4798      	blx	r3

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
  4027a0:	2300      	movs	r3, #0
  4027a2:	60fb      	str	r3, [r7, #12]
	twi_package.buffer = &data;
  4027a4:	f107 031f 	add.w	r3, r7, #31
  4027a8:	613b      	str	r3, [r7, #16]
	twi_package.length = 1;
  4027aa:	2301      	movs	r3, #1
  4027ac:	617b      	str	r3, [r7, #20]
	while(twihs_master_read(PCA9952_TWI, &twi_package)!=TWIHS_SUCCESS);
  4027ae:	bf00      	nop
  4027b0:	f107 0308 	add.w	r3, r7, #8
  4027b4:	4805      	ldr	r0, [pc, #20]	; (4027cc <PCA9952_read_reg+0x84>)
  4027b6:	4619      	mov	r1, r3
  4027b8:	4b07      	ldr	r3, [pc, #28]	; (4027d8 <PCA9952_read_reg+0x90>)
  4027ba:	4798      	blx	r3
  4027bc:	4603      	mov	r3, r0
  4027be:	2b00      	cmp	r3, #0
  4027c0:	d1f6      	bne.n	4027b0 <PCA9952_read_reg+0x68>

	return data;
  4027c2:	7ffb      	ldrb	r3, [r7, #31]
}
  4027c4:	4618      	mov	r0, r3
  4027c6:	3720      	adds	r7, #32
  4027c8:	46bd      	mov	sp, r7
  4027ca:	bd80      	pop	{r7, pc}
  4027cc:	40018000 	.word	0x40018000
  4027d0:	00401e71 	.word	0x00401e71
  4027d4:	00403a49 	.word	0x00403a49
  4027d8:	00401d89 	.word	0x00401d89

004027dc <PCA9952_init>:

extern uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize); //lazy, defined in another c file 10feb16 jsi

void PCA9952_init(void) //7apr15
{
  4027dc:	b5b0      	push	{r4, r5, r7, lr}
  4027de:	b094      	sub	sp, #80	; 0x50
  4027e0:	af02      	add	r7, sp, #8
	volatile uint8_t tmp1, tmp2, tmp3, tmp4;
	
	char printStr[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  4027e2:	1d3b      	adds	r3, r7, #4
  4027e4:	2240      	movs	r2, #64	; 0x40
  4027e6:	4618      	mov	r0, r3
  4027e8:	2100      	movs	r1, #0
  4027ea:	4b45      	ldr	r3, [pc, #276]	; (402900 <PCA9952_init+0x124>)
  4027ec:	4798      	blx	r3
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  4027ee:	2000      	movs	r0, #0
  4027f0:	2100      	movs	r1, #0
  4027f2:	2200      	movs	r2, #0
  4027f4:	4b43      	ldr	r3, [pc, #268]	; (402904 <PCA9952_init+0x128>)
  4027f6:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  4027f8:	2000      	movs	r0, #0
  4027fa:	2101      	movs	r1, #1
  4027fc:	2200      	movs	r2, #0
  4027fe:	4b41      	ldr	r3, [pc, #260]	; (402904 <PCA9952_init+0x128>)
  402800:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402802:	2000      	movs	r0, #0
  402804:	2143      	movs	r1, #67	; 0x43
  402806:	22c8      	movs	r2, #200	; 0xc8
  402808:	4b3e      	ldr	r3, [pc, #248]	; (402904 <PCA9952_init+0x128>)
  40280a:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40280c:	2000      	movs	r0, #0
  40280e:	2102      	movs	r1, #2
  402810:	2200      	movs	r2, #0
  402812:	4b3c      	ldr	r3, [pc, #240]	; (402904 <PCA9952_init+0x128>)
  402814:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
  402816:	2000      	movs	r0, #0
  402818:	2103      	movs	r1, #3
  40281a:	2200      	movs	r2, #0
  40281c:	4b39      	ldr	r3, [pc, #228]	; (402904 <PCA9952_init+0x128>)
  40281e:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
  402820:	2000      	movs	r0, #0
  402822:	2104      	movs	r1, #4
  402824:	2200      	movs	r2, #0
  402826:	4b37      	ldr	r3, [pc, #220]	; (402904 <PCA9952_init+0x128>)
  402828:	4798      	blx	r3
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
  40282a:	2000      	movs	r0, #0
  40282c:	2105      	movs	r1, #5
  40282e:	2200      	movs	r2, #0
  402830:	4b34      	ldr	r3, [pc, #208]	; (402904 <PCA9952_init+0x128>)
  402832:	4798      	blx	r3

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402834:	2000      	movs	r0, #0
  402836:	2144      	movs	r1, #68	; 0x44
  402838:	4b33      	ldr	r3, [pc, #204]	; (402908 <PCA9952_init+0x12c>)
  40283a:	4798      	blx	r3
  40283c:	4603      	mov	r3, r0
  40283e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  402842:	2000      	movs	r0, #0
  402844:	2145      	movs	r1, #69	; 0x45
  402846:	4b30      	ldr	r3, [pc, #192]	; (402908 <PCA9952_init+0x12c>)
  402848:	4798      	blx	r3
  40284a:	4603      	mov	r3, r0
  40284c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
  402850:	2001      	movs	r0, #1
  402852:	2100      	movs	r1, #0
  402854:	2200      	movs	r2, #0
  402856:	4b2b      	ldr	r3, [pc, #172]	; (402904 <PCA9952_init+0x128>)
  402858:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
  40285a:	2001      	movs	r0, #1
  40285c:	2101      	movs	r1, #1
  40285e:	2200      	movs	r2, #0
  402860:	4b28      	ldr	r3, [pc, #160]	; (402904 <PCA9952_init+0x128>)
  402862:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
  402864:	2001      	movs	r0, #1
  402866:	2143      	movs	r1, #67	; 0x43
  402868:	22c8      	movs	r2, #200	; 0xc8
  40286a:	4b26      	ldr	r3, [pc, #152]	; (402904 <PCA9952_init+0x128>)
  40286c:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
  40286e:	2001      	movs	r0, #1
  402870:	2102      	movs	r1, #2
  402872:	2200      	movs	r2, #0
  402874:	4b23      	ldr	r3, [pc, #140]	; (402904 <PCA9952_init+0x128>)
  402876:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
  402878:	2001      	movs	r0, #1
  40287a:	2103      	movs	r1, #3
  40287c:	2200      	movs	r2, #0
  40287e:	4b21      	ldr	r3, [pc, #132]	; (402904 <PCA9952_init+0x128>)
  402880:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
  402882:	2001      	movs	r0, #1
  402884:	2104      	movs	r1, #4
  402886:	2200      	movs	r2, #0
  402888:	4b1e      	ldr	r3, [pc, #120]	; (402904 <PCA9952_init+0x128>)
  40288a:	4798      	blx	r3
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
  40288c:	2001      	movs	r0, #1
  40288e:	2105      	movs	r1, #5
  402890:	2200      	movs	r2, #0
  402892:	4b1c      	ldr	r3, [pc, #112]	; (402904 <PCA9952_init+0x128>)
  402894:	4798      	blx	r3

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
  402896:	2001      	movs	r0, #1
  402898:	2144      	movs	r1, #68	; 0x44
  40289a:	4b1b      	ldr	r3, [pc, #108]	; (402908 <PCA9952_init+0x12c>)
  40289c:	4798      	blx	r3
  40289e:	4603      	mov	r3, r0
  4028a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  4028a4:	2001      	movs	r0, #1
  4028a6:	2145      	movs	r1, #69	; 0x45
  4028a8:	4b17      	ldr	r3, [pc, #92]	; (402908 <PCA9952_init+0x12c>)
  4028aa:	4798      	blx	r3
  4028ac:	4603      	mov	r3, r0
  4028ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	
	sprintf(printStr,"PCA9952: tmp1: %x tmp2: %x tmp3: %x tmp4: %x\r\n", tmp1, tmp2, tmp3, tmp4); //10feb16 just for debug jsi
  4028b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  4028b6:	b2db      	uxtb	r3, r3
  4028b8:	461d      	mov	r5, r3
  4028ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  4028be:	b2db      	uxtb	r3, r3
  4028c0:	461c      	mov	r4, r3
  4028c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
  4028c6:	b2db      	uxtb	r3, r3
  4028c8:	4619      	mov	r1, r3
  4028ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
  4028ce:	b2db      	uxtb	r3, r3
  4028d0:	461a      	mov	r2, r3
  4028d2:	1d3b      	adds	r3, r7, #4
  4028d4:	9100      	str	r1, [sp, #0]
  4028d6:	9201      	str	r2, [sp, #4]
  4028d8:	4618      	mov	r0, r3
  4028da:	490c      	ldr	r1, [pc, #48]	; (40290c <PCA9952_init+0x130>)
  4028dc:	462a      	mov	r2, r5
  4028de:	4623      	mov	r3, r4
  4028e0:	4c0b      	ldr	r4, [pc, #44]	; (402910 <PCA9952_init+0x134>)
  4028e2:	47a0      	blx	r4
	func_transmit(printStr, strlen(printStr));
  4028e4:	1d3b      	adds	r3, r7, #4
  4028e6:	4618      	mov	r0, r3
  4028e8:	4b0a      	ldr	r3, [pc, #40]	; (402914 <PCA9952_init+0x138>)
  4028ea:	4798      	blx	r3
  4028ec:	4602      	mov	r2, r0
  4028ee:	1d3b      	adds	r3, r7, #4
  4028f0:	4618      	mov	r0, r3
  4028f2:	4611      	mov	r1, r2
  4028f4:	4b08      	ldr	r3, [pc, #32]	; (402918 <PCA9952_init+0x13c>)
  4028f6:	4798      	blx	r3
	
	
}
  4028f8:	3748      	adds	r7, #72	; 0x48
  4028fa:	46bd      	mov	sp, r7
  4028fc:	bdb0      	pop	{r4, r5, r7, pc}
  4028fe:	bf00      	nop
  402900:	00406dc5 	.word	0x00406dc5
  402904:	004026d9 	.word	0x004026d9
  402908:	00402749 	.word	0x00402749
  40290c:	0040c614 	.word	0x0040c614
  402910:	00406fe1 	.word	0x00406fe1
  402914:	0040702d 	.word	0x0040702d
  402918:	00403d45 	.word	0x00403d45

0040291c <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
  40291c:	b580      	push	{r7, lr}
  40291e:	b084      	sub	sp, #16
  402920:	af00      	add	r7, sp, #0
  402922:	4603      	mov	r3, r0
  402924:	71fb      	strb	r3, [r7, #7]
  402926:	460b      	mov	r3, r1
  402928:	71bb      	strb	r3, [r7, #6]
  40292a:	4613      	mov	r3, r2
  40292c:	717b      	strb	r3, [r7, #5]
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
  40292e:	79bb      	ldrb	r3, [r7, #6]
  402930:	089b      	lsrs	r3, r3, #2
  402932:	737b      	strb	r3, [r7, #13]
	regPos = (channel % 4);
  402934:	79bb      	ldrb	r3, [r7, #6]
  402936:	f003 0303 	and.w	r3, r3, #3
  40293a:	733b      	strb	r3, [r7, #12]
	
	switch(regIdx)
  40293c:	7b7b      	ldrb	r3, [r7, #13]
  40293e:	2b03      	cmp	r3, #3
  402940:	d82a      	bhi.n	402998 <PCA9952_channel+0x7c>
  402942:	a201      	add	r2, pc, #4	; (adr r2, 402948 <PCA9952_channel+0x2c>)
  402944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402948:	00402959 	.word	0x00402959
  40294c:	00402969 	.word	0x00402969
  402950:	00402979 	.word	0x00402979
  402954:	00402989 	.word	0x00402989
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
  402958:	79fb      	ldrb	r3, [r7, #7]
  40295a:	4618      	mov	r0, r3
  40295c:	2102      	movs	r1, #2
  40295e:	4b37      	ldr	r3, [pc, #220]	; (402a3c <PCA9952_channel+0x120>)
  402960:	4798      	blx	r3
  402962:	4603      	mov	r3, r0
  402964:	73fb      	strb	r3, [r7, #15]
			break;
  402966:	e017      	b.n	402998 <PCA9952_channel+0x7c>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
  402968:	79fb      	ldrb	r3, [r7, #7]
  40296a:	4618      	mov	r0, r3
  40296c:	2103      	movs	r1, #3
  40296e:	4b33      	ldr	r3, [pc, #204]	; (402a3c <PCA9952_channel+0x120>)
  402970:	4798      	blx	r3
  402972:	4603      	mov	r3, r0
  402974:	73fb      	strb	r3, [r7, #15]
			break;
  402976:	e00f      	b.n	402998 <PCA9952_channel+0x7c>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
  402978:	79fb      	ldrb	r3, [r7, #7]
  40297a:	4618      	mov	r0, r3
  40297c:	2104      	movs	r1, #4
  40297e:	4b2f      	ldr	r3, [pc, #188]	; (402a3c <PCA9952_channel+0x120>)
  402980:	4798      	blx	r3
  402982:	4603      	mov	r3, r0
  402984:	73fb      	strb	r3, [r7, #15]
			break;
  402986:	e007      	b.n	402998 <PCA9952_channel+0x7c>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
  402988:	79fb      	ldrb	r3, [r7, #7]
  40298a:	4618      	mov	r0, r3
  40298c:	2105      	movs	r1, #5
  40298e:	4b2b      	ldr	r3, [pc, #172]	; (402a3c <PCA9952_channel+0x120>)
  402990:	4798      	blx	r3
  402992:	4603      	mov	r3, r0
  402994:	73fb      	strb	r3, [r7, #15]
			break;		
  402996:	bf00      	nop
	}

	maskVal = 0xFF << (regPos * 2);
  402998:	7b3b      	ldrb	r3, [r7, #12]
  40299a:	005b      	lsls	r3, r3, #1
  40299c:	22ff      	movs	r2, #255	; 0xff
  40299e:	fa02 f303 	lsl.w	r3, r2, r3
  4029a2:	72fb      	strb	r3, [r7, #11]
	maskVal = maskVal ^ 0xFF;
  4029a4:	7afb      	ldrb	r3, [r7, #11]
  4029a6:	43db      	mvns	r3, r3
  4029a8:	72fb      	strb	r3, [r7, #11]
	regShadow &= maskVal;
  4029aa:	7bfa      	ldrb	r2, [r7, #15]
  4029ac:	7afb      	ldrb	r3, [r7, #11]
  4029ae:	4013      	ands	r3, r2
  4029b0:	73fb      	strb	r3, [r7, #15]

	if (onOffn == LED_ON)
  4029b2:	797b      	ldrb	r3, [r7, #5]
  4029b4:	2b01      	cmp	r3, #1
  4029b6:	d106      	bne.n	4029c6 <PCA9952_channel+0xaa>
	{
		writeVal = (0x01 << (regPos * 2));
  4029b8:	7b3b      	ldrb	r3, [r7, #12]
  4029ba:	005b      	lsls	r3, r3, #1
  4029bc:	2201      	movs	r2, #1
  4029be:	fa02 f303 	lsl.w	r3, r2, r3
  4029c2:	73bb      	strb	r3, [r7, #14]
  4029c4:	e004      	b.n	4029d0 <PCA9952_channel+0xb4>
	}
	else if (onOffn == LED_OFF)
  4029c6:	797b      	ldrb	r3, [r7, #5]
  4029c8:	2b00      	cmp	r3, #0
  4029ca:	d101      	bne.n	4029d0 <PCA9952_channel+0xb4>
	{
		writeVal = 0;
  4029cc:	2300      	movs	r3, #0
  4029ce:	73bb      	strb	r3, [r7, #14]
	}
	
	regShadow |= writeVal;
  4029d0:	7bfa      	ldrb	r2, [r7, #15]
  4029d2:	7bbb      	ldrb	r3, [r7, #14]
  4029d4:	4313      	orrs	r3, r2
  4029d6:	73fb      	strb	r3, [r7, #15]
	
	switch(regIdx)
  4029d8:	7b7b      	ldrb	r3, [r7, #13]
  4029da:	2b03      	cmp	r3, #3
  4029dc:	d82a      	bhi.n	402a34 <PCA9952_channel+0x118>
  4029de:	a201      	add	r2, pc, #4	; (adr r2, 4029e4 <PCA9952_channel+0xc8>)
  4029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029e4:	004029f5 	.word	0x004029f5
  4029e8:	00402a05 	.word	0x00402a05
  4029ec:	00402a15 	.word	0x00402a15
  4029f0:	00402a25 	.word	0x00402a25
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
  4029f4:	79fa      	ldrb	r2, [r7, #7]
  4029f6:	7bfb      	ldrb	r3, [r7, #15]
  4029f8:	4610      	mov	r0, r2
  4029fa:	2102      	movs	r1, #2
  4029fc:	461a      	mov	r2, r3
  4029fe:	4b10      	ldr	r3, [pc, #64]	; (402a40 <PCA9952_channel+0x124>)
  402a00:	4798      	blx	r3
			break;
  402a02:	e017      	b.n	402a34 <PCA9952_channel+0x118>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
  402a04:	79fa      	ldrb	r2, [r7, #7]
  402a06:	7bfb      	ldrb	r3, [r7, #15]
  402a08:	4610      	mov	r0, r2
  402a0a:	2103      	movs	r1, #3
  402a0c:	461a      	mov	r2, r3
  402a0e:	4b0c      	ldr	r3, [pc, #48]	; (402a40 <PCA9952_channel+0x124>)
  402a10:	4798      	blx	r3
			break;
  402a12:	e00f      	b.n	402a34 <PCA9952_channel+0x118>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
  402a14:	79fa      	ldrb	r2, [r7, #7]
  402a16:	7bfb      	ldrb	r3, [r7, #15]
  402a18:	4610      	mov	r0, r2
  402a1a:	2104      	movs	r1, #4
  402a1c:	461a      	mov	r2, r3
  402a1e:	4b08      	ldr	r3, [pc, #32]	; (402a40 <PCA9952_channel+0x124>)
  402a20:	4798      	blx	r3
			break;
  402a22:	e007      	b.n	402a34 <PCA9952_channel+0x118>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
  402a24:	79fa      	ldrb	r2, [r7, #7]
  402a26:	7bfb      	ldrb	r3, [r7, #15]
  402a28:	4610      	mov	r0, r2
  402a2a:	2105      	movs	r1, #5
  402a2c:	461a      	mov	r2, r3
  402a2e:	4b04      	ldr	r3, [pc, #16]	; (402a40 <PCA9952_channel+0x124>)
  402a30:	4798      	blx	r3
			break;
  402a32:	bf00      	nop
	}

}
  402a34:	3710      	adds	r7, #16
  402a36:	46bd      	mov	sp, r7
  402a38:	bd80      	pop	{r7, pc}
  402a3a:	bf00      	nop
  402a3c:	00402749 	.word	0x00402749
  402a40:	004026d9 	.word	0x004026d9

00402a44 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b082      	sub	sp, #8
  402a48:	af00      	add	r7, sp, #0
  402a4a:	4603      	mov	r3, r0
  402a4c:	460a      	mov	r2, r1
  402a4e:	71fb      	strb	r3, [r7, #7]
  402a50:	4613      	mov	r3, r2
  402a52:	71bb      	strb	r3, [r7, #6]
	switch(shelf)
  402a54:	79fb      	ldrb	r3, [r7, #7]
  402a56:	2b03      	cmp	r3, #3
  402a58:	f200 8088 	bhi.w	402b6c <led_shelf+0x128>
  402a5c:	a201      	add	r2, pc, #4	; (adr r2, 402a64 <led_shelf+0x20>)
  402a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a62:	bf00      	nop
  402a64:	00402a75 	.word	0x00402a75
  402a68:	00402ab3 	.word	0x00402ab3
  402a6c:	00402af1 	.word	0x00402af1
  402a70:	00402b2f 	.word	0x00402b2f
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
  402a74:	79bb      	ldrb	r3, [r7, #6]
  402a76:	2001      	movs	r0, #1
  402a78:	2100      	movs	r1, #0
  402a7a:	461a      	mov	r2, r3
  402a7c:	4b3d      	ldr	r3, [pc, #244]	; (402b74 <led_shelf+0x130>)
  402a7e:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
  402a80:	79bb      	ldrb	r3, [r7, #6]
  402a82:	2001      	movs	r0, #1
  402a84:	2101      	movs	r1, #1
  402a86:	461a      	mov	r2, r3
  402a88:	4b3a      	ldr	r3, [pc, #232]	; (402b74 <led_shelf+0x130>)
  402a8a:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
  402a8c:	79bb      	ldrb	r3, [r7, #6]
  402a8e:	2001      	movs	r0, #1
  402a90:	2102      	movs	r1, #2
  402a92:	461a      	mov	r2, r3
  402a94:	4b37      	ldr	r3, [pc, #220]	; (402b74 <led_shelf+0x130>)
  402a96:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 0, onOffn);
  402a98:	79bb      	ldrb	r3, [r7, #6]
  402a9a:	2000      	movs	r0, #0
  402a9c:	2100      	movs	r1, #0
  402a9e:	461a      	mov	r2, r3
  402aa0:	4b34      	ldr	r3, [pc, #208]	; (402b74 <led_shelf+0x130>)
  402aa2:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 1, onOffn);
  402aa4:	79bb      	ldrb	r3, [r7, #6]
  402aa6:	2000      	movs	r0, #0
  402aa8:	2101      	movs	r1, #1
  402aaa:	461a      	mov	r2, r3
  402aac:	4b31      	ldr	r3, [pc, #196]	; (402b74 <led_shelf+0x130>)
  402aae:	4798      	blx	r3
			break;
  402ab0:	e05c      	b.n	402b6c <led_shelf+0x128>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
  402ab2:	79bb      	ldrb	r3, [r7, #6]
  402ab4:	2001      	movs	r0, #1
  402ab6:	2103      	movs	r1, #3
  402ab8:	461a      	mov	r2, r3
  402aba:	4b2e      	ldr	r3, [pc, #184]	; (402b74 <led_shelf+0x130>)
  402abc:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
  402abe:	79bb      	ldrb	r3, [r7, #6]
  402ac0:	2001      	movs	r0, #1
  402ac2:	2104      	movs	r1, #4
  402ac4:	461a      	mov	r2, r3
  402ac6:	4b2b      	ldr	r3, [pc, #172]	; (402b74 <led_shelf+0x130>)
  402ac8:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
  402aca:	79bb      	ldrb	r3, [r7, #6]
  402acc:	2001      	movs	r0, #1
  402ace:	2105      	movs	r1, #5
  402ad0:	461a      	mov	r2, r3
  402ad2:	4b28      	ldr	r3, [pc, #160]	; (402b74 <led_shelf+0x130>)
  402ad4:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 2, onOffn);
  402ad6:	79bb      	ldrb	r3, [r7, #6]
  402ad8:	2000      	movs	r0, #0
  402ada:	2102      	movs	r1, #2
  402adc:	461a      	mov	r2, r3
  402ade:	4b25      	ldr	r3, [pc, #148]	; (402b74 <led_shelf+0x130>)
  402ae0:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 3, onOffn);
  402ae2:	79bb      	ldrb	r3, [r7, #6]
  402ae4:	2000      	movs	r0, #0
  402ae6:	2103      	movs	r1, #3
  402ae8:	461a      	mov	r2, r3
  402aea:	4b22      	ldr	r3, [pc, #136]	; (402b74 <led_shelf+0x130>)
  402aec:	4798      	blx	r3
			break;
  402aee:	e03d      	b.n	402b6c <led_shelf+0x128>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
  402af0:	79bb      	ldrb	r3, [r7, #6]
  402af2:	2001      	movs	r0, #1
  402af4:	2106      	movs	r1, #6
  402af6:	461a      	mov	r2, r3
  402af8:	4b1e      	ldr	r3, [pc, #120]	; (402b74 <led_shelf+0x130>)
  402afa:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
  402afc:	79bb      	ldrb	r3, [r7, #6]
  402afe:	2001      	movs	r0, #1
  402b00:	2107      	movs	r1, #7
  402b02:	461a      	mov	r2, r3
  402b04:	4b1b      	ldr	r3, [pc, #108]	; (402b74 <led_shelf+0x130>)
  402b06:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
  402b08:	79bb      	ldrb	r3, [r7, #6]
  402b0a:	2001      	movs	r0, #1
  402b0c:	2108      	movs	r1, #8
  402b0e:	461a      	mov	r2, r3
  402b10:	4b18      	ldr	r3, [pc, #96]	; (402b74 <led_shelf+0x130>)
  402b12:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 4, onOffn);
  402b14:	79bb      	ldrb	r3, [r7, #6]
  402b16:	2000      	movs	r0, #0
  402b18:	2104      	movs	r1, #4
  402b1a:	461a      	mov	r2, r3
  402b1c:	4b15      	ldr	r3, [pc, #84]	; (402b74 <led_shelf+0x130>)
  402b1e:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 5, onOffn);
  402b20:	79bb      	ldrb	r3, [r7, #6]
  402b22:	2000      	movs	r0, #0
  402b24:	2105      	movs	r1, #5
  402b26:	461a      	mov	r2, r3
  402b28:	4b12      	ldr	r3, [pc, #72]	; (402b74 <led_shelf+0x130>)
  402b2a:	4798      	blx	r3
			break;
  402b2c:	e01e      	b.n	402b6c <led_shelf+0x128>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
  402b2e:	79bb      	ldrb	r3, [r7, #6]
  402b30:	2001      	movs	r0, #1
  402b32:	2109      	movs	r1, #9
  402b34:	461a      	mov	r2, r3
  402b36:	4b0f      	ldr	r3, [pc, #60]	; (402b74 <led_shelf+0x130>)
  402b38:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
  402b3a:	79bb      	ldrb	r3, [r7, #6]
  402b3c:	2001      	movs	r0, #1
  402b3e:	210a      	movs	r1, #10
  402b40:	461a      	mov	r2, r3
  402b42:	4b0c      	ldr	r3, [pc, #48]	; (402b74 <led_shelf+0x130>)
  402b44:	4798      	blx	r3
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
  402b46:	79bb      	ldrb	r3, [r7, #6]
  402b48:	2001      	movs	r0, #1
  402b4a:	210b      	movs	r1, #11
  402b4c:	461a      	mov	r2, r3
  402b4e:	4b09      	ldr	r3, [pc, #36]	; (402b74 <led_shelf+0x130>)
  402b50:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 6, onOffn);
  402b52:	79bb      	ldrb	r3, [r7, #6]
  402b54:	2000      	movs	r0, #0
  402b56:	2106      	movs	r1, #6
  402b58:	461a      	mov	r2, r3
  402b5a:	4b06      	ldr	r3, [pc, #24]	; (402b74 <led_shelf+0x130>)
  402b5c:	4798      	blx	r3
			PCA9952_channel(LED_TOP, 7, onOffn);
  402b5e:	79bb      	ldrb	r3, [r7, #6]
  402b60:	2000      	movs	r0, #0
  402b62:	2107      	movs	r1, #7
  402b64:	461a      	mov	r2, r3
  402b66:	4b03      	ldr	r3, [pc, #12]	; (402b74 <led_shelf+0x130>)
  402b68:	4798      	blx	r3
			break;
  402b6a:	bf00      	nop
	}	
	
}
  402b6c:	3708      	adds	r7, #8
  402b6e:	46bd      	mov	sp, r7
  402b70:	bd80      	pop	{r7, pc}
  402b72:	bf00      	nop
  402b74:	0040291d 	.word	0x0040291d

00402b78 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402b78:	b480      	push	{r7}
  402b7a:	b08d      	sub	sp, #52	; 0x34
  402b7c:	af00      	add	r7, sp, #0
  402b7e:	6078      	str	r0, [r7, #4]
  402b80:	460b      	mov	r3, r1
  402b82:	70fb      	strb	r3, [r7, #3]
  402b84:	687b      	ldr	r3, [r7, #4]
  402b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  402b88:	78fb      	ldrb	r3, [r7, #3]
  402b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402b90:	627b      	str	r3, [r7, #36]	; 0x24
  402b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402b94:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402b96:	6a3b      	ldr	r3, [r7, #32]
  402b98:	095b      	lsrs	r3, r3, #5
  402b9a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402b9c:	69fa      	ldr	r2, [r7, #28]
  402b9e:	4b17      	ldr	r3, [pc, #92]	; (402bfc <ioport_set_pin_dir+0x84>)
  402ba0:	4413      	add	r3, r2
  402ba2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402ba4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402baa:	2b01      	cmp	r3, #1
  402bac:	d109      	bne.n	402bc2 <ioport_set_pin_dir+0x4a>
  402bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bb0:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bb2:	697b      	ldr	r3, [r7, #20]
  402bb4:	f003 031f 	and.w	r3, r3, #31
  402bb8:	2201      	movs	r2, #1
  402bba:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bbc:	69bb      	ldr	r3, [r7, #24]
  402bbe:	611a      	str	r2, [r3, #16]
  402bc0:	e00c      	b.n	402bdc <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  402bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d108      	bne.n	402bdc <ioport_set_pin_dir+0x64>
  402bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bcc:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402bce:	693b      	ldr	r3, [r7, #16]
  402bd0:	f003 031f 	and.w	r3, r3, #31
  402bd4:	2201      	movs	r2, #1
  402bd6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bd8:	69bb      	ldr	r3, [r7, #24]
  402bda:	615a      	str	r2, [r3, #20]
  402bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402bde:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402be0:	68fb      	ldr	r3, [r7, #12]
  402be2:	f003 031f 	and.w	r3, r3, #31
  402be6:	2201      	movs	r2, #1
  402be8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bea:	69bb      	ldr	r3, [r7, #24]
  402bec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402bf0:	3734      	adds	r7, #52	; 0x34
  402bf2:	46bd      	mov	sp, r7
  402bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	00200707 	.word	0x00200707

00402c00 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402c00:	b480      	push	{r7}
  402c02:	b08b      	sub	sp, #44	; 0x2c
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
  402c08:	460b      	mov	r3, r1
  402c0a:	70fb      	strb	r3, [r7, #3]
  402c0c:	687b      	ldr	r3, [r7, #4]
  402c0e:	627b      	str	r3, [r7, #36]	; 0x24
  402c10:	78fb      	ldrb	r3, [r7, #3]
  402c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c18:	61fb      	str	r3, [r7, #28]
  402c1a:	69fb      	ldr	r3, [r7, #28]
  402c1c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c1e:	69bb      	ldr	r3, [r7, #24]
  402c20:	095b      	lsrs	r3, r3, #5
  402c22:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c24:	697a      	ldr	r2, [r7, #20]
  402c26:	4b10      	ldr	r3, [pc, #64]	; (402c68 <ioport_set_pin_level+0x68>)
  402c28:	4413      	add	r3, r2
  402c2a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402c2c:	613b      	str	r3, [r7, #16]

	if (level) {
  402c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402c32:	2b00      	cmp	r3, #0
  402c34:	d009      	beq.n	402c4a <ioport_set_pin_level+0x4a>
  402c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c38:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c3a:	68fb      	ldr	r3, [r7, #12]
  402c3c:	f003 031f 	and.w	r3, r3, #31
  402c40:	2201      	movs	r2, #1
  402c42:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402c44:	693b      	ldr	r3, [r7, #16]
  402c46:	631a      	str	r2, [r3, #48]	; 0x30
  402c48:	e008      	b.n	402c5c <ioport_set_pin_level+0x5c>
  402c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402c4c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c4e:	68bb      	ldr	r3, [r7, #8]
  402c50:	f003 031f 	and.w	r3, r3, #31
  402c54:	2201      	movs	r2, #1
  402c56:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402c58:	693b      	ldr	r3, [r7, #16]
  402c5a:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  402c5c:	372c      	adds	r7, #44	; 0x2c
  402c5e:	46bd      	mov	sp, r7
  402c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c64:	4770      	bx	lr
  402c66:	bf00      	nop
  402c68:	00200707 	.word	0x00200707

00402c6c <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  402c6c:	b480      	push	{r7}
  402c6e:	b089      	sub	sp, #36	; 0x24
  402c70:	af00      	add	r7, sp, #0
  402c72:	6078      	str	r0, [r7, #4]
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	61fb      	str	r3, [r7, #28]
  402c78:	69fb      	ldr	r3, [r7, #28]
  402c7a:	61bb      	str	r3, [r7, #24]
  402c7c:	69bb      	ldr	r3, [r7, #24]
  402c7e:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402c80:	697b      	ldr	r3, [r7, #20]
  402c82:	095b      	lsrs	r3, r3, #5
  402c84:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402c86:	693a      	ldr	r2, [r7, #16]
  402c88:	4b0b      	ldr	r3, [pc, #44]	; (402cb8 <ioport_get_pin_level+0x4c>)
  402c8a:	4413      	add	r3, r2
  402c8c:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402c90:	69fb      	ldr	r3, [r7, #28]
  402c92:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402c94:	68fb      	ldr	r3, [r7, #12]
  402c96:	f003 031f 	and.w	r3, r3, #31
  402c9a:	2101      	movs	r1, #1
  402c9c:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402ca0:	4013      	ands	r3, r2
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	bf14      	ite	ne
  402ca6:	2301      	movne	r3, #1
  402ca8:	2300      	moveq	r3, #0
  402caa:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  402cac:	4618      	mov	r0, r3
  402cae:	3724      	adds	r7, #36	; 0x24
  402cb0:	46bd      	mov	sp, r7
  402cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cb6:	4770      	bx	lr
  402cb8:	00200707 	.word	0x00200707

00402cbc <udelay>:
/*
 * We have a 100MHz clock, so 100 NOPs should be about 1ns. 
 * Tried to do a 1ns tick but the chip can't seem to handle it.
 */
void udelay(uint32_t ul_dly_ticks)
{
  402cbc:	b480      	push	{r7}
  402cbe:	b085      	sub	sp, #20
  402cc0:	af00      	add	r7, sp, #0
  402cc2:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<ul_dly_ticks; i++)
  402cc4:	2300      	movs	r3, #0
  402cc6:	60fb      	str	r3, [r7, #12]
  402cc8:	e066      	b.n	402d98 <udelay+0xdc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402cca:	bf00      	nop
  402ccc:	bf00      	nop
  402cce:	bf00      	nop
  402cd0:	bf00      	nop
  402cd2:	bf00      	nop
  402cd4:	bf00      	nop
  402cd6:	bf00      	nop
  402cd8:	bf00      	nop
  402cda:	bf00      	nop
  402cdc:	bf00      	nop
  402cde:	bf00      	nop
  402ce0:	bf00      	nop
  402ce2:	bf00      	nop
  402ce4:	bf00      	nop
  402ce6:	bf00      	nop
  402ce8:	bf00      	nop
  402cea:	bf00      	nop
  402cec:	bf00      	nop
  402cee:	bf00      	nop
  402cf0:	bf00      	nop
  402cf2:	bf00      	nop
  402cf4:	bf00      	nop
  402cf6:	bf00      	nop
  402cf8:	bf00      	nop
  402cfa:	bf00      	nop
  402cfc:	bf00      	nop
  402cfe:	bf00      	nop
  402d00:	bf00      	nop
  402d02:	bf00      	nop
  402d04:	bf00      	nop
  402d06:	bf00      	nop
  402d08:	bf00      	nop
  402d0a:	bf00      	nop
  402d0c:	bf00      	nop
  402d0e:	bf00      	nop
  402d10:	bf00      	nop
  402d12:	bf00      	nop
  402d14:	bf00      	nop
  402d16:	bf00      	nop
  402d18:	bf00      	nop
  402d1a:	bf00      	nop
  402d1c:	bf00      	nop
  402d1e:	bf00      	nop
  402d20:	bf00      	nop
  402d22:	bf00      	nop
  402d24:	bf00      	nop
  402d26:	bf00      	nop
  402d28:	bf00      	nop
  402d2a:	bf00      	nop
  402d2c:	bf00      	nop
  402d2e:	bf00      	nop
  402d30:	bf00      	nop
  402d32:	bf00      	nop
  402d34:	bf00      	nop
  402d36:	bf00      	nop
  402d38:	bf00      	nop
  402d3a:	bf00      	nop
  402d3c:	bf00      	nop
  402d3e:	bf00      	nop
  402d40:	bf00      	nop
  402d42:	bf00      	nop
  402d44:	bf00      	nop
  402d46:	bf00      	nop
  402d48:	bf00      	nop
  402d4a:	bf00      	nop
  402d4c:	bf00      	nop
  402d4e:	bf00      	nop
  402d50:	bf00      	nop
  402d52:	bf00      	nop
  402d54:	bf00      	nop
  402d56:	bf00      	nop
  402d58:	bf00      	nop
  402d5a:	bf00      	nop
  402d5c:	bf00      	nop
  402d5e:	bf00      	nop
  402d60:	bf00      	nop
  402d62:	bf00      	nop
  402d64:	bf00      	nop
  402d66:	bf00      	nop
  402d68:	bf00      	nop
  402d6a:	bf00      	nop
  402d6c:	bf00      	nop
  402d6e:	bf00      	nop
  402d70:	bf00      	nop
  402d72:	bf00      	nop
  402d74:	bf00      	nop
  402d76:	bf00      	nop
  402d78:	bf00      	nop
  402d7a:	bf00      	nop
  402d7c:	bf00      	nop
  402d7e:	bf00      	nop
  402d80:	bf00      	nop
  402d82:	bf00      	nop
  402d84:	bf00      	nop
  402d86:	bf00      	nop
  402d88:	bf00      	nop
  402d8a:	bf00      	nop
  402d8c:	bf00      	nop
  402d8e:	bf00      	nop
  402d90:	bf00      	nop
  402d92:	68fb      	ldr	r3, [r7, #12]
  402d94:	3301      	adds	r3, #1
  402d96:	60fb      	str	r3, [r7, #12]
  402d98:	68fa      	ldr	r2, [r7, #12]
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	429a      	cmp	r2, r3
  402d9e:	d394      	bcc.n	402cca <udelay+0xe>
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
	}
}
  402da0:	3714      	adds	r7, #20
  402da2:	46bd      	mov	sp, r7
  402da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402da8:	4770      	bx	lr
  402daa:	bf00      	nop

00402dac <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
  402dac:	b480      	push	{r7}
  402dae:	b083      	sub	sp, #12
  402db0:	af00      	add	r7, sp, #0
  402db2:	4603      	mov	r3, r0
  402db4:	71fb      	strb	r3, [r7, #7]
	switch (idx)
  402db6:	79fb      	ldrb	r3, [r7, #7]
  402db8:	2b04      	cmp	r3, #4
  402dba:	d817      	bhi.n	402dec <io_pin+0x40>
  402dbc:	a201      	add	r2, pc, #4	; (adr r2, 402dc4 <io_pin+0x18>)
  402dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402dc2:	bf00      	nop
  402dc4:	00402dd9 	.word	0x00402dd9
  402dc8:	00402ddd 	.word	0x00402ddd
  402dcc:	00402de1 	.word	0x00402de1
  402dd0:	00402de5 	.word	0x00402de5
  402dd4:	00402de9 	.word	0x00402de9
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
  402dd8:	230f      	movs	r3, #15
  402dda:	e008      	b.n	402dee <io_pin+0x42>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
  402ddc:	2310      	movs	r3, #16
  402dde:	e006      	b.n	402dee <io_pin+0x42>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
  402de0:	2311      	movs	r3, #17
  402de2:	e004      	b.n	402dee <io_pin+0x42>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
  402de4:	2312      	movs	r3, #18
  402de6:	e002      	b.n	402dee <io_pin+0x42>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
  402de8:	2313      	movs	r3, #19
  402dea:	e000      	b.n	402dee <io_pin+0x42>
			break;
		default: 
			return 0; //TODO: return a better error code here
  402dec:	2300      	movs	r3, #0
			break;
	}
}
  402dee:	4618      	mov	r0, r3
  402df0:	370c      	adds	r7, #12
  402df2:	46bd      	mov	sp, r7
  402df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402df8:	4770      	bx	lr
  402dfa:	bf00      	nop

00402dfc <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
  402dfc:	b580      	push	{r7, lr}
  402dfe:	b084      	sub	sp, #16
  402e00:	af00      	add	r7, sp, #0
  402e02:	4603      	mov	r3, r0
  402e04:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e06:	79fb      	ldrb	r3, [r7, #7]
  402e08:	4618      	mov	r0, r3
  402e0a:	4b08      	ldr	r3, [pc, #32]	; (402e2c <drive_DQ_low+0x30>)
  402e0c:	4798      	blx	r3
  402e0e:	4603      	mov	r3, r0
  402e10:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  402e12:	7bfb      	ldrb	r3, [r7, #15]
  402e14:	4618      	mov	r0, r3
  402e16:	2101      	movs	r1, #1
  402e18:	4b05      	ldr	r3, [pc, #20]	; (402e30 <drive_DQ_low+0x34>)
  402e1a:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  402e1c:	7bfb      	ldrb	r3, [r7, #15]
  402e1e:	4618      	mov	r0, r3
  402e20:	2100      	movs	r1, #0
  402e22:	4b04      	ldr	r3, [pc, #16]	; (402e34 <drive_DQ_low+0x38>)
  402e24:	4798      	blx	r3

}
  402e26:	3710      	adds	r7, #16
  402e28:	46bd      	mov	sp, r7
  402e2a:	bd80      	pop	{r7, pc}
  402e2c:	00402dad 	.word	0x00402dad
  402e30:	00402b79 	.word	0x00402b79
  402e34:	00402c01 	.word	0x00402c01

00402e38 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
  402e38:	b580      	push	{r7, lr}
  402e3a:	b084      	sub	sp, #16
  402e3c:	af00      	add	r7, sp, #0
  402e3e:	4603      	mov	r3, r0
  402e40:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
  402e42:	79fb      	ldrb	r3, [r7, #7]
  402e44:	4618      	mov	r0, r3
  402e46:	4b06      	ldr	r3, [pc, #24]	; (402e60 <release_the_bus+0x28>)
  402e48:	4798      	blx	r3
  402e4a:	4603      	mov	r3, r0
  402e4c:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e4e:	7bfb      	ldrb	r3, [r7, #15]
  402e50:	4618      	mov	r0, r3
  402e52:	2100      	movs	r1, #0
  402e54:	4b03      	ldr	r3, [pc, #12]	; (402e64 <release_the_bus+0x2c>)
  402e56:	4798      	blx	r3
	

}
  402e58:	3710      	adds	r7, #16
  402e5a:	46bd      	mov	sp, r7
  402e5c:	bd80      	pop	{r7, pc}
  402e5e:	bf00      	nop
  402e60:	00402dad 	.word	0x00402dad
  402e64:	00402b79 	.word	0x00402b79

00402e68 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
  402e68:	b580      	push	{r7, lr}
  402e6a:	b084      	sub	sp, #16
  402e6c:	af00      	add	r7, sp, #0
  402e6e:	4603      	mov	r3, r0
  402e70:	71fb      	strb	r3, [r7, #7]
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
  402e72:	79fb      	ldrb	r3, [r7, #7]
  402e74:	4618      	mov	r0, r3
  402e76:	4b06      	ldr	r3, [pc, #24]	; (402e90 <gpio_input+0x28>)
  402e78:	4798      	blx	r3
  402e7a:	4603      	mov	r3, r0
  402e7c:	73fb      	strb	r3, [r7, #15]
		
	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  402e7e:	7bfb      	ldrb	r3, [r7, #15]
  402e80:	4618      	mov	r0, r3
  402e82:	2100      	movs	r1, #0
  402e84:	4b03      	ldr	r3, [pc, #12]	; (402e94 <gpio_input+0x2c>)
  402e86:	4798      	blx	r3


}
  402e88:	3710      	adds	r7, #16
  402e8a:	46bd      	mov	sp, r7
  402e8c:	bd80      	pop	{r7, pc}
  402e8e:	bf00      	nop
  402e90:	00402dad 	.word	0x00402dad
  402e94:	00402b79 	.word	0x00402b79

00402e98 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
  402e98:	b580      	push	{r7, lr}
  402e9a:	b084      	sub	sp, #16
  402e9c:	af00      	add	r7, sp, #0
  402e9e:	4603      	mov	r3, r0
  402ea0:	71fb      	strb	r3, [r7, #7]
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
  402ea2:	79fb      	ldrb	r3, [r7, #7]
  402ea4:	4618      	mov	r0, r3
  402ea6:	4b07      	ldr	r3, [pc, #28]	; (402ec4 <sample_line+0x2c>)
  402ea8:	4798      	blx	r3
  402eaa:	4603      	mov	r3, r0
  402eac:	73fb      	strb	r3, [r7, #15]
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = ioport_get_pin_level(ioPin);
  402eae:	7bfb      	ldrb	r3, [r7, #15]
  402eb0:	4618      	mov	r0, r3
  402eb2:	4b05      	ldr	r3, [pc, #20]	; (402ec8 <sample_line+0x30>)
  402eb4:	4798      	blx	r3
  402eb6:	4603      	mov	r3, r0
  402eb8:	73bb      	strb	r3, [r7, #14]

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
  402eba:	7bbb      	ldrb	r3, [r7, #14]
}
  402ebc:	4618      	mov	r0, r3
  402ebe:	3710      	adds	r7, #16
  402ec0:	46bd      	mov	sp, r7
  402ec2:	bd80      	pop	{r7, pc}
  402ec4:	00402dad 	.word	0x00402dad
  402ec8:	00402c6d 	.word	0x00402c6d

00402ecc <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
  402ecc:	b480      	push	{r7}
  402ece:	b083      	sub	sp, #12
  402ed0:	af00      	add	r7, sp, #0
  402ed2:	6078      	str	r0, [r7, #4]
	// Adjust tick values depending on speed
	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
  402ed4:	687b      	ldr	r3, [r7, #4]
  402ed6:	2b00      	cmp	r3, #0
  402ed8:	d01e      	beq.n	402f18 <SetSpeed+0x4c>
	{
		// Standard Speed
		A = 0; //6;
  402eda:	4b21      	ldr	r3, [pc, #132]	; (402f60 <SetSpeed+0x94>)
  402edc:	2200      	movs	r2, #0
  402ede:	601a      	str	r2, [r3, #0]
		B = 32; //64;
  402ee0:	4b20      	ldr	r3, [pc, #128]	; (402f64 <SetSpeed+0x98>)
  402ee2:	2220      	movs	r2, #32
  402ee4:	601a      	str	r2, [r3, #0]
		C = 30; //60;
  402ee6:	4b20      	ldr	r3, [pc, #128]	; (402f68 <SetSpeed+0x9c>)
  402ee8:	221e      	movs	r2, #30
  402eea:	601a      	str	r2, [r3, #0]
		D = 2; //10;
  402eec:	4b1f      	ldr	r3, [pc, #124]	; (402f6c <SetSpeed+0xa0>)
  402eee:	2202      	movs	r2, #2
  402ef0:	601a      	str	r2, [r3, #0]
		E = 2; //9;
  402ef2:	4b1f      	ldr	r3, [pc, #124]	; (402f70 <SetSpeed+0xa4>)
  402ef4:	2202      	movs	r2, #2
  402ef6:	601a      	str	r2, [r3, #0]
		F = 27; //55;
  402ef8:	4b1e      	ldr	r3, [pc, #120]	; (402f74 <SetSpeed+0xa8>)
  402efa:	221b      	movs	r2, #27
  402efc:	601a      	str	r2, [r3, #0]
		G = 0; //0;
  402efe:	4b1e      	ldr	r3, [pc, #120]	; (402f78 <SetSpeed+0xac>)
  402f00:	2200      	movs	r2, #0
  402f02:	601a      	str	r2, [r3, #0]
		H = 240; //480;
  402f04:	4b1d      	ldr	r3, [pc, #116]	; (402f7c <SetSpeed+0xb0>)
  402f06:	22f0      	movs	r2, #240	; 0xf0
  402f08:	601a      	str	r2, [r3, #0]
		I = 35; //70;
  402f0a:	4b1d      	ldr	r3, [pc, #116]	; (402f80 <SetSpeed+0xb4>)
  402f0c:	2223      	movs	r2, #35	; 0x23
  402f0e:	601a      	str	r2, [r3, #0]
		J = 205; //410;
  402f10:	4b1c      	ldr	r3, [pc, #112]	; (402f84 <SetSpeed+0xb8>)
  402f12:	22cd      	movs	r2, #205	; 0xcd
  402f14:	601a      	str	r2, [r3, #0]
  402f16:	e01d      	b.n	402f54 <SetSpeed+0x88>


	else
	{
		// Overdrive Speed
		A = 1.5;
  402f18:	4b11      	ldr	r3, [pc, #68]	; (402f60 <SetSpeed+0x94>)
  402f1a:	2201      	movs	r2, #1
  402f1c:	601a      	str	r2, [r3, #0]
		B = 7.5;
  402f1e:	4b11      	ldr	r3, [pc, #68]	; (402f64 <SetSpeed+0x98>)
  402f20:	2207      	movs	r2, #7
  402f22:	601a      	str	r2, [r3, #0]
		C = 7.5;
  402f24:	4b10      	ldr	r3, [pc, #64]	; (402f68 <SetSpeed+0x9c>)
  402f26:	2207      	movs	r2, #7
  402f28:	601a      	str	r2, [r3, #0]
		D = 2.5;
  402f2a:	4b10      	ldr	r3, [pc, #64]	; (402f6c <SetSpeed+0xa0>)
  402f2c:	2202      	movs	r2, #2
  402f2e:	601a      	str	r2, [r3, #0]
		E = 0.75;
  402f30:	4b0f      	ldr	r3, [pc, #60]	; (402f70 <SetSpeed+0xa4>)
  402f32:	2200      	movs	r2, #0
  402f34:	601a      	str	r2, [r3, #0]
		F = 7;
  402f36:	4b0f      	ldr	r3, [pc, #60]	; (402f74 <SetSpeed+0xa8>)
  402f38:	2207      	movs	r2, #7
  402f3a:	601a      	str	r2, [r3, #0]
		G = 2.5;
  402f3c:	4b0e      	ldr	r3, [pc, #56]	; (402f78 <SetSpeed+0xac>)
  402f3e:	2202      	movs	r2, #2
  402f40:	601a      	str	r2, [r3, #0]
		H = 70;
  402f42:	4b0e      	ldr	r3, [pc, #56]	; (402f7c <SetSpeed+0xb0>)
  402f44:	2246      	movs	r2, #70	; 0x46
  402f46:	601a      	str	r2, [r3, #0]
		I = 8.5;
  402f48:	4b0d      	ldr	r3, [pc, #52]	; (402f80 <SetSpeed+0xb4>)
  402f4a:	2208      	movs	r2, #8
  402f4c:	601a      	str	r2, [r3, #0]
		J = 40;
  402f4e:	4b0d      	ldr	r3, [pc, #52]	; (402f84 <SetSpeed+0xb8>)
  402f50:	2228      	movs	r2, #40	; 0x28
  402f52:	601a      	str	r2, [r3, #0]
	}
}
  402f54:	370c      	adds	r7, #12
  402f56:	46bd      	mov	sp, r7
  402f58:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f5c:	4770      	bx	lr
  402f5e:	bf00      	nop
  402f60:	20400aa0 	.word	0x20400aa0
  402f64:	20400aa4 	.word	0x20400aa4
  402f68:	20400aac 	.word	0x20400aac
  402f6c:	20400a9c 	.word	0x20400a9c
  402f70:	20400ab8 	.word	0x20400ab8
  402f74:	20400ac0 	.word	0x20400ac0
  402f78:	20400ab0 	.word	0x20400ab0
  402f7c:	20400ab4 	.word	0x20400ab4
  402f80:	20400abc 	.word	0x20400abc
  402f84:	20400aa8 	.word	0x20400aa8

00402f88 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
  402f88:	b580      	push	{r7, lr}
  402f8a:	b084      	sub	sp, #16
  402f8c:	af00      	add	r7, sp, #0
  402f8e:	4603      	mov	r3, r0
  402f90:	71fb      	strb	r3, [r7, #7]
	int result;

	udelay(A);
  402f92:	4b17      	ldr	r3, [pc, #92]	; (402ff0 <OWTouchReset+0x68>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	4618      	mov	r0, r3
  402f98:	4b16      	ldr	r3, [pc, #88]	; (402ff4 <OWTouchReset+0x6c>)
  402f9a:	4798      	blx	r3
	drive_DQ_low(idx);
  402f9c:	79fb      	ldrb	r3, [r7, #7]
  402f9e:	4618      	mov	r0, r3
  402fa0:	4b15      	ldr	r3, [pc, #84]	; (402ff8 <OWTouchReset+0x70>)
  402fa2:	4798      	blx	r3
	udelay(H);	//tRSTL (reset low) 480-640us
  402fa4:	4b15      	ldr	r3, [pc, #84]	; (402ffc <OWTouchReset+0x74>)
  402fa6:	681b      	ldr	r3, [r3, #0]
  402fa8:	4618      	mov	r0, r3
  402faa:	4b12      	ldr	r3, [pc, #72]	; (402ff4 <OWTouchReset+0x6c>)
  402fac:	4798      	blx	r3
	release_the_bus(idx);
  402fae:	79fb      	ldrb	r3, [r7, #7]
  402fb0:	4618      	mov	r0, r3
  402fb2:	4b13      	ldr	r3, [pc, #76]	; (403000 <OWTouchReset+0x78>)
  402fb4:	4798      	blx	r3
	
	gpio_input(idx); //14may15 experiment
  402fb6:	79fb      	ldrb	r3, [r7, #7]
  402fb8:	4618      	mov	r0, r3
  402fba:	4b12      	ldr	r3, [pc, #72]	; (403004 <OWTouchReset+0x7c>)
  402fbc:	4798      	blx	r3

	
	udelay(I);	//tMSP (presence detect sample) 60-75us
  402fbe:	4b12      	ldr	r3, [pc, #72]	; (403008 <OWTouchReset+0x80>)
  402fc0:	681b      	ldr	r3, [r3, #0]
  402fc2:	4618      	mov	r0, r3
  402fc4:	4b0b      	ldr	r3, [pc, #44]	; (402ff4 <OWTouchReset+0x6c>)
  402fc6:	4798      	blx	r3
	result = sample_line(idx);
  402fc8:	79fb      	ldrb	r3, [r7, #7]
  402fca:	4618      	mov	r0, r3
  402fcc:	4b0f      	ldr	r3, [pc, #60]	; (40300c <OWTouchReset+0x84>)
  402fce:	4798      	blx	r3
  402fd0:	4603      	mov	r3, r0
  402fd2:	60fb      	str	r3, [r7, #12]
	
	gpio_input(idx); //14may15 experiment
  402fd4:	79fb      	ldrb	r3, [r7, #7]
  402fd6:	4618      	mov	r0, r3
  402fd8:	4b0a      	ldr	r3, [pc, #40]	; (403004 <OWTouchReset+0x7c>)
  402fda:	4798      	blx	r3

	udelay(J); // Complete the reset sequence recovery 5-??us (no max?)
  402fdc:	4b0c      	ldr	r3, [pc, #48]	; (403010 <OWTouchReset+0x88>)
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	4618      	mov	r0, r3
  402fe2:	4b04      	ldr	r3, [pc, #16]	; (402ff4 <OWTouchReset+0x6c>)
  402fe4:	4798      	blx	r3
	return result; // Return sample presence pulse result
  402fe6:	68fb      	ldr	r3, [r7, #12]
}
  402fe8:	4618      	mov	r0, r3
  402fea:	3710      	adds	r7, #16
  402fec:	46bd      	mov	sp, r7
  402fee:	bd80      	pop	{r7, pc}
  402ff0:	20400aa0 	.word	0x20400aa0
  402ff4:	00402cbd 	.word	0x00402cbd
  402ff8:	00402dfd 	.word	0x00402dfd
  402ffc:	20400ab4 	.word	0x20400ab4
  403000:	00402e39 	.word	0x00402e39
  403004:	00402e69 	.word	0x00402e69
  403008:	20400abc 	.word	0x20400abc
  40300c:	00402e99 	.word	0x00402e99
  403010:	20400aa8 	.word	0x20400aa8

00403014 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
  403014:	b580      	push	{r7, lr}
  403016:	b084      	sub	sp, #16
  403018:	af00      	add	r7, sp, #0
  40301a:	4603      	mov	r3, r0
  40301c:	71fb      	strb	r3, [r7, #7]
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
  40301e:	79fb      	ldrb	r3, [r7, #7]
  403020:	4618      	mov	r0, r3
  403022:	4b0d      	ldr	r3, [pc, #52]	; (403058 <drive_DQ_low_and_release_the_bus+0x44>)
  403024:	4798      	blx	r3
  403026:	4603      	mov	r3, r0
  403028:	73fb      	strb	r3, [r7, #15]
	
	ioport_set_pin_dir(ioPin, IOPORT_DIR_OUTPUT);
  40302a:	7bfb      	ldrb	r3, [r7, #15]
  40302c:	4618      	mov	r0, r3
  40302e:	2101      	movs	r1, #1
  403030:	4b0a      	ldr	r3, [pc, #40]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403032:	4798      	blx	r3
	ioport_set_pin_level(ioPin, IOPORT_PIN_LEVEL_LOW);
  403034:	7bfb      	ldrb	r3, [r7, #15]
  403036:	4618      	mov	r0, r3
  403038:	2100      	movs	r1, #0
  40303a:	4b09      	ldr	r3, [pc, #36]	; (403060 <drive_DQ_low_and_release_the_bus+0x4c>)
  40303c:	4798      	blx	r3

	udelay(A);	//tW1L 5-15us
  40303e:	4b09      	ldr	r3, [pc, #36]	; (403064 <drive_DQ_low_and_release_the_bus+0x50>)
  403040:	681b      	ldr	r3, [r3, #0]
  403042:	4618      	mov	r0, r3
  403044:	4b08      	ldr	r3, [pc, #32]	; (403068 <drive_DQ_low_and_release_the_bus+0x54>)
  403046:	4798      	blx	r3

	ioport_set_pin_dir(ioPin, IOPORT_DIR_INPUT);
  403048:	7bfb      	ldrb	r3, [r7, #15]
  40304a:	4618      	mov	r0, r3
  40304c:	2100      	movs	r1, #0
  40304e:	4b03      	ldr	r3, [pc, #12]	; (40305c <drive_DQ_low_and_release_the_bus+0x48>)
  403050:	4798      	blx	r3
	
}
  403052:	3710      	adds	r7, #16
  403054:	46bd      	mov	sp, r7
  403056:	bd80      	pop	{r7, pc}
  403058:	00402dad 	.word	0x00402dad
  40305c:	00402b79 	.word	0x00402b79
  403060:	00402c01 	.word	0x00402c01
  403064:	20400aa0 	.word	0x20400aa0
  403068:	00402cbd 	.word	0x00402cbd

0040306c <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
  40306c:	b580      	push	{r7, lr}
  40306e:	b082      	sub	sp, #8
  403070:	af00      	add	r7, sp, #0
  403072:	4603      	mov	r3, r0
  403074:	6039      	str	r1, [r7, #0]
  403076:	71fb      	strb	r3, [r7, #7]
	if (bit)
  403078:	683b      	ldr	r3, [r7, #0]
  40307a:	2b00      	cmp	r3, #0
  40307c:	d009      	beq.n	403092 <OWWriteBit+0x26>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
  40307e:	79fb      	ldrb	r3, [r7, #7]
  403080:	4618      	mov	r0, r3
  403082:	4b0e      	ldr	r3, [pc, #56]	; (4030bc <OWWriteBit+0x50>)
  403084:	4798      	blx	r3
		udelay(B);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
  403086:	4b0e      	ldr	r3, [pc, #56]	; (4030c0 <OWWriteBit+0x54>)
  403088:	681b      	ldr	r3, [r3, #0]
  40308a:	4618      	mov	r0, r3
  40308c:	4b0d      	ldr	r3, [pc, #52]	; (4030c4 <OWWriteBit+0x58>)
  40308e:	4798      	blx	r3
  403090:	e011      	b.n	4030b6 <OWWriteBit+0x4a>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
  403092:	79fb      	ldrb	r3, [r7, #7]
  403094:	4618      	mov	r0, r3
  403096:	4b0c      	ldr	r3, [pc, #48]	; (4030c8 <OWWriteBit+0x5c>)
  403098:	4798      	blx	r3
		udelay(C);	//tW0L 60-120us
  40309a:	4b0c      	ldr	r3, [pc, #48]	; (4030cc <OWWriteBit+0x60>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	4618      	mov	r0, r3
  4030a0:	4b08      	ldr	r3, [pc, #32]	; (4030c4 <OWWriteBit+0x58>)
  4030a2:	4798      	blx	r3
		release_the_bus(idx);
  4030a4:	79fb      	ldrb	r3, [r7, #7]
  4030a6:	4618      	mov	r0, r3
  4030a8:	4b09      	ldr	r3, [pc, #36]	; (4030d0 <OWWriteBit+0x64>)
  4030aa:	4798      	blx	r3
		udelay(D);	//tREC 5-??us
  4030ac:	4b09      	ldr	r3, [pc, #36]	; (4030d4 <OWWriteBit+0x68>)
  4030ae:	681b      	ldr	r3, [r3, #0]
  4030b0:	4618      	mov	r0, r3
  4030b2:	4b04      	ldr	r3, [pc, #16]	; (4030c4 <OWWriteBit+0x58>)
  4030b4:	4798      	blx	r3
	}
}
  4030b6:	3708      	adds	r7, #8
  4030b8:	46bd      	mov	sp, r7
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	00403015 	.word	0x00403015
  4030c0:	20400aa4 	.word	0x20400aa4
  4030c4:	00402cbd 	.word	0x00402cbd
  4030c8:	00402dfd 	.word	0x00402dfd
  4030cc:	20400aac 	.word	0x20400aac
  4030d0:	00402e39 	.word	0x00402e39
  4030d4:	20400a9c 	.word	0x20400a9c

004030d8 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
  4030d8:	b580      	push	{r7, lr}
  4030da:	b084      	sub	sp, #16
  4030dc:	af00      	add	r7, sp, #0
  4030de:	4603      	mov	r3, r0
  4030e0:	71fb      	strb	r3, [r7, #7]
	int result;

	drive_DQ_low_and_release_the_bus(idx);
  4030e2:	79fb      	ldrb	r3, [r7, #7]
  4030e4:	4618      	mov	r0, r3
  4030e6:	4b0b      	ldr	r3, [pc, #44]	; (403114 <OWReadBit+0x3c>)
  4030e8:	4798      	blx	r3
	
	udelay(E);	//tMSR 5-15us
  4030ea:	4b0b      	ldr	r3, [pc, #44]	; (403118 <OWReadBit+0x40>)
  4030ec:	681b      	ldr	r3, [r3, #0]
  4030ee:	4618      	mov	r0, r3
  4030f0:	4b0a      	ldr	r3, [pc, #40]	; (40311c <OWReadBit+0x44>)
  4030f2:	4798      	blx	r3
	result = sample_line(idx);
  4030f4:	79fb      	ldrb	r3, [r7, #7]
  4030f6:	4618      	mov	r0, r3
  4030f8:	4b09      	ldr	r3, [pc, #36]	; (403120 <OWReadBit+0x48>)
  4030fa:	4798      	blx	r3
  4030fc:	4603      	mov	r3, r0
  4030fe:	60fb      	str	r3, [r7, #12]
	udelay(F); // Complete the time slot and 10us recovery tREC 5+us
  403100:	4b08      	ldr	r3, [pc, #32]	; (403124 <OWReadBit+0x4c>)
  403102:	681b      	ldr	r3, [r3, #0]
  403104:	4618      	mov	r0, r3
  403106:	4b05      	ldr	r3, [pc, #20]	; (40311c <OWReadBit+0x44>)
  403108:	4798      	blx	r3

	return result;
  40310a:	68fb      	ldr	r3, [r7, #12]
}
  40310c:	4618      	mov	r0, r3
  40310e:	3710      	adds	r7, #16
  403110:	46bd      	mov	sp, r7
  403112:	bd80      	pop	{r7, pc}
  403114:	00403015 	.word	0x00403015
  403118:	20400ab8 	.word	0x20400ab8
  40311c:	00402cbd 	.word	0x00402cbd
  403120:	00402e99 	.word	0x00402e99
  403124:	20400ac0 	.word	0x20400ac0

00403128 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
  403128:	b580      	push	{r7, lr}
  40312a:	b084      	sub	sp, #16
  40312c:	af00      	add	r7, sp, #0
  40312e:	4603      	mov	r3, r0
  403130:	6039      	str	r1, [r7, #0]
  403132:	71fb      	strb	r3, [r7, #7]
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403134:	2300      	movs	r3, #0
  403136:	60fb      	str	r3, [r7, #12]
  403138:	e00d      	b.n	403156 <OWWriteByte+0x2e>
	{
		OWWriteBit(idx, data & 0x01);
  40313a:	683b      	ldr	r3, [r7, #0]
  40313c:	f003 0301 	and.w	r3, r3, #1
  403140:	79fa      	ldrb	r2, [r7, #7]
  403142:	4610      	mov	r0, r2
  403144:	4619      	mov	r1, r3
  403146:	4b07      	ldr	r3, [pc, #28]	; (403164 <OWWriteByte+0x3c>)
  403148:	4798      	blx	r3

		// shift the data byte for the next bit
		data >>= 1;
  40314a:	683b      	ldr	r3, [r7, #0]
  40314c:	105b      	asrs	r3, r3, #1
  40314e:	603b      	str	r3, [r7, #0]
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
  403150:	68fb      	ldr	r3, [r7, #12]
  403152:	3301      	adds	r3, #1
  403154:	60fb      	str	r3, [r7, #12]
  403156:	68fb      	ldr	r3, [r7, #12]
  403158:	2b07      	cmp	r3, #7
  40315a:	ddee      	ble.n	40313a <OWWriteByte+0x12>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
  40315c:	3710      	adds	r7, #16
  40315e:	46bd      	mov	sp, r7
  403160:	bd80      	pop	{r7, pc}
  403162:	bf00      	nop
  403164:	0040306d 	.word	0x0040306d

00403168 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
  403168:	b580      	push	{r7, lr}
  40316a:	b084      	sub	sp, #16
  40316c:	af00      	add	r7, sp, #0
  40316e:	4603      	mov	r3, r0
  403170:	71fb      	strb	r3, [r7, #7]
	int loop, result=0;
  403172:	2300      	movs	r3, #0
  403174:	60bb      	str	r3, [r7, #8]

	for (loop = 0; loop < 8; loop++)
  403176:	2300      	movs	r3, #0
  403178:	60fb      	str	r3, [r7, #12]
  40317a:	e010      	b.n	40319e <OWReadByte+0x36>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
  40317c:	68bb      	ldr	r3, [r7, #8]
  40317e:	105b      	asrs	r3, r3, #1
  403180:	60bb      	str	r3, [r7, #8]

		// if result is one, then set MS bit
		if (OWReadBit(idx))
  403182:	79fb      	ldrb	r3, [r7, #7]
  403184:	4618      	mov	r0, r3
  403186:	4b0a      	ldr	r3, [pc, #40]	; (4031b0 <OWReadByte+0x48>)
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
  40318c:	2b00      	cmp	r3, #0
  40318e:	d003      	beq.n	403198 <OWReadByte+0x30>
		result |= 0x80;
  403190:	68bb      	ldr	r3, [r7, #8]
  403192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403196:	60bb      	str	r3, [r7, #8]
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
  403198:	68fb      	ldr	r3, [r7, #12]
  40319a:	3301      	adds	r3, #1
  40319c:	60fb      	str	r3, [r7, #12]
  40319e:	68fb      	ldr	r3, [r7, #12]
  4031a0:	2b07      	cmp	r3, #7
  4031a2:	ddeb      	ble.n	40317c <OWReadByte+0x14>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
  4031a4:	68bb      	ldr	r3, [r7, #8]
}
  4031a6:	4618      	mov	r0, r3
  4031a8:	3710      	adds	r7, #16
  4031aa:	46bd      	mov	sp, r7
  4031ac:	bd80      	pop	{r7, pc}
  4031ae:	bf00      	nop
  4031b0:	004030d9 	.word	0x004030d9

004031b4 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
  4031b4:	b480      	push	{r7}
  4031b6:	b085      	sub	sp, #20
  4031b8:	af00      	add	r7, sp, #0
  4031ba:	4603      	mov	r3, r0
  4031bc:	460a      	mov	r2, r1
  4031be:	71fb      	strb	r3, [r7, #7]
  4031c0:	4613      	mov	r3, r2
  4031c2:	71bb      	strb	r3, [r7, #6]
   int i;
   acc ^= byte;
  4031c4:	79fa      	ldrb	r2, [r7, #7]
  4031c6:	79bb      	ldrb	r3, [r7, #6]
  4031c8:	4053      	eors	r3, r2
  4031ca:	71fb      	strb	r3, [r7, #7]
   for(i = 0; i < 8; i++) 
  4031cc:	2300      	movs	r3, #0
  4031ce:	60fb      	str	r3, [r7, #12]
  4031d0:	e012      	b.n	4031f8 <crc8_add+0x44>
   {
		if(acc & 1) 
  4031d2:	79fb      	ldrb	r3, [r7, #7]
  4031d4:	f003 0301 	and.w	r3, r3, #1
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d007      	beq.n	4031ec <crc8_add+0x38>
		{
			acc = (acc >> 1) ^ 0x8c;
  4031dc:	79fb      	ldrb	r3, [r7, #7]
  4031de:	085b      	lsrs	r3, r3, #1
  4031e0:	b2da      	uxtb	r2, r3
  4031e2:	f06f 0373 	mvn.w	r3, #115	; 0x73
  4031e6:	4053      	eors	r3, r2
  4031e8:	71fb      	strb	r3, [r7, #7]
  4031ea:	e002      	b.n	4031f2 <crc8_add+0x3e>
		} 
		else 
		{
			acc >>= 1;
  4031ec:	79fb      	ldrb	r3, [r7, #7]
  4031ee:	085b      	lsrs	r3, r3, #1
  4031f0:	71fb      	strb	r3, [r7, #7]
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
  4031f2:	68fb      	ldr	r3, [r7, #12]
  4031f4:	3301      	adds	r3, #1
  4031f6:	60fb      	str	r3, [r7, #12]
  4031f8:	68fb      	ldr	r3, [r7, #12]
  4031fa:	2b07      	cmp	r3, #7
  4031fc:	dde9      	ble.n	4031d2 <crc8_add+0x1e>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
  4031fe:	79fb      	ldrb	r3, [r7, #7]
}
  403200:	4618      	mov	r0, r3
  403202:	3714      	adds	r7, #20
  403204:	46bd      	mov	sp, r7
  403206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320a:	4770      	bx	lr

0040320c <start_timer>:
		timers[i].overflow = 0;
	}
}

void start_timer(unsigned short timerID, unsigned long duration)
{
  40320c:	b480      	push	{r7}
  40320e:	b083      	sub	sp, #12
  403210:	af00      	add	r7, sp, #0
  403212:	4603      	mov	r3, r0
  403214:	6039      	str	r1, [r7, #0]
  403216:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = ((timerTickCount+duration) & MAX_TICK);
  403218:	88fb      	ldrh	r3, [r7, #6]
  40321a:	4a17      	ldr	r2, [pc, #92]	; (403278 <start_timer+0x6c>)
  40321c:	6811      	ldr	r1, [r2, #0]
  40321e:	683a      	ldr	r2, [r7, #0]
  403220:	440a      	add	r2, r1
  403222:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  403226:	4915      	ldr	r1, [pc, #84]	; (40327c <start_timer+0x70>)
  403228:	00db      	lsls	r3, r3, #3
  40322a:	440b      	add	r3, r1
  40322c:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 1;
  40322e:	88fb      	ldrh	r3, [r7, #6]
  403230:	4a12      	ldr	r2, [pc, #72]	; (40327c <start_timer+0x70>)
  403232:	2101      	movs	r1, #1
  403234:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403238:	88fb      	ldrh	r3, [r7, #6]
  40323a:	4a10      	ldr	r2, [pc, #64]	; (40327c <start_timer+0x70>)
  40323c:	00db      	lsls	r3, r3, #3
  40323e:	4413      	add	r3, r2
  403240:	2200      	movs	r2, #0
  403242:	709a      	strb	r2, [r3, #2]
	if (duration <= (MAX_TICK - timerTickCount))
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <start_timer+0x6c>)
  403246:	681a      	ldr	r2, [r3, #0]
  403248:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  40324c:	1a9b      	subs	r3, r3, r2
  40324e:	683a      	ldr	r2, [r7, #0]
  403250:	4293      	cmp	r3, r2
  403252:	d306      	bcc.n	403262 <start_timer+0x56>
	{
		timers[timerID].overflow = 0;
  403254:	88fb      	ldrh	r3, [r7, #6]
  403256:	4a09      	ldr	r2, [pc, #36]	; (40327c <start_timer+0x70>)
  403258:	00db      	lsls	r3, r3, #3
  40325a:	4413      	add	r3, r2
  40325c:	2200      	movs	r2, #0
  40325e:	70da      	strb	r2, [r3, #3]
  403260:	e005      	b.n	40326e <start_timer+0x62>
	}
	else
	{
		timers[timerID].overflow = 1;
  403262:	88fb      	ldrh	r3, [r7, #6]
  403264:	4a05      	ldr	r2, [pc, #20]	; (40327c <start_timer+0x70>)
  403266:	00db      	lsls	r3, r3, #3
  403268:	4413      	add	r3, r2
  40326a:	2201      	movs	r2, #1
  40326c:	70da      	strb	r2, [r3, #3]
	}
}
  40326e:	370c      	adds	r7, #12
  403270:	46bd      	mov	sp, r7
  403272:	f85d 7b04 	ldr.w	r7, [sp], #4
  403276:	4770      	bx	lr
  403278:	204009a0 	.word	0x204009a0
  40327c:	20400ac4 	.word	0x20400ac4

00403280 <process_timers>:

void process_timers(void)
{
  403280:	b480      	push	{r7}
  403282:	b083      	sub	sp, #12
  403284:	af00      	add	r7, sp, #0
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  403286:	2300      	movs	r3, #0
  403288:	80fb      	strh	r3, [r7, #6]
  40328a:	e02d      	b.n	4032e8 <process_timers+0x68>
	{
		if (timers[i].active)
  40328c:	88fb      	ldrh	r3, [r7, #6]
  40328e:	4a1e      	ldr	r2, [pc, #120]	; (403308 <process_timers+0x88>)
  403290:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
  403294:	2b00      	cmp	r3, #0
  403296:	d024      	beq.n	4032e2 <process_timers+0x62>
		{
			if (rollover) 
  403298:	4b1c      	ldr	r3, [pc, #112]	; (40330c <process_timers+0x8c>)
  40329a:	781b      	ldrb	r3, [r3, #0]
  40329c:	2b00      	cmp	r3, #0
  40329e:	d005      	beq.n	4032ac <process_timers+0x2c>
			{
				timers[i].overflow = 0;
  4032a0:	88fb      	ldrh	r3, [r7, #6]
  4032a2:	4a19      	ldr	r2, [pc, #100]	; (403308 <process_timers+0x88>)
  4032a4:	00db      	lsls	r3, r3, #3
  4032a6:	4413      	add	r3, r2
  4032a8:	2200      	movs	r2, #0
  4032aa:	70da      	strb	r2, [r3, #3]
			}
			
			if (!timers[i].overflow) 	/* don't check for timer count done if the timer count overflowed when it was set  */
  4032ac:	88fb      	ldrh	r3, [r7, #6]
  4032ae:	4a16      	ldr	r2, [pc, #88]	; (403308 <process_timers+0x88>)
  4032b0:	00db      	lsls	r3, r3, #3
  4032b2:	4413      	add	r3, r2
  4032b4:	78db      	ldrb	r3, [r3, #3]
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d113      	bne.n	4032e2 <process_timers+0x62>
			{							/* but timerTickCount hasn't rolled over yet */
				if (timerTickCount > timers[i].count)
  4032ba:	88fb      	ldrh	r3, [r7, #6]
  4032bc:	4a12      	ldr	r2, [pc, #72]	; (403308 <process_timers+0x88>)
  4032be:	00db      	lsls	r3, r3, #3
  4032c0:	4413      	add	r3, r2
  4032c2:	685a      	ldr	r2, [r3, #4]
  4032c4:	4b12      	ldr	r3, [pc, #72]	; (403310 <process_timers+0x90>)
  4032c6:	681b      	ldr	r3, [r3, #0]
  4032c8:	429a      	cmp	r2, r3
  4032ca:	d20a      	bcs.n	4032e2 <process_timers+0x62>
				{
					timers[i].active = 0;
  4032cc:	88fb      	ldrh	r3, [r7, #6]
  4032ce:	4a0e      	ldr	r2, [pc, #56]	; (403308 <process_timers+0x88>)
  4032d0:	2100      	movs	r1, #0
  4032d2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
						timers[i].done = 1;
  4032d6:	88fb      	ldrh	r3, [r7, #6]
  4032d8:	4a0b      	ldr	r2, [pc, #44]	; (403308 <process_timers+0x88>)
  4032da:	00db      	lsls	r3, r3, #3
  4032dc:	4413      	add	r3, r2
  4032de:	2201      	movs	r2, #1
  4032e0:	709a      	strb	r2, [r3, #2]

void process_timers(void)
{
	unsigned short i;

	for (i=0; i<NUM_SEC_TIMERS; i++)
  4032e2:	88fb      	ldrh	r3, [r7, #6]
  4032e4:	3301      	adds	r3, #1
  4032e6:	80fb      	strh	r3, [r7, #6]
  4032e8:	88fb      	ldrh	r3, [r7, #6]
  4032ea:	2b05      	cmp	r3, #5
  4032ec:	d9ce      	bls.n	40328c <process_timers+0xc>
				}
			}	
		}
	}
	
	if (rollover)
  4032ee:	4b07      	ldr	r3, [pc, #28]	; (40330c <process_timers+0x8c>)
  4032f0:	781b      	ldrb	r3, [r3, #0]
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d002      	beq.n	4032fc <process_timers+0x7c>
	{
		rollover = 0; /* set in the interrupt, cleared here after we use it */
  4032f6:	4b05      	ldr	r3, [pc, #20]	; (40330c <process_timers+0x8c>)
  4032f8:	2200      	movs	r2, #0
  4032fa:	701a      	strb	r2, [r3, #0]
	}
}
  4032fc:	370c      	adds	r7, #12
  4032fe:	46bd      	mov	sp, r7
  403300:	f85d 7b04 	ldr.w	r7, [sp], #4
  403304:	4770      	bx	lr
  403306:	bf00      	nop
  403308:	20400ac4 	.word	0x20400ac4
  40330c:	204009a4 	.word	0x204009a4
  403310:	204009a0 	.word	0x204009a0

00403314 <timer_done>:
{
	return (timers[timerID].active);
}

unsigned short timer_done(unsigned short timerID)
{
  403314:	b480      	push	{r7}
  403316:	b083      	sub	sp, #12
  403318:	af00      	add	r7, sp, #0
  40331a:	4603      	mov	r3, r0
  40331c:	80fb      	strh	r3, [r7, #6]
	if (timers[timerID].done)
  40331e:	88fb      	ldrh	r3, [r7, #6]
  403320:	4a0a      	ldr	r2, [pc, #40]	; (40334c <timer_done+0x38>)
  403322:	00db      	lsls	r3, r3, #3
  403324:	4413      	add	r3, r2
  403326:	789b      	ldrb	r3, [r3, #2]
  403328:	2b00      	cmp	r3, #0
  40332a:	d007      	beq.n	40333c <timer_done+0x28>
	{
		timers[timerID].done = 0;
  40332c:	88fb      	ldrh	r3, [r7, #6]
  40332e:	4a07      	ldr	r2, [pc, #28]	; (40334c <timer_done+0x38>)
  403330:	00db      	lsls	r3, r3, #3
  403332:	4413      	add	r3, r2
  403334:	2200      	movs	r2, #0
  403336:	709a      	strb	r2, [r3, #2]
		return 1;
  403338:	2301      	movs	r3, #1
  40333a:	e000      	b.n	40333e <timer_done+0x2a>
	}
	else
		return 0;
  40333c:	2300      	movs	r3, #0
}
  40333e:	4618      	mov	r0, r3
  403340:	370c      	adds	r7, #12
  403342:	46bd      	mov	sp, r7
  403344:	f85d 7b04 	ldr.w	r7, [sp], #4
  403348:	4770      	bx	lr
  40334a:	bf00      	nop
  40334c:	20400ac4 	.word	0x20400ac4

00403350 <end_timer>:

void end_timer(unsigned short timerID)
{
  403350:	b480      	push	{r7}
  403352:	b083      	sub	sp, #12
  403354:	af00      	add	r7, sp, #0
  403356:	4603      	mov	r3, r0
  403358:	80fb      	strh	r3, [r7, #6]
	timers[timerID].count = 0;
  40335a:	88fb      	ldrh	r3, [r7, #6]
  40335c:	4a0d      	ldr	r2, [pc, #52]	; (403394 <end_timer+0x44>)
  40335e:	00db      	lsls	r3, r3, #3
  403360:	4413      	add	r3, r2
  403362:	2200      	movs	r2, #0
  403364:	605a      	str	r2, [r3, #4]
	timers[timerID].active = 0;
  403366:	88fb      	ldrh	r3, [r7, #6]
  403368:	4a0a      	ldr	r2, [pc, #40]	; (403394 <end_timer+0x44>)
  40336a:	2100      	movs	r1, #0
  40336c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	timers[timerID].done = 0;
  403370:	88fb      	ldrh	r3, [r7, #6]
  403372:	4a08      	ldr	r2, [pc, #32]	; (403394 <end_timer+0x44>)
  403374:	00db      	lsls	r3, r3, #3
  403376:	4413      	add	r3, r2
  403378:	2200      	movs	r2, #0
  40337a:	709a      	strb	r2, [r3, #2]
	timers[timerID].overflow = 0;
  40337c:	88fb      	ldrh	r3, [r7, #6]
  40337e:	4a05      	ldr	r2, [pc, #20]	; (403394 <end_timer+0x44>)
  403380:	00db      	lsls	r3, r3, #3
  403382:	4413      	add	r3, r2
  403384:	2200      	movs	r2, #0
  403386:	70da      	strb	r2, [r3, #3]
}
  403388:	370c      	adds	r7, #12
  40338a:	46bd      	mov	sp, r7
  40338c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403390:	4770      	bx	lr
  403392:	bf00      	nop
  403394:	20400ac4 	.word	0x20400ac4

00403398 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403398:	b480      	push	{r7}
  40339a:	b083      	sub	sp, #12
  40339c:	af00      	add	r7, sp, #0
  40339e:	4603      	mov	r3, r0
  4033a0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4033a2:	4908      	ldr	r1, [pc, #32]	; (4033c4 <NVIC_EnableIRQ+0x2c>)
  4033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033a8:	095b      	lsrs	r3, r3, #5
  4033aa:	79fa      	ldrb	r2, [r7, #7]
  4033ac:	f002 021f 	and.w	r2, r2, #31
  4033b0:	2001      	movs	r0, #1
  4033b2:	fa00 f202 	lsl.w	r2, r0, r2
  4033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ba:	370c      	adds	r7, #12
  4033bc:	46bd      	mov	sp, r7
  4033be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033c2:	4770      	bx	lr
  4033c4:	e000e100 	.word	0xe000e100

004033c8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4033c8:	b480      	push	{r7}
  4033ca:	b083      	sub	sp, #12
  4033cc:	af00      	add	r7, sp, #0
  4033ce:	4603      	mov	r3, r0
  4033d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4033d2:	4909      	ldr	r1, [pc, #36]	; (4033f8 <NVIC_DisableIRQ+0x30>)
  4033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033d8:	095b      	lsrs	r3, r3, #5
  4033da:	79fa      	ldrb	r2, [r7, #7]
  4033dc:	f002 021f 	and.w	r2, r2, #31
  4033e0:	2001      	movs	r0, #1
  4033e2:	fa00 f202 	lsl.w	r2, r0, r2
  4033e6:	3320      	adds	r3, #32
  4033e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4033ec:	370c      	adds	r7, #12
  4033ee:	46bd      	mov	sp, r7
  4033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033f4:	4770      	bx	lr
  4033f6:	bf00      	nop
  4033f8:	e000e100 	.word	0xe000e100

004033fc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4033fc:	b480      	push	{r7}
  4033fe:	b083      	sub	sp, #12
  403400:	af00      	add	r7, sp, #0
  403402:	4603      	mov	r3, r0
  403404:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403406:	4909      	ldr	r1, [pc, #36]	; (40342c <NVIC_ClearPendingIRQ+0x30>)
  403408:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40340c:	095b      	lsrs	r3, r3, #5
  40340e:	79fa      	ldrb	r2, [r7, #7]
  403410:	f002 021f 	and.w	r2, r2, #31
  403414:	2001      	movs	r0, #1
  403416:	fa00 f202 	lsl.w	r2, r0, r2
  40341a:	3360      	adds	r3, #96	; 0x60
  40341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403420:	370c      	adds	r7, #12
  403422:	46bd      	mov	sp, r7
  403424:	f85d 7b04 	ldr.w	r7, [sp], #4
  403428:	4770      	bx	lr
  40342a:	bf00      	nop
  40342c:	e000e100 	.word	0xe000e100

00403430 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403430:	b480      	push	{r7}
  403432:	b083      	sub	sp, #12
  403434:	af00      	add	r7, sp, #0
  403436:	4603      	mov	r3, r0
  403438:	6039      	str	r1, [r7, #0]
  40343a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403440:	2b00      	cmp	r3, #0
  403442:	da0b      	bge.n	40345c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403444:	490d      	ldr	r1, [pc, #52]	; (40347c <NVIC_SetPriority+0x4c>)
  403446:	79fb      	ldrb	r3, [r7, #7]
  403448:	f003 030f 	and.w	r3, r3, #15
  40344c:	3b04      	subs	r3, #4
  40344e:	683a      	ldr	r2, [r7, #0]
  403450:	b2d2      	uxtb	r2, r2
  403452:	0152      	lsls	r2, r2, #5
  403454:	b2d2      	uxtb	r2, r2
  403456:	440b      	add	r3, r1
  403458:	761a      	strb	r2, [r3, #24]
  40345a:	e009      	b.n	403470 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40345c:	4908      	ldr	r1, [pc, #32]	; (403480 <NVIC_SetPriority+0x50>)
  40345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403462:	683a      	ldr	r2, [r7, #0]
  403464:	b2d2      	uxtb	r2, r2
  403466:	0152      	lsls	r2, r2, #5
  403468:	b2d2      	uxtb	r2, r2
  40346a:	440b      	add	r3, r1
  40346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403470:	370c      	adds	r7, #12
  403472:	46bd      	mov	sp, r7
  403474:	f85d 7b04 	ldr.w	r7, [sp], #4
  403478:	4770      	bx	lr
  40347a:	bf00      	nop
  40347c:	e000ed00 	.word	0xe000ed00
  403480:	e000e100 	.word	0xe000e100

00403484 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403484:	b580      	push	{r7, lr}
  403486:	b082      	sub	sp, #8
  403488:	af00      	add	r7, sp, #0
  40348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  40348c:	687b      	ldr	r3, [r7, #4]
  40348e:	3b01      	subs	r3, #1
  403490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403494:	d301      	bcc.n	40349a <SysTick_Config+0x16>
  403496:	2301      	movs	r3, #1
  403498:	e00f      	b.n	4034ba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40349a:	4a0a      	ldr	r2, [pc, #40]	; (4034c4 <SysTick_Config+0x40>)
  40349c:	687b      	ldr	r3, [r7, #4]
  40349e:	3b01      	subs	r3, #1
  4034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  4034a2:	f04f 30ff 	mov.w	r0, #4294967295
  4034a6:	2107      	movs	r1, #7
  4034a8:	4b07      	ldr	r3, [pc, #28]	; (4034c8 <SysTick_Config+0x44>)
  4034aa:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4034ac:	4b05      	ldr	r3, [pc, #20]	; (4034c4 <SysTick_Config+0x40>)
  4034ae:	2200      	movs	r2, #0
  4034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4034b2:	4b04      	ldr	r3, [pc, #16]	; (4034c4 <SysTick_Config+0x40>)
  4034b4:	2207      	movs	r2, #7
  4034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
  4034b8:	2300      	movs	r3, #0
}
  4034ba:	4618      	mov	r0, r3
  4034bc:	3708      	adds	r7, #8
  4034be:	46bd      	mov	sp, r7
  4034c0:	bd80      	pop	{r7, pc}
  4034c2:	bf00      	nop
  4034c4:	e000e010 	.word	0xe000e010
  4034c8:	00403431 	.word	0x00403431

004034cc <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4034cc:	b480      	push	{r7}
  4034ce:	b085      	sub	sp, #20
  4034d0:	af00      	add	r7, sp, #0
  4034d2:	6078      	str	r0, [r7, #4]
  4034d4:	460b      	mov	r3, r1
  4034d6:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  4034d8:	687b      	ldr	r3, [r7, #4]
  4034da:	685b      	ldr	r3, [r3, #4]
  4034dc:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  4034de:	78fb      	ldrb	r3, [r7, #3]
  4034e0:	2bff      	cmp	r3, #255	; 0xff
  4034e2:	d104      	bne.n	4034ee <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  4034e4:	68fb      	ldr	r3, [r7, #12]
  4034e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4034ea:	60fb      	str	r3, [r7, #12]
  4034ec:	e007      	b.n	4034fe <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4034ee:	68fb      	ldr	r3, [r7, #12]
  4034f0:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4034f4:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4034f6:	78fb      	ldrb	r3, [r7, #3]
  4034f8:	68fa      	ldr	r2, [r7, #12]
  4034fa:	4313      	orrs	r3, r2
  4034fc:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  4034fe:	687b      	ldr	r3, [r7, #4]
  403500:	68fa      	ldr	r2, [r7, #12]
  403502:	605a      	str	r2, [r3, #4]
}
  403504:	3714      	adds	r7, #20
  403506:	46bd      	mov	sp, r7
  403508:	f85d 7b04 	ldr.w	r7, [sp], #4
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <afec_get_latest_value>:
 * \param afec  Base address of the AFEC.
 *
 * \return AFEC latest converted value.
 */
static inline uint32_t afec_get_latest_value(Afec *const afec)
{
  403510:	b480      	push	{r7}
  403512:	b083      	sub	sp, #12
  403514:	af00      	add	r7, sp, #0
  403516:	6078      	str	r0, [r7, #4]
	return afec->AFEC_LCDR & AFEC_LCDR_LDATA_Msk;
  403518:	687b      	ldr	r3, [r7, #4]
  40351a:	6a1b      	ldr	r3, [r3, #32]
  40351c:	b29b      	uxth	r3, r3
}
  40351e:	4618      	mov	r0, r3
  403520:	370c      	adds	r7, #12
  403522:	46bd      	mov	sp, r7
  403524:	f85d 7b04 	ldr.w	r7, [sp], #4
  403528:	4770      	bx	lr
  40352a:	bf00      	nop

0040352c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40352c:	b480      	push	{r7}
  40352e:	b083      	sub	sp, #12
  403530:	af00      	add	r7, sp, #0
  403532:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403534:	687b      	ldr	r3, [r7, #4]
  403536:	2b07      	cmp	r3, #7
  403538:	d825      	bhi.n	403586 <osc_get_rate+0x5a>
  40353a:	a201      	add	r2, pc, #4	; (adr r2, 403540 <osc_get_rate+0x14>)
  40353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403540:	00403561 	.word	0x00403561
  403544:	00403567 	.word	0x00403567
  403548:	0040356d 	.word	0x0040356d
  40354c:	00403573 	.word	0x00403573
  403550:	00403577 	.word	0x00403577
  403554:	0040357b 	.word	0x0040357b
  403558:	0040357f 	.word	0x0040357f
  40355c:	00403583 	.word	0x00403583
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  403560:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403564:	e010      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40356a:	e00d      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403570:	e00a      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  403572:	4b08      	ldr	r3, [pc, #32]	; (403594 <osc_get_rate+0x68>)
  403574:	e008      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403576:	4b08      	ldr	r3, [pc, #32]	; (403598 <osc_get_rate+0x6c>)
  403578:	e006      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40357a:	4b08      	ldr	r3, [pc, #32]	; (40359c <osc_get_rate+0x70>)
  40357c:	e004      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40357e:	4b08      	ldr	r3, [pc, #32]	; (4035a0 <osc_get_rate+0x74>)
  403580:	e002      	b.n	403588 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  403582:	4b06      	ldr	r3, [pc, #24]	; (40359c <osc_get_rate+0x70>)
  403584:	e000      	b.n	403588 <osc_get_rate+0x5c>
	}

	return 0;
  403586:	2300      	movs	r3, #0
}
  403588:	4618      	mov	r0, r3
  40358a:	370c      	adds	r7, #12
  40358c:	46bd      	mov	sp, r7
  40358e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403592:	4770      	bx	lr
  403594:	003d0900 	.word	0x003d0900
  403598:	007a1200 	.word	0x007a1200
  40359c:	00b71b00 	.word	0x00b71b00
  4035a0:	00f42400 	.word	0x00f42400

004035a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4035a4:	b580      	push	{r7, lr}
  4035a6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4035a8:	2006      	movs	r0, #6
  4035aa:	4b05      	ldr	r3, [pc, #20]	; (4035c0 <sysclk_get_main_hz+0x1c>)
  4035ac:	4798      	blx	r3
  4035ae:	4602      	mov	r2, r0
  4035b0:	4613      	mov	r3, r2
  4035b2:	009b      	lsls	r3, r3, #2
  4035b4:	4413      	add	r3, r2
  4035b6:	009a      	lsls	r2, r3, #2
  4035b8:	4413      	add	r3, r2
  4035ba:	089b      	lsrs	r3, r3, #2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4035bc:	4618      	mov	r0, r3
  4035be:	bd80      	pop	{r7, pc}
  4035c0:	0040352d 	.word	0x0040352d

004035c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4035c4:	b580      	push	{r7, lr}
  4035c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035c8:	4b02      	ldr	r3, [pc, #8]	; (4035d4 <sysclk_get_cpu_hz+0x10>)
  4035ca:	4798      	blx	r3
  4035cc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4035ce:	4618      	mov	r0, r3
  4035d0:	bd80      	pop	{r7, pc}
  4035d2:	bf00      	nop
  4035d4:	004035a5 	.word	0x004035a5

004035d8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4035d8:	b580      	push	{r7, lr}
  4035da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4035dc:	4b02      	ldr	r3, [pc, #8]	; (4035e8 <sysclk_get_peripheral_hz+0x10>)
  4035de:	4798      	blx	r3
  4035e0:	4603      	mov	r3, r0
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4035e2:	4618      	mov	r0, r3
  4035e4:	bd80      	pop	{r7, pc}
  4035e6:	bf00      	nop
  4035e8:	004035a5 	.word	0x004035a5

004035ec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4035ec:	b580      	push	{r7, lr}
  4035ee:	b082      	sub	sp, #8
  4035f0:	af00      	add	r7, sp, #0
  4035f2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4035f4:	6878      	ldr	r0, [r7, #4]
  4035f6:	4b02      	ldr	r3, [pc, #8]	; (403600 <sysclk_enable_peripheral_clock+0x14>)
  4035f8:	4798      	blx	r3
}
  4035fa:	3708      	adds	r7, #8
  4035fc:	46bd      	mov	sp, r7
  4035fe:	bd80      	pop	{r7, pc}
  403600:	004016d1 	.word	0x004016d1

00403604 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403604:	b480      	push	{r7}
  403606:	b08b      	sub	sp, #44	; 0x2c
  403608:	af00      	add	r7, sp, #0
  40360a:	6078      	str	r0, [r7, #4]
  40360c:	460b      	mov	r3, r1
  40360e:	70fb      	strb	r3, [r7, #3]
  403610:	687b      	ldr	r3, [r7, #4]
  403612:	627b      	str	r3, [r7, #36]	; 0x24
  403614:	78fb      	ldrb	r3, [r7, #3]
  403616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40361c:	61fb      	str	r3, [r7, #28]
  40361e:	69fb      	ldr	r3, [r7, #28]
  403620:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403622:	69bb      	ldr	r3, [r7, #24]
  403624:	095b      	lsrs	r3, r3, #5
  403626:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403628:	697a      	ldr	r2, [r7, #20]
  40362a:	4b10      	ldr	r3, [pc, #64]	; (40366c <ioport_set_pin_level+0x68>)
  40362c:	4413      	add	r3, r2
  40362e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403630:	613b      	str	r3, [r7, #16]

	if (level) {
  403632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403636:	2b00      	cmp	r3, #0
  403638:	d009      	beq.n	40364e <ioport_set_pin_level+0x4a>
  40363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40363c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40363e:	68fb      	ldr	r3, [r7, #12]
  403640:	f003 031f 	and.w	r3, r3, #31
  403644:	2201      	movs	r2, #1
  403646:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403648:	693b      	ldr	r3, [r7, #16]
  40364a:	631a      	str	r2, [r3, #48]	; 0x30
  40364c:	e008      	b.n	403660 <ioport_set_pin_level+0x5c>
  40364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403650:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403652:	68bb      	ldr	r3, [r7, #8]
  403654:	f003 031f 	and.w	r3, r3, #31
  403658:	2201      	movs	r2, #1
  40365a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40365c:	693b      	ldr	r3, [r7, #16]
  40365e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  403660:	372c      	adds	r7, #44	; 0x2c
  403662:	46bd      	mov	sp, r7
  403664:	f85d 7b04 	ldr.w	r7, [sp], #4
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	00200707 	.word	0x00200707

00403670 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403670:	b580      	push	{r7, lr}
  403672:	b08c      	sub	sp, #48	; 0x30
  403674:	af00      	add	r7, sp, #0
  403676:	6078      	str	r0, [r7, #4]
  403678:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40367a:	4b48      	ldr	r3, [pc, #288]	; (40379c <usart_serial_init+0x12c>)
  40367c:	4798      	blx	r3
  40367e:	4603      	mov	r3, r0
  403680:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403682:	683b      	ldr	r3, [r7, #0]
  403684:	681b      	ldr	r3, [r3, #0]
  403686:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403688:	683b      	ldr	r3, [r7, #0]
  40368a:	689b      	ldr	r3, [r3, #8]
  40368c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40368e:	683b      	ldr	r3, [r7, #0]
  403690:	681b      	ldr	r3, [r3, #0]
  403692:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403694:	683b      	ldr	r3, [r7, #0]
  403696:	685b      	ldr	r3, [r3, #4]
  403698:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40369a:	683b      	ldr	r3, [r7, #0]
  40369c:	689b      	ldr	r3, [r3, #8]
  40369e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4036a0:	683b      	ldr	r3, [r7, #0]
  4036a2:	68db      	ldr	r3, [r3, #12]
  4036a4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4036a6:	2300      	movs	r3, #0
  4036a8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4036aa:	687b      	ldr	r3, [r7, #4]
  4036ac:	4a3c      	ldr	r2, [pc, #240]	; (4037a0 <usart_serial_init+0x130>)
  4036ae:	4293      	cmp	r3, r2
  4036b0:	d108      	bne.n	4036c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4036b2:	2007      	movs	r0, #7
  4036b4:	4b3b      	ldr	r3, [pc, #236]	; (4037a4 <usart_serial_init+0x134>)
  4036b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036bc:	6878      	ldr	r0, [r7, #4]
  4036be:	4619      	mov	r1, r3
  4036c0:	4b39      	ldr	r3, [pc, #228]	; (4037a8 <usart_serial_init+0x138>)
  4036c2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4036c4:	687b      	ldr	r3, [r7, #4]
  4036c6:	4a39      	ldr	r2, [pc, #228]	; (4037ac <usart_serial_init+0x13c>)
  4036c8:	4293      	cmp	r3, r2
  4036ca:	d108      	bne.n	4036de <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4036cc:	2008      	movs	r0, #8
  4036ce:	4b35      	ldr	r3, [pc, #212]	; (4037a4 <usart_serial_init+0x134>)
  4036d0:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036d6:	6878      	ldr	r0, [r7, #4]
  4036d8:	4619      	mov	r1, r3
  4036da:	4b33      	ldr	r3, [pc, #204]	; (4037a8 <usart_serial_init+0x138>)
  4036dc:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4036de:	687b      	ldr	r3, [r7, #4]
  4036e0:	4a33      	ldr	r2, [pc, #204]	; (4037b0 <usart_serial_init+0x140>)
  4036e2:	4293      	cmp	r3, r2
  4036e4:	d108      	bne.n	4036f8 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  4036e6:	202c      	movs	r0, #44	; 0x2c
  4036e8:	4b2e      	ldr	r3, [pc, #184]	; (4037a4 <usart_serial_init+0x134>)
  4036ea:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4036f0:	6878      	ldr	r0, [r7, #4]
  4036f2:	4619      	mov	r1, r3
  4036f4:	4b2c      	ldr	r3, [pc, #176]	; (4037a8 <usart_serial_init+0x138>)
  4036f6:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4036f8:	687b      	ldr	r3, [r7, #4]
  4036fa:	4a2e      	ldr	r2, [pc, #184]	; (4037b4 <usart_serial_init+0x144>)
  4036fc:	4293      	cmp	r3, r2
  4036fe:	d108      	bne.n	403712 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403700:	202d      	movs	r0, #45	; 0x2d
  403702:	4b28      	ldr	r3, [pc, #160]	; (4037a4 <usart_serial_init+0x134>)
  403704:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403706:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40370a:	6878      	ldr	r0, [r7, #4]
  40370c:	4619      	mov	r1, r3
  40370e:	4b26      	ldr	r3, [pc, #152]	; (4037a8 <usart_serial_init+0x138>)
  403710:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403712:	687b      	ldr	r3, [r7, #4]
  403714:	4a28      	ldr	r2, [pc, #160]	; (4037b8 <usart_serial_init+0x148>)
  403716:	4293      	cmp	r3, r2
  403718:	d111      	bne.n	40373e <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40371a:	200d      	movs	r0, #13
  40371c:	4b21      	ldr	r3, [pc, #132]	; (4037a4 <usart_serial_init+0x134>)
  40371e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403720:	4b1e      	ldr	r3, [pc, #120]	; (40379c <usart_serial_init+0x12c>)
  403722:	4798      	blx	r3
  403724:	4602      	mov	r2, r0
  403726:	f107 030c 	add.w	r3, r7, #12
  40372a:	6878      	ldr	r0, [r7, #4]
  40372c:	4619      	mov	r1, r3
  40372e:	4b23      	ldr	r3, [pc, #140]	; (4037bc <usart_serial_init+0x14c>)
  403730:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403732:	6878      	ldr	r0, [r7, #4]
  403734:	4b22      	ldr	r3, [pc, #136]	; (4037c0 <usart_serial_init+0x150>)
  403736:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403738:	6878      	ldr	r0, [r7, #4]
  40373a:	4b22      	ldr	r3, [pc, #136]	; (4037c4 <usart_serial_init+0x154>)
  40373c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40373e:	687b      	ldr	r3, [r7, #4]
  403740:	4a21      	ldr	r2, [pc, #132]	; (4037c8 <usart_serial_init+0x158>)
  403742:	4293      	cmp	r3, r2
  403744:	d111      	bne.n	40376a <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403746:	200e      	movs	r0, #14
  403748:	4b16      	ldr	r3, [pc, #88]	; (4037a4 <usart_serial_init+0x134>)
  40374a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40374c:	4b13      	ldr	r3, [pc, #76]	; (40379c <usart_serial_init+0x12c>)
  40374e:	4798      	blx	r3
  403750:	4602      	mov	r2, r0
  403752:	f107 030c 	add.w	r3, r7, #12
  403756:	6878      	ldr	r0, [r7, #4]
  403758:	4619      	mov	r1, r3
  40375a:	4b18      	ldr	r3, [pc, #96]	; (4037bc <usart_serial_init+0x14c>)
  40375c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40375e:	6878      	ldr	r0, [r7, #4]
  403760:	4b17      	ldr	r3, [pc, #92]	; (4037c0 <usart_serial_init+0x150>)
  403762:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403764:	6878      	ldr	r0, [r7, #4]
  403766:	4b17      	ldr	r3, [pc, #92]	; (4037c4 <usart_serial_init+0x154>)
  403768:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40376a:	687b      	ldr	r3, [r7, #4]
  40376c:	4a17      	ldr	r2, [pc, #92]	; (4037cc <usart_serial_init+0x15c>)
  40376e:	4293      	cmp	r3, r2
  403770:	d111      	bne.n	403796 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  403772:	200f      	movs	r0, #15
  403774:	4b0b      	ldr	r3, [pc, #44]	; (4037a4 <usart_serial_init+0x134>)
  403776:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403778:	4b08      	ldr	r3, [pc, #32]	; (40379c <usart_serial_init+0x12c>)
  40377a:	4798      	blx	r3
  40377c:	4602      	mov	r2, r0
  40377e:	f107 030c 	add.w	r3, r7, #12
  403782:	6878      	ldr	r0, [r7, #4]
  403784:	4619      	mov	r1, r3
  403786:	4b0d      	ldr	r3, [pc, #52]	; (4037bc <usart_serial_init+0x14c>)
  403788:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40378a:	6878      	ldr	r0, [r7, #4]
  40378c:	4b0c      	ldr	r3, [pc, #48]	; (4037c0 <usart_serial_init+0x150>)
  40378e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403790:	6878      	ldr	r0, [r7, #4]
  403792:	4b0c      	ldr	r3, [pc, #48]	; (4037c4 <usart_serial_init+0x154>)
  403794:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403796:	3730      	adds	r7, #48	; 0x30
  403798:	46bd      	mov	sp, r7
  40379a:	bd80      	pop	{r7, pc}
  40379c:	004035d9 	.word	0x004035d9
  4037a0:	400e0800 	.word	0x400e0800
  4037a4:	004035ed 	.word	0x004035ed
  4037a8:	00401f69 	.word	0x00401f69
  4037ac:	400e0a00 	.word	0x400e0a00
  4037b0:	400e1a00 	.word	0x400e1a00
  4037b4:	400e1c00 	.word	0x400e1c00
  4037b8:	40024000 	.word	0x40024000
  4037bc:	00402105 	.word	0x00402105
  4037c0:	00402189 	.word	0x00402189
  4037c4:	004021d5 	.word	0x004021d5
  4037c8:	40028000 	.word	0x40028000
  4037cc:	4002c000 	.word	0x4002c000

004037d0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4037d0:	b580      	push	{r7, lr}
  4037d2:	b082      	sub	sp, #8
  4037d4:	af00      	add	r7, sp, #0
  4037d6:	6078      	str	r0, [r7, #4]
  4037d8:	460b      	mov	r3, r1
  4037da:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4037dc:	687b      	ldr	r3, [r7, #4]
  4037de:	4a36      	ldr	r2, [pc, #216]	; (4038b8 <usart_serial_putchar+0xe8>)
  4037e0:	4293      	cmp	r3, r2
  4037e2:	d10a      	bne.n	4037fa <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4037e4:	bf00      	nop
  4037e6:	78fb      	ldrb	r3, [r7, #3]
  4037e8:	6878      	ldr	r0, [r7, #4]
  4037ea:	4619      	mov	r1, r3
  4037ec:	4b33      	ldr	r3, [pc, #204]	; (4038bc <usart_serial_putchar+0xec>)
  4037ee:	4798      	blx	r3
  4037f0:	4603      	mov	r3, r0
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	d1f7      	bne.n	4037e6 <usart_serial_putchar+0x16>
		return 1;
  4037f6:	2301      	movs	r3, #1
  4037f8:	e05a      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4037fa:	687b      	ldr	r3, [r7, #4]
  4037fc:	4a30      	ldr	r2, [pc, #192]	; (4038c0 <usart_serial_putchar+0xf0>)
  4037fe:	4293      	cmp	r3, r2
  403800:	d10a      	bne.n	403818 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403802:	bf00      	nop
  403804:	78fb      	ldrb	r3, [r7, #3]
  403806:	6878      	ldr	r0, [r7, #4]
  403808:	4619      	mov	r1, r3
  40380a:	4b2c      	ldr	r3, [pc, #176]	; (4038bc <usart_serial_putchar+0xec>)
  40380c:	4798      	blx	r3
  40380e:	4603      	mov	r3, r0
  403810:	2b00      	cmp	r3, #0
  403812:	d1f7      	bne.n	403804 <usart_serial_putchar+0x34>
		return 1;
  403814:	2301      	movs	r3, #1
  403816:	e04b      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403818:	687b      	ldr	r3, [r7, #4]
  40381a:	4a2a      	ldr	r2, [pc, #168]	; (4038c4 <usart_serial_putchar+0xf4>)
  40381c:	4293      	cmp	r3, r2
  40381e:	d10a      	bne.n	403836 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403820:	bf00      	nop
  403822:	78fb      	ldrb	r3, [r7, #3]
  403824:	6878      	ldr	r0, [r7, #4]
  403826:	4619      	mov	r1, r3
  403828:	4b24      	ldr	r3, [pc, #144]	; (4038bc <usart_serial_putchar+0xec>)
  40382a:	4798      	blx	r3
  40382c:	4603      	mov	r3, r0
  40382e:	2b00      	cmp	r3, #0
  403830:	d1f7      	bne.n	403822 <usart_serial_putchar+0x52>
		return 1;
  403832:	2301      	movs	r3, #1
  403834:	e03c      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403836:	687b      	ldr	r3, [r7, #4]
  403838:	4a23      	ldr	r2, [pc, #140]	; (4038c8 <usart_serial_putchar+0xf8>)
  40383a:	4293      	cmp	r3, r2
  40383c:	d10a      	bne.n	403854 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40383e:	bf00      	nop
  403840:	78fb      	ldrb	r3, [r7, #3]
  403842:	6878      	ldr	r0, [r7, #4]
  403844:	4619      	mov	r1, r3
  403846:	4b1d      	ldr	r3, [pc, #116]	; (4038bc <usart_serial_putchar+0xec>)
  403848:	4798      	blx	r3
  40384a:	4603      	mov	r3, r0
  40384c:	2b00      	cmp	r3, #0
  40384e:	d1f7      	bne.n	403840 <usart_serial_putchar+0x70>
		return 1;
  403850:	2301      	movs	r3, #1
  403852:	e02d      	b.n	4038b0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403854:	687b      	ldr	r3, [r7, #4]
  403856:	4a1d      	ldr	r2, [pc, #116]	; (4038cc <usart_serial_putchar+0xfc>)
  403858:	4293      	cmp	r3, r2
  40385a:	d10a      	bne.n	403872 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40385c:	bf00      	nop
  40385e:	78fb      	ldrb	r3, [r7, #3]
  403860:	6878      	ldr	r0, [r7, #4]
  403862:	4619      	mov	r1, r3
  403864:	4b1a      	ldr	r3, [pc, #104]	; (4038d0 <usart_serial_putchar+0x100>)
  403866:	4798      	blx	r3
  403868:	4603      	mov	r3, r0
  40386a:	2b00      	cmp	r3, #0
  40386c:	d1f7      	bne.n	40385e <usart_serial_putchar+0x8e>
		return 1;
  40386e:	2301      	movs	r3, #1
  403870:	e01e      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403872:	687b      	ldr	r3, [r7, #4]
  403874:	4a17      	ldr	r2, [pc, #92]	; (4038d4 <usart_serial_putchar+0x104>)
  403876:	4293      	cmp	r3, r2
  403878:	d10a      	bne.n	403890 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40387a:	bf00      	nop
  40387c:	78fb      	ldrb	r3, [r7, #3]
  40387e:	6878      	ldr	r0, [r7, #4]
  403880:	4619      	mov	r1, r3
  403882:	4b13      	ldr	r3, [pc, #76]	; (4038d0 <usart_serial_putchar+0x100>)
  403884:	4798      	blx	r3
  403886:	4603      	mov	r3, r0
  403888:	2b00      	cmp	r3, #0
  40388a:	d1f7      	bne.n	40387c <usart_serial_putchar+0xac>
		return 1;
  40388c:	2301      	movs	r3, #1
  40388e:	e00f      	b.n	4038b0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403890:	687b      	ldr	r3, [r7, #4]
  403892:	4a11      	ldr	r2, [pc, #68]	; (4038d8 <usart_serial_putchar+0x108>)
  403894:	4293      	cmp	r3, r2
  403896:	d10a      	bne.n	4038ae <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  403898:	bf00      	nop
  40389a:	78fb      	ldrb	r3, [r7, #3]
  40389c:	6878      	ldr	r0, [r7, #4]
  40389e:	4619      	mov	r1, r3
  4038a0:	4b0b      	ldr	r3, [pc, #44]	; (4038d0 <usart_serial_putchar+0x100>)
  4038a2:	4798      	blx	r3
  4038a4:	4603      	mov	r3, r0
  4038a6:	2b00      	cmp	r3, #0
  4038a8:	d1f7      	bne.n	40389a <usart_serial_putchar+0xca>
		return 1;
  4038aa:	2301      	movs	r3, #1
  4038ac:	e000      	b.n	4038b0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4038ae:	2300      	movs	r3, #0
}
  4038b0:	4618      	mov	r0, r3
  4038b2:	3708      	adds	r7, #8
  4038b4:	46bd      	mov	sp, r7
  4038b6:	bd80      	pop	{r7, pc}
  4038b8:	400e0800 	.word	0x400e0800
  4038bc:	00401fc1 	.word	0x00401fc1
  4038c0:	400e0a00 	.word	0x400e0a00
  4038c4:	400e1a00 	.word	0x400e1a00
  4038c8:	400e1c00 	.word	0x400e1c00
  4038cc:	40024000 	.word	0x40024000
  4038d0:	004022dd 	.word	0x004022dd
  4038d4:	40028000 	.word	0x40028000
  4038d8:	4002c000 	.word	0x4002c000

004038dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4038dc:	b580      	push	{r7, lr}
  4038de:	b084      	sub	sp, #16
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	6078      	str	r0, [r7, #4]
  4038e4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  4038e6:	2300      	movs	r3, #0
  4038e8:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4038ea:	687b      	ldr	r3, [r7, #4]
  4038ec:	4a33      	ldr	r2, [pc, #204]	; (4039bc <usart_serial_getchar+0xe0>)
  4038ee:	4293      	cmp	r3, r2
  4038f0:	d107      	bne.n	403902 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  4038f2:	bf00      	nop
  4038f4:	6878      	ldr	r0, [r7, #4]
  4038f6:	6839      	ldr	r1, [r7, #0]
  4038f8:	4b31      	ldr	r3, [pc, #196]	; (4039c0 <usart_serial_getchar+0xe4>)
  4038fa:	4798      	blx	r3
  4038fc:	4603      	mov	r3, r0
  4038fe:	2b00      	cmp	r3, #0
  403900:	d1f8      	bne.n	4038f4 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403902:	687b      	ldr	r3, [r7, #4]
  403904:	4a2f      	ldr	r2, [pc, #188]	; (4039c4 <usart_serial_getchar+0xe8>)
  403906:	4293      	cmp	r3, r2
  403908:	d107      	bne.n	40391a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40390a:	bf00      	nop
  40390c:	6878      	ldr	r0, [r7, #4]
  40390e:	6839      	ldr	r1, [r7, #0]
  403910:	4b2b      	ldr	r3, [pc, #172]	; (4039c0 <usart_serial_getchar+0xe4>)
  403912:	4798      	blx	r3
  403914:	4603      	mov	r3, r0
  403916:	2b00      	cmp	r3, #0
  403918:	d1f8      	bne.n	40390c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40391a:	687b      	ldr	r3, [r7, #4]
  40391c:	4a2a      	ldr	r2, [pc, #168]	; (4039c8 <usart_serial_getchar+0xec>)
  40391e:	4293      	cmp	r3, r2
  403920:	d107      	bne.n	403932 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403922:	bf00      	nop
  403924:	6878      	ldr	r0, [r7, #4]
  403926:	6839      	ldr	r1, [r7, #0]
  403928:	4b25      	ldr	r3, [pc, #148]	; (4039c0 <usart_serial_getchar+0xe4>)
  40392a:	4798      	blx	r3
  40392c:	4603      	mov	r3, r0
  40392e:	2b00      	cmp	r3, #0
  403930:	d1f8      	bne.n	403924 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403932:	687b      	ldr	r3, [r7, #4]
  403934:	4a25      	ldr	r2, [pc, #148]	; (4039cc <usart_serial_getchar+0xf0>)
  403936:	4293      	cmp	r3, r2
  403938:	d107      	bne.n	40394a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40393a:	bf00      	nop
  40393c:	6878      	ldr	r0, [r7, #4]
  40393e:	6839      	ldr	r1, [r7, #0]
  403940:	4b1f      	ldr	r3, [pc, #124]	; (4039c0 <usart_serial_getchar+0xe4>)
  403942:	4798      	blx	r3
  403944:	4603      	mov	r3, r0
  403946:	2b00      	cmp	r3, #0
  403948:	d1f8      	bne.n	40393c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40394a:	687b      	ldr	r3, [r7, #4]
  40394c:	4a20      	ldr	r2, [pc, #128]	; (4039d0 <usart_serial_getchar+0xf4>)
  40394e:	4293      	cmp	r3, r2
  403950:	d10d      	bne.n	40396e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  403952:	bf00      	nop
  403954:	f107 030c 	add.w	r3, r7, #12
  403958:	6878      	ldr	r0, [r7, #4]
  40395a:	4619      	mov	r1, r3
  40395c:	4b1d      	ldr	r3, [pc, #116]	; (4039d4 <usart_serial_getchar+0xf8>)
  40395e:	4798      	blx	r3
  403960:	4603      	mov	r3, r0
  403962:	2b00      	cmp	r3, #0
  403964:	d1f6      	bne.n	403954 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  403966:	68fb      	ldr	r3, [r7, #12]
  403968:	b2da      	uxtb	r2, r3
  40396a:	683b      	ldr	r3, [r7, #0]
  40396c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40396e:	687b      	ldr	r3, [r7, #4]
  403970:	4a19      	ldr	r2, [pc, #100]	; (4039d8 <usart_serial_getchar+0xfc>)
  403972:	4293      	cmp	r3, r2
  403974:	d10d      	bne.n	403992 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  403976:	bf00      	nop
  403978:	f107 030c 	add.w	r3, r7, #12
  40397c:	6878      	ldr	r0, [r7, #4]
  40397e:	4619      	mov	r1, r3
  403980:	4b14      	ldr	r3, [pc, #80]	; (4039d4 <usart_serial_getchar+0xf8>)
  403982:	4798      	blx	r3
  403984:	4603      	mov	r3, r0
  403986:	2b00      	cmp	r3, #0
  403988:	d1f6      	bne.n	403978 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40398a:	68fb      	ldr	r3, [r7, #12]
  40398c:	b2da      	uxtb	r2, r3
  40398e:	683b      	ldr	r3, [r7, #0]
  403990:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	4a11      	ldr	r2, [pc, #68]	; (4039dc <usart_serial_getchar+0x100>)
  403996:	4293      	cmp	r3, r2
  403998:	d10d      	bne.n	4039b6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40399a:	bf00      	nop
  40399c:	f107 030c 	add.w	r3, r7, #12
  4039a0:	6878      	ldr	r0, [r7, #4]
  4039a2:	4619      	mov	r1, r3
  4039a4:	4b0b      	ldr	r3, [pc, #44]	; (4039d4 <usart_serial_getchar+0xf8>)
  4039a6:	4798      	blx	r3
  4039a8:	4603      	mov	r3, r0
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	d1f6      	bne.n	40399c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4039ae:	68fb      	ldr	r3, [r7, #12]
  4039b0:	b2da      	uxtb	r2, r3
  4039b2:	683b      	ldr	r3, [r7, #0]
  4039b4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4039b6:	3710      	adds	r7, #16
  4039b8:	46bd      	mov	sp, r7
  4039ba:	bd80      	pop	{r7, pc}
  4039bc:	400e0800 	.word	0x400e0800
  4039c0:	00401ff1 	.word	0x00401ff1
  4039c4:	400e0a00 	.word	0x400e0a00
  4039c8:	400e1a00 	.word	0x400e1a00
  4039cc:	400e1c00 	.word	0x400e1c00
  4039d0:	40024000 	.word	0x40024000
  4039d4:	00402311 	.word	0x00402311
  4039d8:	40028000 	.word	0x40028000
  4039dc:	4002c000 	.word	0x4002c000

004039e0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  4039e0:	b580      	push	{r7, lr}
  4039e2:	b082      	sub	sp, #8
  4039e4:	af00      	add	r7, sp, #0
  4039e6:	6078      	str	r0, [r7, #4]
  4039e8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  4039ea:	4a0f      	ldr	r2, [pc, #60]	; (403a28 <stdio_serial_init+0x48>)
  4039ec:	687b      	ldr	r3, [r7, #4]
  4039ee:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4039f0:	4b0e      	ldr	r3, [pc, #56]	; (403a2c <stdio_serial_init+0x4c>)
  4039f2:	4a0f      	ldr	r2, [pc, #60]	; (403a30 <stdio_serial_init+0x50>)
  4039f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4039f6:	4b0f      	ldr	r3, [pc, #60]	; (403a34 <stdio_serial_init+0x54>)
  4039f8:	4a0f      	ldr	r2, [pc, #60]	; (403a38 <stdio_serial_init+0x58>)
  4039fa:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4039fc:	6878      	ldr	r0, [r7, #4]
  4039fe:	6839      	ldr	r1, [r7, #0]
  403a00:	4b0e      	ldr	r3, [pc, #56]	; (403a3c <stdio_serial_init+0x5c>)
  403a02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403a04:	4b0e      	ldr	r3, [pc, #56]	; (403a40 <stdio_serial_init+0x60>)
  403a06:	681b      	ldr	r3, [r3, #0]
  403a08:	689b      	ldr	r3, [r3, #8]
  403a0a:	4618      	mov	r0, r3
  403a0c:	2100      	movs	r1, #0
  403a0e:	4b0d      	ldr	r3, [pc, #52]	; (403a44 <stdio_serial_init+0x64>)
  403a10:	4798      	blx	r3
	setbuf(stdin, NULL);
  403a12:	4b0b      	ldr	r3, [pc, #44]	; (403a40 <stdio_serial_init+0x60>)
  403a14:	681b      	ldr	r3, [r3, #0]
  403a16:	685b      	ldr	r3, [r3, #4]
  403a18:	4618      	mov	r0, r3
  403a1a:	2100      	movs	r1, #0
  403a1c:	4b09      	ldr	r3, [pc, #36]	; (403a44 <stdio_serial_init+0x64>)
  403a1e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403a20:	3708      	adds	r7, #8
  403a22:	46bd      	mov	sp, r7
  403a24:	bd80      	pop	{r7, pc}
  403a26:	bf00      	nop
  403a28:	20400a18 	.word	0x20400a18
  403a2c:	20400a14 	.word	0x20400a14
  403a30:	004037d1 	.word	0x004037d1
  403a34:	20400a10 	.word	0x20400a10
  403a38:	004038dd 	.word	0x004038dd
  403a3c:	00403671 	.word	0x00403671
  403a40:	204004c0 	.word	0x204004c0
  403a44:	00406ed5 	.word	0x00406ed5

00403a48 <mdelay>:
 * by the SAM microcontroller system tick).
 *
 * \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void mdelay(uint32_t ul_dly_ticks)
{
  403a48:	b480      	push	{r7}
  403a4a:	b085      	sub	sp, #20
  403a4c:	af00      	add	r7, sp, #0
  403a4e:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  403a50:	4b07      	ldr	r3, [pc, #28]	; (403a70 <mdelay+0x28>)
  403a52:	681b      	ldr	r3, [r3, #0]
  403a54:	60fb      	str	r3, [r7, #12]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  403a56:	bf00      	nop
  403a58:	4b05      	ldr	r3, [pc, #20]	; (403a70 <mdelay+0x28>)
  403a5a:	681a      	ldr	r2, [r3, #0]
  403a5c:	68fb      	ldr	r3, [r7, #12]
  403a5e:	1ad2      	subs	r2, r2, r3
  403a60:	687b      	ldr	r3, [r7, #4]
  403a62:	429a      	cmp	r2, r3
  403a64:	d3f8      	bcc.n	403a58 <mdelay+0x10>
	}
}
  403a66:	3714      	adds	r7, #20
  403a68:	46bd      	mov	sp, r7
  403a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a6e:	4770      	bx	lr
  403a70:	204009ac 	.word	0x204009ac

00403a74 <SysTick_Handler>:
 *
 *  Process System Tick Event.
 *  Increment the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
  403a74:	b580      	push	{r7, lr}
  403a76:	af00      	add	r7, sp, #0
	g_ul_tick_count++;
  403a78:	4b44      	ldr	r3, [pc, #272]	; (403b8c <SysTick_Handler+0x118>)
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	3301      	adds	r3, #1
  403a7e:	4a43      	ldr	r2, [pc, #268]	; (403b8c <SysTick_Handler+0x118>)
  403a80:	6013      	str	r3, [r2, #0]
	ul_ms_ticks++; //jsi 6feb16
  403a82:	4b43      	ldr	r3, [pc, #268]	; (403b90 <SysTick_Handler+0x11c>)
  403a84:	681b      	ldr	r3, [r3, #0]
  403a86:	3301      	adds	r3, #1
  403a88:	4a41      	ldr	r2, [pc, #260]	; (403b90 <SysTick_Handler+0x11c>)
  403a8a:	6013      	str	r3, [r2, #0]
	
	timerTickCount++;
  403a8c:	4b41      	ldr	r3, [pc, #260]	; (403b94 <SysTick_Handler+0x120>)
  403a8e:	681b      	ldr	r3, [r3, #0]
  403a90:	3301      	adds	r3, #1
  403a92:	4a40      	ldr	r2, [pc, #256]	; (403b94 <SysTick_Handler+0x120>)
  403a94:	6013      	str	r3, [r2, #0]
	timerTickCount &= MAX_TICK; // force rollover at this count to avoid confusion detecting rollover with the MSbit set
  403a96:	4b3f      	ldr	r3, [pc, #252]	; (403b94 <SysTick_Handler+0x120>)
  403a98:	681b      	ldr	r3, [r3, #0]
  403a9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  403a9e:	4a3d      	ldr	r2, [pc, #244]	; (403b94 <SysTick_Handler+0x120>)
  403aa0:	6013      	str	r3, [r2, #0]
	if (timerTickCount == 0)
  403aa2:	4b3c      	ldr	r3, [pc, #240]	; (403b94 <SysTick_Handler+0x120>)
  403aa4:	681b      	ldr	r3, [r3, #0]
  403aa6:	2b00      	cmp	r3, #0
  403aa8:	d102      	bne.n	403ab0 <SysTick_Handler+0x3c>
	{
		rollover = 1;
  403aaa:	4b3b      	ldr	r3, [pc, #236]	; (403b98 <SysTick_Handler+0x124>)
  403aac:	2201      	movs	r2, #1
  403aae:	701a      	strb	r2, [r3, #0]
	}
	
	if ((timerTickCount % TICKS_PER_SEC) == 0)
  403ab0:	4b38      	ldr	r3, [pc, #224]	; (403b94 <SysTick_Handler+0x120>)
  403ab2:	681a      	ldr	r2, [r3, #0]
  403ab4:	4b39      	ldr	r3, [pc, #228]	; (403b9c <SysTick_Handler+0x128>)
  403ab6:	fba3 1302 	umull	r1, r3, r3, r2
  403aba:	099b      	lsrs	r3, r3, #6
  403abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403ac0:	fb01 f303 	mul.w	r3, r1, r3
  403ac4:	1ad3      	subs	r3, r2, r3
  403ac6:	2b00      	cmp	r3, #0
  403ac8:	d101      	bne.n	403ace <SysTick_Handler+0x5a>
	{
		process_timers();
  403aca:	4b35      	ldr	r3, [pc, #212]	; (403ba0 <SysTick_Handler+0x12c>)
  403acc:	4798      	blx	r3
	}

	
	if (controls.buzzer_enable)
  403ace:	4b35      	ldr	r3, [pc, #212]	; (403ba4 <SysTick_Handler+0x130>)
  403ad0:	78db      	ldrb	r3, [r3, #3]
  403ad2:	2b00      	cmp	r3, #0
  403ad4:	d028      	beq.n	403b28 <SysTick_Handler+0xb4>
	{
		controls.buzzer_count++;
  403ad6:	4b33      	ldr	r3, [pc, #204]	; (403ba4 <SysTick_Handler+0x130>)
  403ad8:	88db      	ldrh	r3, [r3, #6]
  403ada:	3301      	adds	r3, #1
  403adc:	b29a      	uxth	r2, r3
  403ade:	4b31      	ldr	r3, [pc, #196]	; (403ba4 <SysTick_Handler+0x130>)
  403ae0:	80da      	strh	r2, [r3, #6]
		
		if (controls.buzzer_cycle == CYCLE_ON)
  403ae2:	4b30      	ldr	r3, [pc, #192]	; (403ba4 <SysTick_Handler+0x130>)
  403ae4:	791b      	ldrb	r3, [r3, #4]
  403ae6:	2b01      	cmp	r3, #1
  403ae8:	d10f      	bne.n	403b0a <SysTick_Handler+0x96>
		{
			if (controls.buzzer_count > BUZZER_ON_COUNT)
  403aea:	4b2e      	ldr	r3, [pc, #184]	; (403ba4 <SysTick_Handler+0x130>)
  403aec:	88db      	ldrh	r3, [r3, #6]
  403aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403af2:	d919      	bls.n	403b28 <SysTick_Handler+0xb4>
			{
				controls.buzzer_count = 0;
  403af4:	4b2b      	ldr	r3, [pc, #172]	; (403ba4 <SysTick_Handler+0x130>)
  403af6:	2200      	movs	r2, #0
  403af8:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_OFF;
  403afa:	4b2a      	ldr	r3, [pc, #168]	; (403ba4 <SysTick_Handler+0x130>)
  403afc:	2200      	movs	r2, #0
  403afe:	711a      	strb	r2, [r3, #4]
				pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b00:	4829      	ldr	r0, [pc, #164]	; (403ba8 <SysTick_Handler+0x134>)
  403b02:	2100      	movs	r1, #0
  403b04:	4b29      	ldr	r3, [pc, #164]	; (403bac <SysTick_Handler+0x138>)
  403b06:	4798      	blx	r3
  403b08:	e00e      	b.n	403b28 <SysTick_Handler+0xb4>
			}
		}
		else
		{
			if (controls.buzzer_count > BUZZER_OFF_COUNT)
  403b0a:	4b26      	ldr	r3, [pc, #152]	; (403ba4 <SysTick_Handler+0x130>)
  403b0c:	88db      	ldrh	r3, [r3, #6]
  403b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403b12:	d909      	bls.n	403b28 <SysTick_Handler+0xb4>
			{
				controls.buzzer_count = 0;
  403b14:	4b23      	ldr	r3, [pc, #140]	; (403ba4 <SysTick_Handler+0x130>)
  403b16:	2200      	movs	r2, #0
  403b18:	80da      	strh	r2, [r3, #6]
				controls.buzzer_cycle = CYCLE_ON;
  403b1a:	4b22      	ldr	r3, [pc, #136]	; (403ba4 <SysTick_Handler+0x130>)
  403b1c:	2201      	movs	r2, #1
  403b1e:	711a      	strb	r2, [r3, #4]
				pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  403b20:	4821      	ldr	r0, [pc, #132]	; (403ba8 <SysTick_Handler+0x134>)
  403b22:	2100      	movs	r1, #0
  403b24:	4b22      	ldr	r3, [pc, #136]	; (403bb0 <SysTick_Handler+0x13c>)
  403b26:	4798      	blx	r3
			}
		}
	}
	
	if (controls.solenoid_enable)
  403b28:	4b1e      	ldr	r3, [pc, #120]	; (403ba4 <SysTick_Handler+0x130>)
  403b2a:	7a1b      	ldrb	r3, [r3, #8]
  403b2c:	2b00      	cmp	r3, #0
  403b2e:	d02b      	beq.n	403b88 <SysTick_Handler+0x114>
	{
		controls.solenoid_count++;
  403b30:	4b1c      	ldr	r3, [pc, #112]	; (403ba4 <SysTick_Handler+0x130>)
  403b32:	895b      	ldrh	r3, [r3, #10]
  403b34:	3301      	adds	r3, #1
  403b36:	b29a      	uxth	r2, r3
  403b38:	4b1a      	ldr	r3, [pc, #104]	; (403ba4 <SysTick_Handler+0x130>)
  403b3a:	815a      	strh	r2, [r3, #10]
		
		if (controls.solenoid_cycle == CYCLE_ON)
  403b3c:	4b19      	ldr	r3, [pc, #100]	; (403ba4 <SysTick_Handler+0x130>)
  403b3e:	7a5b      	ldrb	r3, [r3, #9]
  403b40:	2b01      	cmp	r3, #1
  403b42:	d112      	bne.n	403b6a <SysTick_Handler+0xf6>
		{
			if (controls.solenoid_count > SOLENOID_ON_COUNT)
  403b44:	4b17      	ldr	r3, [pc, #92]	; (403ba4 <SysTick_Handler+0x130>)
  403b46:	895b      	ldrh	r3, [r3, #10]
  403b48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403b4c:	d91c      	bls.n	403b88 <SysTick_Handler+0x114>
			{
				controls.solenoid_count = 0;
  403b4e:	4b15      	ldr	r3, [pc, #84]	; (403ba4 <SysTick_Handler+0x130>)
  403b50:	2200      	movs	r2, #0
  403b52:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_OFF;
  403b54:	4b13      	ldr	r3, [pc, #76]	; (403ba4 <SysTick_Handler+0x130>)
  403b56:	2200      	movs	r2, #0
  403b58:	725a      	strb	r2, [r3, #9]
				controls.solenoid_enable = 0; //solenoid is a one-shot
  403b5a:	4b12      	ldr	r3, [pc, #72]	; (403ba4 <SysTick_Handler+0x130>)
  403b5c:	2200      	movs	r2, #0
  403b5e:	721a      	strb	r2, [r3, #8]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_LOW);
  403b60:	2015      	movs	r0, #21
  403b62:	2100      	movs	r1, #0
  403b64:	4b13      	ldr	r3, [pc, #76]	; (403bb4 <SysTick_Handler+0x140>)
  403b66:	4798      	blx	r3
  403b68:	e00e      	b.n	403b88 <SysTick_Handler+0x114>
			}
		}
		else
		{
			if (controls.solenoid_count > SOLENOID_OFF_COUNT)
  403b6a:	4b0e      	ldr	r3, [pc, #56]	; (403ba4 <SysTick_Handler+0x130>)
  403b6c:	895b      	ldrh	r3, [r3, #10]
  403b6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403b72:	d909      	bls.n	403b88 <SysTick_Handler+0x114>
			{
				controls.solenoid_count = 0;
  403b74:	4b0b      	ldr	r3, [pc, #44]	; (403ba4 <SysTick_Handler+0x130>)
  403b76:	2200      	movs	r2, #0
  403b78:	815a      	strh	r2, [r3, #10]
				controls.solenoid_cycle = CYCLE_ON;
  403b7a:	4b0a      	ldr	r3, [pc, #40]	; (403ba4 <SysTick_Handler+0x130>)
  403b7c:	2201      	movs	r2, #1
  403b7e:	725a      	strb	r2, [r3, #9]
				ioport_set_pin_level(ECLAVE_SOLENOID, IOPORT_PIN_LEVEL_HIGH);
  403b80:	2015      	movs	r0, #21
  403b82:	2101      	movs	r1, #1
  403b84:	4b0b      	ldr	r3, [pc, #44]	; (403bb4 <SysTick_Handler+0x140>)
  403b86:	4798      	blx	r3
			}
			
		}
	}
}
  403b88:	bd80      	pop	{r7, pc}
  403b8a:	bf00      	nop
  403b8c:	20400b34 	.word	0x20400b34
  403b90:	204009ac 	.word	0x204009ac
  403b94:	204009a0 	.word	0x204009a0
  403b98:	204009a4 	.word	0x204009a4
  403b9c:	10624dd3 	.word	0x10624dd3
  403ba0:	00403281 	.word	0x00403281
  403ba4:	20400b38 	.word	0x20400b38
  403ba8:	40020000 	.word	0x40020000
  403bac:	00401ba5 	.word	0x00401ba5
  403bb0:	00401b81 	.word	0x00401b81
  403bb4:	00403605 	.word	0x00403605

00403bb8 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  403bb8:	b580      	push	{r7, lr}
  403bba:	b082      	sub	sp, #8
  403bbc:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  403bbe:	481b      	ldr	r0, [pc, #108]	; (403c2c <USART0_Handler+0x74>)
  403bc0:	4b1b      	ldr	r3, [pc, #108]	; (403c30 <USART0_Handler+0x78>)
  403bc2:	4798      	blx	r3
  403bc4:	6078      	str	r0, [r7, #4]

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  403bc6:	687a      	ldr	r2, [r7, #4]
  403bc8:	f240 2302 	movw	r3, #514	; 0x202
  403bcc:	4013      	ands	r3, r2
  403bce:	2b00      	cmp	r3, #0
  403bd0:	d004      	beq.n	403bdc <USART0_Handler+0x24>
		usart_disable_interrupt(BOARD_USART, (US_IER_TXRDY | US_IER_TXEMPTY));
  403bd2:	4816      	ldr	r0, [pc, #88]	; (403c2c <USART0_Handler+0x74>)
  403bd4:	f240 2102 	movw	r1, #514	; 0x202
  403bd8:	4b16      	ldr	r3, [pc, #88]	; (403c34 <USART0_Handler+0x7c>)
  403bda:	4798      	blx	r3
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(BOARD_USART, (uint32_t *)&uc_char) == 0)) {
  403bdc:	4b16      	ldr	r3, [pc, #88]	; (403c38 <USART0_Handler+0x80>)
  403bde:	781b      	ldrb	r3, [r3, #0]
  403be0:	b2db      	uxtb	r3, r3
  403be2:	2b02      	cmp	r3, #2
  403be4:	d11f      	bne.n	403c26 <USART0_Handler+0x6e>
  403be6:	1cfb      	adds	r3, r7, #3
  403be8:	4810      	ldr	r0, [pc, #64]	; (403c2c <USART0_Handler+0x74>)
  403bea:	4619      	mov	r1, r3
  403bec:	4b13      	ldr	r3, [pc, #76]	; (403c3c <USART0_Handler+0x84>)
  403bee:	4798      	blx	r3
  403bf0:	4603      	mov	r3, r0
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	d117      	bne.n	403c26 <USART0_Handler+0x6e>
		*p_revdata++ = uc_char;
  403bf6:	4b12      	ldr	r3, [pc, #72]	; (403c40 <USART0_Handler+0x88>)
  403bf8:	681b      	ldr	r3, [r3, #0]
  403bfa:	1c5a      	adds	r2, r3, #1
  403bfc:	4910      	ldr	r1, [pc, #64]	; (403c40 <USART0_Handler+0x88>)
  403bfe:	600a      	str	r2, [r1, #0]
  403c00:	78fa      	ldrb	r2, [r7, #3]
  403c02:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  403c04:	4b0f      	ldr	r3, [pc, #60]	; (403c44 <USART0_Handler+0x8c>)
  403c06:	681b      	ldr	r3, [r3, #0]
  403c08:	3301      	adds	r3, #1
  403c0a:	4a0e      	ldr	r2, [pc, #56]	; (403c44 <USART0_Handler+0x8c>)
  403c0c:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  403c0e:	4b0d      	ldr	r3, [pc, #52]	; (403c44 <USART0_Handler+0x8c>)
  403c10:	681b      	ldr	r3, [r3, #0]
  403c12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  403c16:	d306      	bcc.n	403c26 <USART0_Handler+0x6e>
			g_state = RECEIVED;
  403c18:	4b07      	ldr	r3, [pc, #28]	; (403c38 <USART0_Handler+0x80>)
  403c1a:	2203      	movs	r2, #3
  403c1c:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  403c1e:	4803      	ldr	r0, [pc, #12]	; (403c2c <USART0_Handler+0x74>)
  403c20:	2101      	movs	r1, #1
  403c22:	4b04      	ldr	r3, [pc, #16]	; (403c34 <USART0_Handler+0x7c>)
  403c24:	4798      	blx	r3
		}
	}
}
  403c26:	3708      	adds	r7, #8
  403c28:	46bd      	mov	sp, r7
  403c2a:	bd80      	pop	{r7, pc}
  403c2c:	40024000 	.word	0x40024000
  403c30:	0040223d 	.word	0x0040223d
  403c34:	00402221 	.word	0x00402221
  403c38:	204009a5 	.word	0x204009a5
  403c3c:	00402311 	.word	0x00402311
  403c40:	20400008 	.word	0x20400008
  403c44:	204009a8 	.word	0x204009a8

00403c48 <configure_usart>:
 *
 *  Configure USART in RS485 mode, asynchronous, 8 bits, 1 stop bit,
 *  no parity, 256000 bauds and enable its transmitter and receiver.
 */
void configure_usart(void)
{
  403c48:	b5b0      	push	{r4, r5, r7, lr}
  403c4a:	b086      	sub	sp, #24
  403c4c:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
  403c4e:	4b14      	ldr	r3, [pc, #80]	; (403ca0 <configure_usart+0x58>)
  403c50:	463c      	mov	r4, r7
  403c52:	461d      	mov	r5, r3
  403c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403c58:	e895 0003 	ldmia.w	r5, {r0, r1}
  403c5c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  403c60:	200d      	movs	r0, #13
  403c62:	4b10      	ldr	r3, [pc, #64]	; (403ca4 <configure_usart+0x5c>)
  403c64:	4798      	blx	r3

	/* Configure USART in RS485 mode. */
//jsi 7feb16 we want rs232 not rs485 for our application	usart_init_rs485(BOARD_USART, &usart_console_settings,
//jsi 7feb16 we want rs232 not rs485 for our application			sysclk_get_cpu_hz());
			
	usart_init_rs232(BOARD_USART, &usart_console_settings, sysclk_get_cpu_hz());
  403c66:	4b10      	ldr	r3, [pc, #64]	; (403ca8 <configure_usart+0x60>)
  403c68:	4798      	blx	r3
  403c6a:	4602      	mov	r2, r0
  403c6c:	463b      	mov	r3, r7
  403c6e:	480f      	ldr	r0, [pc, #60]	; (403cac <configure_usart+0x64>)
  403c70:	4619      	mov	r1, r3
  403c72:	4b0f      	ldr	r3, [pc, #60]	; (403cb0 <configure_usart+0x68>)
  403c74:	4798      	blx	r3

	/* enable transmitter timeguard, 4 bit period delay. */
	usart_set_tx_timeguard(BOARD_USART, 4);
  403c76:	480d      	ldr	r0, [pc, #52]	; (403cac <configure_usart+0x64>)
  403c78:	2104      	movs	r1, #4
  403c7a:	4b0e      	ldr	r3, [pc, #56]	; (403cb4 <configure_usart+0x6c>)
  403c7c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  403c7e:	480b      	ldr	r0, [pc, #44]	; (403cac <configure_usart+0x64>)
  403c80:	f04f 31ff 	mov.w	r1, #4294967295
  403c84:	4b0c      	ldr	r3, [pc, #48]	; (403cb8 <configure_usart+0x70>)
  403c86:	4798      	blx	r3

	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  403c88:	4808      	ldr	r0, [pc, #32]	; (403cac <configure_usart+0x64>)
  403c8a:	4b0c      	ldr	r3, [pc, #48]	; (403cbc <configure_usart+0x74>)
  403c8c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  403c8e:	4807      	ldr	r0, [pc, #28]	; (403cac <configure_usart+0x64>)
  403c90:	4b0b      	ldr	r3, [pc, #44]	; (403cc0 <configure_usart+0x78>)
  403c92:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  403c94:	200d      	movs	r0, #13
  403c96:	4b0b      	ldr	r3, [pc, #44]	; (403cc4 <configure_usart+0x7c>)
  403c98:	4798      	blx	r3
}
  403c9a:	3718      	adds	r7, #24
  403c9c:	46bd      	mov	sp, r7
  403c9e:	bdb0      	pop	{r4, r5, r7, pc}
  403ca0:	0040c644 	.word	0x0040c644
  403ca4:	004035ed 	.word	0x004035ed
  403ca8:	004035c5 	.word	0x004035c5
  403cac:	40024000 	.word	0x40024000
  403cb0:	00402105 	.word	0x00402105
  403cb4:	004021b9 	.word	0x004021b9
  403cb8:	00402221 	.word	0x00402221
  403cbc:	00402189 	.word	0x00402189
  403cc0:	004021d5 	.word	0x004021d5
  403cc4:	00403399 	.word	0x00403399

00403cc8 <configure_systick>:

/**
 *  Configure system tick to generate an interrupt every 1us. Note that this was 1ms in the example code. jsi 11feb16
 */
void configure_systick(void)
{
  403cc8:	b580      	push	{r7, lr}
  403cca:	b082      	sub	sp, #8
  403ccc:	af00      	add	r7, sp, #0
	uint32_t ul_flag;

	ul_flag = SysTick_Config(sysclk_get_cpu_hz()/SYS_TICK_FREQ);
  403cce:	4b0a      	ldr	r3, [pc, #40]	; (403cf8 <configure_systick+0x30>)
  403cd0:	4798      	blx	r3
  403cd2:	4602      	mov	r2, r0
  403cd4:	4b09      	ldr	r3, [pc, #36]	; (403cfc <configure_systick+0x34>)
  403cd6:	fba3 2302 	umull	r2, r3, r3, r2
  403cda:	099b      	lsrs	r3, r3, #6
  403cdc:	4618      	mov	r0, r3
  403cde:	4b08      	ldr	r3, [pc, #32]	; (403d00 <configure_systick+0x38>)
  403ce0:	4798      	blx	r3
  403ce2:	6078      	str	r0, [r7, #4]
	if (ul_flag) {
  403ce4:	687b      	ldr	r3, [r7, #4]
  403ce6:	2b00      	cmp	r3, #0
  403ce8:	d003      	beq.n	403cf2 <configure_systick+0x2a>
		puts("-F- Systick configuration error\r");
  403cea:	4806      	ldr	r0, [pc, #24]	; (403d04 <configure_systick+0x3c>)
  403cec:	4b06      	ldr	r3, [pc, #24]	; (403d08 <configure_systick+0x40>)
  403cee:	4798      	blx	r3
		while (1) {
		}
  403cf0:	e7fe      	b.n	403cf0 <configure_systick+0x28>
	}
}
  403cf2:	3708      	adds	r7, #8
  403cf4:	46bd      	mov	sp, r7
  403cf6:	bd80      	pop	{r7, pc}
  403cf8:	004035c5 	.word	0x004035c5
  403cfc:	10624dd3 	.word	0x10624dd3
  403d00:	00403485 	.word	0x00403485
  403d04:	0040c65c 	.word	0x0040c65c
  403d08:	00406ec5 	.word	0x00406ec5

00403d0c <configure_console>:

/**
 *  Configure UART for debug message output.
 */
void configure_console(void)
{
  403d0c:	b590      	push	{r4, r7, lr}
  403d0e:	b085      	sub	sp, #20
  403d10:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403d12:	4b08      	ldr	r3, [pc, #32]	; (403d34 <configure_console+0x28>)
  403d14:	463c      	mov	r4, r7
  403d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403d1c:	2007      	movs	r0, #7
  403d1e:	4b06      	ldr	r3, [pc, #24]	; (403d38 <configure_console+0x2c>)
  403d20:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403d22:	463b      	mov	r3, r7
  403d24:	4805      	ldr	r0, [pc, #20]	; (403d3c <configure_console+0x30>)
  403d26:	4619      	mov	r1, r3
  403d28:	4b05      	ldr	r3, [pc, #20]	; (403d40 <configure_console+0x34>)
  403d2a:	4798      	blx	r3
}
  403d2c:	3714      	adds	r7, #20
  403d2e:	46bd      	mov	sp, r7
  403d30:	bd90      	pop	{r4, r7, pc}
  403d32:	bf00      	nop
  403d34:	0040c680 	.word	0x0040c680
  403d38:	004035ed 	.word	0x004035ed
  403d3c:	400e0800 	.word	0x400e0800
  403d40:	004039e1 	.word	0x004039e1

00403d44 <func_transmit>:
* \param *p_buff  data to be transmitted
* \param ulsize size of all data.
*
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
  403d44:	b580      	push	{r7, lr}
  403d46:	b082      	sub	sp, #8
  403d48:	af00      	add	r7, sp, #0
  403d4a:	6078      	str	r0, [r7, #4]
  403d4c:	6039      	str	r1, [r7, #0]
	Assert(p_buff);

	while(ulsize > 0) {
  403d4e:	e013      	b.n	403d78 <func_transmit+0x34>
		if(0 == usart_write(BOARD_USART, *p_buff)){
  403d50:	687b      	ldr	r3, [r7, #4]
  403d52:	781b      	ldrb	r3, [r3, #0]
  403d54:	4810      	ldr	r0, [pc, #64]	; (403d98 <func_transmit+0x54>)
  403d56:	4619      	mov	r1, r3
  403d58:	4b10      	ldr	r3, [pc, #64]	; (403d9c <func_transmit+0x58>)
  403d5a:	4798      	blx	r3
  403d5c:	4603      	mov	r3, r0
  403d5e:	2b00      	cmp	r3, #0
  403d60:	d10a      	bne.n	403d78 <func_transmit+0x34>
			usart_enable_interrupt(BOARD_USART, US_IER_TXRDY | US_IER_TXEMPTY);
  403d62:	480d      	ldr	r0, [pc, #52]	; (403d98 <func_transmit+0x54>)
  403d64:	f240 2102 	movw	r1, #514	; 0x202
  403d68:	4b0d      	ldr	r3, [pc, #52]	; (403da0 <func_transmit+0x5c>)
  403d6a:	4798      	blx	r3
			ulsize--;
  403d6c:	683b      	ldr	r3, [r7, #0]
  403d6e:	3b01      	subs	r3, #1
  403d70:	603b      	str	r3, [r7, #0]
			p_buff++;
  403d72:	687b      	ldr	r3, [r7, #4]
  403d74:	3301      	adds	r3, #1
  403d76:	607b      	str	r3, [r7, #4]
*/
uint8_t func_transmit(const uint8_t *p_buff, uint32_t ulsize)
{
	Assert(p_buff);

	while(ulsize > 0) {
  403d78:	683b      	ldr	r3, [r7, #0]
  403d7a:	2b00      	cmp	r3, #0
  403d7c:	d1e8      	bne.n	403d50 <func_transmit+0xc>
			ulsize--;
			p_buff++;
		}
	}

	while(!usart_is_tx_empty(BOARD_USART)) {
  403d7e:	bf00      	nop
  403d80:	4805      	ldr	r0, [pc, #20]	; (403d98 <func_transmit+0x54>)
  403d82:	4b08      	ldr	r3, [pc, #32]	; (403da4 <func_transmit+0x60>)
  403d84:	4798      	blx	r3
  403d86:	4603      	mov	r3, r0
  403d88:	2b00      	cmp	r3, #0
  403d8a:	d0f9      	beq.n	403d80 <func_transmit+0x3c>
		;  /*waiting for transmit over*/
	}

	return 0;
  403d8c:	2300      	movs	r3, #0
}
  403d8e:	4618      	mov	r0, r3
  403d90:	3708      	adds	r7, #8
  403d92:	46bd      	mov	sp, r7
  403d94:	bd80      	pop	{r7, pc}
  403d96:	bf00      	nop
  403d98:	40024000 	.word	0x40024000
  403d9c:	004022dd 	.word	0x004022dd
  403da0:	00402205 	.word	0x00402205
  403da4:	0040228d 	.word	0x0040228d

00403da8 <twi_init>:
	SHELF_ACTIVE
};

void twi_init(void);
void twi_init(void)
{
  403da8:	b580      	push	{r7, lr}
  403daa:	b084      	sub	sp, #16
  403dac:	af00      	add	r7, sp, #0
	twihs_options_t opt;

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(ID_TWIHS0);
  403dae:	2013      	movs	r0, #19
  403db0:	4b09      	ldr	r3, [pc, #36]	; (403dd8 <twi_init+0x30>)
  403db2:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  403db4:	4b09      	ldr	r3, [pc, #36]	; (403ddc <twi_init+0x34>)
  403db6:	4798      	blx	r3
  403db8:	4603      	mov	r3, r0
  403dba:	607b      	str	r3, [r7, #4]
	opt.speed      = TWIHS_CLK; //400KHz
  403dbc:	4b08      	ldr	r3, [pc, #32]	; (403de0 <twi_init+0x38>)
  403dbe:	60bb      	str	r3, [r7, #8]

	if (twihs_master_init(TWIHS0, &opt) != TWIHS_SUCCESS) {
  403dc0:	1d3b      	adds	r3, r7, #4
  403dc2:	4808      	ldr	r0, [pc, #32]	; (403de4 <twi_init+0x3c>)
  403dc4:	4619      	mov	r1, r3
  403dc6:	4b08      	ldr	r3, [pc, #32]	; (403de8 <twi_init+0x40>)
  403dc8:	4798      	blx	r3
  403dca:	4603      	mov	r3, r0
  403dcc:	2b00      	cmp	r3, #0
  403dce:	d000      	beq.n	403dd2 <twi_init+0x2a>
		while (1) {
			/* Capture error */
		}
  403dd0:	e7fe      	b.n	403dd0 <twi_init+0x28>
	}
}
  403dd2:	3710      	adds	r7, #16
  403dd4:	46bd      	mov	sp, r7
  403dd6:	bd80      	pop	{r7, pc}
  403dd8:	004016d1 	.word	0x004016d1
  403ddc:	004035c5 	.word	0x004035c5
  403de0:	00061a80 	.word	0x00061a80
  403de4:	40018000 	.word	0x40018000
  403de8:	00401c65 	.word	0x00401c65

00403dec <afec0_data_ready>:

uint32_t g_afec0_sample_data;
uint32_t g_afec1_sample_data;

static void afec0_data_ready(void)
{
  403dec:	b580      	push	{r7, lr}
  403dee:	af00      	add	r7, sp, #0
	g_afec0_sample_data = afec_get_latest_value(AFEC0);
  403df0:	4804      	ldr	r0, [pc, #16]	; (403e04 <afec0_data_ready+0x18>)
  403df2:	4b05      	ldr	r3, [pc, #20]	; (403e08 <afec0_data_ready+0x1c>)
  403df4:	4798      	blx	r3
  403df6:	4602      	mov	r2, r0
  403df8:	4b04      	ldr	r3, [pc, #16]	; (403e0c <afec0_data_ready+0x20>)
  403dfa:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403dfc:	4b04      	ldr	r3, [pc, #16]	; (403e10 <afec0_data_ready+0x24>)
  403dfe:	2201      	movs	r2, #1
  403e00:	701a      	strb	r2, [r3, #0]
}
  403e02:	bd80      	pop	{r7, pc}
  403e04:	4003c000 	.word	0x4003c000
  403e08:	00403511 	.word	0x00403511
  403e0c:	20401330 	.word	0x20401330
  403e10:	204009b0 	.word	0x204009b0

00403e14 <afec1_data_ready>:

static void afec1_data_ready(void)
{
  403e14:	b580      	push	{r7, lr}
  403e16:	af00      	add	r7, sp, #0
	g_afec1_sample_data = afec_get_latest_value(AFEC1);
  403e18:	4804      	ldr	r0, [pc, #16]	; (403e2c <afec1_data_ready+0x18>)
  403e1a:	4b05      	ldr	r3, [pc, #20]	; (403e30 <afec1_data_ready+0x1c>)
  403e1c:	4798      	blx	r3
  403e1e:	4602      	mov	r2, r0
  403e20:	4b04      	ldr	r3, [pc, #16]	; (403e34 <afec1_data_ready+0x20>)
  403e22:	601a      	str	r2, [r3, #0]
	is_conversion_done = true;
  403e24:	4b04      	ldr	r3, [pc, #16]	; (403e38 <afec1_data_ready+0x24>)
  403e26:	2201      	movs	r2, #1
  403e28:	701a      	strb	r2, [r3, #0]
}
  403e2a:	bd80      	pop	{r7, pc}
  403e2c:	40064000 	.word	0x40064000
  403e30:	00403511 	.word	0x00403511
  403e34:	20400af4 	.word	0x20400af4
  403e38:	204009b0 	.word	0x204009b0

00403e3c <init_adc>:



void init_adc(void)
{
  403e3c:	b590      	push	{r4, r7, lr}
  403e3e:	b089      	sub	sp, #36	; 0x24
  403e40:	af00      	add	r7, sp, #0
	struct afec_config afec_cfg;
	struct afec_ch_config afec_ch_cfg;

	
	afec_enable(AFEC0);
  403e42:	4827      	ldr	r0, [pc, #156]	; (403ee0 <init_adc+0xa4>)
  403e44:	4b27      	ldr	r3, [pc, #156]	; (403ee4 <init_adc+0xa8>)
  403e46:	4798      	blx	r3
	afec_enable(AFEC1);
  403e48:	4827      	ldr	r0, [pc, #156]	; (403ee8 <init_adc+0xac>)
  403e4a:	4b26      	ldr	r3, [pc, #152]	; (403ee4 <init_adc+0xa8>)
  403e4c:	4798      	blx	r3

	afec_get_config_defaults(&afec_cfg);
  403e4e:	f107 0308 	add.w	r3, r7, #8
  403e52:	4618      	mov	r0, r3
  403e54:	4b25      	ldr	r3, [pc, #148]	; (403eec <init_adc+0xb0>)
  403e56:	4798      	blx	r3
	afec_cfg.resolution = AFEC_12_BITS;
  403e58:	2300      	movs	r3, #0
  403e5a:	60bb      	str	r3, [r7, #8]
	afec_init(AFEC0, &afec_cfg);
  403e5c:	f107 0308 	add.w	r3, r7, #8
  403e60:	481f      	ldr	r0, [pc, #124]	; (403ee0 <init_adc+0xa4>)
  403e62:	4619      	mov	r1, r3
  403e64:	4b22      	ldr	r3, [pc, #136]	; (403ef0 <init_adc+0xb4>)
  403e66:	4798      	blx	r3
	afec_init(AFEC1, &afec_cfg);
  403e68:	f107 0308 	add.w	r3, r7, #8
  403e6c:	481e      	ldr	r0, [pc, #120]	; (403ee8 <init_adc+0xac>)
  403e6e:	4619      	mov	r1, r3
  403e70:	4b1f      	ldr	r3, [pc, #124]	; (403ef0 <init_adc+0xb4>)
  403e72:	4798      	blx	r3
	
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403e74:	1d3b      	adds	r3, r7, #4
  403e76:	4618      	mov	r0, r3
  403e78:	4b1e      	ldr	r3, [pc, #120]	; (403ef4 <init_adc+0xb8>)
  403e7a:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_3;
  403e7c:	2303      	movs	r3, #3
  403e7e:	717b      	strb	r3, [r7, #5]
	
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_9, &afec_ch_cfg);
  403e80:	1d3b      	adds	r3, r7, #4
  403e82:	4819      	ldr	r0, [pc, #100]	; (403ee8 <init_adc+0xac>)
  403e84:	2109      	movs	r1, #9
  403e86:	461a      	mov	r2, r3
  403e88:	4b1b      	ldr	r3, [pc, #108]	; (403ef8 <init_adc+0xbc>)
  403e8a:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  403e8c:	1d3b      	adds	r3, r7, #4
  403e8e:	4814      	ldr	r0, [pc, #80]	; (403ee0 <init_adc+0xa4>)
  403e90:	2104      	movs	r1, #4
  403e92:	461a      	mov	r2, r3
  403e94:	4b18      	ldr	r3, [pc, #96]	; (403ef8 <init_adc+0xbc>)
  403e96:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_4, &afec_ch_cfg);
  403e98:	1d3b      	adds	r3, r7, #4
  403e9a:	4813      	ldr	r0, [pc, #76]	; (403ee8 <init_adc+0xac>)
  403e9c:	2104      	movs	r1, #4
  403e9e:	461a      	mov	r2, r3
  403ea0:	4b15      	ldr	r3, [pc, #84]	; (403ef8 <init_adc+0xbc>)
  403ea2:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_5, &afec_ch_cfg);
  403ea4:	1d3b      	adds	r3, r7, #4
  403ea6:	4810      	ldr	r0, [pc, #64]	; (403ee8 <init_adc+0xac>)
  403ea8:	2105      	movs	r1, #5
  403eaa:	461a      	mov	r2, r3
  403eac:	4b12      	ldr	r3, [pc, #72]	; (403ef8 <init_adc+0xbc>)
  403eae:	4798      	blx	r3

	afec_set_trigger(AFEC0, AFEC_TRIG_SW);
  403eb0:	480b      	ldr	r0, [pc, #44]	; (403ee0 <init_adc+0xa4>)
  403eb2:	2100      	movs	r1, #0
  403eb4:	4b11      	ldr	r3, [pc, #68]	; (403efc <init_adc+0xc0>)
  403eb6:	4798      	blx	r3
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  403eb8:	480b      	ldr	r0, [pc, #44]	; (403ee8 <init_adc+0xac>)
  403eba:	2100      	movs	r1, #0
  403ebc:	4b0f      	ldr	r3, [pc, #60]	; (403efc <init_adc+0xc0>)
  403ebe:	4798      	blx	r3

	afec_set_callback(AFEC0, AFEC_INTERRUPT_DATA_READY, afec0_data_ready, 1);
  403ec0:	4807      	ldr	r0, [pc, #28]	; (403ee0 <init_adc+0xa4>)
  403ec2:	210c      	movs	r1, #12
  403ec4:	4a0e      	ldr	r2, [pc, #56]	; (403f00 <init_adc+0xc4>)
  403ec6:	2301      	movs	r3, #1
  403ec8:	4c0e      	ldr	r4, [pc, #56]	; (403f04 <init_adc+0xc8>)
  403eca:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_DATA_READY, afec1_data_ready, 1);
  403ecc:	4806      	ldr	r0, [pc, #24]	; (403ee8 <init_adc+0xac>)
  403ece:	210c      	movs	r1, #12
  403ed0:	4a0d      	ldr	r2, [pc, #52]	; (403f08 <init_adc+0xcc>)
  403ed2:	2301      	movs	r3, #1
  403ed4:	4c0b      	ldr	r4, [pc, #44]	; (403f04 <init_adc+0xc8>)
  403ed6:	47a0      	blx	r4
//	while((afec_get_interrupt_status(AFEC0) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
//	afec_start_calibration(AFEC1);
//	while((afec_get_interrupt_status(AFEC1) & AFEC_ISR_EOCAL) != AFEC_ISR_EOCAL);
	
}
  403ed8:	3724      	adds	r7, #36	; 0x24
  403eda:	46bd      	mov	sp, r7
  403edc:	bd90      	pop	{r4, r7, pc}
  403ede:	bf00      	nop
  403ee0:	4003c000 	.word	0x4003c000
  403ee4:	00401291 	.word	0x00401291
  403ee8:	40064000 	.word	0x40064000
  403eec:	00400f8d 	.word	0x00400f8d
  403ef0:	0040100d 	.word	0x0040100d
  403ef4:	00400fed 	.word	0x00400fed
  403ef8:	00400efd 	.word	0x00400efd
  403efc:	004034cd 	.word	0x004034cd
  403f00:	00403ded 	.word	0x00403ded
  403f04:	00401085 	.word	0x00401085
  403f08:	00403e15 	.word	0x00403e15

00403f0c <PWM0_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM0_Handler(void)
{
  403f0c:	b580      	push	{r7, lr}
  403f0e:	b082      	sub	sp, #8
  403f10:	af00      	add	r7, sp, #0
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */

	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
  403f12:	481e      	ldr	r0, [pc, #120]	; (403f8c <PWM0_Handler+0x80>)
  403f14:	4b1e      	ldr	r3, [pc, #120]	; (403f90 <PWM0_Handler+0x84>)
  403f16:	4798      	blx	r3
  403f18:	6078      	str	r0, [r7, #4]

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  403f1a:	687b      	ldr	r3, [r7, #4]
  403f1c:	f003 0301 	and.w	r3, r3, #1
  403f20:	2b00      	cmp	r3, #0
  403f22:	d030      	beq.n	403f86 <PWM0_Handler+0x7a>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  403f24:	4b1b      	ldr	r3, [pc, #108]	; (403f94 <PWM0_Handler+0x88>)
  403f26:	681b      	ldr	r3, [r3, #0]
  403f28:	3301      	adds	r3, #1
  403f2a:	4a1a      	ldr	r2, [pc, #104]	; (403f94 <PWM0_Handler+0x88>)
  403f2c:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  403f2e:	4b19      	ldr	r3, [pc, #100]	; (403f94 <PWM0_Handler+0x88>)
  403f30:	681b      	ldr	r3, [r3, #0]
  403f32:	2b28      	cmp	r3, #40	; 0x28
  403f34:	d127      	bne.n	403f86 <PWM0_Handler+0x7a>
			/* Fade in */
			if (fade_in) {
  403f36:	4b18      	ldr	r3, [pc, #96]	; (403f98 <PWM0_Handler+0x8c>)
  403f38:	781b      	ldrb	r3, [r3, #0]
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	d00c      	beq.n	403f58 <PWM0_Handler+0x4c>
				ul_duty++;
  403f3e:	4b17      	ldr	r3, [pc, #92]	; (403f9c <PWM0_Handler+0x90>)
  403f40:	681b      	ldr	r3, [r3, #0]
  403f42:	3301      	adds	r3, #1
  403f44:	4a15      	ldr	r2, [pc, #84]	; (403f9c <PWM0_Handler+0x90>)
  403f46:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
  403f48:	4b14      	ldr	r3, [pc, #80]	; (403f9c <PWM0_Handler+0x90>)
  403f4a:	681b      	ldr	r3, [r3, #0]
  403f4c:	2b64      	cmp	r3, #100	; 0x64
  403f4e:	d10f      	bne.n	403f70 <PWM0_Handler+0x64>
					fade_in = 0;
  403f50:	4b11      	ldr	r3, [pc, #68]	; (403f98 <PWM0_Handler+0x8c>)
  403f52:	2200      	movs	r2, #0
  403f54:	701a      	strb	r2, [r3, #0]
  403f56:	e00b      	b.n	403f70 <PWM0_Handler+0x64>
					}
				} else {
				/* Fade out */
				ul_duty--;
  403f58:	4b10      	ldr	r3, [pc, #64]	; (403f9c <PWM0_Handler+0x90>)
  403f5a:	681b      	ldr	r3, [r3, #0]
  403f5c:	3b01      	subs	r3, #1
  403f5e:	4a0f      	ldr	r2, [pc, #60]	; (403f9c <PWM0_Handler+0x90>)
  403f60:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  403f62:	4b0e      	ldr	r3, [pc, #56]	; (403f9c <PWM0_Handler+0x90>)
  403f64:	681b      	ldr	r3, [r3, #0]
  403f66:	2b32      	cmp	r3, #50	; 0x32
  403f68:	d102      	bne.n	403f70 <PWM0_Handler+0x64>
					fade_in = 1;
  403f6a:	4b0b      	ldr	r3, [pc, #44]	; (403f98 <PWM0_Handler+0x8c>)
  403f6c:	2201      	movs	r2, #1
  403f6e:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  403f70:	4b08      	ldr	r3, [pc, #32]	; (403f94 <PWM0_Handler+0x88>)
  403f72:	2200      	movs	r2, #0
  403f74:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403f76:	4b0a      	ldr	r3, [pc, #40]	; (403fa0 <PWM0_Handler+0x94>)
  403f78:	2200      	movs	r2, #0
  403f7a:	601a      	str	r2, [r3, #0]
//jsi 16feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
					pwm_channel_update_duty(PWM0, &g_pwm_channel_led, (PERIOD_VALUE/2)); //jsi 16feb16 just fixed for now
  403f7c:	4803      	ldr	r0, [pc, #12]	; (403f8c <PWM0_Handler+0x80>)
  403f7e:	4908      	ldr	r1, [pc, #32]	; (403fa0 <PWM0_Handler+0x94>)
  403f80:	2232      	movs	r2, #50	; 0x32
  403f82:	4b08      	ldr	r3, [pc, #32]	; (403fa4 <PWM0_Handler+0x98>)
  403f84:	4798      	blx	r3
//jsi 15feb16			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
//jsi 15feb16			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
		}
	}
}
  403f86:	3708      	adds	r7, #8
  403f88:	46bd      	mov	sp, r7
  403f8a:	bd80      	pop	{r7, pc}
  403f8c:	40020000 	.word	0x40020000
  403f90:	00401bc9 	.word	0x00401bc9
  403f94:	204009b4 	.word	0x204009b4
  403f98:	2040000c 	.word	0x2040000c
  403f9c:	20400010 	.word	0x20400010
  403fa0:	20400af8 	.word	0x20400af8
  403fa4:	00401b39 	.word	0x00401b39

00403fa8 <init_pwm>:



void init_pwm(void)
{
  403fa8:	b580      	push	{r7, lr}
  403faa:	b084      	sub	sp, #16
  403fac:	af00      	add	r7, sp, #0
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM0);
  403fae:	201f      	movs	r0, #31
  403fb0:	4b30      	ldr	r3, [pc, #192]	; (404074 <init_pwm+0xcc>)
  403fb2:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  403fb4:	4830      	ldr	r0, [pc, #192]	; (404078 <init_pwm+0xd0>)
  403fb6:	2100      	movs	r1, #0
  403fb8:	4b30      	ldr	r3, [pc, #192]	; (40407c <init_pwm+0xd4>)
  403fba:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
  403fbc:	482e      	ldr	r0, [pc, #184]	; (404078 <init_pwm+0xd0>)
  403fbe:	2101      	movs	r1, #1
  403fc0:	4b2e      	ldr	r3, [pc, #184]	; (40407c <init_pwm+0xd4>)
  403fc2:	4798      	blx	r3

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403fc4:	4b2e      	ldr	r3, [pc, #184]	; (404080 <init_pwm+0xd8>)
  403fc6:	607b      	str	r3, [r7, #4]
  403fc8:	2300      	movs	r3, #0
  403fca:	60bb      	str	r3, [r7, #8]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
  403fcc:	4b2d      	ldr	r3, [pc, #180]	; (404084 <init_pwm+0xdc>)
  403fce:	4798      	blx	r3
  403fd0:	4603      	mov	r3, r0
	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  403fd2:	60fb      	str	r3, [r7, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM0, &clock_setting);
  403fd4:	1d3b      	adds	r3, r7, #4
  403fd6:	4828      	ldr	r0, [pc, #160]	; (404078 <init_pwm+0xd0>)
  403fd8:	4619      	mov	r1, r3
  403fda:	4b2b      	ldr	r3, [pc, #172]	; (404088 <init_pwm+0xe0>)
  403fdc:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  403fde:	4b2b      	ldr	r3, [pc, #172]	; (40408c <init_pwm+0xe4>)
  403fe0:	2200      	movs	r2, #0
  403fe2:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  403fe4:	4b29      	ldr	r3, [pc, #164]	; (40408c <init_pwm+0xe4>)
  403fe6:	2200      	movs	r2, #0
  403fe8:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  403fea:	4b28      	ldr	r3, [pc, #160]	; (40408c <init_pwm+0xe4>)
  403fec:	220b      	movs	r2, #11
  403fee:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  403ff0:	4b26      	ldr	r3, [pc, #152]	; (40408c <init_pwm+0xe4>)
  403ff2:	2264      	movs	r2, #100	; 0x64
  403ff4:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  403ff6:	4b25      	ldr	r3, [pc, #148]	; (40408c <init_pwm+0xe4>)
  403ff8:	2232      	movs	r2, #50	; 0x32
  403ffa:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  403ffc:	4b23      	ldr	r3, [pc, #140]	; (40408c <init_pwm+0xe4>)
  403ffe:	2200      	movs	r2, #0
  404000:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  404002:	481d      	ldr	r0, [pc, #116]	; (404078 <init_pwm+0xd0>)
  404004:	4921      	ldr	r1, [pc, #132]	; (40408c <init_pwm+0xe4>)
  404006:	4b22      	ldr	r3, [pc, #136]	; (404090 <init_pwm+0xe8>)
  404008:	4798      	blx	r3

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
  40400a:	481b      	ldr	r0, [pc, #108]	; (404078 <init_pwm+0xd0>)
  40400c:	2100      	movs	r1, #0
  40400e:	2200      	movs	r2, #0
  404010:	4b20      	ldr	r3, [pc, #128]	; (404094 <init_pwm+0xec>)
  404012:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  404014:	4b1d      	ldr	r3, [pc, #116]	; (40408c <init_pwm+0xe4>)
  404016:	f44f 7280 	mov.w	r2, #256	; 0x100
  40401a:	811a      	strh	r2, [r3, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  40401c:	4b1b      	ldr	r3, [pc, #108]	; (40408c <init_pwm+0xe4>)
  40401e:	2201      	movs	r2, #1
  404020:	729a      	strb	r2, [r3, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  404022:	4b1a      	ldr	r3, [pc, #104]	; (40408c <init_pwm+0xe4>)
  404024:	220b      	movs	r2, #11
  404026:	605a      	str	r2, [r3, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  404028:	4b18      	ldr	r3, [pc, #96]	; (40408c <init_pwm+0xe4>)
  40402a:	2264      	movs	r2, #100	; 0x64
  40402c:	611a      	str	r2, [r3, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  40402e:	4b17      	ldr	r3, [pc, #92]	; (40408c <init_pwm+0xe4>)
  404030:	2232      	movs	r2, #50	; 0x32
  404032:	60da      	str	r2, [r3, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  404034:	4b15      	ldr	r3, [pc, #84]	; (40408c <init_pwm+0xe4>)
  404036:	2201      	movs	r2, #1
  404038:	601a      	str	r2, [r3, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  40403a:	480f      	ldr	r0, [pc, #60]	; (404078 <init_pwm+0xd0>)
  40403c:	4913      	ldr	r1, [pc, #76]	; (40408c <init_pwm+0xe4>)
  40403e:	4b14      	ldr	r3, [pc, #80]	; (404090 <init_pwm+0xe8>)
  404040:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
  404042:	480d      	ldr	r0, [pc, #52]	; (404078 <init_pwm+0xd0>)
  404044:	2101      	movs	r1, #1
  404046:	2200      	movs	r2, #0
  404048:	4b13      	ldr	r3, [pc, #76]	; (404098 <init_pwm+0xf0>)
  40404a:	4798      	blx	r3

	/* Configure interrupt and enable PWM interrupt */
	NVIC_DisableIRQ(PWM0_IRQn);
  40404c:	201f      	movs	r0, #31
  40404e:	4b13      	ldr	r3, [pc, #76]	; (40409c <init_pwm+0xf4>)
  404050:	4798      	blx	r3
	NVIC_ClearPendingIRQ(PWM0_IRQn);
  404052:	201f      	movs	r0, #31
  404054:	4b12      	ldr	r3, [pc, #72]	; (4040a0 <init_pwm+0xf8>)
  404056:	4798      	blx	r3
	NVIC_SetPriority(PWM0_IRQn, 0);
  404058:	201f      	movs	r0, #31
  40405a:	2100      	movs	r1, #0
  40405c:	4b11      	ldr	r3, [pc, #68]	; (4040a4 <init_pwm+0xfc>)
  40405e:	4798      	blx	r3
	NVIC_EnableIRQ(PWM0_IRQn);
  404060:	201f      	movs	r0, #31
  404062:	4b11      	ldr	r3, [pc, #68]	; (4040a8 <init_pwm+0x100>)
  404064:	4798      	blx	r3
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, PIN_PWM_LED0_CHANNEL);
  404066:	4804      	ldr	r0, [pc, #16]	; (404078 <init_pwm+0xd0>)
  404068:	2100      	movs	r1, #0
  40406a:	4b10      	ldr	r3, [pc, #64]	; (4040ac <init_pwm+0x104>)
  40406c:	4798      	blx	r3
//jsi 15feb16	pwm_channel_enable(PWM0, PIN_PWM_LED1_CHANNEL);

}
  40406e:	3710      	adds	r7, #16
  404070:	46bd      	mov	sp, r7
  404072:	bd80      	pop	{r7, pc}
  404074:	004016d1 	.word	0x004016d1
  404078:	40020000 	.word	0x40020000
  40407c:	00401ba5 	.word	0x00401ba5
  404080:	00030d40 	.word	0x00030d40
  404084:	004035c5 	.word	0x004035c5
  404088:	004017d1 	.word	0x004017d1
  40408c:	20400af8 	.word	0x20400af8
  404090:	00401851 	.word	0x00401851
  404094:	00401be1 	.word	0x00401be1
  404098:	00401c11 	.word	0x00401c11
  40409c:	004033c9 	.word	0x004033c9
  4040a0:	004033fd 	.word	0x004033fd
  4040a4:	00403431 	.word	0x00403431
  4040a8:	00403399 	.word	0x00403399
  4040ac:	00401b81 	.word	0x00401b81

004040b0 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4040b0:	b480      	push	{r7}
  4040b2:	b083      	sub	sp, #12
  4040b4:	af00      	add	r7, sp, #0
  4040b6:	6078      	str	r0, [r7, #4]
  4040b8:	460b      	mov	r3, r1
  4040ba:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4040bc:	370c      	adds	r7, #12
  4040be:	46bd      	mov	sp, r7
  4040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040c4:	4770      	bx	lr
  4040c6:	bf00      	nop

004040c8 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  4040c8:	b480      	push	{r7}
  4040ca:	b083      	sub	sp, #12
  4040cc:	af00      	add	r7, sp, #0
  4040ce:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  4040d0:	687b      	ldr	r3, [r7, #4]
  4040d2:	2202      	movs	r2, #2
  4040d4:	601a      	str	r2, [r3, #0]
}
  4040d6:	370c      	adds	r7, #12
  4040d8:	46bd      	mov	sp, r7
  4040da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040de:	4770      	bx	lr

004040e0 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4040e0:	b580      	push	{r7, lr}
  4040e2:	b082      	sub	sp, #8
  4040e4:	af00      	add	r7, sp, #0
  4040e6:	6078      	str	r0, [r7, #4]
  4040e8:	460b      	mov	r3, r1
  4040ea:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4040ec:	887b      	ldrh	r3, [r7, #2]
  4040ee:	f640 72ff 	movw	r2, #4095	; 0xfff
  4040f2:	4293      	cmp	r3, r2
  4040f4:	d004      	beq.n	404100 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4040f6:	887b      	ldrh	r3, [r7, #2]
  4040f8:	6878      	ldr	r0, [r7, #4]
  4040fa:	4619      	mov	r1, r3
  4040fc:	4b09      	ldr	r3, [pc, #36]	; (404124 <afec_channel_enable+0x44>)
  4040fe:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404100:	887b      	ldrh	r3, [r7, #2]
  404102:	f640 72ff 	movw	r2, #4095	; 0xfff
  404106:	4293      	cmp	r3, r2
  404108:	d005      	beq.n	404116 <afec_channel_enable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40410a:	887b      	ldrh	r3, [r7, #2]
  40410c:	2201      	movs	r2, #1
  40410e:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  404112:	461a      	mov	r2, r3
  404114:	e001      	b.n	40411a <afec_channel_enable+0x3a>
  404116:	f640 72ff 	movw	r2, #4095	; 0xfff
  40411a:	687b      	ldr	r3, [r7, #4]
  40411c:	615a      	str	r2, [r3, #20]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  40411e:	3708      	adds	r7, #8
  404120:	46bd      	mov	sp, r7
  404122:	bd80      	pop	{r7, pc}
  404124:	004040b1 	.word	0x004040b1

00404128 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  404128:	b580      	push	{r7, lr}
  40412a:	b082      	sub	sp, #8
  40412c:	af00      	add	r7, sp, #0
  40412e:	6078      	str	r0, [r7, #4]
  404130:	460b      	mov	r3, r1
  404132:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  404134:	887b      	ldrh	r3, [r7, #2]
  404136:	f640 72ff 	movw	r2, #4095	; 0xfff
  40413a:	4293      	cmp	r3, r2
  40413c:	d004      	beq.n	404148 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40413e:	887b      	ldrh	r3, [r7, #2]
  404140:	6878      	ldr	r0, [r7, #4]
  404142:	4619      	mov	r1, r3
  404144:	4b09      	ldr	r3, [pc, #36]	; (40416c <afec_channel_disable+0x44>)
  404146:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  404148:	887b      	ldrh	r3, [r7, #2]
  40414a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40414e:	4293      	cmp	r3, r2
  404150:	d005      	beq.n	40415e <afec_channel_disable+0x36>
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  404152:	887b      	ldrh	r3, [r7, #2]
  404154:	2201      	movs	r2, #1
  404156:	fa02 f303 	lsl.w	r3, r2, r3
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  40415a:	461a      	mov	r2, r3
  40415c:	e001      	b.n	404162 <afec_channel_disable+0x3a>
  40415e:	f640 72ff 	movw	r2, #4095	; 0xfff
  404162:	687b      	ldr	r3, [r7, #4]
  404164:	619a      	str	r2, [r3, #24]
			AFEC_CHANNEL_ALL : 1 << afec_ch;
}
  404166:	3708      	adds	r7, #8
  404168:	46bd      	mov	sp, r7
  40416a:	bd80      	pop	{r7, pc}
  40416c:	004040b1 	.word	0x004040b1

00404170 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404170:	b480      	push	{r7}
  404172:	b08d      	sub	sp, #52	; 0x34
  404174:	af00      	add	r7, sp, #0
  404176:	6078      	str	r0, [r7, #4]
  404178:	460b      	mov	r3, r1
  40417a:	70fb      	strb	r3, [r7, #3]
  40417c:	687b      	ldr	r3, [r7, #4]
  40417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  404180:	78fb      	ldrb	r3, [r7, #3]
  404182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404188:	627b      	str	r3, [r7, #36]	; 0x24
  40418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40418c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40418e:	6a3b      	ldr	r3, [r7, #32]
  404190:	095b      	lsrs	r3, r3, #5
  404192:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404194:	69fa      	ldr	r2, [r7, #28]
  404196:	4b17      	ldr	r3, [pc, #92]	; (4041f4 <ioport_set_pin_dir+0x84>)
  404198:	4413      	add	r3, r2
  40419a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40419c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40419e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041a2:	2b01      	cmp	r3, #1
  4041a4:	d109      	bne.n	4041ba <ioport_set_pin_dir+0x4a>
  4041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041a8:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041aa:	697b      	ldr	r3, [r7, #20]
  4041ac:	f003 031f 	and.w	r3, r3, #31
  4041b0:	2201      	movs	r2, #1
  4041b2:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4041b4:	69bb      	ldr	r3, [r7, #24]
  4041b6:	611a      	str	r2, [r3, #16]
  4041b8:	e00c      	b.n	4041d4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4041ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4041be:	2b00      	cmp	r3, #0
  4041c0:	d108      	bne.n	4041d4 <ioport_set_pin_dir+0x64>
  4041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041c4:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041c6:	693b      	ldr	r3, [r7, #16]
  4041c8:	f003 031f 	and.w	r3, r3, #31
  4041cc:	2201      	movs	r2, #1
  4041ce:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4041d0:	69bb      	ldr	r3, [r7, #24]
  4041d2:	615a      	str	r2, [r3, #20]
  4041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4041d6:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4041d8:	68fb      	ldr	r3, [r7, #12]
  4041da:	f003 031f 	and.w	r3, r3, #31
  4041de:	2201      	movs	r2, #1
  4041e0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4041e2:	69bb      	ldr	r3, [r7, #24]
  4041e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4041e8:	3734      	adds	r7, #52	; 0x34
  4041ea:	46bd      	mov	sp, r7
  4041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041f0:	4770      	bx	lr
  4041f2:	bf00      	nop
  4041f4:	00200707 	.word	0x00200707

004041f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4041f8:	b480      	push	{r7}
  4041fa:	b08b      	sub	sp, #44	; 0x2c
  4041fc:	af00      	add	r7, sp, #0
  4041fe:	6078      	str	r0, [r7, #4]
  404200:	460b      	mov	r3, r1
  404202:	70fb      	strb	r3, [r7, #3]
  404204:	687b      	ldr	r3, [r7, #4]
  404206:	627b      	str	r3, [r7, #36]	; 0x24
  404208:	78fb      	ldrb	r3, [r7, #3]
  40420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404210:	61fb      	str	r3, [r7, #28]
  404212:	69fb      	ldr	r3, [r7, #28]
  404214:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404216:	69bb      	ldr	r3, [r7, #24]
  404218:	095b      	lsrs	r3, r3, #5
  40421a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40421c:	697a      	ldr	r2, [r7, #20]
  40421e:	4b10      	ldr	r3, [pc, #64]	; (404260 <ioport_set_pin_level+0x68>)
  404220:	4413      	add	r3, r2
  404222:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404224:	613b      	str	r3, [r7, #16]

	if (level) {
  404226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40422a:	2b00      	cmp	r3, #0
  40422c:	d009      	beq.n	404242 <ioport_set_pin_level+0x4a>
  40422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404230:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404232:	68fb      	ldr	r3, [r7, #12]
  404234:	f003 031f 	and.w	r3, r3, #31
  404238:	2201      	movs	r2, #1
  40423a:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40423c:	693b      	ldr	r3, [r7, #16]
  40423e:	631a      	str	r2, [r3, #48]	; 0x30
  404240:	e008      	b.n	404254 <ioport_set_pin_level+0x5c>
  404242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404244:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  404246:	68bb      	ldr	r3, [r7, #8]
  404248:	f003 031f 	and.w	r3, r3, #31
  40424c:	2201      	movs	r2, #1
  40424e:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404250:	693b      	ldr	r3, [r7, #16]
  404252:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
  404254:	372c      	adds	r7, #44	; 0x2c
  404256:	46bd      	mov	sp, r7
  404258:	f85d 7b04 	ldr.w	r7, [sp], #4
  40425c:	4770      	bx	lr
  40425e:	bf00      	nop
  404260:	00200707 	.word	0x00200707

00404264 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  404264:	b480      	push	{r7}
  404266:	b089      	sub	sp, #36	; 0x24
  404268:	af00      	add	r7, sp, #0
  40426a:	6078      	str	r0, [r7, #4]
  40426c:	687b      	ldr	r3, [r7, #4]
  40426e:	61fb      	str	r3, [r7, #28]
  404270:	69fb      	ldr	r3, [r7, #28]
  404272:	61bb      	str	r3, [r7, #24]
  404274:	69bb      	ldr	r3, [r7, #24]
  404276:	617b      	str	r3, [r7, #20]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  404278:	697b      	ldr	r3, [r7, #20]
  40427a:	095b      	lsrs	r3, r3, #5
  40427c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40427e:	693a      	ldr	r2, [r7, #16]
  404280:	4b0b      	ldr	r3, [pc, #44]	; (4042b0 <ioport_get_pin_level+0x4c>)
  404282:	4413      	add	r3, r2
  404284:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404288:	69fb      	ldr	r3, [r7, #28]
  40428a:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40428c:	68fb      	ldr	r3, [r7, #12]
  40428e:	f003 031f 	and.w	r3, r3, #31
  404292:	2101      	movs	r1, #1
  404294:	fa01 f303 	lsl.w	r3, r1, r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  404298:	4013      	ands	r3, r2
  40429a:	2b00      	cmp	r3, #0
  40429c:	bf14      	ite	ne
  40429e:	2301      	movne	r3, #1
  4042a0:	2300      	moveq	r3, #0
  4042a2:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4042a4:	4618      	mov	r0, r3
  4042a6:	3724      	adds	r7, #36	; 0x24
  4042a8:	46bd      	mov	sp, r7
  4042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042ae:	4770      	bx	lr
  4042b0:	00200707 	.word	0x00200707

004042b4 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  4042b4:	b480      	push	{r7}
  4042b6:	b08b      	sub	sp, #44	; 0x2c
  4042b8:	af00      	add	r7, sp, #0
  4042ba:	6078      	str	r0, [r7, #4]
  4042bc:	687b      	ldr	r3, [r7, #4]
  4042be:	627b      	str	r3, [r7, #36]	; 0x24
  4042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042c2:	623b      	str	r3, [r7, #32]
  4042c4:	6a3b      	ldr	r3, [r7, #32]
  4042c6:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4042c8:	69fb      	ldr	r3, [r7, #28]
  4042ca:	095b      	lsrs	r3, r3, #5
  4042cc:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4042ce:	69ba      	ldr	r2, [r7, #24]
  4042d0:	4b12      	ldr	r3, [pc, #72]	; (40431c <ioport_toggle_pin_level+0x68>)
  4042d2:	4413      	add	r3, r2
  4042d4:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  4042d6:	617b      	str	r3, [r7, #20]
  4042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042da:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4042dc:	693b      	ldr	r3, [r7, #16]
  4042de:	f003 031f 	and.w	r3, r3, #31
  4042e2:	2201      	movs	r2, #1
  4042e4:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  4042e8:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4042ea:	697b      	ldr	r3, [r7, #20]
  4042ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042f0:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4042f2:	68bb      	ldr	r3, [r7, #8]
  4042f4:	f003 031f 	and.w	r3, r3, #31
  4042f8:	2101      	movs	r1, #1
  4042fa:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4042fe:	4013      	ands	r3, r2
  404300:	2b00      	cmp	r3, #0
  404302:	d003      	beq.n	40430c <ioport_toggle_pin_level+0x58>
		port->PIO_CODR = mask;
  404304:	697b      	ldr	r3, [r7, #20]
  404306:	68fa      	ldr	r2, [r7, #12]
  404308:	635a      	str	r2, [r3, #52]	; 0x34
  40430a:	e002      	b.n	404312 <ioport_toggle_pin_level+0x5e>
	} else {
		port->PIO_SODR = mask;
  40430c:	697b      	ldr	r3, [r7, #20]
  40430e:	68fa      	ldr	r2, [r7, #12]
  404310:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
  404312:	372c      	adds	r7, #44	; 0x2c
  404314:	46bd      	mov	sp, r7
  404316:	f85d 7b04 	ldr.w	r7, [sp], #4
  40431a:	4770      	bx	lr
  40431c:	00200707 	.word	0x00200707

00404320 <init_sysErr>:

#define BIT(x) (1<<(x))

void init_sysErr(void);
void init_sysErr(void)
{
  404320:	b580      	push	{r7, lr}
  404322:	af00      	add	r7, sp, #0
	memset(&sysErr, 0x00, sizeof(sysErr)); //Init everything to "PASS"
  404324:	4802      	ldr	r0, [pc, #8]	; (404330 <init_sysErr+0x10>)
  404326:	2100      	movs	r1, #0
  404328:	2210      	movs	r2, #16
  40432a:	4b02      	ldr	r3, [pc, #8]	; (404334 <init_sysErr+0x14>)
  40432c:	4798      	blx	r3
}
  40432e:	bd80      	pop	{r7, pc}
  404330:	204016b4 	.word	0x204016b4
  404334:	00406dc5 	.word	0x00406dc5

00404338 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
  404338:	b580      	push	{r7, lr}
  40433a:	b084      	sub	sp, #16
  40433c:	af00      	add	r7, sp, #0
  40433e:	4603      	mov	r3, r0
  404340:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i<7; i++)
  404342:	2300      	movs	r3, #0
  404344:	60fb      	str	r3, [r7, #12]
  404346:	e05f      	b.n	404408 <display_text+0xd0>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
  404348:	4b32      	ldr	r3, [pc, #200]	; (404414 <display_text+0xdc>)
  40434a:	681b      	ldr	r3, [r3, #0]
  40434c:	689b      	ldr	r3, [r3, #8]
  40434e:	689a      	ldr	r2, [r3, #8]
  404350:	3a01      	subs	r2, #1
  404352:	609a      	str	r2, [r3, #8]
  404354:	689b      	ldr	r3, [r3, #8]
  404356:	2b00      	cmp	r3, #0
  404358:	da41      	bge.n	4043de <display_text+0xa6>
  40435a:	4b2e      	ldr	r3, [pc, #184]	; (404414 <display_text+0xdc>)
  40435c:	681b      	ldr	r3, [r3, #0]
  40435e:	689b      	ldr	r3, [r3, #8]
  404360:	689a      	ldr	r2, [r3, #8]
  404362:	4b2c      	ldr	r3, [pc, #176]	; (404414 <display_text+0xdc>)
  404364:	681b      	ldr	r3, [r3, #0]
  404366:	689b      	ldr	r3, [r3, #8]
  404368:	699b      	ldr	r3, [r3, #24]
  40436a:	429a      	cmp	r2, r3
  40436c:	db24      	blt.n	4043b8 <display_text+0x80>
  40436e:	4b29      	ldr	r3, [pc, #164]	; (404414 <display_text+0xdc>)
  404370:	681b      	ldr	r3, [r3, #0]
  404372:	689b      	ldr	r3, [r3, #8]
  404374:	681b      	ldr	r3, [r3, #0]
  404376:	79fa      	ldrb	r2, [r7, #7]
  404378:	4927      	ldr	r1, [pc, #156]	; (404418 <display_text+0xe0>)
  40437a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  40437e:	68fa      	ldr	r2, [r7, #12]
  404380:	440a      	add	r2, r1
  404382:	7812      	ldrb	r2, [r2, #0]
  404384:	701a      	strb	r2, [r3, #0]
  404386:	4b23      	ldr	r3, [pc, #140]	; (404414 <display_text+0xdc>)
  404388:	681b      	ldr	r3, [r3, #0]
  40438a:	689b      	ldr	r3, [r3, #8]
  40438c:	681b      	ldr	r3, [r3, #0]
  40438e:	781b      	ldrb	r3, [r3, #0]
  404390:	2b0a      	cmp	r3, #10
  404392:	d006      	beq.n	4043a2 <display_text+0x6a>
  404394:	4b1f      	ldr	r3, [pc, #124]	; (404414 <display_text+0xdc>)
  404396:	681b      	ldr	r3, [r3, #0]
  404398:	689b      	ldr	r3, [r3, #8]
  40439a:	681a      	ldr	r2, [r3, #0]
  40439c:	3201      	adds	r2, #1
  40439e:	601a      	str	r2, [r3, #0]
  4043a0:	e02f      	b.n	404402 <display_text+0xca>
  4043a2:	4b1c      	ldr	r3, [pc, #112]	; (404414 <display_text+0xdc>)
  4043a4:	681a      	ldr	r2, [r3, #0]
  4043a6:	4b1b      	ldr	r3, [pc, #108]	; (404414 <display_text+0xdc>)
  4043a8:	681b      	ldr	r3, [r3, #0]
  4043aa:	689b      	ldr	r3, [r3, #8]
  4043ac:	4610      	mov	r0, r2
  4043ae:	210a      	movs	r1, #10
  4043b0:	461a      	mov	r2, r3
  4043b2:	4b1a      	ldr	r3, [pc, #104]	; (40441c <display_text+0xe4>)
  4043b4:	4798      	blx	r3
  4043b6:	e024      	b.n	404402 <display_text+0xca>
  4043b8:	4b16      	ldr	r3, [pc, #88]	; (404414 <display_text+0xdc>)
  4043ba:	6819      	ldr	r1, [r3, #0]
  4043bc:	79fb      	ldrb	r3, [r7, #7]
  4043be:	4a16      	ldr	r2, [pc, #88]	; (404418 <display_text+0xe0>)
  4043c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4043c4:	68fb      	ldr	r3, [r7, #12]
  4043c6:	4413      	add	r3, r2
  4043c8:	781b      	ldrb	r3, [r3, #0]
  4043ca:	461a      	mov	r2, r3
  4043cc:	4b11      	ldr	r3, [pc, #68]	; (404414 <display_text+0xdc>)
  4043ce:	681b      	ldr	r3, [r3, #0]
  4043d0:	689b      	ldr	r3, [r3, #8]
  4043d2:	4608      	mov	r0, r1
  4043d4:	4611      	mov	r1, r2
  4043d6:	461a      	mov	r2, r3
  4043d8:	4b10      	ldr	r3, [pc, #64]	; (40441c <display_text+0xe4>)
  4043da:	4798      	blx	r3
  4043dc:	e011      	b.n	404402 <display_text+0xca>
  4043de:	4b0d      	ldr	r3, [pc, #52]	; (404414 <display_text+0xdc>)
  4043e0:	681b      	ldr	r3, [r3, #0]
  4043e2:	689b      	ldr	r3, [r3, #8]
  4043e4:	681b      	ldr	r3, [r3, #0]
  4043e6:	79fa      	ldrb	r2, [r7, #7]
  4043e8:	490b      	ldr	r1, [pc, #44]	; (404418 <display_text+0xe0>)
  4043ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4043ee:	68fa      	ldr	r2, [r7, #12]
  4043f0:	440a      	add	r2, r1
  4043f2:	7812      	ldrb	r2, [r2, #0]
  4043f4:	701a      	strb	r2, [r3, #0]
  4043f6:	4b07      	ldr	r3, [pc, #28]	; (404414 <display_text+0xdc>)
  4043f8:	681b      	ldr	r3, [r3, #0]
  4043fa:	689b      	ldr	r3, [r3, #8]
  4043fc:	681a      	ldr	r2, [r3, #0]
  4043fe:	3201      	adds	r2, #1
  404400:	601a      	str	r2, [r3, #0]


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
  404402:	68fb      	ldr	r3, [r7, #12]
  404404:	3301      	adds	r3, #1
  404406:	60fb      	str	r3, [r7, #12]
  404408:	68fb      	ldr	r3, [r7, #12]
  40440a:	2b06      	cmp	r3, #6
  40440c:	dd9c      	ble.n	404348 <display_text+0x10>
	{
		putchar(((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
  40440e:	3710      	adds	r7, #16
  404410:	46bd      	mov	sp, r7
  404412:	bd80      	pop	{r7, pc}
  404414:	204004c0 	.word	0x204004c0
  404418:	20400068 	.word	0x20400068
  40441c:	00408601 	.word	0x00408601

00404420 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
  404420:	b580      	push	{r7, lr}
  404422:	af00      	add	r7, sp, #0
	uint32_t ioFlags;

	ioport_set_pin_dir(ECLAVE_SERIAL_ID0, IOPORT_DIR_OUTPUT);
  404424:	200f      	movs	r0, #15
  404426:	2101      	movs	r1, #1
  404428:	4b13      	ldr	r3, [pc, #76]	; (404478 <init_io+0x58>)
  40442a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID0, IOPORT_PIN_LEVEL_HIGH);
  40442c:	200f      	movs	r0, #15
  40442e:	2101      	movs	r1, #1
  404430:	4b12      	ldr	r3, [pc, #72]	; (40447c <init_io+0x5c>)
  404432:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID1, IOPORT_DIR_OUTPUT);
  404434:	2010      	movs	r0, #16
  404436:	2101      	movs	r1, #1
  404438:	4b0f      	ldr	r3, [pc, #60]	; (404478 <init_io+0x58>)
  40443a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID1, IOPORT_PIN_LEVEL_HIGH);
  40443c:	2010      	movs	r0, #16
  40443e:	2101      	movs	r1, #1
  404440:	4b0e      	ldr	r3, [pc, #56]	; (40447c <init_io+0x5c>)
  404442:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID2, IOPORT_DIR_OUTPUT);
  404444:	2011      	movs	r0, #17
  404446:	2101      	movs	r1, #1
  404448:	4b0b      	ldr	r3, [pc, #44]	; (404478 <init_io+0x58>)
  40444a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID2, IOPORT_PIN_LEVEL_HIGH);
  40444c:	2011      	movs	r0, #17
  40444e:	2101      	movs	r1, #1
  404450:	4b0a      	ldr	r3, [pc, #40]	; (40447c <init_io+0x5c>)
  404452:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID3, IOPORT_DIR_OUTPUT);
  404454:	2012      	movs	r0, #18
  404456:	2101      	movs	r1, #1
  404458:	4b07      	ldr	r3, [pc, #28]	; (404478 <init_io+0x58>)
  40445a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID3, IOPORT_PIN_LEVEL_HIGH);
  40445c:	2012      	movs	r0, #18
  40445e:	2101      	movs	r1, #1
  404460:	4b06      	ldr	r3, [pc, #24]	; (40447c <init_io+0x5c>)
  404462:	4798      	blx	r3
	ioport_set_pin_dir(ECLAVE_SERIAL_ID4, IOPORT_DIR_OUTPUT);
  404464:	2013      	movs	r0, #19
  404466:	2101      	movs	r1, #1
  404468:	4b03      	ldr	r3, [pc, #12]	; (404478 <init_io+0x58>)
  40446a:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_SERIAL_ID4, IOPORT_PIN_LEVEL_HIGH);
  40446c:	2013      	movs	r0, #19
  40446e:	2101      	movs	r1, #1
  404470:	4b02      	ldr	r3, [pc, #8]	; (40447c <init_io+0x5c>)
  404472:	4798      	blx	r3
}
  404474:	bd80      	pop	{r7, pc}
  404476:	bf00      	nop
  404478:	00404171 	.word	0x00404171
  40447c:	004041f9 	.word	0x004041f9

00404480 <print_ecdbg_num>:
};


void print_ecdbg_num(unsigned int num);
void print_ecdbg_num(unsigned int num)
{
  404480:	b580      	push	{r7, lr}
  404482:	b084      	sub	sp, #16
  404484:	af00      	add	r7, sp, #0
  404486:	6078      	str	r0, [r7, #4]
	char str[6];
	
	sprintf(str, "%d", num);	
  404488:	f107 0308 	add.w	r3, r7, #8
  40448c:	4618      	mov	r0, r3
  40448e:	4906      	ldr	r1, [pc, #24]	; (4044a8 <print_ecdbg_num+0x28>)
  404490:	687a      	ldr	r2, [r7, #4]
  404492:	4b06      	ldr	r3, [pc, #24]	; (4044ac <print_ecdbg_num+0x2c>)
  404494:	4798      	blx	r3
	
	print_ecdbg(str);
  404496:	f107 0308 	add.w	r3, r7, #8
  40449a:	4618      	mov	r0, r3
  40449c:	4b04      	ldr	r3, [pc, #16]	; (4044b0 <print_ecdbg_num+0x30>)
  40449e:	4798      	blx	r3
}
  4044a0:	3710      	adds	r7, #16
  4044a2:	46bd      	mov	sp, r7
  4044a4:	bd80      	pop	{r7, pc}
  4044a6:	bf00      	nop
  4044a8:	0040c6b8 	.word	0x0040c6b8
  4044ac:	00406fe1 	.word	0x00406fe1
  4044b0:	004026b1 	.word	0x004026b1

004044b4 <read_led_board_serial_ids>:

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
  4044b4:	b580      	push	{r7, lr}
  4044b6:	b084      	sub	sp, #16
  4044b8:	af00      	add	r7, sp, #0
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
  4044ba:	2001      	movs	r0, #1
  4044bc:	4b8b      	ldr	r3, [pc, #556]	; (4046ec <read_led_board_serial_ids+0x238>)
  4044be:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4044c0:	2300      	movs	r3, #0
  4044c2:	60fb      	str	r3, [r7, #12]
  4044c4:	e02d      	b.n	404522 <read_led_board_serial_ids+0x6e>
	{
		ledBrd[i].present = !OWTouchReset(i);
  4044c6:	68fb      	ldr	r3, [r7, #12]
  4044c8:	b2db      	uxtb	r3, r3
  4044ca:	4618      	mov	r0, r3
  4044cc:	4b88      	ldr	r3, [pc, #544]	; (4046f0 <read_led_board_serial_ids+0x23c>)
  4044ce:	4798      	blx	r3
  4044d0:	4603      	mov	r3, r0
  4044d2:	2b00      	cmp	r3, #0
  4044d4:	bf0c      	ite	eq
  4044d6:	2301      	moveq	r3, #1
  4044d8:	2300      	movne	r3, #0
  4044da:	b2db      	uxtb	r3, r3
  4044dc:	4618      	mov	r0, r3
  4044de:	4985      	ldr	r1, [pc, #532]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4044e0:	68fa      	ldr	r2, [r7, #12]
  4044e2:	4613      	mov	r3, r2
  4044e4:	00db      	lsls	r3, r3, #3
  4044e6:	1a9b      	subs	r3, r3, r2
  4044e8:	005b      	lsls	r3, r3, #1
  4044ea:	440b      	add	r3, r1
  4044ec:	3308      	adds	r3, #8
  4044ee:	4602      	mov	r2, r0
  4044f0:	701a      	strb	r2, [r3, #0]
		if (ledBrd[i].present)
  4044f2:	4980      	ldr	r1, [pc, #512]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4044f4:	68fa      	ldr	r2, [r7, #12]
  4044f6:	4613      	mov	r3, r2
  4044f8:	00db      	lsls	r3, r3, #3
  4044fa:	1a9b      	subs	r3, r3, r2
  4044fc:	005b      	lsls	r3, r3, #1
  4044fe:	440b      	add	r3, r1
  404500:	3308      	adds	r3, #8
  404502:	781b      	ldrb	r3, [r3, #0]
  404504:	2b00      	cmp	r3, #0
  404506:	d009      	beq.n	40451c <read_led_board_serial_ids+0x68>
		{
			print_ecdbg("LED board detected in slot ");
  404508:	487b      	ldr	r0, [pc, #492]	; (4046f8 <read_led_board_serial_ids+0x244>)
  40450a:	4b7c      	ldr	r3, [pc, #496]	; (4046fc <read_led_board_serial_ids+0x248>)
  40450c:	4798      	blx	r3
			print_ecdbg_num(i);
  40450e:	68fb      	ldr	r3, [r7, #12]
  404510:	4618      	mov	r0, r3
  404512:	4b7b      	ldr	r3, [pc, #492]	; (404700 <read_led_board_serial_ids+0x24c>)
  404514:	4798      	blx	r3
			print_ecdbg("\r\n");
  404516:	487b      	ldr	r0, [pc, #492]	; (404704 <read_led_board_serial_ids+0x250>)
  404518:	4b78      	ldr	r3, [pc, #480]	; (4046fc <read_led_board_serial_ids+0x248>)
  40451a:	4798      	blx	r3
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  40451c:	68fb      	ldr	r3, [r7, #12]
  40451e:	3301      	adds	r3, #1
  404520:	60fb      	str	r3, [r7, #12]
  404522:	68fb      	ldr	r3, [r7, #12]
  404524:	2b04      	cmp	r3, #4
  404526:	ddce      	ble.n	4044c6 <read_led_board_serial_ids+0x12>
			print_ecdbg_num(i);
			print_ecdbg("\r\n");
		}
	}
	
	if (ledBrd[0].present && ledBrd[1].present)
  404528:	4b72      	ldr	r3, [pc, #456]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40452a:	7a1b      	ldrb	r3, [r3, #8]
  40452c:	2b00      	cmp	r3, #0
  40452e:	d009      	beq.n	404544 <read_led_board_serial_ids+0x90>
  404530:	4b70      	ldr	r3, [pc, #448]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404532:	7d9b      	ldrb	r3, [r3, #22]
  404534:	2b00      	cmp	r3, #0
  404536:	d005      	beq.n	404544 <read_led_board_serial_ids+0x90>
	{
		shelf[0].present = 1;
  404538:	4b73      	ldr	r3, [pc, #460]	; (404708 <read_led_board_serial_ids+0x254>)
  40453a:	2201      	movs	r2, #1
  40453c:	711a      	strb	r2, [r3, #4]
		
		print_ecdbg("Shelf 0 present\r\n");
  40453e:	4873      	ldr	r0, [pc, #460]	; (40470c <read_led_board_serial_ids+0x258>)
  404540:	4b6e      	ldr	r3, [pc, #440]	; (4046fc <read_led_board_serial_ids+0x248>)
  404542:	4798      	blx	r3
	}
	if (ledBrd[1].present && ledBrd[2].present)
  404544:	4b6b      	ldr	r3, [pc, #428]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404546:	7d9b      	ldrb	r3, [r3, #22]
  404548:	2b00      	cmp	r3, #0
  40454a:	d00a      	beq.n	404562 <read_led_board_serial_ids+0xae>
  40454c:	4b69      	ldr	r3, [pc, #420]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40454e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  404552:	2b00      	cmp	r3, #0
  404554:	d005      	beq.n	404562 <read_led_board_serial_ids+0xae>
	{
		shelf[1].present = 1;
  404556:	4b6c      	ldr	r3, [pc, #432]	; (404708 <read_led_board_serial_ids+0x254>)
  404558:	2201      	movs	r2, #1
  40455a:	725a      	strb	r2, [r3, #9]
		print_ecdbg("Shelf 1 present\r\n");
  40455c:	486c      	ldr	r0, [pc, #432]	; (404710 <read_led_board_serial_ids+0x25c>)
  40455e:	4b67      	ldr	r3, [pc, #412]	; (4046fc <read_led_board_serial_ids+0x248>)
  404560:	4798      	blx	r3
	}
	if (ledBrd[2].present && ledBrd[3].present)
  404562:	4b64      	ldr	r3, [pc, #400]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  404568:	2b00      	cmp	r3, #0
  40456a:	d00a      	beq.n	404582 <read_led_board_serial_ids+0xce>
  40456c:	4b61      	ldr	r3, [pc, #388]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40456e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404572:	2b00      	cmp	r3, #0
  404574:	d005      	beq.n	404582 <read_led_board_serial_ids+0xce>
	{
		shelf[2].present = 1;
  404576:	4b64      	ldr	r3, [pc, #400]	; (404708 <read_led_board_serial_ids+0x254>)
  404578:	2201      	movs	r2, #1
  40457a:	739a      	strb	r2, [r3, #14]
		print_ecdbg("Shelf 2 present\r\n");
  40457c:	4865      	ldr	r0, [pc, #404]	; (404714 <read_led_board_serial_ids+0x260>)
  40457e:	4b5f      	ldr	r3, [pc, #380]	; (4046fc <read_led_board_serial_ids+0x248>)
  404580:	4798      	blx	r3
	}
	if (ledBrd[3].present && ledBrd[4].present)
  404582:	4b5c      	ldr	r3, [pc, #368]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404584:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  404588:	2b00      	cmp	r3, #0
  40458a:	d00a      	beq.n	4045a2 <read_led_board_serial_ids+0xee>
  40458c:	4b59      	ldr	r3, [pc, #356]	; (4046f4 <read_led_board_serial_ids+0x240>)
  40458e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  404592:	2b00      	cmp	r3, #0
  404594:	d005      	beq.n	4045a2 <read_led_board_serial_ids+0xee>
	{
		shelf[3].present = 1;
  404596:	4b5c      	ldr	r3, [pc, #368]	; (404708 <read_led_board_serial_ids+0x254>)
  404598:	2201      	movs	r2, #1
  40459a:	74da      	strb	r2, [r3, #19]
		print_ecdbg("Shelf 3 present\r\n");
  40459c:	485e      	ldr	r0, [pc, #376]	; (404718 <read_led_board_serial_ids+0x264>)
  40459e:	4b57      	ldr	r3, [pc, #348]	; (4046fc <read_led_board_serial_ids+0x248>)
  4045a0:	4798      	blx	r3
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  4045a2:	2300      	movs	r3, #0
  4045a4:	60bb      	str	r3, [r7, #8]
  4045a6:	e099      	b.n	4046dc <read_led_board_serial_ids+0x228>
	{
		unsigned char acc = 0;
  4045a8:	2300      	movs	r3, #0
  4045aa:	71fb      	strb	r3, [r7, #7]
		
		if (ledBrd[i].present)
  4045ac:	4951      	ldr	r1, [pc, #324]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045ae:	68ba      	ldr	r2, [r7, #8]
  4045b0:	4613      	mov	r3, r2
  4045b2:	00db      	lsls	r3, r3, #3
  4045b4:	1a9b      	subs	r3, r3, r2
  4045b6:	005b      	lsls	r3, r3, #1
  4045b8:	440b      	add	r3, r1
  4045ba:	3308      	adds	r3, #8
  4045bc:	781b      	ldrb	r3, [r3, #0]
  4045be:	2b00      	cmp	r3, #0
  4045c0:	f000 8089 	beq.w	4046d6 <read_led_board_serial_ids+0x222>
		{
			OWWriteByte(i, 0x33); //Read ID command
  4045c4:	68bb      	ldr	r3, [r7, #8]
  4045c6:	b2db      	uxtb	r3, r3
  4045c8:	4618      	mov	r0, r3
  4045ca:	2133      	movs	r1, #51	; 0x33
  4045cc:	4b53      	ldr	r3, [pc, #332]	; (40471c <read_led_board_serial_ids+0x268>)
  4045ce:	4798      	blx	r3
			
			ledBrd[i].idFamily = OWReadByte(i);
  4045d0:	68bb      	ldr	r3, [r7, #8]
  4045d2:	b2db      	uxtb	r3, r3
  4045d4:	4618      	mov	r0, r3
  4045d6:	4b52      	ldr	r3, [pc, #328]	; (404720 <read_led_board_serial_ids+0x26c>)
  4045d8:	4798      	blx	r3
  4045da:	4603      	mov	r3, r0
  4045dc:	b2d8      	uxtb	r0, r3
  4045de:	4945      	ldr	r1, [pc, #276]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045e0:	68ba      	ldr	r2, [r7, #8]
  4045e2:	4613      	mov	r3, r2
  4045e4:	00db      	lsls	r3, r3, #3
  4045e6:	1a9b      	subs	r3, r3, r2
  4045e8:	005b      	lsls	r3, r3, #1
  4045ea:	440b      	add	r3, r1
  4045ec:	4602      	mov	r2, r0
  4045ee:	701a      	strb	r2, [r3, #0]
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
  4045f0:	4940      	ldr	r1, [pc, #256]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4045f2:	68ba      	ldr	r2, [r7, #8]
  4045f4:	4613      	mov	r3, r2
  4045f6:	00db      	lsls	r3, r3, #3
  4045f8:	1a9b      	subs	r3, r3, r2
  4045fa:	005b      	lsls	r3, r3, #1
  4045fc:	440b      	add	r3, r1
  4045fe:	781b      	ldrb	r3, [r3, #0]
  404600:	2000      	movs	r0, #0
  404602:	4619      	mov	r1, r3
  404604:	4b47      	ldr	r3, [pc, #284]	; (404724 <read_led_board_serial_ids+0x270>)
  404606:	4798      	blx	r3
  404608:	4603      	mov	r3, r0
  40460a:	71fb      	strb	r3, [r7, #7]
			
			for (int j=0; j<6; j++)
  40460c:	2300      	movs	r3, #0
  40460e:	603b      	str	r3, [r7, #0]
  404610:	e025      	b.n	40465e <read_led_board_serial_ids+0x1aa>
			{
				ledBrd[i].id[j] = OWReadByte(i);
  404612:	68bb      	ldr	r3, [r7, #8]
  404614:	b2db      	uxtb	r3, r3
  404616:	4618      	mov	r0, r3
  404618:	4b41      	ldr	r3, [pc, #260]	; (404720 <read_led_board_serial_ids+0x26c>)
  40461a:	4798      	blx	r3
  40461c:	4603      	mov	r3, r0
  40461e:	b2d8      	uxtb	r0, r3
  404620:	4934      	ldr	r1, [pc, #208]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404622:	68ba      	ldr	r2, [r7, #8]
  404624:	4613      	mov	r3, r2
  404626:	00db      	lsls	r3, r3, #3
  404628:	1a9b      	subs	r3, r3, r2
  40462a:	005b      	lsls	r3, r3, #1
  40462c:	683a      	ldr	r2, [r7, #0]
  40462e:	4413      	add	r3, r2
  404630:	440b      	add	r3, r1
  404632:	4602      	mov	r2, r0
  404634:	705a      	strb	r2, [r3, #1]
				acc = crc8_add(acc, ledBrd[i].id[j]);
  404636:	492f      	ldr	r1, [pc, #188]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404638:	68ba      	ldr	r2, [r7, #8]
  40463a:	4613      	mov	r3, r2
  40463c:	00db      	lsls	r3, r3, #3
  40463e:	1a9b      	subs	r3, r3, r2
  404640:	005b      	lsls	r3, r3, #1
  404642:	683a      	ldr	r2, [r7, #0]
  404644:	4413      	add	r3, r2
  404646:	440b      	add	r3, r1
  404648:	785b      	ldrb	r3, [r3, #1]
  40464a:	79fa      	ldrb	r2, [r7, #7]
  40464c:	4610      	mov	r0, r2
  40464e:	4619      	mov	r1, r3
  404650:	4b34      	ldr	r3, [pc, #208]	; (404724 <read_led_board_serial_ids+0x270>)
  404652:	4798      	blx	r3
  404654:	4603      	mov	r3, r0
  404656:	71fb      	strb	r3, [r7, #7]
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
  404658:	683b      	ldr	r3, [r7, #0]
  40465a:	3301      	adds	r3, #1
  40465c:	603b      	str	r3, [r7, #0]
  40465e:	683b      	ldr	r3, [r7, #0]
  404660:	2b05      	cmp	r3, #5
  404662:	ddd6      	ble.n	404612 <read_led_board_serial_ids+0x15e>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
  404664:	68bb      	ldr	r3, [r7, #8]
  404666:	b2db      	uxtb	r3, r3
  404668:	4618      	mov	r0, r3
  40466a:	4b2d      	ldr	r3, [pc, #180]	; (404720 <read_led_board_serial_ids+0x26c>)
  40466c:	4798      	blx	r3
  40466e:	4603      	mov	r3, r0
  404670:	b2d8      	uxtb	r0, r3
  404672:	4920      	ldr	r1, [pc, #128]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404674:	68ba      	ldr	r2, [r7, #8]
  404676:	4613      	mov	r3, r2
  404678:	00db      	lsls	r3, r3, #3
  40467a:	1a9b      	subs	r3, r3, r2
  40467c:	005b      	lsls	r3, r3, #1
  40467e:	440b      	add	r3, r1
  404680:	4602      	mov	r2, r0
  404682:	71da      	strb	r2, [r3, #7]
			
			if (acc != ledBrd[i].idcsum)
  404684:	491b      	ldr	r1, [pc, #108]	; (4046f4 <read_led_board_serial_ids+0x240>)
  404686:	68ba      	ldr	r2, [r7, #8]
  404688:	4613      	mov	r3, r2
  40468a:	00db      	lsls	r3, r3, #3
  40468c:	1a9b      	subs	r3, r3, r2
  40468e:	005b      	lsls	r3, r3, #1
  404690:	440b      	add	r3, r1
  404692:	79db      	ldrb	r3, [r3, #7]
  404694:	79fa      	ldrb	r2, [r7, #7]
  404696:	429a      	cmp	r2, r3
  404698:	d01d      	beq.n	4046d6 <read_led_board_serial_ids+0x222>
			{
				sysErr.ledBrdSerialIdCsum |= BIT(i); //SE_FAIL;
  40469a:	4b23      	ldr	r3, [pc, #140]	; (404728 <read_led_board_serial_ids+0x274>)
  40469c:	7b1b      	ldrb	r3, [r3, #12]
  40469e:	b2d9      	uxtb	r1, r3
  4046a0:	2201      	movs	r2, #1
  4046a2:	68bb      	ldr	r3, [r7, #8]
  4046a4:	fa02 f303 	lsl.w	r3, r2, r3
  4046a8:	b2db      	uxtb	r3, r3
  4046aa:	460a      	mov	r2, r1
  4046ac:	4313      	orrs	r3, r2
  4046ae:	b2db      	uxtb	r3, r3
  4046b0:	b2da      	uxtb	r2, r3
  4046b2:	4b1d      	ldr	r3, [pc, #116]	; (404728 <read_led_board_serial_ids+0x274>)
  4046b4:	731a      	strb	r2, [r3, #12]
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
  4046b6:	490f      	ldr	r1, [pc, #60]	; (4046f4 <read_led_board_serial_ids+0x240>)
  4046b8:	68ba      	ldr	r2, [r7, #8]
  4046ba:	4613      	mov	r3, r2
  4046bc:	00db      	lsls	r3, r3, #3
  4046be:	1a9b      	subs	r3, r3, r2
  4046c0:	005b      	lsls	r3, r3, #1
  4046c2:	440b      	add	r3, r1
  4046c4:	3308      	adds	r3, #8
  4046c6:	2200      	movs	r2, #0
  4046c8:	701a      	strb	r2, [r3, #0]
				print_ecdbg("Invalid serial ID checksum.\r\n");
  4046ca:	4818      	ldr	r0, [pc, #96]	; (40472c <read_led_board_serial_ids+0x278>)
  4046cc:	4b0b      	ldr	r3, [pc, #44]	; (4046fc <read_led_board_serial_ids+0x248>)
  4046ce:	4798      	blx	r3
				
				electroclaveState = STATE_CHASSIS_ERROR;
  4046d0:	4b17      	ldr	r3, [pc, #92]	; (404730 <read_led_board_serial_ids+0x27c>)
  4046d2:	2207      	movs	r2, #7
  4046d4:	701a      	strb	r2, [r3, #0]
		shelf[3].present = 1;
		print_ecdbg("Shelf 3 present\r\n");
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
  4046d6:	68bb      	ldr	r3, [r7, #8]
  4046d8:	3301      	adds	r3, #1
  4046da:	60bb      	str	r3, [r7, #8]
  4046dc:	68bb      	ldr	r3, [r7, #8]
  4046de:	2b04      	cmp	r3, #4
  4046e0:	f77f af62 	ble.w	4045a8 <read_led_board_serial_ids+0xf4>
				
				electroclaveState = STATE_CHASSIS_ERROR;
			}
		}
	}
}
  4046e4:	3710      	adds	r7, #16
  4046e6:	46bd      	mov	sp, r7
  4046e8:	bd80      	pop	{r7, pc}
  4046ea:	bf00      	nop
  4046ec:	00402ecd 	.word	0x00402ecd
  4046f0:	00402f89 	.word	0x00402f89
  4046f4:	20401644 	.word	0x20401644
  4046f8:	0040c6bc 	.word	0x0040c6bc
  4046fc:	004026b1 	.word	0x004026b1
  404700:	00404481 	.word	0x00404481
  404704:	0040c6d8 	.word	0x0040c6d8
  404708:	2040168c 	.word	0x2040168c
  40470c:	0040c6dc 	.word	0x0040c6dc
  404710:	0040c6f0 	.word	0x0040c6f0
  404714:	0040c704 	.word	0x0040c704
  404718:	0040c718 	.word	0x0040c718
  40471c:	00403129 	.word	0x00403129
  404720:	00403169 	.word	0x00403169
  404724:	004031b5 	.word	0x004031b5
  404728:	204016b4 	.word	0x204016b4
  40472c:	0040c72c 	.word	0x0040c72c
  404730:	204009b9 	.word	0x204009b9

00404734 <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
  404734:	b480      	push	{r7}
  404736:	b087      	sub	sp, #28
  404738:	af00      	add	r7, sp, #0
  40473a:	4603      	mov	r3, r0
  40473c:	71fb      	strb	r3, [r7, #7]
	unsigned char idx;
	unsigned int hours;
	float32_t intensity = 0;
  40473e:	f04f 0300 	mov.w	r3, #0
  404742:	617b      	str	r3, [r7, #20]
	float32_t tmpSanMinutes = 0;
  404744:	f04f 0300 	mov.w	r3, #0
  404748:	613b      	str	r3, [r7, #16]
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
  40474a:	79fa      	ldrb	r2, [r7, #7]
  40474c:	4910      	ldr	r1, [pc, #64]	; (404790 <check_led_brd_side_lifetime+0x5c>)
  40474e:	4613      	mov	r3, r2
  404750:	009b      	lsls	r3, r3, #2
  404752:	4413      	add	r3, r2
  404754:	440b      	add	r3, r1
  404756:	785b      	ldrb	r3, [r3, #1]
  404758:	73fb      	strb	r3, [r7, #15]
	
	
	hours = h.hrs[idx];
  40475a:	7bfb      	ldrb	r3, [r7, #15]
  40475c:	4a0d      	ldr	r2, [pc, #52]	; (404794 <check_led_brd_side_lifetime+0x60>)
  40475e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  404762:	60bb      	str	r3, [r7, #8]

#endif 0 //debug 23feb16 this makes the board hang???	

//	ledBrdSide[sideIdx].sanitizeMinutes = 60; //DEBUG hard code to 1 minute per Christian 24jun15 take this out later
//	ledBrdSide[sideIdx].sanitizeMinutes = 255; //DEBUG hard code to 10 minutes to debug BOTDRIVE problem 31jul15 take this out later
	ledBrdSide[sideIdx].sanitizeMinutes = 30; //DEBUG hard code to 30 minutes for sanitation tests 16jan16
  404764:	79fa      	ldrb	r2, [r7, #7]
  404766:	490a      	ldr	r1, [pc, #40]	; (404790 <check_led_brd_side_lifetime+0x5c>)
  404768:	4613      	mov	r3, r2
  40476a:	009b      	lsls	r3, r3, #2
  40476c:	4413      	add	r3, r2
  40476e:	440b      	add	r3, r1
  404770:	221e      	movs	r2, #30
  404772:	701a      	strb	r2, [r3, #0]


	if (hours < 2001)
  404774:	68bb      	ldr	r3, [r7, #8]
  404776:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40477a:	d801      	bhi.n	404780 <check_led_brd_side_lifetime+0x4c>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
  40477c:	2301      	movs	r3, #1
  40477e:	e000      	b.n	404782 <check_led_brd_side_lifetime+0x4e>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
  404780:	2300      	movs	r3, #0
//DEBUG 24jun15 need to function even with these errors for demo purposes		electroclaveState = STATE_CHASSIS_ERROR;
	}
}
  404782:	4618      	mov	r0, r3
  404784:	371c      	adds	r7, #28
  404786:	46bd      	mov	sp, r7
  404788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40478c:	4770      	bx	lr
  40478e:	bf00      	nop
  404790:	204016c8 	.word	0x204016c8
  404794:	204016f4 	.word	0x204016f4

00404798 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
  404798:	b580      	push	{r7, lr}
  40479a:	b082      	sub	sp, #8
  40479c:	af00      	add	r7, sp, #0
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  40479e:	2300      	movs	r3, #0
  4047a0:	607b      	str	r3, [r7, #4]
  4047a2:	e029      	b.n	4047f8 <check_led_brd_side_lifetimes+0x60>
	{
		brdIdx = ledBrdSide[i].boardIdx;
  4047a4:	4917      	ldr	r1, [pc, #92]	; (404804 <check_led_brd_side_lifetimes+0x6c>)
  4047a6:	687a      	ldr	r2, [r7, #4]
  4047a8:	4613      	mov	r3, r2
  4047aa:	009b      	lsls	r3, r3, #2
  4047ac:	4413      	add	r3, r2
  4047ae:	440b      	add	r3, r1
  4047b0:	791b      	ldrb	r3, [r3, #4]
  4047b2:	70fb      	strb	r3, [r7, #3]
		
		if (ledBrd[brdIdx].present)
  4047b4:	78fa      	ldrb	r2, [r7, #3]
  4047b6:	4914      	ldr	r1, [pc, #80]	; (404808 <check_led_brd_side_lifetimes+0x70>)
  4047b8:	4613      	mov	r3, r2
  4047ba:	00db      	lsls	r3, r3, #3
  4047bc:	1a9b      	subs	r3, r3, r2
  4047be:	005b      	lsls	r3, r3, #1
  4047c0:	440b      	add	r3, r1
  4047c2:	3308      	adds	r3, #8
  4047c4:	781b      	ldrb	r3, [r3, #0]
  4047c6:	2b00      	cmp	r3, #0
  4047c8:	d013      	beq.n	4047f2 <check_led_brd_side_lifetimes+0x5a>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
  4047ca:	687b      	ldr	r3, [r7, #4]
  4047cc:	b2db      	uxtb	r3, r3
  4047ce:	4618      	mov	r0, r3
  4047d0:	4b0e      	ldr	r3, [pc, #56]	; (40480c <check_led_brd_side_lifetimes+0x74>)
  4047d2:	4798      	blx	r3
  4047d4:	4603      	mov	r3, r0
  4047d6:	2b00      	cmp	r3, #0
  4047d8:	bf0c      	ite	eq
  4047da:	2301      	moveq	r3, #1
  4047dc:	2300      	movne	r3, #0
  4047de:	b2db      	uxtb	r3, r3
  4047e0:	4618      	mov	r0, r3
  4047e2:	4908      	ldr	r1, [pc, #32]	; (404804 <check_led_brd_side_lifetimes+0x6c>)
  4047e4:	687a      	ldr	r2, [r7, #4]
  4047e6:	4613      	mov	r3, r2
  4047e8:	009b      	lsls	r3, r3, #2
  4047ea:	4413      	add	r3, r2
  4047ec:	440b      	add	r3, r1
  4047ee:	4602      	mov	r2, r0
  4047f0:	709a      	strb	r2, [r3, #2]
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  4047f2:	687b      	ldr	r3, [r7, #4]
  4047f4:	3301      	adds	r3, #1
  4047f6:	607b      	str	r3, [r7, #4]
  4047f8:	687b      	ldr	r3, [r7, #4]
  4047fa:	2b07      	cmp	r3, #7
  4047fc:	ddd2      	ble.n	4047a4 <check_led_brd_side_lifetimes+0xc>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
  4047fe:	3708      	adds	r7, #8
  404800:	46bd      	mov	sp, r7
  404802:	bd80      	pop	{r7, pc}
  404804:	204016c8 	.word	0x204016c8
  404808:	20401644 	.word	0x20401644
  40480c:	00404735 	.word	0x00404735

00404810 <adc_process_task>:
extern uint32_t g_afec1_sample_data;


int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
  404810:	b580      	push	{r7, lr}
  404812:	b082      	sub	sp, #8
  404814:	af00      	add	r7, sp, #0
  404816:	4603      	mov	r3, r0
  404818:	71fb      	strb	r3, [r7, #7]
	
	switch(shelfIdx)
  40481a:	79fb      	ldrb	r3, [r7, #7]
  40481c:	2b03      	cmp	r3, #3
  40481e:	f200 8083 	bhi.w	404928 <adc_process_task+0x118>
  404822:	a201      	add	r2, pc, #4	; (adr r2, 404828 <adc_process_task+0x18>)
  404824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404828:	00404839 	.word	0x00404839
  40482c:	00404875 	.word	0x00404875
  404830:	004048b1 	.word	0x004048b1
  404834:	004048ed 	.word	0x004048ed
	{
		case 0:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_9);
  404838:	4840      	ldr	r0, [pc, #256]	; (40493c <adc_process_task+0x12c>)
  40483a:	2109      	movs	r1, #9
  40483c:	4b40      	ldr	r3, [pc, #256]	; (404940 <adc_process_task+0x130>)
  40483e:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  404840:	483e      	ldr	r0, [pc, #248]	; (40493c <adc_process_task+0x12c>)
  404842:	4b40      	ldr	r3, [pc, #256]	; (404944 <adc_process_task+0x134>)
  404844:	4798      	blx	r3
			is_conversion_done = false;
  404846:	4b40      	ldr	r3, [pc, #256]	; (404948 <adc_process_task+0x138>)
  404848:	2200      	movs	r2, #0
  40484a:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  40484c:	bf00      	nop
  40484e:	4b3e      	ldr	r3, [pc, #248]	; (404948 <adc_process_task+0x138>)
  404850:	781b      	ldrb	r3, [r3, #0]
  404852:	f083 0301 	eor.w	r3, r3, #1
  404856:	b2db      	uxtb	r3, r3
  404858:	2b00      	cmp	r3, #0
  40485a:	d1f8      	bne.n	40484e <adc_process_task+0x3e>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  40485c:	79fb      	ldrb	r3, [r7, #7]
  40485e:	4a3b      	ldr	r2, [pc, #236]	; (40494c <adc_process_task+0x13c>)
  404860:	6812      	ldr	r2, [r2, #0]
  404862:	b291      	uxth	r1, r2
  404864:	4a3a      	ldr	r2, [pc, #232]	; (404950 <adc_process_task+0x140>)
  404866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_9);
  40486a:	4834      	ldr	r0, [pc, #208]	; (40493c <adc_process_task+0x12c>)
  40486c:	2109      	movs	r1, #9
  40486e:	4b39      	ldr	r3, [pc, #228]	; (404954 <adc_process_task+0x144>)
  404870:	4798      	blx	r3
			break;
  404872:	e059      	b.n	404928 <adc_process_task+0x118>
		case 1:
			afec_channel_enable(AFEC0, AFEC_CHANNEL_4);
  404874:	4838      	ldr	r0, [pc, #224]	; (404958 <adc_process_task+0x148>)
  404876:	2104      	movs	r1, #4
  404878:	4b31      	ldr	r3, [pc, #196]	; (404940 <adc_process_task+0x130>)
  40487a:	4798      	blx	r3
			afec_start_software_conversion(AFEC0);
  40487c:	4836      	ldr	r0, [pc, #216]	; (404958 <adc_process_task+0x148>)
  40487e:	4b31      	ldr	r3, [pc, #196]	; (404944 <adc_process_task+0x134>)
  404880:	4798      	blx	r3
			is_conversion_done = false;
  404882:	4b31      	ldr	r3, [pc, #196]	; (404948 <adc_process_task+0x138>)
  404884:	2200      	movs	r2, #0
  404886:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404888:	bf00      	nop
  40488a:	4b2f      	ldr	r3, [pc, #188]	; (404948 <adc_process_task+0x138>)
  40488c:	781b      	ldrb	r3, [r3, #0]
  40488e:	f083 0301 	eor.w	r3, r3, #1
  404892:	b2db      	uxtb	r3, r3
  404894:	2b00      	cmp	r3, #0
  404896:	d1f8      	bne.n	40488a <adc_process_task+0x7a>
			bluesense_buf[shelfIdx] = g_afec0_sample_data;
  404898:	79fb      	ldrb	r3, [r7, #7]
  40489a:	4a30      	ldr	r2, [pc, #192]	; (40495c <adc_process_task+0x14c>)
  40489c:	6812      	ldr	r2, [r2, #0]
  40489e:	b291      	uxth	r1, r2
  4048a0:	4a2b      	ldr	r2, [pc, #172]	; (404950 <adc_process_task+0x140>)
  4048a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC0, AFEC_CHANNEL_4);
  4048a6:	482c      	ldr	r0, [pc, #176]	; (404958 <adc_process_task+0x148>)
  4048a8:	2104      	movs	r1, #4
  4048aa:	4b2a      	ldr	r3, [pc, #168]	; (404954 <adc_process_task+0x144>)
  4048ac:	4798      	blx	r3
			break;
  4048ae:	e03b      	b.n	404928 <adc_process_task+0x118>
		case 2:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_4);
  4048b0:	4822      	ldr	r0, [pc, #136]	; (40493c <adc_process_task+0x12c>)
  4048b2:	2104      	movs	r1, #4
  4048b4:	4b22      	ldr	r3, [pc, #136]	; (404940 <adc_process_task+0x130>)
  4048b6:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  4048b8:	4820      	ldr	r0, [pc, #128]	; (40493c <adc_process_task+0x12c>)
  4048ba:	4b22      	ldr	r3, [pc, #136]	; (404944 <adc_process_task+0x134>)
  4048bc:	4798      	blx	r3
			is_conversion_done = false;
  4048be:	4b22      	ldr	r3, [pc, #136]	; (404948 <adc_process_task+0x138>)
  4048c0:	2200      	movs	r2, #0
  4048c2:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  4048c4:	bf00      	nop
  4048c6:	4b20      	ldr	r3, [pc, #128]	; (404948 <adc_process_task+0x138>)
  4048c8:	781b      	ldrb	r3, [r3, #0]
  4048ca:	f083 0301 	eor.w	r3, r3, #1
  4048ce:	b2db      	uxtb	r3, r3
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	d1f8      	bne.n	4048c6 <adc_process_task+0xb6>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  4048d4:	79fb      	ldrb	r3, [r7, #7]
  4048d6:	4a1d      	ldr	r2, [pc, #116]	; (40494c <adc_process_task+0x13c>)
  4048d8:	6812      	ldr	r2, [r2, #0]
  4048da:	b291      	uxth	r1, r2
  4048dc:	4a1c      	ldr	r2, [pc, #112]	; (404950 <adc_process_task+0x140>)
  4048de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_4);
  4048e2:	4816      	ldr	r0, [pc, #88]	; (40493c <adc_process_task+0x12c>)
  4048e4:	2104      	movs	r1, #4
  4048e6:	4b1b      	ldr	r3, [pc, #108]	; (404954 <adc_process_task+0x144>)
  4048e8:	4798      	blx	r3
			break;
  4048ea:	e01d      	b.n	404928 <adc_process_task+0x118>
		case 3:
			afec_channel_enable(AFEC1, AFEC_CHANNEL_5);
  4048ec:	4813      	ldr	r0, [pc, #76]	; (40493c <adc_process_task+0x12c>)
  4048ee:	2105      	movs	r1, #5
  4048f0:	4b13      	ldr	r3, [pc, #76]	; (404940 <adc_process_task+0x130>)
  4048f2:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  4048f4:	4811      	ldr	r0, [pc, #68]	; (40493c <adc_process_task+0x12c>)
  4048f6:	4b13      	ldr	r3, [pc, #76]	; (404944 <adc_process_task+0x134>)
  4048f8:	4798      	blx	r3
			is_conversion_done = false;
  4048fa:	4b13      	ldr	r3, [pc, #76]	; (404948 <adc_process_task+0x138>)
  4048fc:	2200      	movs	r2, #0
  4048fe:	701a      	strb	r2, [r3, #0]
			while (is_conversion_done == false);
  404900:	bf00      	nop
  404902:	4b11      	ldr	r3, [pc, #68]	; (404948 <adc_process_task+0x138>)
  404904:	781b      	ldrb	r3, [r3, #0]
  404906:	f083 0301 	eor.w	r3, r3, #1
  40490a:	b2db      	uxtb	r3, r3
  40490c:	2b00      	cmp	r3, #0
  40490e:	d1f8      	bne.n	404902 <adc_process_task+0xf2>
			bluesense_buf[shelfIdx] = g_afec1_sample_data;
  404910:	79fb      	ldrb	r3, [r7, #7]
  404912:	4a0e      	ldr	r2, [pc, #56]	; (40494c <adc_process_task+0x13c>)
  404914:	6812      	ldr	r2, [r2, #0]
  404916:	b291      	uxth	r1, r2
  404918:	4a0d      	ldr	r2, [pc, #52]	; (404950 <adc_process_task+0x140>)
  40491a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			afec_channel_disable(AFEC1, AFEC_CHANNEL_5);
  40491e:	4807      	ldr	r0, [pc, #28]	; (40493c <adc_process_task+0x12c>)
  404920:	2105      	movs	r1, #5
  404922:	4b0c      	ldr	r3, [pc, #48]	; (404954 <adc_process_task+0x144>)
  404924:	4798      	blx	r3
			break;		
  404926:	bf00      	nop
	}
	
	return bluesense_buf[shelfIdx];
  404928:	79fb      	ldrb	r3, [r7, #7]
  40492a:	4a09      	ldr	r2, [pc, #36]	; (404950 <adc_process_task+0x140>)
  40492c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  404930:	b21b      	sxth	r3, r3
}
  404932:	4618      	mov	r0, r3
  404934:	3708      	adds	r7, #8
  404936:	46bd      	mov	sp, r7
  404938:	bd80      	pop	{r7, pc}
  40493a:	bf00      	nop
  40493c:	40064000 	.word	0x40064000
  404940:	004040e1 	.word	0x004040e1
  404944:	004040c9 	.word	0x004040c9
  404948:	204009b0 	.word	0x204009b0
  40494c:	20400af4 	.word	0x20400af4
  404950:	2040133c 	.word	0x2040133c
  404954:	00404129 	.word	0x00404129
  404958:	4003c000 	.word	0x4003c000
  40495c:	20401330 	.word	0x20401330

00404960 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
  404960:	b590      	push	{r4, r7, lr}
  404962:	b0a1      	sub	sp, #132	; 0x84
  404964:	af02      	add	r7, sp, #8
  404966:	4603      	mov	r3, r0
  404968:	71fb      	strb	r3, [r7, #7]
	uint16_t bluesense[8] = {0,0,0,0,0,0,0,0};
  40496a:	2300      	movs	r3, #0
  40496c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  404970:	2300      	movs	r3, #0
  404972:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  404976:	2300      	movs	r3, #0
  404978:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  40497c:	2300      	movs	r3, #0
  40497e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  404982:	2300      	movs	r3, #0
  404984:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  404988:	2300      	movs	r3, #0
  40498a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  40498e:	2300      	movs	r3, #0
  404990:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  404994:	2300      	movs	r3, #0
  404996:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	unsigned long bluesenseAccumulated = 0;
  40499a:	2300      	movs	r3, #0
  40499c:	677b      	str	r3, [r7, #116]	; 0x74
	unsigned int bluesenseAvg = 0;
  40499e:	2300      	movs	r3, #0
  4049a0:	66bb      	str	r3, [r7, #104]	; 0x68
	
	char str[80];
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
  4049a2:	79fb      	ldrb	r3, [r7, #7]
  4049a4:	4618      	mov	r0, r3
  4049a6:	2101      	movs	r1, #1
  4049a8:	4b37      	ldr	r3, [pc, #220]	; (404a88 <check_shelf_for_devices+0x128>)
  4049aa:	4798      	blx	r3
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
  4049ac:	2064      	movs	r0, #100	; 0x64
  4049ae:	4b37      	ldr	r3, [pc, #220]	; (404a8c <check_shelf_for_devices+0x12c>)
  4049b0:	4798      	blx	r3
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  4049b2:	2300      	movs	r3, #0
  4049b4:	673b      	str	r3, [r7, #112]	; 0x70
  4049b6:	e025      	b.n	404a04 <check_shelf_for_devices+0xa4>
	{
		bluesense[i] = adc_process_task(shelfPosition);
  4049b8:	79fb      	ldrb	r3, [r7, #7]
  4049ba:	4618      	mov	r0, r3
  4049bc:	4b34      	ldr	r3, [pc, #208]	; (404a90 <check_shelf_for_devices+0x130>)
  4049be:	4798      	blx	r3
  4049c0:	4603      	mov	r3, r0
  4049c2:	b29a      	uxth	r2, r3
  4049c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  4049c6:	005b      	lsls	r3, r3, #1
  4049c8:	f107 0178 	add.w	r1, r7, #120	; 0x78
  4049cc:	440b      	add	r3, r1
  4049ce:	f823 2c20 	strh.w	r2, [r3, #-32]
		
		if (bluesense[i] & 0x8000) //don't try to average negative numbers
  4049d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  4049d4:	005b      	lsls	r3, r3, #1
  4049d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
  4049da:	4413      	add	r3, r2
  4049dc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  4049e0:	b29b      	uxth	r3, r3
  4049e2:	b21b      	sxth	r3, r3
  4049e4:	2b00      	cmp	r3, #0
  4049e6:	db0a      	blt.n	4049fe <check_shelf_for_devices+0x9e>
		{
			bluesenseAccumulated += 0;
		}
		else
		{
			bluesenseAccumulated += bluesense[i];
  4049e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  4049ea:	005b      	lsls	r3, r3, #1
  4049ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
  4049f0:	4413      	add	r3, r2
  4049f2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  4049f6:	461a      	mov	r2, r3
  4049f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  4049fa:	4413      	add	r3, r2
  4049fc:	677b      	str	r3, [r7, #116]	; 0x74
	
	mdelay(100); //30may15 was 50ms, trying 100 to see if we can get more consistent
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
  4049fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404a00:	3301      	adds	r3, #1
  404a02:	673b      	str	r3, [r7, #112]	; 0x70
  404a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  404a06:	2b07      	cmp	r3, #7
  404a08:	ddd6      	ble.n	4049b8 <check_shelf_for_devices+0x58>
		{
			bluesenseAccumulated += bluesense[i];
		}
	}
	
	bluesenseAvg = bluesenseAccumulated/8;
  404a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  404a0c:	08db      	lsrs	r3, r3, #3
  404a0e:	66bb      	str	r3, [r7, #104]	; 0x68
	
	led_shelf(shelfPosition, LED_OFF);
  404a10:	79fb      	ldrb	r3, [r7, #7]
  404a12:	4618      	mov	r0, r3
  404a14:	2100      	movs	r1, #0
  404a16:	4b1c      	ldr	r3, [pc, #112]	; (404a88 <check_shelf_for_devices+0x128>)
  404a18:	4798      	blx	r3
	
	memset(str,0x00, 80);
  404a1a:	f107 0308 	add.w	r3, r7, #8
  404a1e:	4618      	mov	r0, r3
  404a20:	2100      	movs	r1, #0
  404a22:	2250      	movs	r2, #80	; 0x50
  404a24:	4b1b      	ldr	r3, [pc, #108]	; (404a94 <check_shelf_for_devices+0x134>)
  404a26:	4798      	blx	r3

	for (int i=0; i<8; i++)
  404a28:	2300      	movs	r3, #0
  404a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  404a2c:	e018      	b.n	404a60 <check_shelf_for_devices+0x100>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
  404a2e:	79fa      	ldrb	r2, [r7, #7]
  404a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404a32:	005b      	lsls	r3, r3, #1
  404a34:	f107 0178 	add.w	r1, r7, #120	; 0x78
  404a38:	440b      	add	r3, r1
  404a3a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
  404a3e:	4619      	mov	r1, r3
  404a40:	f107 0308 	add.w	r3, r7, #8
  404a44:	9100      	str	r1, [sp, #0]
  404a46:	4618      	mov	r0, r3
  404a48:	4913      	ldr	r1, [pc, #76]	; (404a98 <check_shelf_for_devices+0x138>)
  404a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404a4c:	4c13      	ldr	r4, [pc, #76]	; (404a9c <check_shelf_for_devices+0x13c>)
  404a4e:	47a0      	blx	r4
		print_ecdbg(str);
  404a50:	f107 0308 	add.w	r3, r7, #8
  404a54:	4618      	mov	r0, r3
  404a56:	4b12      	ldr	r3, [pc, #72]	; (404aa0 <check_shelf_for_devices+0x140>)
  404a58:	4798      	blx	r3
	
	led_shelf(shelfPosition, LED_OFF);
	
	memset(str,0x00, 80);

	for (int i=0; i<8; i++)
  404a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404a5c:	3301      	adds	r3, #1
  404a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  404a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  404a62:	2b07      	cmp	r3, #7
  404a64:	dde3      	ble.n	404a2e <check_shelf_for_devices+0xce>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
		print_ecdbg(str);
	}

	if ((bluesenseAvg < 0xC00) ||  (bluesenseAvg & 0x8000))//full range for 12 bit number is 0xFFF, but this number is 2's complement meaning it can (and it does) go negative
  404a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  404a6c:	d304      	bcc.n	404a78 <check_shelf_for_devices+0x118>
  404a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  404a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404a74:	2b00      	cmp	r3, #0
  404a76:	d001      	beq.n	404a7c <check_shelf_for_devices+0x11c>
	{
		return DEVICES_PRESENT;
  404a78:	2301      	movs	r3, #1
  404a7a:	e000      	b.n	404a7e <check_shelf_for_devices+0x11e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
  404a7c:	2300      	movs	r3, #0
	}
}
  404a7e:	4618      	mov	r0, r3
  404a80:	377c      	adds	r7, #124	; 0x7c
  404a82:	46bd      	mov	sp, r7
  404a84:	bd90      	pop	{r4, r7, pc}
  404a86:	bf00      	nop
  404a88:	00402a45 	.word	0x00402a45
  404a8c:	00403a49 	.word	0x00403a49
  404a90:	00404811 	.word	0x00404811
  404a94:	00406dc5 	.word	0x00406dc5
  404a98:	0040c74c 	.word	0x0040c74c
  404a9c:	00406fe1 	.word	0x00406fe1
  404aa0:	004026b1 	.word	0x004026b1

00404aa4 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
  404aa4:	b580      	push	{r7, lr}
  404aa6:	b082      	sub	sp, #8
  404aa8:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_SHELVES; i++)
  404aaa:	2300      	movs	r3, #0
  404aac:	607b      	str	r3, [r7, #4]
  404aae:	e02d      	b.n	404b0c <check_shelves_for_devices+0x68>
	{
		if (shelf[i].present)
  404ab0:	4919      	ldr	r1, [pc, #100]	; (404b18 <check_shelves_for_devices+0x74>)
  404ab2:	687a      	ldr	r2, [r7, #4]
  404ab4:	4613      	mov	r3, r2
  404ab6:	009b      	lsls	r3, r3, #2
  404ab8:	4413      	add	r3, r2
  404aba:	440b      	add	r3, r1
  404abc:	791b      	ldrb	r3, [r3, #4]
  404abe:	2b00      	cmp	r3, #0
  404ac0:	d021      	beq.n	404b06 <check_shelves_for_devices+0x62>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);
  404ac2:	687b      	ldr	r3, [r7, #4]
  404ac4:	b2db      	uxtb	r3, r3
  404ac6:	4618      	mov	r0, r3
  404ac8:	4b14      	ldr	r3, [pc, #80]	; (404b1c <check_shelves_for_devices+0x78>)
  404aca:	4798      	blx	r3
  404acc:	4603      	mov	r3, r0
  404ace:	4618      	mov	r0, r3
  404ad0:	4911      	ldr	r1, [pc, #68]	; (404b18 <check_shelves_for_devices+0x74>)
  404ad2:	687a      	ldr	r2, [r7, #4]
  404ad4:	4613      	mov	r3, r2
  404ad6:	009b      	lsls	r3, r3, #2
  404ad8:	4413      	add	r3, r2
  404ada:	440b      	add	r3, r1
  404adc:	4602      	mov	r2, r0
  404ade:	70da      	strb	r2, [r3, #3]
			
			if (shelf[i].devicesPresent)
  404ae0:	490d      	ldr	r1, [pc, #52]	; (404b18 <check_shelves_for_devices+0x74>)
  404ae2:	687a      	ldr	r2, [r7, #4]
  404ae4:	4613      	mov	r3, r2
  404ae6:	009b      	lsls	r3, r3, #2
  404ae8:	4413      	add	r3, r2
  404aea:	440b      	add	r3, r1
  404aec:	78db      	ldrb	r3, [r3, #3]
  404aee:	2b00      	cmp	r3, #0
  404af0:	d009      	beq.n	404b06 <check_shelves_for_devices+0x62>
			{
				print_ecdbg("Devices detected on shelf ");
  404af2:	480b      	ldr	r0, [pc, #44]	; (404b20 <check_shelves_for_devices+0x7c>)
  404af4:	4b0b      	ldr	r3, [pc, #44]	; (404b24 <check_shelves_for_devices+0x80>)
  404af6:	4798      	blx	r3
				print_ecdbg_num(i);
  404af8:	687b      	ldr	r3, [r7, #4]
  404afa:	4618      	mov	r0, r3
  404afc:	4b0a      	ldr	r3, [pc, #40]	; (404b28 <check_shelves_for_devices+0x84>)
  404afe:	4798      	blx	r3
				print_ecdbg("\r\n");
  404b00:	480a      	ldr	r0, [pc, #40]	; (404b2c <check_shelves_for_devices+0x88>)
  404b02:	4b08      	ldr	r3, [pc, #32]	; (404b24 <check_shelves_for_devices+0x80>)
  404b04:	4798      	blx	r3
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
  404b06:	687b      	ldr	r3, [r7, #4]
  404b08:	3301      	adds	r3, #1
  404b0a:	607b      	str	r3, [r7, #4]
  404b0c:	687b      	ldr	r3, [r7, #4]
  404b0e:	2b03      	cmp	r3, #3
  404b10:	ddce      	ble.n	404ab0 <check_shelves_for_devices+0xc>
				print_ecdbg_num(i);
				print_ecdbg("\r\n");
			}
		}
	}
}
  404b12:	3708      	adds	r7, #8
  404b14:	46bd      	mov	sp, r7
  404b16:	bd80      	pop	{r7, pc}
  404b18:	2040168c 	.word	0x2040168c
  404b1c:	00404961 	.word	0x00404961
  404b20:	0040c76c 	.word	0x0040c76c
  404b24:	004026b1 	.word	0x004026b1
  404b28:	00404481 	.word	0x00404481
  404b2c:	0040c6d8 	.word	0x0040c6d8

00404b30 <print_pca9952_errors>:


void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1);
void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1)
{
  404b30:	b580      	push	{r7, lr}
  404b32:	b086      	sub	sp, #24
  404b34:	af00      	add	r7, sp, #0
  404b36:	4603      	mov	r3, r0
  404b38:	71fb      	strb	r3, [r7, #7]
  404b3a:	460b      	mov	r3, r1
  404b3c:	71bb      	strb	r3, [r7, #6]
  404b3e:	4613      	mov	r3, r2
  404b40:	717b      	strb	r3, [r7, #5]
	unsigned char bit;
	
	switch (sideSel)
  404b42:	79fb      	ldrb	r3, [r7, #7]
  404b44:	2b00      	cmp	r3, #0
  404b46:	d03c      	beq.n	404bc2 <print_pca9952_errors+0x92>
  404b48:	2b01      	cmp	r3, #1
  404b4a:	f040 8096 	bne.w	404c7a <print_pca9952_errors+0x14a>
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
  404b4e:	484c      	ldr	r0, [pc, #304]	; (404c80 <print_pca9952_errors+0x150>)
  404b50:	4b4c      	ldr	r3, [pc, #304]	; (404c84 <print_pca9952_errors+0x154>)
  404b52:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  404b54:	2300      	movs	r3, #0
  404b56:	617b      	str	r3, [r7, #20]
  404b58:	e022      	b.n	404ba0 <print_pca9952_errors+0x70>
			{
				bit = (1 << i);
  404b5a:	2201      	movs	r2, #1
  404b5c:	697b      	ldr	r3, [r7, #20]
  404b5e:	fa02 f303 	lsl.w	r3, r2, r3
  404b62:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  404b64:	7afa      	ldrb	r2, [r7, #11]
  404b66:	79bb      	ldrb	r3, [r7, #6]
  404b68:	4013      	ands	r3, r2
  404b6a:	b2db      	uxtb	r3, r3
  404b6c:	2b00      	cmp	r3, #0
  404b6e:	d014      	beq.n	404b9a <print_pca9952_errors+0x6a>
				{
					print_ecdbg_num(i);
  404b70:	697b      	ldr	r3, [r7, #20]
  404b72:	4618      	mov	r0, r3
  404b74:	4b44      	ldr	r3, [pc, #272]	; (404c88 <print_pca9952_errors+0x158>)
  404b76:	4798      	blx	r3
					print_ecdbg(" ");
  404b78:	4844      	ldr	r0, [pc, #272]	; (404c8c <print_pca9952_errors+0x15c>)
  404b7a:	4b42      	ldr	r3, [pc, #264]	; (404c84 <print_pca9952_errors+0x154>)
  404b7c:	4798      	blx	r3
					sysErr.topdrive |= BIT(i); //SE_FAIL
  404b7e:	4b44      	ldr	r3, [pc, #272]	; (404c90 <print_pca9952_errors+0x160>)
  404b80:	781b      	ldrb	r3, [r3, #0]
  404b82:	b2d9      	uxtb	r1, r3
  404b84:	2201      	movs	r2, #1
  404b86:	697b      	ldr	r3, [r7, #20]
  404b88:	fa02 f303 	lsl.w	r3, r2, r3
  404b8c:	b2db      	uxtb	r3, r3
  404b8e:	460a      	mov	r2, r1
  404b90:	4313      	orrs	r3, r2
  404b92:	b2db      	uxtb	r3, r3
  404b94:	b2da      	uxtb	r2, r3
  404b96:	4b3e      	ldr	r3, [pc, #248]	; (404c90 <print_pca9952_errors+0x160>)
  404b98:	701a      	strb	r2, [r3, #0]
	switch (sideSel)
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
			
			for (int i=0; i<8; i++)
  404b9a:	697b      	ldr	r3, [r7, #20]
  404b9c:	3301      	adds	r3, #1
  404b9e:	617b      	str	r3, [r7, #20]
  404ba0:	697b      	ldr	r3, [r7, #20]
  404ba2:	2b07      	cmp	r3, #7
  404ba4:	ddd9      	ble.n	404b5a <print_pca9952_errors+0x2a>
					sysErr.topdrive |= BIT(i); //SE_FAIL
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  404ba6:	483b      	ldr	r0, [pc, #236]	; (404c94 <print_pca9952_errors+0x164>)
  404ba8:	4b36      	ldr	r3, [pc, #216]	; (404c84 <print_pca9952_errors+0x154>)
  404baa:	4798      	blx	r3
			
			if (eflag1 != 0)
  404bac:	797b      	ldrb	r3, [r7, #5]
  404bae:	2b00      	cmp	r3, #0
  404bb0:	d006      	beq.n	404bc0 <print_pca9952_errors+0x90>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
  404bb2:	4839      	ldr	r0, [pc, #228]	; (404c98 <print_pca9952_errors+0x168>)
  404bb4:	4b33      	ldr	r3, [pc, #204]	; (404c84 <print_pca9952_errors+0x154>)
  404bb6:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  404bb8:	4b38      	ldr	r3, [pc, #224]	; (404c9c <print_pca9952_errors+0x16c>)
  404bba:	2207      	movs	r2, #7
  404bbc:	701a      	strb	r2, [r3, #0]
			}
			
			break;
  404bbe:	e05c      	b.n	404c7a <print_pca9952_errors+0x14a>
  404bc0:	e05b      	b.n	404c7a <print_pca9952_errors+0x14a>

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
  404bc2:	4837      	ldr	r0, [pc, #220]	; (404ca0 <print_pca9952_errors+0x170>)
  404bc4:	4b2f      	ldr	r3, [pc, #188]	; (404c84 <print_pca9952_errors+0x154>)
  404bc6:	4798      	blx	r3
			
			for (int i=0; i<8; i++)
  404bc8:	2300      	movs	r3, #0
  404bca:	613b      	str	r3, [r7, #16]
  404bcc:	e01d      	b.n	404c0a <print_pca9952_errors+0xda>
			{
				bit = (1 << i);
  404bce:	2201      	movs	r2, #1
  404bd0:	693b      	ldr	r3, [r7, #16]
  404bd2:	fa02 f303 	lsl.w	r3, r2, r3
  404bd6:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag0)
  404bd8:	7afa      	ldrb	r2, [r7, #11]
  404bda:	79bb      	ldrb	r3, [r7, #6]
  404bdc:	4013      	ands	r3, r2
  404bde:	b2db      	uxtb	r3, r3
  404be0:	2b00      	cmp	r3, #0
  404be2:	d00f      	beq.n	404c04 <print_pca9952_errors+0xd4>
				{
					print_ecdbg_num(i);
  404be4:	693b      	ldr	r3, [r7, #16]
  404be6:	4618      	mov	r0, r3
  404be8:	4b27      	ldr	r3, [pc, #156]	; (404c88 <print_pca9952_errors+0x158>)
  404bea:	4798      	blx	r3
					print_ecdbg(" ");
  404bec:	4827      	ldr	r0, [pc, #156]	; (404c8c <print_pca9952_errors+0x15c>)
  404bee:	4b25      	ldr	r3, [pc, #148]	; (404c84 <print_pca9952_errors+0x154>)
  404bf0:	4798      	blx	r3
					sysErr.botdrive |= BIT(i); //SE_FAIL;
  404bf2:	4b27      	ldr	r3, [pc, #156]	; (404c90 <print_pca9952_errors+0x160>)
  404bf4:	685b      	ldr	r3, [r3, #4]
  404bf6:	2101      	movs	r1, #1
  404bf8:	693a      	ldr	r2, [r7, #16]
  404bfa:	fa01 f202 	lsl.w	r2, r1, r2
  404bfe:	4313      	orrs	r3, r2
  404c00:	4a23      	ldr	r2, [pc, #140]	; (404c90 <print_pca9952_errors+0x160>)
  404c02:	6053      	str	r3, [r2, #4]
			break;

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
			
			for (int i=0; i<8; i++)
  404c04:	693b      	ldr	r3, [r7, #16]
  404c06:	3301      	adds	r3, #1
  404c08:	613b      	str	r3, [r7, #16]
  404c0a:	693b      	ldr	r3, [r7, #16]
  404c0c:	2b07      	cmp	r3, #7
  404c0e:	ddde      	ble.n	404bce <print_pca9952_errors+0x9e>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  404c10:	2300      	movs	r3, #0
  404c12:	60fb      	str	r3, [r7, #12]
  404c14:	e01f      	b.n	404c56 <print_pca9952_errors+0x126>
			{
				bit = (1 << i);
  404c16:	2201      	movs	r2, #1
  404c18:	68fb      	ldr	r3, [r7, #12]
  404c1a:	fa02 f303 	lsl.w	r3, r2, r3
  404c1e:	72fb      	strb	r3, [r7, #11]
				if (bit & eflag1)
  404c20:	7afa      	ldrb	r2, [r7, #11]
  404c22:	797b      	ldrb	r3, [r7, #5]
  404c24:	4013      	ands	r3, r2
  404c26:	b2db      	uxtb	r3, r3
  404c28:	2b00      	cmp	r3, #0
  404c2a:	d011      	beq.n	404c50 <print_pca9952_errors+0x120>
				{
					print_ecdbg_num((i+8));
  404c2c:	68fb      	ldr	r3, [r7, #12]
  404c2e:	3308      	adds	r3, #8
  404c30:	4618      	mov	r0, r3
  404c32:	4b15      	ldr	r3, [pc, #84]	; (404c88 <print_pca9952_errors+0x158>)
  404c34:	4798      	blx	r3
					print_ecdbg(" ");
  404c36:	4815      	ldr	r0, [pc, #84]	; (404c8c <print_pca9952_errors+0x15c>)
  404c38:	4b12      	ldr	r3, [pc, #72]	; (404c84 <print_pca9952_errors+0x154>)
  404c3a:	4798      	blx	r3
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
  404c3c:	4b14      	ldr	r3, [pc, #80]	; (404c90 <print_pca9952_errors+0x160>)
  404c3e:	685b      	ldr	r3, [r3, #4]
  404c40:	68fa      	ldr	r2, [r7, #12]
  404c42:	3208      	adds	r2, #8
  404c44:	2101      	movs	r1, #1
  404c46:	fa01 f202 	lsl.w	r2, r1, r2
  404c4a:	4313      	orrs	r3, r2
  404c4c:	4a10      	ldr	r2, [pc, #64]	; (404c90 <print_pca9952_errors+0x160>)
  404c4e:	6053      	str	r3, [r2, #4]
					sysErr.botdrive |= BIT(i); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
  404c50:	68fb      	ldr	r3, [r7, #12]
  404c52:	3301      	adds	r3, #1
  404c54:	60fb      	str	r3, [r7, #12]
  404c56:	68fb      	ldr	r3, [r7, #12]
  404c58:	2b03      	cmp	r3, #3
  404c5a:	dddc      	ble.n	404c16 <print_pca9952_errors+0xe6>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
  404c5c:	480d      	ldr	r0, [pc, #52]	; (404c94 <print_pca9952_errors+0x164>)
  404c5e:	4b09      	ldr	r3, [pc, #36]	; (404c84 <print_pca9952_errors+0x154>)
  404c60:	4798      	blx	r3
			
			if ((eflag1 & 0xF0) != 0)
  404c62:	797b      	ldrb	r3, [r7, #5]
  404c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  404c68:	2b00      	cmp	r3, #0
  404c6a:	d005      	beq.n	404c78 <print_pca9952_errors+0x148>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
  404c6c:	480d      	ldr	r0, [pc, #52]	; (404ca4 <print_pca9952_errors+0x174>)
  404c6e:	4b05      	ldr	r3, [pc, #20]	; (404c84 <print_pca9952_errors+0x154>)
  404c70:	4798      	blx	r3
				electroclaveState = STATE_CHASSIS_ERROR;
  404c72:	4b0a      	ldr	r3, [pc, #40]	; (404c9c <print_pca9952_errors+0x16c>)
  404c74:	2207      	movs	r2, #7
  404c76:	701a      	strb	r2, [r3, #0]
			}
			break;
  404c78:	bf00      	nop
	}
}
  404c7a:	3718      	adds	r7, #24
  404c7c:	46bd      	mov	sp, r7
  404c7e:	bd80      	pop	{r7, pc}
  404c80:	0040c788 	.word	0x0040c788
  404c84:	004026b1 	.word	0x004026b1
  404c88:	00404481 	.word	0x00404481
  404c8c:	0040c7a8 	.word	0x0040c7a8
  404c90:	204016b4 	.word	0x204016b4
  404c94:	0040c6d8 	.word	0x0040c6d8
  404c98:	0040c7ac 	.word	0x0040c7ac
  404c9c:	204009b9 	.word	0x204009b9
  404ca0:	0040c7e8 	.word	0x0040c7e8
  404ca4:	0040c808 	.word	0x0040c808

00404ca8 <test_led_driver_channels>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void test_led_driver_channels(void);
void test_led_driver_channels(void)
{
  404ca8:	b580      	push	{r7, lr}
  404caa:	b086      	sub	sp, #24
  404cac:	af00      	add	r7, sp, #0
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
  404cae:	2300      	movs	r3, #0
  404cb0:	75fb      	strb	r3, [r7, #23]
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  404cb2:	2300      	movs	r3, #0
  404cb4:	613b      	str	r3, [r7, #16]
  404cb6:	e00e      	b.n	404cd6 <test_led_driver_channels+0x2e>
	{
		if (shelf[i].present)
  404cb8:	496a      	ldr	r1, [pc, #424]	; (404e64 <test_led_driver_channels+0x1bc>)
  404cba:	693a      	ldr	r2, [r7, #16]
  404cbc:	4613      	mov	r3, r2
  404cbe:	009b      	lsls	r3, r3, #2
  404cc0:	4413      	add	r3, r2
  404cc2:	440b      	add	r3, r1
  404cc4:	791b      	ldrb	r3, [r3, #4]
  404cc6:	2b00      	cmp	r3, #0
  404cc8:	d002      	beq.n	404cd0 <test_led_driver_channels+0x28>
		{
			numShelvesPresent++;
  404cca:	7dfb      	ldrb	r3, [r7, #23]
  404ccc:	3301      	adds	r3, #1
  404cce:	75fb      	strb	r3, [r7, #23]
void test_led_driver_channels(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	
	for (int i=0; i<NUM_SHELVES; i++)
  404cd0:	693b      	ldr	r3, [r7, #16]
  404cd2:	3301      	adds	r3, #1
  404cd4:	613b      	str	r3, [r7, #16]
  404cd6:	693b      	ldr	r3, [r7, #16]
  404cd8:	2b03      	cmp	r3, #3
  404cda:	dded      	ble.n	404cb8 <test_led_driver_channels+0x10>
		{
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
  404cdc:	7dfb      	ldrb	r3, [r7, #23]
  404cde:	2b00      	cmp	r3, #0
  404ce0:	f000 80ad 	beq.w	404e3e <test_led_driver_channels+0x196>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  404ce4:	2000      	movs	r0, #0
  404ce6:	2143      	movs	r1, #67	; 0x43
  404ce8:	22c8      	movs	r2, #200	; 0xc8
  404cea:	4b5f      	ldr	r3, [pc, #380]	; (404e68 <test_led_driver_channels+0x1c0>)
  404cec:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
  404cee:	2001      	movs	r0, #1
  404cf0:	2143      	movs	r1, #67	; 0x43
  404cf2:	22c8      	movs	r2, #200	; 0xc8
  404cf4:	4b5c      	ldr	r3, [pc, #368]	; (404e68 <test_led_driver_channels+0x1c0>)
  404cf6:	4798      	blx	r3

		for (int i=0; i<NUM_SHELVES; i++)
  404cf8:	2300      	movs	r3, #0
  404cfa:	60fb      	str	r3, [r7, #12]
  404cfc:	e011      	b.n	404d22 <test_led_driver_channels+0x7a>
		{
			if (shelf[i].present)
  404cfe:	4959      	ldr	r1, [pc, #356]	; (404e64 <test_led_driver_channels+0x1bc>)
  404d00:	68fa      	ldr	r2, [r7, #12]
  404d02:	4613      	mov	r3, r2
  404d04:	009b      	lsls	r3, r3, #2
  404d06:	4413      	add	r3, r2
  404d08:	440b      	add	r3, r1
  404d0a:	791b      	ldrb	r3, [r3, #4]
  404d0c:	2b00      	cmp	r3, #0
  404d0e:	d005      	beq.n	404d1c <test_led_driver_channels+0x74>
			{
				led_shelf(i, LED_ON);
  404d10:	68fb      	ldr	r3, [r7, #12]
  404d12:	b2db      	uxtb	r3, r3
  404d14:	4618      	mov	r0, r3
  404d16:	2101      	movs	r1, #1
  404d18:	4b54      	ldr	r3, [pc, #336]	; (404e6c <test_led_driver_channels+0x1c4>)
  404d1a:	4798      	blx	r3
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
  404d1c:	68fb      	ldr	r3, [r7, #12]
  404d1e:	3301      	adds	r3, #1
  404d20:	60fb      	str	r3, [r7, #12]
  404d22:	68fb      	ldr	r3, [r7, #12]
  404d24:	2b03      	cmp	r3, #3
  404d26:	ddea      	ble.n	404cfe <test_led_driver_channels+0x56>
			{
				led_shelf(i, LED_ON);
			}
		}
		
		udelay(100); //maybe need this while testing LED boards with resistors in place of real LEDs 31july2015
  404d28:	2064      	movs	r0, #100	; 0x64
  404d2a:	4b51      	ldr	r3, [pc, #324]	; (404e70 <test_led_driver_channels+0x1c8>)
  404d2c:	4798      	blx	r3

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
  404d2e:	2000      	movs	r0, #0
  404d30:	2101      	movs	r1, #1
  404d32:	2240      	movs	r2, #64	; 0x40
  404d34:	4b4c      	ldr	r3, [pc, #304]	; (404e68 <test_led_driver_channels+0x1c0>)
  404d36:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
  404d38:	2001      	movs	r0, #1
  404d3a:	2101      	movs	r1, #1
  404d3c:	2240      	movs	r2, #64	; 0x40
  404d3e:	4b4a      	ldr	r3, [pc, #296]	; (404e68 <test_led_driver_channels+0x1c0>)
  404d40:	4798      	blx	r3
		
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
  404d42:	2000      	movs	r0, #0
  404d44:	2101      	movs	r1, #1
  404d46:	4b4b      	ldr	r3, [pc, #300]	; (404e74 <test_led_driver_channels+0x1cc>)
  404d48:	4798      	blx	r3
  404d4a:	4603      	mov	r3, r0
  404d4c:	71fb      	strb	r3, [r7, #7]
			
			if ((tmp1 & 0x40) == 0)
  404d4e:	79fb      	ldrb	r3, [r7, #7]
  404d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404d54:	2b00      	cmp	r3, #0
  404d56:	d125      	bne.n	404da4 <test_led_driver_channels+0xfc>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
  404d58:	2000      	movs	r0, #0
  404d5a:	2144      	movs	r1, #68	; 0x44
  404d5c:	4b45      	ldr	r3, [pc, #276]	; (404e74 <test_led_driver_channels+0x1cc>)
  404d5e:	4798      	blx	r3
  404d60:	4603      	mov	r3, r0
  404d62:	461a      	mov	r2, r3
  404d64:	4b44      	ldr	r3, [pc, #272]	; (404e78 <test_led_driver_channels+0x1d0>)
  404d66:	701a      	strb	r2, [r3, #0]
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
  404d68:	2000      	movs	r0, #0
  404d6a:	2145      	movs	r1, #69	; 0x45
  404d6c:	4b41      	ldr	r3, [pc, #260]	; (404e74 <test_led_driver_channels+0x1cc>)
  404d6e:	4798      	blx	r3
  404d70:	4603      	mov	r3, r0
  404d72:	461a      	mov	r2, r3
  404d74:	4b41      	ldr	r3, [pc, #260]	; (404e7c <test_led_driver_channels+0x1d4>)
  404d76:	701a      	strb	r2, [r3, #0]
				
				if ((topEflag0 != 0) || (topEflag1 != 0))
  404d78:	4b3f      	ldr	r3, [pc, #252]	; (404e78 <test_led_driver_channels+0x1d0>)
  404d7a:	781b      	ldrb	r3, [r3, #0]
  404d7c:	2b00      	cmp	r3, #0
  404d7e:	d103      	bne.n	404d88 <test_led_driver_channels+0xe0>
  404d80:	4b3e      	ldr	r3, [pc, #248]	; (404e7c <test_led_driver_channels+0x1d4>)
  404d82:	781b      	ldrb	r3, [r3, #0]
  404d84:	2b00      	cmp	r3, #0
  404d86:	d00c      	beq.n	404da2 <test_led_driver_channels+0xfa>
				{
					if (!firstTimeThroughPCA9952)
  404d88:	4b3d      	ldr	r3, [pc, #244]	; (404e80 <test_led_driver_channels+0x1d8>)
  404d8a:	781b      	ldrb	r3, [r3, #0]
  404d8c:	2b00      	cmp	r3, #0
  404d8e:	d108      	bne.n	404da2 <test_led_driver_channels+0xfa>
					{
						print_pca9952_errors(TOP, topEflag0, topEflag1);
  404d90:	4b39      	ldr	r3, [pc, #228]	; (404e78 <test_led_driver_channels+0x1d0>)
  404d92:	781a      	ldrb	r2, [r3, #0]
  404d94:	4b39      	ldr	r3, [pc, #228]	; (404e7c <test_led_driver_channels+0x1d4>)
  404d96:	781b      	ldrb	r3, [r3, #0]
  404d98:	2001      	movs	r0, #1
  404d9a:	4611      	mov	r1, r2
  404d9c:	461a      	mov	r2, r3
  404d9e:	4b39      	ldr	r3, [pc, #228]	; (404e84 <test_led_driver_channels+0x1dc>)
  404da0:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_TOP strings is complete
  404da2:	e000      	b.n	404da6 <test_led_driver_channels+0xfe>
			}
			
		}
  404da4:	e7cd      	b.n	404d42 <test_led_driver_channels+0x9a>
		
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
  404da6:	2001      	movs	r0, #1
  404da8:	2101      	movs	r1, #1
  404daa:	4b32      	ldr	r3, [pc, #200]	; (404e74 <test_led_driver_channels+0x1cc>)
  404dac:	4798      	blx	r3
  404dae:	4603      	mov	r3, r0
  404db0:	71bb      	strb	r3, [r7, #6]
			
			if ((tmp2 & 0x40) == 0)
  404db2:	79bb      	ldrb	r3, [r7, #6]
  404db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404db8:	2b00      	cmp	r3, #0
  404dba:	d126      	bne.n	404e0a <test_led_driver_channels+0x162>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
  404dbc:	2001      	movs	r0, #1
  404dbe:	2144      	movs	r1, #68	; 0x44
  404dc0:	4b2c      	ldr	r3, [pc, #176]	; (404e74 <test_led_driver_channels+0x1cc>)
  404dc2:	4798      	blx	r3
  404dc4:	4603      	mov	r3, r0
  404dc6:	461a      	mov	r2, r3
  404dc8:	4b2f      	ldr	r3, [pc, #188]	; (404e88 <test_led_driver_channels+0x1e0>)
  404dca:	701a      	strb	r2, [r3, #0]
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
  404dcc:	2001      	movs	r0, #1
  404dce:	2145      	movs	r1, #69	; 0x45
  404dd0:	4b28      	ldr	r3, [pc, #160]	; (404e74 <test_led_driver_channels+0x1cc>)
  404dd2:	4798      	blx	r3
  404dd4:	4603      	mov	r3, r0
  404dd6:	461a      	mov	r2, r3
  404dd8:	4b2c      	ldr	r3, [pc, #176]	; (404e8c <test_led_driver_channels+0x1e4>)
  404dda:	701a      	strb	r2, [r3, #0]
				
				if ((botEflag0 != 0) || (botEflag1 != 0))
  404ddc:	4b2a      	ldr	r3, [pc, #168]	; (404e88 <test_led_driver_channels+0x1e0>)
  404dde:	781b      	ldrb	r3, [r3, #0]
  404de0:	2b00      	cmp	r3, #0
  404de2:	d103      	bne.n	404dec <test_led_driver_channels+0x144>
  404de4:	4b29      	ldr	r3, [pc, #164]	; (404e8c <test_led_driver_channels+0x1e4>)
  404de6:	781b      	ldrb	r3, [r3, #0]
  404de8:	2b00      	cmp	r3, #0
  404dea:	d00d      	beq.n	404e08 <test_led_driver_channels+0x160>
				{
					if (!firstTimeThroughPCA9952)
  404dec:	4b24      	ldr	r3, [pc, #144]	; (404e80 <test_led_driver_channels+0x1d8>)
  404dee:	781b      	ldrb	r3, [r3, #0]
  404df0:	2b00      	cmp	r3, #0
  404df2:	d109      	bne.n	404e08 <test_led_driver_channels+0x160>
					{
						print_pca9952_errors(BOTTOM, botEflag0, botEflag1);
  404df4:	4b24      	ldr	r3, [pc, #144]	; (404e88 <test_led_driver_channels+0x1e0>)
  404df6:	781a      	ldrb	r2, [r3, #0]
  404df8:	4b24      	ldr	r3, [pc, #144]	; (404e8c <test_led_driver_channels+0x1e4>)
  404dfa:	781b      	ldrb	r3, [r3, #0]
  404dfc:	2000      	movs	r0, #0
  404dfe:	4611      	mov	r1, r2
  404e00:	461a      	mov	r2, r3
  404e02:	4b20      	ldr	r3, [pc, #128]	; (404e84 <test_led_driver_channels+0x1dc>)
  404e04:	4798      	blx	r3
					}
				}
				
				break; //fault test for LED_BOTTOM strings is complete
  404e06:	e001      	b.n	404e0c <test_led_driver_channels+0x164>
  404e08:	e000      	b.n	404e0c <test_led_driver_channels+0x164>
			}
			
		}
  404e0a:	e7cc      	b.n	404da6 <test_led_driver_channels+0xfe>
		
		for (int i=0; i<NUM_SHELVES; i++)
  404e0c:	2300      	movs	r3, #0
  404e0e:	60bb      	str	r3, [r7, #8]
  404e10:	e008      	b.n	404e24 <test_led_driver_channels+0x17c>
		{
			led_shelf(i, LED_OFF);
  404e12:	68bb      	ldr	r3, [r7, #8]
  404e14:	b2db      	uxtb	r3, r3
  404e16:	4618      	mov	r0, r3
  404e18:	2100      	movs	r1, #0
  404e1a:	4b14      	ldr	r3, [pc, #80]	; (404e6c <test_led_driver_channels+0x1c4>)
  404e1c:	4798      	blx	r3
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
  404e1e:	68bb      	ldr	r3, [r7, #8]
  404e20:	3301      	adds	r3, #1
  404e22:	60bb      	str	r3, [r7, #8]
  404e24:	68bb      	ldr	r3, [r7, #8]
  404e26:	2b03      	cmp	r3, #3
  404e28:	ddf3      	ble.n	404e12 <test_led_driver_channels+0x16a>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  404e2a:	2000      	movs	r0, #0
  404e2c:	2143      	movs	r1, #67	; 0x43
  404e2e:	22c8      	movs	r2, #200	; 0xc8
  404e30:	4b0d      	ldr	r3, [pc, #52]	; (404e68 <test_led_driver_channels+0x1c0>)
  404e32:	4798      	blx	r3
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
  404e34:	2001      	movs	r0, #1
  404e36:	2143      	movs	r1, #67	; 0x43
  404e38:	22c8      	movs	r2, #200	; 0xc8
  404e3a:	4b0b      	ldr	r3, [pc, #44]	; (404e68 <test_led_driver_channels+0x1c0>)
  404e3c:	4798      	blx	r3
	}
	
	sysErr.topdrive = topEflag0;
  404e3e:	4b0e      	ldr	r3, [pc, #56]	; (404e78 <test_led_driver_channels+0x1d0>)
  404e40:	781a      	ldrb	r2, [r3, #0]
  404e42:	4b13      	ldr	r3, [pc, #76]	; (404e90 <test_led_driver_channels+0x1e8>)
  404e44:	701a      	strb	r2, [r3, #0]
	sysErr.botdrive = (botEflag1 << 8) | botEflag0;
  404e46:	4b11      	ldr	r3, [pc, #68]	; (404e8c <test_led_driver_channels+0x1e4>)
  404e48:	781b      	ldrb	r3, [r3, #0]
  404e4a:	021b      	lsls	r3, r3, #8
  404e4c:	4a0e      	ldr	r2, [pc, #56]	; (404e88 <test_led_driver_channels+0x1e0>)
  404e4e:	7812      	ldrb	r2, [r2, #0]
  404e50:	4313      	orrs	r3, r2
  404e52:	461a      	mov	r2, r3
  404e54:	4b0e      	ldr	r3, [pc, #56]	; (404e90 <test_led_driver_channels+0x1e8>)
  404e56:	605a      	str	r2, [r3, #4]
	firstTimeThroughPCA9952 = 0;
  404e58:	4b09      	ldr	r3, [pc, #36]	; (404e80 <test_led_driver_channels+0x1d8>)
  404e5a:	2200      	movs	r2, #0
  404e5c:	701a      	strb	r2, [r3, #0]
}
  404e5e:	3718      	adds	r7, #24
  404e60:	46bd      	mov	sp, r7
  404e62:	bd80      	pop	{r7, pc}
  404e64:	2040168c 	.word	0x2040168c
  404e68:	004026d9 	.word	0x004026d9
  404e6c:	00402a45 	.word	0x00402a45
  404e70:	00402cbd 	.word	0x00402cbd
  404e74:	00402749 	.word	0x00402749
  404e78:	204009cd 	.word	0x204009cd
  404e7c:	204009ce 	.word	0x204009ce
  404e80:	20400015 	.word	0x20400015
  404e84:	00404b31 	.word	0x00404b31
  404e88:	204009cf 	.word	0x204009cf
  404e8c:	204009d0 	.word	0x204009d0
  404e90:	204016b4 	.word	0x204016b4

00404e94 <set_shelves_active_inactive>:

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
  404e94:	b580      	push	{r7, lr}
  404e96:	b082      	sub	sp, #8
  404e98:	af00      	add	r7, sp, #0

	test_led_driver_channels();
  404e9a:	4b53      	ldr	r3, [pc, #332]	; (404fe8 <set_shelves_active_inactive+0x154>)
  404e9c:	4798      	blx	r3
	
	numActiveShelves = 0;
  404e9e:	4b53      	ldr	r3, [pc, #332]	; (404fec <set_shelves_active_inactive+0x158>)
  404ea0:	2200      	movs	r2, #0
  404ea2:	701a      	strb	r2, [r3, #0]
	numPresentShelves = 0;
  404ea4:	4b52      	ldr	r3, [pc, #328]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404ea6:	2200      	movs	r2, #0
  404ea8:	701a      	strb	r2, [r3, #0]
	
	for (int i=0; i<NUM_SHELVES; i++)
  404eaa:	2300      	movs	r3, #0
  404eac:	607b      	str	r3, [r7, #4]
  404eae:	e00a      	b.n	404ec6 <set_shelves_active_inactive+0x32>
	{
		shelf[i].active = SHELF_INACTIVE;
  404eb0:	4950      	ldr	r1, [pc, #320]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404eb2:	687a      	ldr	r2, [r7, #4]
  404eb4:	4613      	mov	r3, r2
  404eb6:	009b      	lsls	r3, r3, #2
  404eb8:	4413      	add	r3, r2
  404eba:	440b      	add	r3, r1
  404ebc:	2200      	movs	r2, #0
  404ebe:	701a      	strb	r2, [r3, #0]
	test_led_driver_channels();
	
	numActiveShelves = 0;
	numPresentShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
  404ec0:	687b      	ldr	r3, [r7, #4]
  404ec2:	3301      	adds	r3, #1
  404ec4:	607b      	str	r3, [r7, #4]
  404ec6:	687b      	ldr	r3, [r7, #4]
  404ec8:	2b03      	cmp	r3, #3
  404eca:	ddf1      	ble.n	404eb0 <set_shelves_active_inactive+0x1c>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  404ecc:	4b49      	ldr	r3, [pc, #292]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404ece:	791b      	ldrb	r3, [r3, #4]
  404ed0:	2b00      	cmp	r3, #0
  404ed2:	d01d      	beq.n	404f10 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  404ed4:	4b48      	ldr	r3, [pc, #288]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404ed6:	789b      	ldrb	r3, [r3, #2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
  404ed8:	2b00      	cmp	r3, #0
  404eda:	d119      	bne.n	404f10 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
  404edc:	4b46      	ldr	r3, [pc, #280]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404ede:	79db      	ldrb	r3, [r3, #7]
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
  404ee0:	2b00      	cmp	r3, #0
  404ee2:	d115      	bne.n	404f10 <set_shelves_active_inactive+0x7c>
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  404ee4:	4b42      	ldr	r3, [pc, #264]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404ee6:	781b      	ldrb	r3, [r3, #0]
  404ee8:	3301      	adds	r3, #1
  404eea:	b2da      	uxtb	r2, r3
  404eec:	4b40      	ldr	r3, [pc, #256]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404eee:	701a      	strb	r2, [r3, #0]
		
		if (shelf[0].devicesPresent)
  404ef0:	4b40      	ldr	r3, [pc, #256]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404ef2:	78db      	ldrb	r3, [r3, #3]
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d00b      	beq.n	404f10 <set_shelves_active_inactive+0x7c>
		{
			shelf[0].active = SHELF_ACTIVE;
  404ef8:	4b3e      	ldr	r3, [pc, #248]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404efa:	2201      	movs	r2, #1
  404efc:	701a      	strb	r2, [r3, #0]
			numActiveShelves++;
  404efe:	4b3b      	ldr	r3, [pc, #236]	; (404fec <set_shelves_active_inactive+0x158>)
  404f00:	781b      	ldrb	r3, [r3, #0]
  404f02:	3301      	adds	r3, #1
  404f04:	b2da      	uxtb	r2, r3
  404f06:	4b39      	ldr	r3, [pc, #228]	; (404fec <set_shelves_active_inactive+0x158>)
  404f08:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 0 active\r\n");
  404f0a:	483c      	ldr	r0, [pc, #240]	; (404ffc <set_shelves_active_inactive+0x168>)
  404f0c:	4b3c      	ldr	r3, [pc, #240]	; (405000 <set_shelves_active_inactive+0x16c>)
  404f0e:	4798      	blx	r3
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  404f10:	4b38      	ldr	r3, [pc, #224]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f12:	7a5b      	ldrb	r3, [r3, #9]
  404f14:	2b00      	cmp	r3, #0
  404f16:	d01d      	beq.n	404f54 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  404f18:	4b37      	ldr	r3, [pc, #220]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404f1a:	7b1b      	ldrb	r3, [r3, #12]
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
  404f1c:	2b00      	cmp	r3, #0
  404f1e:	d119      	bne.n	404f54 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
  404f20:	4b35      	ldr	r3, [pc, #212]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404f22:	7c5b      	ldrb	r3, [r3, #17]
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
  404f24:	2b00      	cmp	r3, #0
  404f26:	d115      	bne.n	404f54 <set_shelves_active_inactive+0xc0>
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  404f28:	4b31      	ldr	r3, [pc, #196]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404f2a:	781b      	ldrb	r3, [r3, #0]
  404f2c:	3301      	adds	r3, #1
  404f2e:	b2da      	uxtb	r2, r3
  404f30:	4b2f      	ldr	r3, [pc, #188]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404f32:	701a      	strb	r2, [r3, #0]
		
		if (shelf[1].devicesPresent)
  404f34:	4b2f      	ldr	r3, [pc, #188]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f36:	7a1b      	ldrb	r3, [r3, #8]
  404f38:	2b00      	cmp	r3, #0
  404f3a:	d00b      	beq.n	404f54 <set_shelves_active_inactive+0xc0>
		{
			shelf[1].active = SHELF_ACTIVE;
  404f3c:	4b2d      	ldr	r3, [pc, #180]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f3e:	2201      	movs	r2, #1
  404f40:	715a      	strb	r2, [r3, #5]
			numActiveShelves++;
  404f42:	4b2a      	ldr	r3, [pc, #168]	; (404fec <set_shelves_active_inactive+0x158>)
  404f44:	781b      	ldrb	r3, [r3, #0]
  404f46:	3301      	adds	r3, #1
  404f48:	b2da      	uxtb	r2, r3
  404f4a:	4b28      	ldr	r3, [pc, #160]	; (404fec <set_shelves_active_inactive+0x158>)
  404f4c:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 1 active\r\n");
  404f4e:	482d      	ldr	r0, [pc, #180]	; (405004 <set_shelves_active_inactive+0x170>)
  404f50:	4b2b      	ldr	r3, [pc, #172]	; (405000 <set_shelves_active_inactive+0x16c>)
  404f52:	4798      	blx	r3
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  404f54:	4b27      	ldr	r3, [pc, #156]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f56:	7b9b      	ldrb	r3, [r3, #14]
  404f58:	2b00      	cmp	r3, #0
  404f5a:	d01d      	beq.n	404f98 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  404f5c:	4b26      	ldr	r3, [pc, #152]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404f5e:	7d9b      	ldrb	r3, [r3, #22]
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
  404f60:	2b00      	cmp	r3, #0
  404f62:	d119      	bne.n	404f98 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
  404f64:	4b24      	ldr	r3, [pc, #144]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404f66:	7edb      	ldrb	r3, [r3, #27]
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
  404f68:	2b00      	cmp	r3, #0
  404f6a:	d115      	bne.n	404f98 <set_shelves_active_inactive+0x104>
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  404f6c:	4b20      	ldr	r3, [pc, #128]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404f6e:	781b      	ldrb	r3, [r3, #0]
  404f70:	3301      	adds	r3, #1
  404f72:	b2da      	uxtb	r2, r3
  404f74:	4b1e      	ldr	r3, [pc, #120]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404f76:	701a      	strb	r2, [r3, #0]
		
		if (shelf[2].devicesPresent)
  404f78:	4b1e      	ldr	r3, [pc, #120]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f7a:	7b5b      	ldrb	r3, [r3, #13]
  404f7c:	2b00      	cmp	r3, #0
  404f7e:	d00b      	beq.n	404f98 <set_shelves_active_inactive+0x104>
		{
			shelf[2].active = SHELF_ACTIVE;
  404f80:	4b1c      	ldr	r3, [pc, #112]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f82:	2201      	movs	r2, #1
  404f84:	729a      	strb	r2, [r3, #10]
			numActiveShelves++;
  404f86:	4b19      	ldr	r3, [pc, #100]	; (404fec <set_shelves_active_inactive+0x158>)
  404f88:	781b      	ldrb	r3, [r3, #0]
  404f8a:	3301      	adds	r3, #1
  404f8c:	b2da      	uxtb	r2, r3
  404f8e:	4b17      	ldr	r3, [pc, #92]	; (404fec <set_shelves_active_inactive+0x158>)
  404f90:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 2 active\r\n");
  404f92:	481d      	ldr	r0, [pc, #116]	; (405008 <set_shelves_active_inactive+0x174>)
  404f94:	4b1a      	ldr	r3, [pc, #104]	; (405000 <set_shelves_active_inactive+0x16c>)
  404f96:	4798      	blx	r3
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  404f98:	4b16      	ldr	r3, [pc, #88]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404f9a:	7cdb      	ldrb	r3, [r3, #19]
  404f9c:	2b00      	cmp	r3, #0
  404f9e:	d01f      	beq.n	404fe0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  404fa0:	4b15      	ldr	r3, [pc, #84]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
  404fa6:	2b00      	cmp	r3, #0
  404fa8:	d11a      	bne.n	404fe0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
  404faa:	4b13      	ldr	r3, [pc, #76]	; (404ff8 <set_shelves_active_inactive+0x164>)
  404fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	d115      	bne.n	404fe0 <set_shelves_active_inactive+0x14c>
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		numPresentShelves++;
  404fb4:	4b0e      	ldr	r3, [pc, #56]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404fb6:	781b      	ldrb	r3, [r3, #0]
  404fb8:	3301      	adds	r3, #1
  404fba:	b2da      	uxtb	r2, r3
  404fbc:	4b0c      	ldr	r3, [pc, #48]	; (404ff0 <set_shelves_active_inactive+0x15c>)
  404fbe:	701a      	strb	r2, [r3, #0]
		
		if (shelf[3].devicesPresent)
  404fc0:	4b0c      	ldr	r3, [pc, #48]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404fc2:	7c9b      	ldrb	r3, [r3, #18]
  404fc4:	2b00      	cmp	r3, #0
  404fc6:	d00b      	beq.n	404fe0 <set_shelves_active_inactive+0x14c>
		{
			shelf[3].active = SHELF_ACTIVE;
  404fc8:	4b0a      	ldr	r3, [pc, #40]	; (404ff4 <set_shelves_active_inactive+0x160>)
  404fca:	2201      	movs	r2, #1
  404fcc:	73da      	strb	r2, [r3, #15]
			numActiveShelves++;
  404fce:	4b07      	ldr	r3, [pc, #28]	; (404fec <set_shelves_active_inactive+0x158>)
  404fd0:	781b      	ldrb	r3, [r3, #0]
  404fd2:	3301      	adds	r3, #1
  404fd4:	b2da      	uxtb	r2, r3
  404fd6:	4b05      	ldr	r3, [pc, #20]	; (404fec <set_shelves_active_inactive+0x158>)
  404fd8:	701a      	strb	r2, [r3, #0]
			print_ecdbg("Shelf 3 active\r\n");
  404fda:	480c      	ldr	r0, [pc, #48]	; (40500c <set_shelves_active_inactive+0x178>)
  404fdc:	4b08      	ldr	r3, [pc, #32]	; (405000 <set_shelves_active_inactive+0x16c>)
  404fde:	4798      	blx	r3
		}
	}
}
  404fe0:	3708      	adds	r7, #8
  404fe2:	46bd      	mov	sp, r7
  404fe4:	bd80      	pop	{r7, pc}
  404fe6:	bf00      	nop
  404fe8:	00404ca9 	.word	0x00404ca9
  404fec:	204017b6 	.word	0x204017b6
  404ff0:	2040168a 	.word	0x2040168a
  404ff4:	2040168c 	.word	0x2040168c
  404ff8:	204016c8 	.word	0x204016c8
  404ffc:	0040c844 	.word	0x0040c844
  405000:	004026b1 	.word	0x004026b1
  405004:	0040c858 	.word	0x0040c858
  405008:	0040c86c 	.word	0x0040c86c
  40500c:	0040c880 	.word	0x0040c880

00405010 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
  405010:	b480      	push	{r7}
  405012:	af00      	add	r7, sp, #0
	return numActiveShelves;
  405014:	4b03      	ldr	r3, [pc, #12]	; (405024 <num_active_shelves+0x14>)
  405016:	781b      	ldrb	r3, [r3, #0]
}
  405018:	4618      	mov	r0, r3
  40501a:	46bd      	mov	sp, r7
  40501c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405020:	4770      	bx	lr
  405022:	bf00      	nop
  405024:	204017b6 	.word	0x204017b6

00405028 <num_present_shelves>:

unsigned char num_present_shelves(void);
unsigned char num_present_shelves(void)
{
  405028:	b480      	push	{r7}
  40502a:	af00      	add	r7, sp, #0
	return numPresentShelves;
  40502c:	4b03      	ldr	r3, [pc, #12]	; (40503c <num_present_shelves+0x14>)
  40502e:	781b      	ldrb	r3, [r3, #0]
}
  405030:	4618      	mov	r0, r3
  405032:	46bd      	mov	sp, r7
  405034:	f85d 7b04 	ldr.w	r7, [sp], #4
  405038:	4770      	bx	lr
  40503a:	bf00      	nop
  40503c:	2040168a 	.word	0x2040168a

00405040 <calc_sanitize_time>:
volatile int32_t zoom_view_id;


unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
  405040:	b480      	push	{r7}
  405042:	b085      	sub	sp, #20
  405044:	af00      	add	r7, sp, #0
  405046:	4603      	mov	r3, r0
  405048:	71fb      	strb	r3, [r7, #7]
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
  40504a:	79fa      	ldrb	r2, [r7, #7]
  40504c:	491f      	ldr	r1, [pc, #124]	; (4050cc <calc_sanitize_time+0x8c>)
  40504e:	4613      	mov	r3, r2
  405050:	009b      	lsls	r3, r3, #2
  405052:	4413      	add	r3, r2
  405054:	440b      	add	r3, r1
  405056:	785b      	ldrb	r3, [r3, #1]
  405058:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
  40505a:	7bfa      	ldrb	r2, [r7, #15]
  40505c:	491c      	ldr	r1, [pc, #112]	; (4050d0 <calc_sanitize_time+0x90>)
  40505e:	4613      	mov	r3, r2
  405060:	00db      	lsls	r3, r3, #3
  405062:	1a9b      	subs	r3, r3, r2
  405064:	005b      	lsls	r3, r3, #1
  405066:	440b      	add	r3, r1
  405068:	3308      	adds	r3, #8
  40506a:	78db      	ldrb	r3, [r3, #3]
  40506c:	73bb      	strb	r3, [r7, #14]
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  40506e:	7bba      	ldrb	r2, [r7, #14]
  405070:	4918      	ldr	r1, [pc, #96]	; (4050d4 <calc_sanitize_time+0x94>)
  405072:	4613      	mov	r3, r2
  405074:	009b      	lsls	r3, r3, #2
  405076:	4413      	add	r3, r2
  405078:	440b      	add	r3, r1
  40507a:	781b      	ldrb	r3, [r3, #0]
  40507c:	737b      	strb	r3, [r7, #13]
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
  40507e:	79fa      	ldrb	r2, [r7, #7]
  405080:	4912      	ldr	r1, [pc, #72]	; (4050cc <calc_sanitize_time+0x8c>)
  405082:	4613      	mov	r3, r2
  405084:	009b      	lsls	r3, r3, #2
  405086:	4413      	add	r3, r2
  405088:	440b      	add	r3, r1
  40508a:	789b      	ldrb	r3, [r3, #2]
  40508c:	73fb      	strb	r3, [r7, #15]
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
  40508e:	7bfa      	ldrb	r2, [r7, #15]
  405090:	490f      	ldr	r1, [pc, #60]	; (4050d0 <calc_sanitize_time+0x90>)
  405092:	4613      	mov	r3, r2
  405094:	00db      	lsls	r3, r3, #3
  405096:	1a9b      	subs	r3, r3, r2
  405098:	005b      	lsls	r3, r3, #1
  40509a:	440b      	add	r3, r1
  40509c:	3308      	adds	r3, #8
  40509e:	789b      	ldrb	r3, [r3, #2]
  4050a0:	73bb      	strb	r3, [r7, #14]
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
  4050a2:	7bba      	ldrb	r2, [r7, #14]
  4050a4:	490b      	ldr	r1, [pc, #44]	; (4050d4 <calc_sanitize_time+0x94>)
  4050a6:	4613      	mov	r3, r2
  4050a8:	009b      	lsls	r3, r3, #2
  4050aa:	4413      	add	r3, r2
  4050ac:	440b      	add	r3, r1
  4050ae:	781b      	ldrb	r3, [r3, #0]
  4050b0:	733b      	strb	r3, [r7, #12]

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
  4050b2:	7b3a      	ldrb	r2, [r7, #12]
  4050b4:	7b7b      	ldrb	r3, [r7, #13]
  4050b6:	4293      	cmp	r3, r2
  4050b8:	bf38      	it	cc
  4050ba:	4613      	movcc	r3, r2
  4050bc:	72fb      	strb	r3, [r7, #11]
	
	return (minutes);
  4050be:	7afb      	ldrb	r3, [r7, #11]
	
}
  4050c0:	4618      	mov	r0, r3
  4050c2:	3714      	adds	r7, #20
  4050c4:	46bd      	mov	sp, r7
  4050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050ca:	4770      	bx	lr
  4050cc:	2040168c 	.word	0x2040168c
  4050d0:	20401644 	.word	0x20401644
  4050d4:	204016c8 	.word	0x204016c8

004050d8 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
  4050d8:	b580      	push	{r7, lr}
  4050da:	af00      	add	r7, sp, #0
	led_shelf(0, LED_OFF);
  4050dc:	2000      	movs	r0, #0
  4050de:	2100      	movs	r1, #0
  4050e0:	4b08      	ldr	r3, [pc, #32]	; (405104 <door_latch_open_kill_all_shelves+0x2c>)
  4050e2:	4798      	blx	r3
	led_shelf(1, LED_OFF);
  4050e4:	2001      	movs	r0, #1
  4050e6:	2100      	movs	r1, #0
  4050e8:	4b06      	ldr	r3, [pc, #24]	; (405104 <door_latch_open_kill_all_shelves+0x2c>)
  4050ea:	4798      	blx	r3
	led_shelf(2, LED_OFF);
  4050ec:	2002      	movs	r0, #2
  4050ee:	2100      	movs	r1, #0
  4050f0:	4b04      	ldr	r3, [pc, #16]	; (405104 <door_latch_open_kill_all_shelves+0x2c>)
  4050f2:	4798      	blx	r3
	led_shelf(3, LED_OFF);
  4050f4:	2003      	movs	r0, #3
  4050f6:	2100      	movs	r1, #0
  4050f8:	4b02      	ldr	r3, [pc, #8]	; (405104 <door_latch_open_kill_all_shelves+0x2c>)
  4050fa:	4798      	blx	r3
	
	print_ecdbg("Door latch opened, kill all shelves for safety.\r\n");
  4050fc:	4802      	ldr	r0, [pc, #8]	; (405108 <door_latch_open_kill_all_shelves+0x30>)
  4050fe:	4b03      	ldr	r3, [pc, #12]	; (40510c <door_latch_open_kill_all_shelves+0x34>)
  405100:	4798      	blx	r3
}
  405102:	bd80      	pop	{r7, pc}
  405104:	00402a45 	.word	0x00402a45
  405108:	0040c894 	.word	0x0040c894
  40510c:	004026b1 	.word	0x004026b1

00405110 <calc_region_checksum>:
}
#endif //22feb16 ignore for now

unsigned char calc_region_checksum(unsigned char sel);
unsigned char calc_region_checksum(unsigned char sel)
{
  405110:	b480      	push	{r7}
  405112:	b087      	sub	sp, #28
  405114:	af00      	add	r7, sp, #0
  405116:	4603      	mov	r3, r0
  405118:	71fb      	strb	r3, [r7, #7]
	unsigned char csum = 0;
  40511a:	2300      	movs	r3, #0
  40511c:	75fb      	strb	r3, [r7, #23]

	switch(sel)
  40511e:	79fb      	ldrb	r3, [r7, #7]
  405120:	2b04      	cmp	r3, #4
  405122:	f200 80b5 	bhi.w	405290 <calc_region_checksum+0x180>
  405126:	a201      	add	r2, pc, #4	; (adr r2, 40512c <calc_region_checksum+0x1c>)
  405128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40512c:	00405141 	.word	0x00405141
  405130:	00405205 	.word	0x00405205
  405134:	00405215 	.word	0x00405215
  405138:	00405243 	.word	0x00405243
  40513c:	0040527b 	.word	0x0040527b
	{
		case 0: //serial ID and flags
			csum = 0;
  405140:	2300      	movs	r3, #0
  405142:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405144:	2300      	movs	r3, #0
  405146:	613b      	str	r3, [r7, #16]
  405148:	e055      	b.n	4051f6 <calc_region_checksum+0xe6>
			{
				csum += sf[i].id[0];
  40514a:	4a55      	ldr	r2, [pc, #340]	; (4052a0 <calc_region_checksum+0x190>)
  40514c:	693b      	ldr	r3, [r7, #16]
  40514e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
  405152:	7dfb      	ldrb	r3, [r7, #23]
  405154:	4413      	add	r3, r2
  405156:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[1];
  405158:	4a51      	ldr	r2, [pc, #324]	; (4052a0 <calc_region_checksum+0x190>)
  40515a:	693b      	ldr	r3, [r7, #16]
  40515c:	00db      	lsls	r3, r3, #3
  40515e:	4413      	add	r3, r2
  405160:	785a      	ldrb	r2, [r3, #1]
  405162:	7dfb      	ldrb	r3, [r7, #23]
  405164:	4413      	add	r3, r2
  405166:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[2];
  405168:	4a4d      	ldr	r2, [pc, #308]	; (4052a0 <calc_region_checksum+0x190>)
  40516a:	693b      	ldr	r3, [r7, #16]
  40516c:	00db      	lsls	r3, r3, #3
  40516e:	4413      	add	r3, r2
  405170:	789a      	ldrb	r2, [r3, #2]
  405172:	7dfb      	ldrb	r3, [r7, #23]
  405174:	4413      	add	r3, r2
  405176:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[3];
  405178:	4a49      	ldr	r2, [pc, #292]	; (4052a0 <calc_region_checksum+0x190>)
  40517a:	693b      	ldr	r3, [r7, #16]
  40517c:	00db      	lsls	r3, r3, #3
  40517e:	4413      	add	r3, r2
  405180:	78da      	ldrb	r2, [r3, #3]
  405182:	7dfb      	ldrb	r3, [r7, #23]
  405184:	4413      	add	r3, r2
  405186:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[4];
  405188:	4a45      	ldr	r2, [pc, #276]	; (4052a0 <calc_region_checksum+0x190>)
  40518a:	693b      	ldr	r3, [r7, #16]
  40518c:	00db      	lsls	r3, r3, #3
  40518e:	4413      	add	r3, r2
  405190:	791a      	ldrb	r2, [r3, #4]
  405192:	7dfb      	ldrb	r3, [r7, #23]
  405194:	4413      	add	r3, r2
  405196:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].id[5];
  405198:	4a41      	ldr	r2, [pc, #260]	; (4052a0 <calc_region_checksum+0x190>)
  40519a:	693b      	ldr	r3, [r7, #16]
  40519c:	00db      	lsls	r3, r3, #3
  40519e:	4413      	add	r3, r2
  4051a0:	795a      	ldrb	r2, [r3, #5]
  4051a2:	7dfb      	ldrb	r3, [r7, #23]
  4051a4:	4413      	add	r3, r2
  4051a6:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].maxUsageReached;
  4051a8:	4a3d      	ldr	r2, [pc, #244]	; (4052a0 <calc_region_checksum+0x190>)
  4051aa:	693b      	ldr	r3, [r7, #16]
  4051ac:	00db      	lsls	r3, r3, #3
  4051ae:	4413      	add	r3, r2
  4051b0:	799b      	ldrb	r3, [r3, #6]
  4051b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4051b6:	b2db      	uxtb	r3, r3
  4051b8:	461a      	mov	r2, r3
  4051ba:	7dfb      	ldrb	r3, [r7, #23]
  4051bc:	4413      	add	r3, r2
  4051be:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].slotFilled;
  4051c0:	4a37      	ldr	r2, [pc, #220]	; (4052a0 <calc_region_checksum+0x190>)
  4051c2:	693b      	ldr	r3, [r7, #16]
  4051c4:	00db      	lsls	r3, r3, #3
  4051c6:	4413      	add	r3, r2
  4051c8:	799b      	ldrb	r3, [r3, #6]
  4051ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4051ce:	b2db      	uxtb	r3, r3
  4051d0:	461a      	mov	r2, r3
  4051d2:	7dfb      	ldrb	r3, [r7, #23]
  4051d4:	4413      	add	r3, r2
  4051d6:	75fb      	strb	r3, [r7, #23]
				csum += sf[i].top_botn;
  4051d8:	4a31      	ldr	r2, [pc, #196]	; (4052a0 <calc_region_checksum+0x190>)
  4051da:	693b      	ldr	r3, [r7, #16]
  4051dc:	00db      	lsls	r3, r3, #3
  4051de:	4413      	add	r3, r2
  4051e0:	799b      	ldrb	r3, [r3, #6]
  4051e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
  4051e6:	b2db      	uxtb	r3, r3
  4051e8:	461a      	mov	r2, r3
  4051ea:	7dfb      	ldrb	r3, [r7, #23]
  4051ec:	4413      	add	r3, r2
  4051ee:	75fb      	strb	r3, [r7, #23]

	switch(sel)
	{
		case 0: //serial ID and flags
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4051f0:	693b      	ldr	r3, [r7, #16]
  4051f2:	3301      	adds	r3, #1
  4051f4:	613b      	str	r3, [r7, #16]
  4051f6:	693b      	ldr	r3, [r7, #16]
  4051f8:	2b5f      	cmp	r3, #95	; 0x5f
  4051fa:	dda6      	ble.n	40514a <calc_region_checksum+0x3a>
				csum += sf[i].id[5];
				csum += sf[i].maxUsageReached;
				csum += sf[i].slotFilled;
				csum += sf[i].top_botn;
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  4051fc:	7dfb      	ldrb	r3, [r7, #23]
  4051fe:	43db      	mvns	r3, r3
  405200:	75fb      	strb	r3, [r7, #23]
			break;
  405202:	e045      	b.n	405290 <calc_region_checksum+0x180>

		case 1: //san cycles
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
  405204:	4b27      	ldr	r3, [pc, #156]	; (4052a4 <calc_region_checksum+0x194>)
  405206:	681b      	ldr	r3, [r3, #0]
  405208:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40520c:	b2db      	uxtb	r3, r3
  40520e:	43db      	mvns	r3, r3
  405210:	75fb      	strb	r3, [r7, #23]
			break;
  405212:	e03d      	b.n	405290 <calc_region_checksum+0x180>

		case 2: //usage hours
			csum = 0;
  405214:	2300      	movs	r3, #0
  405216:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405218:	2300      	movs	r3, #0
  40521a:	60fb      	str	r3, [r7, #12]
  40521c:	e00a      	b.n	405234 <calc_region_checksum+0x124>
			{
				csum += h.hrs[i];
  40521e:	4a22      	ldr	r2, [pc, #136]	; (4052a8 <calc_region_checksum+0x198>)
  405220:	68fb      	ldr	r3, [r7, #12]
  405222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405226:	b2da      	uxtb	r2, r3
  405228:	7dfb      	ldrb	r3, [r7, #23]
  40522a:	4413      	add	r3, r2
  40522c:	75fb      	strb	r3, [r7, #23]
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
			break;

		case 2: //usage hours
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  40522e:	68fb      	ldr	r3, [r7, #12]
  405230:	3301      	adds	r3, #1
  405232:	60fb      	str	r3, [r7, #12]
  405234:	68fb      	ldr	r3, [r7, #12]
  405236:	2b5f      	cmp	r3, #95	; 0x5f
  405238:	ddf1      	ble.n	40521e <calc_region_checksum+0x10e>
			{
				csum += h.hrs[i];
			}
			csum = ((csum ^ 0xFF) & 0xFF);
  40523a:	7dfb      	ldrb	r3, [r7, #23]
  40523c:	43db      	mvns	r3, r3
  40523e:	75fb      	strb	r3, [r7, #23]
			break;
  405240:	e026      	b.n	405290 <calc_region_checksum+0x180>

		case 3: //usage mins
			csum = 0;
  405242:	2300      	movs	r3, #0
  405244:	75fb      	strb	r3, [r7, #23]
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  405246:	2300      	movs	r3, #0
  405248:	60bb      	str	r3, [r7, #8]
  40524a:	e009      	b.n	405260 <calc_region_checksum+0x150>
			{
				csum += m.mins[i];
  40524c:	4a17      	ldr	r2, [pc, #92]	; (4052ac <calc_region_checksum+0x19c>)
  40524e:	68bb      	ldr	r3, [r7, #8]
  405250:	4413      	add	r3, r2
  405252:	781a      	ldrb	r2, [r3, #0]
  405254:	7dfb      	ldrb	r3, [r7, #23]
  405256:	4413      	add	r3, r2
  405258:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
			break;

		case 3: //usage mins
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  40525a:	68bb      	ldr	r3, [r7, #8]
  40525c:	3301      	adds	r3, #1
  40525e:	60bb      	str	r3, [r7, #8]
  405260:	68bb      	ldr	r3, [r7, #8]
  405262:	2b5f      	cmp	r3, #95	; 0x5f
  405264:	ddf2      	ble.n	40524c <calc_region_checksum+0x13c>
			{
				csum += m.mins[i];
			}
			csum += m.sanMins;
  405266:	4b11      	ldr	r3, [pc, #68]	; (4052ac <calc_region_checksum+0x19c>)
  405268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  40526a:	b2da      	uxtb	r2, r3
  40526c:	7dfb      	ldrb	r3, [r7, #23]
  40526e:	4413      	add	r3, r2
  405270:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  405272:	7dfb      	ldrb	r3, [r7, #23]
  405274:	43db      	mvns	r3, r3
  405276:	75fb      	strb	r3, [r7, #23]
			break;
  405278:	e00a      	b.n	405290 <calc_region_checksum+0x180>
		case 4: //configuration
			csum = 0;
  40527a:	2300      	movs	r3, #0
  40527c:	75fb      	strb	r3, [r7, #23]
			csum += c.initialDTE;
  40527e:	4b0c      	ldr	r3, [pc, #48]	; (4052b0 <calc_region_checksum+0x1a0>)
  405280:	781a      	ldrb	r2, [r3, #0]
  405282:	7dfb      	ldrb	r3, [r7, #23]
  405284:	4413      	add	r3, r2
  405286:	75fb      	strb	r3, [r7, #23]
			csum = ((csum ^ 0xFF) & 0xFF);
  405288:	7dfb      	ldrb	r3, [r7, #23]
  40528a:	43db      	mvns	r3, r3
  40528c:	75fb      	strb	r3, [r7, #23]
			break;
  40528e:	bf00      	nop
	}
	
	return csum;	
  405290:	7dfb      	ldrb	r3, [r7, #23]
}
  405292:	4618      	mov	r0, r3
  405294:	371c      	adds	r7, #28
  405296:	46bd      	mov	sp, r7
  405298:	f85d 7b04 	ldr.w	r7, [sp], #4
  40529c:	4770      	bx	lr
  40529e:	bf00      	nop
  4052a0:	20401344 	.word	0x20401344
  4052a4:	204016f0 	.word	0x204016f0
  4052a8:	204016f4 	.word	0x204016f4
  4052ac:	204017b8 	.word	0x204017b8
  4052b0:	204016c4 	.word	0x204016c4

004052b4 <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
{
  4052b4:	b580      	push	{r7, lr}
  4052b6:	b082      	sub	sp, #8
  4052b8:	af00      	add	r7, sp, #0
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4052ba:	2300      	movs	r3, #0
  4052bc:	607b      	str	r3, [r7, #4]
  4052be:	e00f      	b.n	4052e0 <find_first_open_usage_slot+0x2c>
	{
		
		if (!sf[i].slotFilled)
  4052c0:	4a10      	ldr	r2, [pc, #64]	; (405304 <find_first_open_usage_slot+0x50>)
  4052c2:	687b      	ldr	r3, [r7, #4]
  4052c4:	00db      	lsls	r3, r3, #3
  4052c6:	4413      	add	r3, r2
  4052c8:	799b      	ldrb	r3, [r3, #6]
  4052ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4052ce:	b2db      	uxtb	r3, r3
  4052d0:	2b00      	cmp	r3, #0
  4052d2:	d102      	bne.n	4052da <find_first_open_usage_slot+0x26>
		{
			return i;
  4052d4:	687b      	ldr	r3, [r7, #4]
  4052d6:	b2db      	uxtb	r3, r3
  4052d8:	e00f      	b.n	4052fa <find_first_open_usage_slot+0x46>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
  4052da:	687b      	ldr	r3, [r7, #4]
  4052dc:	3301      	adds	r3, #1
  4052de:	607b      	str	r3, [r7, #4]
  4052e0:	687b      	ldr	r3, [r7, #4]
  4052e2:	2b5f      	cmp	r3, #95	; 0x5f
  4052e4:	d9ec      	bls.n	4052c0 <find_first_open_usage_slot+0xc>
		{
			return i;
		}
	}
	
	print_ecdbg("No more room for LED board info. Cannot track minute usage for additional boards.\r\n");
  4052e6:	4808      	ldr	r0, [pc, #32]	; (405308 <find_first_open_usage_slot+0x54>)
  4052e8:	4b08      	ldr	r3, [pc, #32]	; (40530c <find_first_open_usage_slot+0x58>)
  4052ea:	4798      	blx	r3
	
	sysErr.usageStructsFull = FAIL;
  4052ec:	4b08      	ldr	r3, [pc, #32]	; (405310 <find_first_open_usage_slot+0x5c>)
  4052ee:	2201      	movs	r2, #1
  4052f0:	739a      	strb	r2, [r3, #14]
	electroclaveState = STATE_CHASSIS_ERROR;
  4052f2:	4b08      	ldr	r3, [pc, #32]	; (405314 <find_first_open_usage_slot+0x60>)
  4052f4:	2207      	movs	r2, #7
  4052f6:	701a      	strb	r2, [r3, #0]

	
	return USAGE_FULL; //Error, no open slots
  4052f8:	23ff      	movs	r3, #255	; 0xff
}
  4052fa:	4618      	mov	r0, r3
  4052fc:	3708      	adds	r7, #8
  4052fe:	46bd      	mov	sp, r7
  405300:	bd80      	pop	{r7, pc}
  405302:	bf00      	nop
  405304:	20401344 	.word	0x20401344
  405308:	0040c8c8 	.word	0x0040c8c8
  40530c:	004026b1 	.word	0x004026b1
  405310:	204016b4 	.word	0x204016b4
  405314:	204009b9 	.word	0x204009b9

00405318 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(void)

{
  405318:	b580      	push	{r7, lr}
  40531a:	b082      	sub	sp, #8
  40531c:	af00      	add	r7, sp, #0
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	

	firstOpenSlot = find_first_open_usage_slot();
  40531e:	4b2f      	ldr	r3, [pc, #188]	; (4053dc <add_new_led_board_sides_to_usage+0xc4>)
  405320:	4798      	blx	r3
  405322:	4603      	mov	r3, r0
  405324:	717b      	strb	r3, [r7, #5]
	
	slotAssignment = firstOpenSlot;
  405326:	797b      	ldrb	r3, [r7, #5]
  405328:	71fb      	strb	r3, [r7, #7]
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
  40532a:	2300      	movs	r3, #0
  40532c:	71bb      	strb	r3, [r7, #6]
  40532e:	e04f      	b.n	4053d0 <add_new_led_board_sides_to_usage+0xb8>
	{
		brdIdx = ledBrdSide[i].boardIdx;
  405330:	79ba      	ldrb	r2, [r7, #6]
  405332:	492b      	ldr	r1, [pc, #172]	; (4053e0 <add_new_led_board_sides_to_usage+0xc8>)
  405334:	4613      	mov	r3, r2
  405336:	009b      	lsls	r3, r3, #2
  405338:	4413      	add	r3, r2
  40533a:	440b      	add	r3, r1
  40533c:	791b      	ldrb	r3, [r3, #4]
  40533e:	713b      	strb	r3, [r7, #4]
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
  405340:	79bb      	ldrb	r3, [r7, #6]
  405342:	f003 0301 	and.w	r3, r3, #1
  405346:	b2db      	uxtb	r3, r3
  405348:	2b00      	cmp	r3, #0
  40534a:	bf14      	ite	ne
  40534c:	2301      	movne	r3, #1
  40534e:	2300      	moveq	r3, #0
  405350:	b2db      	uxtb	r3, r3
  405352:	70fb      	strb	r3, [r7, #3]
		
		if ((ledBrd[brdIdx].present) && (usageIdx[i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
  405354:	793a      	ldrb	r2, [r7, #4]
  405356:	4923      	ldr	r1, [pc, #140]	; (4053e4 <add_new_led_board_sides_to_usage+0xcc>)
  405358:	4613      	mov	r3, r2
  40535a:	00db      	lsls	r3, r3, #3
  40535c:	1a9b      	subs	r3, r3, r2
  40535e:	005b      	lsls	r3, r3, #1
  405360:	440b      	add	r3, r1
  405362:	3308      	adds	r3, #8
  405364:	781b      	ldrb	r3, [r3, #0]
  405366:	2b00      	cmp	r3, #0
  405368:	d02f      	beq.n	4053ca <add_new_led_board_sides_to_usage+0xb2>
  40536a:	79bb      	ldrb	r3, [r7, #6]
  40536c:	4a1e      	ldr	r2, [pc, #120]	; (4053e8 <add_new_led_board_sides_to_usage+0xd0>)
  40536e:	5cd3      	ldrb	r3, [r2, r3]
  405370:	2bff      	cmp	r3, #255	; 0xff
  405372:	d12a      	bne.n	4053ca <add_new_led_board_sides_to_usage+0xb2>
		{
			strncpy((char*)&sf[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
  405374:	79fb      	ldrb	r3, [r7, #7]
  405376:	00db      	lsls	r3, r3, #3
  405378:	4a1c      	ldr	r2, [pc, #112]	; (4053ec <add_new_led_board_sides_to_usage+0xd4>)
  40537a:	1899      	adds	r1, r3, r2
  40537c:	793a      	ldrb	r2, [r7, #4]
  40537e:	4613      	mov	r3, r2
  405380:	00db      	lsls	r3, r3, #3
  405382:	1a9b      	subs	r3, r3, r2
  405384:	005b      	lsls	r3, r3, #1
  405386:	4a17      	ldr	r2, [pc, #92]	; (4053e4 <add_new_led_board_sides_to_usage+0xcc>)
  405388:	4413      	add	r3, r2
  40538a:	3301      	adds	r3, #1
  40538c:	4608      	mov	r0, r1
  40538e:	4619      	mov	r1, r3
  405390:	2206      	movs	r2, #6
  405392:	4b17      	ldr	r3, [pc, #92]	; (4053f0 <add_new_led_board_sides_to_usage+0xd8>)
  405394:	4798      	blx	r3
			
			sf[slotAssignment].top_botn = top_botn;
  405396:	79fb      	ldrb	r3, [r7, #7]
  405398:	78fa      	ldrb	r2, [r7, #3]
  40539a:	f002 0201 	and.w	r2, r2, #1
  40539e:	b2d1      	uxtb	r1, r2
  4053a0:	4a12      	ldr	r2, [pc, #72]	; (4053ec <add_new_led_board_sides_to_usage+0xd4>)
  4053a2:	00db      	lsls	r3, r3, #3
  4053a4:	4413      	add	r3, r2
  4053a6:	799a      	ldrb	r2, [r3, #6]
  4053a8:	f361 0200 	bfi	r2, r1, #0, #1
  4053ac:	719a      	strb	r2, [r3, #6]
			
			sf[slotAssignment].slotFilled = 1;
  4053ae:	79fb      	ldrb	r3, [r7, #7]
  4053b0:	4a0e      	ldr	r2, [pc, #56]	; (4053ec <add_new_led_board_sides_to_usage+0xd4>)
  4053b2:	00db      	lsls	r3, r3, #3
  4053b4:	4413      	add	r3, r2
  4053b6:	799a      	ldrb	r2, [r3, #6]
  4053b8:	f042 0204 	orr.w	r2, r2, #4
  4053bc:	719a      	strb	r2, [r3, #6]

			usageIdx[i] = slotAssignment++;
  4053be:	79ba      	ldrb	r2, [r7, #6]
  4053c0:	79fb      	ldrb	r3, [r7, #7]
  4053c2:	1c59      	adds	r1, r3, #1
  4053c4:	71f9      	strb	r1, [r7, #7]
  4053c6:	4908      	ldr	r1, [pc, #32]	; (4053e8 <add_new_led_board_sides_to_usage+0xd0>)
  4053c8:	548b      	strb	r3, [r1, r2]

	firstOpenSlot = find_first_open_usage_slot();
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
  4053ca:	79bb      	ldrb	r3, [r7, #6]
  4053cc:	3301      	adds	r3, #1
  4053ce:	71bb      	strb	r3, [r7, #6]
  4053d0:	79bb      	ldrb	r3, [r7, #6]
  4053d2:	2b07      	cmp	r3, #7
  4053d4:	d9ac      	bls.n	405330 <add_new_led_board_sides_to_usage+0x18>

			usageIdx[i] = slotAssignment++;

		}
	}
}
  4053d6:	3708      	adds	r7, #8
  4053d8:	46bd      	mov	sp, r7
  4053da:	bd80      	pop	{r7, pc}
  4053dc:	004052b5 	.word	0x004052b5
  4053e0:	204016c8 	.word	0x204016c8
  4053e4:	20401644 	.word	0x20401644
  4053e8:	204016ac 	.word	0x204016ac
  4053ec:	20401344 	.word	0x20401344
  4053f0:	00407089 	.word	0x00407089

004053f4 <inc_sanMins>:
void increment_ledBoard_usage_min(void);


void inc_sanMins(void);
void inc_sanMins(void)
{
  4053f4:	b480      	push	{r7}
  4053f6:	af00      	add	r7, sp, #0
	m.sanMins++;
  4053f8:	4b04      	ldr	r3, [pc, #16]	; (40540c <inc_sanMins+0x18>)
  4053fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4053fc:	3301      	adds	r3, #1
  4053fe:	4a03      	ldr	r2, [pc, #12]	; (40540c <inc_sanMins+0x18>)
  405400:	6613      	str	r3, [r2, #96]	; 0x60
	
	//the rest of the update of the struct, calc'ing the csum, writing to flash etc will happen when the usage minutes get updated
}
  405402:	46bd      	mov	sp, r7
  405404:	f85d 7b04 	ldr.w	r7, [sp], #4
  405408:	4770      	bx	lr
  40540a:	bf00      	nop
  40540c:	204017b8 	.word	0x204017b8

00405410 <inc_sanCycles>:

void inc_sanCycles(void);
void inc_sanCycles(void)
{
  405410:	b580      	push	{r7, lr}
  405412:	af00      	add	r7, sp, #0
	sanc.cycles++;
  405414:	4b11      	ldr	r3, [pc, #68]	; (40545c <inc_sanCycles+0x4c>)
  405416:	681b      	ldr	r3, [r3, #0]
  405418:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40541c:	1c5a      	adds	r2, r3, #1
  40541e:	f3c2 0213 	ubfx	r2, r2, #0, #20
  405422:	490e      	ldr	r1, [pc, #56]	; (40545c <inc_sanCycles+0x4c>)
  405424:	680b      	ldr	r3, [r1, #0]
  405426:	f362 0313 	bfi	r3, r2, #0, #20
  40542a:	600b      	str	r3, [r1, #0]
	sanCycleFlashIdx++;
  40542c:	4b0c      	ldr	r3, [pc, #48]	; (405460 <inc_sanCycles+0x50>)
  40542e:	681b      	ldr	r3, [r3, #0]
  405430:	3301      	adds	r3, #1
  405432:	4a0b      	ldr	r2, [pc, #44]	; (405460 <inc_sanCycles+0x50>)
  405434:	6013      	str	r3, [r2, #0]
	if (sanCycleFlashIdx >= (NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS))
  405436:	4b0a      	ldr	r3, [pc, #40]	; (405460 <inc_sanCycles+0x50>)
  405438:	681b      	ldr	r3, [r3, #0]
  40543a:	2b05      	cmp	r3, #5
  40543c:	d902      	bls.n	405444 <inc_sanCycles+0x34>
	{
		sanCycleFlashIdx = 0;
  40543e:	4b08      	ldr	r3, [pc, #32]	; (405460 <inc_sanCycles+0x50>)
  405440:	2200      	movs	r2, #0
  405442:	601a      	str	r2, [r3, #0]
	}
	sanc.csum = calc_region_checksum(1);
  405444:	2001      	movs	r0, #1
  405446:	4b07      	ldr	r3, [pc, #28]	; (405464 <inc_sanCycles+0x54>)
  405448:	4798      	blx	r3
  40544a:	4603      	mov	r3, r0
  40544c:	4619      	mov	r1, r3
  40544e:	4a03      	ldr	r2, [pc, #12]	; (40545c <inc_sanCycles+0x4c>)
  405450:	8853      	ldrh	r3, [r2, #2]
  405452:	f361 130b 	bfi	r3, r1, #4, #8
  405456:	8053      	strh	r3, [r2, #2]
//skip for now 22feb16	write_region_to_flash(1, 0xFF, sanc.csum);
}
  405458:	bd80      	pop	{r7, pc}
  40545a:	bf00      	nop
  40545c:	204016f0 	.word	0x204016f0
  405460:	204009bc 	.word	0x204009bc
  405464:	00405111 	.word	0x00405111

00405468 <store_config>:

void store_config(void);
void store_config(void)
{
  405468:	b580      	push	{r7, lr}
  40546a:	af00      	add	r7, sp, #0
	/* initialDTE set in the serial user interface */
	configFlashIdx++;
  40546c:	4b09      	ldr	r3, [pc, #36]	; (405494 <store_config+0x2c>)
  40546e:	681b      	ldr	r3, [r3, #0]
  405470:	3301      	adds	r3, #1
  405472:	4a08      	ldr	r2, [pc, #32]	; (405494 <store_config+0x2c>)
  405474:	6013      	str	r3, [r2, #0]
	if (configFlashIdx >= (NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS))
  405476:	4b07      	ldr	r3, [pc, #28]	; (405494 <store_config+0x2c>)
  405478:	681b      	ldr	r3, [r3, #0]
  40547a:	2b01      	cmp	r3, #1
  40547c:	d902      	bls.n	405484 <store_config+0x1c>
	{
		configFlashIdx = 0;
  40547e:	4b05      	ldr	r3, [pc, #20]	; (405494 <store_config+0x2c>)
  405480:	2200      	movs	r2, #0
  405482:	601a      	str	r2, [r3, #0]
	}
	c.csum = calc_region_checksum(4);
  405484:	2004      	movs	r0, #4
  405486:	4b04      	ldr	r3, [pc, #16]	; (405498 <store_config+0x30>)
  405488:	4798      	blx	r3
  40548a:	4603      	mov	r3, r0
  40548c:	461a      	mov	r2, r3
  40548e:	4b03      	ldr	r3, [pc, #12]	; (40549c <store_config+0x34>)
  405490:	705a      	strb	r2, [r3, #1]
//skip for now 22feb16	write_region_to_flash(4, 0xFF, c.csum);
}
  405492:	bd80      	pop	{r7, pc}
  405494:	204009c8 	.word	0x204009c8
  405498:	00405111 	.word	0x00405111
  40549c:	204016c4 	.word	0x204016c4

004054a0 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void)
{
  4054a0:	b580      	push	{r7, lr}
  4054a2:	b082      	sub	sp, #8
  4054a4:	af00      	add	r7, sp, #0
	unsigned char idx;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
  4054a6:	2300      	movs	r3, #0
  4054a8:	71bb      	strb	r3, [r7, #6]
	
	inc_sanMins();
  4054aa:	4b5c      	ldr	r3, [pc, #368]	; (40561c <increment_ledBoard_usage_min+0x17c>)
  4054ac:	4798      	blx	r3

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  4054ae:	2300      	movs	r3, #0
  4054b0:	717b      	strb	r3, [r7, #5]
  4054b2:	e07f      	b.n	4055b4 <increment_ledBoard_usage_min+0x114>
	{
		if (shelf[i].active == SHELF_ACTIVE)
  4054b4:	797a      	ldrb	r2, [r7, #5]
  4054b6:	495a      	ldr	r1, [pc, #360]	; (405620 <increment_ledBoard_usage_min+0x180>)
  4054b8:	4613      	mov	r3, r2
  4054ba:	009b      	lsls	r3, r3, #2
  4054bc:	4413      	add	r3, r2
  4054be:	440b      	add	r3, r1
  4054c0:	781b      	ldrb	r3, [r3, #0]
  4054c2:	2b01      	cmp	r3, #1
  4054c4:	d173      	bne.n	4055ae <increment_ledBoard_usage_min+0x10e>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
  4054c6:	797a      	ldrb	r2, [r7, #5]
  4054c8:	4955      	ldr	r1, [pc, #340]	; (405620 <increment_ledBoard_usage_min+0x180>)
  4054ca:	4613      	mov	r3, r2
  4054cc:	009b      	lsls	r3, r3, #2
  4054ce:	4413      	add	r3, r2
  4054d0:	440b      	add	r3, r1
  4054d2:	785b      	ldrb	r3, [r3, #1]
  4054d4:	4619      	mov	r1, r3
  4054d6:	4a53      	ldr	r2, [pc, #332]	; (405624 <increment_ledBoard_usage_min+0x184>)
  4054d8:	460b      	mov	r3, r1
  4054da:	00db      	lsls	r3, r3, #3
  4054dc:	1a5b      	subs	r3, r3, r1
  4054de:	005b      	lsls	r3, r3, #1
  4054e0:	4413      	add	r3, r2
  4054e2:	3308      	adds	r3, #8
  4054e4:	78db      	ldrb	r3, [r3, #3]
  4054e6:	70fb      	strb	r3, [r7, #3]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
  4054e8:	797a      	ldrb	r2, [r7, #5]
  4054ea:	494d      	ldr	r1, [pc, #308]	; (405620 <increment_ledBoard_usage_min+0x180>)
  4054ec:	4613      	mov	r3, r2
  4054ee:	009b      	lsls	r3, r3, #2
  4054f0:	4413      	add	r3, r2
  4054f2:	440b      	add	r3, r1
  4054f4:	789b      	ldrb	r3, [r3, #2]
  4054f6:	4619      	mov	r1, r3
  4054f8:	4a4a      	ldr	r2, [pc, #296]	; (405624 <increment_ledBoard_usage_min+0x184>)
  4054fa:	460b      	mov	r3, r1
  4054fc:	00db      	lsls	r3, r3, #3
  4054fe:	1a5b      	subs	r3, r3, r1
  405500:	005b      	lsls	r3, r3, #1
  405502:	4413      	add	r3, r2
  405504:	3308      	adds	r3, #8
  405506:	789b      	ldrb	r3, [r3, #2]
  405508:	70bb      	strb	r3, [r7, #2]
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
  40550a:	78fa      	ldrb	r2, [r7, #3]
  40550c:	4946      	ldr	r1, [pc, #280]	; (405628 <increment_ledBoard_usage_min+0x188>)
  40550e:	4613      	mov	r3, r2
  405510:	009b      	lsls	r3, r3, #2
  405512:	4413      	add	r3, r2
  405514:	440b      	add	r3, r1
  405516:	785b      	ldrb	r3, [r3, #1]
  405518:	707b      	strb	r3, [r7, #1]
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
  40551a:	78ba      	ldrb	r2, [r7, #2]
  40551c:	4942      	ldr	r1, [pc, #264]	; (405628 <increment_ledBoard_usage_min+0x188>)
  40551e:	4613      	mov	r3, r2
  405520:	009b      	lsls	r3, r3, #2
  405522:	4413      	add	r3, r2
  405524:	440b      	add	r3, r1
  405526:	785b      	ldrb	r3, [r3, #1]
  405528:	703b      	strb	r3, [r7, #0]
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  40552a:	2300      	movs	r3, #0
  40552c:	713b      	strb	r3, [r7, #4]
  40552e:	e03b      	b.n	4055a8 <increment_ledBoard_usage_min+0x108>
			{
				switch (k)
  405530:	793b      	ldrb	r3, [r7, #4]
  405532:	2b00      	cmp	r3, #0
  405534:	d002      	beq.n	40553c <increment_ledBoard_usage_min+0x9c>
  405536:	2b01      	cmp	r3, #1
  405538:	d003      	beq.n	405542 <increment_ledBoard_usage_min+0xa2>
  40553a:	e005      	b.n	405548 <increment_ledBoard_usage_min+0xa8>
				{
					case 0:
						idx = topUIdx;
  40553c:	787b      	ldrb	r3, [r7, #1]
  40553e:	71fb      	strb	r3, [r7, #7]
						break;
  405540:	e002      	b.n	405548 <increment_ledBoard_usage_min+0xa8>
					case 1:
						idx = bottomUIdx;
  405542:	783b      	ldrb	r3, [r7, #0]
  405544:	71fb      	strb	r3, [r7, #7]
						break;
  405546:	bf00      	nop

				}

				m.mins[idx] = m.mins[idx] + 1;
  405548:	79fb      	ldrb	r3, [r7, #7]
  40554a:	79fa      	ldrb	r2, [r7, #7]
  40554c:	4937      	ldr	r1, [pc, #220]	; (40562c <increment_ledBoard_usage_min+0x18c>)
  40554e:	5c8a      	ldrb	r2, [r1, r2]
  405550:	3201      	adds	r2, #1
  405552:	b2d1      	uxtb	r1, r2
  405554:	4a35      	ldr	r2, [pc, #212]	; (40562c <increment_ledBoard_usage_min+0x18c>)
  405556:	54d1      	strb	r1, [r2, r3]
				if (m.mins[idx] > 59)
  405558:	79fb      	ldrb	r3, [r7, #7]
  40555a:	4a34      	ldr	r2, [pc, #208]	; (40562c <increment_ledBoard_usage_min+0x18c>)
  40555c:	5cd3      	ldrb	r3, [r2, r3]
  40555e:	2b3b      	cmp	r3, #59	; 0x3b
  405560:	d91f      	bls.n	4055a2 <increment_ledBoard_usage_min+0x102>
				{
					m.mins[idx] = 0;
  405562:	79fb      	ldrb	r3, [r7, #7]
  405564:	4a31      	ldr	r2, [pc, #196]	; (40562c <increment_ledBoard_usage_min+0x18c>)
  405566:	2100      	movs	r1, #0
  405568:	54d1      	strb	r1, [r2, r3]
					hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
  40556a:	79bb      	ldrb	r3, [r7, #6]
  40556c:	3301      	adds	r3, #1
  40556e:	71bb      	strb	r3, [r7, #6]
					h.hrs[idx] = h.hrs[idx] + 1;
  405570:	79fb      	ldrb	r3, [r7, #7]
  405572:	79fa      	ldrb	r2, [r7, #7]
  405574:	492e      	ldr	r1, [pc, #184]	; (405630 <increment_ledBoard_usage_min+0x190>)
  405576:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  40557a:	3201      	adds	r2, #1
  40557c:	b291      	uxth	r1, r2
  40557e:	4a2c      	ldr	r2, [pc, #176]	; (405630 <increment_ledBoard_usage_min+0x190>)
  405580:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						
					if ((h.hrs[idx]) >= 2000) //2000 hours * 60 minutes per hour
  405584:	79fb      	ldrb	r3, [r7, #7]
  405586:	4a2a      	ldr	r2, [pc, #168]	; (405630 <increment_ledBoard_usage_min+0x190>)
  405588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40558c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  405590:	d307      	bcc.n	4055a2 <increment_ledBoard_usage_min+0x102>
					{
						sf[idx].maxUsageReached = 1; //And...we're done. Reached 2000 hours.
  405592:	79fb      	ldrb	r3, [r7, #7]
  405594:	4a27      	ldr	r2, [pc, #156]	; (405634 <increment_ledBoard_usage_min+0x194>)
  405596:	00db      	lsls	r3, r3, #3
  405598:	4413      	add	r3, r2
  40559a:	799a      	ldrb	r2, [r3, #6]
  40559c:	f042 0202 	orr.w	r2, r2, #2
  4055a0:	719a      	strb	r2, [r3, #6]
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
  4055a2:	793b      	ldrb	r3, [r7, #4]
  4055a4:	3301      	adds	r3, #1
  4055a6:	713b      	strb	r3, [r7, #4]
  4055a8:	793b      	ldrb	r3, [r7, #4]
  4055aa:	2b01      	cmp	r3, #1
  4055ac:	d9c0      	bls.n	405530 <increment_ledBoard_usage_min+0x90>
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	inc_sanMins();

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
  4055ae:	797b      	ldrb	r3, [r7, #5]
  4055b0:	3301      	adds	r3, #1
  4055b2:	717b      	strb	r3, [r7, #5]
  4055b4:	797b      	ldrb	r3, [r7, #5]
  4055b6:	2b03      	cmp	r3, #3
  4055b8:	f67f af7c 	bls.w	4054b4 <increment_ledBoard_usage_min+0x14>
				}//if ((minutes %60) == 0)
			} //for each board side in the shelf (k)
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	mFlashIdx++;
  4055bc:	4b1e      	ldr	r3, [pc, #120]	; (405638 <increment_ledBoard_usage_min+0x198>)
  4055be:	681b      	ldr	r3, [r3, #0]
  4055c0:	3301      	adds	r3, #1
  4055c2:	4a1d      	ldr	r2, [pc, #116]	; (405638 <increment_ledBoard_usage_min+0x198>)
  4055c4:	6013      	str	r3, [r2, #0]
	if (mFlashIdx >= NUM_USAGE_MINS_BUFS_SECTORS)
  4055c6:	4b1c      	ldr	r3, [pc, #112]	; (405638 <increment_ledBoard_usage_min+0x198>)
  4055c8:	681b      	ldr	r3, [r3, #0]
  4055ca:	2b73      	cmp	r3, #115	; 0x73
  4055cc:	d902      	bls.n	4055d4 <increment_ledBoard_usage_min+0x134>
	{
		mFlashIdx = 0;
  4055ce:	4b1a      	ldr	r3, [pc, #104]	; (405638 <increment_ledBoard_usage_min+0x198>)
  4055d0:	2200      	movs	r2, #0
  4055d2:	601a      	str	r2, [r3, #0]
	}
	m.csum = calc_region_checksum(3);
  4055d4:	2003      	movs	r0, #3
  4055d6:	4b19      	ldr	r3, [pc, #100]	; (40563c <increment_ledBoard_usage_min+0x19c>)
  4055d8:	4798      	blx	r3
  4055da:	4603      	mov	r3, r0
  4055dc:	461a      	mov	r2, r3
  4055de:	4b13      	ldr	r3, [pc, #76]	; (40562c <increment_ledBoard_usage_min+0x18c>)
  4055e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
//skip for now 22feb16	write_region_to_flash(3, 0xFF, m.csum);
//skip for now 22feb16	copy_region_to_another_sector(3);
//skip for now 22feb16	disrupt_prior_m_sector();

	if (hourRollover)
  4055e4:	79bb      	ldrb	r3, [r7, #6]
  4055e6:	2b00      	cmp	r3, #0
  4055e8:	d015      	beq.n	405616 <increment_ledBoard_usage_min+0x176>
	{
		hFlashIdx++;
  4055ea:	4b15      	ldr	r3, [pc, #84]	; (405640 <increment_ledBoard_usage_min+0x1a0>)
  4055ec:	681b      	ldr	r3, [r3, #0]
  4055ee:	3301      	adds	r3, #1
  4055f0:	4a13      	ldr	r2, [pc, #76]	; (405640 <increment_ledBoard_usage_min+0x1a0>)
  4055f2:	6013      	str	r3, [r2, #0]
		if (hFlashIdx >= (NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF))
  4055f4:	4b12      	ldr	r3, [pc, #72]	; (405640 <increment_ledBoard_usage_min+0x1a0>)
  4055f6:	681b      	ldr	r3, [r3, #0]
  4055f8:	2b01      	cmp	r3, #1
  4055fa:	d902      	bls.n	405602 <increment_ledBoard_usage_min+0x162>
		{
			hFlashIdx = 0;
  4055fc:	4b10      	ldr	r3, [pc, #64]	; (405640 <increment_ledBoard_usage_min+0x1a0>)
  4055fe:	2200      	movs	r2, #0
  405600:	601a      	str	r2, [r3, #0]
		}
		h.csum = calc_region_checksum(2);
  405602:	2002      	movs	r0, #2
  405604:	4b0d      	ldr	r3, [pc, #52]	; (40563c <increment_ledBoard_usage_min+0x19c>)
  405606:	4798      	blx	r3
  405608:	4603      	mov	r3, r0
  40560a:	461a      	mov	r2, r3
  40560c:	4b08      	ldr	r3, [pc, #32]	; (405630 <increment_ledBoard_usage_min+0x190>)
  40560e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
//skip for now 22feb16		write_region_to_flash(2, 0xFF, h.csum);

		hourRollover = 0; //reset for next pass
  405612:	2300      	movs	r3, #0
  405614:	71bb      	strb	r3, [r7, #6]
	}
}
  405616:	3708      	adds	r7, #8
  405618:	46bd      	mov	sp, r7
  40561a:	bd80      	pop	{r7, pc}
  40561c:	004053f5 	.word	0x004053f5
  405620:	2040168c 	.word	0x2040168c
  405624:	20401644 	.word	0x20401644
  405628:	204016c8 	.word	0x204016c8
  40562c:	204017b8 	.word	0x204017b8
  405630:	204016f4 	.word	0x204016f4
  405634:	20401344 	.word	0x20401344
  405638:	204009c4 	.word	0x204009c4
  40563c:	00405111 	.word	0x00405111
  405640:	204009c0 	.word	0x204009c0

00405644 <init_shelf_n_ledBrd_structs>:



void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
  405644:	b480      	push	{r7}
  405646:	b085      	sub	sp, #20
  405648:	af00      	add	r7, sp, #0
	
	for (int i=0; i<NUM_SHELVES; i++)
  40564a:	2300      	movs	r3, #0
  40564c:	60fb      	str	r3, [r7, #12]
  40564e:	e01a      	b.n	405686 <init_shelf_n_ledBrd_structs+0x42>
	{
		shelf[i].present = 0;
  405650:	497c      	ldr	r1, [pc, #496]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  405652:	68fa      	ldr	r2, [r7, #12]
  405654:	4613      	mov	r3, r2
  405656:	009b      	lsls	r3, r3, #2
  405658:	4413      	add	r3, r2
  40565a:	440b      	add	r3, r1
  40565c:	2200      	movs	r2, #0
  40565e:	711a      	strb	r2, [r3, #4]
		shelf[i].devicesPresent = 0;
  405660:	4978      	ldr	r1, [pc, #480]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  405662:	68fa      	ldr	r2, [r7, #12]
  405664:	4613      	mov	r3, r2
  405666:	009b      	lsls	r3, r3, #2
  405668:	4413      	add	r3, r2
  40566a:	440b      	add	r3, r1
  40566c:	2200      	movs	r2, #0
  40566e:	70da      	strb	r2, [r3, #3]
		shelf[i].active = 0;
  405670:	4974      	ldr	r1, [pc, #464]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  405672:	68fa      	ldr	r2, [r7, #12]
  405674:	4613      	mov	r3, r2
  405676:	009b      	lsls	r3, r3, #2
  405678:	4413      	add	r3, r2
  40567a:	440b      	add	r3, r1
  40567c:	2200      	movs	r2, #0
  40567e:	701a      	strb	r2, [r3, #0]

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
  405680:	68fb      	ldr	r3, [r7, #12]
  405682:	3301      	adds	r3, #1
  405684:	60fb      	str	r3, [r7, #12]
  405686:	68fb      	ldr	r3, [r7, #12]
  405688:	2b03      	cmp	r3, #3
  40568a:	dde1      	ble.n	405650 <init_shelf_n_ledBrd_structs+0xc>
		shelf[i].present = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].active = 0;
	}
	
	shelf[0].tLedIdx = 0;
  40568c:	4b6d      	ldr	r3, [pc, #436]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  40568e:	2200      	movs	r2, #0
  405690:	705a      	strb	r2, [r3, #1]
	shelf[0].bLedIdx = 1;
  405692:	4b6c      	ldr	r3, [pc, #432]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  405694:	2201      	movs	r2, #1
  405696:	709a      	strb	r2, [r3, #2]
	shelf[1].tLedIdx = 1;
  405698:	4b6a      	ldr	r3, [pc, #424]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  40569a:	2201      	movs	r2, #1
  40569c:	719a      	strb	r2, [r3, #6]
	shelf[1].bLedIdx = 2;
  40569e:	4b69      	ldr	r3, [pc, #420]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  4056a0:	2202      	movs	r2, #2
  4056a2:	71da      	strb	r2, [r3, #7]
	shelf[2].tLedIdx = 2;
  4056a4:	4b67      	ldr	r3, [pc, #412]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  4056a6:	2202      	movs	r2, #2
  4056a8:	72da      	strb	r2, [r3, #11]
	shelf[2].bLedIdx = 3;
  4056aa:	4b66      	ldr	r3, [pc, #408]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  4056ac:	2203      	movs	r2, #3
  4056ae:	731a      	strb	r2, [r3, #12]
	shelf[3].tLedIdx = 3;
  4056b0:	4b64      	ldr	r3, [pc, #400]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  4056b2:	2203      	movs	r2, #3
  4056b4:	741a      	strb	r2, [r3, #16]
	shelf[3].bLedIdx = 4;
  4056b6:	4b63      	ldr	r3, [pc, #396]	; (405844 <init_shelf_n_ledBrd_structs+0x200>)
  4056b8:	2204      	movs	r2, #4
  4056ba:	745a      	strb	r2, [r3, #17]
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4056bc:	2300      	movs	r3, #0
  4056be:	60bb      	str	r3, [r7, #8]
  4056c0:	e00c      	b.n	4056dc <init_shelf_n_ledBrd_structs+0x98>
	{
		ledBrd[i].present = 0;
  4056c2:	4961      	ldr	r1, [pc, #388]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056c4:	68ba      	ldr	r2, [r7, #8]
  4056c6:	4613      	mov	r3, r2
  4056c8:	00db      	lsls	r3, r3, #3
  4056ca:	1a9b      	subs	r3, r3, r2
  4056cc:	005b      	lsls	r3, r3, #1
  4056ce:	440b      	add	r3, r1
  4056d0:	3308      	adds	r3, #8
  4056d2:	2200      	movs	r2, #0
  4056d4:	701a      	strb	r2, [r3, #0]
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  4056d6:	68bb      	ldr	r3, [r7, #8]
  4056d8:	3301      	adds	r3, #1
  4056da:	60bb      	str	r3, [r7, #8]
  4056dc:	68bb      	ldr	r3, [r7, #8]
  4056de:	2b04      	cmp	r3, #4
  4056e0:	ddef      	ble.n	4056c2 <init_shelf_n_ledBrd_structs+0x7e>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
  4056e2:	4b59      	ldr	r3, [pc, #356]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056e4:	22ff      	movs	r2, #255	; 0xff
  4056e6:	729a      	strb	r2, [r3, #10]
	ledBrd[0].lSideIdx = 0;
  4056e8:	4b57      	ldr	r3, [pc, #348]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056ea:	2200      	movs	r2, #0
  4056ec:	72da      	strb	r2, [r3, #11]
	ledBrd[1].uSideIdx = 1;
  4056ee:	4b56      	ldr	r3, [pc, #344]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056f0:	2201      	movs	r2, #1
  4056f2:	761a      	strb	r2, [r3, #24]
	ledBrd[1].lSideIdx = 2;
  4056f4:	4b54      	ldr	r3, [pc, #336]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056f6:	2202      	movs	r2, #2
  4056f8:	765a      	strb	r2, [r3, #25]
	ledBrd[2].uSideIdx = 3;
  4056fa:	4b53      	ldr	r3, [pc, #332]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  4056fc:	2203      	movs	r2, #3
  4056fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ledBrd[2].lSideIdx = 4;
  405702:	4b51      	ldr	r3, [pc, #324]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405704:	2204      	movs	r2, #4
  405706:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	ledBrd[3].uSideIdx = 5;
  40570a:	4b4f      	ldr	r3, [pc, #316]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  40570c:	2205      	movs	r2, #5
  40570e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	ledBrd[3].lSideIdx = 6;
  405712:	4b4d      	ldr	r3, [pc, #308]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405714:	2206      	movs	r2, #6
  405716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	ledBrd[4].uSideIdx = 7;
  40571a:	4b4b      	ldr	r3, [pc, #300]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  40571c:	2207      	movs	r2, #7
  40571e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ledBrd[4].lSideIdx = 0xFF;
  405722:	4b49      	ldr	r3, [pc, #292]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405724:	22ff      	movs	r2, #255	; 0xff
  405726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	ledBrd[0].uSideShelfIdx = 0xFF;
  40572a:	4b47      	ldr	r3, [pc, #284]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  40572c:	22ff      	movs	r2, #255	; 0xff
  40572e:	731a      	strb	r2, [r3, #12]
	ledBrd[1].uSideShelfIdx = 0;
  405730:	4b45      	ldr	r3, [pc, #276]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405732:	2200      	movs	r2, #0
  405734:	769a      	strb	r2, [r3, #26]
	ledBrd[2].uSideShelfIdx = 1;
  405736:	4b44      	ldr	r3, [pc, #272]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405738:	2201      	movs	r2, #1
  40573a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ledBrd[3].uSideShelfIdx = 2;
  40573e:	4b42      	ldr	r3, [pc, #264]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405740:	2202      	movs	r2, #2
  405742:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ledBrd[4].uSideShelfIdx = 3;
  405746:	4b40      	ldr	r3, [pc, #256]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405748:	2203      	movs	r2, #3
  40574a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 
	ledBrd[0].lSideShelfIdx = 0;
  40574e:	4b3e      	ldr	r3, [pc, #248]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405750:	2200      	movs	r2, #0
  405752:	735a      	strb	r2, [r3, #13]
	ledBrd[1].lSideShelfIdx = 1;
  405754:	4b3c      	ldr	r3, [pc, #240]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405756:	2201      	movs	r2, #1
  405758:	76da      	strb	r2, [r3, #27]
	ledBrd[2].lSideShelfIdx = 2;
  40575a:	4b3b      	ldr	r3, [pc, #236]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  40575c:	2202      	movs	r2, #2
  40575e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ledBrd[3].lSideShelfIdx = 3;
  405762:	4b39      	ldr	r3, [pc, #228]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  405764:	2203      	movs	r2, #3
  405766:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ledBrd[4].lSideShelfIdx = 0xFF;
  40576a:	4b37      	ldr	r3, [pc, #220]	; (405848 <init_shelf_n_ledBrd_structs+0x204>)
  40576c:	22ff      	movs	r2, #255	; 0xff
  40576e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405772:	2300      	movs	r3, #0
  405774:	607b      	str	r3, [r7, #4]
  405776:	e01a      	b.n	4057ae <init_shelf_n_ledBrd_structs+0x16a>
	{
		ledBrdSide[i].maxUsageReached = 0;
  405778:	4934      	ldr	r1, [pc, #208]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  40577a:	687a      	ldr	r2, [r7, #4]
  40577c:	4613      	mov	r3, r2
  40577e:	009b      	lsls	r3, r3, #2
  405780:	4413      	add	r3, r2
  405782:	440b      	add	r3, r1
  405784:	2200      	movs	r2, #0
  405786:	709a      	strb	r2, [r3, #2]
		ledBrdSide[i].sanitizeMinutes = 0;
  405788:	4930      	ldr	r1, [pc, #192]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  40578a:	687a      	ldr	r2, [r7, #4]
  40578c:	4613      	mov	r3, r2
  40578e:	009b      	lsls	r3, r3, #2
  405790:	4413      	add	r3, r2
  405792:	440b      	add	r3, r1
  405794:	2200      	movs	r2, #0
  405796:	701a      	strb	r2, [r3, #0]
		ledBrdSide[i].ushdwIdx = 0xFF;
  405798:	492c      	ldr	r1, [pc, #176]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  40579a:	687a      	ldr	r2, [r7, #4]
  40579c:	4613      	mov	r3, r2
  40579e:	009b      	lsls	r3, r3, #2
  4057a0:	4413      	add	r3, r2
  4057a2:	440b      	add	r3, r1
  4057a4:	22ff      	movs	r2, #255	; 0xff
  4057a6:	705a      	strb	r2, [r3, #1]
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  4057a8:	687b      	ldr	r3, [r7, #4]
  4057aa:	3301      	adds	r3, #1
  4057ac:	607b      	str	r3, [r7, #4]
  4057ae:	687b      	ldr	r3, [r7, #4]
  4057b0:	2b07      	cmp	r3, #7
  4057b2:	dde1      	ble.n	405778 <init_shelf_n_ledBrd_structs+0x134>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
  4057b4:	4b25      	ldr	r3, [pc, #148]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057b6:	2200      	movs	r2, #0
  4057b8:	711a      	strb	r2, [r3, #4]
	ledBrdSide[1].boardIdx = 1;
  4057ba:	4b24      	ldr	r3, [pc, #144]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057bc:	2201      	movs	r2, #1
  4057be:	725a      	strb	r2, [r3, #9]
	ledBrdSide[2].boardIdx = 1;
  4057c0:	4b22      	ldr	r3, [pc, #136]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057c2:	2201      	movs	r2, #1
  4057c4:	739a      	strb	r2, [r3, #14]
	ledBrdSide[3].boardIdx = 2;
  4057c6:	4b21      	ldr	r3, [pc, #132]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057c8:	2202      	movs	r2, #2
  4057ca:	74da      	strb	r2, [r3, #19]
	ledBrdSide[4].boardIdx = 2;
  4057cc:	4b1f      	ldr	r3, [pc, #124]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057ce:	2202      	movs	r2, #2
  4057d0:	761a      	strb	r2, [r3, #24]
	ledBrdSide[5].boardIdx = 3;
  4057d2:	4b1e      	ldr	r3, [pc, #120]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057d4:	2203      	movs	r2, #3
  4057d6:	775a      	strb	r2, [r3, #29]
	ledBrdSide[6].boardIdx = 3;
  4057d8:	4b1c      	ldr	r3, [pc, #112]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057da:	2203      	movs	r2, #3
  4057dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ledBrdSide[7].boardIdx = 4;
  4057e0:	4b1a      	ldr	r3, [pc, #104]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057e2:	2204      	movs	r2, #4
  4057e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	

	ledBrdSide[0].shelfIdx = 0;
  4057e8:	4b18      	ldr	r3, [pc, #96]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057ea:	2200      	movs	r2, #0
  4057ec:	70da      	strb	r2, [r3, #3]
	ledBrdSide[1].shelfIdx = 0;
  4057ee:	4b17      	ldr	r3, [pc, #92]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057f0:	2200      	movs	r2, #0
  4057f2:	721a      	strb	r2, [r3, #8]
	ledBrdSide[2].shelfIdx = 1;
  4057f4:	4b15      	ldr	r3, [pc, #84]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057f6:	2201      	movs	r2, #1
  4057f8:	735a      	strb	r2, [r3, #13]
	ledBrdSide[3].shelfIdx = 1;
  4057fa:	4b14      	ldr	r3, [pc, #80]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  4057fc:	2201      	movs	r2, #1
  4057fe:	749a      	strb	r2, [r3, #18]
	ledBrdSide[4].shelfIdx = 2;
  405800:	4b12      	ldr	r3, [pc, #72]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  405802:	2202      	movs	r2, #2
  405804:	75da      	strb	r2, [r3, #23]
	ledBrdSide[5].shelfIdx = 2;
  405806:	4b11      	ldr	r3, [pc, #68]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  405808:	2202      	movs	r2, #2
  40580a:	771a      	strb	r2, [r3, #28]
	ledBrdSide[6].shelfIdx = 3;
  40580c:	4b0f      	ldr	r3, [pc, #60]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  40580e:	2203      	movs	r2, #3
  405810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ledBrdSide[7].shelfIdx = 3;
  405814:	4b0d      	ldr	r3, [pc, #52]	; (40584c <init_shelf_n_ledBrd_structs+0x208>)
  405816:	2203      	movs	r2, #3
  405818:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  40581c:	2300      	movs	r3, #0
  40581e:	603b      	str	r3, [r7, #0]
  405820:	e007      	b.n	405832 <init_shelf_n_ledBrd_structs+0x1ee>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
  405822:	4a0b      	ldr	r2, [pc, #44]	; (405850 <init_shelf_n_ledBrd_structs+0x20c>)
  405824:	683b      	ldr	r3, [r7, #0]
  405826:	4413      	add	r3, r2
  405828:	22ff      	movs	r2, #255	; 0xff
  40582a:	701a      	strb	r2, [r3, #0]
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
  40582c:	683b      	ldr	r3, [r7, #0]
  40582e:	3301      	adds	r3, #1
  405830:	603b      	str	r3, [r7, #0]
  405832:	683b      	ldr	r3, [r7, #0]
  405834:	2b07      	cmp	r3, #7
  405836:	ddf4      	ble.n	405822 <init_shelf_n_ledBrd_structs+0x1de>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
	}

}
  405838:	3714      	adds	r7, #20
  40583a:	46bd      	mov	sp, r7
  40583c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405840:	4770      	bx	lr
  405842:	bf00      	nop
  405844:	2040168c 	.word	0x2040168c
  405848:	20401644 	.word	0x20401644
  40584c:	204016c8 	.word	0x204016c8
  405850:	204016ac 	.word	0x204016ac

00405854 <load_usageIdx_to_ledBrdSide>:


void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
  405854:	b480      	push	{r7}
  405856:	b083      	sub	sp, #12
  405858:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  40585a:	2300      	movs	r3, #0
  40585c:	607b      	str	r3, [r7, #4]
  40585e:	e00e      	b.n	40587e <load_usageIdx_to_ledBrdSide+0x2a>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
  405860:	4a0b      	ldr	r2, [pc, #44]	; (405890 <load_usageIdx_to_ledBrdSide+0x3c>)
  405862:	687b      	ldr	r3, [r7, #4]
  405864:	4413      	add	r3, r2
  405866:	7818      	ldrb	r0, [r3, #0]
  405868:	490a      	ldr	r1, [pc, #40]	; (405894 <load_usageIdx_to_ledBrdSide+0x40>)
  40586a:	687a      	ldr	r2, [r7, #4]
  40586c:	4613      	mov	r3, r2
  40586e:	009b      	lsls	r3, r3, #2
  405870:	4413      	add	r3, r2
  405872:	440b      	add	r3, r1
  405874:	4602      	mov	r2, r0
  405876:	705a      	strb	r2, [r3, #1]


void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405878:	687b      	ldr	r3, [r7, #4]
  40587a:	3301      	adds	r3, #1
  40587c:	607b      	str	r3, [r7, #4]
  40587e:	687b      	ldr	r3, [r7, #4]
  405880:	2b07      	cmp	r3, #7
  405882:	dded      	ble.n	405860 <load_usageIdx_to_ledBrdSide+0xc>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
	}
}
  405884:	370c      	adds	r7, #12
  405886:	46bd      	mov	sp, r7
  405888:	f85d 7b04 	ldr.w	r7, [sp], #4
  40588c:	4770      	bx	lr
  40588e:	bf00      	nop
  405890:	204016ac 	.word	0x204016ac
  405894:	204016c8 	.word	0x204016c8

00405898 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
  405898:	b580      	push	{r7, lr}
  40589a:	b084      	sub	sp, #16
  40589c:	af00      	add	r7, sp, #0

	}
	else
	{
#endif //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later
		memset(&sf, 0x00, sizeof(sf));		//serial id's and flags
  40589e:	481e      	ldr	r0, [pc, #120]	; (405918 <init_led_board_info+0x80>)
  4058a0:	2100      	movs	r1, #0
  4058a2:	f44f 7240 	mov.w	r2, #768	; 0x300
  4058a6:	4b1d      	ldr	r3, [pc, #116]	; (40591c <init_led_board_info+0x84>)
  4058a8:	4798      	blx	r3
		memset(&sanc, 0x00, sizeof(sanc));	//total chassis sanitation cycles
  4058aa:	481d      	ldr	r0, [pc, #116]	; (405920 <init_led_board_info+0x88>)
  4058ac:	2100      	movs	r1, #0
  4058ae:	2204      	movs	r2, #4
  4058b0:	4b1a      	ldr	r3, [pc, #104]	; (40591c <init_led_board_info+0x84>)
  4058b2:	4798      	blx	r3
		memset(&h, 0x00, sizeof(h));		//usage hours
  4058b4:	481b      	ldr	r0, [pc, #108]	; (405924 <init_led_board_info+0x8c>)
  4058b6:	2100      	movs	r1, #0
  4058b8:	22c2      	movs	r2, #194	; 0xc2
  4058ba:	4b18      	ldr	r3, [pc, #96]	; (40591c <init_led_board_info+0x84>)
  4058bc:	4798      	blx	r3
		memset(&m, 0x00, sizeof(m));		//usage minutes
  4058be:	481a      	ldr	r0, [pc, #104]	; (405928 <init_led_board_info+0x90>)
  4058c0:	2100      	movs	r1, #0
  4058c2:	2268      	movs	r2, #104	; 0x68
  4058c4:	4b15      	ldr	r3, [pc, #84]	; (40591c <init_led_board_info+0x84>)
  4058c6:	4798      	blx	r3
		memset(&c, 0x00, sizeof(c));		//configuration
  4058c8:	4818      	ldr	r0, [pc, #96]	; (40592c <init_led_board_info+0x94>)
  4058ca:	2100      	movs	r1, #0
  4058cc:	2202      	movs	r2, #2
  4058ce:	4b13      	ldr	r3, [pc, #76]	; (40591c <init_led_board_info+0x84>)
  4058d0:	4798      	blx	r3
		c.initialDTE = 30; //changed to 30 minutes for a sanitation test for new LEDs 16jan16
  4058d2:	4b16      	ldr	r3, [pc, #88]	; (40592c <init_led_board_info+0x94>)
  4058d4:	221e      	movs	r2, #30
  4058d6:	701a      	strb	r2, [r3, #0]

		for (int i=0; i<5; i++)
  4058d8:	2300      	movs	r3, #0
  4058da:	60fb      	str	r3, [r7, #12]
  4058dc:	e002      	b.n	4058e4 <init_led_board_info+0x4c>
  4058de:	68fb      	ldr	r3, [r7, #12]
  4058e0:	3301      	adds	r3, #1
  4058e2:	60fb      	str	r3, [r7, #12]
  4058e4:	68fb      	ldr	r3, [r7, #12]
  4058e6:	2b04      	cmp	r3, #4
  4058e8:	ddf9      	ble.n	4058de <init_led_board_info+0x46>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
				chassis_error();
			}
#endif
		}
		add_new_led_board_sides_to_usage();
  4058ea:	4b11      	ldr	r3, [pc, #68]	; (405930 <init_led_board_info+0x98>)
  4058ec:	4798      	blx	r3
		load_usageIdx_to_ledBrdSide();
  4058ee:	4b11      	ldr	r3, [pc, #68]	; (405934 <init_led_board_info+0x9c>)
  4058f0:	4798      	blx	r3

		for (int i=0; i<5; i++)
  4058f2:	2300      	movs	r3, #0
  4058f4:	60bb      	str	r3, [r7, #8]
  4058f6:	e009      	b.n	40590c <init_led_board_info+0x74>
		{
			unsigned char csum;
			csum = calc_region_checksum(i);
  4058f8:	68bb      	ldr	r3, [r7, #8]
  4058fa:	b2db      	uxtb	r3, r3
  4058fc:	4618      	mov	r0, r3
  4058fe:	4b0e      	ldr	r3, [pc, #56]	; (405938 <init_led_board_info+0xa0>)
  405900:	4798      	blx	r3
  405902:	4603      	mov	r3, r0
  405904:	71fb      	strb	r3, [r7, #7]
#endif
		}
		add_new_led_board_sides_to_usage();
		load_usageIdx_to_ledBrdSide();

		for (int i=0; i<5; i++)
  405906:	68bb      	ldr	r3, [r7, #8]
  405908:	3301      	adds	r3, #1
  40590a:	60bb      	str	r3, [r7, #8]
  40590c:	68bb      	ldr	r3, [r7, #8]
  40590e:	2b04      	cmp	r3, #4
  405910:	ddf2      	ble.n	4058f8 <init_led_board_info+0x60>
//skip for now 22feb16			copy_region_to_another_sector(i);
		}
#if 0 //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later
	} //if-else
#endif //23feb16 force this flash region eval to be bad, we want the defaults loaded in the structures, put this back in later	
}
  405912:	3710      	adds	r7, #16
  405914:	46bd      	mov	sp, r7
  405916:	bd80      	pop	{r7, pc}
  405918:	20401344 	.word	0x20401344
  40591c:	00406dc5 	.word	0x00406dc5
  405920:	204016f0 	.word	0x204016f0
  405924:	204016f4 	.word	0x204016f4
  405928:	204017b8 	.word	0x204017b8
  40592c:	204016c4 	.word	0x204016c4
  405930:	00405319 	.word	0x00405319
  405934:	00405855 	.word	0x00405855
  405938:	00405111 	.word	0x00405111

0040593c <show_sw_version>:


void show_sw_version(void);
void show_sw_version(void)
{
  40593c:	b580      	push	{r7, lr}
  40593e:	af00      	add	r7, sp, #0
	print_ecdbg("\r\n*---------------------------------------------------*\r\n");
  405940:	4804      	ldr	r0, [pc, #16]	; (405954 <show_sw_version+0x18>)
  405942:	4b05      	ldr	r3, [pc, #20]	; (405958 <show_sw_version+0x1c>)
  405944:	4798      	blx	r3
	print_ecdbg(    "ELECTROCLAVE\r\nCopyright (c) 2016 Seal Shield, Inc. \r\n");
  405946:	4805      	ldr	r0, [pc, #20]	; (40595c <show_sw_version+0x20>)
  405948:	4b03      	ldr	r3, [pc, #12]	; (405958 <show_sw_version+0x1c>)
  40594a:	4798      	blx	r3
	print_ecdbg(    "Hardware Version: Classic +++ Software Version: 0.078\r\n");
  40594c:	4804      	ldr	r0, [pc, #16]	; (405960 <show_sw_version+0x24>)
  40594e:	4b02      	ldr	r3, [pc, #8]	; (405958 <show_sw_version+0x1c>)
  405950:	4798      	blx	r3

}
  405952:	bd80      	pop	{r7, pc}
  405954:	0040c91c 	.word	0x0040c91c
  405958:	004026b1 	.word	0x004026b1
  40595c:	0040c958 	.word	0x0040c958
  405960:	0040c990 	.word	0x0040c990

00405964 <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
  405964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405968:	b0a7      	sub	sp, #156	; 0x9c
  40596a:	af0c      	add	r7, sp, #48	; 0x30
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx;
	unsigned char sanMinutesMax = 0, sanMinutesMin = 0xFF, sanMinutesUpper, sanMinutesLower, uMins, lMins;
  40596c:	2300      	movs	r3, #0
  40596e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  405972:	23ff      	movs	r3, #255	; 0xff
  405974:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned int uHrs, lHrs;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
  405978:	4856      	ldr	r0, [pc, #344]	; (405ad4 <show_chassis_status_info+0x170>)
  40597a:	4b57      	ldr	r3, [pc, #348]	; (405ad8 <show_chassis_status_info+0x174>)
  40597c:	4798      	blx	r3
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
  40597e:	4857      	ldr	r0, [pc, #348]	; (405adc <show_chassis_status_info+0x178>)
  405980:	4b55      	ldr	r3, [pc, #340]	; (405ad8 <show_chassis_status_info+0x174>)
  405982:	4798      	blx	r3
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
  405984:	4856      	ldr	r0, [pc, #344]	; (405ae0 <show_chassis_status_info+0x17c>)
  405986:	4b54      	ldr	r3, [pc, #336]	; (405ad8 <show_chassis_status_info+0x174>)
  405988:	4798      	blx	r3
	print_ecdbg("----------------------------------------------------------\r\n");
  40598a:	4856      	ldr	r0, [pc, #344]	; (405ae4 <show_chassis_status_info+0x180>)
  40598c:	4b52      	ldr	r3, [pc, #328]	; (405ad8 <show_chassis_status_info+0x174>)
  40598e:	4798      	blx	r3
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405990:	2300      	movs	r3, #0
  405992:	657b      	str	r3, [r7, #84]	; 0x54
  405994:	e153      	b.n	405c3e <show_chassis_status_info+0x2da>
	{
		if (ledBrd[i].present)
  405996:	4954      	ldr	r1, [pc, #336]	; (405ae8 <show_chassis_status_info+0x184>)
  405998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  40599a:	4613      	mov	r3, r2
  40599c:	00db      	lsls	r3, r3, #3
  40599e:	1a9b      	subs	r3, r3, r2
  4059a0:	005b      	lsls	r3, r3, #1
  4059a2:	440b      	add	r3, r1
  4059a4:	3308      	adds	r3, #8
  4059a6:	781b      	ldrb	r3, [r3, #0]
  4059a8:	2b00      	cmp	r3, #0
  4059aa:	f000 8145 	beq.w	405c38 <show_chassis_status_info+0x2d4>
		{
			uSideIdx = ledBrd[i].uSideIdx;
  4059ae:	494e      	ldr	r1, [pc, #312]	; (405ae8 <show_chassis_status_info+0x184>)
  4059b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4059b2:	4613      	mov	r3, r2
  4059b4:	00db      	lsls	r3, r3, #3
  4059b6:	1a9b      	subs	r3, r3, r2
  4059b8:	005b      	lsls	r3, r3, #1
  4059ba:	440b      	add	r3, r1
  4059bc:	3308      	adds	r3, #8
  4059be:	789b      	ldrb	r3, [r3, #2]
  4059c0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			lSideIdx = ledBrd[i].lSideIdx;
  4059c4:	4948      	ldr	r1, [pc, #288]	; (405ae8 <show_chassis_status_info+0x184>)
  4059c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  4059c8:	4613      	mov	r3, r2
  4059ca:	00db      	lsls	r3, r3, #3
  4059cc:	1a9b      	subs	r3, r3, r2
  4059ce:	005b      	lsls	r3, r3, #1
  4059d0:	440b      	add	r3, r1
  4059d2:	3308      	adds	r3, #8
  4059d4:	78db      	ldrb	r3, [r3, #3]
  4059d6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			
			if (uSideIdx != NO_LED_BOARD_PRESENT)
  4059da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  4059de:	2bff      	cmp	r3, #255	; 0xff
  4059e0:	d035      	beq.n	405a4e <show_chassis_status_info+0xea>
			{
				uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;	
  4059e2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  4059e6:	4941      	ldr	r1, [pc, #260]	; (405aec <show_chassis_status_info+0x188>)
  4059e8:	4613      	mov	r3, r2
  4059ea:	009b      	lsls	r3, r3, #2
  4059ec:	4413      	add	r3, r2
  4059ee:	440b      	add	r3, r1
  4059f0:	785b      	ldrb	r3, [r3, #1]
  4059f2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(uSideIdx);
  4059f6:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
  4059fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
  4059fe:	4618      	mov	r0, r3
  405a00:	4b3b      	ldr	r3, [pc, #236]	; (405af0 <show_chassis_status_info+0x18c>)
  405a02:	4798      	blx	r3
  405a04:	4603      	mov	r3, r0
  405a06:	2b00      	cmp	r3, #0
  405a08:	bf0c      	ite	eq
  405a0a:	2301      	moveq	r3, #1
  405a0c:	2300      	movne	r3, #0
  405a0e:	b2db      	uxtb	r3, r3
  405a10:	4619      	mov	r1, r3
  405a12:	4a36      	ldr	r2, [pc, #216]	; (405aec <show_chassis_status_info+0x188>)
  405a14:	4623      	mov	r3, r4
  405a16:	009b      	lsls	r3, r3, #2
  405a18:	4423      	add	r3, r4
  405a1a:	4413      	add	r3, r2
  405a1c:	460a      	mov	r2, r1
  405a1e:	709a      	strb	r2, [r3, #2]
				sanMinutesUpper = ledBrdSide[uSideIdx].sanitizeMinutes;
  405a20:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
  405a24:	4931      	ldr	r1, [pc, #196]	; (405aec <show_chassis_status_info+0x188>)
  405a26:	4613      	mov	r3, r2
  405a28:	009b      	lsls	r3, r3, #2
  405a2a:	4413      	add	r3, r2
  405a2c:	440b      	add	r3, r1
  405a2e:	781b      	ldrb	r3, [r3, #0]
  405a30:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				uHrs = h.hrs[uSideUsageIdx];
  405a34:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  405a38:	4a2e      	ldr	r2, [pc, #184]	; (405af4 <show_chassis_status_info+0x190>)
  405a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = m.mins[uSideUsageIdx];
  405a40:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
  405a44:	4a2c      	ldr	r2, [pc, #176]	; (405af8 <show_chassis_status_info+0x194>)
  405a46:	5cd3      	ldrb	r3, [r2, r3]
  405a48:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  405a4c:	e007      	b.n	405a5e <show_chassis_status_info+0xfa>
			}
			else
			{
				uHrs = 0;
  405a4e:	2300      	movs	r3, #0
  405a50:	65fb      	str	r3, [r7, #92]	; 0x5c
				uMins = 0;
  405a52:	2300      	movs	r3, #0
  405a54:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				sanMinutesUpper = 0;
  405a58:	2300      	movs	r3, #0
  405a5a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			
			if (lSideIdx != NO_LED_BOARD_PRESENT)
  405a5e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  405a62:	2bff      	cmp	r3, #255	; 0xff
  405a64:	d04a      	beq.n	405afc <show_chassis_status_info+0x198>
			{
				lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;	
  405a66:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405a6a:	4920      	ldr	r1, [pc, #128]	; (405aec <show_chassis_status_info+0x188>)
  405a6c:	4613      	mov	r3, r2
  405a6e:	009b      	lsls	r3, r3, #2
  405a70:	4413      	add	r3, r2
  405a72:	440b      	add	r3, r1
  405a74:	785b      	ldrb	r3, [r3, #1]
  405a76:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				ledBrdSide[lSideIdx].maxUsageReached = !check_led_brd_side_lifetime(lSideIdx);
  405a7a:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
  405a7e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
  405a82:	4618      	mov	r0, r3
  405a84:	4b1a      	ldr	r3, [pc, #104]	; (405af0 <show_chassis_status_info+0x18c>)
  405a86:	4798      	blx	r3
  405a88:	4603      	mov	r3, r0
  405a8a:	2b00      	cmp	r3, #0
  405a8c:	bf0c      	ite	eq
  405a8e:	2301      	moveq	r3, #1
  405a90:	2300      	movne	r3, #0
  405a92:	b2db      	uxtb	r3, r3
  405a94:	4619      	mov	r1, r3
  405a96:	4a15      	ldr	r2, [pc, #84]	; (405aec <show_chassis_status_info+0x188>)
  405a98:	4623      	mov	r3, r4
  405a9a:	009b      	lsls	r3, r3, #2
  405a9c:	4423      	add	r3, r4
  405a9e:	4413      	add	r3, r2
  405aa0:	460a      	mov	r2, r1
  405aa2:	709a      	strb	r2, [r3, #2]
				sanMinutesLower = ledBrdSide[lSideIdx].sanitizeMinutes;
  405aa4:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
  405aa8:	4910      	ldr	r1, [pc, #64]	; (405aec <show_chassis_status_info+0x188>)
  405aaa:	4613      	mov	r3, r2
  405aac:	009b      	lsls	r3, r3, #2
  405aae:	4413      	add	r3, r2
  405ab0:	440b      	add	r3, r1
  405ab2:	781b      	ldrb	r3, [r3, #0]
  405ab4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				lHrs = h.hrs[lSideUsageIdx];
  405ab8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405abc:	4a0d      	ldr	r2, [pc, #52]	; (405af4 <show_chassis_status_info+0x190>)
  405abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405ac2:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = m.mins[lSideUsageIdx];
  405ac4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
  405ac8:	4a0b      	ldr	r2, [pc, #44]	; (405af8 <show_chassis_status_info+0x194>)
  405aca:	5cd3      	ldrb	r3, [r2, r3]
  405acc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  405ad0:	e01c      	b.n	405b0c <show_chassis_status_info+0x1a8>
  405ad2:	bf00      	nop
  405ad4:	0040c9c8 	.word	0x0040c9c8
  405ad8:	004026b1 	.word	0x004026b1
  405adc:	0040c9ec 	.word	0x0040c9ec
  405ae0:	0040ca28 	.word	0x0040ca28
  405ae4:	0040ca68 	.word	0x0040ca68
  405ae8:	20401644 	.word	0x20401644
  405aec:	204016c8 	.word	0x204016c8
  405af0:	00404735 	.word	0x00404735
  405af4:	204016f4 	.word	0x204016f4
  405af8:	204017b8 	.word	0x204017b8
			}
			else
			{
				lHrs = 0;
  405afc:	2300      	movs	r3, #0
  405afe:	65bb      	str	r3, [r7, #88]	; 0x58
				lMins = 0;
  405b00:	2300      	movs	r3, #0
  405b02:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
				sanMinutesLower = 0;
  405b06:	2300      	movs	r3, #0
  405b08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b0c:	497a      	ldr	r1, [pc, #488]	; (405cf8 <show_chassis_status_info+0x394>)
  405b0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b10:	4613      	mov	r3, r2
  405b12:	00db      	lsls	r3, r3, #3
  405b14:	1a9b      	subs	r3, r3, r2
  405b16:	005b      	lsls	r3, r3, #1
  405b18:	440b      	add	r3, r1
  405b1a:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b1c:	4699      	mov	r9, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b1e:	4976      	ldr	r1, [pc, #472]	; (405cf8 <show_chassis_status_info+0x394>)
  405b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b22:	4613      	mov	r3, r2
  405b24:	00db      	lsls	r3, r3, #3
  405b26:	1a9b      	subs	r3, r3, r2
  405b28:	005b      	lsls	r3, r3, #1
  405b2a:	440b      	add	r3, r1
  405b2c:	3301      	adds	r3, #1
  405b2e:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b30:	4698      	mov	r8, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b32:	4971      	ldr	r1, [pc, #452]	; (405cf8 <show_chassis_status_info+0x394>)
  405b34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b36:	4613      	mov	r3, r2
  405b38:	00db      	lsls	r3, r3, #3
  405b3a:	1a9b      	subs	r3, r3, r2
  405b3c:	005b      	lsls	r3, r3, #1
  405b3e:	440b      	add	r3, r1
  405b40:	3302      	adds	r3, #2
  405b42:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b44:	469c      	mov	ip, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b46:	496c      	ldr	r1, [pc, #432]	; (405cf8 <show_chassis_status_info+0x394>)
  405b48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b4a:	4613      	mov	r3, r2
  405b4c:	00db      	lsls	r3, r3, #3
  405b4e:	1a9b      	subs	r3, r3, r2
  405b50:	005b      	lsls	r3, r3, #1
  405b52:	440b      	add	r3, r1
  405b54:	3303      	adds	r3, #3
  405b56:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b58:	469e      	mov	lr, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b5a:	4967      	ldr	r1, [pc, #412]	; (405cf8 <show_chassis_status_info+0x394>)
  405b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b5e:	4613      	mov	r3, r2
  405b60:	00db      	lsls	r3, r3, #3
  405b62:	1a9b      	subs	r3, r3, r2
  405b64:	005b      	lsls	r3, r3, #1
  405b66:	440b      	add	r3, r1
  405b68:	3304      	adds	r3, #4
  405b6a:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b6c:	461e      	mov	r6, r3
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
  405b6e:	4962      	ldr	r1, [pc, #392]	; (405cf8 <show_chassis_status_info+0x394>)
  405b70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405b72:	4613      	mov	r3, r2
  405b74:	00db      	lsls	r3, r3, #3
  405b76:	1a9b      	subs	r3, r3, r2
  405b78:	005b      	lsls	r3, r3, #1
  405b7a:	440b      	add	r3, r1
  405b7c:	3305      	adds	r3, #5
  405b7e:	785b      	ldrb	r3, [r3, #1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
  405b80:	461c      	mov	r4, r3
  405b82:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
  405b86:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
  405b8a:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
  405b8e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405b92:	463d      	mov	r5, r7
  405b94:	f8cd 8000 	str.w	r8, [sp]
  405b98:	f8cd c004 	str.w	ip, [sp, #4]
  405b9c:	f8cd e008 	str.w	lr, [sp, #8]
  405ba0:	9603      	str	r6, [sp, #12]
  405ba2:	9404      	str	r4, [sp, #16]
  405ba4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
  405ba6:	9405      	str	r4, [sp, #20]
  405ba8:	9006      	str	r0, [sp, #24]
  405baa:	9107      	str	r1, [sp, #28]
  405bac:	6db9      	ldr	r1, [r7, #88]	; 0x58
  405bae:	9108      	str	r1, [sp, #32]
  405bb0:	9209      	str	r2, [sp, #36]	; 0x24
  405bb2:	930a      	str	r3, [sp, #40]	; 0x28
  405bb4:	4628      	mov	r0, r5
  405bb6:	4951      	ldr	r1, [pc, #324]	; (405cfc <show_chassis_status_info+0x398>)
  405bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405bba:	464b      	mov	r3, r9
  405bbc:	4c50      	ldr	r4, [pc, #320]	; (405d00 <show_chassis_status_info+0x39c>)
  405bbe:	47a0      	blx	r4
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				uHrs, uMins,
				sanMinutesUpper,
				lHrs, lMins,
				sanMinutesLower);
			print_ecdbg(pStr);
  405bc0:	463b      	mov	r3, r7
  405bc2:	4618      	mov	r0, r3
  405bc4:	4b4f      	ldr	r3, [pc, #316]	; (405d04 <show_chassis_status_info+0x3a0>)
  405bc6:	4798      	blx	r3
			

			/* 
			 * Determine the min and max sanitize times for the LED boards that are currently installed
			 */
			if ((sanMinutesMax < sanMinutesUpper) && (sanMinutesUpper != 0))
  405bc8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  405bcc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405bd0:	429a      	cmp	r2, r3
  405bd2:	d207      	bcs.n	405be4 <show_chassis_status_info+0x280>
  405bd4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405bd8:	2b00      	cmp	r3, #0
  405bda:	d003      	beq.n	405be4 <show_chassis_status_info+0x280>
			{
				sanMinutesMax = sanMinutesUpper;
  405bdc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMax < sanMinutesLower) && (sanMinutesLower != 0))
  405be4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
  405be8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405bec:	429a      	cmp	r2, r3
  405bee:	d207      	bcs.n	405c00 <show_chassis_status_info+0x29c>
  405bf0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405bf4:	2b00      	cmp	r3, #0
  405bf6:	d003      	beq.n	405c00 <show_chassis_status_info+0x29c>
			{
				sanMinutesMax = sanMinutesLower;
  405bf8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if ((sanMinutesMin > sanMinutesUpper) && (sanMinutesUpper != 0))
  405c00:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  405c04:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405c08:	429a      	cmp	r2, r3
  405c0a:	d907      	bls.n	405c1c <show_chassis_status_info+0x2b8>
  405c0c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405c10:	2b00      	cmp	r3, #0
  405c12:	d003      	beq.n	405c1c <show_chassis_status_info+0x2b8>
			{
				sanMinutesMin = sanMinutesUpper;
  405c14:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
  405c18:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			}
			if ((sanMinutesMin > sanMinutesLower) && (sanMinutesLower != 0))
  405c1c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
  405c20:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405c24:	429a      	cmp	r2, r3
  405c26:	d907      	bls.n	405c38 <show_chassis_status_info+0x2d4>
  405c28:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405c2c:	2b00      	cmp	r3, #0
  405c2e:	d003      	beq.n	405c38 <show_chassis_status_info+0x2d4>
			{
				sanMinutesMin = sanMinutesLower;
  405c30:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  405c34:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
	print_ecdbg("----------------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405c3a:	3301      	adds	r3, #1
  405c3c:	657b      	str	r3, [r7, #84]	; 0x54
  405c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405c40:	2b04      	cmp	r3, #4
  405c42:	f77f aea8 	ble.w	405996 <show_chassis_status_info+0x32>
				sanMinutesMin = sanMinutesLower;
			}
		}
	}
	
	print_ecdbg("MAX DTE: ");
  405c46:	4830      	ldr	r0, [pc, #192]	; (405d08 <show_chassis_status_info+0x3a4>)
  405c48:	4b2e      	ldr	r3, [pc, #184]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c4a:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMax);
  405c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  405c50:	4618      	mov	r0, r3
  405c52:	4b2e      	ldr	r3, [pc, #184]	; (405d0c <show_chassis_status_info+0x3a8>)
  405c54:	4798      	blx	r3
	print_ecdbg(" MIN DTE: ");
  405c56:	482e      	ldr	r0, [pc, #184]	; (405d10 <show_chassis_status_info+0x3ac>)
  405c58:	4b2a      	ldr	r3, [pc, #168]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c5a:	4798      	blx	r3
	print_ecdbg_num(sanMinutesMin);
  405c5c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
  405c60:	4618      	mov	r0, r3
  405c62:	4b2a      	ldr	r3, [pc, #168]	; (405d0c <show_chassis_status_info+0x3a8>)
  405c64:	4798      	blx	r3
	print_ecdbg("\r\n");
  405c66:	482b      	ldr	r0, [pc, #172]	; (405d14 <show_chassis_status_info+0x3b0>)
  405c68:	4b26      	ldr	r3, [pc, #152]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c6a:	4798      	blx	r3
	
	print_ecdbg("TOTAL SANITIZE TIME: ");
  405c6c:	482a      	ldr	r0, [pc, #168]	; (405d18 <show_chassis_status_info+0x3b4>)
  405c6e:	4b25      	ldr	r3, [pc, #148]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c70:	4798      	blx	r3
	if ((m.sanMins/60) < 10)
  405c72:	4b2a      	ldr	r3, [pc, #168]	; (405d1c <show_chassis_status_info+0x3b8>)
  405c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405c76:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
  405c7a:	d202      	bcs.n	405c82 <show_chassis_status_info+0x31e>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  405c7c:	4828      	ldr	r0, [pc, #160]	; (405d20 <show_chassis_status_info+0x3bc>)
  405c7e:	4b21      	ldr	r3, [pc, #132]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c80:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins/60));
  405c82:	4b26      	ldr	r3, [pc, #152]	; (405d1c <show_chassis_status_info+0x3b8>)
  405c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  405c86:	4a27      	ldr	r2, [pc, #156]	; (405d24 <show_chassis_status_info+0x3c0>)
  405c88:	fba2 2303 	umull	r2, r3, r2, r3
  405c8c:	095b      	lsrs	r3, r3, #5
  405c8e:	4618      	mov	r0, r3
  405c90:	4b1e      	ldr	r3, [pc, #120]	; (405d0c <show_chassis_status_info+0x3a8>)
  405c92:	4798      	blx	r3
	print_ecdbg(":");
  405c94:	4824      	ldr	r0, [pc, #144]	; (405d28 <show_chassis_status_info+0x3c4>)
  405c96:	4b1b      	ldr	r3, [pc, #108]	; (405d04 <show_chassis_status_info+0x3a0>)
  405c98:	4798      	blx	r3

	if ((m.sanMins%60) < 10)
  405c9a:	4b20      	ldr	r3, [pc, #128]	; (405d1c <show_chassis_status_info+0x3b8>)
  405c9c:	6e19      	ldr	r1, [r3, #96]	; 0x60
  405c9e:	4b21      	ldr	r3, [pc, #132]	; (405d24 <show_chassis_status_info+0x3c0>)
  405ca0:	fba3 2301 	umull	r2, r3, r3, r1
  405ca4:	095a      	lsrs	r2, r3, #5
  405ca6:	4613      	mov	r3, r2
  405ca8:	011b      	lsls	r3, r3, #4
  405caa:	1a9b      	subs	r3, r3, r2
  405cac:	009b      	lsls	r3, r3, #2
  405cae:	1aca      	subs	r2, r1, r3
  405cb0:	2a09      	cmp	r2, #9
  405cb2:	d802      	bhi.n	405cba <show_chassis_status_info+0x356>
	{
		print_ecdbg("0"); //print leading 0 if we need it
  405cb4:	481a      	ldr	r0, [pc, #104]	; (405d20 <show_chassis_status_info+0x3bc>)
  405cb6:	4b13      	ldr	r3, [pc, #76]	; (405d04 <show_chassis_status_info+0x3a0>)
  405cb8:	4798      	blx	r3
	}
	print_ecdbg_num((m.sanMins%60));
  405cba:	4b18      	ldr	r3, [pc, #96]	; (405d1c <show_chassis_status_info+0x3b8>)
  405cbc:	6e19      	ldr	r1, [r3, #96]	; 0x60
  405cbe:	4b19      	ldr	r3, [pc, #100]	; (405d24 <show_chassis_status_info+0x3c0>)
  405cc0:	fba3 2301 	umull	r2, r3, r3, r1
  405cc4:	095a      	lsrs	r2, r3, #5
  405cc6:	4613      	mov	r3, r2
  405cc8:	011b      	lsls	r3, r3, #4
  405cca:	1a9b      	subs	r3, r3, r2
  405ccc:	009b      	lsls	r3, r3, #2
  405cce:	1aca      	subs	r2, r1, r3
  405cd0:	4610      	mov	r0, r2
  405cd2:	4b0e      	ldr	r3, [pc, #56]	; (405d0c <show_chassis_status_info+0x3a8>)
  405cd4:	4798      	blx	r3

	print_ecdbg("  TOTAL SANITIZE CYCLES: ");
  405cd6:	4815      	ldr	r0, [pc, #84]	; (405d2c <show_chassis_status_info+0x3c8>)
  405cd8:	4b0a      	ldr	r3, [pc, #40]	; (405d04 <show_chassis_status_info+0x3a0>)
  405cda:	4798      	blx	r3
	print_ecdbg_num(sanc.cycles);
  405cdc:	4b14      	ldr	r3, [pc, #80]	; (405d30 <show_chassis_status_info+0x3cc>)
  405cde:	681b      	ldr	r3, [r3, #0]
  405ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405ce4:	4618      	mov	r0, r3
  405ce6:	4b09      	ldr	r3, [pc, #36]	; (405d0c <show_chassis_status_info+0x3a8>)
  405ce8:	4798      	blx	r3

	print_ecdbg("\r\n");
  405cea:	480a      	ldr	r0, [pc, #40]	; (405d14 <show_chassis_status_info+0x3b0>)
  405cec:	4b05      	ldr	r3, [pc, #20]	; (405d04 <show_chassis_status_info+0x3a0>)
  405cee:	4798      	blx	r3
	
}
  405cf0:	376c      	adds	r7, #108	; 0x6c
  405cf2:	46bd      	mov	sp, r7
  405cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405cf8:	20401644 	.word	0x20401644
  405cfc:	0040caa8 	.word	0x0040caa8
  405d00:	00406fe1 	.word	0x00406fe1
  405d04:	004026b1 	.word	0x004026b1
  405d08:	0040caf8 	.word	0x0040caf8
  405d0c:	00404481 	.word	0x00404481
  405d10:	0040cb04 	.word	0x0040cb04
  405d14:	0040c6d8 	.word	0x0040c6d8
  405d18:	0040cb10 	.word	0x0040cb10
  405d1c:	204017b8 	.word	0x204017b8
  405d20:	0040cb28 	.word	0x0040cb28
  405d24:	88888889 	.word	0x88888889
  405d28:	0040cb2c 	.word	0x0040cb2c
  405d2c:	0040cb30 	.word	0x0040cb30
  405d30:	204016f0 	.word	0x204016f0

00405d34 <show_chassis_sysErr>:


void show_chassis_sysErr(void);
void show_chassis_sysErr(void)
{
  405d34:	b5b0      	push	{r4, r5, r7, lr}
  405d36:	b09a      	sub	sp, #104	; 0x68
  405d38:	af00      	add	r7, sp, #0
	char str[80];
	

	print_ecdbg("\r\n***SYSTEM TESTS***\r\n\r\n");
  405d3a:	4898      	ldr	r0, [pc, #608]	; (405f9c <show_chassis_sysErr+0x268>)
  405d3c:	4b98      	ldr	r3, [pc, #608]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405d3e:	4798      	blx	r3


/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
  405d40:	1d3b      	adds	r3, r7, #4
  405d42:	4a98      	ldr	r2, [pc, #608]	; (405fa4 <show_chassis_sysErr+0x270>)
  405d44:	461c      	mov	r4, r3
  405d46:	4615      	mov	r5, r2
  405d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405d50:	e895 0003 	ldmia.w	r5, {r0, r1}
  405d54:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<8; i++)
  405d58:	2300      	movs	r3, #0
  405d5a:	667b      	str	r3, [r7, #100]	; 0x64
  405d5c:	e027      	b.n	405dae <show_chassis_sysErr+0x7a>
	{
		if ((sysErr.topdrive & BIT(i)))
  405d5e:	4b92      	ldr	r3, [pc, #584]	; (405fa8 <show_chassis_sysErr+0x274>)
  405d60:	781b      	ldrb	r3, [r3, #0]
  405d62:	461a      	mov	r2, r3
  405d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405d66:	fa42 f303 	asr.w	r3, r2, r3
  405d6a:	f003 0301 	and.w	r3, r3, #1
  405d6e:	2b00      	cmp	r3, #0
  405d70:	d00d      	beq.n	405d8e <show_chassis_sysErr+0x5a>
		{
			strcat(str,"F ");			
  405d72:	1d3b      	adds	r3, r7, #4
  405d74:	4618      	mov	r0, r3
  405d76:	4b8d      	ldr	r3, [pc, #564]	; (405fac <show_chassis_sysErr+0x278>)
  405d78:	4798      	blx	r3
  405d7a:	4603      	mov	r3, r0
  405d7c:	461a      	mov	r2, r3
  405d7e:	1d3b      	adds	r3, r7, #4
  405d80:	4413      	add	r3, r2
  405d82:	4a8b      	ldr	r2, [pc, #556]	; (405fb0 <show_chassis_sysErr+0x27c>)
  405d84:	8811      	ldrh	r1, [r2, #0]
  405d86:	7892      	ldrb	r2, [r2, #2]
  405d88:	8019      	strh	r1, [r3, #0]
  405d8a:	709a      	strb	r2, [r3, #2]
  405d8c:	e00c      	b.n	405da8 <show_chassis_sysErr+0x74>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  405d8e:	1d3b      	adds	r3, r7, #4
  405d90:	4618      	mov	r0, r3
  405d92:	4b86      	ldr	r3, [pc, #536]	; (405fac <show_chassis_sysErr+0x278>)
  405d94:	4798      	blx	r3
  405d96:	4603      	mov	r3, r0
  405d98:	461a      	mov	r2, r3
  405d9a:	1d3b      	adds	r3, r7, #4
  405d9c:	4413      	add	r3, r2
  405d9e:	4a85      	ldr	r2, [pc, #532]	; (405fb4 <show_chassis_sysErr+0x280>)
  405da0:	8811      	ldrh	r1, [r2, #0]
  405da2:	7892      	ldrb	r2, [r2, #2]
  405da4:	8019      	strh	r1, [r3, #0]
  405da6:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
	
	for (int i=0; i<8; i++)
  405da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405daa:	3301      	adds	r3, #1
  405dac:	667b      	str	r3, [r7, #100]	; 0x64
  405dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  405db0:	2b07      	cmp	r3, #7
  405db2:	ddd4      	ble.n	405d5e <show_chassis_sysErr+0x2a>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  405db4:	1d3b      	adds	r3, r7, #4
  405db6:	4618      	mov	r0, r3
  405db8:	4b79      	ldr	r3, [pc, #484]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405dba:	4798      	blx	r3
	print_ecdbg("\r\n");
  405dbc:	487e      	ldr	r0, [pc, #504]	; (405fb8 <show_chassis_sysErr+0x284>)
  405dbe:	4b78      	ldr	r3, [pc, #480]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405dc0:	4798      	blx	r3
	
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
  405dc2:	1d3b      	adds	r3, r7, #4
  405dc4:	4a7d      	ldr	r2, [pc, #500]	; (405fbc <show_chassis_sysErr+0x288>)
  405dc6:	461c      	mov	r4, r3
  405dc8:	4615      	mov	r5, r2
  405dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405dd2:	e895 0003 	ldmia.w	r5, {r0, r1}
  405dd6:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<12; i++)
  405dda:	2300      	movs	r3, #0
  405ddc:	663b      	str	r3, [r7, #96]	; 0x60
  405dde:	e026      	b.n	405e2e <show_chassis_sysErr+0xfa>
	{
		if ((sysErr.botdrive & BIT(i)))
  405de0:	4b71      	ldr	r3, [pc, #452]	; (405fa8 <show_chassis_sysErr+0x274>)
  405de2:	685b      	ldr	r3, [r3, #4]
  405de4:	2101      	movs	r1, #1
  405de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
  405de8:	fa01 f202 	lsl.w	r2, r1, r2
  405dec:	4013      	ands	r3, r2
  405dee:	2b00      	cmp	r3, #0
  405df0:	d00d      	beq.n	405e0e <show_chassis_sysErr+0xda>
		{
			strcat(str,"F ");			
  405df2:	1d3b      	adds	r3, r7, #4
  405df4:	4618      	mov	r0, r3
  405df6:	4b6d      	ldr	r3, [pc, #436]	; (405fac <show_chassis_sysErr+0x278>)
  405df8:	4798      	blx	r3
  405dfa:	4603      	mov	r3, r0
  405dfc:	461a      	mov	r2, r3
  405dfe:	1d3b      	adds	r3, r7, #4
  405e00:	4413      	add	r3, r2
  405e02:	4a6b      	ldr	r2, [pc, #428]	; (405fb0 <show_chassis_sysErr+0x27c>)
  405e04:	8811      	ldrh	r1, [r2, #0]
  405e06:	7892      	ldrb	r2, [r2, #2]
  405e08:	8019      	strh	r1, [r3, #0]
  405e0a:	709a      	strb	r2, [r3, #2]
  405e0c:	e00c      	b.n	405e28 <show_chassis_sysErr+0xf4>
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str,"P ");
  405e0e:	1d3b      	adds	r3, r7, #4
  405e10:	4618      	mov	r0, r3
  405e12:	4b66      	ldr	r3, [pc, #408]	; (405fac <show_chassis_sysErr+0x278>)
  405e14:	4798      	blx	r3
  405e16:	4603      	mov	r3, r0
  405e18:	461a      	mov	r2, r3
  405e1a:	1d3b      	adds	r3, r7, #4
  405e1c:	4413      	add	r3, r2
  405e1e:	4a65      	ldr	r2, [pc, #404]	; (405fb4 <show_chassis_sysErr+0x280>)
  405e20:	8811      	ldrh	r1, [r2, #0]
  405e22:	7892      	ldrb	r2, [r2, #2]
  405e24:	8019      	strh	r1, [r3, #0]
  405e26:	709a      	strb	r2, [r3, #2]
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
	
	for (int i=0; i<12; i++)
  405e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  405e2a:	3301      	adds	r3, #1
  405e2c:	663b      	str	r3, [r7, #96]	; 0x60
  405e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  405e30:	2b0b      	cmp	r3, #11
  405e32:	ddd5      	ble.n	405de0 <show_chassis_sysErr+0xac>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
  405e34:	1d3b      	adds	r3, r7, #4
  405e36:	4618      	mov	r0, r3
  405e38:	4b59      	ldr	r3, [pc, #356]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405e3a:	4798      	blx	r3
	print_ecdbg("\r\n");
  405e3c:	485e      	ldr	r0, [pc, #376]	; (405fb8 <show_chassis_sysErr+0x284>)
  405e3e:	4b58      	ldr	r3, [pc, #352]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405e40:	4798      	blx	r3
	
/*
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
  405e42:	1d3b      	adds	r3, r7, #4
  405e44:	4a5e      	ldr	r2, [pc, #376]	; (405fc0 <show_chassis_sysErr+0x28c>)
  405e46:	461c      	mov	r4, r3
  405e48:	4615      	mov	r5, r2
  405e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405e52:	e895 0003 	ldmia.w	r5, {r0, r1}
  405e56:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<5; i++)
  405e5a:	2300      	movs	r3, #0
  405e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  405e5e:	e029      	b.n	405eb4 <show_chassis_sysErr+0x180>
	{
		if ((sysErr.flashArea & BIT(i)) == SE_FAIL)
  405e60:	4b51      	ldr	r3, [pc, #324]	; (405fa8 <show_chassis_sysErr+0x274>)
  405e62:	689b      	ldr	r3, [r3, #8]
  405e64:	2101      	movs	r1, #1
  405e66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  405e68:	fa01 f202 	lsl.w	r2, r1, r2
  405e6c:	4013      	ands	r3, r2
  405e6e:	2b01      	cmp	r3, #1
  405e70:	d110      	bne.n	405e94 <show_chassis_sysErr+0x160>
		{
			strcat(str, "F ");
  405e72:	1d3b      	adds	r3, r7, #4
  405e74:	4618      	mov	r0, r3
  405e76:	4b4d      	ldr	r3, [pc, #308]	; (405fac <show_chassis_sysErr+0x278>)
  405e78:	4798      	blx	r3
  405e7a:	4603      	mov	r3, r0
  405e7c:	461a      	mov	r2, r3
  405e7e:	1d3b      	adds	r3, r7, #4
  405e80:	4413      	add	r3, r2
  405e82:	4a4b      	ldr	r2, [pc, #300]	; (405fb0 <show_chassis_sysErr+0x27c>)
  405e84:	8811      	ldrh	r1, [r2, #0]
  405e86:	7892      	ldrb	r2, [r2, #2]
  405e88:	8019      	strh	r1, [r3, #0]
  405e8a:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  405e8c:	4b4d      	ldr	r3, [pc, #308]	; (405fc4 <show_chassis_sysErr+0x290>)
  405e8e:	2207      	movs	r2, #7
  405e90:	701a      	strb	r2, [r3, #0]
  405e92:	e00c      	b.n	405eae <show_chassis_sysErr+0x17a>
		}
		else
		{
			strcat(str, "P ");
  405e94:	1d3b      	adds	r3, r7, #4
  405e96:	4618      	mov	r0, r3
  405e98:	4b44      	ldr	r3, [pc, #272]	; (405fac <show_chassis_sysErr+0x278>)
  405e9a:	4798      	blx	r3
  405e9c:	4603      	mov	r3, r0
  405e9e:	461a      	mov	r2, r3
  405ea0:	1d3b      	adds	r3, r7, #4
  405ea2:	4413      	add	r3, r2
  405ea4:	4a43      	ldr	r2, [pc, #268]	; (405fb4 <show_chassis_sysErr+0x280>)
  405ea6:	8811      	ldrh	r1, [r2, #0]
  405ea8:	7892      	ldrb	r2, [r2, #2]
  405eaa:	8019      	strh	r1, [r3, #0]
  405eac:	709a      	strb	r2, [r3, #2]
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
	
	for (int i=0; i<5; i++)
  405eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  405eb0:	3301      	adds	r3, #1
  405eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  405eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  405eb6:	2b04      	cmp	r3, #4
  405eb8:	ddd2      	ble.n	405e60 <show_chassis_sysErr+0x12c>
		{
			strcat(str, "P ");
		}
	}
	
	print_ecdbg(str);
  405eba:	1d3b      	adds	r3, r7, #4
  405ebc:	4618      	mov	r0, r3
  405ebe:	4b38      	ldr	r3, [pc, #224]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405ec0:	4798      	blx	r3
	print_ecdbg("\r\n");
  405ec2:	483d      	ldr	r0, [pc, #244]	; (405fb8 <show_chassis_sysErr+0x284>)
  405ec4:	4b36      	ldr	r3, [pc, #216]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405ec6:	4798      	blx	r3
	
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
  405ec8:	1d3b      	adds	r3, r7, #4
  405eca:	4a3f      	ldr	r2, [pc, #252]	; (405fc8 <show_chassis_sysErr+0x294>)
  405ecc:	461c      	mov	r4, r3
  405ece:	4615      	mov	r5, r2
  405ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
  405edc:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405ee0:	2300      	movs	r3, #0
  405ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  405ee4:	e02a      	b.n	405f3c <show_chassis_sysErr+0x208>
	{
		if ((sysErr.ledBrdSerialIdCsum & BIT(i)) == SE_FAIL)
  405ee6:	4b30      	ldr	r3, [pc, #192]	; (405fa8 <show_chassis_sysErr+0x274>)
  405ee8:	7b1b      	ldrb	r3, [r3, #12]
  405eea:	4619      	mov	r1, r3
  405eec:	2201      	movs	r2, #1
  405eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405ef0:	fa02 f303 	lsl.w	r3, r2, r3
  405ef4:	400b      	ands	r3, r1
  405ef6:	2b01      	cmp	r3, #1
  405ef8:	d110      	bne.n	405f1c <show_chassis_sysErr+0x1e8>
		{
			strcat(str, "F ");
  405efa:	1d3b      	adds	r3, r7, #4
  405efc:	4618      	mov	r0, r3
  405efe:	4b2b      	ldr	r3, [pc, #172]	; (405fac <show_chassis_sysErr+0x278>)
  405f00:	4798      	blx	r3
  405f02:	4603      	mov	r3, r0
  405f04:	461a      	mov	r2, r3
  405f06:	1d3b      	adds	r3, r7, #4
  405f08:	4413      	add	r3, r2
  405f0a:	4a29      	ldr	r2, [pc, #164]	; (405fb0 <show_chassis_sysErr+0x27c>)
  405f0c:	8811      	ldrh	r1, [r2, #0]
  405f0e:	7892      	ldrb	r2, [r2, #2]
  405f10:	8019      	strh	r1, [r3, #0]
  405f12:	709a      	strb	r2, [r3, #2]
			electroclaveState = STATE_CHASSIS_ERROR;
  405f14:	4b2b      	ldr	r3, [pc, #172]	; (405fc4 <show_chassis_sysErr+0x290>)
  405f16:	2207      	movs	r2, #7
  405f18:	701a      	strb	r2, [r3, #0]
  405f1a:	e00c      	b.n	405f36 <show_chassis_sysErr+0x202>
		}
		else
		{
			strcat(str, "P ");
  405f1c:	1d3b      	adds	r3, r7, #4
  405f1e:	4618      	mov	r0, r3
  405f20:	4b22      	ldr	r3, [pc, #136]	; (405fac <show_chassis_sysErr+0x278>)
  405f22:	4798      	blx	r3
  405f24:	4603      	mov	r3, r0
  405f26:	461a      	mov	r2, r3
  405f28:	1d3b      	adds	r3, r7, #4
  405f2a:	4413      	add	r3, r2
  405f2c:	4a21      	ldr	r2, [pc, #132]	; (405fb4 <show_chassis_sysErr+0x280>)
  405f2e:	8811      	ldrh	r1, [r2, #0]
  405f30:	7892      	ldrb	r2, [r2, #2]
  405f32:	8019      	strh	r1, [r3, #0]
  405f34:	709a      	strb	r2, [r3, #2]
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
  405f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405f38:	3301      	adds	r3, #1
  405f3a:	65bb      	str	r3, [r7, #88]	; 0x58
  405f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  405f3e:	2b04      	cmp	r3, #4
  405f40:	ddd1      	ble.n	405ee6 <show_chassis_sysErr+0x1b2>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  405f42:	1d3b      	adds	r3, r7, #4
  405f44:	4618      	mov	r0, r3
  405f46:	4b16      	ldr	r3, [pc, #88]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405f48:	4798      	blx	r3
	print_ecdbg("\r\n");
  405f4a:	481b      	ldr	r0, [pc, #108]	; (405fb8 <show_chassis_sysErr+0x284>)
  405f4c:	4b14      	ldr	r3, [pc, #80]	; (405fa0 <show_chassis_sysErr+0x26c>)
  405f4e:	4798      	blx	r3
	

/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
  405f50:	1d3b      	adds	r3, r7, #4
  405f52:	4a1e      	ldr	r2, [pc, #120]	; (405fcc <show_chassis_sysErr+0x298>)
  405f54:	461c      	mov	r4, r3
  405f56:	4615      	mov	r5, r2
  405f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405f60:	e895 0003 	ldmia.w	r5, {r0, r1}
  405f64:	e884 0003 	stmia.w	r4, {r0, r1}
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405f68:	2300      	movs	r3, #0
  405f6a:	657b      	str	r3, [r7, #84]	; 0x54
  405f6c:	e042      	b.n	405ff4 <show_chassis_sysErr+0x2c0>
	{
		if (ledBrdSide[i].maxUsageReached)
  405f6e:	4918      	ldr	r1, [pc, #96]	; (405fd0 <show_chassis_sysErr+0x29c>)
  405f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  405f72:	4613      	mov	r3, r2
  405f74:	009b      	lsls	r3, r3, #2
  405f76:	4413      	add	r3, r2
  405f78:	440b      	add	r3, r1
  405f7a:	789b      	ldrb	r3, [r3, #2]
  405f7c:	2b00      	cmp	r3, #0
  405f7e:	d029      	beq.n	405fd4 <show_chassis_sysErr+0x2a0>
		{
			strcat(str, "F ");
  405f80:	1d3b      	adds	r3, r7, #4
  405f82:	4618      	mov	r0, r3
  405f84:	4b09      	ldr	r3, [pc, #36]	; (405fac <show_chassis_sysErr+0x278>)
  405f86:	4798      	blx	r3
  405f88:	4603      	mov	r3, r0
  405f8a:	461a      	mov	r2, r3
  405f8c:	1d3b      	adds	r3, r7, #4
  405f8e:	4413      	add	r3, r2
  405f90:	4a07      	ldr	r2, [pc, #28]	; (405fb0 <show_chassis_sysErr+0x27c>)
  405f92:	8811      	ldrh	r1, [r2, #0]
  405f94:	7892      	ldrb	r2, [r2, #2]
  405f96:	8019      	strh	r1, [r3, #0]
  405f98:	709a      	strb	r2, [r3, #2]
  405f9a:	e028      	b.n	405fee <show_chassis_sysErr+0x2ba>
  405f9c:	0040cb4c 	.word	0x0040cb4c
  405fa0:	004026b1 	.word	0x004026b1
  405fa4:	0040cb68 	.word	0x0040cb68
  405fa8:	204016b4 	.word	0x204016b4
  405fac:	0040702d 	.word	0x0040702d
  405fb0:	0040cb90 	.word	0x0040cb90
  405fb4:	0040cb94 	.word	0x0040cb94
  405fb8:	0040c6d8 	.word	0x0040c6d8
  405fbc:	0040cb98 	.word	0x0040cb98
  405fc0:	0040cbc0 	.word	0x0040cbc0
  405fc4:	204009b9 	.word	0x204009b9
  405fc8:	0040cbe8 	.word	0x0040cbe8
  405fcc:	0040cc10 	.word	0x0040cc10
  405fd0:	204016c8 	.word	0x204016c8
//DEBUG 24jun15 need to function even with these errors for demo purposes			electroclaveState = STATE_CHASSIS_ERROR;
		}
		else
		{
			strcat(str, "P ");
  405fd4:	1d3b      	adds	r3, r7, #4
  405fd6:	4618      	mov	r0, r3
  405fd8:	4b27      	ldr	r3, [pc, #156]	; (406078 <show_chassis_sysErr+0x344>)
  405fda:	4798      	blx	r3
  405fdc:	4603      	mov	r3, r0
  405fde:	461a      	mov	r2, r3
  405fe0:	1d3b      	adds	r3, r7, #4
  405fe2:	4413      	add	r3, r2
  405fe4:	4a25      	ldr	r2, [pc, #148]	; (40607c <show_chassis_sysErr+0x348>)
  405fe6:	8811      	ldrh	r1, [r2, #0]
  405fe8:	7892      	ldrb	r2, [r2, #2]
  405fea:	8019      	strh	r1, [r3, #0]
  405fec:	709a      	strb	r2, [r3, #2]
/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
  405fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405ff0:	3301      	adds	r3, #1
  405ff2:	657b      	str	r3, [r7, #84]	; 0x54
  405ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  405ff6:	2b07      	cmp	r3, #7
  405ff8:	ddb9      	ble.n	405f6e <show_chassis_sysErr+0x23a>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
  405ffa:	1d3b      	adds	r3, r7, #4
  405ffc:	4618      	mov	r0, r3
  405ffe:	4b20      	ldr	r3, [pc, #128]	; (406080 <show_chassis_sysErr+0x34c>)
  406000:	4798      	blx	r3
	print_ecdbg("\r\n");
  406002:	4820      	ldr	r0, [pc, #128]	; (406084 <show_chassis_sysErr+0x350>)
  406004:	4b1e      	ldr	r3, [pc, #120]	; (406080 <show_chassis_sysErr+0x34c>)
  406006:	4798      	blx	r3

/*
 * Usage Struct Full
 */

	sprintf(str, "Usage Struct Open Slots                ");
  406008:	1d3b      	adds	r3, r7, #4
  40600a:	4a1f      	ldr	r2, [pc, #124]	; (406088 <show_chassis_sysErr+0x354>)
  40600c:	461c      	mov	r4, r3
  40600e:	4615      	mov	r5, r2
  406010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  406012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  406016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  406018:	e895 0003 	ldmia.w	r5, {r0, r1}
  40601c:	e884 0003 	stmia.w	r4, {r0, r1}
	if (sysErr.usageStructsFull == SE_FAIL)
  406020:	4b1a      	ldr	r3, [pc, #104]	; (40608c <show_chassis_sysErr+0x358>)
  406022:	7b9b      	ldrb	r3, [r3, #14]
  406024:	2b01      	cmp	r3, #1
  406026:	d110      	bne.n	40604a <show_chassis_sysErr+0x316>
	{
		strcat(str, "F \r\n");
  406028:	1d3b      	adds	r3, r7, #4
  40602a:	4618      	mov	r0, r3
  40602c:	4b12      	ldr	r3, [pc, #72]	; (406078 <show_chassis_sysErr+0x344>)
  40602e:	4798      	blx	r3
  406030:	4603      	mov	r3, r0
  406032:	461a      	mov	r2, r3
  406034:	1d3b      	adds	r3, r7, #4
  406036:	4413      	add	r3, r2
  406038:	4a15      	ldr	r2, [pc, #84]	; (406090 <show_chassis_sysErr+0x35c>)
  40603a:	6810      	ldr	r0, [r2, #0]
  40603c:	6018      	str	r0, [r3, #0]
  40603e:	7912      	ldrb	r2, [r2, #4]
  406040:	711a      	strb	r2, [r3, #4]
		electroclaveState = STATE_CHASSIS_ERROR;
  406042:	4b14      	ldr	r3, [pc, #80]	; (406094 <show_chassis_sysErr+0x360>)
  406044:	2207      	movs	r2, #7
  406046:	701a      	strb	r2, [r3, #0]
  406048:	e00c      	b.n	406064 <show_chassis_sysErr+0x330>
	}
	else
	{
		strcat(str, "P \r\n");
  40604a:	1d3b      	adds	r3, r7, #4
  40604c:	4618      	mov	r0, r3
  40604e:	4b0a      	ldr	r3, [pc, #40]	; (406078 <show_chassis_sysErr+0x344>)
  406050:	4798      	blx	r3
  406052:	4603      	mov	r3, r0
  406054:	461a      	mov	r2, r3
  406056:	1d3b      	adds	r3, r7, #4
  406058:	4413      	add	r3, r2
  40605a:	4a0f      	ldr	r2, [pc, #60]	; (406098 <show_chassis_sysErr+0x364>)
  40605c:	6810      	ldr	r0, [r2, #0]
  40605e:	6018      	str	r0, [r3, #0]
  406060:	7912      	ldrb	r2, [r2, #4]
  406062:	711a      	strb	r2, [r3, #4]
	}
	
	print_ecdbg(str);
  406064:	1d3b      	adds	r3, r7, #4
  406066:	4618      	mov	r0, r3
  406068:	4b05      	ldr	r3, [pc, #20]	; (406080 <show_chassis_sysErr+0x34c>)
  40606a:	4798      	blx	r3
	print_ecdbg("\r\n");
  40606c:	4805      	ldr	r0, [pc, #20]	; (406084 <show_chassis_sysErr+0x350>)
  40606e:	4b04      	ldr	r3, [pc, #16]	; (406080 <show_chassis_sysErr+0x34c>)
  406070:	4798      	blx	r3

}
  406072:	3768      	adds	r7, #104	; 0x68
  406074:	46bd      	mov	sp, r7
  406076:	bdb0      	pop	{r4, r5, r7, pc}
  406078:	0040702d 	.word	0x0040702d
  40607c:	0040cb94 	.word	0x0040cb94
  406080:	004026b1 	.word	0x004026b1
  406084:	0040c6d8 	.word	0x0040c6d8
  406088:	0040cc38 	.word	0x0040cc38
  40608c:	204016b4 	.word	0x204016b4
  406090:	0040cc60 	.word	0x0040cc60
  406094:	204009b9 	.word	0x204009b9
  406098:	0040cc68 	.word	0x0040cc68

0040609c <show_chassis_all_LED_boards>:

void show_chassis_all_LED_boards(void);
void show_chassis_all_LED_boards(void)
{
  40609c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40609e:	b09d      	sub	sp, #116	; 0x74
  4060a0:	af06      	add	r7, sp, #24
	char str[80];
	int i = 0;
  4060a2:	2300      	movs	r3, #0
  4060a4:	657b      	str	r3, [r7, #84]	; 0x54

	print_ecdbg("\r\n***LED BOARDS MASTER LIST***\r\n\r\n");
  4060a6:	483a      	ldr	r0, [pc, #232]	; (406190 <show_chassis_all_LED_boards+0xf4>)
  4060a8:	4b3a      	ldr	r3, [pc, #232]	; (406194 <show_chassis_all_LED_boards+0xf8>)
  4060aa:	4798      	blx	r3
	
	while(1)
	{
		if (sf[i].slotFilled)
  4060ac:	4a3a      	ldr	r2, [pc, #232]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060b0:	00db      	lsls	r3, r3, #3
  4060b2:	4413      	add	r3, r2
  4060b4:	799b      	ldrb	r3, [r3, #6]
  4060b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4060ba:	b2db      	uxtb	r3, r3
  4060bc:	2b00      	cmp	r3, #0
  4060be:	d05c      	beq.n	40617a <show_chassis_all_LED_boards+0xde>
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060c0:	4a35      	ldr	r2, [pc, #212]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  4060c8:	461e      	mov	r6, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060ca:	4a33      	ldr	r2, [pc, #204]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060ce:	00db      	lsls	r3, r3, #3
  4060d0:	4413      	add	r3, r2
  4060d2:	785b      	ldrb	r3, [r3, #1]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  4060d4:	461d      	mov	r5, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060d6:	4a30      	ldr	r2, [pc, #192]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060da:	00db      	lsls	r3, r3, #3
  4060dc:	4413      	add	r3, r2
  4060de:	789b      	ldrb	r3, [r3, #2]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  4060e0:	461c      	mov	r4, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060e2:	4a2d      	ldr	r2, [pc, #180]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060e6:	00db      	lsls	r3, r3, #3
  4060e8:	4413      	add	r3, r2
  4060ea:	78db      	ldrb	r3, [r3, #3]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  4060ec:	4618      	mov	r0, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060ee:	4a2a      	ldr	r2, [pc, #168]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060f2:	00db      	lsls	r3, r3, #3
  4060f4:	4413      	add	r3, r2
  4060f6:	791b      	ldrb	r3, [r3, #4]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  4060f8:	4619      	mov	r1, r3
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
  4060fa:	4a27      	ldr	r2, [pc, #156]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  4060fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4060fe:	00db      	lsls	r3, r3, #3
  406100:	4413      	add	r3, r2
  406102:	795b      	ldrb	r3, [r3, #5]
	
	while(1)
	{
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
  406104:	461a      	mov	r2, r3
  406106:	1d3b      	adds	r3, r7, #4
  406108:	9500      	str	r5, [sp, #0]
  40610a:	9401      	str	r4, [sp, #4]
  40610c:	9002      	str	r0, [sp, #8]
  40610e:	9103      	str	r1, [sp, #12]
  406110:	9204      	str	r2, [sp, #16]
  406112:	4618      	mov	r0, r3
  406114:	4921      	ldr	r1, [pc, #132]	; (40619c <show_chassis_all_LED_boards+0x100>)
  406116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
  406118:	4633      	mov	r3, r6
  40611a:	4c21      	ldr	r4, [pc, #132]	; (4061a0 <show_chassis_all_LED_boards+0x104>)
  40611c:	47a0      	blx	r4
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
			
			if (sf[i].top_botn)
  40611e:	4a1e      	ldr	r2, [pc, #120]	; (406198 <show_chassis_all_LED_boards+0xfc>)
  406120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  406122:	00db      	lsls	r3, r3, #3
  406124:	4413      	add	r3, r2
  406126:	799b      	ldrb	r3, [r3, #6]
  406128:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40612c:	b2db      	uxtb	r3, r3
  40612e:	2b00      	cmp	r3, #0
  406130:	d00f      	beq.n	406152 <show_chassis_all_LED_boards+0xb6>
			{
				strcat(str, " TOP\r\n");
  406132:	1d3b      	adds	r3, r7, #4
  406134:	4618      	mov	r0, r3
  406136:	4b1b      	ldr	r3, [pc, #108]	; (4061a4 <show_chassis_all_LED_boards+0x108>)
  406138:	4798      	blx	r3
  40613a:	4603      	mov	r3, r0
  40613c:	461a      	mov	r2, r3
  40613e:	1d3b      	adds	r3, r7, #4
  406140:	4413      	add	r3, r2
  406142:	4a19      	ldr	r2, [pc, #100]	; (4061a8 <show_chassis_all_LED_boards+0x10c>)
  406144:	6810      	ldr	r0, [r2, #0]
  406146:	6018      	str	r0, [r3, #0]
  406148:	8891      	ldrh	r1, [r2, #4]
  40614a:	7992      	ldrb	r2, [r2, #6]
  40614c:	8099      	strh	r1, [r3, #4]
  40614e:	719a      	strb	r2, [r3, #6]
  406150:	e00e      	b.n	406170 <show_chassis_all_LED_boards+0xd4>
			}
			else
			{
				strcat(str, " BOT\r\n");
  406152:	1d3b      	adds	r3, r7, #4
  406154:	4618      	mov	r0, r3
  406156:	4b13      	ldr	r3, [pc, #76]	; (4061a4 <show_chassis_all_LED_boards+0x108>)
  406158:	4798      	blx	r3
  40615a:	4603      	mov	r3, r0
  40615c:	461a      	mov	r2, r3
  40615e:	1d3b      	adds	r3, r7, #4
  406160:	4413      	add	r3, r2
  406162:	4a12      	ldr	r2, [pc, #72]	; (4061ac <show_chassis_all_LED_boards+0x110>)
  406164:	6810      	ldr	r0, [r2, #0]
  406166:	6018      	str	r0, [r3, #0]
  406168:	8891      	ldrh	r1, [r2, #4]
  40616a:	7992      	ldrb	r2, [r2, #6]
  40616c:	8099      	strh	r1, [r3, #4]
  40616e:	719a      	strb	r2, [r3, #6]
			}
			
			print_ecdbg(str);
  406170:	1d3b      	adds	r3, r7, #4
  406172:	4618      	mov	r0, r3
  406174:	4b07      	ldr	r3, [pc, #28]	; (406194 <show_chassis_all_LED_boards+0xf8>)
  406176:	4798      	blx	r3
  406178:	e000      	b.n	40617c <show_chassis_all_LED_boards+0xe0>
		}
		else
		{
			break; //LED boards are stored contiguously, so if we hit a blank spot we are done with the entries in the list
  40617a:	e003      	b.n	406184 <show_chassis_all_LED_boards+0xe8>
		}
		i++;
  40617c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  40617e:	3301      	adds	r3, #1
  406180:	657b      	str	r3, [r7, #84]	; 0x54
		
	}
  406182:	e793      	b.n	4060ac <show_chassis_all_LED_boards+0x10>
	
	print_ecdbg("\r\n\r\n");
  406184:	480a      	ldr	r0, [pc, #40]	; (4061b0 <show_chassis_all_LED_boards+0x114>)
  406186:	4b03      	ldr	r3, [pc, #12]	; (406194 <show_chassis_all_LED_boards+0xf8>)
  406188:	4798      	blx	r3

}
  40618a:	375c      	adds	r7, #92	; 0x5c
  40618c:	46bd      	mov	sp, r7
  40618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406190:	0040cc70 	.word	0x0040cc70
  406194:	004026b1 	.word	0x004026b1
  406198:	20401344 	.word	0x20401344
  40619c:	0040cc94 	.word	0x0040cc94
  4061a0:	00406fe1 	.word	0x00406fe1
  4061a4:	0040702d 	.word	0x0040702d
  4061a8:	0040ccb4 	.word	0x0040ccb4
  4061ac:	0040ccbc 	.word	0x0040ccbc
  4061b0:	0040ccc4 	.word	0x0040ccc4

004061b4 <show_help_and_prompt>:

void show_help_and_prompt(void);
void show_help_and_prompt(void)
{
  4061b4:	b580      	push	{r7, lr}
  4061b6:	af00      	add	r7, sp, #0
	print_ecdbg("Type 'H' for help.\r\n\r\n");
  4061b8:	4801      	ldr	r0, [pc, #4]	; (4061c0 <show_help_and_prompt+0xc>)
  4061ba:	4b02      	ldr	r3, [pc, #8]	; (4061c4 <show_help_and_prompt+0x10>)
  4061bc:	4798      	blx	r3
}
  4061be:	bd80      	pop	{r7, pc}
  4061c0:	0040cccc 	.word	0x0040cccc
  4061c4:	004026b1 	.word	0x004026b1

004061c8 <service_ecdbg_input>:
char cmd[20];
unsigned char cmdIdx = 0;

void service_ecdbg_input(void);
void service_ecdbg_input(void)
{
  4061c8:	b580      	push	{r7, lr}
  4061ca:	b084      	sub	sp, #16
  4061cc:	af00      	add	r7, sp, #0
	int rx_char;
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;
  4061ce:	2300      	movs	r3, #0
  4061d0:	72fb      	strb	r3, [r7, #11]
	
	
	if (usart_is_rx_ready(BOARD_USART)) {
  4061d2:	4890      	ldr	r0, [pc, #576]	; (406414 <service_ecdbg_input+0x24c>)
  4061d4:	4b90      	ldr	r3, [pc, #576]	; (406418 <service_ecdbg_input+0x250>)
  4061d6:	4798      	blx	r3
  4061d8:	4603      	mov	r3, r0
  4061da:	2b00      	cmp	r3, #0
  4061dc:	d009      	beq.n	4061f2 <service_ecdbg_input+0x2a>
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
  4061de:	1d3b      	adds	r3, r7, #4
  4061e0:	488c      	ldr	r0, [pc, #560]	; (406414 <service_ecdbg_input+0x24c>)
  4061e2:	4619      	mov	r1, r3
  4061e4:	4b8d      	ldr	r3, [pc, #564]	; (40641c <service_ecdbg_input+0x254>)
  4061e6:	4798      	blx	r3
	{
		return;
	}


	if (rx_char == USART_FAILURE)
  4061e8:	687b      	ldr	r3, [r7, #4]
  4061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4061ee:	d102      	bne.n	4061f6 <service_ecdbg_input+0x2e>
  4061f0:	e000      	b.n	4061f4 <service_ecdbg_input+0x2c>
	if (usart_is_rx_ready(BOARD_USART)) {
		usart_read(BOARD_USART, (uint32_t *)&rx_char);
	}
	else
	{
		return;
  4061f2:	e197      	b.n	406524 <service_ecdbg_input+0x35c>


	if (rx_char == USART_FAILURE)
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
  4061f4:	e196      	b.n	406524 <service_ecdbg_input+0x35c>
	}
	if (rx_char == '\x03')
  4061f6:	687b      	ldr	r3, [r7, #4]
  4061f8:	2b03      	cmp	r3, #3
  4061fa:	d100      	bne.n	4061fe <service_ecdbg_input+0x36>
	{
		return;
  4061fc:	e192      	b.n	406524 <service_ecdbg_input+0x35c>
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
  4061fe:	687b      	ldr	r3, [r7, #4]
  406200:	2b09      	cmp	r3, #9
  406202:	dd02      	ble.n	40620a <service_ecdbg_input+0x42>
  406204:	687b      	ldr	r3, [r7, #4]
  406206:	2b7a      	cmp	r3, #122	; 0x7a
  406208:	dd00      	ble.n	40620c <service_ecdbg_input+0x44>
	{
		return; //completely out of range, ignore
  40620a:	e18b      	b.n	406524 <service_ecdbg_input+0x35c>
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  40620c:	687b      	ldr	r3, [r7, #4]
  40620e:	2b0d      	cmp	r3, #13
  406210:	d017      	beq.n	406242 <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
  406212:	687b      	ldr	r3, [r7, #4]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
  406214:	2b0a      	cmp	r3, #10
  406216:	d014      	beq.n	406242 <service_ecdbg_input+0x7a>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  406218:	687b      	ldr	r3, [r7, #4]
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
  40621a:	2b20      	cmp	r3, #32
  40621c:	d011      	beq.n	406242 <service_ecdbg_input+0x7a>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  40621e:	687b      	ldr	r3, [r7, #4]
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
  406220:	2b2f      	cmp	r3, #47	; 0x2f
  406222:	dd02      	ble.n	40622a <service_ecdbg_input+0x62>
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  406224:	687b      	ldr	r3, [r7, #4]
  406226:	2b39      	cmp	r3, #57	; 0x39
  406228:	dd0b      	ble.n	406242 <service_ecdbg_input+0x7a>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  40622a:	687b      	ldr	r3, [r7, #4]
	
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
  40622c:	2b40      	cmp	r3, #64	; 0x40
  40622e:	dd02      	ble.n	406236 <service_ecdbg_input+0x6e>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  406230:	687b      	ldr	r3, [r7, #4]
  406232:	2b5a      	cmp	r3, #90	; 0x5a
  406234:	dd05      	ble.n	406242 <service_ecdbg_input+0x7a>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  406236:	687b      	ldr	r3, [r7, #4]
	
	if ((rx_char == 0x0d) ||							//carriage return
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
  406238:	2b60      	cmp	r3, #96	; 0x60
  40623a:	dd1b      	ble.n	406274 <service_ecdbg_input+0xac>
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
  40623c:	687b      	ldr	r3, [r7, #4]
  40623e:	2b7a      	cmp	r3, #122	; 0x7a
  406240:	dc18      	bgt.n	406274 <service_ecdbg_input+0xac>
	{
		if (rx_char == 0x50)
  406242:	687b      	ldr	r3, [r7, #4]
  406244:	2b50      	cmp	r3, #80	; 0x50
  406246:	d100      	bne.n	40624a <service_ecdbg_input+0x82>
		{
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
  406248:	e16c      	b.n	406524 <service_ecdbg_input+0x35c>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
  40624a:	bf00      	nop
	{
		return;
	}


	cmd[cmdIdx++] = rx_char;
  40624c:	4b74      	ldr	r3, [pc, #464]	; (406420 <service_ecdbg_input+0x258>)
  40624e:	781b      	ldrb	r3, [r3, #0]
  406250:	1c5a      	adds	r2, r3, #1
  406252:	b2d1      	uxtb	r1, r2
  406254:	4a72      	ldr	r2, [pc, #456]	; (406420 <service_ecdbg_input+0x258>)
  406256:	7011      	strb	r1, [r2, #0]
  406258:	461a      	mov	r2, r3
  40625a:	687b      	ldr	r3, [r7, #4]
  40625c:	b2d9      	uxtb	r1, r3
  40625e:	4b71      	ldr	r3, [pc, #452]	; (406424 <service_ecdbg_input+0x25c>)
  406260:	5499      	strb	r1, [r3, r2]
	
	print_ecdbg(rx_char);
  406262:	687b      	ldr	r3, [r7, #4]
  406264:	4618      	mov	r0, r3
  406266:	4b70      	ldr	r3, [pc, #448]	; (406428 <service_ecdbg_input+0x260>)
  406268:	4798      	blx	r3
	if (rx_char == '\r')
  40626a:	687b      	ldr	r3, [r7, #4]
  40626c:	2b0d      	cmp	r3, #13
  40626e:	f040 8159 	bne.w	406524 <service_ecdbg_input+0x35c>
  406272:	e000      	b.n	406276 <service_ecdbg_input+0xae>
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
		}
	}
	else
	{
		return;
  406274:	e156      	b.n	406524 <service_ecdbg_input+0x35c>
	cmd[cmdIdx++] = rx_char;
	
	print_ecdbg(rx_char);
	if (rx_char == '\r')
	{ 
		if (cmdIdx == 2)
  406276:	4b6a      	ldr	r3, [pc, #424]	; (406420 <service_ecdbg_input+0x258>)
  406278:	781b      	ldrb	r3, [r3, #0]
  40627a:	2b02      	cmp	r3, #2
  40627c:	f040 80a5 	bne.w	4063ca <service_ecdbg_input+0x202>
		{
			switch(cmd[0])
  406280:	4b68      	ldr	r3, [pc, #416]	; (406424 <service_ecdbg_input+0x25c>)
  406282:	781b      	ldrb	r3, [r3, #0]
  406284:	3b44      	subs	r3, #68	; 0x44
  406286:	2b2f      	cmp	r3, #47	; 0x2f
  406288:	f200 8145 	bhi.w	406516 <service_ecdbg_input+0x34e>
  40628c:	a201      	add	r2, pc, #4	; (adr r2, 406294 <service_ecdbg_input+0xcc>)
  40628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406292:	bf00      	nop
  406294:	0040638d 	.word	0x0040638d
  406298:	00406517 	.word	0x00406517
  40629c:	00406517 	.word	0x00406517
  4062a0:	00406517 	.word	0x00406517
  4062a4:	00406355 	.word	0x00406355
  4062a8:	00406517 	.word	0x00406517
  4062ac:	00406517 	.word	0x00406517
  4062b0:	004063bb 	.word	0x004063bb
  4062b4:	00406517 	.word	0x00406517
  4062b8:	00406517 	.word	0x00406517
  4062bc:	00406517 	.word	0x00406517
  4062c0:	00406517 	.word	0x00406517
  4062c4:	00406517 	.word	0x00406517
  4062c8:	00406517 	.word	0x00406517
  4062cc:	00406517 	.word	0x00406517
  4062d0:	004063a5 	.word	0x004063a5
  4062d4:	00406517 	.word	0x00406517
  4062d8:	00406517 	.word	0x00406517
  4062dc:	00406517 	.word	0x00406517
  4062e0:	00406517 	.word	0x00406517
  4062e4:	00406517 	.word	0x00406517
  4062e8:	00406517 	.word	0x00406517
  4062ec:	00406517 	.word	0x00406517
  4062f0:	00406517 	.word	0x00406517
  4062f4:	00406517 	.word	0x00406517
  4062f8:	00406517 	.word	0x00406517
  4062fc:	00406517 	.word	0x00406517
  406300:	00406517 	.word	0x00406517
  406304:	00406517 	.word	0x00406517
  406308:	00406517 	.word	0x00406517
  40630c:	00406517 	.word	0x00406517
  406310:	00406517 	.word	0x00406517
  406314:	0040638d 	.word	0x0040638d
  406318:	00406517 	.word	0x00406517
  40631c:	00406517 	.word	0x00406517
  406320:	00406517 	.word	0x00406517
  406324:	00406355 	.word	0x00406355
  406328:	00406517 	.word	0x00406517
  40632c:	00406517 	.word	0x00406517
  406330:	004063bb 	.word	0x004063bb
  406334:	00406517 	.word	0x00406517
  406338:	00406517 	.word	0x00406517
  40633c:	00406517 	.word	0x00406517
  406340:	00406517 	.word	0x00406517
  406344:	00406517 	.word	0x00406517
  406348:	00406517 	.word	0x00406517
  40634c:	00406517 	.word	0x00406517
  406350:	004063a5 	.word	0x004063a5
			{
				case 'H':
				case 'h':
					print_ecdbg("\r\n**-----------------**\r\n");
  406354:	4835      	ldr	r0, [pc, #212]	; (40642c <service_ecdbg_input+0x264>)
  406356:	4b34      	ldr	r3, [pc, #208]	; (406428 <service_ecdbg_input+0x260>)
  406358:	4798      	blx	r3
					print_ecdbg("  Electroclave HELP\r\n");
  40635a:	4835      	ldr	r0, [pc, #212]	; (406430 <service_ecdbg_input+0x268>)
  40635c:	4b32      	ldr	r3, [pc, #200]	; (406428 <service_ecdbg_input+0x260>)
  40635e:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  406360:	4834      	ldr	r0, [pc, #208]	; (406434 <service_ecdbg_input+0x26c>)
  406362:	4b31      	ldr	r3, [pc, #196]	; (406428 <service_ecdbg_input+0x260>)
  406364:	4798      	blx	r3
					print_ecdbg("    H        - This help menu\r\n");
  406366:	4834      	ldr	r0, [pc, #208]	; (406438 <service_ecdbg_input+0x270>)
  406368:	4b2f      	ldr	r3, [pc, #188]	; (406428 <service_ecdbg_input+0x260>)
  40636a:	4798      	blx	r3
					print_ecdbg("    D        - Show current DTE setting\r\n");
  40636c:	4833      	ldr	r0, [pc, #204]	; (40643c <service_ecdbg_input+0x274>)
  40636e:	4b2e      	ldr	r3, [pc, #184]	; (406428 <service_ecdbg_input+0x260>)
  406370:	4798      	blx	r3
					print_ecdbg("    D  xx    - Change initial DTE to xx minutes where 2 >= xx >= 59.\r\n");
  406372:	4833      	ldr	r0, [pc, #204]	; (406440 <service_ecdbg_input+0x278>)
  406374:	4b2c      	ldr	r3, [pc, #176]	; (406428 <service_ecdbg_input+0x260>)
  406376:	4798      	blx	r3
					print_ecdbg("    S        - System status\r\n");
  406378:	4832      	ldr	r0, [pc, #200]	; (406444 <service_ecdbg_input+0x27c>)
  40637a:	4b2b      	ldr	r3, [pc, #172]	; (406428 <service_ecdbg_input+0x260>)
  40637c:	4798      	blx	r3
					print_ecdbg("**-----------------**\r\n");
  40637e:	482d      	ldr	r0, [pc, #180]	; (406434 <service_ecdbg_input+0x26c>)
  406380:	4b29      	ldr	r3, [pc, #164]	; (406428 <service_ecdbg_input+0x260>)
  406382:	4798      	blx	r3
					print_ecdbg(">");
  406384:	4830      	ldr	r0, [pc, #192]	; (406448 <service_ecdbg_input+0x280>)
  406386:	4b28      	ldr	r3, [pc, #160]	; (406428 <service_ecdbg_input+0x260>)
  406388:	4798      	blx	r3
					break;
  40638a:	e01d      	b.n	4063c8 <service_ecdbg_input+0x200>
				case 'D':
				case 'd':
					print_ecdbg("Initial DTE set to: ");
  40638c:	482f      	ldr	r0, [pc, #188]	; (40644c <service_ecdbg_input+0x284>)
  40638e:	4b26      	ldr	r3, [pc, #152]	; (406428 <service_ecdbg_input+0x260>)
  406390:	4798      	blx	r3
					print_ecdbg_num(c.initialDTE);
  406392:	4b2f      	ldr	r3, [pc, #188]	; (406450 <service_ecdbg_input+0x288>)
  406394:	781b      	ldrb	r3, [r3, #0]
  406396:	4618      	mov	r0, r3
  406398:	4b2e      	ldr	r3, [pc, #184]	; (406454 <service_ecdbg_input+0x28c>)
  40639a:	4798      	blx	r3
					print_ecdbg(" minutes.\r\n>");
  40639c:	482e      	ldr	r0, [pc, #184]	; (406458 <service_ecdbg_input+0x290>)
  40639e:	4b22      	ldr	r3, [pc, #136]	; (406428 <service_ecdbg_input+0x260>)
  4063a0:	4798      	blx	r3
					break;
  4063a2:	e011      	b.n	4063c8 <service_ecdbg_input+0x200>
				case 'S':
				case 's':
					show_sw_version();
  4063a4:	4b2d      	ldr	r3, [pc, #180]	; (40645c <service_ecdbg_input+0x294>)
  4063a6:	4798      	blx	r3
					show_chassis_status_info();
  4063a8:	4b2d      	ldr	r3, [pc, #180]	; (406460 <service_ecdbg_input+0x298>)
  4063aa:	4798      	blx	r3
					show_chassis_sysErr();
  4063ac:	4b2d      	ldr	r3, [pc, #180]	; (406464 <service_ecdbg_input+0x29c>)
  4063ae:	4798      	blx	r3
					show_chassis_all_LED_boards();
  4063b0:	4b2d      	ldr	r3, [pc, #180]	; (406468 <service_ecdbg_input+0x2a0>)
  4063b2:	4798      	blx	r3
					show_help_and_prompt();
  4063b4:	4b2d      	ldr	r3, [pc, #180]	; (40646c <service_ecdbg_input+0x2a4>)
  4063b6:	4798      	blx	r3
					break;
  4063b8:	e006      	b.n	4063c8 <service_ecdbg_input+0x200>
				case 'K':
				case 'k':
					print_ecdbg("Valid Keypad Code\r\n");
  4063ba:	482d      	ldr	r0, [pc, #180]	; (406470 <service_ecdbg_input+0x2a8>)
  4063bc:	4b1a      	ldr	r3, [pc, #104]	; (406428 <service_ecdbg_input+0x260>)
  4063be:	4798      	blx	r3
					validKeypadCode = 1;
  4063c0:	4b2c      	ldr	r3, [pc, #176]	; (406474 <service_ecdbg_input+0x2ac>)
  4063c2:	2201      	movs	r2, #1
  4063c4:	701a      	strb	r2, [r3, #0]
					break;
  4063c6:	bf00      	nop
  4063c8:	e0a5      	b.n	406516 <service_ecdbg_input+0x34e>
			}
		}
		else if (cmd[1] == ' ')
  4063ca:	4b16      	ldr	r3, [pc, #88]	; (406424 <service_ecdbg_input+0x25c>)
  4063cc:	785b      	ldrb	r3, [r3, #1]
  4063ce:	2b20      	cmp	r3, #32
  4063d0:	f040 80a1 	bne.w	406516 <service_ecdbg_input+0x34e>
		{
			if ((cmd[0] == 'D') || (cmd[0] == 'd'))
  4063d4:	4b13      	ldr	r3, [pc, #76]	; (406424 <service_ecdbg_input+0x25c>)
  4063d6:	781b      	ldrb	r3, [r3, #0]
  4063d8:	2b44      	cmp	r3, #68	; 0x44
  4063da:	d004      	beq.n	4063e6 <service_ecdbg_input+0x21e>
  4063dc:	4b11      	ldr	r3, [pc, #68]	; (406424 <service_ecdbg_input+0x25c>)
  4063de:	781b      	ldrb	r3, [r3, #0]
  4063e0:	2b64      	cmp	r3, #100	; 0x64
  4063e2:	f040 8098 	bne.w	406516 <service_ecdbg_input+0x34e>
			{
				if (cmdIdx == 4)
  4063e6:	4b0e      	ldr	r3, [pc, #56]	; (406420 <service_ecdbg_input+0x258>)
  4063e8:	781b      	ldrb	r3, [r3, #0]
  4063ea:	2b04      	cmp	r3, #4
  4063ec:	d146      	bne.n	40647c <service_ecdbg_input+0x2b4>
				{
					if (isdigit(cmd[2]))
  4063ee:	4b22      	ldr	r3, [pc, #136]	; (406478 <service_ecdbg_input+0x2b0>)
  4063f0:	681a      	ldr	r2, [r3, #0]
  4063f2:	4b0c      	ldr	r3, [pc, #48]	; (406424 <service_ecdbg_input+0x25c>)
  4063f4:	789b      	ldrb	r3, [r3, #2]
  4063f6:	3301      	adds	r3, #1
  4063f8:	4413      	add	r3, r2
  4063fa:	781b      	ldrb	r3, [r3, #0]
  4063fc:	f003 0304 	and.w	r3, r3, #4
  406400:	2b00      	cmp	r3, #0
  406402:	d067      	beq.n	4064d4 <service_ecdbg_input+0x30c>
					{
						tmpNewDte = cmd[2] - 0x30;
  406404:	4b07      	ldr	r3, [pc, #28]	; (406424 <service_ecdbg_input+0x25c>)
  406406:	789b      	ldrb	r3, [r3, #2]
  406408:	3b30      	subs	r3, #48	; 0x30
  40640a:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  40640c:	2301      	movs	r3, #1
  40640e:	72fb      	strb	r3, [r7, #11]
  406410:	e060      	b.n	4064d4 <service_ecdbg_input+0x30c>
  406412:	bf00      	nop
  406414:	40024000 	.word	0x40024000
  406418:	004022b5 	.word	0x004022b5
  40641c:	00402311 	.word	0x00402311
  406420:	204009d1 	.word	0x204009d1
  406424:	20401824 	.word	0x20401824
  406428:	004026b1 	.word	0x004026b1
  40642c:	0040cce4 	.word	0x0040cce4
  406430:	0040cd00 	.word	0x0040cd00
  406434:	0040cd18 	.word	0x0040cd18
  406438:	0040cd30 	.word	0x0040cd30
  40643c:	0040cd50 	.word	0x0040cd50
  406440:	0040cd7c 	.word	0x0040cd7c
  406444:	0040cdc4 	.word	0x0040cdc4
  406448:	0040cde4 	.word	0x0040cde4
  40644c:	0040cde8 	.word	0x0040cde8
  406450:	204016c4 	.word	0x204016c4
  406454:	00404481 	.word	0x00404481
  406458:	0040ce00 	.word	0x0040ce00
  40645c:	0040593d 	.word	0x0040593d
  406460:	00405965 	.word	0x00405965
  406464:	00405d35 	.word	0x00405d35
  406468:	0040609d 	.word	0x0040609d
  40646c:	004061b5 	.word	0x004061b5
  406470:	0040ce10 	.word	0x0040ce10
  406474:	204009cc 	.word	0x204009cc
  406478:	20400090 	.word	0x20400090
					}					
				}
				else if (cmdIdx == 5)
  40647c:	4b2b      	ldr	r3, [pc, #172]	; (40652c <service_ecdbg_input+0x364>)
  40647e:	781b      	ldrb	r3, [r3, #0]
  406480:	2b05      	cmp	r3, #5
  406482:	d127      	bne.n	4064d4 <service_ecdbg_input+0x30c>
				{
					if (isdigit(cmd[2]) && (isdigit(cmd[3])))
  406484:	4b2a      	ldr	r3, [pc, #168]	; (406530 <service_ecdbg_input+0x368>)
  406486:	681a      	ldr	r2, [r3, #0]
  406488:	4b2a      	ldr	r3, [pc, #168]	; (406534 <service_ecdbg_input+0x36c>)
  40648a:	789b      	ldrb	r3, [r3, #2]
  40648c:	3301      	adds	r3, #1
  40648e:	4413      	add	r3, r2
  406490:	781b      	ldrb	r3, [r3, #0]
  406492:	f003 0304 	and.w	r3, r3, #4
  406496:	2b00      	cmp	r3, #0
  406498:	d01c      	beq.n	4064d4 <service_ecdbg_input+0x30c>
  40649a:	4b25      	ldr	r3, [pc, #148]	; (406530 <service_ecdbg_input+0x368>)
  40649c:	681a      	ldr	r2, [r3, #0]
  40649e:	4b25      	ldr	r3, [pc, #148]	; (406534 <service_ecdbg_input+0x36c>)
  4064a0:	78db      	ldrb	r3, [r3, #3]
  4064a2:	3301      	adds	r3, #1
  4064a4:	4413      	add	r3, r2
  4064a6:	781b      	ldrb	r3, [r3, #0]
  4064a8:	f003 0304 	and.w	r3, r3, #4
  4064ac:	2b00      	cmp	r3, #0
  4064ae:	d011      	beq.n	4064d4 <service_ecdbg_input+0x30c>
					{
						tmpNewDte = (cmd[2]-0x30) * 10;
  4064b0:	4b20      	ldr	r3, [pc, #128]	; (406534 <service_ecdbg_input+0x36c>)
  4064b2:	789b      	ldrb	r3, [r3, #2]
  4064b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4064b8:	4613      	mov	r3, r2
  4064ba:	009b      	lsls	r3, r3, #2
  4064bc:	4413      	add	r3, r2
  4064be:	005b      	lsls	r3, r3, #1
  4064c0:	60fb      	str	r3, [r7, #12]
						tmpNewDte += (cmd[3] - 0x30);
  4064c2:	4b1c      	ldr	r3, [pc, #112]	; (406534 <service_ecdbg_input+0x36c>)
  4064c4:	78db      	ldrb	r3, [r3, #3]
  4064c6:	461a      	mov	r2, r3
  4064c8:	68fb      	ldr	r3, [r7, #12]
  4064ca:	4413      	add	r3, r2
  4064cc:	3b30      	subs	r3, #48	; 0x30
  4064ce:	60fb      	str	r3, [r7, #12]
						tryToChangeDte = 1;
  4064d0:	2301      	movs	r3, #1
  4064d2:	72fb      	strb	r3, [r7, #11]
					}
				}
				if (tryToChangeDte)
  4064d4:	7afb      	ldrb	r3, [r7, #11]
  4064d6:	2b00      	cmp	r3, #0
  4064d8:	d01d      	beq.n	406516 <service_ecdbg_input+0x34e>
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
  4064da:	68fb      	ldr	r3, [r7, #12]
  4064dc:	2b3b      	cmp	r3, #59	; 0x3b
  4064de:	d814      	bhi.n	40650a <service_ecdbg_input+0x342>
  4064e0:	68fb      	ldr	r3, [r7, #12]
  4064e2:	2b01      	cmp	r3, #1
  4064e4:	d911      	bls.n	40650a <service_ecdbg_input+0x342>
					{
						print_ecdbg("Initial DTE now set to: ");
  4064e6:	4814      	ldr	r0, [pc, #80]	; (406538 <service_ecdbg_input+0x370>)
  4064e8:	4b14      	ldr	r3, [pc, #80]	; (40653c <service_ecdbg_input+0x374>)
  4064ea:	4798      	blx	r3
						print_ecdbg_num(tmpNewDte);
  4064ec:	68f8      	ldr	r0, [r7, #12]
  4064ee:	4b14      	ldr	r3, [pc, #80]	; (406540 <service_ecdbg_input+0x378>)
  4064f0:	4798      	blx	r3
						print_ecdbg("\r\n>");
  4064f2:	4814      	ldr	r0, [pc, #80]	; (406544 <service_ecdbg_input+0x37c>)
  4064f4:	4b11      	ldr	r3, [pc, #68]	; (40653c <service_ecdbg_input+0x374>)
  4064f6:	4798      	blx	r3
						
						c.initialDTE = tmpNewDte;
  4064f8:	68fb      	ldr	r3, [r7, #12]
  4064fa:	b2da      	uxtb	r2, r3
  4064fc:	4b12      	ldr	r3, [pc, #72]	; (406548 <service_ecdbg_input+0x380>)
  4064fe:	701a      	strb	r2, [r3, #0]
						
						store_config();
  406500:	4b12      	ldr	r3, [pc, #72]	; (40654c <service_ecdbg_input+0x384>)
  406502:	4798      	blx	r3
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
  406504:	4b11      	ldr	r3, [pc, #68]	; (40654c <service_ecdbg_input+0x384>)
  406506:	4798      	blx	r3
  406508:	e005      	b.n	406516 <service_ecdbg_input+0x34e>
						
					}
					else
					{
						print_ecdbg("Error. Initial DTE not modified. \r\n");
  40650a:	4811      	ldr	r0, [pc, #68]	; (406550 <service_ecdbg_input+0x388>)
  40650c:	4b0b      	ldr	r3, [pc, #44]	; (40653c <service_ecdbg_input+0x374>)
  40650e:	4798      	blx	r3
						print_ecdbg("Must be a value between 2 and 59.\r\n>");
  406510:	4810      	ldr	r0, [pc, #64]	; (406554 <service_ecdbg_input+0x38c>)
  406512:	4b0a      	ldr	r3, [pc, #40]	; (40653c <service_ecdbg_input+0x374>)
  406514:	4798      	blx	r3
				}
			}
		}
		
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
  406516:	480b      	ldr	r0, [pc, #44]	; (406544 <service_ecdbg_input+0x37c>)
  406518:	4b08      	ldr	r3, [pc, #32]	; (40653c <service_ecdbg_input+0x374>)
  40651a:	4798      	blx	r3
		cmdIdx = 0;
  40651c:	4b03      	ldr	r3, [pc, #12]	; (40652c <service_ecdbg_input+0x364>)
  40651e:	2200      	movs	r2, #0
  406520:	701a      	strb	r2, [r3, #0]
		return;
  406522:	bf00      	nop
	}
}
  406524:	3710      	adds	r7, #16
  406526:	46bd      	mov	sp, r7
  406528:	bd80      	pop	{r7, pc}
  40652a:	bf00      	nop
  40652c:	204009d1 	.word	0x204009d1
  406530:	20400090 	.word	0x20400090
  406534:	20401824 	.word	0x20401824
  406538:	0040ce24 	.word	0x0040ce24
  40653c:	004026b1 	.word	0x004026b1
  406540:	00404481 	.word	0x00404481
  406544:	0040ce40 	.word	0x0040ce40
  406548:	204016c4 	.word	0x204016c4
  40654c:	00405469 	.word	0x00405469
  406550:	0040ce44 	.word	0x0040ce44
  406554:	0040ce68 	.word	0x0040ce68

00406558 <main>:


/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void){
  406558:	b590      	push	{r4, r7, lr}
  40655a:	b099      	sub	sp, #100	; 0x64
  40655c:	af00      	add	r7, sp, #0
	static unsigned char displayIdx = 0;
	char mainStr[80];
	
	/* Initialize the SAM system. */
	sysclk_init();
  40655e:	4b9b      	ldr	r3, [pc, #620]	; (4067cc <main+0x274>)
  406560:	4798      	blx	r3
	board_init();
  406562:	4b9b      	ldr	r3, [pc, #620]	; (4067d0 <main+0x278>)
  406564:	4798      	blx	r3

	init_io();
  406566:	4b9b      	ldr	r3, [pc, #620]	; (4067d4 <main+0x27c>)
  406568:	4798      	blx	r3
	
	/* 1ms tick. */
	configure_systick();
  40656a:	4b9b      	ldr	r3, [pc, #620]	; (4067d8 <main+0x280>)
  40656c:	4798      	blx	r3

	/* Configure UART for blue scrolling display */
	configure_console();
  40656e:	4b9b      	ldr	r3, [pc, #620]	; (4067dc <main+0x284>)
  406570:	4798      	blx	r3

	/* Configure USART. */
	configure_usart();
  406572:	4b9b      	ldr	r3, [pc, #620]	; (4067e0 <main+0x288>)
  406574:	4798      	blx	r3

	init_sysErr();
  406576:	4b9b      	ldr	r3, [pc, #620]	; (4067e4 <main+0x28c>)
  406578:	4798      	blx	r3
	
	init_shelf_n_ledBrd_structs();
  40657a:	4b9b      	ldr	r3, [pc, #620]	; (4067e8 <main+0x290>)
  40657c:	4798      	blx	r3
	read_led_board_serial_ids();
  40657e:	4b9b      	ldr	r3, [pc, #620]	; (4067ec <main+0x294>)
  406580:	4798      	blx	r3

	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(BOARD_USART);
  406582:	489b      	ldr	r0, [pc, #620]	; (4067f0 <main+0x298>)
  406584:	4b9b      	ldr	r3, [pc, #620]	; (4067f4 <main+0x29c>)
  406586:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  406588:	4899      	ldr	r0, [pc, #612]	; (4067f0 <main+0x298>)
  40658a:	4b9b      	ldr	r3, [pc, #620]	; (4067f8 <main+0x2a0>)
  40658c:	4798      	blx	r3

	show_sw_version();
  40658e:	4b9b      	ldr	r3, [pc, #620]	; (4067fc <main+0x2a4>)
  406590:	4798      	blx	r3

	// Print Startup Message
	display_text(IDX_READY);
  406592:	2000      	movs	r0, #0
  406594:	4b9a      	ldr	r3, [pc, #616]	; (406800 <main+0x2a8>)
  406596:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_HIGH); //make sure outputs are disabled at the chip level
  406598:	2001      	movs	r0, #1
  40659a:	2101      	movs	r1, #1
  40659c:	4b99      	ldr	r3, [pc, #612]	; (406804 <main+0x2ac>)
  40659e:	4798      	blx	r3

	
	init_led_board_info();
  4065a0:	4b99      	ldr	r3, [pc, #612]	; (406808 <main+0x2b0>)
  4065a2:	4798      	blx	r3

	twi_init();
  4065a4:	4b99      	ldr	r3, [pc, #612]	; (40680c <main+0x2b4>)
  4065a6:	4798      	blx	r3
	PCA9952_init();
  4065a8:	4b99      	ldr	r3, [pc, #612]	; (406810 <main+0x2b8>)
  4065aa:	4798      	blx	r3
	test_led_driver_channels();
  4065ac:	4b99      	ldr	r3, [pc, #612]	; (406814 <main+0x2bc>)
  4065ae:	4798      	blx	r3


	show_chassis_status_info();
  4065b0:	4b99      	ldr	r3, [pc, #612]	; (406818 <main+0x2c0>)
  4065b2:	4798      	blx	r3
	show_chassis_sysErr();
  4065b4:	4b99      	ldr	r3, [pc, #612]	; (40681c <main+0x2c4>)
  4065b6:	4798      	blx	r3
	show_chassis_all_LED_boards();
  4065b8:	4b99      	ldr	r3, [pc, #612]	; (406820 <main+0x2c8>)
  4065ba:	4798      	blx	r3
	show_help_and_prompt();
  4065bc:	4b99      	ldr	r3, [pc, #612]	; (406824 <main+0x2cc>)
  4065be:	4798      	blx	r3
	
	ioport_set_pin_level(ECLAVE_LED_OEn, IOPORT_PIN_LEVEL_LOW); //...and we are live!
  4065c0:	2001      	movs	r0, #1
  4065c2:	2100      	movs	r1, #0
  4065c4:	4b8f      	ldr	r3, [pc, #572]	; (406804 <main+0x2ac>)
  4065c6:	4798      	blx	r3
	ioport_set_pin_level(ECLAVE_PSUPPLY_ONn, IOPORT_PIN_LEVEL_LOW);
  4065c8:	2002      	movs	r0, #2
  4065ca:	2100      	movs	r1, #0
  4065cc:	4b8d      	ldr	r3, [pc, #564]	; (406804 <main+0x2ac>)
  4065ce:	4798      	blx	r3


	init_pwm();
  4065d0:	4b95      	ldr	r3, [pc, #596]	; (406828 <main+0x2d0>)
  4065d2:	4798      	blx	r3
	
	init_adc();
  4065d4:	4b95      	ldr	r3, [pc, #596]	; (40682c <main+0x2d4>)
  4065d6:	4798      	blx	r3
	
	controls.buzzer_enable = 0;
  4065d8:	4b95      	ldr	r3, [pc, #596]	; (406830 <main+0x2d8>)
  4065da:	2200      	movs	r2, #0
  4065dc:	70da      	strb	r2, [r3, #3]
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL); //for the love of christ turn this off
  4065de:	4895      	ldr	r0, [pc, #596]	; (406834 <main+0x2dc>)
  4065e0:	2100      	movs	r1, #0
  4065e2:	4b95      	ldr	r3, [pc, #596]	; (406838 <main+0x2e0>)
  4065e4:	4798      	blx	r3

	start_timer(TMR_DEBUG, ((1*SECONDS)/2));
  4065e6:	2000      	movs	r0, #0
  4065e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  4065ec:	4b93      	ldr	r3, [pc, #588]	; (40683c <main+0x2e4>)
  4065ee:	4798      	blx	r3


	// Main loop
	while (true) 
	{
		switch(electroclaveState)
  4065f0:	4b93      	ldr	r3, [pc, #588]	; (406840 <main+0x2e8>)
  4065f2:	781b      	ldrb	r3, [r3, #0]
  4065f4:	2b08      	cmp	r3, #8
  4065f6:	f200 8338 	bhi.w	406c6a <main+0x712>
  4065fa:	a201      	add	r2, pc, #4	; (adr r2, 406600 <main+0xa8>)
  4065fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406600:	00406625 	.word	0x00406625
  406604:	00406681 	.word	0x00406681
  406608:	004066a5 	.word	0x004066a5
  40660c:	00406715 	.word	0x00406715
  406610:	004068a5 	.word	0x004068a5
  406614:	00406993 	.word	0x00406993
  406618:	004069ab 	.word	0x004069ab
  40661c:	004069c7 	.word	0x004069c7
  406620:	00406c45 	.word	0x00406c45
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
  406624:	204d      	movs	r0, #77	; 0x4d
  406626:	4b87      	ldr	r3, [pc, #540]	; (406844 <main+0x2ec>)
  406628:	4798      	blx	r3
  40662a:	4603      	mov	r3, r0
  40662c:	f083 0301 	eor.w	r3, r3, #1
  406630:	b2db      	uxtb	r3, r3
  406632:	2b00      	cmp	r3, #0
  406634:	d023      	beq.n	40667e <main+0x126>
  406636:	204e      	movs	r0, #78	; 0x4e
  406638:	4b82      	ldr	r3, [pc, #520]	; (406844 <main+0x2ec>)
  40663a:	4798      	blx	r3
  40663c:	4603      	mov	r3, r0
  40663e:	f083 0301 	eor.w	r3, r3, #1
  406642:	b2db      	uxtb	r3, r3
  406644:	2b00      	cmp	r3, #0
  406646:	d01a      	beq.n	40667e <main+0x126>
					controls.buzzer_enable = 0;
  406648:	4b79      	ldr	r3, [pc, #484]	; (406830 <main+0x2d8>)
  40664a:	2200      	movs	r2, #0
  40664c:	70da      	strb	r2, [r3, #3]
					pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  40664e:	4879      	ldr	r0, [pc, #484]	; (406834 <main+0x2dc>)
  406650:	2100      	movs	r1, #0
  406652:	4b79      	ldr	r3, [pc, #484]	; (406838 <main+0x2e0>)
  406654:	4798      	blx	r3
					ioport_set_pin_level(EXAMPLE_LED_GPIO, IOPORT_PIN_LEVEL_LOW);
  406656:	2050      	movs	r0, #80	; 0x50
  406658:	2100      	movs	r1, #0
  40665a:	4b6a      	ldr	r3, [pc, #424]	; (406804 <main+0x2ac>)
  40665c:	4798      	blx	r3
					print_ecdbg("Door latch detected\r\n");
  40665e:	487a      	ldr	r0, [pc, #488]	; (406848 <main+0x2f0>)
  406660:	4b7a      	ldr	r3, [pc, #488]	; (40684c <main+0x2f4>)
  406662:	4798      	blx	r3
					firstTimeSinceDoorLatched = 1;
  406664:	4b7a      	ldr	r3, [pc, #488]	; (406850 <main+0x2f8>)
  406666:	2201      	movs	r2, #1
  406668:	701a      	strb	r2, [r3, #0]
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
  40666a:	2000      	movs	r0, #0
  40666c:	4b64      	ldr	r3, [pc, #400]	; (406800 <main+0x2a8>)
  40666e:	4798      	blx	r3
					electroclaveState = STATE_DOOR_LATCHED;
  406670:	4b73      	ldr	r3, [pc, #460]	; (406840 <main+0x2e8>)
  406672:	2201      	movs	r2, #1
  406674:	701a      	strb	r2, [r3, #0]
					firstDoorOpenSinceIdle = 1;
  406676:	4b77      	ldr	r3, [pc, #476]	; (406854 <main+0x2fc>)
  406678:	2201      	movs	r2, #1
  40667a:	701a      	strb	r2, [r3, #0]
				}
				break;
  40667c:	e2f5      	b.n	406c6a <main+0x712>
  40667e:	e2f4      	b.n	406c6a <main+0x712>
				
			case STATE_DOOR_LATCHED:
				if (validKeypadCode) {
  406680:	4b75      	ldr	r3, [pc, #468]	; (406858 <main+0x300>)
  406682:	781b      	ldrb	r3, [r3, #0]
  406684:	2b00      	cmp	r3, #0
  406686:	d00c      	beq.n	4066a2 <main+0x14a>
					controls.solenoid_enable = 1;
  406688:	4b69      	ldr	r3, [pc, #420]	; (406830 <main+0x2d8>)
  40668a:	2201      	movs	r2, #1
  40668c:	721a      	strb	r2, [r3, #8]
					print_ecdbg("Valid keypad code detected\r\n");
  40668e:	4873      	ldr	r0, [pc, #460]	; (40685c <main+0x304>)
  406690:	4b6e      	ldr	r3, [pc, #440]	; (40684c <main+0x2f4>)
  406692:	4798      	blx	r3
					electroclaveState = STATE_VALID_KEYPAD_CODE;
  406694:	4b6a      	ldr	r3, [pc, #424]	; (406840 <main+0x2e8>)
  406696:	2202      	movs	r2, #2
  406698:	701a      	strb	r2, [r3, #0]
					validKeypadCode = 0; //reset
  40669a:	4b6f      	ldr	r3, [pc, #444]	; (406858 <main+0x300>)
  40669c:	2200      	movs	r2, #0
  40669e:	701a      	strb	r2, [r3, #0]
				}
				break;
  4066a0:	e2e3      	b.n	406c6a <main+0x712>
  4066a2:	e2e2      	b.n	406c6a <main+0x712>
				
			case STATE_VALID_KEYPAD_CODE:

				if (firstTimeSinceDoorLatched)
  4066a4:	4b6a      	ldr	r3, [pc, #424]	; (406850 <main+0x2f8>)
  4066a6:	781b      	ldrb	r3, [r3, #0]
  4066a8:	2b00      	cmp	r3, #0
  4066aa:	d008      	beq.n	4066be <main+0x166>
				{
					check_led_brd_side_lifetimes();
  4066ac:	4b6c      	ldr	r3, [pc, #432]	; (406860 <main+0x308>)
  4066ae:	4798      	blx	r3
					check_shelves_for_devices();
  4066b0:	4b6c      	ldr	r3, [pc, #432]	; (406864 <main+0x30c>)
  4066b2:	4798      	blx	r3
					set_shelves_active_inactive();
  4066b4:	4b6c      	ldr	r3, [pc, #432]	; (406868 <main+0x310>)
  4066b6:	4798      	blx	r3
					
					firstTimeSinceDoorLatched = 0;
  4066b8:	4b65      	ldr	r3, [pc, #404]	; (406850 <main+0x2f8>)
  4066ba:	2200      	movs	r2, #0
  4066bc:	701a      	strb	r2, [r3, #0]
				}

				if (num_active_shelves() != 0) {
  4066be:	4b6b      	ldr	r3, [pc, #428]	; (40686c <main+0x314>)
  4066c0:	4798      	blx	r3
  4066c2:	4603      	mov	r3, r0
  4066c4:	2b00      	cmp	r3, #0
  4066c6:	d00e      	beq.n	4066e6 <main+0x18e>
					electroclaveState = STATE_START_SANITIZE;
  4066c8:	4b5d      	ldr	r3, [pc, #372]	; (406840 <main+0x2e8>)
  4066ca:	2203      	movs	r2, #3
  4066cc:	701a      	strb	r2, [r3, #0]
					print_ecdbg("Sanitizing\r\n");
  4066ce:	4868      	ldr	r0, [pc, #416]	; (406870 <main+0x318>)
  4066d0:	4b5e      	ldr	r3, [pc, #376]	; (40684c <main+0x2f4>)
  4066d2:	4798      	blx	r3
//13jun15					display_text(IDX_CLEAR);
//13jun15					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
  4066d4:	2002      	movs	r0, #2
  4066d6:	4b4a      	ldr	r3, [pc, #296]	; (406800 <main+0x2a8>)
  4066d8:	4798      	blx	r3
					start_timer(TMR_DISPLAY, (8 * SECONDS));
  4066da:	2001      	movs	r0, #1
  4066dc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4066e0:	4b56      	ldr	r3, [pc, #344]	; (40683c <main+0x2e4>)
  4066e2:	4798      	blx	r3
  4066e4:	e015      	b.n	406712 <main+0x1ba>
				}
				else if (num_present_shelves() != 0){
  4066e6:	4b63      	ldr	r3, [pc, #396]	; (406874 <main+0x31c>)
  4066e8:	4798      	blx	r3
  4066ea:	4603      	mov	r3, r0
  4066ec:	2b00      	cmp	r3, #0
  4066ee:	d009      	beq.n	406704 <main+0x1ac>
					electroclaveState = STATE_EC_IDLE;
  4066f0:	4b53      	ldr	r3, [pc, #332]	; (406840 <main+0x2e8>)
  4066f2:	2200      	movs	r2, #0
  4066f4:	701a      	strb	r2, [r3, #0]
					print_ecdbg("At least one shelf is present, but no devices to be cleaned.\r\n");
  4066f6:	4860      	ldr	r0, [pc, #384]	; (406878 <main+0x320>)
  4066f8:	4b54      	ldr	r3, [pc, #336]	; (40684c <main+0x2f4>)
  4066fa:	4798      	blx	r3
					display_text(IDX_READY);
  4066fc:	2000      	movs	r0, #0
  4066fe:	4b40      	ldr	r3, [pc, #256]	; (406800 <main+0x2a8>)
  406700:	4798      	blx	r3
  406702:	e006      	b.n	406712 <main+0x1ba>
				}
				else
				{
//DEBUG 24jun15 need to function even with these errors for demo purposes					electroclaveState = STATE_CHASSIS_ERROR;
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
  406704:	485d      	ldr	r0, [pc, #372]	; (40687c <main+0x324>)
  406706:	4b51      	ldr	r3, [pc, #324]	; (40684c <main+0x2f4>)
  406708:	4798      	blx	r3
					display_text(IDX_ERROR);
  40670a:	2004      	movs	r0, #4
  40670c:	4b3c      	ldr	r3, [pc, #240]	; (406800 <main+0x2a8>)
  40670e:	4798      	blx	r3
				}
				break;
  406710:	e2ab      	b.n	406c6a <main+0x712>
  406712:	e2aa      	b.n	406c6a <main+0x712>
				
			case STATE_START_SANITIZE:
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
  406714:	4b5a      	ldr	r3, [pc, #360]	; (406880 <main+0x328>)
  406716:	22ff      	movs	r2, #255	; 0xff
  406718:	701a      	strb	r2, [r3, #0]
				sanitizeMinutes = 0;
  40671a:	4b5a      	ldr	r3, [pc, #360]	; (406884 <main+0x32c>)
  40671c:	2200      	movs	r2, #0
  40671e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i<NUM_SHELVES; i++) {
  406720:	2300      	movs	r3, #0
  406722:	65fb      	str	r3, [r7, #92]	; 0x5c
  406724:	e02c      	b.n	406780 <main+0x228>
					if (shelf[i].active == SHELF_ACTIVE) {
  406726:	4958      	ldr	r1, [pc, #352]	; (406888 <main+0x330>)
  406728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  40672a:	4613      	mov	r3, r2
  40672c:	009b      	lsls	r3, r3, #2
  40672e:	4413      	add	r3, r2
  406730:	440b      	add	r3, r1
  406732:	781b      	ldrb	r3, [r3, #0]
  406734:	2b01      	cmp	r3, #1
  406736:	d120      	bne.n	40677a <main+0x222>
						tmpSanitizeMinutes = calc_sanitize_time(i);
  406738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40673a:	b2db      	uxtb	r3, r3
  40673c:	4618      	mov	r0, r3
  40673e:	4b53      	ldr	r3, [pc, #332]	; (40688c <main+0x334>)
  406740:	4798      	blx	r3
  406742:	4603      	mov	r3, r0
  406744:	461a      	mov	r2, r3
  406746:	4b52      	ldr	r3, [pc, #328]	; (406890 <main+0x338>)
  406748:	601a      	str	r2, [r3, #0]
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
  40674a:	4b51      	ldr	r3, [pc, #324]	; (406890 <main+0x338>)
  40674c:	681a      	ldr	r2, [r3, #0]
  40674e:	4b4d      	ldr	r3, [pc, #308]	; (406884 <main+0x32c>)
  406750:	681b      	ldr	r3, [r3, #0]
  406752:	429a      	cmp	r2, r3
  406754:	d903      	bls.n	40675e <main+0x206>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
  406756:	4b4e      	ldr	r3, [pc, #312]	; (406890 <main+0x338>)
  406758:	681b      	ldr	r3, [r3, #0]
  40675a:	4a4a      	ldr	r2, [pc, #296]	; (406884 <main+0x32c>)
  40675c:	6013      	str	r3, [r2, #0]
						}
						
						led_shelf(i, LED_ON);
  40675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406760:	b2db      	uxtb	r3, r3
  406762:	4618      	mov	r0, r3
  406764:	2101      	movs	r1, #1
  406766:	4b4b      	ldr	r3, [pc, #300]	; (406894 <main+0x33c>)
  406768:	4798      	blx	r3
						
						if (displayIdx == 0xFF)
  40676a:	4b45      	ldr	r3, [pc, #276]	; (406880 <main+0x328>)
  40676c:	781b      	ldrb	r3, [r3, #0]
  40676e:	2bff      	cmp	r3, #255	; 0xff
  406770:	d103      	bne.n	40677a <main+0x222>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
  406772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406774:	b2da      	uxtb	r2, r3
  406776:	4b42      	ldr	r3, [pc, #264]	; (406880 <main+0x328>)
  406778:	701a      	strb	r2, [r3, #0]
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
  40677a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  40677c:	3301      	adds	r3, #1
  40677e:	65fb      	str	r3, [r7, #92]	; 0x5c
  406780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  406782:	2b03      	cmp	r3, #3
  406784:	ddcf      	ble.n	406726 <main+0x1ce>
					}
				}
				
				
//16jan16 #if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15
				start_timer(TMR_SANITIZE, (sanitizeMinutes*MINUTES));
  406786:	4b3f      	ldr	r3, [pc, #252]	; (406884 <main+0x32c>)
  406788:	681b      	ldr	r3, [r3, #0]
  40678a:	f64e 2260 	movw	r2, #60000	; 0xea60
  40678e:	fb02 f303 	mul.w	r3, r2, r3
  406792:	2002      	movs	r0, #2
  406794:	4619      	mov	r1, r3
  406796:	4b29      	ldr	r3, [pc, #164]	; (40683c <main+0x2e4>)
  406798:	4798      	blx	r3
//16jan16 #endif
//16jan16 we really want minutes right now				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
				
				sprintf(mainStr, "sanitizeMinutes: %ld tmpSanitizeMinutes: %ld\r\n", sanitizeMinutes, tmpSanitizeMinutes);
  40679a:	4b3a      	ldr	r3, [pc, #232]	; (406884 <main+0x32c>)
  40679c:	681a      	ldr	r2, [r3, #0]
  40679e:	4b3c      	ldr	r3, [pc, #240]	; (406890 <main+0x338>)
  4067a0:	681b      	ldr	r3, [r3, #0]
  4067a2:	4639      	mov	r1, r7
  4067a4:	4608      	mov	r0, r1
  4067a6:	493c      	ldr	r1, [pc, #240]	; (406898 <main+0x340>)
  4067a8:	4c3c      	ldr	r4, [pc, #240]	; (40689c <main+0x344>)
  4067aa:	47a0      	blx	r4
				print_ecdbg(mainStr);
  4067ac:	463b      	mov	r3, r7
  4067ae:	4618      	mov	r0, r3
  4067b0:	4b26      	ldr	r3, [pc, #152]	; (40684c <main+0x2f4>)
  4067b2:	4798      	blx	r3


				inc_sanCycles();
  4067b4:	4b3a      	ldr	r3, [pc, #232]	; (4068a0 <main+0x348>)
  4067b6:	4798      	blx	r3

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				start_timer(TMR_ONE_MINUTE, (1*SECONDS)); //once per second for debug
  4067b8:	2003      	movs	r0, #3
  4067ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4067be:	4b1f      	ldr	r3, [pc, #124]	; (40683c <main+0x2e4>)
  4067c0:	4798      	blx	r3
				electroclaveState = STATE_SANITIZE;
  4067c2:	4b1f      	ldr	r3, [pc, #124]	; (406840 <main+0x2e8>)
  4067c4:	2204      	movs	r2, #4
  4067c6:	701a      	strb	r2, [r3, #0]
				
				break;
  4067c8:	e24f      	b.n	406c6a <main+0x712>
  4067ca:	bf00      	nop
  4067cc:	00400491 	.word	0x00400491
  4067d0:	00400a6d 	.word	0x00400a6d
  4067d4:	00404421 	.word	0x00404421
  4067d8:	00403cc9 	.word	0x00403cc9
  4067dc:	00403d0d 	.word	0x00403d0d
  4067e0:	00403c49 	.word	0x00403c49
  4067e4:	00404321 	.word	0x00404321
  4067e8:	00405645 	.word	0x00405645
  4067ec:	004044b5 	.word	0x004044b5
  4067f0:	40024000 	.word	0x40024000
  4067f4:	00402189 	.word	0x00402189
  4067f8:	004021d5 	.word	0x004021d5
  4067fc:	0040593d 	.word	0x0040593d
  406800:	00404339 	.word	0x00404339
  406804:	004041f9 	.word	0x004041f9
  406808:	00405899 	.word	0x00405899
  40680c:	00403da9 	.word	0x00403da9
  406810:	004027dd 	.word	0x004027dd
  406814:	00404ca9 	.word	0x00404ca9
  406818:	00405965 	.word	0x00405965
  40681c:	00405d35 	.word	0x00405d35
  406820:	0040609d 	.word	0x0040609d
  406824:	004061b5 	.word	0x004061b5
  406828:	00403fa9 	.word	0x00403fa9
  40682c:	00403e3d 	.word	0x00403e3d
  406830:	20400b38 	.word	0x20400b38
  406834:	40020000 	.word	0x40020000
  406838:	00401ba5 	.word	0x00401ba5
  40683c:	0040320d 	.word	0x0040320d
  406840:	204009b9 	.word	0x204009b9
  406844:	00404265 	.word	0x00404265
  406848:	0040ce90 	.word	0x0040ce90
  40684c:	004026b1 	.word	0x004026b1
  406850:	204009b8 	.word	0x204009b8
  406854:	20400014 	.word	0x20400014
  406858:	204009cc 	.word	0x204009cc
  40685c:	0040cea8 	.word	0x0040cea8
  406860:	00404799 	.word	0x00404799
  406864:	00404aa5 	.word	0x00404aa5
  406868:	00404e95 	.word	0x00404e95
  40686c:	00405011 	.word	0x00405011
  406870:	0040cec8 	.word	0x0040cec8
  406874:	00405029 	.word	0x00405029
  406878:	0040ced8 	.word	0x0040ced8
  40687c:	0040cf18 	.word	0x0040cf18
  406880:	204009d2 	.word	0x204009d2
  406884:	204016a0 	.word	0x204016a0
  406888:	2040168c 	.word	0x2040168c
  40688c:	00405041 	.word	0x00405041
  406890:	204016a8 	.word	0x204016a8
  406894:	00402a45 	.word	0x00402a45
  406898:	0040cf44 	.word	0x0040cf44
  40689c:	00406fe1 	.word	0x00406fe1
  4068a0:	00405411 	.word	0x00405411
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (timer_done(TMR_DISPLAY))
  4068a4:	2001      	movs	r0, #1
  4068a6:	4b9a      	ldr	r3, [pc, #616]	; (406b10 <main+0x5b8>)
  4068a8:	4798      	blx	r3
  4068aa:	4603      	mov	r3, r0
  4068ac:	2b00      	cmp	r3, #0
  4068ae:	d046      	beq.n	40693e <main+0x3e6>
				{
					end_timer(TMR_DISPLAY);
  4068b0:	2001      	movs	r0, #1
  4068b2:	4b98      	ldr	r3, [pc, #608]	; (406b14 <main+0x5bc>)
  4068b4:	4798      	blx	r3
					switch (displayIdx)
  4068b6:	4b98      	ldr	r3, [pc, #608]	; (406b18 <main+0x5c0>)
  4068b8:	781b      	ldrb	r3, [r3, #0]
  4068ba:	2b03      	cmp	r3, #3
  4068bc:	d81a      	bhi.n	4068f4 <main+0x39c>
  4068be:	a201      	add	r2, pc, #4	; (adr r2, 4068c4 <main+0x36c>)
  4068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4068c4:	004068d5 	.word	0x004068d5
  4068c8:	004068dd 	.word	0x004068dd
  4068cc:	004068e5 	.word	0x004068e5
  4068d0:	004068ed 	.word	0x004068ed
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
  4068d4:	2005      	movs	r0, #5
  4068d6:	4b91      	ldr	r3, [pc, #580]	; (406b1c <main+0x5c4>)
  4068d8:	4798      	blx	r3
							break;
  4068da:	e00b      	b.n	4068f4 <main+0x39c>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
  4068dc:	2006      	movs	r0, #6
  4068de:	4b8f      	ldr	r3, [pc, #572]	; (406b1c <main+0x5c4>)
  4068e0:	4798      	blx	r3
							break;
  4068e2:	e007      	b.n	4068f4 <main+0x39c>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
  4068e4:	2007      	movs	r0, #7
  4068e6:	4b8d      	ldr	r3, [pc, #564]	; (406b1c <main+0x5c4>)
  4068e8:	4798      	blx	r3
							break;
  4068ea:	e003      	b.n	4068f4 <main+0x39c>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
  4068ec:	2008      	movs	r0, #8
  4068ee:	4b8b      	ldr	r3, [pc, #556]	; (406b1c <main+0x5c4>)
  4068f0:	4798      	blx	r3
							break;
  4068f2:	bf00      	nop
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
  4068f4:	4b88      	ldr	r3, [pc, #544]	; (406b18 <main+0x5c0>)
  4068f6:	781b      	ldrb	r3, [r3, #0]
  4068f8:	3301      	adds	r3, #1
  4068fa:	b2da      	uxtb	r2, r3
  4068fc:	4b86      	ldr	r3, [pc, #536]	; (406b18 <main+0x5c0>)
  4068fe:	701a      	strb	r2, [r3, #0]
  406900:	4b85      	ldr	r3, [pc, #532]	; (406b18 <main+0x5c0>)
  406902:	781b      	ldrb	r3, [r3, #0]
  406904:	2b03      	cmp	r3, #3
  406906:	d902      	bls.n	40690e <main+0x3b6>
						{
							displayIdx = 0; //12apr15 wrap around
  406908:	4b83      	ldr	r3, [pc, #524]	; (406b18 <main+0x5c0>)
  40690a:	2200      	movs	r2, #0
  40690c:	701a      	strb	r2, [r3, #0]
						}
						
						if (shelf[displayIdx].active)
  40690e:	4b82      	ldr	r3, [pc, #520]	; (406b18 <main+0x5c0>)
  406910:	781b      	ldrb	r3, [r3, #0]
  406912:	4619      	mov	r1, r3
  406914:	4a82      	ldr	r2, [pc, #520]	; (406b20 <main+0x5c8>)
  406916:	460b      	mov	r3, r1
  406918:	009b      	lsls	r3, r3, #2
  40691a:	440b      	add	r3, r1
  40691c:	4413      	add	r3, r2
  40691e:	781b      	ldrb	r3, [r3, #0]
  406920:	2b00      	cmp	r3, #0
  406922:	d00b      	beq.n	40693c <main+0x3e4>
						{
							break; //this shelf is active, we don't need to look for another one
  406924:	bf00      	nop
						}
						
					}

					start_timer(TMR_DISPLAY, displayTimerSeconds * SECONDS);
  406926:	4b7f      	ldr	r3, [pc, #508]	; (406b24 <main+0x5cc>)
  406928:	681b      	ldr	r3, [r3, #0]
  40692a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40692e:	fb02 f303 	mul.w	r3, r2, r3
  406932:	2001      	movs	r0, #1
  406934:	4619      	mov	r1, r3
  406936:	4b7c      	ldr	r3, [pc, #496]	; (406b28 <main+0x5d0>)
  406938:	4798      	blx	r3
  40693a:	e000      	b.n	40693e <main+0x3e6>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
  40693c:	e7da      	b.n	4068f4 <main+0x39c>
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (timer_done(TMR_ONE_MINUTE))
  40693e:	2003      	movs	r0, #3
  406940:	4b73      	ldr	r3, [pc, #460]	; (406b10 <main+0x5b8>)
  406942:	4798      	blx	r3
  406944:	4603      	mov	r3, r0
  406946:	2b00      	cmp	r3, #0
  406948:	d009      	beq.n	40695e <main+0x406>
				{
					end_timer(TMR_ONE_MINUTE);
  40694a:	2003      	movs	r0, #3
  40694c:	4b71      	ldr	r3, [pc, #452]	; (406b14 <main+0x5bc>)
  40694e:	4798      	blx	r3
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
  406950:	4b76      	ldr	r3, [pc, #472]	; (406b2c <main+0x5d4>)
  406952:	4798      	blx	r3
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					start_timer(TMR_ONE_MINUTE, (1 * SECONDS));
  406954:	2003      	movs	r0, #3
  406956:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40695a:	4b73      	ldr	r3, [pc, #460]	; (406b28 <main+0x5d0>)
  40695c:	4798      	blx	r3
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (timer_done(TMR_SANITIZE)) {
  40695e:	2002      	movs	r0, #2
  406960:	4b6b      	ldr	r3, [pc, #428]	; (406b10 <main+0x5b8>)
  406962:	4798      	blx	r3
  406964:	4603      	mov	r3, r0
  406966:	2b00      	cmp	r3, #0
  406968:	d012      	beq.n	406990 <main+0x438>
					
					for (int i=0; i< NUM_SHELVES; i++)
  40696a:	2300      	movs	r3, #0
  40696c:	65bb      	str	r3, [r7, #88]	; 0x58
  40696e:	e002      	b.n	406976 <main+0x41e>
  406970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406972:	3301      	adds	r3, #1
  406974:	65bb      	str	r3, [r7, #88]	; 0x58
  406976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  406978:	2b03      	cmp	r3, #3
  40697a:	ddf9      	ble.n	406970 <main+0x418>
					{
//DEBUG 16jan16 THIS IS REALLY SLOPPY, WANT TO KEEP THE LEDS ON FOR 30 MINUTES BUT THE TIMER STUFF DOESN'T SEEM TO WORK THAT LONG, SO WE ARE JUST NOT GOING TO TURN THE SHELVES OFF						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					end_timer(TMR_SANITIZE);
  40697c:	2002      	movs	r0, #2
  40697e:	4b65      	ldr	r3, [pc, #404]	; (406b14 <main+0x5bc>)
  406980:	4798      	blx	r3
					print_ecdbg("Shelf clean\r\n");
  406982:	486b      	ldr	r0, [pc, #428]	; (406b30 <main+0x5d8>)
  406984:	4b6b      	ldr	r3, [pc, #428]	; (406b34 <main+0x5dc>)
  406986:	4798      	blx	r3
					electroclaveState = STATE_START_CLEAN;
  406988:	4b6b      	ldr	r3, [pc, #428]	; (406b38 <main+0x5e0>)
  40698a:	2205      	movs	r2, #5
  40698c:	701a      	strb	r2, [r3, #0]
				}
				break;
  40698e:	e16c      	b.n	406c6a <main+0x712>
  406990:	e16b      	b.n	406c6a <main+0x712>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
  406992:	2001      	movs	r0, #1
  406994:	4b61      	ldr	r3, [pc, #388]	; (406b1c <main+0x5c4>)
  406996:	4798      	blx	r3
				electroclaveState = STATE_CLEAN;
  406998:	4b67      	ldr	r3, [pc, #412]	; (406b38 <main+0x5e0>)
  40699a:	2206      	movs	r2, #6
  40699c:	701a      	strb	r2, [r3, #0]
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer);
#endif
//DEBUG 24jun15 change to 60 seconds for demo, put this line back in later				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 

//				cpu_set_timeout((60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 24jun15 change to 60 seconds for demo, remove later
				start_timer(TMR_CLEAN, (3 * SECONDS));
  40699e:	2004      	movs	r0, #4
  4069a0:	f640 31b8 	movw	r1, #3000	; 0xbb8
  4069a4:	4b60      	ldr	r3, [pc, #384]	; (406b28 <main+0x5d0>)
  4069a6:	4798      	blx	r3
				break;	
  4069a8:	e15f      	b.n	406c6a <main+0x712>
				
			case STATE_CLEAN:
				if (timer_done(TMR_CLEAN)) {
  4069aa:	2004      	movs	r0, #4
  4069ac:	4b58      	ldr	r3, [pc, #352]	; (406b10 <main+0x5b8>)
  4069ae:	4798      	blx	r3
  4069b0:	4603      	mov	r3, r0
  4069b2:	2b00      	cmp	r3, #0
  4069b4:	d006      	beq.n	4069c4 <main+0x46c>
					end_timer(TMR_CLEAN);
  4069b6:	2004      	movs	r0, #4
  4069b8:	4b56      	ldr	r3, [pc, #344]	; (406b14 <main+0x5bc>)
  4069ba:	4798      	blx	r3
					electroclaveState = STATE_VALID_KEYPAD_CODE;	
  4069bc:	4b5e      	ldr	r3, [pc, #376]	; (406b38 <main+0x5e0>)
  4069be:	2202      	movs	r2, #2
  4069c0:	701a      	strb	r2, [r3, #0]
				}
				break;
  4069c2:	e152      	b.n	406c6a <main+0x712>
  4069c4:	e151      	b.n	406c6a <main+0x712>
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4069c6:	2300      	movs	r3, #0
  4069c8:	657b      	str	r3, [r7, #84]	; 0x54
  4069ca:	e008      	b.n	4069de <main+0x486>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  4069cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4069ce:	b2db      	uxtb	r3, r3
  4069d0:	4618      	mov	r0, r3
  4069d2:	2100      	movs	r1, #0
  4069d4:	4b59      	ldr	r3, [pc, #356]	; (406b3c <main+0x5e4>)
  4069d6:	4798      	blx	r3
				break;
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  4069d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4069da:	3301      	adds	r3, #1
  4069dc:	657b      	str	r3, [r7, #84]	; 0x54
  4069de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  4069e0:	2b03      	cmp	r3, #3
  4069e2:	ddf3      	ble.n	4069cc <main+0x474>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				
				
				if (timer_done(TMR_ERROR_DISPLAY))
  4069e4:	2005      	movs	r0, #5
  4069e6:	4b4a      	ldr	r3, [pc, #296]	; (406b10 <main+0x5b8>)
  4069e8:	4798      	blx	r3
  4069ea:	4603      	mov	r3, r0
  4069ec:	2b00      	cmp	r3, #0
  4069ee:	f000 8128 	beq.w	406c42 <main+0x6ea>
				{
					end_timer(TMR_ERROR_DISPLAY);
  4069f2:	2005      	movs	r0, #5
  4069f4:	4b47      	ldr	r3, [pc, #284]	; (406b14 <main+0x5bc>)
  4069f6:	4798      	blx	r3

					while(1)
					{
						switch(errorDisplayState)
  4069f8:	4b51      	ldr	r3, [pc, #324]	; (406b40 <main+0x5e8>)
  4069fa:	781b      	ldrb	r3, [r3, #0]
  4069fc:	2b04      	cmp	r3, #4
  4069fe:	f200 8113 	bhi.w	406c28 <main+0x6d0>
  406a02:	a201      	add	r2, pc, #4	; (adr r2, 406a08 <main+0x4b0>)
  406a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406a08:	00406a1d 	.word	0x00406a1d
  406a0c:	00406a3b 	.word	0x00406a3b
  406a10:	00406aa5 	.word	0x00406aa5
  406a14:	00406b51 	.word	0x00406b51
  406a18:	00406bbb 	.word	0x00406bbb
						{
							case 0:
								display_text(IDX_ERROR);
  406a1c:	2004      	movs	r0, #4
  406a1e:	4b3f      	ldr	r3, [pc, #252]	; (406b1c <main+0x5c4>)
  406a20:	4798      	blx	r3
								displayChanged = 1;
  406a22:	4b48      	ldr	r3, [pc, #288]	; (406b44 <main+0x5ec>)
  406a24:	2201      	movs	r2, #1
  406a26:	701a      	strb	r2, [r3, #0]
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406a28:	2005      	movs	r0, #5
  406a2a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406a2e:	4b3e      	ldr	r3, [pc, #248]	; (406b28 <main+0x5d0>)
  406a30:	4798      	blx	r3
								errorDisplayState = 1;
  406a32:	4b43      	ldr	r3, [pc, #268]	; (406b40 <main+0x5e8>)
  406a34:	2201      	movs	r2, #1
  406a36:	701a      	strb	r2, [r3, #0]
								break;
  406a38:	e0fa      	b.n	406c30 <main+0x6d8>
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  406a3a:	4b43      	ldr	r3, [pc, #268]	; (406b48 <main+0x5f0>)
  406a3c:	789b      	ldrb	r3, [r3, #2]
  406a3e:	2b00      	cmp	r3, #0
  406a40:	d121      	bne.n	406a86 <main+0x52e>
  406a42:	4b41      	ldr	r3, [pc, #260]	; (406b48 <main+0x5f0>)
  406a44:	79db      	ldrb	r3, [r3, #7]
  406a46:	2b00      	cmp	r3, #0
  406a48:	d11d      	bne.n	406a86 <main+0x52e>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406a4a:	4b40      	ldr	r3, [pc, #256]	; (406b4c <main+0x5f4>)
  406a4c:	781b      	ldrb	r3, [r3, #0]
  406a4e:	f003 0301 	and.w	r3, r3, #1
								displayChanged = 1;
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
  406a52:	2b00      	cmp	r3, #0
  406a54:	d117      	bne.n	406a86 <main+0x52e>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406a56:	4b3d      	ldr	r3, [pc, #244]	; (406b4c <main+0x5f4>)
  406a58:	781b      	ldrb	r3, [r3, #0]
  406a5a:	f003 0302 	and.w	r3, r3, #2
  406a5e:	2b00      	cmp	r3, #0
  406a60:	d111      	bne.n	406a86 <main+0x52e>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  406a62:	4b3a      	ldr	r3, [pc, #232]	; (406b4c <main+0x5f4>)
  406a64:	685b      	ldr	r3, [r3, #4]
  406a66:	f003 0301 	and.w	r3, r3, #1
								start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
  406a6a:	2b00      	cmp	r3, #0
  406a6c:	d10b      	bne.n	406a86 <main+0x52e>
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
  406a6e:	4b37      	ldr	r3, [pc, #220]	; (406b4c <main+0x5f4>)
  406a70:	685b      	ldr	r3, [r3, #4]
  406a72:	f003 0302 	and.w	r3, r3, #2
  406a76:	2b00      	cmp	r3, #0
  406a78:	d105      	bne.n	406a86 <main+0x52e>
  406a7a:	4b34      	ldr	r3, [pc, #208]	; (406b4c <main+0x5f4>)
  406a7c:	685b      	ldr	r3, [r3, #4]
  406a7e:	f003 0304 	and.w	r3, r3, #4
  406a82:	2b00      	cmp	r3, #0
  406a84:	d00a      	beq.n	406a9c <main+0x544>
								{
									display_text(IDX_SHELF1);
  406a86:	2005      	movs	r0, #5
  406a88:	4b24      	ldr	r3, [pc, #144]	; (406b1c <main+0x5c4>)
  406a8a:	4798      	blx	r3
									displayChanged = 1;
  406a8c:	4b2d      	ldr	r3, [pc, #180]	; (406b44 <main+0x5ec>)
  406a8e:	2201      	movs	r2, #1
  406a90:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406a92:	2005      	movs	r0, #5
  406a94:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406a98:	4b23      	ldr	r3, [pc, #140]	; (406b28 <main+0x5d0>)
  406a9a:	4798      	blx	r3
								}
								errorDisplayState = 2;
  406a9c:	4b28      	ldr	r3, [pc, #160]	; (406b40 <main+0x5e8>)
  406a9e:	2202      	movs	r2, #2
  406aa0:	701a      	strb	r2, [r3, #0]
								break;
  406aa2:	e0c5      	b.n	406c30 <main+0x6d8>
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  406aa4:	4b28      	ldr	r3, [pc, #160]	; (406b48 <main+0x5f0>)
  406aa6:	7b1b      	ldrb	r3, [r3, #12]
  406aa8:	2b00      	cmp	r3, #0
  406aaa:	d121      	bne.n	406af0 <main+0x598>
  406aac:	4b26      	ldr	r3, [pc, #152]	; (406b48 <main+0x5f0>)
  406aae:	7c5b      	ldrb	r3, [r3, #17]
  406ab0:	2b00      	cmp	r3, #0
  406ab2:	d11d      	bne.n	406af0 <main+0x598>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  406ab4:	4b25      	ldr	r3, [pc, #148]	; (406b4c <main+0x5f4>)
  406ab6:	781b      	ldrb	r3, [r3, #0]
  406ab8:	f003 0304 	and.w	r3, r3, #4
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
  406abc:	2b00      	cmp	r3, #0
  406abe:	d117      	bne.n	406af0 <main+0x598>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  406ac0:	4b22      	ldr	r3, [pc, #136]	; (406b4c <main+0x5f4>)
  406ac2:	781b      	ldrb	r3, [r3, #0]
  406ac4:	f003 0308 	and.w	r3, r3, #8
  406ac8:	2b00      	cmp	r3, #0
  406aca:	d111      	bne.n	406af0 <main+0x598>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  406acc:	4b1f      	ldr	r3, [pc, #124]	; (406b4c <main+0x5f4>)
  406ace:	685b      	ldr	r3, [r3, #4]
  406ad0:	f003 0308 	and.w	r3, r3, #8
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
  406ad4:	2b00      	cmp	r3, #0
  406ad6:	d10b      	bne.n	406af0 <main+0x598>
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
  406ad8:	4b1c      	ldr	r3, [pc, #112]	; (406b4c <main+0x5f4>)
  406ada:	685b      	ldr	r3, [r3, #4]
  406adc:	f003 0310 	and.w	r3, r3, #16
  406ae0:	2b00      	cmp	r3, #0
  406ae2:	d105      	bne.n	406af0 <main+0x598>
  406ae4:	4b19      	ldr	r3, [pc, #100]	; (406b4c <main+0x5f4>)
  406ae6:	685b      	ldr	r3, [r3, #4]
  406ae8:	f003 0320 	and.w	r3, r3, #32
  406aec:	2b00      	cmp	r3, #0
  406aee:	d00a      	beq.n	406b06 <main+0x5ae>
								{
									display_text(IDX_SHELF2);
  406af0:	2006      	movs	r0, #6
  406af2:	4b0a      	ldr	r3, [pc, #40]	; (406b1c <main+0x5c4>)
  406af4:	4798      	blx	r3
									displayChanged = 1;
  406af6:	4b13      	ldr	r3, [pc, #76]	; (406b44 <main+0x5ec>)
  406af8:	2201      	movs	r2, #1
  406afa:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406afc:	2005      	movs	r0, #5
  406afe:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406b02:	4b09      	ldr	r3, [pc, #36]	; (406b28 <main+0x5d0>)
  406b04:	4798      	blx	r3
								}
								errorDisplayState = 3;
  406b06:	4b0e      	ldr	r3, [pc, #56]	; (406b40 <main+0x5e8>)
  406b08:	2203      	movs	r2, #3
  406b0a:	701a      	strb	r2, [r3, #0]
								break;
  406b0c:	e090      	b.n	406c30 <main+0x6d8>
  406b0e:	bf00      	nop
  406b10:	00403315 	.word	0x00403315
  406b14:	00403351 	.word	0x00403351
  406b18:	204009d2 	.word	0x204009d2
  406b1c:	00404339 	.word	0x00404339
  406b20:	2040168c 	.word	0x2040168c
  406b24:	20401334 	.word	0x20401334
  406b28:	0040320d 	.word	0x0040320d
  406b2c:	004054a1 	.word	0x004054a1
  406b30:	0040cf74 	.word	0x0040cf74
  406b34:	004026b1 	.word	0x004026b1
  406b38:	204009b9 	.word	0x204009b9
  406b3c:	00402a45 	.word	0x00402a45
  406b40:	204009ba 	.word	0x204009ba
  406b44:	204009bb 	.word	0x204009bb
  406b48:	204016c8 	.word	0x204016c8
  406b4c:	204016b4 	.word	0x204016b4
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  406b50:	4b76      	ldr	r3, [pc, #472]	; (406d2c <main+0x7d4>)
  406b52:	7d9b      	ldrb	r3, [r3, #22]
  406b54:	2b00      	cmp	r3, #0
  406b56:	d121      	bne.n	406b9c <main+0x644>
  406b58:	4b74      	ldr	r3, [pc, #464]	; (406d2c <main+0x7d4>)
  406b5a:	7edb      	ldrb	r3, [r3, #27]
  406b5c:	2b00      	cmp	r3, #0
  406b5e:	d11d      	bne.n	406b9c <main+0x644>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406b60:	4b73      	ldr	r3, [pc, #460]	; (406d30 <main+0x7d8>)
  406b62:	781b      	ldrb	r3, [r3, #0]
  406b64:	f003 0310 	and.w	r3, r3, #16
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
  406b68:	2b00      	cmp	r3, #0
  406b6a:	d117      	bne.n	406b9c <main+0x644>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406b6c:	4b70      	ldr	r3, [pc, #448]	; (406d30 <main+0x7d8>)
  406b6e:	781b      	ldrb	r3, [r3, #0]
  406b70:	f003 0320 	and.w	r3, r3, #32
  406b74:	2b00      	cmp	r3, #0
  406b76:	d111      	bne.n	406b9c <main+0x644>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  406b78:	4b6d      	ldr	r3, [pc, #436]	; (406d30 <main+0x7d8>)
  406b7a:	685b      	ldr	r3, [r3, #4]
  406b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
  406b80:	2b00      	cmp	r3, #0
  406b82:	d10b      	bne.n	406b9c <main+0x644>
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
  406b84:	4b6a      	ldr	r3, [pc, #424]	; (406d30 <main+0x7d8>)
  406b86:	685b      	ldr	r3, [r3, #4]
  406b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406b8c:	2b00      	cmp	r3, #0
  406b8e:	d105      	bne.n	406b9c <main+0x644>
  406b90:	4b67      	ldr	r3, [pc, #412]	; (406d30 <main+0x7d8>)
  406b92:	685b      	ldr	r3, [r3, #4]
  406b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406b98:	2b00      	cmp	r3, #0
  406b9a:	d00a      	beq.n	406bb2 <main+0x65a>
								{
									display_text(IDX_SHELF3);
  406b9c:	2007      	movs	r0, #7
  406b9e:	4b65      	ldr	r3, [pc, #404]	; (406d34 <main+0x7dc>)
  406ba0:	4798      	blx	r3
									displayChanged = 1;
  406ba2:	4b65      	ldr	r3, [pc, #404]	; (406d38 <main+0x7e0>)
  406ba4:	2201      	movs	r2, #1
  406ba6:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406ba8:	2005      	movs	r0, #5
  406baa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406bae:	4b63      	ldr	r3, [pc, #396]	; (406d3c <main+0x7e4>)
  406bb0:	4798      	blx	r3
								}
								errorDisplayState = 4;
  406bb2:	4b63      	ldr	r3, [pc, #396]	; (406d40 <main+0x7e8>)
  406bb4:	2204      	movs	r2, #4
  406bb6:	701a      	strb	r2, [r3, #0]
								break;
  406bb8:	e03a      	b.n	406c30 <main+0x6d8>
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  406bba:	4b5c      	ldr	r3, [pc, #368]	; (406d2c <main+0x7d4>)
  406bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
  406bc0:	2b00      	cmp	r3, #0
  406bc2:	d122      	bne.n	406c0a <main+0x6b2>
  406bc4:	4b59      	ldr	r3, [pc, #356]	; (406d2c <main+0x7d4>)
  406bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  406bca:	2b00      	cmp	r3, #0
  406bcc:	d11d      	bne.n	406c0a <main+0x6b2>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406bce:	4b58      	ldr	r3, [pc, #352]	; (406d30 <main+0x7d8>)
  406bd0:	781b      	ldrb	r3, [r3, #0]
  406bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
  406bd6:	2b00      	cmp	r3, #0
  406bd8:	d117      	bne.n	406c0a <main+0x6b2>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406bda:	4b55      	ldr	r3, [pc, #340]	; (406d30 <main+0x7d8>)
  406bdc:	781b      	ldrb	r3, [r3, #0]
  406bde:	b2db      	uxtb	r3, r3
  406be0:	b25b      	sxtb	r3, r3
  406be2:	2b00      	cmp	r3, #0
  406be4:	db11      	blt.n	406c0a <main+0x6b2>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  406be6:	4b52      	ldr	r3, [pc, #328]	; (406d30 <main+0x7d8>)
  406be8:	685b      	ldr	r3, [r3, #4]
  406bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
  406bee:	2b00      	cmp	r3, #0
  406bf0:	d10b      	bne.n	406c0a <main+0x6b2>
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
  406bf2:	4b4f      	ldr	r3, [pc, #316]	; (406d30 <main+0x7d8>)
  406bf4:	685b      	ldr	r3, [r3, #4]
  406bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  406bfa:	2b00      	cmp	r3, #0
  406bfc:	d105      	bne.n	406c0a <main+0x6b2>
  406bfe:	4b4c      	ldr	r3, [pc, #304]	; (406d30 <main+0x7d8>)
  406c00:	685b      	ldr	r3, [r3, #4]
  406c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  406c06:	2b00      	cmp	r3, #0
  406c08:	d00a      	beq.n	406c20 <main+0x6c8>
								{
									display_text(IDX_SHELF4);
  406c0a:	2008      	movs	r0, #8
  406c0c:	4b49      	ldr	r3, [pc, #292]	; (406d34 <main+0x7dc>)
  406c0e:	4798      	blx	r3
									displayChanged = 1;
  406c10:	4b49      	ldr	r3, [pc, #292]	; (406d38 <main+0x7e0>)
  406c12:	2201      	movs	r2, #1
  406c14:	701a      	strb	r2, [r3, #0]
									start_timer(TMR_ERROR_DISPLAY, (8 * SECONDS));
  406c16:	2005      	movs	r0, #5
  406c18:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  406c1c:	4b47      	ldr	r3, [pc, #284]	; (406d3c <main+0x7e4>)
  406c1e:	4798      	blx	r3
								}
								errorDisplayState = 0;
  406c20:	4b47      	ldr	r3, [pc, #284]	; (406d40 <main+0x7e8>)
  406c22:	2200      	movs	r2, #0
  406c24:	701a      	strb	r2, [r3, #0]
								break;
  406c26:	e003      	b.n	406c30 <main+0x6d8>
							default:
								errorDisplayState = 0;
  406c28:	4b45      	ldr	r3, [pc, #276]	; (406d40 <main+0x7e8>)
  406c2a:	2200      	movs	r2, #0
  406c2c:	701a      	strb	r2, [r3, #0]
								break;
  406c2e:	bf00      	nop
						} //switch(errorDisplayState)
						
						if (displayChanged)
  406c30:	4b41      	ldr	r3, [pc, #260]	; (406d38 <main+0x7e0>)
  406c32:	781b      	ldrb	r3, [r3, #0]
  406c34:	2b00      	cmp	r3, #0
  406c36:	d003      	beq.n	406c40 <main+0x6e8>
						{
							displayChanged = 0;
  406c38:	4b3f      	ldr	r3, [pc, #252]	; (406d38 <main+0x7e0>)
  406c3a:	2200      	movs	r2, #0
  406c3c:	701a      	strb	r2, [r3, #0]
							break; //get out of while loop and wait until we need to update the display again
  406c3e:	e000      	b.n	406c42 <main+0x6ea>
						}
						
					} //while(1)
  406c40:	e6da      	b.n	4069f8 <main+0x4a0>

				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
  406c42:	e012      	b.n	406c6a <main+0x712>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406c44:	2300      	movs	r3, #0
  406c46:	653b      	str	r3, [r7, #80]	; 0x50
  406c48:	e008      	b.n	406c5c <main+0x704>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
  406c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406c4c:	b2db      	uxtb	r3, r3
  406c4e:	4618      	mov	r0, r3
  406c50:	2100      	movs	r1, #0
  406c52:	4b3c      	ldr	r3, [pc, #240]	; (406d44 <main+0x7ec>)
  406c54:	4798      	blx	r3
				} //if (timer_done(TMR_ERROR_DISPLAY))
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
  406c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406c58:	3301      	adds	r3, #1
  406c5a:	653b      	str	r3, [r7, #80]	; 0x50
  406c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  406c5e:	2b03      	cmp	r3, #3
  406c60:	ddf3      	ble.n	406c4a <main+0x6f2>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
  406c62:	4b39      	ldr	r3, [pc, #228]	; (406d48 <main+0x7f0>)
  406c64:	2200      	movs	r2, #0
  406c66:	701a      	strb	r2, [r3, #0]
				break;
  406c68:	bf00      	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
  406c6a:	204d      	movs	r0, #77	; 0x4d
  406c6c:	4b37      	ldr	r3, [pc, #220]	; (406d4c <main+0x7f4>)
  406c6e:	4798      	blx	r3
  406c70:	4603      	mov	r3, r0
  406c72:	2b00      	cmp	r3, #0
  406c74:	d105      	bne.n	406c82 <main+0x72a>
  406c76:	204e      	movs	r0, #78	; 0x4e
  406c78:	4b34      	ldr	r3, [pc, #208]	; (406d4c <main+0x7f4>)
  406c7a:	4798      	blx	r3
  406c7c:	4603      	mov	r3, r0
  406c7e:	2b00      	cmp	r3, #0
  406c80:	d03f      	beq.n	406d02 <main+0x7aa>
			
			controls.buzzer_enable = 1;
  406c82:	4b33      	ldr	r3, [pc, #204]	; (406d50 <main+0x7f8>)
  406c84:	2201      	movs	r2, #1
  406c86:	70da      	strb	r2, [r3, #3]

			if (firstDoorOpenSinceIdle)
  406c88:	4b32      	ldr	r3, [pc, #200]	; (406d54 <main+0x7fc>)
  406c8a:	781b      	ldrb	r3, [r3, #0]
  406c8c:	2b00      	cmp	r3, #0
  406c8e:	d038      	beq.n	406d02 <main+0x7aa>
			{
				door_latch_open_kill_all_shelves();
  406c90:	4b31      	ldr	r3, [pc, #196]	; (406d58 <main+0x800>)
  406c92:	4798      	blx	r3

//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
  406c94:	4b2c      	ldr	r3, [pc, #176]	; (406d48 <main+0x7f0>)
  406c96:	781b      	ldrb	r3, [r3, #0]
  406c98:	3b03      	subs	r3, #3
  406c9a:	2b04      	cmp	r3, #4
  406c9c:	d824      	bhi.n	406ce8 <main+0x790>
  406c9e:	a201      	add	r2, pc, #4	; (adr r2, 406ca4 <main+0x74c>)
  406ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406ca4:	00406cb9 	.word	0x00406cb9
  406ca8:	00406cb9 	.word	0x00406cb9
  406cac:	00406ccd 	.word	0x00406ccd
  406cb0:	00406ccd 	.word	0x00406ccd
  406cb4:	00406ce1 	.word	0x00406ce1
				{
					case STATE_START_SANITIZE:
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
  406cb8:	2003      	movs	r0, #3
  406cba:	4b1e      	ldr	r3, [pc, #120]	; (406d34 <main+0x7dc>)
  406cbc:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406cbe:	4b22      	ldr	r3, [pc, #136]	; (406d48 <main+0x7f0>)
  406cc0:	2208      	movs	r2, #8
  406cc2:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406cc4:	4825      	ldr	r0, [pc, #148]	; (406d5c <main+0x804>)
  406cc6:	4b26      	ldr	r3, [pc, #152]	; (406d60 <main+0x808>)
  406cc8:	4798      	blx	r3
						break;
  406cca:	e017      	b.n	406cfc <main+0x7a4>
						
					case STATE_START_CLEAN:
					case STATE_CLEAN:
						display_text(IDX_CLEAN);
  406ccc:	2001      	movs	r0, #1
  406cce:	4b19      	ldr	r3, [pc, #100]	; (406d34 <main+0x7dc>)
  406cd0:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406cd2:	4b1d      	ldr	r3, [pc, #116]	; (406d48 <main+0x7f0>)
  406cd4:	2208      	movs	r2, #8
  406cd6:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406cd8:	4820      	ldr	r0, [pc, #128]	; (406d5c <main+0x804>)
  406cda:	4b21      	ldr	r3, [pc, #132]	; (406d60 <main+0x808>)
  406cdc:	4798      	blx	r3
						break;
  406cde:	e00d      	b.n	406cfc <main+0x7a4>
						
					case STATE_CHASSIS_ERROR:
						display_text(IDX_ERROR);
  406ce0:	2004      	movs	r0, #4
  406ce2:	4b14      	ldr	r3, [pc, #80]	; (406d34 <main+0x7dc>)
  406ce4:	4798      	blx	r3
						break;
  406ce6:	e009      	b.n	406cfc <main+0x7a4>
					
					default:
						display_text(IDX_READY);
  406ce8:	2000      	movs	r0, #0
  406cea:	4b12      	ldr	r3, [pc, #72]	; (406d34 <main+0x7dc>)
  406cec:	4798      	blx	r3
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
  406cee:	4b16      	ldr	r3, [pc, #88]	; (406d48 <main+0x7f0>)
  406cf0:	2208      	movs	r2, #8
  406cf2:	701a      	strb	r2, [r3, #0]
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
  406cf4:	4819      	ldr	r0, [pc, #100]	; (406d5c <main+0x804>)
  406cf6:	4b1a      	ldr	r3, [pc, #104]	; (406d60 <main+0x808>)
  406cf8:	4798      	blx	r3
						break;
  406cfa:	bf00      	nop
				}

				firstDoorOpenSinceIdle = 0;
  406cfc:	4b15      	ldr	r3, [pc, #84]	; (406d54 <main+0x7fc>)
  406cfe:	2200      	movs	r2, #0
  406d00:	701a      	strb	r2, [r3, #0]
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (timer_done(TMR_DEBUG))
  406d02:	2000      	movs	r0, #0
  406d04:	4b17      	ldr	r3, [pc, #92]	; (406d64 <main+0x80c>)
  406d06:	4798      	blx	r3
  406d08:	4603      	mov	r3, r0
  406d0a:	2b00      	cmp	r3, #0
  406d0c:	d00a      	beq.n	406d24 <main+0x7cc>
		{
			end_timer(TMR_DEBUG);
  406d0e:	2000      	movs	r0, #0
  406d10:	4b15      	ldr	r3, [pc, #84]	; (406d68 <main+0x810>)
  406d12:	4798      	blx	r3
			start_timer(TMR_DEBUG, ((1 * SECONDS)/2));
  406d14:	2000      	movs	r0, #0
  406d16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  406d1a:	4b08      	ldr	r3, [pc, #32]	; (406d3c <main+0x7e4>)
  406d1c:	4798      	blx	r3
			ioport_toggle_pin_level(EXAMPLE_LED_GPIO);
  406d1e:	2050      	movs	r0, #80	; 0x50
  406d20:	4b12      	ldr	r3, [pc, #72]	; (406d6c <main+0x814>)
  406d22:	4798      	blx	r3
		}
		
		service_ecdbg_input();
  406d24:	4b12      	ldr	r3, [pc, #72]	; (406d70 <main+0x818>)
  406d26:	4798      	blx	r3

	} //while(true)
  406d28:	e462      	b.n	4065f0 <main+0x98>
  406d2a:	bf00      	nop
  406d2c:	204016c8 	.word	0x204016c8
  406d30:	204016b4 	.word	0x204016b4
  406d34:	00404339 	.word	0x00404339
  406d38:	204009bb 	.word	0x204009bb
  406d3c:	0040320d 	.word	0x0040320d
  406d40:	204009ba 	.word	0x204009ba
  406d44:	00402a45 	.word	0x00402a45
  406d48:	204009b9 	.word	0x204009b9
  406d4c:	00404265 	.word	0x00404265
  406d50:	20400b38 	.word	0x20400b38
  406d54:	20400014 	.word	0x20400014
  406d58:	004050d9 	.word	0x004050d9
  406d5c:	0040cf84 	.word	0x0040cf84
  406d60:	004026b1 	.word	0x004026b1
  406d64:	00403315 	.word	0x00403315
  406d68:	00403351 	.word	0x00403351
  406d6c:	004042b5 	.word	0x004042b5
  406d70:	004061c9 	.word	0x004061c9

00406d74 <__libc_init_array>:
  406d74:	b570      	push	{r4, r5, r6, lr}
  406d76:	4e0f      	ldr	r6, [pc, #60]	; (406db4 <__libc_init_array+0x40>)
  406d78:	4d0f      	ldr	r5, [pc, #60]	; (406db8 <__libc_init_array+0x44>)
  406d7a:	1b76      	subs	r6, r6, r5
  406d7c:	10b6      	asrs	r6, r6, #2
  406d7e:	bf18      	it	ne
  406d80:	2400      	movne	r4, #0
  406d82:	d005      	beq.n	406d90 <__libc_init_array+0x1c>
  406d84:	3401      	adds	r4, #1
  406d86:	f855 3b04 	ldr.w	r3, [r5], #4
  406d8a:	4798      	blx	r3
  406d8c:	42a6      	cmp	r6, r4
  406d8e:	d1f9      	bne.n	406d84 <__libc_init_array+0x10>
  406d90:	4e0a      	ldr	r6, [pc, #40]	; (406dbc <__libc_init_array+0x48>)
  406d92:	f006 fa59 	bl	40d248 <_init>
  406d96:	4d0a      	ldr	r5, [pc, #40]	; (406dc0 <__libc_init_array+0x4c>)
  406d98:	1b76      	subs	r6, r6, r5
  406d9a:	10b6      	asrs	r6, r6, #2
  406d9c:	bf18      	it	ne
  406d9e:	2400      	movne	r4, #0
  406da0:	d006      	beq.n	406db0 <__libc_init_array+0x3c>
  406da2:	3401      	adds	r4, #1
  406da4:	f855 3b04 	ldr.w	r3, [r5], #4
  406da8:	4798      	blx	r3
  406daa:	42a6      	cmp	r6, r4
  406dac:	d1f9      	bne.n	406da2 <__libc_init_array+0x2e>
  406dae:	bd70      	pop	{r4, r5, r6, pc}
  406db0:	bd70      	pop	{r4, r5, r6, pc}
  406db2:	bf00      	nop
  406db4:	0040d254 	.word	0x0040d254
  406db8:	0040d254 	.word	0x0040d254
  406dbc:	0040d25c 	.word	0x0040d25c
  406dc0:	0040d254 	.word	0x0040d254

00406dc4 <memset>:
  406dc4:	0783      	lsls	r3, r0, #30
  406dc6:	b470      	push	{r4, r5, r6}
  406dc8:	d049      	beq.n	406e5e <memset+0x9a>
  406dca:	1e54      	subs	r4, r2, #1
  406dcc:	2a00      	cmp	r2, #0
  406dce:	d044      	beq.n	406e5a <memset+0x96>
  406dd0:	b2cd      	uxtb	r5, r1
  406dd2:	4603      	mov	r3, r0
  406dd4:	e002      	b.n	406ddc <memset+0x18>
  406dd6:	2c00      	cmp	r4, #0
  406dd8:	d03f      	beq.n	406e5a <memset+0x96>
  406dda:	4614      	mov	r4, r2
  406ddc:	f803 5b01 	strb.w	r5, [r3], #1
  406de0:	f013 0f03 	tst.w	r3, #3
  406de4:	f104 32ff 	add.w	r2, r4, #4294967295
  406de8:	d1f5      	bne.n	406dd6 <memset+0x12>
  406dea:	2c03      	cmp	r4, #3
  406dec:	d92e      	bls.n	406e4c <memset+0x88>
  406dee:	b2cd      	uxtb	r5, r1
  406df0:	2c0f      	cmp	r4, #15
  406df2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406df6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406dfa:	d919      	bls.n	406e30 <memset+0x6c>
  406dfc:	f103 0210 	add.w	r2, r3, #16
  406e00:	4626      	mov	r6, r4
  406e02:	3e10      	subs	r6, #16
  406e04:	f842 5c10 	str.w	r5, [r2, #-16]
  406e08:	f842 5c0c 	str.w	r5, [r2, #-12]
  406e0c:	3210      	adds	r2, #16
  406e0e:	2e0f      	cmp	r6, #15
  406e10:	f842 5c18 	str.w	r5, [r2, #-24]
  406e14:	f842 5c14 	str.w	r5, [r2, #-20]
  406e18:	d8f3      	bhi.n	406e02 <memset+0x3e>
  406e1a:	f1a4 0210 	sub.w	r2, r4, #16
  406e1e:	f004 040f 	and.w	r4, r4, #15
  406e22:	f022 020f 	bic.w	r2, r2, #15
  406e26:	2c03      	cmp	r4, #3
  406e28:	f102 0210 	add.w	r2, r2, #16
  406e2c:	4413      	add	r3, r2
  406e2e:	d90d      	bls.n	406e4c <memset+0x88>
  406e30:	461e      	mov	r6, r3
  406e32:	4622      	mov	r2, r4
  406e34:	3a04      	subs	r2, #4
  406e36:	f846 5b04 	str.w	r5, [r6], #4
  406e3a:	2a03      	cmp	r2, #3
  406e3c:	d8fa      	bhi.n	406e34 <memset+0x70>
  406e3e:	1f22      	subs	r2, r4, #4
  406e40:	f004 0403 	and.w	r4, r4, #3
  406e44:	f022 0203 	bic.w	r2, r2, #3
  406e48:	3204      	adds	r2, #4
  406e4a:	4413      	add	r3, r2
  406e4c:	b12c      	cbz	r4, 406e5a <memset+0x96>
  406e4e:	b2c9      	uxtb	r1, r1
  406e50:	441c      	add	r4, r3
  406e52:	f803 1b01 	strb.w	r1, [r3], #1
  406e56:	42a3      	cmp	r3, r4
  406e58:	d1fb      	bne.n	406e52 <memset+0x8e>
  406e5a:	bc70      	pop	{r4, r5, r6}
  406e5c:	4770      	bx	lr
  406e5e:	4614      	mov	r4, r2
  406e60:	4603      	mov	r3, r0
  406e62:	e7c2      	b.n	406dea <memset+0x26>

00406e64 <_puts_r>:
  406e64:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e66:	4604      	mov	r4, r0
  406e68:	b089      	sub	sp, #36	; 0x24
  406e6a:	4608      	mov	r0, r1
  406e6c:	460d      	mov	r5, r1
  406e6e:	f000 f8dd 	bl	40702c <strlen>
  406e72:	68a3      	ldr	r3, [r4, #8]
  406e74:	2701      	movs	r7, #1
  406e76:	2102      	movs	r1, #2
  406e78:	899a      	ldrh	r2, [r3, #12]
  406e7a:	ae04      	add	r6, sp, #16
  406e7c:	eb00 0c07 	add.w	ip, r0, r7
  406e80:	f8df e03c 	ldr.w	lr, [pc, #60]	; 406ec0 <_puts_r+0x5c>
  406e84:	9102      	str	r1, [sp, #8]
  406e86:	0491      	lsls	r1, r2, #18
  406e88:	9504      	str	r5, [sp, #16]
  406e8a:	9005      	str	r0, [sp, #20]
  406e8c:	f8cd c00c 	str.w	ip, [sp, #12]
  406e90:	f8cd e018 	str.w	lr, [sp, #24]
  406e94:	9707      	str	r7, [sp, #28]
  406e96:	9601      	str	r6, [sp, #4]
  406e98:	d406      	bmi.n	406ea8 <_puts_r+0x44>
  406e9a:	6e59      	ldr	r1, [r3, #100]	; 0x64
  406e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406ea0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406ea4:	819a      	strh	r2, [r3, #12]
  406ea6:	6659      	str	r1, [r3, #100]	; 0x64
  406ea8:	4620      	mov	r0, r4
  406eaa:	4619      	mov	r1, r3
  406eac:	aa01      	add	r2, sp, #4
  406eae:	f002 ff07 	bl	409cc0 <__sfvwrite_r>
  406eb2:	2800      	cmp	r0, #0
  406eb4:	bf14      	ite	ne
  406eb6:	f04f 30ff 	movne.w	r0, #4294967295
  406eba:	200a      	moveq	r0, #10
  406ebc:	b009      	add	sp, #36	; 0x24
  406ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ec0:	0040d0c4 	.word	0x0040d0c4

00406ec4 <puts>:
  406ec4:	4b02      	ldr	r3, [pc, #8]	; (406ed0 <puts+0xc>)
  406ec6:	4601      	mov	r1, r0
  406ec8:	6818      	ldr	r0, [r3, #0]
  406eca:	f7ff bfcb 	b.w	406e64 <_puts_r>
  406ece:	bf00      	nop
  406ed0:	204004c0 	.word	0x204004c0

00406ed4 <setbuf>:
  406ed4:	2900      	cmp	r1, #0
  406ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406eda:	bf0c      	ite	eq
  406edc:	2202      	moveq	r2, #2
  406ede:	2200      	movne	r2, #0
  406ee0:	f000 b800 	b.w	406ee4 <setvbuf>

00406ee4 <setvbuf>:
  406ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406ee8:	4e3b      	ldr	r6, [pc, #236]	; (406fd8 <setvbuf+0xf4>)
  406eea:	4604      	mov	r4, r0
  406eec:	460d      	mov	r5, r1
  406eee:	4690      	mov	r8, r2
  406ef0:	6837      	ldr	r7, [r6, #0]
  406ef2:	461e      	mov	r6, r3
  406ef4:	b117      	cbz	r7, 406efc <setvbuf+0x18>
  406ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  406ef8:	2b00      	cmp	r3, #0
  406efa:	d03f      	beq.n	406f7c <setvbuf+0x98>
  406efc:	f1b8 0f02 	cmp.w	r8, #2
  406f00:	d832      	bhi.n	406f68 <setvbuf+0x84>
  406f02:	ea5f 79d6 	movs.w	r9, r6, lsr #31
  406f06:	d12f      	bne.n	406f68 <setvbuf+0x84>
  406f08:	4621      	mov	r1, r4
  406f0a:	4638      	mov	r0, r7
  406f0c:	f002 fcf8 	bl	409900 <_fflush_r>
  406f10:	89a1      	ldrh	r1, [r4, #12]
  406f12:	f8c4 9004 	str.w	r9, [r4, #4]
  406f16:	060b      	lsls	r3, r1, #24
  406f18:	f8c4 9018 	str.w	r9, [r4, #24]
  406f1c:	d428      	bmi.n	406f70 <setvbuf+0x8c>
  406f1e:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  406f22:	f1b8 0f02 	cmp.w	r8, #2
  406f26:	b289      	uxth	r1, r1
  406f28:	81a1      	strh	r1, [r4, #12]
  406f2a:	d02b      	beq.n	406f84 <setvbuf+0xa0>
  406f2c:	2d00      	cmp	r5, #0
  406f2e:	d037      	beq.n	406fa0 <setvbuf+0xbc>
  406f30:	f1b8 0f01 	cmp.w	r8, #1
  406f34:	d012      	beq.n	406f5c <setvbuf+0x78>
  406f36:	b289      	uxth	r1, r1
  406f38:	4b28      	ldr	r3, [pc, #160]	; (406fdc <setvbuf+0xf8>)
  406f3a:	f001 0008 	and.w	r0, r1, #8
  406f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  406f40:	6025      	str	r5, [r4, #0]
  406f42:	b280      	uxth	r0, r0
  406f44:	6125      	str	r5, [r4, #16]
  406f46:	6166      	str	r6, [r4, #20]
  406f48:	b180      	cbz	r0, 406f6c <setvbuf+0x88>
  406f4a:	f011 0f03 	tst.w	r1, #3
  406f4e:	f04f 0000 	mov.w	r0, #0
  406f52:	bf18      	it	ne
  406f54:	4606      	movne	r6, r0
  406f56:	60a6      	str	r6, [r4, #8]
  406f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406f5c:	f041 0101 	orr.w	r1, r1, #1
  406f60:	4273      	negs	r3, r6
  406f62:	81a1      	strh	r1, [r4, #12]
  406f64:	61a3      	str	r3, [r4, #24]
  406f66:	e7e6      	b.n	406f36 <setvbuf+0x52>
  406f68:	f04f 30ff 	mov.w	r0, #4294967295
  406f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406f70:	6921      	ldr	r1, [r4, #16]
  406f72:	4638      	mov	r0, r7
  406f74:	f002 fdcc 	bl	409b10 <_free_r>
  406f78:	89a1      	ldrh	r1, [r4, #12]
  406f7a:	e7d0      	b.n	406f1e <setvbuf+0x3a>
  406f7c:	4638      	mov	r0, r7
  406f7e:	f002 fd59 	bl	409a34 <__sinit>
  406f82:	e7bb      	b.n	406efc <setvbuf+0x18>
  406f84:	2000      	movs	r0, #0
  406f86:	f104 0343 	add.w	r3, r4, #67	; 0x43
  406f8a:	f041 0102 	orr.w	r1, r1, #2
  406f8e:	2500      	movs	r5, #0
  406f90:	2201      	movs	r2, #1
  406f92:	81a1      	strh	r1, [r4, #12]
  406f94:	60a5      	str	r5, [r4, #8]
  406f96:	6023      	str	r3, [r4, #0]
  406f98:	6123      	str	r3, [r4, #16]
  406f9a:	6162      	str	r2, [r4, #20]
  406f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406fa0:	2e00      	cmp	r6, #0
  406fa2:	bf08      	it	eq
  406fa4:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  406fa8:	4630      	mov	r0, r6
  406faa:	f003 f8b9 	bl	40a120 <malloc>
  406fae:	4605      	mov	r5, r0
  406fb0:	b128      	cbz	r0, 406fbe <setvbuf+0xda>
  406fb2:	89a1      	ldrh	r1, [r4, #12]
  406fb4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  406fb8:	b289      	uxth	r1, r1
  406fba:	81a1      	strh	r1, [r4, #12]
  406fbc:	e7b8      	b.n	406f30 <setvbuf+0x4c>
  406fbe:	f44f 6080 	mov.w	r0, #1024	; 0x400
  406fc2:	f003 f8ad 	bl	40a120 <malloc>
  406fc6:	4605      	mov	r5, r0
  406fc8:	b918      	cbnz	r0, 406fd2 <setvbuf+0xee>
  406fca:	89a1      	ldrh	r1, [r4, #12]
  406fcc:	f04f 30ff 	mov.w	r0, #4294967295
  406fd0:	e7d9      	b.n	406f86 <setvbuf+0xa2>
  406fd2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406fd6:	e7ec      	b.n	406fb2 <setvbuf+0xce>
  406fd8:	204004c0 	.word	0x204004c0
  406fdc:	0040992d 	.word	0x0040992d

00406fe0 <sprintf>:
  406fe0:	b40e      	push	{r1, r2, r3}
  406fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
  406fe4:	b09c      	sub	sp, #112	; 0x70
  406fe6:	4b10      	ldr	r3, [pc, #64]	; (407028 <sprintf+0x48>)
  406fe8:	4606      	mov	r6, r0
  406fea:	f44f 7e02 	mov.w	lr, #520	; 0x208
  406fee:	ac21      	add	r4, sp, #132	; 0x84
  406ff0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  406ff4:	f64f 77ff 	movw	r7, #65535	; 0xffff
  406ff8:	6818      	ldr	r0, [r3, #0]
  406ffa:	f854 2b04 	ldr.w	r2, [r4], #4
  406ffe:	a902      	add	r1, sp, #8
  407000:	9602      	str	r6, [sp, #8]
  407002:	4623      	mov	r3, r4
  407004:	9606      	str	r6, [sp, #24]
  407006:	9401      	str	r4, [sp, #4]
  407008:	f8ad e014 	strh.w	lr, [sp, #20]
  40700c:	9504      	str	r5, [sp, #16]
  40700e:	9507      	str	r5, [sp, #28]
  407010:	f8ad 7016 	strh.w	r7, [sp, #22]
  407014:	f000 f86c 	bl	4070f0 <_svfprintf_r>
  407018:	9b02      	ldr	r3, [sp, #8]
  40701a:	2200      	movs	r2, #0
  40701c:	701a      	strb	r2, [r3, #0]
  40701e:	b01c      	add	sp, #112	; 0x70
  407020:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407024:	b003      	add	sp, #12
  407026:	4770      	bx	lr
  407028:	204004c0 	.word	0x204004c0

0040702c <strlen>:
  40702c:	f020 0103 	bic.w	r1, r0, #3
  407030:	f010 0003 	ands.w	r0, r0, #3
  407034:	f1c0 0000 	rsb	r0, r0, #0
  407038:	f851 3b04 	ldr.w	r3, [r1], #4
  40703c:	f100 0c04 	add.w	ip, r0, #4
  407040:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  407044:	f06f 0200 	mvn.w	r2, #0
  407048:	bf1c      	itt	ne
  40704a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40704e:	4313      	orrne	r3, r2
  407050:	f04f 0c01 	mov.w	ip, #1
  407054:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  407058:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40705c:	eba3 020c 	sub.w	r2, r3, ip
  407060:	ea22 0203 	bic.w	r2, r2, r3
  407064:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  407068:	bf04      	itt	eq
  40706a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40706e:	3004      	addeq	r0, #4
  407070:	d0f4      	beq.n	40705c <strlen+0x30>
  407072:	f1c2 0100 	rsb	r1, r2, #0
  407076:	ea02 0201 	and.w	r2, r2, r1
  40707a:	fab2 f282 	clz	r2, r2
  40707e:	f1c2 021f 	rsb	r2, r2, #31
  407082:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  407086:	4770      	bx	lr

00407088 <strncpy>:
  407088:	ea40 0301 	orr.w	r3, r0, r1
  40708c:	079b      	lsls	r3, r3, #30
  40708e:	b470      	push	{r4, r5, r6}
  407090:	d12b      	bne.n	4070ea <strncpy+0x62>
  407092:	2a03      	cmp	r2, #3
  407094:	d929      	bls.n	4070ea <strncpy+0x62>
  407096:	460b      	mov	r3, r1
  407098:	4606      	mov	r6, r0
  40709a:	4619      	mov	r1, r3
  40709c:	f853 5b04 	ldr.w	r5, [r3], #4
  4070a0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4070a4:	ea24 0405 	bic.w	r4, r4, r5
  4070a8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4070ac:	d105      	bne.n	4070ba <strncpy+0x32>
  4070ae:	3a04      	subs	r2, #4
  4070b0:	f846 5b04 	str.w	r5, [r6], #4
  4070b4:	4619      	mov	r1, r3
  4070b6:	2a03      	cmp	r2, #3
  4070b8:	d8ef      	bhi.n	40709a <strncpy+0x12>
  4070ba:	b1a2      	cbz	r2, 4070e6 <strncpy+0x5e>
  4070bc:	780c      	ldrb	r4, [r1, #0]
  4070be:	3a01      	subs	r2, #1
  4070c0:	1c73      	adds	r3, r6, #1
  4070c2:	3101      	adds	r1, #1
  4070c4:	7034      	strb	r4, [r6, #0]
  4070c6:	b13c      	cbz	r4, 4070d8 <strncpy+0x50>
  4070c8:	b16a      	cbz	r2, 4070e6 <strncpy+0x5e>
  4070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
  4070ce:	3a01      	subs	r2, #1
  4070d0:	f803 4b01 	strb.w	r4, [r3], #1
  4070d4:	2c00      	cmp	r4, #0
  4070d6:	d1f7      	bne.n	4070c8 <strncpy+0x40>
  4070d8:	b12a      	cbz	r2, 4070e6 <strncpy+0x5e>
  4070da:	441a      	add	r2, r3
  4070dc:	2100      	movs	r1, #0
  4070de:	f803 1b01 	strb.w	r1, [r3], #1
  4070e2:	4293      	cmp	r3, r2
  4070e4:	d1fb      	bne.n	4070de <strncpy+0x56>
  4070e6:	bc70      	pop	{r4, r5, r6}
  4070e8:	4770      	bx	lr
  4070ea:	4606      	mov	r6, r0
  4070ec:	e7e5      	b.n	4070ba <strncpy+0x32>
  4070ee:	bf00      	nop

004070f0 <_svfprintf_r>:
  4070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070f4:	b0c1      	sub	sp, #260	; 0x104
  4070f6:	4689      	mov	r9, r1
  4070f8:	9208      	str	r2, [sp, #32]
  4070fa:	930c      	str	r3, [sp, #48]	; 0x30
  4070fc:	9009      	str	r0, [sp, #36]	; 0x24
  4070fe:	f002 ff99 	bl	40a034 <_localeconv_r>
  407102:	6803      	ldr	r3, [r0, #0]
  407104:	4618      	mov	r0, r3
  407106:	9316      	str	r3, [sp, #88]	; 0x58
  407108:	f7ff ff90 	bl	40702c <strlen>
  40710c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  407110:	9017      	str	r0, [sp, #92]	; 0x5c
  407112:	061d      	lsls	r5, r3, #24
  407114:	d504      	bpl.n	407120 <_svfprintf_r+0x30>
  407116:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40711a:	2b00      	cmp	r3, #0
  40711c:	f001 8080 	beq.w	408220 <_svfprintf_r+0x1130>
  407120:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407124:	2300      	movs	r3, #0
  407126:	46c3      	mov	fp, r8
  407128:	9313      	str	r3, [sp, #76]	; 0x4c
  40712a:	9314      	str	r3, [sp, #80]	; 0x50
  40712c:	9312      	str	r3, [sp, #72]	; 0x48
  40712e:	9315      	str	r3, [sp, #84]	; 0x54
  407130:	9319      	str	r3, [sp, #100]	; 0x64
  407132:	930a      	str	r3, [sp, #40]	; 0x28
  407134:	9325      	str	r3, [sp, #148]	; 0x94
  407136:	9324      	str	r3, [sp, #144]	; 0x90
  407138:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  40713c:	9a08      	ldr	r2, [sp, #32]
  40713e:	7813      	ldrb	r3, [r2, #0]
  407140:	2b25      	cmp	r3, #37	; 0x25
  407142:	f000 80a6 	beq.w	407292 <_svfprintf_r+0x1a2>
  407146:	b90b      	cbnz	r3, 40714c <_svfprintf_r+0x5c>
  407148:	e0a3      	b.n	407292 <_svfprintf_r+0x1a2>
  40714a:	b11b      	cbz	r3, 407154 <_svfprintf_r+0x64>
  40714c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  407150:	2b25      	cmp	r3, #37	; 0x25
  407152:	d1fa      	bne.n	40714a <_svfprintf_r+0x5a>
  407154:	9908      	ldr	r1, [sp, #32]
  407156:	4614      	mov	r4, r2
  407158:	1a55      	subs	r5, r2, r1
  40715a:	d010      	beq.n	40717e <_svfprintf_r+0x8e>
  40715c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40715e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407160:	3301      	adds	r3, #1
  407162:	f8cb 1000 	str.w	r1, [fp]
  407166:	442a      	add	r2, r5
  407168:	f8cb 5004 	str.w	r5, [fp, #4]
  40716c:	2b07      	cmp	r3, #7
  40716e:	9324      	str	r3, [sp, #144]	; 0x90
  407170:	9225      	str	r2, [sp, #148]	; 0x94
  407172:	dc73      	bgt.n	40725c <_svfprintf_r+0x16c>
  407174:	f10b 0b08 	add.w	fp, fp, #8
  407178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40717a:	442b      	add	r3, r5
  40717c:	930a      	str	r3, [sp, #40]	; 0x28
  40717e:	7823      	ldrb	r3, [r4, #0]
  407180:	2b00      	cmp	r3, #0
  407182:	d073      	beq.n	40726c <_svfprintf_r+0x17c>
  407184:	2300      	movs	r3, #0
  407186:	f04f 3cff 	mov.w	ip, #4294967295
  40718a:	1c61      	adds	r1, r4, #1
  40718c:	7866      	ldrb	r6, [r4, #1]
  40718e:	461a      	mov	r2, r3
  407190:	4664      	mov	r4, ip
  407192:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407196:	930b      	str	r3, [sp, #44]	; 0x2c
  407198:	9306      	str	r3, [sp, #24]
  40719a:	1c4b      	adds	r3, r1, #1
  40719c:	f1a6 0120 	sub.w	r1, r6, #32
  4071a0:	2958      	cmp	r1, #88	; 0x58
  4071a2:	f200 83b2 	bhi.w	40790a <_svfprintf_r+0x81a>
  4071a6:	e8df f011 	tbh	[pc, r1, lsl #1]
  4071aa:	0319      	.short	0x0319
  4071ac:	03b003b0 	.word	0x03b003b0
  4071b0:	03b00320 	.word	0x03b00320
  4071b4:	03b003b0 	.word	0x03b003b0
  4071b8:	03b003b0 	.word	0x03b003b0
  4071bc:	024003b0 	.word	0x024003b0
  4071c0:	03b001fb 	.word	0x03b001fb
  4071c4:	01ff01e2 	.word	0x01ff01e2
  4071c8:	032703b0 	.word	0x032703b0
  4071cc:	032e032e 	.word	0x032e032e
  4071d0:	032e032e 	.word	0x032e032e
  4071d4:	032e032e 	.word	0x032e032e
  4071d8:	032e032e 	.word	0x032e032e
  4071dc:	03b0032e 	.word	0x03b0032e
  4071e0:	03b003b0 	.word	0x03b003b0
  4071e4:	03b003b0 	.word	0x03b003b0
  4071e8:	03b003b0 	.word	0x03b003b0
  4071ec:	03b003b0 	.word	0x03b003b0
  4071f0:	033d03b0 	.word	0x033d03b0
  4071f4:	03b00365 	.word	0x03b00365
  4071f8:	03b00365 	.word	0x03b00365
  4071fc:	03b003b0 	.word	0x03b003b0
  407200:	02fe03b0 	.word	0x02fe03b0
  407204:	03b003b0 	.word	0x03b003b0
  407208:	03b00293 	.word	0x03b00293
  40720c:	03b003b0 	.word	0x03b003b0
  407210:	03b003b0 	.word	0x03b003b0
  407214:	03b002b0 	.word	0x03b002b0
  407218:	02c603b0 	.word	0x02c603b0
  40721c:	03b003b0 	.word	0x03b003b0
  407220:	03b003b0 	.word	0x03b003b0
  407224:	03b003b0 	.word	0x03b003b0
  407228:	03b003b0 	.word	0x03b003b0
  40722c:	03b003b0 	.word	0x03b003b0
  407230:	021802eb 	.word	0x021802eb
  407234:	03650365 	.word	0x03650365
  407238:	024e0365 	.word	0x024e0365
  40723c:	03b00218 	.word	0x03b00218
  407240:	023603b0 	.word	0x023603b0
  407244:	026003b0 	.word	0x026003b0
  407248:	039901e9 	.word	0x039901e9
  40724c:	03b00259 	.word	0x03b00259
  407250:	03b00272 	.word	0x03b00272
  407254:	03b00076 	.word	0x03b00076
  407258:	030503b0 	.word	0x030503b0
  40725c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40725e:	4649      	mov	r1, r9
  407260:	aa23      	add	r2, sp, #140	; 0x8c
  407262:	f004 f8d5 	bl	40b410 <__ssprint_r>
  407266:	b940      	cbnz	r0, 40727a <_svfprintf_r+0x18a>
  407268:	46c3      	mov	fp, r8
  40726a:	e785      	b.n	407178 <_svfprintf_r+0x88>
  40726c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40726e:	b123      	cbz	r3, 40727a <_svfprintf_r+0x18a>
  407270:	9809      	ldr	r0, [sp, #36]	; 0x24
  407272:	4649      	mov	r1, r9
  407274:	aa23      	add	r2, sp, #140	; 0x8c
  407276:	f004 f8cb 	bl	40b410 <__ssprint_r>
  40727a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40727e:	f013 0f40 	tst.w	r3, #64	; 0x40
  407282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407284:	bf18      	it	ne
  407286:	f04f 33ff 	movne.w	r3, #4294967295
  40728a:	4618      	mov	r0, r3
  40728c:	b041      	add	sp, #260	; 0x104
  40728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407292:	9c08      	ldr	r4, [sp, #32]
  407294:	e773      	b.n	40717e <_svfprintf_r+0x8e>
  407296:	9308      	str	r3, [sp, #32]
  407298:	46a4      	mov	ip, r4
  40729a:	9b06      	ldr	r3, [sp, #24]
  40729c:	0698      	lsls	r0, r3, #26
  40729e:	f140 823e 	bpl.w	40771e <_svfprintf_r+0x62e>
  4072a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4072a4:	2301      	movs	r3, #1
  4072a6:	3707      	adds	r7, #7
  4072a8:	f027 0207 	bic.w	r2, r7, #7
  4072ac:	f102 0108 	add.w	r1, r2, #8
  4072b0:	e9d2 4500 	ldrd	r4, r5, [r2]
  4072b4:	910c      	str	r1, [sp, #48]	; 0x30
  4072b6:	2200      	movs	r2, #0
  4072b8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4072bc:	4617      	mov	r7, r2
  4072be:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4072c2:	f1bc 0f00 	cmp.w	ip, #0
  4072c6:	db03      	blt.n	4072d0 <_svfprintf_r+0x1e0>
  4072c8:	9a06      	ldr	r2, [sp, #24]
  4072ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4072ce:	9206      	str	r2, [sp, #24]
  4072d0:	f1bc 0f00 	cmp.w	ip, #0
  4072d4:	f040 83ac 	bne.w	407a30 <_svfprintf_r+0x940>
  4072d8:	ea54 0205 	orrs.w	r2, r4, r5
  4072dc:	bf14      	ite	ne
  4072de:	2201      	movne	r2, #1
  4072e0:	2200      	moveq	r2, #0
  4072e2:	2a00      	cmp	r2, #0
  4072e4:	f040 83a4 	bne.w	407a30 <_svfprintf_r+0x940>
  4072e8:	2b00      	cmp	r3, #0
  4072ea:	f040 8460 	bne.w	407bae <_svfprintf_r+0xabe>
  4072ee:	9a06      	ldr	r2, [sp, #24]
  4072f0:	07d2      	lsls	r2, r2, #31
  4072f2:	f140 84fd 	bpl.w	407cf0 <_svfprintf_r+0xc00>
  4072f6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4072fa:	2330      	movs	r3, #48	; 0x30
  4072fc:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  407300:	ebca 0408 	rsb	r4, sl, r8
  407304:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407308:	45a4      	cmp	ip, r4
  40730a:	4663      	mov	r3, ip
  40730c:	bfb8      	it	lt
  40730e:	4623      	movlt	r3, r4
  407310:	9307      	str	r3, [sp, #28]
  407312:	2300      	movs	r3, #0
  407314:	9311      	str	r3, [sp, #68]	; 0x44
  407316:	b117      	cbz	r7, 40731e <_svfprintf_r+0x22e>
  407318:	9b07      	ldr	r3, [sp, #28]
  40731a:	3301      	adds	r3, #1
  40731c:	9307      	str	r3, [sp, #28]
  40731e:	9b06      	ldr	r3, [sp, #24]
  407320:	f013 0302 	ands.w	r3, r3, #2
  407324:	930d      	str	r3, [sp, #52]	; 0x34
  407326:	d002      	beq.n	40732e <_svfprintf_r+0x23e>
  407328:	9b07      	ldr	r3, [sp, #28]
  40732a:	3302      	adds	r3, #2
  40732c:	9307      	str	r3, [sp, #28]
  40732e:	9b06      	ldr	r3, [sp, #24]
  407330:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407334:	930e      	str	r3, [sp, #56]	; 0x38
  407336:	f040 8307 	bne.w	407948 <_svfprintf_r+0x858>
  40733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40733c:	9a07      	ldr	r2, [sp, #28]
  40733e:	ebc2 0a03 	rsb	sl, r2, r3
  407342:	f1ba 0f00 	cmp.w	sl, #0
  407346:	f340 82ff 	ble.w	407948 <_svfprintf_r+0x858>
  40734a:	f1ba 0f10 	cmp.w	sl, #16
  40734e:	9925      	ldr	r1, [sp, #148]	; 0x94
  407350:	f340 87dd 	ble.w	40830e <_svfprintf_r+0x121e>
  407354:	4fbf      	ldr	r7, [pc, #764]	; (407654 <_svfprintf_r+0x564>)
  407356:	2510      	movs	r5, #16
  407358:	9618      	str	r6, [sp, #96]	; 0x60
  40735a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40735c:	463e      	mov	r6, r7
  40735e:	4627      	mov	r7, r4
  407360:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407362:	e004      	b.n	40736e <_svfprintf_r+0x27e>
  407364:	f1aa 0a10 	sub.w	sl, sl, #16
  407368:	f1ba 0f10 	cmp.w	sl, #16
  40736c:	dd1b      	ble.n	4073a6 <_svfprintf_r+0x2b6>
  40736e:	3201      	adds	r2, #1
  407370:	3110      	adds	r1, #16
  407372:	f8cb 6000 	str.w	r6, [fp]
  407376:	f10b 0b08 	add.w	fp, fp, #8
  40737a:	2a07      	cmp	r2, #7
  40737c:	f84b 5c04 	str.w	r5, [fp, #-4]
  407380:	9125      	str	r1, [sp, #148]	; 0x94
  407382:	9224      	str	r2, [sp, #144]	; 0x90
  407384:	ddee      	ble.n	407364 <_svfprintf_r+0x274>
  407386:	4620      	mov	r0, r4
  407388:	4649      	mov	r1, r9
  40738a:	aa23      	add	r2, sp, #140	; 0x8c
  40738c:	46c3      	mov	fp, r8
  40738e:	f004 f83f 	bl	40b410 <__ssprint_r>
  407392:	2800      	cmp	r0, #0
  407394:	f47f af71 	bne.w	40727a <_svfprintf_r+0x18a>
  407398:	f1aa 0a10 	sub.w	sl, sl, #16
  40739c:	9925      	ldr	r1, [sp, #148]	; 0x94
  40739e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4073a0:	f1ba 0f10 	cmp.w	sl, #16
  4073a4:	dce3      	bgt.n	40736e <_svfprintf_r+0x27e>
  4073a6:	463c      	mov	r4, r7
  4073a8:	4637      	mov	r7, r6
  4073aa:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4073ac:	3201      	adds	r2, #1
  4073ae:	eb0a 0c01 	add.w	ip, sl, r1
  4073b2:	f8cb 7000 	str.w	r7, [fp]
  4073b6:	2a07      	cmp	r2, #7
  4073b8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4073bc:	9224      	str	r2, [sp, #144]	; 0x90
  4073be:	f8cb a004 	str.w	sl, [fp, #4]
  4073c2:	f300 82b6 	bgt.w	407932 <_svfprintf_r+0x842>
  4073c6:	f10b 0b08 	add.w	fp, fp, #8
  4073ca:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4073ce:	b197      	cbz	r7, 4073f6 <_svfprintf_r+0x306>
  4073d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073d2:	2201      	movs	r2, #1
  4073d4:	f10c 0c01 	add.w	ip, ip, #1
  4073d8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4073dc:	4413      	add	r3, r2
  4073de:	f8cb 2004 	str.w	r2, [fp, #4]
  4073e2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4073e6:	2b07      	cmp	r3, #7
  4073e8:	f8cb 1000 	str.w	r1, [fp]
  4073ec:	9324      	str	r3, [sp, #144]	; 0x90
  4073ee:	f300 83fb 	bgt.w	407be8 <_svfprintf_r+0xaf8>
  4073f2:	f10b 0b08 	add.w	fp, fp, #8
  4073f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4073f8:	b18b      	cbz	r3, 40741e <_svfprintf_r+0x32e>
  4073fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073fc:	f10c 0c02 	add.w	ip, ip, #2
  407400:	a91c      	add	r1, sp, #112	; 0x70
  407402:	2202      	movs	r2, #2
  407404:	3301      	adds	r3, #1
  407406:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40740a:	f8cb 1000 	str.w	r1, [fp]
  40740e:	2b07      	cmp	r3, #7
  407410:	9324      	str	r3, [sp, #144]	; 0x90
  407412:	f8cb 2004 	str.w	r2, [fp, #4]
  407416:	f300 83db 	bgt.w	407bd0 <_svfprintf_r+0xae0>
  40741a:	f10b 0b08 	add.w	fp, fp, #8
  40741e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407420:	2b80      	cmp	r3, #128	; 0x80
  407422:	f000 8321 	beq.w	407a68 <_svfprintf_r+0x978>
  407426:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407428:	1b1f      	subs	r7, r3, r4
  40742a:	2f00      	cmp	r7, #0
  40742c:	dd37      	ble.n	40749e <_svfprintf_r+0x3ae>
  40742e:	2f10      	cmp	r7, #16
  407430:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407432:	f340 85ec 	ble.w	40800e <_svfprintf_r+0xf1e>
  407436:	940d      	str	r4, [sp, #52]	; 0x34
  407438:	f04f 0a10 	mov.w	sl, #16
  40743c:	4d86      	ldr	r5, [pc, #536]	; (407658 <_svfprintf_r+0x568>)
  40743e:	4662      	mov	r2, ip
  407440:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407442:	e002      	b.n	40744a <_svfprintf_r+0x35a>
  407444:	3f10      	subs	r7, #16
  407446:	2f10      	cmp	r7, #16
  407448:	dd19      	ble.n	40747e <_svfprintf_r+0x38e>
  40744a:	3301      	adds	r3, #1
  40744c:	3210      	adds	r2, #16
  40744e:	f8cb 5000 	str.w	r5, [fp]
  407452:	f10b 0b08 	add.w	fp, fp, #8
  407456:	2b07      	cmp	r3, #7
  407458:	f84b ac04 	str.w	sl, [fp, #-4]
  40745c:	9225      	str	r2, [sp, #148]	; 0x94
  40745e:	9324      	str	r3, [sp, #144]	; 0x90
  407460:	ddf0      	ble.n	407444 <_svfprintf_r+0x354>
  407462:	4620      	mov	r0, r4
  407464:	4649      	mov	r1, r9
  407466:	aa23      	add	r2, sp, #140	; 0x8c
  407468:	46c3      	mov	fp, r8
  40746a:	f003 ffd1 	bl	40b410 <__ssprint_r>
  40746e:	2800      	cmp	r0, #0
  407470:	f47f af03 	bne.w	40727a <_svfprintf_r+0x18a>
  407474:	3f10      	subs	r7, #16
  407476:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407478:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40747a:	2f10      	cmp	r7, #16
  40747c:	dce5      	bgt.n	40744a <_svfprintf_r+0x35a>
  40747e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407480:	4694      	mov	ip, r2
  407482:	3301      	adds	r3, #1
  407484:	44bc      	add	ip, r7
  407486:	f8cb 5000 	str.w	r5, [fp]
  40748a:	2b07      	cmp	r3, #7
  40748c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407490:	9324      	str	r3, [sp, #144]	; 0x90
  407492:	f8cb 7004 	str.w	r7, [fp, #4]
  407496:	f300 838f 	bgt.w	407bb8 <_svfprintf_r+0xac8>
  40749a:	f10b 0b08 	add.w	fp, fp, #8
  40749e:	9b06      	ldr	r3, [sp, #24]
  4074a0:	05df      	lsls	r7, r3, #23
  4074a2:	f100 8254 	bmi.w	40794e <_svfprintf_r+0x85e>
  4074a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074a8:	44a4      	add	ip, r4
  4074aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4074ac:	3301      	adds	r3, #1
  4074ae:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4074b2:	f8cb 2000 	str.w	r2, [fp]
  4074b6:	2b07      	cmp	r3, #7
  4074b8:	f8cb 4004 	str.w	r4, [fp, #4]
  4074bc:	9324      	str	r3, [sp, #144]	; 0x90
  4074be:	f300 8360 	bgt.w	407b82 <_svfprintf_r+0xa92>
  4074c2:	f10b 0b08 	add.w	fp, fp, #8
  4074c6:	9b06      	ldr	r3, [sp, #24]
  4074c8:	075a      	lsls	r2, r3, #29
  4074ca:	d540      	bpl.n	40754e <_svfprintf_r+0x45e>
  4074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4074ce:	9a07      	ldr	r2, [sp, #28]
  4074d0:	1a9c      	subs	r4, r3, r2
  4074d2:	2c00      	cmp	r4, #0
  4074d4:	dd3b      	ble.n	40754e <_svfprintf_r+0x45e>
  4074d6:	2c10      	cmp	r4, #16
  4074d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074da:	f340 876b 	ble.w	4083b4 <_svfprintf_r+0x12c4>
  4074de:	2510      	movs	r5, #16
  4074e0:	4f5c      	ldr	r7, [pc, #368]	; (407654 <_svfprintf_r+0x564>)
  4074e2:	4662      	mov	r2, ip
  4074e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4074e6:	e002      	b.n	4074ee <_svfprintf_r+0x3fe>
  4074e8:	3c10      	subs	r4, #16
  4074ea:	2c10      	cmp	r4, #16
  4074ec:	dd19      	ble.n	407522 <_svfprintf_r+0x432>
  4074ee:	3301      	adds	r3, #1
  4074f0:	3210      	adds	r2, #16
  4074f2:	f8cb 7000 	str.w	r7, [fp]
  4074f6:	f10b 0b08 	add.w	fp, fp, #8
  4074fa:	2b07      	cmp	r3, #7
  4074fc:	f84b 5c04 	str.w	r5, [fp, #-4]
  407500:	9225      	str	r2, [sp, #148]	; 0x94
  407502:	9324      	str	r3, [sp, #144]	; 0x90
  407504:	ddf0      	ble.n	4074e8 <_svfprintf_r+0x3f8>
  407506:	4630      	mov	r0, r6
  407508:	4649      	mov	r1, r9
  40750a:	aa23      	add	r2, sp, #140	; 0x8c
  40750c:	46c3      	mov	fp, r8
  40750e:	f003 ff7f 	bl	40b410 <__ssprint_r>
  407512:	2800      	cmp	r0, #0
  407514:	f47f aeb1 	bne.w	40727a <_svfprintf_r+0x18a>
  407518:	3c10      	subs	r4, #16
  40751a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40751c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40751e:	2c10      	cmp	r4, #16
  407520:	dce5      	bgt.n	4074ee <_svfprintf_r+0x3fe>
  407522:	4694      	mov	ip, r2
  407524:	3301      	adds	r3, #1
  407526:	44a4      	add	ip, r4
  407528:	f8cb 7000 	str.w	r7, [fp]
  40752c:	2b07      	cmp	r3, #7
  40752e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407532:	9324      	str	r3, [sp, #144]	; 0x90
  407534:	f8cb 4004 	str.w	r4, [fp, #4]
  407538:	dd09      	ble.n	40754e <_svfprintf_r+0x45e>
  40753a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40753c:	4649      	mov	r1, r9
  40753e:	aa23      	add	r2, sp, #140	; 0x8c
  407540:	f003 ff66 	bl	40b410 <__ssprint_r>
  407544:	2800      	cmp	r0, #0
  407546:	f47f ae98 	bne.w	40727a <_svfprintf_r+0x18a>
  40754a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40754e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407550:	9a07      	ldr	r2, [sp, #28]
  407552:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407554:	428a      	cmp	r2, r1
  407556:	bfac      	ite	ge
  407558:	189b      	addge	r3, r3, r2
  40755a:	185b      	addlt	r3, r3, r1
  40755c:	930a      	str	r3, [sp, #40]	; 0x28
  40755e:	f1bc 0f00 	cmp.w	ip, #0
  407562:	f040 831a 	bne.w	407b9a <_svfprintf_r+0xaaa>
  407566:	2300      	movs	r3, #0
  407568:	46c3      	mov	fp, r8
  40756a:	9324      	str	r3, [sp, #144]	; 0x90
  40756c:	e5e6      	b.n	40713c <_svfprintf_r+0x4c>
  40756e:	4619      	mov	r1, r3
  407570:	9806      	ldr	r0, [sp, #24]
  407572:	781e      	ldrb	r6, [r3, #0]
  407574:	f040 0004 	orr.w	r0, r0, #4
  407578:	9006      	str	r0, [sp, #24]
  40757a:	e60e      	b.n	40719a <_svfprintf_r+0xaa>
  40757c:	9308      	str	r3, [sp, #32]
  40757e:	46a4      	mov	ip, r4
  407580:	9b06      	ldr	r3, [sp, #24]
  407582:	f013 0320 	ands.w	r3, r3, #32
  407586:	f000 80ae 	beq.w	4076e6 <_svfprintf_r+0x5f6>
  40758a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40758c:	2300      	movs	r3, #0
  40758e:	3707      	adds	r7, #7
  407590:	f027 0207 	bic.w	r2, r7, #7
  407594:	f102 0108 	add.w	r1, r2, #8
  407598:	e9d2 4500 	ldrd	r4, r5, [r2]
  40759c:	910c      	str	r1, [sp, #48]	; 0x30
  40759e:	e68a      	b.n	4072b6 <_svfprintf_r+0x1c6>
  4075a0:	781e      	ldrb	r6, [r3, #0]
  4075a2:	4619      	mov	r1, r3
  4075a4:	222b      	movs	r2, #43	; 0x2b
  4075a6:	e5f8      	b.n	40719a <_svfprintf_r+0xaa>
  4075a8:	781e      	ldrb	r6, [r3, #0]
  4075aa:	1c59      	adds	r1, r3, #1
  4075ac:	2e2a      	cmp	r6, #42	; 0x2a
  4075ae:	f001 8006 	beq.w	4085be <_svfprintf_r+0x14ce>
  4075b2:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4075b6:	460b      	mov	r3, r1
  4075b8:	2400      	movs	r4, #0
  4075ba:	2809      	cmp	r0, #9
  4075bc:	f63f adee 	bhi.w	40719c <_svfprintf_r+0xac>
  4075c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4075c4:	f813 6b01 	ldrb.w	r6, [r3], #1
  4075c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4075cc:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4075d0:	2809      	cmp	r0, #9
  4075d2:	d9f5      	bls.n	4075c0 <_svfprintf_r+0x4d0>
  4075d4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4075d8:	e5e0      	b.n	40719c <_svfprintf_r+0xac>
  4075da:	9308      	str	r3, [sp, #32]
  4075dc:	46a4      	mov	ip, r4
  4075de:	9b06      	ldr	r3, [sp, #24]
  4075e0:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4075e4:	069c      	lsls	r4, r3, #26
  4075e6:	f140 8129 	bpl.w	40783c <_svfprintf_r+0x74c>
  4075ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4075ec:	3707      	adds	r7, #7
  4075ee:	f027 0707 	bic.w	r7, r7, #7
  4075f2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4075f6:	f107 0108 	add.w	r1, r7, #8
  4075fa:	4614      	mov	r4, r2
  4075fc:	461d      	mov	r5, r3
  4075fe:	910c      	str	r1, [sp, #48]	; 0x30
  407600:	2a00      	cmp	r2, #0
  407602:	f173 0300 	sbcs.w	r3, r3, #0
  407606:	f2c0 812a 	blt.w	40785e <_svfprintf_r+0x76e>
  40760a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40760e:	2301      	movs	r3, #1
  407610:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407614:	e655      	b.n	4072c2 <_svfprintf_r+0x1d2>
  407616:	781e      	ldrb	r6, [r3, #0]
  407618:	9906      	ldr	r1, [sp, #24]
  40761a:	2e6c      	cmp	r6, #108	; 0x6c
  40761c:	f000 8557 	beq.w	4080ce <_svfprintf_r+0xfde>
  407620:	f041 0110 	orr.w	r1, r1, #16
  407624:	9106      	str	r1, [sp, #24]
  407626:	4619      	mov	r1, r3
  407628:	e5b7      	b.n	40719a <_svfprintf_r+0xaa>
  40762a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40762c:	6829      	ldr	r1, [r5, #0]
  40762e:	4608      	mov	r0, r1
  407630:	910b      	str	r1, [sp, #44]	; 0x2c
  407632:	4629      	mov	r1, r5
  407634:	2800      	cmp	r0, #0
  407636:	f101 0104 	add.w	r1, r1, #4
  40763a:	f2c0 854f 	blt.w	4080dc <_svfprintf_r+0xfec>
  40763e:	910c      	str	r1, [sp, #48]	; 0x30
  407640:	4619      	mov	r1, r3
  407642:	781e      	ldrb	r6, [r3, #0]
  407644:	e5a9      	b.n	40719a <_svfprintf_r+0xaa>
  407646:	9906      	ldr	r1, [sp, #24]
  407648:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40764c:	9106      	str	r1, [sp, #24]
  40764e:	4619      	mov	r1, r3
  407650:	781e      	ldrb	r6, [r3, #0]
  407652:	e5a2      	b.n	40719a <_svfprintf_r+0xaa>
  407654:	0040d0d8 	.word	0x0040d0d8
  407658:	0040d0c8 	.word	0x0040d0c8
  40765c:	9906      	ldr	r1, [sp, #24]
  40765e:	f041 0120 	orr.w	r1, r1, #32
  407662:	9106      	str	r1, [sp, #24]
  407664:	4619      	mov	r1, r3
  407666:	781e      	ldrb	r6, [r3, #0]
  407668:	e597      	b.n	40719a <_svfprintf_r+0xaa>
  40766a:	9308      	str	r3, [sp, #32]
  40766c:	9b06      	ldr	r3, [sp, #24]
  40766e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407672:	069e      	lsls	r6, r3, #26
  407674:	f140 84a4 	bpl.w	407fc0 <_svfprintf_r+0xed0>
  407678:	990a      	ldr	r1, [sp, #40]	; 0x28
  40767a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40767c:	17cd      	asrs	r5, r1, #31
  40767e:	4608      	mov	r0, r1
  407680:	6813      	ldr	r3, [r2, #0]
  407682:	3204      	adds	r2, #4
  407684:	4629      	mov	r1, r5
  407686:	920c      	str	r2, [sp, #48]	; 0x30
  407688:	e9c3 0100 	strd	r0, r1, [r3]
  40768c:	e556      	b.n	40713c <_svfprintf_r+0x4c>
  40768e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407690:	2500      	movs	r5, #0
  407692:	9308      	str	r3, [sp, #32]
  407694:	6813      	ldr	r3, [r2, #0]
  407696:	1d17      	adds	r7, r2, #4
  407698:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  40769c:	930f      	str	r3, [sp, #60]	; 0x3c
  40769e:	2b00      	cmp	r3, #0
  4076a0:	f000 867a 	beq.w	408398 <_svfprintf_r+0x12a8>
  4076a4:	2c00      	cmp	r4, #0
  4076a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4076a8:	f2c0 8624 	blt.w	4082f4 <_svfprintf_r+0x1204>
  4076ac:	4629      	mov	r1, r5
  4076ae:	4622      	mov	r2, r4
  4076b0:	f002 ffea 	bl	40a688 <memchr>
  4076b4:	2800      	cmp	r0, #0
  4076b6:	f000 86df 	beq.w	408478 <_svfprintf_r+0x1388>
  4076ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4076bc:	970c      	str	r7, [sp, #48]	; 0x30
  4076be:	1ac4      	subs	r4, r0, r3
  4076c0:	9510      	str	r5, [sp, #64]	; 0x40
  4076c2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4076c6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4076ca:	9511      	str	r5, [sp, #68]	; 0x44
  4076cc:	9307      	str	r3, [sp, #28]
  4076ce:	e622      	b.n	407316 <_svfprintf_r+0x226>
  4076d0:	9308      	str	r3, [sp, #32]
  4076d2:	46a4      	mov	ip, r4
  4076d4:	9b06      	ldr	r3, [sp, #24]
  4076d6:	f043 0310 	orr.w	r3, r3, #16
  4076da:	9306      	str	r3, [sp, #24]
  4076dc:	9b06      	ldr	r3, [sp, #24]
  4076de:	f013 0320 	ands.w	r3, r3, #32
  4076e2:	f47f af52 	bne.w	40758a <_svfprintf_r+0x49a>
  4076e6:	9a06      	ldr	r2, [sp, #24]
  4076e8:	f012 0210 	ands.w	r2, r2, #16
  4076ec:	f040 8352 	bne.w	407d94 <_svfprintf_r+0xca4>
  4076f0:	9b06      	ldr	r3, [sp, #24]
  4076f2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  4076f6:	f000 834d 	beq.w	407d94 <_svfprintf_r+0xca4>
  4076fa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4076fc:	4613      	mov	r3, r2
  4076fe:	2500      	movs	r5, #0
  407700:	460a      	mov	r2, r1
  407702:	880c      	ldrh	r4, [r1, #0]
  407704:	3204      	adds	r2, #4
  407706:	920c      	str	r2, [sp, #48]	; 0x30
  407708:	e5d5      	b.n	4072b6 <_svfprintf_r+0x1c6>
  40770a:	9308      	str	r3, [sp, #32]
  40770c:	46a4      	mov	ip, r4
  40770e:	9b06      	ldr	r3, [sp, #24]
  407710:	f043 0310 	orr.w	r3, r3, #16
  407714:	9306      	str	r3, [sp, #24]
  407716:	9b06      	ldr	r3, [sp, #24]
  407718:	0698      	lsls	r0, r3, #26
  40771a:	f53f adc2 	bmi.w	4072a2 <_svfprintf_r+0x1b2>
  40771e:	9b06      	ldr	r3, [sp, #24]
  407720:	06d9      	lsls	r1, r3, #27
  407722:	f140 8432 	bpl.w	407f8a <_svfprintf_r+0xe9a>
  407726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407728:	4613      	mov	r3, r2
  40772a:	3204      	adds	r2, #4
  40772c:	681c      	ldr	r4, [r3, #0]
  40772e:	2500      	movs	r5, #0
  407730:	2301      	movs	r3, #1
  407732:	920c      	str	r2, [sp, #48]	; 0x30
  407734:	e5bf      	b.n	4072b6 <_svfprintf_r+0x1c6>
  407736:	9308      	str	r3, [sp, #32]
  407738:	46a4      	mov	ip, r4
  40773a:	4bb7      	ldr	r3, [pc, #732]	; (407a18 <_svfprintf_r+0x928>)
  40773c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407740:	9315      	str	r3, [sp, #84]	; 0x54
  407742:	9b06      	ldr	r3, [sp, #24]
  407744:	069a      	lsls	r2, r3, #26
  407746:	d53e      	bpl.n	4077c6 <_svfprintf_r+0x6d6>
  407748:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40774a:	3707      	adds	r7, #7
  40774c:	f027 0307 	bic.w	r3, r7, #7
  407750:	f103 0208 	add.w	r2, r3, #8
  407754:	e9d3 4500 	ldrd	r4, r5, [r3]
  407758:	920c      	str	r2, [sp, #48]	; 0x30
  40775a:	9b06      	ldr	r3, [sp, #24]
  40775c:	07df      	lsls	r7, r3, #31
  40775e:	f140 8268 	bpl.w	407c32 <_svfprintf_r+0xb42>
  407762:	ea54 0305 	orrs.w	r3, r4, r5
  407766:	f000 8264 	beq.w	407c32 <_svfprintf_r+0xb42>
  40776a:	9b06      	ldr	r3, [sp, #24]
  40776c:	2230      	movs	r2, #48	; 0x30
  40776e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  407772:	f043 0302 	orr.w	r3, r3, #2
  407776:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40777a:	9306      	str	r3, [sp, #24]
  40777c:	2302      	movs	r3, #2
  40777e:	e59a      	b.n	4072b6 <_svfprintf_r+0x1c6>
  407780:	990c      	ldr	r1, [sp, #48]	; 0x30
  407782:	2001      	movs	r0, #1
  407784:	9308      	str	r3, [sp, #32]
  407786:	2300      	movs	r3, #0
  407788:	680a      	ldr	r2, [r1, #0]
  40778a:	3104      	adds	r1, #4
  40778c:	461f      	mov	r7, r3
  40778e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407792:	9310      	str	r3, [sp, #64]	; 0x40
  407794:	4604      	mov	r4, r0
  407796:	9311      	str	r3, [sp, #68]	; 0x44
  407798:	ab26      	add	r3, sp, #152	; 0x98
  40779a:	9007      	str	r0, [sp, #28]
  40779c:	910c      	str	r1, [sp, #48]	; 0x30
  40779e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4077a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4077a4:	e5bb      	b.n	40731e <_svfprintf_r+0x22e>
  4077a6:	9906      	ldr	r1, [sp, #24]
  4077a8:	f041 0108 	orr.w	r1, r1, #8
  4077ac:	9106      	str	r1, [sp, #24]
  4077ae:	4619      	mov	r1, r3
  4077b0:	781e      	ldrb	r6, [r3, #0]
  4077b2:	e4f2      	b.n	40719a <_svfprintf_r+0xaa>
  4077b4:	9308      	str	r3, [sp, #32]
  4077b6:	46a4      	mov	ip, r4
  4077b8:	4b98      	ldr	r3, [pc, #608]	; (407a1c <_svfprintf_r+0x92c>)
  4077ba:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4077be:	9315      	str	r3, [sp, #84]	; 0x54
  4077c0:	9b06      	ldr	r3, [sp, #24]
  4077c2:	069a      	lsls	r2, r3, #26
  4077c4:	d4c0      	bmi.n	407748 <_svfprintf_r+0x658>
  4077c6:	9b06      	ldr	r3, [sp, #24]
  4077c8:	06db      	lsls	r3, r3, #27
  4077ca:	f140 83ec 	bpl.w	407fa6 <_svfprintf_r+0xeb6>
  4077ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4077d0:	2500      	movs	r5, #0
  4077d2:	4613      	mov	r3, r2
  4077d4:	6814      	ldr	r4, [r2, #0]
  4077d6:	3304      	adds	r3, #4
  4077d8:	930c      	str	r3, [sp, #48]	; 0x30
  4077da:	e7be      	b.n	40775a <_svfprintf_r+0x66a>
  4077dc:	781e      	ldrb	r6, [r3, #0]
  4077de:	4619      	mov	r1, r3
  4077e0:	2a00      	cmp	r2, #0
  4077e2:	f47f acda 	bne.w	40719a <_svfprintf_r+0xaa>
  4077e6:	2220      	movs	r2, #32
  4077e8:	e4d7      	b.n	40719a <_svfprintf_r+0xaa>
  4077ea:	9906      	ldr	r1, [sp, #24]
  4077ec:	f041 0101 	orr.w	r1, r1, #1
  4077f0:	9106      	str	r1, [sp, #24]
  4077f2:	4619      	mov	r1, r3
  4077f4:	781e      	ldrb	r6, [r3, #0]
  4077f6:	e4d0      	b.n	40719a <_svfprintf_r+0xaa>
  4077f8:	9906      	ldr	r1, [sp, #24]
  4077fa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4077fe:	9106      	str	r1, [sp, #24]
  407800:	4619      	mov	r1, r3
  407802:	781e      	ldrb	r6, [r3, #0]
  407804:	e4c9      	b.n	40719a <_svfprintf_r+0xaa>
  407806:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40780a:	2100      	movs	r1, #0
  40780c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407810:	f813 6b01 	ldrb.w	r6, [r3], #1
  407814:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  407818:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40781c:	2809      	cmp	r0, #9
  40781e:	d9f5      	bls.n	40780c <_svfprintf_r+0x71c>
  407820:	910b      	str	r1, [sp, #44]	; 0x2c
  407822:	e4bb      	b.n	40719c <_svfprintf_r+0xac>
  407824:	9308      	str	r3, [sp, #32]
  407826:	46a4      	mov	ip, r4
  407828:	9b06      	ldr	r3, [sp, #24]
  40782a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40782e:	f043 0310 	orr.w	r3, r3, #16
  407832:	9306      	str	r3, [sp, #24]
  407834:	9b06      	ldr	r3, [sp, #24]
  407836:	069c      	lsls	r4, r3, #26
  407838:	f53f aed7 	bmi.w	4075ea <_svfprintf_r+0x4fa>
  40783c:	9b06      	ldr	r3, [sp, #24]
  40783e:	06d8      	lsls	r0, r3, #27
  407840:	f140 83d5 	bpl.w	407fee <_svfprintf_r+0xefe>
  407844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407846:	4613      	mov	r3, r2
  407848:	681c      	ldr	r4, [r3, #0]
  40784a:	3304      	adds	r3, #4
  40784c:	17e5      	asrs	r5, r4, #31
  40784e:	4622      	mov	r2, r4
  407850:	930c      	str	r3, [sp, #48]	; 0x30
  407852:	2a00      	cmp	r2, #0
  407854:	462b      	mov	r3, r5
  407856:	f173 0300 	sbcs.w	r3, r3, #0
  40785a:	f6bf aed6 	bge.w	40760a <_svfprintf_r+0x51a>
  40785e:	272d      	movs	r7, #45	; 0x2d
  407860:	4264      	negs	r4, r4
  407862:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407866:	f04f 0301 	mov.w	r3, #1
  40786a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40786e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407872:	e526      	b.n	4072c2 <_svfprintf_r+0x1d2>
  407874:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407876:	9308      	str	r3, [sp, #32]
  407878:	3707      	adds	r7, #7
  40787a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40787e:	f027 0307 	bic.w	r3, r7, #7
  407882:	f103 0208 	add.w	r2, r3, #8
  407886:	920c      	str	r2, [sp, #48]	; 0x30
  407888:	681a      	ldr	r2, [r3, #0]
  40788a:	9213      	str	r2, [sp, #76]	; 0x4c
  40788c:	685b      	ldr	r3, [r3, #4]
  40788e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407890:	9314      	str	r3, [sp, #80]	; 0x50
  407892:	9914      	ldr	r1, [sp, #80]	; 0x50
  407894:	9407      	str	r4, [sp, #28]
  407896:	f003 fd43 	bl	40b320 <__fpclassifyd>
  40789a:	2801      	cmp	r0, #1
  40789c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4078a0:	f040 8355 	bne.w	407f4e <_svfprintf_r+0xe5e>
  4078a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4078a6:	2200      	movs	r2, #0
  4078a8:	2300      	movs	r3, #0
  4078aa:	9914      	ldr	r1, [sp, #80]	; 0x50
  4078ac:	f004 fb9c 	bl	40bfe8 <__aeabi_dcmplt>
  4078b0:	2800      	cmp	r0, #0
  4078b2:	f040 8582 	bne.w	4083ba <_svfprintf_r+0x12ca>
  4078b6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4078ba:	2303      	movs	r3, #3
  4078bc:	9806      	ldr	r0, [sp, #24]
  4078be:	4a58      	ldr	r2, [pc, #352]	; (407a20 <_svfprintf_r+0x930>)
  4078c0:	2100      	movs	r1, #0
  4078c2:	461c      	mov	r4, r3
  4078c4:	9307      	str	r3, [sp, #28]
  4078c6:	4b57      	ldr	r3, [pc, #348]	; (407a24 <_svfprintf_r+0x934>)
  4078c8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  4078cc:	9110      	str	r1, [sp, #64]	; 0x40
  4078ce:	2e47      	cmp	r6, #71	; 0x47
  4078d0:	bfd8      	it	le
  4078d2:	461a      	movle	r2, r3
  4078d4:	9006      	str	r0, [sp, #24]
  4078d6:	9111      	str	r1, [sp, #68]	; 0x44
  4078d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4078da:	e51c      	b.n	407316 <_svfprintf_r+0x226>
  4078dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4078de:	2230      	movs	r2, #48	; 0x30
  4078e0:	9806      	ldr	r0, [sp, #24]
  4078e2:	46a4      	mov	ip, r4
  4078e4:	4629      	mov	r1, r5
  4078e6:	9308      	str	r3, [sp, #32]
  4078e8:	2378      	movs	r3, #120	; 0x78
  4078ea:	f040 0002 	orr.w	r0, r0, #2
  4078ee:	3104      	adds	r1, #4
  4078f0:	682c      	ldr	r4, [r5, #0]
  4078f2:	461e      	mov	r6, r3
  4078f4:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  4078f8:	4b48      	ldr	r3, [pc, #288]	; (407a1c <_svfprintf_r+0x92c>)
  4078fa:	2500      	movs	r5, #0
  4078fc:	9006      	str	r0, [sp, #24]
  4078fe:	9315      	str	r3, [sp, #84]	; 0x54
  407900:	2302      	movs	r3, #2
  407902:	910c      	str	r1, [sp, #48]	; 0x30
  407904:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  407908:	e4d5      	b.n	4072b6 <_svfprintf_r+0x1c6>
  40790a:	9308      	str	r3, [sp, #32]
  40790c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  407910:	2e00      	cmp	r6, #0
  407912:	f43f acab 	beq.w	40726c <_svfprintf_r+0x17c>
  407916:	2300      	movs	r3, #0
  407918:	2201      	movs	r2, #1
  40791a:	a926      	add	r1, sp, #152	; 0x98
  40791c:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  407920:	9207      	str	r2, [sp, #28]
  407922:	461f      	mov	r7, r3
  407924:	910f      	str	r1, [sp, #60]	; 0x3c
  407926:	4614      	mov	r4, r2
  407928:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40792c:	9310      	str	r3, [sp, #64]	; 0x40
  40792e:	9311      	str	r3, [sp, #68]	; 0x44
  407930:	e4f5      	b.n	40731e <_svfprintf_r+0x22e>
  407932:	9809      	ldr	r0, [sp, #36]	; 0x24
  407934:	4649      	mov	r1, r9
  407936:	aa23      	add	r2, sp, #140	; 0x8c
  407938:	f003 fd6a 	bl	40b410 <__ssprint_r>
  40793c:	2800      	cmp	r0, #0
  40793e:	f47f ac9c 	bne.w	40727a <_svfprintf_r+0x18a>
  407942:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407946:	46c3      	mov	fp, r8
  407948:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40794c:	e53f      	b.n	4073ce <_svfprintf_r+0x2de>
  40794e:	2e65      	cmp	r6, #101	; 0x65
  407950:	f340 80c9 	ble.w	407ae6 <_svfprintf_r+0x9f6>
  407954:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407956:	2200      	movs	r2, #0
  407958:	2300      	movs	r3, #0
  40795a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40795c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  407960:	f004 fb38 	bl	40bfd4 <__aeabi_dcmpeq>
  407964:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  407968:	2800      	cmp	r0, #0
  40796a:	f000 8165 	beq.w	407c38 <_svfprintf_r+0xb48>
  40796e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407970:	2201      	movs	r2, #1
  407972:	f10c 0c01 	add.w	ip, ip, #1
  407976:	492c      	ldr	r1, [pc, #176]	; (407a28 <_svfprintf_r+0x938>)
  407978:	4413      	add	r3, r2
  40797a:	f8cb 2004 	str.w	r2, [fp, #4]
  40797e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407982:	2b07      	cmp	r3, #7
  407984:	f8cb 1000 	str.w	r1, [fp]
  407988:	9324      	str	r3, [sp, #144]	; 0x90
  40798a:	f300 8343 	bgt.w	408014 <_svfprintf_r+0xf24>
  40798e:	f10b 0b08 	add.w	fp, fp, #8
  407992:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407994:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407996:	4293      	cmp	r3, r2
  407998:	db03      	blt.n	4079a2 <_svfprintf_r+0x8b2>
  40799a:	9b06      	ldr	r3, [sp, #24]
  40799c:	07de      	lsls	r6, r3, #31
  40799e:	f57f ad92 	bpl.w	4074c6 <_svfprintf_r+0x3d6>
  4079a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4079a6:	3301      	adds	r3, #1
  4079a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4079aa:	448c      	add	ip, r1
  4079ac:	f8cb 1004 	str.w	r1, [fp, #4]
  4079b0:	2b07      	cmp	r3, #7
  4079b2:	f8cb 2000 	str.w	r2, [fp]
  4079b6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4079ba:	9324      	str	r3, [sp, #144]	; 0x90
  4079bc:	f300 841d 	bgt.w	4081fa <_svfprintf_r+0x110a>
  4079c0:	f10b 0b08 	add.w	fp, fp, #8
  4079c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4079c6:	1e5c      	subs	r4, r3, #1
  4079c8:	2c00      	cmp	r4, #0
  4079ca:	f77f ad7c 	ble.w	4074c6 <_svfprintf_r+0x3d6>
  4079ce:	2c10      	cmp	r4, #16
  4079d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079d2:	f340 85bc 	ble.w	40854e <_svfprintf_r+0x145e>
  4079d6:	2610      	movs	r6, #16
  4079d8:	4d14      	ldr	r5, [pc, #80]	; (407a2c <_svfprintf_r+0x93c>)
  4079da:	4662      	mov	r2, ip
  4079dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4079de:	e003      	b.n	4079e8 <_svfprintf_r+0x8f8>
  4079e0:	3c10      	subs	r4, #16
  4079e2:	2c10      	cmp	r4, #16
  4079e4:	f340 81c8 	ble.w	407d78 <_svfprintf_r+0xc88>
  4079e8:	3301      	adds	r3, #1
  4079ea:	3210      	adds	r2, #16
  4079ec:	f8cb 5000 	str.w	r5, [fp]
  4079f0:	f10b 0b08 	add.w	fp, fp, #8
  4079f4:	2b07      	cmp	r3, #7
  4079f6:	f84b 6c04 	str.w	r6, [fp, #-4]
  4079fa:	9225      	str	r2, [sp, #148]	; 0x94
  4079fc:	9324      	str	r3, [sp, #144]	; 0x90
  4079fe:	ddef      	ble.n	4079e0 <_svfprintf_r+0x8f0>
  407a00:	4638      	mov	r0, r7
  407a02:	4649      	mov	r1, r9
  407a04:	aa23      	add	r2, sp, #140	; 0x8c
  407a06:	46c3      	mov	fp, r8
  407a08:	f003 fd02 	bl	40b410 <__ssprint_r>
  407a0c:	2800      	cmp	r0, #0
  407a0e:	f47f ac34 	bne.w	40727a <_svfprintf_r+0x18a>
  407a12:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407a14:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a16:	e7e3      	b.n	4079e0 <_svfprintf_r+0x8f0>
  407a18:	0040d0f8 	.word	0x0040d0f8
  407a1c:	0040d10c 	.word	0x0040d10c
  407a20:	0040d0ec 	.word	0x0040d0ec
  407a24:	0040d0e8 	.word	0x0040d0e8
  407a28:	0040d128 	.word	0x0040d128
  407a2c:	0040d0c8 	.word	0x0040d0c8
  407a30:	2b01      	cmp	r3, #1
  407a32:	f000 814d 	beq.w	407cd0 <_svfprintf_r+0xbe0>
  407a36:	2b02      	cmp	r3, #2
  407a38:	f040 80e3 	bne.w	407c02 <_svfprintf_r+0xb12>
  407a3c:	46c2      	mov	sl, r8
  407a3e:	9815      	ldr	r0, [sp, #84]	; 0x54
  407a40:	0923      	lsrs	r3, r4, #4
  407a42:	f004 010f 	and.w	r1, r4, #15
  407a46:	092a      	lsrs	r2, r5, #4
  407a48:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407a4c:	4615      	mov	r5, r2
  407a4e:	461c      	mov	r4, r3
  407a50:	5c43      	ldrb	r3, [r0, r1]
  407a52:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  407a56:	ea54 0305 	orrs.w	r3, r4, r5
  407a5a:	d1f1      	bne.n	407a40 <_svfprintf_r+0x950>
  407a5c:	4653      	mov	r3, sl
  407a5e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407a62:	ebc3 0408 	rsb	r4, r3, r8
  407a66:	e44f      	b.n	407308 <_svfprintf_r+0x218>
  407a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a6a:	9a07      	ldr	r2, [sp, #28]
  407a6c:	1a9f      	subs	r7, r3, r2
  407a6e:	2f00      	cmp	r7, #0
  407a70:	f77f acd9 	ble.w	407426 <_svfprintf_r+0x336>
  407a74:	2f10      	cmp	r7, #16
  407a76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407a78:	f340 84f9 	ble.w	40846e <_svfprintf_r+0x137e>
  407a7c:	940d      	str	r4, [sp, #52]	; 0x34
  407a7e:	f04f 0a10 	mov.w	sl, #16
  407a82:	4dc8      	ldr	r5, [pc, #800]	; (407da4 <_svfprintf_r+0xcb4>)
  407a84:	4662      	mov	r2, ip
  407a86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407a88:	e002      	b.n	407a90 <_svfprintf_r+0x9a0>
  407a8a:	3f10      	subs	r7, #16
  407a8c:	2f10      	cmp	r7, #16
  407a8e:	dd19      	ble.n	407ac4 <_svfprintf_r+0x9d4>
  407a90:	3301      	adds	r3, #1
  407a92:	3210      	adds	r2, #16
  407a94:	f8cb 5000 	str.w	r5, [fp]
  407a98:	f10b 0b08 	add.w	fp, fp, #8
  407a9c:	2b07      	cmp	r3, #7
  407a9e:	f84b ac04 	str.w	sl, [fp, #-4]
  407aa2:	9225      	str	r2, [sp, #148]	; 0x94
  407aa4:	9324      	str	r3, [sp, #144]	; 0x90
  407aa6:	ddf0      	ble.n	407a8a <_svfprintf_r+0x99a>
  407aa8:	4620      	mov	r0, r4
  407aaa:	4649      	mov	r1, r9
  407aac:	aa23      	add	r2, sp, #140	; 0x8c
  407aae:	46c3      	mov	fp, r8
  407ab0:	f003 fcae 	bl	40b410 <__ssprint_r>
  407ab4:	2800      	cmp	r0, #0
  407ab6:	f47f abe0 	bne.w	40727a <_svfprintf_r+0x18a>
  407aba:	3f10      	subs	r7, #16
  407abc:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407abe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407ac0:	2f10      	cmp	r7, #16
  407ac2:	dce5      	bgt.n	407a90 <_svfprintf_r+0x9a0>
  407ac4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  407ac6:	4694      	mov	ip, r2
  407ac8:	3301      	adds	r3, #1
  407aca:	44bc      	add	ip, r7
  407acc:	f8cb 5000 	str.w	r5, [fp]
  407ad0:	2b07      	cmp	r3, #7
  407ad2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407ad6:	9324      	str	r3, [sp, #144]	; 0x90
  407ad8:	f8cb 7004 	str.w	r7, [fp, #4]
  407adc:	f300 81fc 	bgt.w	407ed8 <_svfprintf_r+0xde8>
  407ae0:	f10b 0b08 	add.w	fp, fp, #8
  407ae4:	e49f      	b.n	407426 <_svfprintf_r+0x336>
  407ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ae8:	f10c 0601 	add.w	r6, ip, #1
  407aec:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407aee:	2b01      	cmp	r3, #1
  407af0:	f340 81c9 	ble.w	407e86 <_svfprintf_r+0xd96>
  407af4:	2301      	movs	r3, #1
  407af6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407af8:	9625      	str	r6, [sp, #148]	; 0x94
  407afa:	441c      	add	r4, r3
  407afc:	f8cb 2000 	str.w	r2, [fp]
  407b00:	f8cb 3004 	str.w	r3, [fp, #4]
  407b04:	2c07      	cmp	r4, #7
  407b06:	9424      	str	r4, [sp, #144]	; 0x90
  407b08:	f300 81da 	bgt.w	407ec0 <_svfprintf_r+0xdd0>
  407b0c:	f10b 0b08 	add.w	fp, fp, #8
  407b10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  407b12:	3401      	adds	r4, #1
  407b14:	9b16      	ldr	r3, [sp, #88]	; 0x58
  407b16:	4416      	add	r6, r2
  407b18:	2c07      	cmp	r4, #7
  407b1a:	f8cb 3000 	str.w	r3, [fp]
  407b1e:	9625      	str	r6, [sp, #148]	; 0x94
  407b20:	9424      	str	r4, [sp, #144]	; 0x90
  407b22:	f8cb 2004 	str.w	r2, [fp, #4]
  407b26:	f300 81bf 	bgt.w	407ea8 <_svfprintf_r+0xdb8>
  407b2a:	f10b 0b08 	add.w	fp, fp, #8
  407b2e:	2300      	movs	r3, #0
  407b30:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407b32:	2200      	movs	r2, #0
  407b34:	9914      	ldr	r1, [sp, #80]	; 0x50
  407b36:	f004 fa4d 	bl	40bfd4 <__aeabi_dcmpeq>
  407b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b3c:	2800      	cmp	r0, #0
  407b3e:	f040 80dc 	bne.w	407cfa <_svfprintf_r+0xc0a>
  407b42:	3b01      	subs	r3, #1
  407b44:	3401      	adds	r4, #1
  407b46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b48:	441e      	add	r6, r3
  407b4a:	2c07      	cmp	r4, #7
  407b4c:	f102 0201 	add.w	r2, r2, #1
  407b50:	9424      	str	r4, [sp, #144]	; 0x90
  407b52:	9625      	str	r6, [sp, #148]	; 0x94
  407b54:	f8cb 2000 	str.w	r2, [fp]
  407b58:	f8cb 3004 	str.w	r3, [fp, #4]
  407b5c:	f300 8100 	bgt.w	407d60 <_svfprintf_r+0xc70>
  407b60:	f10b 0b08 	add.w	fp, fp, #8
  407b64:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407b66:	3401      	adds	r4, #1
  407b68:	ab1f      	add	r3, sp, #124	; 0x7c
  407b6a:	eb06 0c02 	add.w	ip, r6, r2
  407b6e:	2c07      	cmp	r4, #7
  407b70:	f8cb 2004 	str.w	r2, [fp, #4]
  407b74:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407b78:	9424      	str	r4, [sp, #144]	; 0x90
  407b7a:	f8cb 3000 	str.w	r3, [fp]
  407b7e:	f77f aca0 	ble.w	4074c2 <_svfprintf_r+0x3d2>
  407b82:	9809      	ldr	r0, [sp, #36]	; 0x24
  407b84:	4649      	mov	r1, r9
  407b86:	aa23      	add	r2, sp, #140	; 0x8c
  407b88:	f003 fc42 	bl	40b410 <__ssprint_r>
  407b8c:	2800      	cmp	r0, #0
  407b8e:	f47f ab74 	bne.w	40727a <_svfprintf_r+0x18a>
  407b92:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407b96:	46c3      	mov	fp, r8
  407b98:	e495      	b.n	4074c6 <_svfprintf_r+0x3d6>
  407b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
  407b9c:	4649      	mov	r1, r9
  407b9e:	aa23      	add	r2, sp, #140	; 0x8c
  407ba0:	f003 fc36 	bl	40b410 <__ssprint_r>
  407ba4:	2800      	cmp	r0, #0
  407ba6:	f43f acde 	beq.w	407566 <_svfprintf_r+0x476>
  407baa:	f7ff bb66 	b.w	40727a <_svfprintf_r+0x18a>
  407bae:	4614      	mov	r4, r2
  407bb0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  407bb4:	f7ff bba8 	b.w	407308 <_svfprintf_r+0x218>
  407bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
  407bba:	4649      	mov	r1, r9
  407bbc:	aa23      	add	r2, sp, #140	; 0x8c
  407bbe:	f003 fc27 	bl	40b410 <__ssprint_r>
  407bc2:	2800      	cmp	r0, #0
  407bc4:	f47f ab59 	bne.w	40727a <_svfprintf_r+0x18a>
  407bc8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407bcc:	46c3      	mov	fp, r8
  407bce:	e466      	b.n	40749e <_svfprintf_r+0x3ae>
  407bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  407bd2:	4649      	mov	r1, r9
  407bd4:	aa23      	add	r2, sp, #140	; 0x8c
  407bd6:	f003 fc1b 	bl	40b410 <__ssprint_r>
  407bda:	2800      	cmp	r0, #0
  407bdc:	f47f ab4d 	bne.w	40727a <_svfprintf_r+0x18a>
  407be0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407be4:	46c3      	mov	fp, r8
  407be6:	e41a      	b.n	40741e <_svfprintf_r+0x32e>
  407be8:	9809      	ldr	r0, [sp, #36]	; 0x24
  407bea:	4649      	mov	r1, r9
  407bec:	aa23      	add	r2, sp, #140	; 0x8c
  407bee:	f003 fc0f 	bl	40b410 <__ssprint_r>
  407bf2:	2800      	cmp	r0, #0
  407bf4:	f47f ab41 	bne.w	40727a <_svfprintf_r+0x18a>
  407bf8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407bfc:	46c3      	mov	fp, r8
  407bfe:	f7ff bbfa 	b.w	4073f6 <_svfprintf_r+0x306>
  407c02:	4641      	mov	r1, r8
  407c04:	08e2      	lsrs	r2, r4, #3
  407c06:	f004 0307 	and.w	r3, r4, #7
  407c0a:	08e8      	lsrs	r0, r5, #3
  407c0c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407c10:	3330      	adds	r3, #48	; 0x30
  407c12:	4605      	mov	r5, r0
  407c14:	4614      	mov	r4, r2
  407c16:	f801 3d01 	strb.w	r3, [r1, #-1]!
  407c1a:	ea54 0205 	orrs.w	r2, r4, r5
  407c1e:	d1f1      	bne.n	407c04 <_svfprintf_r+0xb14>
  407c20:	9a06      	ldr	r2, [sp, #24]
  407c22:	910f      	str	r1, [sp, #60]	; 0x3c
  407c24:	07d0      	lsls	r0, r2, #31
  407c26:	f100 8164 	bmi.w	407ef2 <_svfprintf_r+0xe02>
  407c2a:	ebc1 0408 	rsb	r4, r1, r8
  407c2e:	f7ff bb6b 	b.w	407308 <_svfprintf_r+0x218>
  407c32:	2302      	movs	r3, #2
  407c34:	f7ff bb3f 	b.w	4072b6 <_svfprintf_r+0x1c6>
  407c38:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  407c3a:	2c00      	cmp	r4, #0
  407c3c:	f340 81f6 	ble.w	40802c <_svfprintf_r+0xf3c>
  407c40:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407c42:	9911      	ldr	r1, [sp, #68]	; 0x44
  407c44:	4613      	mov	r3, r2
  407c46:	428a      	cmp	r2, r1
  407c48:	bfa8      	it	ge
  407c4a:	460b      	movge	r3, r1
  407c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407c4e:	461c      	mov	r4, r3
  407c50:	188f      	adds	r7, r1, r2
  407c52:	2c00      	cmp	r4, #0
  407c54:	dd0e      	ble.n	407c74 <_svfprintf_r+0xb84>
  407c56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c58:	44a4      	add	ip, r4
  407c5a:	f8cb 1000 	str.w	r1, [fp]
  407c5e:	3301      	adds	r3, #1
  407c60:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407c64:	f8cb 4004 	str.w	r4, [fp, #4]
  407c68:	2b07      	cmp	r3, #7
  407c6a:	9324      	str	r3, [sp, #144]	; 0x90
  407c6c:	f300 8353 	bgt.w	408316 <_svfprintf_r+0x1226>
  407c70:	f10b 0b08 	add.w	fp, fp, #8
  407c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c76:	2c00      	cmp	r4, #0
  407c78:	bfa8      	it	ge
  407c7a:	1b1b      	subge	r3, r3, r4
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	461c      	mov	r4, r3
  407c80:	f340 80a1 	ble.w	407dc6 <_svfprintf_r+0xcd6>
  407c84:	2c10      	cmp	r4, #16
  407c86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c88:	f340 846c 	ble.w	408564 <_svfprintf_r+0x1474>
  407c8c:	2610      	movs	r6, #16
  407c8e:	4d45      	ldr	r5, [pc, #276]	; (407da4 <_svfprintf_r+0xcb4>)
  407c90:	4662      	mov	r2, ip
  407c92:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  407c96:	e003      	b.n	407ca0 <_svfprintf_r+0xbb0>
  407c98:	3c10      	subs	r4, #16
  407c9a:	2c10      	cmp	r4, #16
  407c9c:	f340 8084 	ble.w	407da8 <_svfprintf_r+0xcb8>
  407ca0:	3301      	adds	r3, #1
  407ca2:	3210      	adds	r2, #16
  407ca4:	f8cb 5000 	str.w	r5, [fp]
  407ca8:	f10b 0b08 	add.w	fp, fp, #8
  407cac:	2b07      	cmp	r3, #7
  407cae:	f84b 6c04 	str.w	r6, [fp, #-4]
  407cb2:	9225      	str	r2, [sp, #148]	; 0x94
  407cb4:	9324      	str	r3, [sp, #144]	; 0x90
  407cb6:	ddef      	ble.n	407c98 <_svfprintf_r+0xba8>
  407cb8:	4650      	mov	r0, sl
  407cba:	4649      	mov	r1, r9
  407cbc:	aa23      	add	r2, sp, #140	; 0x8c
  407cbe:	46c3      	mov	fp, r8
  407cc0:	f003 fba6 	bl	40b410 <__ssprint_r>
  407cc4:	2800      	cmp	r0, #0
  407cc6:	f47f aad8 	bne.w	40727a <_svfprintf_r+0x18a>
  407cca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407ccc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407cce:	e7e3      	b.n	407c98 <_svfprintf_r+0xba8>
  407cd0:	2d00      	cmp	r5, #0
  407cd2:	bf08      	it	eq
  407cd4:	2c0a      	cmpeq	r4, #10
  407cd6:	f080 811a 	bcs.w	407f0e <_svfprintf_r+0xe1e>
  407cda:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  407cde:	3430      	adds	r4, #48	; 0x30
  407ce0:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  407ce4:	ebca 0408 	rsb	r4, sl, r8
  407ce8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407cec:	f7ff bb0c 	b.w	407308 <_svfprintf_r+0x218>
  407cf0:	461c      	mov	r4, r3
  407cf2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  407cf6:	f7ff bb07 	b.w	407308 <_svfprintf_r+0x218>
  407cfa:	1e5f      	subs	r7, r3, #1
  407cfc:	2f00      	cmp	r7, #0
  407cfe:	f77f af31 	ble.w	407b64 <_svfprintf_r+0xa74>
  407d02:	2f10      	cmp	r7, #16
  407d04:	4d27      	ldr	r5, [pc, #156]	; (407da4 <_svfprintf_r+0xcb4>)
  407d06:	bfc8      	it	gt
  407d08:	f04f 0a10 	movgt.w	sl, #16
  407d0c:	dc03      	bgt.n	407d16 <_svfprintf_r+0xc26>
  407d0e:	e01c      	b.n	407d4a <_svfprintf_r+0xc5a>
  407d10:	3f10      	subs	r7, #16
  407d12:	2f10      	cmp	r7, #16
  407d14:	dd19      	ble.n	407d4a <_svfprintf_r+0xc5a>
  407d16:	3401      	adds	r4, #1
  407d18:	3610      	adds	r6, #16
  407d1a:	f8cb 5000 	str.w	r5, [fp]
  407d1e:	f10b 0b08 	add.w	fp, fp, #8
  407d22:	2c07      	cmp	r4, #7
  407d24:	f84b ac04 	str.w	sl, [fp, #-4]
  407d28:	9625      	str	r6, [sp, #148]	; 0x94
  407d2a:	9424      	str	r4, [sp, #144]	; 0x90
  407d2c:	ddf0      	ble.n	407d10 <_svfprintf_r+0xc20>
  407d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
  407d30:	4649      	mov	r1, r9
  407d32:	aa23      	add	r2, sp, #140	; 0x8c
  407d34:	46c3      	mov	fp, r8
  407d36:	f003 fb6b 	bl	40b410 <__ssprint_r>
  407d3a:	2800      	cmp	r0, #0
  407d3c:	f47f aa9d 	bne.w	40727a <_svfprintf_r+0x18a>
  407d40:	3f10      	subs	r7, #16
  407d42:	9e25      	ldr	r6, [sp, #148]	; 0x94
  407d44:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407d46:	2f10      	cmp	r7, #16
  407d48:	dce5      	bgt.n	407d16 <_svfprintf_r+0xc26>
  407d4a:	3401      	adds	r4, #1
  407d4c:	443e      	add	r6, r7
  407d4e:	f8cb 5000 	str.w	r5, [fp]
  407d52:	2c07      	cmp	r4, #7
  407d54:	9625      	str	r6, [sp, #148]	; 0x94
  407d56:	9424      	str	r4, [sp, #144]	; 0x90
  407d58:	f8cb 7004 	str.w	r7, [fp, #4]
  407d5c:	f77f af00 	ble.w	407b60 <_svfprintf_r+0xa70>
  407d60:	9809      	ldr	r0, [sp, #36]	; 0x24
  407d62:	4649      	mov	r1, r9
  407d64:	aa23      	add	r2, sp, #140	; 0x8c
  407d66:	f003 fb53 	bl	40b410 <__ssprint_r>
  407d6a:	2800      	cmp	r0, #0
  407d6c:	f47f aa85 	bne.w	40727a <_svfprintf_r+0x18a>
  407d70:	9e25      	ldr	r6, [sp, #148]	; 0x94
  407d72:	46c3      	mov	fp, r8
  407d74:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407d76:	e6f5      	b.n	407b64 <_svfprintf_r+0xa74>
  407d78:	4694      	mov	ip, r2
  407d7a:	3301      	adds	r3, #1
  407d7c:	44a4      	add	ip, r4
  407d7e:	f8cb 5000 	str.w	r5, [fp]
  407d82:	2b07      	cmp	r3, #7
  407d84:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407d88:	9324      	str	r3, [sp, #144]	; 0x90
  407d8a:	f8cb 4004 	str.w	r4, [fp, #4]
  407d8e:	f77f ab98 	ble.w	4074c2 <_svfprintf_r+0x3d2>
  407d92:	e6f6      	b.n	407b82 <_svfprintf_r+0xa92>
  407d94:	990c      	ldr	r1, [sp, #48]	; 0x30
  407d96:	2500      	movs	r5, #0
  407d98:	460a      	mov	r2, r1
  407d9a:	680c      	ldr	r4, [r1, #0]
  407d9c:	3204      	adds	r2, #4
  407d9e:	920c      	str	r2, [sp, #48]	; 0x30
  407da0:	f7ff ba89 	b.w	4072b6 <_svfprintf_r+0x1c6>
  407da4:	0040d0c8 	.word	0x0040d0c8
  407da8:	4694      	mov	ip, r2
  407daa:	3301      	adds	r3, #1
  407dac:	44a4      	add	ip, r4
  407dae:	f8cb 5000 	str.w	r5, [fp]
  407db2:	2b07      	cmp	r3, #7
  407db4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407db8:	9324      	str	r3, [sp, #144]	; 0x90
  407dba:	f8cb 4004 	str.w	r4, [fp, #4]
  407dbe:	f300 82df 	bgt.w	408380 <_svfprintf_r+0x1290>
  407dc2:	f10b 0b08 	add.w	fp, fp, #8
  407dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407dc8:	9911      	ldr	r1, [sp, #68]	; 0x44
  407dca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407dcc:	440a      	add	r2, r1
  407dce:	4616      	mov	r6, r2
  407dd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407dd2:	4293      	cmp	r3, r2
  407dd4:	db45      	blt.n	407e62 <_svfprintf_r+0xd72>
  407dd6:	9a06      	ldr	r2, [sp, #24]
  407dd8:	07d0      	lsls	r0, r2, #31
  407dda:	d442      	bmi.n	407e62 <_svfprintf_r+0xd72>
  407ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407dde:	1bbc      	subs	r4, r7, r6
  407de0:	1ad3      	subs	r3, r2, r3
  407de2:	429c      	cmp	r4, r3
  407de4:	bfa8      	it	ge
  407de6:	461c      	movge	r4, r3
  407de8:	2c00      	cmp	r4, #0
  407dea:	4625      	mov	r5, r4
  407dec:	dd0e      	ble.n	407e0c <_svfprintf_r+0xd1c>
  407dee:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407df0:	44a4      	add	ip, r4
  407df2:	f8cb 6000 	str.w	r6, [fp]
  407df6:	3201      	adds	r2, #1
  407df8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407dfc:	f8cb 4004 	str.w	r4, [fp, #4]
  407e00:	2a07      	cmp	r2, #7
  407e02:	9224      	str	r2, [sp, #144]	; 0x90
  407e04:	f300 82a0 	bgt.w	408348 <_svfprintf_r+0x1258>
  407e08:	f10b 0b08 	add.w	fp, fp, #8
  407e0c:	2d00      	cmp	r5, #0
  407e0e:	bfac      	ite	ge
  407e10:	1b5c      	subge	r4, r3, r5
  407e12:	461c      	movlt	r4, r3
  407e14:	2c00      	cmp	r4, #0
  407e16:	f77f ab56 	ble.w	4074c6 <_svfprintf_r+0x3d6>
  407e1a:	2c10      	cmp	r4, #16
  407e1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407e1e:	f340 8396 	ble.w	40854e <_svfprintf_r+0x145e>
  407e22:	2610      	movs	r6, #16
  407e24:	4db1      	ldr	r5, [pc, #708]	; (4080ec <_svfprintf_r+0xffc>)
  407e26:	4662      	mov	r2, ip
  407e28:	9f09      	ldr	r7, [sp, #36]	; 0x24
  407e2a:	e002      	b.n	407e32 <_svfprintf_r+0xd42>
  407e2c:	3c10      	subs	r4, #16
  407e2e:	2c10      	cmp	r4, #16
  407e30:	dda2      	ble.n	407d78 <_svfprintf_r+0xc88>
  407e32:	3301      	adds	r3, #1
  407e34:	3210      	adds	r2, #16
  407e36:	f8cb 5000 	str.w	r5, [fp]
  407e3a:	f10b 0b08 	add.w	fp, fp, #8
  407e3e:	2b07      	cmp	r3, #7
  407e40:	f84b 6c04 	str.w	r6, [fp, #-4]
  407e44:	9225      	str	r2, [sp, #148]	; 0x94
  407e46:	9324      	str	r3, [sp, #144]	; 0x90
  407e48:	ddf0      	ble.n	407e2c <_svfprintf_r+0xd3c>
  407e4a:	4638      	mov	r0, r7
  407e4c:	4649      	mov	r1, r9
  407e4e:	aa23      	add	r2, sp, #140	; 0x8c
  407e50:	46c3      	mov	fp, r8
  407e52:	f003 fadd 	bl	40b410 <__ssprint_r>
  407e56:	2800      	cmp	r0, #0
  407e58:	f47f aa0f 	bne.w	40727a <_svfprintf_r+0x18a>
  407e5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407e5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407e60:	e7e4      	b.n	407e2c <_svfprintf_r+0xd3c>
  407e62:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e64:	9817      	ldr	r0, [sp, #92]	; 0x5c
  407e66:	3201      	adds	r2, #1
  407e68:	9916      	ldr	r1, [sp, #88]	; 0x58
  407e6a:	4484      	add	ip, r0
  407e6c:	f8cb 0004 	str.w	r0, [fp, #4]
  407e70:	2a07      	cmp	r2, #7
  407e72:	f8cb 1000 	str.w	r1, [fp]
  407e76:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407e7a:	9224      	str	r2, [sp, #144]	; 0x90
  407e7c:	f300 8273 	bgt.w	408366 <_svfprintf_r+0x1276>
  407e80:	f10b 0b08 	add.w	fp, fp, #8
  407e84:	e7aa      	b.n	407ddc <_svfprintf_r+0xcec>
  407e86:	9b06      	ldr	r3, [sp, #24]
  407e88:	07d9      	lsls	r1, r3, #31
  407e8a:	f53f ae33 	bmi.w	407af4 <_svfprintf_r+0xa04>
  407e8e:	2301      	movs	r3, #1
  407e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407e92:	9625      	str	r6, [sp, #148]	; 0x94
  407e94:	441c      	add	r4, r3
  407e96:	f8cb 2000 	str.w	r2, [fp]
  407e9a:	f8cb 3004 	str.w	r3, [fp, #4]
  407e9e:	2c07      	cmp	r4, #7
  407ea0:	9424      	str	r4, [sp, #144]	; 0x90
  407ea2:	f77f ae5d 	ble.w	407b60 <_svfprintf_r+0xa70>
  407ea6:	e75b      	b.n	407d60 <_svfprintf_r+0xc70>
  407ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
  407eaa:	4649      	mov	r1, r9
  407eac:	aa23      	add	r2, sp, #140	; 0x8c
  407eae:	f003 faaf 	bl	40b410 <__ssprint_r>
  407eb2:	2800      	cmp	r0, #0
  407eb4:	f47f a9e1 	bne.w	40727a <_svfprintf_r+0x18a>
  407eb8:	9e25      	ldr	r6, [sp, #148]	; 0x94
  407eba:	46c3      	mov	fp, r8
  407ebc:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407ebe:	e636      	b.n	407b2e <_svfprintf_r+0xa3e>
  407ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
  407ec2:	4649      	mov	r1, r9
  407ec4:	aa23      	add	r2, sp, #140	; 0x8c
  407ec6:	f003 faa3 	bl	40b410 <__ssprint_r>
  407eca:	2800      	cmp	r0, #0
  407ecc:	f47f a9d5 	bne.w	40727a <_svfprintf_r+0x18a>
  407ed0:	9e25      	ldr	r6, [sp, #148]	; 0x94
  407ed2:	46c3      	mov	fp, r8
  407ed4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407ed6:	e61b      	b.n	407b10 <_svfprintf_r+0xa20>
  407ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
  407eda:	4649      	mov	r1, r9
  407edc:	aa23      	add	r2, sp, #140	; 0x8c
  407ede:	f003 fa97 	bl	40b410 <__ssprint_r>
  407ee2:	2800      	cmp	r0, #0
  407ee4:	f47f a9c9 	bne.w	40727a <_svfprintf_r+0x18a>
  407ee8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407eec:	46c3      	mov	fp, r8
  407eee:	f7ff ba9a 	b.w	407426 <_svfprintf_r+0x336>
  407ef2:	2b30      	cmp	r3, #48	; 0x30
  407ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ef6:	f43f adb4 	beq.w	407a62 <_svfprintf_r+0x972>
  407efa:	3b01      	subs	r3, #1
  407efc:	461a      	mov	r2, r3
  407efe:	930f      	str	r3, [sp, #60]	; 0x3c
  407f00:	2330      	movs	r3, #48	; 0x30
  407f02:	ebc2 0408 	rsb	r4, r2, r8
  407f06:	f801 3c01 	strb.w	r3, [r1, #-1]
  407f0a:	f7ff b9fd 	b.w	407308 <_svfprintf_r+0x218>
  407f0e:	46c2      	mov	sl, r8
  407f10:	f8cd c01c 	str.w	ip, [sp, #28]
  407f14:	4620      	mov	r0, r4
  407f16:	4629      	mov	r1, r5
  407f18:	220a      	movs	r2, #10
  407f1a:	2300      	movs	r3, #0
  407f1c:	f004 f8b4 	bl	40c088 <__aeabi_uldivmod>
  407f20:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  407f24:	4620      	mov	r0, r4
  407f26:	4629      	mov	r1, r5
  407f28:	2300      	movs	r3, #0
  407f2a:	220a      	movs	r2, #10
  407f2c:	f80a ed01 	strb.w	lr, [sl, #-1]!
  407f30:	f004 f8aa 	bl	40c088 <__aeabi_uldivmod>
  407f34:	4604      	mov	r4, r0
  407f36:	460d      	mov	r5, r1
  407f38:	ea54 0305 	orrs.w	r3, r4, r5
  407f3c:	d1ea      	bne.n	407f14 <_svfprintf_r+0xe24>
  407f3e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407f42:	ebca 0408 	rsb	r4, sl, r8
  407f46:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407f4a:	f7ff b9dd 	b.w	407308 <_svfprintf_r+0x218>
  407f4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407f50:	9914      	ldr	r1, [sp, #80]	; 0x50
  407f52:	f8cd c01c 	str.w	ip, [sp, #28]
  407f56:	f003 f9e3 	bl	40b320 <__fpclassifyd>
  407f5a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407f5e:	2800      	cmp	r0, #0
  407f60:	f040 80cc 	bne.w	4080fc <_svfprintf_r+0x100c>
  407f64:	9c06      	ldr	r4, [sp, #24]
  407f66:	2103      	movs	r1, #3
  407f68:	4a61      	ldr	r2, [pc, #388]	; (4080f0 <_svfprintf_r+0x1000>)
  407f6a:	4b62      	ldr	r3, [pc, #392]	; (4080f4 <_svfprintf_r+0x1004>)
  407f6c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  407f70:	9010      	str	r0, [sp, #64]	; 0x40
  407f72:	2e47      	cmp	r6, #71	; 0x47
  407f74:	bfd8      	it	le
  407f76:	461a      	movle	r2, r3
  407f78:	9406      	str	r4, [sp, #24]
  407f7a:	9107      	str	r1, [sp, #28]
  407f7c:	460c      	mov	r4, r1
  407f7e:	9011      	str	r0, [sp, #68]	; 0x44
  407f80:	920f      	str	r2, [sp, #60]	; 0x3c
  407f82:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407f86:	f7ff b9c6 	b.w	407316 <_svfprintf_r+0x226>
  407f8a:	9b06      	ldr	r3, [sp, #24]
  407f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407f8e:	f013 0f40 	tst.w	r3, #64	; 0x40
  407f92:	4613      	mov	r3, r2
  407f94:	f43f abc9 	beq.w	40772a <_svfprintf_r+0x63a>
  407f98:	8814      	ldrh	r4, [r2, #0]
  407f9a:	3204      	adds	r2, #4
  407f9c:	2500      	movs	r5, #0
  407f9e:	2301      	movs	r3, #1
  407fa0:	920c      	str	r2, [sp, #48]	; 0x30
  407fa2:	f7ff b988 	b.w	4072b6 <_svfprintf_r+0x1c6>
  407fa6:	9b06      	ldr	r3, [sp, #24]
  407fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407faa:	f013 0f40 	tst.w	r3, #64	; 0x40
  407fae:	4613      	mov	r3, r2
  407fb0:	f000 8130 	beq.w	408214 <_svfprintf_r+0x1124>
  407fb4:	3304      	adds	r3, #4
  407fb6:	8814      	ldrh	r4, [r2, #0]
  407fb8:	2500      	movs	r5, #0
  407fba:	930c      	str	r3, [sp, #48]	; 0x30
  407fbc:	f7ff bbcd 	b.w	40775a <_svfprintf_r+0x66a>
  407fc0:	9b06      	ldr	r3, [sp, #24]
  407fc2:	06dd      	lsls	r5, r3, #27
  407fc4:	d40b      	bmi.n	407fde <_svfprintf_r+0xeee>
  407fc6:	9b06      	ldr	r3, [sp, #24]
  407fc8:	065c      	lsls	r4, r3, #25
  407fca:	d508      	bpl.n	407fde <_svfprintf_r+0xeee>
  407fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fce:	6813      	ldr	r3, [r2, #0]
  407fd0:	3204      	adds	r2, #4
  407fd2:	920c      	str	r2, [sp, #48]	; 0x30
  407fd4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  407fd8:	801a      	strh	r2, [r3, #0]
  407fda:	f7ff b8af 	b.w	40713c <_svfprintf_r+0x4c>
  407fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fe0:	6813      	ldr	r3, [r2, #0]
  407fe2:	3204      	adds	r2, #4
  407fe4:	920c      	str	r2, [sp, #48]	; 0x30
  407fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407fe8:	601a      	str	r2, [r3, #0]
  407fea:	f7ff b8a7 	b.w	40713c <_svfprintf_r+0x4c>
  407fee:	9b06      	ldr	r3, [sp, #24]
  407ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407ff2:	f013 0f40 	tst.w	r3, #64	; 0x40
  407ff6:	4613      	mov	r3, r2
  407ff8:	f43f ac26 	beq.w	407848 <_svfprintf_r+0x758>
  407ffc:	f9b2 4000 	ldrsh.w	r4, [r2]
  408000:	3304      	adds	r3, #4
  408002:	17e5      	asrs	r5, r4, #31
  408004:	930c      	str	r3, [sp, #48]	; 0x30
  408006:	4622      	mov	r2, r4
  408008:	462b      	mov	r3, r5
  40800a:	f7ff baf9 	b.w	407600 <_svfprintf_r+0x510>
  40800e:	4d37      	ldr	r5, [pc, #220]	; (4080ec <_svfprintf_r+0xffc>)
  408010:	f7ff ba37 	b.w	407482 <_svfprintf_r+0x392>
  408014:	9809      	ldr	r0, [sp, #36]	; 0x24
  408016:	4649      	mov	r1, r9
  408018:	aa23      	add	r2, sp, #140	; 0x8c
  40801a:	f003 f9f9 	bl	40b410 <__ssprint_r>
  40801e:	2800      	cmp	r0, #0
  408020:	f47f a92b 	bne.w	40727a <_svfprintf_r+0x18a>
  408024:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408028:	46c3      	mov	fp, r8
  40802a:	e4b2      	b.n	407992 <_svfprintf_r+0x8a2>
  40802c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40802e:	2201      	movs	r2, #1
  408030:	f10c 0c01 	add.w	ip, ip, #1
  408034:	4930      	ldr	r1, [pc, #192]	; (4080f8 <_svfprintf_r+0x1008>)
  408036:	4413      	add	r3, r2
  408038:	f8cb 2004 	str.w	r2, [fp, #4]
  40803c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408040:	2b07      	cmp	r3, #7
  408042:	f8cb 1000 	str.w	r1, [fp]
  408046:	9324      	str	r3, [sp, #144]	; 0x90
  408048:	f300 80fa 	bgt.w	408240 <_svfprintf_r+0x1150>
  40804c:	f10b 0b08 	add.w	fp, fp, #8
  408050:	b92c      	cbnz	r4, 40805e <_svfprintf_r+0xf6e>
  408052:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408054:	b91b      	cbnz	r3, 40805e <_svfprintf_r+0xf6e>
  408056:	9b06      	ldr	r3, [sp, #24]
  408058:	07dd      	lsls	r5, r3, #31
  40805a:	f57f aa34 	bpl.w	4074c6 <_svfprintf_r+0x3d6>
  40805e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408060:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408062:	3301      	adds	r3, #1
  408064:	9816      	ldr	r0, [sp, #88]	; 0x58
  408066:	eb0c 0201 	add.w	r2, ip, r1
  40806a:	f8cb 1004 	str.w	r1, [fp, #4]
  40806e:	2b07      	cmp	r3, #7
  408070:	f8cb 0000 	str.w	r0, [fp]
  408074:	9225      	str	r2, [sp, #148]	; 0x94
  408076:	9324      	str	r3, [sp, #144]	; 0x90
  408078:	f300 824c 	bgt.w	408514 <_svfprintf_r+0x1424>
  40807c:	f10b 0b08 	add.w	fp, fp, #8
  408080:	4264      	negs	r4, r4
  408082:	2c00      	cmp	r4, #0
  408084:	f340 8126 	ble.w	4082d4 <_svfprintf_r+0x11e4>
  408088:	2c10      	cmp	r4, #16
  40808a:	4d18      	ldr	r5, [pc, #96]	; (4080ec <_svfprintf_r+0xffc>)
  40808c:	f340 814f 	ble.w	40832e <_svfprintf_r+0x123e>
  408090:	2610      	movs	r6, #16
  408092:	9f09      	ldr	r7, [sp, #36]	; 0x24
  408094:	e003      	b.n	40809e <_svfprintf_r+0xfae>
  408096:	3c10      	subs	r4, #16
  408098:	2c10      	cmp	r4, #16
  40809a:	f340 8148 	ble.w	40832e <_svfprintf_r+0x123e>
  40809e:	3301      	adds	r3, #1
  4080a0:	3210      	adds	r2, #16
  4080a2:	f8cb 5000 	str.w	r5, [fp]
  4080a6:	f10b 0b08 	add.w	fp, fp, #8
  4080aa:	2b07      	cmp	r3, #7
  4080ac:	f84b 6c04 	str.w	r6, [fp, #-4]
  4080b0:	9225      	str	r2, [sp, #148]	; 0x94
  4080b2:	9324      	str	r3, [sp, #144]	; 0x90
  4080b4:	ddef      	ble.n	408096 <_svfprintf_r+0xfa6>
  4080b6:	4638      	mov	r0, r7
  4080b8:	4649      	mov	r1, r9
  4080ba:	aa23      	add	r2, sp, #140	; 0x8c
  4080bc:	46c3      	mov	fp, r8
  4080be:	f003 f9a7 	bl	40b410 <__ssprint_r>
  4080c2:	2800      	cmp	r0, #0
  4080c4:	f47f a8d9 	bne.w	40727a <_svfprintf_r+0x18a>
  4080c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4080ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4080cc:	e7e3      	b.n	408096 <_svfprintf_r+0xfa6>
  4080ce:	f041 0120 	orr.w	r1, r1, #32
  4080d2:	785e      	ldrb	r6, [r3, #1]
  4080d4:	9106      	str	r1, [sp, #24]
  4080d6:	1c59      	adds	r1, r3, #1
  4080d8:	f7ff b85f 	b.w	40719a <_svfprintf_r+0xaa>
  4080dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4080de:	910c      	str	r1, [sp, #48]	; 0x30
  4080e0:	4619      	mov	r1, r3
  4080e2:	4240      	negs	r0, r0
  4080e4:	900b      	str	r0, [sp, #44]	; 0x2c
  4080e6:	f7ff ba43 	b.w	407570 <_svfprintf_r+0x480>
  4080ea:	bf00      	nop
  4080ec:	0040d0c8 	.word	0x0040d0c8
  4080f0:	0040d0f4 	.word	0x0040d0f4
  4080f4:	0040d0f0 	.word	0x0040d0f0
  4080f8:	0040d128 	.word	0x0040d128
  4080fc:	f1bc 3fff 	cmp.w	ip, #4294967295
  408100:	f026 0a20 	bic.w	sl, r6, #32
  408104:	f000 80a9 	beq.w	40825a <_svfprintf_r+0x116a>
  408108:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40810c:	f040 80a7 	bne.w	40825e <_svfprintf_r+0x116e>
  408110:	f1bc 0f00 	cmp.w	ip, #0
  408114:	f040 80a3 	bne.w	40825e <_svfprintf_r+0x116e>
  408118:	9b06      	ldr	r3, [sp, #24]
  40811a:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40811e:	f04f 0c01 	mov.w	ip, #1
  408122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408126:	930e      	str	r3, [sp, #56]	; 0x38
  408128:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40812a:	2b00      	cmp	r3, #0
  40812c:	f2c0 81ff 	blt.w	40852e <_svfprintf_r+0x143e>
  408130:	461d      	mov	r5, r3
  408132:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408134:	2300      	movs	r3, #0
  408136:	930d      	str	r3, [sp, #52]	; 0x34
  408138:	2002      	movs	r0, #2
  40813a:	a91d      	add	r1, sp, #116	; 0x74
  40813c:	f8cd c004 	str.w	ip, [sp, #4]
  408140:	463a      	mov	r2, r7
  408142:	9000      	str	r0, [sp, #0]
  408144:	a81e      	add	r0, sp, #120	; 0x78
  408146:	9102      	str	r1, [sp, #8]
  408148:	a921      	add	r1, sp, #132	; 0x84
  40814a:	9003      	str	r0, [sp, #12]
  40814c:	462b      	mov	r3, r5
  40814e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408150:	9104      	str	r1, [sp, #16]
  408152:	f8cd c01c 	str.w	ip, [sp, #28]
  408156:	f000 fbbb 	bl	4088d0 <_dtoa_r>
  40815a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40815e:	900f      	str	r0, [sp, #60]	; 0x3c
  408160:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408164:	f040 8242 	bne.w	4085ec <_svfprintf_r+0x14fc>
  408168:	9b06      	ldr	r3, [sp, #24]
  40816a:	07db      	lsls	r3, r3, #31
  40816c:	f140 81f3 	bpl.w	408556 <_svfprintf_r+0x1466>
  408170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408172:	eb03 040c 	add.w	r4, r3, ip
  408176:	4638      	mov	r0, r7
  408178:	2200      	movs	r2, #0
  40817a:	2300      	movs	r3, #0
  40817c:	4629      	mov	r1, r5
  40817e:	f8cd c01c 	str.w	ip, [sp, #28]
  408182:	f003 ff27 	bl	40bfd4 <__aeabi_dcmpeq>
  408186:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40818a:	2800      	cmp	r0, #0
  40818c:	f040 8172 	bne.w	408474 <_svfprintf_r+0x1384>
  408190:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408192:	429c      	cmp	r4, r3
  408194:	d906      	bls.n	4081a4 <_svfprintf_r+0x10b4>
  408196:	2130      	movs	r1, #48	; 0x30
  408198:	1c5a      	adds	r2, r3, #1
  40819a:	9221      	str	r2, [sp, #132]	; 0x84
  40819c:	7019      	strb	r1, [r3, #0]
  40819e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4081a0:	429c      	cmp	r4, r3
  4081a2:	d8f9      	bhi.n	408198 <_svfprintf_r+0x10a8>
  4081a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4081a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4081aa:	eba3 0302 	sub.w	r3, r3, r2
  4081ae:	9312      	str	r3, [sp, #72]	; 0x48
  4081b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4081b2:	f040 8113 	bne.w	4083dc <_svfprintf_r+0x12ec>
  4081b6:	459c      	cmp	ip, r3
  4081b8:	f2c0 8168 	blt.w	40848c <_svfprintf_r+0x139c>
  4081bc:	1cd9      	adds	r1, r3, #3
  4081be:	f2c0 8165 	blt.w	40848c <_svfprintf_r+0x139c>
  4081c2:	2667      	movs	r6, #103	; 0x67
  4081c4:	9311      	str	r3, [sp, #68]	; 0x44
  4081c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4081ca:	4293      	cmp	r3, r2
  4081cc:	f300 81b6 	bgt.w	40853c <_svfprintf_r+0x144c>
  4081d0:	9b06      	ldr	r3, [sp, #24]
  4081d2:	07df      	lsls	r7, r3, #31
  4081d4:	f100 81c1 	bmi.w	40855a <_svfprintf_r+0x146a>
  4081d8:	4614      	mov	r4, r2
  4081da:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  4081de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081e0:	2b00      	cmp	r3, #0
  4081e2:	f040 80f0 	bne.w	4083c6 <_svfprintf_r+0x12d6>
  4081e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4081e8:	f8cd c01c 	str.w	ip, [sp, #28]
  4081ec:	9306      	str	r3, [sp, #24]
  4081ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081f0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4081f4:	9310      	str	r3, [sp, #64]	; 0x40
  4081f6:	f7ff b88e 	b.w	407316 <_svfprintf_r+0x226>
  4081fa:	9809      	ldr	r0, [sp, #36]	; 0x24
  4081fc:	4649      	mov	r1, r9
  4081fe:	aa23      	add	r2, sp, #140	; 0x8c
  408200:	f003 f906 	bl	40b410 <__ssprint_r>
  408204:	2800      	cmp	r0, #0
  408206:	f47f a838 	bne.w	40727a <_svfprintf_r+0x18a>
  40820a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40820e:	46c3      	mov	fp, r8
  408210:	f7ff bbd8 	b.w	4079c4 <_svfprintf_r+0x8d4>
  408214:	3304      	adds	r3, #4
  408216:	6814      	ldr	r4, [r2, #0]
  408218:	2500      	movs	r5, #0
  40821a:	930c      	str	r3, [sp, #48]	; 0x30
  40821c:	f7ff ba9d 	b.w	40775a <_svfprintf_r+0x66a>
  408220:	9809      	ldr	r0, [sp, #36]	; 0x24
  408222:	2140      	movs	r1, #64	; 0x40
  408224:	f001 ff84 	bl	40a130 <_malloc_r>
  408228:	f8c9 0000 	str.w	r0, [r9]
  40822c:	f8c9 0010 	str.w	r0, [r9, #16]
  408230:	2800      	cmp	r0, #0
  408232:	f000 81d4 	beq.w	4085de <_svfprintf_r+0x14ee>
  408236:	2340      	movs	r3, #64	; 0x40
  408238:	f8c9 3014 	str.w	r3, [r9, #20]
  40823c:	f7fe bf70 	b.w	407120 <_svfprintf_r+0x30>
  408240:	9809      	ldr	r0, [sp, #36]	; 0x24
  408242:	4649      	mov	r1, r9
  408244:	aa23      	add	r2, sp, #140	; 0x8c
  408246:	f003 f8e3 	bl	40b410 <__ssprint_r>
  40824a:	2800      	cmp	r0, #0
  40824c:	f47f a815 	bne.w	40727a <_svfprintf_r+0x18a>
  408250:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408252:	46c3      	mov	fp, r8
  408254:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408258:	e6fa      	b.n	408050 <_svfprintf_r+0xf60>
  40825a:	f04f 0c06 	mov.w	ip, #6
  40825e:	9b06      	ldr	r3, [sp, #24]
  408260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  408264:	930e      	str	r3, [sp, #56]	; 0x38
  408266:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408268:	2b00      	cmp	r3, #0
  40826a:	f2c0 8160 	blt.w	40852e <_svfprintf_r+0x143e>
  40826e:	461d      	mov	r5, r3
  408270:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408272:	2300      	movs	r3, #0
  408274:	930d      	str	r3, [sp, #52]	; 0x34
  408276:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40827a:	f000 80c4 	beq.w	408406 <_svfprintf_r+0x1316>
  40827e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  408282:	f47f af59 	bne.w	408138 <_svfprintf_r+0x1048>
  408286:	f10c 0401 	add.w	r4, ip, #1
  40828a:	f8cd c01c 	str.w	ip, [sp, #28]
  40828e:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  408292:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  408296:	a81e      	add	r0, sp, #120	; 0x78
  408298:	2102      	movs	r1, #2
  40829a:	f8cd c010 	str.w	ip, [sp, #16]
  40829e:	463a      	mov	r2, r7
  4082a0:	9003      	str	r0, [sp, #12]
  4082a2:	462b      	mov	r3, r5
  4082a4:	9401      	str	r4, [sp, #4]
  4082a6:	9100      	str	r1, [sp, #0]
  4082a8:	f8cd e008 	str.w	lr, [sp, #8]
  4082ac:	9809      	ldr	r0, [sp, #36]	; 0x24
  4082ae:	f000 fb0f 	bl	4088d0 <_dtoa_r>
  4082b2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4082b6:	900f      	str	r0, [sp, #60]	; 0x3c
  4082b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082ba:	441c      	add	r4, r3
  4082bc:	e75b      	b.n	408176 <_svfprintf_r+0x1086>
  4082be:	9809      	ldr	r0, [sp, #36]	; 0x24
  4082c0:	4649      	mov	r1, r9
  4082c2:	aa23      	add	r2, sp, #140	; 0x8c
  4082c4:	f003 f8a4 	bl	40b410 <__ssprint_r>
  4082c8:	2800      	cmp	r0, #0
  4082ca:	f47e afd6 	bne.w	40727a <_svfprintf_r+0x18a>
  4082ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4082d0:	46c3      	mov	fp, r8
  4082d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082d4:	9812      	ldr	r0, [sp, #72]	; 0x48
  4082d6:	3301      	adds	r3, #1
  4082d8:	eb02 0c00 	add.w	ip, r2, r0
  4082dc:	2b07      	cmp	r3, #7
  4082de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4082e0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4082e4:	f8cb 2000 	str.w	r2, [fp]
  4082e8:	9324      	str	r3, [sp, #144]	; 0x90
  4082ea:	f8cb 0004 	str.w	r0, [fp, #4]
  4082ee:	f77f a8e8 	ble.w	4074c2 <_svfprintf_r+0x3d2>
  4082f2:	e446      	b.n	407b82 <_svfprintf_r+0xa92>
  4082f4:	9510      	str	r5, [sp, #64]	; 0x40
  4082f6:	f7fe fe99 	bl	40702c <strlen>
  4082fa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  4082fe:	970c      	str	r7, [sp, #48]	; 0x30
  408300:	4604      	mov	r4, r0
  408302:	9511      	str	r5, [sp, #68]	; 0x44
  408304:	9307      	str	r3, [sp, #28]
  408306:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40830a:	f7ff b804 	b.w	407316 <_svfprintf_r+0x226>
  40830e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408310:	4fb7      	ldr	r7, [pc, #732]	; (4085f0 <_svfprintf_r+0x1500>)
  408312:	f7ff b84b 	b.w	4073ac <_svfprintf_r+0x2bc>
  408316:	9809      	ldr	r0, [sp, #36]	; 0x24
  408318:	4649      	mov	r1, r9
  40831a:	aa23      	add	r2, sp, #140	; 0x8c
  40831c:	f003 f878 	bl	40b410 <__ssprint_r>
  408320:	2800      	cmp	r0, #0
  408322:	f47e afaa 	bne.w	40727a <_svfprintf_r+0x18a>
  408326:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40832a:	46c3      	mov	fp, r8
  40832c:	e4a2      	b.n	407c74 <_svfprintf_r+0xb84>
  40832e:	3301      	adds	r3, #1
  408330:	4422      	add	r2, r4
  408332:	f8cb 5000 	str.w	r5, [fp]
  408336:	2b07      	cmp	r3, #7
  408338:	9225      	str	r2, [sp, #148]	; 0x94
  40833a:	9324      	str	r3, [sp, #144]	; 0x90
  40833c:	f8cb 4004 	str.w	r4, [fp, #4]
  408340:	dcbd      	bgt.n	4082be <_svfprintf_r+0x11ce>
  408342:	f10b 0b08 	add.w	fp, fp, #8
  408346:	e7c5      	b.n	4082d4 <_svfprintf_r+0x11e4>
  408348:	9809      	ldr	r0, [sp, #36]	; 0x24
  40834a:	4649      	mov	r1, r9
  40834c:	aa23      	add	r2, sp, #140	; 0x8c
  40834e:	f003 f85f 	bl	40b410 <__ssprint_r>
  408352:	2800      	cmp	r0, #0
  408354:	f47e af91 	bne.w	40727a <_svfprintf_r+0x18a>
  408358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40835a:	46c3      	mov	fp, r8
  40835c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40835e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408362:	1ad3      	subs	r3, r2, r3
  408364:	e552      	b.n	407e0c <_svfprintf_r+0xd1c>
  408366:	9809      	ldr	r0, [sp, #36]	; 0x24
  408368:	4649      	mov	r1, r9
  40836a:	aa23      	add	r2, sp, #140	; 0x8c
  40836c:	f003 f850 	bl	40b410 <__ssprint_r>
  408370:	2800      	cmp	r0, #0
  408372:	f47e af82 	bne.w	40727a <_svfprintf_r+0x18a>
  408376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408378:	46c3      	mov	fp, r8
  40837a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40837e:	e52d      	b.n	407ddc <_svfprintf_r+0xcec>
  408380:	9809      	ldr	r0, [sp, #36]	; 0x24
  408382:	4649      	mov	r1, r9
  408384:	aa23      	add	r2, sp, #140	; 0x8c
  408386:	f003 f843 	bl	40b410 <__ssprint_r>
  40838a:	2800      	cmp	r0, #0
  40838c:	f47e af75 	bne.w	40727a <_svfprintf_r+0x18a>
  408390:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408394:	46c3      	mov	fp, r8
  408396:	e516      	b.n	407dc6 <_svfprintf_r+0xcd6>
  408398:	2c06      	cmp	r4, #6
  40839a:	970c      	str	r7, [sp, #48]	; 0x30
  40839c:	9310      	str	r3, [sp, #64]	; 0x40
  40839e:	461f      	mov	r7, r3
  4083a0:	bf28      	it	cs
  4083a2:	2406      	movcs	r4, #6
  4083a4:	9711      	str	r7, [sp, #68]	; 0x44
  4083a6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4083aa:	9307      	str	r3, [sp, #28]
  4083ac:	4b91      	ldr	r3, [pc, #580]	; (4085f4 <_svfprintf_r+0x1504>)
  4083ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4083b0:	f7fe bfb1 	b.w	407316 <_svfprintf_r+0x226>
  4083b4:	4f8e      	ldr	r7, [pc, #568]	; (4085f0 <_svfprintf_r+0x1500>)
  4083b6:	f7ff b8b5 	b.w	407524 <_svfprintf_r+0x434>
  4083ba:	232d      	movs	r3, #45	; 0x2d
  4083bc:	461f      	mov	r7, r3
  4083be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4083c2:	f7ff ba7a 	b.w	4078ba <_svfprintf_r+0x7ca>
  4083c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4083c8:	272d      	movs	r7, #45	; 0x2d
  4083ca:	f8cd c01c 	str.w	ip, [sp, #28]
  4083ce:	9306      	str	r3, [sp, #24]
  4083d0:	2300      	movs	r3, #0
  4083d2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4083d6:	9310      	str	r3, [sp, #64]	; 0x40
  4083d8:	f7fe bf9e 	b.w	407318 <_svfprintf_r+0x228>
  4083dc:	2e65      	cmp	r6, #101	; 0x65
  4083de:	dd56      	ble.n	40848e <_svfprintf_r+0x139e>
  4083e0:	2e66      	cmp	r6, #102	; 0x66
  4083e2:	9311      	str	r3, [sp, #68]	; 0x44
  4083e4:	f47f aeef 	bne.w	4081c6 <_svfprintf_r+0x10d6>
  4083e8:	2b00      	cmp	r3, #0
  4083ea:	f340 80d6 	ble.w	40859a <_svfprintf_r+0x14aa>
  4083ee:	f1bc 0f00 	cmp.w	ip, #0
  4083f2:	f040 80c1 	bne.w	408578 <_svfprintf_r+0x1488>
  4083f6:	9b06      	ldr	r3, [sp, #24]
  4083f8:	07da      	lsls	r2, r3, #31
  4083fa:	f100 80bd 	bmi.w	408578 <_svfprintf_r+0x1488>
  4083fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
  408400:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408404:	e6eb      	b.n	4081de <_svfprintf_r+0x10ee>
  408406:	2003      	movs	r0, #3
  408408:	a91d      	add	r1, sp, #116	; 0x74
  40840a:	463a      	mov	r2, r7
  40840c:	f8cd c004 	str.w	ip, [sp, #4]
  408410:	9000      	str	r0, [sp, #0]
  408412:	a81e      	add	r0, sp, #120	; 0x78
  408414:	9102      	str	r1, [sp, #8]
  408416:	a921      	add	r1, sp, #132	; 0x84
  408418:	462b      	mov	r3, r5
  40841a:	9003      	str	r0, [sp, #12]
  40841c:	9104      	str	r1, [sp, #16]
  40841e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408420:	f8cd c01c 	str.w	ip, [sp, #28]
  408424:	f000 fa54 	bl	4088d0 <_dtoa_r>
  408428:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40842c:	4602      	mov	r2, r0
  40842e:	7803      	ldrb	r3, [r0, #0]
  408430:	4462      	add	r2, ip
  408432:	900f      	str	r0, [sp, #60]	; 0x3c
  408434:	2b30      	cmp	r3, #48	; 0x30
  408436:	9207      	str	r2, [sp, #28]
  408438:	f040 808b 	bne.w	408552 <_svfprintf_r+0x1462>
  40843c:	4638      	mov	r0, r7
  40843e:	2200      	movs	r2, #0
  408440:	2300      	movs	r3, #0
  408442:	4629      	mov	r1, r5
  408444:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408448:	f04f 0401 	mov.w	r4, #1
  40844c:	f003 fdc2 	bl	40bfd4 <__aeabi_dcmpeq>
  408450:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408454:	b108      	cbz	r0, 40845a <_svfprintf_r+0x136a>
  408456:	f04f 0400 	mov.w	r4, #0
  40845a:	f014 0fff 	tst.w	r4, #255	; 0xff
  40845e:	d078      	beq.n	408552 <_svfprintf_r+0x1462>
  408460:	f1cc 0401 	rsb	r4, ip, #1
  408464:	941d      	str	r4, [sp, #116]	; 0x74
  408466:	9b07      	ldr	r3, [sp, #28]
  408468:	4423      	add	r3, r4
  40846a:	461c      	mov	r4, r3
  40846c:	e683      	b.n	408176 <_svfprintf_r+0x1086>
  40846e:	4d62      	ldr	r5, [pc, #392]	; (4085f8 <_svfprintf_r+0x1508>)
  408470:	f7ff bb2a 	b.w	407ac8 <_svfprintf_r+0x9d8>
  408474:	4623      	mov	r3, r4
  408476:	e695      	b.n	4081a4 <_svfprintf_r+0x10b4>
  408478:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40847c:	970c      	str	r7, [sp, #48]	; 0x30
  40847e:	9010      	str	r0, [sp, #64]	; 0x40
  408480:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408484:	9307      	str	r3, [sp, #28]
  408486:	9011      	str	r0, [sp, #68]	; 0x44
  408488:	f7fe bf45 	b.w	407316 <_svfprintf_r+0x226>
  40848c:	3e02      	subs	r6, #2
  40848e:	3b01      	subs	r3, #1
  408490:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  408494:	2b00      	cmp	r3, #0
  408496:	931d      	str	r3, [sp, #116]	; 0x74
  408498:	db75      	blt.n	408586 <_svfprintf_r+0x1496>
  40849a:	222b      	movs	r2, #43	; 0x2b
  40849c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4084a0:	2b09      	cmp	r3, #9
  4084a2:	dd61      	ble.n	408568 <_svfprintf_r+0x1478>
  4084a4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4084a8:	4601      	mov	r1, r0
  4084aa:	4a54      	ldr	r2, [pc, #336]	; (4085fc <_svfprintf_r+0x150c>)
  4084ac:	fb82 2403 	smull	r2, r4, r2, r3
  4084b0:	17da      	asrs	r2, r3, #31
  4084b2:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4084b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4084ba:	2c09      	cmp	r4, #9
  4084bc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4084c0:	4623      	mov	r3, r4
  4084c2:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4084c6:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4084ca:	dcee      	bgt.n	4084aa <_svfprintf_r+0x13ba>
  4084cc:	3330      	adds	r3, #48	; 0x30
  4084ce:	460a      	mov	r2, r1
  4084d0:	b2db      	uxtb	r3, r3
  4084d2:	f802 3d01 	strb.w	r3, [r2, #-1]!
  4084d6:	4290      	cmp	r0, r2
  4084d8:	d97e      	bls.n	4085d8 <_svfprintf_r+0x14e8>
  4084da:	460a      	mov	r2, r1
  4084dc:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  4084e0:	e001      	b.n	4084e6 <_svfprintf_r+0x13f6>
  4084e2:	f812 3b01 	ldrb.w	r3, [r2], #1
  4084e6:	4282      	cmp	r2, r0
  4084e8:	f804 3b01 	strb.w	r3, [r4], #1
  4084ec:	d1f9      	bne.n	4084e2 <_svfprintf_r+0x13f2>
  4084ee:	ab23      	add	r3, sp, #140	; 0x8c
  4084f0:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4084f4:	1a5b      	subs	r3, r3, r1
  4084f6:	4413      	add	r3, r2
  4084f8:	aa1f      	add	r2, sp, #124	; 0x7c
  4084fa:	1a9b      	subs	r3, r3, r2
  4084fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084fe:	2a01      	cmp	r2, #1
  408500:	9319      	str	r3, [sp, #100]	; 0x64
  408502:	eb02 0403 	add.w	r4, r2, r3
  408506:	dd43      	ble.n	408590 <_svfprintf_r+0x14a0>
  408508:	3401      	adds	r4, #1
  40850a:	2300      	movs	r3, #0
  40850c:	9311      	str	r3, [sp, #68]	; 0x44
  40850e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408512:	e664      	b.n	4081de <_svfprintf_r+0x10ee>
  408514:	9809      	ldr	r0, [sp, #36]	; 0x24
  408516:	4649      	mov	r1, r9
  408518:	aa23      	add	r2, sp, #140	; 0x8c
  40851a:	f002 ff79 	bl	40b410 <__ssprint_r>
  40851e:	2800      	cmp	r0, #0
  408520:	f47e aeab 	bne.w	40727a <_svfprintf_r+0x18a>
  408524:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408526:	46c3      	mov	fp, r8
  408528:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40852a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40852c:	e5a8      	b.n	408080 <_svfprintf_r+0xf90>
  40852e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408530:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  408532:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  408536:	232d      	movs	r3, #45	; 0x2d
  408538:	930d      	str	r3, [sp, #52]	; 0x34
  40853a:	e69c      	b.n	408276 <_svfprintf_r+0x1186>
  40853c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40853e:	2b00      	cmp	r3, #0
  408540:	dd35      	ble.n	4085ae <_svfprintf_r+0x14be>
  408542:	2401      	movs	r4, #1
  408544:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408546:	441c      	add	r4, r3
  408548:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40854c:	e647      	b.n	4081de <_svfprintf_r+0x10ee>
  40854e:	4d2a      	ldr	r5, [pc, #168]	; (4085f8 <_svfprintf_r+0x1508>)
  408550:	e413      	b.n	407d7a <_svfprintf_r+0xc8a>
  408552:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  408554:	e787      	b.n	408466 <_svfprintf_r+0x1376>
  408556:	9b21      	ldr	r3, [sp, #132]	; 0x84
  408558:	e624      	b.n	4081a4 <_svfprintf_r+0x10b4>
  40855a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40855c:	1c5c      	adds	r4, r3, #1
  40855e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408562:	e63c      	b.n	4081de <_svfprintf_r+0x10ee>
  408564:	4d24      	ldr	r5, [pc, #144]	; (4085f8 <_svfprintf_r+0x1508>)
  408566:	e420      	b.n	407daa <_svfprintf_r+0xcba>
  408568:	3330      	adds	r3, #48	; 0x30
  40856a:	2230      	movs	r2, #48	; 0x30
  40856c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  408570:	ab20      	add	r3, sp, #128	; 0x80
  408572:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  408576:	e7bf      	b.n	4084f8 <_svfprintf_r+0x1408>
  408578:	f10c 0401 	add.w	r4, ip, #1
  40857c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40857e:	441c      	add	r4, r3
  408580:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  408584:	e62b      	b.n	4081de <_svfprintf_r+0x10ee>
  408586:	222d      	movs	r2, #45	; 0x2d
  408588:	425b      	negs	r3, r3
  40858a:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40858e:	e787      	b.n	4084a0 <_svfprintf_r+0x13b0>
  408590:	9b06      	ldr	r3, [sp, #24]
  408592:	f013 0301 	ands.w	r3, r3, #1
  408596:	d0b9      	beq.n	40850c <_svfprintf_r+0x141c>
  408598:	e7b6      	b.n	408508 <_svfprintf_r+0x1418>
  40859a:	f1bc 0f00 	cmp.w	ip, #0
  40859e:	d109      	bne.n	4085b4 <_svfprintf_r+0x14c4>
  4085a0:	9b06      	ldr	r3, [sp, #24]
  4085a2:	07db      	lsls	r3, r3, #31
  4085a4:	d406      	bmi.n	4085b4 <_svfprintf_r+0x14c4>
  4085a6:	f04f 0c01 	mov.w	ip, #1
  4085aa:	4664      	mov	r4, ip
  4085ac:	e617      	b.n	4081de <_svfprintf_r+0x10ee>
  4085ae:	f1c3 0402 	rsb	r4, r3, #2
  4085b2:	e7c7      	b.n	408544 <_svfprintf_r+0x1454>
  4085b4:	f10c 0402 	add.w	r4, ip, #2
  4085b8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4085bc:	e60f      	b.n	4081de <_svfprintf_r+0x10ee>
  4085be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4085c0:	785e      	ldrb	r6, [r3, #1]
  4085c2:	4628      	mov	r0, r5
  4085c4:	682c      	ldr	r4, [r5, #0]
  4085c6:	3004      	adds	r0, #4
  4085c8:	2c00      	cmp	r4, #0
  4085ca:	900c      	str	r0, [sp, #48]	; 0x30
  4085cc:	f6be ade5 	bge.w	40719a <_svfprintf_r+0xaa>
  4085d0:	f04f 34ff 	mov.w	r4, #4294967295
  4085d4:	f7fe bde1 	b.w	40719a <_svfprintf_r+0xaa>
  4085d8:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4085dc:	e78c      	b.n	4084f8 <_svfprintf_r+0x1408>
  4085de:	230c      	movs	r3, #12
  4085e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4085e2:	f04f 30ff 	mov.w	r0, #4294967295
  4085e6:	6013      	str	r3, [r2, #0]
  4085e8:	f7fe be50 	b.w	40728c <_svfprintf_r+0x19c>
  4085ec:	4664      	mov	r4, ip
  4085ee:	e663      	b.n	4082b8 <_svfprintf_r+0x11c8>
  4085f0:	0040d0d8 	.word	0x0040d0d8
  4085f4:	0040d120 	.word	0x0040d120
  4085f8:	0040d0c8 	.word	0x0040d0c8
  4085fc:	66666667 	.word	0x66666667

00408600 <__swbuf_r>:
  408600:	b570      	push	{r4, r5, r6, lr}
  408602:	460d      	mov	r5, r1
  408604:	4614      	mov	r4, r2
  408606:	4606      	mov	r6, r0
  408608:	b110      	cbz	r0, 408610 <__swbuf_r+0x10>
  40860a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40860c:	2b00      	cmp	r3, #0
  40860e:	d048      	beq.n	4086a2 <__swbuf_r+0xa2>
  408610:	89a2      	ldrh	r2, [r4, #12]
  408612:	69a3      	ldr	r3, [r4, #24]
  408614:	b291      	uxth	r1, r2
  408616:	60a3      	str	r3, [r4, #8]
  408618:	0708      	lsls	r0, r1, #28
  40861a:	d538      	bpl.n	40868e <__swbuf_r+0x8e>
  40861c:	6923      	ldr	r3, [r4, #16]
  40861e:	2b00      	cmp	r3, #0
  408620:	d035      	beq.n	40868e <__swbuf_r+0x8e>
  408622:	0489      	lsls	r1, r1, #18
  408624:	b2ed      	uxtb	r5, r5
  408626:	d515      	bpl.n	408654 <__swbuf_r+0x54>
  408628:	6822      	ldr	r2, [r4, #0]
  40862a:	6961      	ldr	r1, [r4, #20]
  40862c:	1ad3      	subs	r3, r2, r3
  40862e:	428b      	cmp	r3, r1
  408630:	da1c      	bge.n	40866c <__swbuf_r+0x6c>
  408632:	3301      	adds	r3, #1
  408634:	68a1      	ldr	r1, [r4, #8]
  408636:	1c50      	adds	r0, r2, #1
  408638:	3901      	subs	r1, #1
  40863a:	6020      	str	r0, [r4, #0]
  40863c:	60a1      	str	r1, [r4, #8]
  40863e:	7015      	strb	r5, [r2, #0]
  408640:	6962      	ldr	r2, [r4, #20]
  408642:	429a      	cmp	r2, r3
  408644:	d01a      	beq.n	40867c <__swbuf_r+0x7c>
  408646:	2d0a      	cmp	r5, #10
  408648:	d102      	bne.n	408650 <__swbuf_r+0x50>
  40864a:	7b23      	ldrb	r3, [r4, #12]
  40864c:	07db      	lsls	r3, r3, #31
  40864e:	d415      	bmi.n	40867c <__swbuf_r+0x7c>
  408650:	4628      	mov	r0, r5
  408652:	bd70      	pop	{r4, r5, r6, pc}
  408654:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40865a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40865e:	81a2      	strh	r2, [r4, #12]
  408660:	6822      	ldr	r2, [r4, #0]
  408662:	6661      	str	r1, [r4, #100]	; 0x64
  408664:	1ad3      	subs	r3, r2, r3
  408666:	6961      	ldr	r1, [r4, #20]
  408668:	428b      	cmp	r3, r1
  40866a:	dbe2      	blt.n	408632 <__swbuf_r+0x32>
  40866c:	4630      	mov	r0, r6
  40866e:	4621      	mov	r1, r4
  408670:	f001 f946 	bl	409900 <_fflush_r>
  408674:	b940      	cbnz	r0, 408688 <__swbuf_r+0x88>
  408676:	6822      	ldr	r2, [r4, #0]
  408678:	2301      	movs	r3, #1
  40867a:	e7db      	b.n	408634 <__swbuf_r+0x34>
  40867c:	4630      	mov	r0, r6
  40867e:	4621      	mov	r1, r4
  408680:	f001 f93e 	bl	409900 <_fflush_r>
  408684:	2800      	cmp	r0, #0
  408686:	d0e3      	beq.n	408650 <__swbuf_r+0x50>
  408688:	f04f 30ff 	mov.w	r0, #4294967295
  40868c:	bd70      	pop	{r4, r5, r6, pc}
  40868e:	4630      	mov	r0, r6
  408690:	4621      	mov	r1, r4
  408692:	f000 f809 	bl	4086a8 <__swsetup_r>
  408696:	2800      	cmp	r0, #0
  408698:	d1f6      	bne.n	408688 <__swbuf_r+0x88>
  40869a:	89a2      	ldrh	r2, [r4, #12]
  40869c:	6923      	ldr	r3, [r4, #16]
  40869e:	b291      	uxth	r1, r2
  4086a0:	e7bf      	b.n	408622 <__swbuf_r+0x22>
  4086a2:	f001 f9c7 	bl	409a34 <__sinit>
  4086a6:	e7b3      	b.n	408610 <__swbuf_r+0x10>

004086a8 <__swsetup_r>:
  4086a8:	b538      	push	{r3, r4, r5, lr}
  4086aa:	4b2f      	ldr	r3, [pc, #188]	; (408768 <__swsetup_r+0xc0>)
  4086ac:	4605      	mov	r5, r0
  4086ae:	460c      	mov	r4, r1
  4086b0:	6818      	ldr	r0, [r3, #0]
  4086b2:	b110      	cbz	r0, 4086ba <__swsetup_r+0x12>
  4086b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4086b6:	2b00      	cmp	r3, #0
  4086b8:	d036      	beq.n	408728 <__swsetup_r+0x80>
  4086ba:	89a2      	ldrh	r2, [r4, #12]
  4086bc:	b293      	uxth	r3, r2
  4086be:	0718      	lsls	r0, r3, #28
  4086c0:	d50b      	bpl.n	4086da <__swsetup_r+0x32>
  4086c2:	6920      	ldr	r0, [r4, #16]
  4086c4:	b1a0      	cbz	r0, 4086f0 <__swsetup_r+0x48>
  4086c6:	f013 0201 	ands.w	r2, r3, #1
  4086ca:	d11d      	bne.n	408708 <__swsetup_r+0x60>
  4086cc:	0799      	lsls	r1, r3, #30
  4086ce:	d400      	bmi.n	4086d2 <__swsetup_r+0x2a>
  4086d0:	6962      	ldr	r2, [r4, #20]
  4086d2:	60a2      	str	r2, [r4, #8]
  4086d4:	b1f8      	cbz	r0, 408716 <__swsetup_r+0x6e>
  4086d6:	2000      	movs	r0, #0
  4086d8:	bd38      	pop	{r3, r4, r5, pc}
  4086da:	06d9      	lsls	r1, r3, #27
  4086dc:	d53b      	bpl.n	408756 <__swsetup_r+0xae>
  4086de:	0758      	lsls	r0, r3, #29
  4086e0:	d425      	bmi.n	40872e <__swsetup_r+0x86>
  4086e2:	6920      	ldr	r0, [r4, #16]
  4086e4:	f042 0208 	orr.w	r2, r2, #8
  4086e8:	b293      	uxth	r3, r2
  4086ea:	81a2      	strh	r2, [r4, #12]
  4086ec:	2800      	cmp	r0, #0
  4086ee:	d1ea      	bne.n	4086c6 <__swsetup_r+0x1e>
  4086f0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4086f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4086f8:	d0e5      	beq.n	4086c6 <__swsetup_r+0x1e>
  4086fa:	4628      	mov	r0, r5
  4086fc:	4621      	mov	r1, r4
  4086fe:	f001 fc9d 	bl	40a03c <__smakebuf_r>
  408702:	89a3      	ldrh	r3, [r4, #12]
  408704:	6920      	ldr	r0, [r4, #16]
  408706:	e7de      	b.n	4086c6 <__swsetup_r+0x1e>
  408708:	6963      	ldr	r3, [r4, #20]
  40870a:	2200      	movs	r2, #0
  40870c:	425b      	negs	r3, r3
  40870e:	60a2      	str	r2, [r4, #8]
  408710:	61a3      	str	r3, [r4, #24]
  408712:	2800      	cmp	r0, #0
  408714:	d1df      	bne.n	4086d6 <__swsetup_r+0x2e>
  408716:	89a3      	ldrh	r3, [r4, #12]
  408718:	061a      	lsls	r2, r3, #24
  40871a:	d5dd      	bpl.n	4086d8 <__swsetup_r+0x30>
  40871c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408720:	f04f 30ff 	mov.w	r0, #4294967295
  408724:	81a3      	strh	r3, [r4, #12]
  408726:	bd38      	pop	{r3, r4, r5, pc}
  408728:	f001 f984 	bl	409a34 <__sinit>
  40872c:	e7c5      	b.n	4086ba <__swsetup_r+0x12>
  40872e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408730:	b149      	cbz	r1, 408746 <__swsetup_r+0x9e>
  408732:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408736:	4299      	cmp	r1, r3
  408738:	d003      	beq.n	408742 <__swsetup_r+0x9a>
  40873a:	4628      	mov	r0, r5
  40873c:	f001 f9e8 	bl	409b10 <_free_r>
  408740:	89a2      	ldrh	r2, [r4, #12]
  408742:	2300      	movs	r3, #0
  408744:	6323      	str	r3, [r4, #48]	; 0x30
  408746:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40874a:	2300      	movs	r3, #0
  40874c:	6920      	ldr	r0, [r4, #16]
  40874e:	b292      	uxth	r2, r2
  408750:	e884 0009 	stmia.w	r4, {r0, r3}
  408754:	e7c6      	b.n	4086e4 <__swsetup_r+0x3c>
  408756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40875a:	2309      	movs	r3, #9
  40875c:	f04f 30ff 	mov.w	r0, #4294967295
  408760:	602b      	str	r3, [r5, #0]
  408762:	81a2      	strh	r2, [r4, #12]
  408764:	bd38      	pop	{r3, r4, r5, pc}
  408766:	bf00      	nop
  408768:	204004c0 	.word	0x204004c0

0040876c <register_fini>:
  40876c:	4b02      	ldr	r3, [pc, #8]	; (408778 <register_fini+0xc>)
  40876e:	b113      	cbz	r3, 408776 <register_fini+0xa>
  408770:	4802      	ldr	r0, [pc, #8]	; (40877c <register_fini+0x10>)
  408772:	f000 b805 	b.w	408780 <atexit>
  408776:	4770      	bx	lr
  408778:	00000000 	.word	0x00000000
  40877c:	00409a49 	.word	0x00409a49

00408780 <atexit>:
  408780:	4601      	mov	r1, r0
  408782:	2000      	movs	r0, #0
  408784:	4602      	mov	r2, r0
  408786:	4603      	mov	r3, r0
  408788:	f002 bede 	b.w	40b548 <__register_exitproc>

0040878c <quorem>:
  40878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408790:	6903      	ldr	r3, [r0, #16]
  408792:	b083      	sub	sp, #12
  408794:	690f      	ldr	r7, [r1, #16]
  408796:	429f      	cmp	r7, r3
  408798:	f300 8093 	bgt.w	4088c2 <quorem+0x136>
  40879c:	3f01      	subs	r7, #1
  40879e:	f101 0614 	add.w	r6, r1, #20
  4087a2:	f100 0a14 	add.w	sl, r0, #20
  4087a6:	00bb      	lsls	r3, r7, #2
  4087a8:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  4087ac:	461d      	mov	r5, r3
  4087ae:	9300      	str	r3, [sp, #0]
  4087b0:	3201      	adds	r2, #1
  4087b2:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4087b6:	eb0a 0405 	add.w	r4, sl, r5
  4087ba:	eb06 0905 	add.w	r9, r6, r5
  4087be:	fbb3 f8f2 	udiv	r8, r3, r2
  4087c2:	9401      	str	r4, [sp, #4]
  4087c4:	f1b8 0f00 	cmp.w	r8, #0
  4087c8:	d040      	beq.n	40884c <quorem+0xc0>
  4087ca:	2500      	movs	r5, #0
  4087cc:	46b4      	mov	ip, r6
  4087ce:	46d6      	mov	lr, sl
  4087d0:	462b      	mov	r3, r5
  4087d2:	f85c bb04 	ldr.w	fp, [ip], #4
  4087d6:	f8de 2000 	ldr.w	r2, [lr]
  4087da:	fa1f f48b 	uxth.w	r4, fp
  4087de:	45e1      	cmp	r9, ip
  4087e0:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  4087e4:	fb04 5508 	mla	r5, r4, r8, r5
  4087e8:	fb0b fb08 	mul.w	fp, fp, r8
  4087ec:	b2ac      	uxth	r4, r5
  4087ee:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  4087f2:	eba3 0304 	sub.w	r3, r3, r4
  4087f6:	fa1f fb85 	uxth.w	fp, r5
  4087fa:	fa13 f482 	uxtah	r4, r3, r2
  4087fe:	ea4f 4515 	mov.w	r5, r5, lsr #16
  408802:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  408806:	fa1f fb84 	uxth.w	fp, r4
  40880a:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40880e:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  408812:	ea4f 4323 	mov.w	r3, r3, asr #16
  408816:	f84e 2b04 	str.w	r2, [lr], #4
  40881a:	d2da      	bcs.n	4087d2 <quorem+0x46>
  40881c:	9b00      	ldr	r3, [sp, #0]
  40881e:	f85a 3003 	ldr.w	r3, [sl, r3]
  408822:	b99b      	cbnz	r3, 40884c <quorem+0xc0>
  408824:	9c01      	ldr	r4, [sp, #4]
  408826:	1f23      	subs	r3, r4, #4
  408828:	459a      	cmp	sl, r3
  40882a:	d20e      	bcs.n	40884a <quorem+0xbe>
  40882c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408830:	b95b      	cbnz	r3, 40884a <quorem+0xbe>
  408832:	f1a4 0308 	sub.w	r3, r4, #8
  408836:	e001      	b.n	40883c <quorem+0xb0>
  408838:	6812      	ldr	r2, [r2, #0]
  40883a:	b932      	cbnz	r2, 40884a <quorem+0xbe>
  40883c:	459a      	cmp	sl, r3
  40883e:	461a      	mov	r2, r3
  408840:	f107 37ff 	add.w	r7, r7, #4294967295
  408844:	f1a3 0304 	sub.w	r3, r3, #4
  408848:	d3f6      	bcc.n	408838 <quorem+0xac>
  40884a:	6107      	str	r7, [r0, #16]
  40884c:	4604      	mov	r4, r0
  40884e:	f002 fa81 	bl	40ad54 <__mcmp>
  408852:	2800      	cmp	r0, #0
  408854:	db31      	blt.n	4088ba <quorem+0x12e>
  408856:	f108 0801 	add.w	r8, r8, #1
  40885a:	4655      	mov	r5, sl
  40885c:	2000      	movs	r0, #0
  40885e:	f856 1b04 	ldr.w	r1, [r6], #4
  408862:	682a      	ldr	r2, [r5, #0]
  408864:	b28b      	uxth	r3, r1
  408866:	45b1      	cmp	r9, r6
  408868:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40886c:	eba0 0303 	sub.w	r3, r0, r3
  408870:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  408874:	fa13 f382 	uxtah	r3, r3, r2
  408878:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40887c:	b29b      	uxth	r3, r3
  40887e:	ea4f 4022 	mov.w	r0, r2, asr #16
  408882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408886:	f845 3b04 	str.w	r3, [r5], #4
  40888a:	d2e8      	bcs.n	40885e <quorem+0xd2>
  40888c:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  408890:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  408894:	b98a      	cbnz	r2, 4088ba <quorem+0x12e>
  408896:	1f1a      	subs	r2, r3, #4
  408898:	4592      	cmp	sl, r2
  40889a:	d20d      	bcs.n	4088b8 <quorem+0x12c>
  40889c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4088a0:	b952      	cbnz	r2, 4088b8 <quorem+0x12c>
  4088a2:	3b08      	subs	r3, #8
  4088a4:	e001      	b.n	4088aa <quorem+0x11e>
  4088a6:	6812      	ldr	r2, [r2, #0]
  4088a8:	b932      	cbnz	r2, 4088b8 <quorem+0x12c>
  4088aa:	459a      	cmp	sl, r3
  4088ac:	461a      	mov	r2, r3
  4088ae:	f107 37ff 	add.w	r7, r7, #4294967295
  4088b2:	f1a3 0304 	sub.w	r3, r3, #4
  4088b6:	d3f6      	bcc.n	4088a6 <quorem+0x11a>
  4088b8:	6127      	str	r7, [r4, #16]
  4088ba:	4640      	mov	r0, r8
  4088bc:	b003      	add	sp, #12
  4088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088c2:	2000      	movs	r0, #0
  4088c4:	b003      	add	sp, #12
  4088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088ca:	bf00      	nop
  4088cc:	0000      	movs	r0, r0
	...

004088d0 <_dtoa_r>:
  4088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088d4:	469b      	mov	fp, r3
  4088d6:	b099      	sub	sp, #100	; 0x64
  4088d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4088da:	4604      	mov	r4, r0
  4088dc:	4692      	mov	sl, r2
  4088de:	9d25      	ldr	r5, [sp, #148]	; 0x94
  4088e0:	b14b      	cbz	r3, 4088f6 <_dtoa_r+0x26>
  4088e2:	6c46      	ldr	r6, [r0, #68]	; 0x44
  4088e4:	2201      	movs	r2, #1
  4088e6:	4619      	mov	r1, r3
  4088e8:	40b2      	lsls	r2, r6
  4088ea:	605e      	str	r6, [r3, #4]
  4088ec:	609a      	str	r2, [r3, #8]
  4088ee:	f002 f83b 	bl	40a968 <_Bfree>
  4088f2:	2300      	movs	r3, #0
  4088f4:	6423      	str	r3, [r4, #64]	; 0x40
  4088f6:	f1bb 0f00 	cmp.w	fp, #0
  4088fa:	46d9      	mov	r9, fp
  4088fc:	db33      	blt.n	408966 <_dtoa_r+0x96>
  4088fe:	2300      	movs	r3, #0
  408900:	602b      	str	r3, [r5, #0]
  408902:	4b99      	ldr	r3, [pc, #612]	; (408b68 <_dtoa_r+0x298>)
  408904:	461a      	mov	r2, r3
  408906:	ea09 0303 	and.w	r3, r9, r3
  40890a:	4293      	cmp	r3, r2
  40890c:	d014      	beq.n	408938 <_dtoa_r+0x68>
  40890e:	2200      	movs	r2, #0
  408910:	2300      	movs	r3, #0
  408912:	4650      	mov	r0, sl
  408914:	4659      	mov	r1, fp
  408916:	f003 fb5d 	bl	40bfd4 <__aeabi_dcmpeq>
  40891a:	4680      	mov	r8, r0
  40891c:	b348      	cbz	r0, 408972 <_dtoa_r+0xa2>
  40891e:	2301      	movs	r3, #1
  408920:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408922:	6013      	str	r3, [r2, #0]
  408924:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408926:	2b00      	cmp	r3, #0
  408928:	f000 80cb 	beq.w	408ac2 <_dtoa_r+0x1f2>
  40892c:	488f      	ldr	r0, [pc, #572]	; (408b6c <_dtoa_r+0x29c>)
  40892e:	6018      	str	r0, [r3, #0]
  408930:	3801      	subs	r0, #1
  408932:	b019      	add	sp, #100	; 0x64
  408934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408938:	f242 730f 	movw	r3, #9999	; 0x270f
  40893c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40893e:	6013      	str	r3, [r2, #0]
  408940:	f1ba 0f00 	cmp.w	sl, #0
  408944:	f000 80a6 	beq.w	408a94 <_dtoa_r+0x1c4>
  408948:	4889      	ldr	r0, [pc, #548]	; (408b70 <_dtoa_r+0x2a0>)
  40894a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40894c:	2b00      	cmp	r3, #0
  40894e:	d0f0      	beq.n	408932 <_dtoa_r+0x62>
  408950:	78c3      	ldrb	r3, [r0, #3]
  408952:	2b00      	cmp	r3, #0
  408954:	f000 80b7 	beq.w	408ac6 <_dtoa_r+0x1f6>
  408958:	f100 0308 	add.w	r3, r0, #8
  40895c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40895e:	6013      	str	r3, [r2, #0]
  408960:	b019      	add	sp, #100	; 0x64
  408962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408966:	2301      	movs	r3, #1
  408968:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40896c:	602b      	str	r3, [r5, #0]
  40896e:	46cb      	mov	fp, r9
  408970:	e7c7      	b.n	408902 <_dtoa_r+0x32>
  408972:	ad17      	add	r5, sp, #92	; 0x5c
  408974:	a916      	add	r1, sp, #88	; 0x58
  408976:	4620      	mov	r0, r4
  408978:	4652      	mov	r2, sl
  40897a:	9500      	str	r5, [sp, #0]
  40897c:	465b      	mov	r3, fp
  40897e:	9101      	str	r1, [sp, #4]
  408980:	f002 fa7e 	bl	40ae80 <__d2b>
  408984:	9006      	str	r0, [sp, #24]
  408986:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40898a:	f040 808c 	bne.w	408aa6 <_dtoa_r+0x1d6>
  40898e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  408992:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  408996:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  408998:	4445      	add	r5, r8
  40899a:	429d      	cmp	r5, r3
  40899c:	f2c0 81cc 	blt.w	408d38 <_dtoa_r+0x468>
  4089a0:	331f      	adds	r3, #31
  4089a2:	f205 4212 	addw	r2, r5, #1042	; 0x412
  4089a6:	1b5b      	subs	r3, r3, r5
  4089a8:	fa2a f002 	lsr.w	r0, sl, r2
  4089ac:	fa09 f903 	lsl.w	r9, r9, r3
  4089b0:	ea49 0000 	orr.w	r0, r9, r0
  4089b4:	f003 f830 	bl	40ba18 <__aeabi_ui2d>
  4089b8:	3d01      	subs	r5, #1
  4089ba:	2301      	movs	r3, #1
  4089bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4089c0:	9311      	str	r3, [sp, #68]	; 0x44
  4089c2:	2200      	movs	r2, #0
  4089c4:	4b6b      	ldr	r3, [pc, #428]	; (408b74 <_dtoa_r+0x2a4>)
  4089c6:	f002 fee9 	bl	40b79c <__aeabi_dsub>
  4089ca:	a361      	add	r3, pc, #388	; (adr r3, 408b50 <_dtoa_r+0x280>)
  4089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089d0:	f003 f898 	bl	40bb04 <__aeabi_dmul>
  4089d4:	a360      	add	r3, pc, #384	; (adr r3, 408b58 <_dtoa_r+0x288>)
  4089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089da:	f002 fee1 	bl	40b7a0 <__adddf3>
  4089de:	4606      	mov	r6, r0
  4089e0:	460f      	mov	r7, r1
  4089e2:	4628      	mov	r0, r5
  4089e4:	f003 f828 	bl	40ba38 <__aeabi_i2d>
  4089e8:	a35d      	add	r3, pc, #372	; (adr r3, 408b60 <_dtoa_r+0x290>)
  4089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089ee:	f003 f889 	bl	40bb04 <__aeabi_dmul>
  4089f2:	4602      	mov	r2, r0
  4089f4:	460b      	mov	r3, r1
  4089f6:	4630      	mov	r0, r6
  4089f8:	4639      	mov	r1, r7
  4089fa:	f002 fed1 	bl	40b7a0 <__adddf3>
  4089fe:	4606      	mov	r6, r0
  408a00:	460f      	mov	r7, r1
  408a02:	f003 fb19 	bl	40c038 <__aeabi_d2iz>
  408a06:	2200      	movs	r2, #0
  408a08:	9002      	str	r0, [sp, #8]
  408a0a:	4639      	mov	r1, r7
  408a0c:	4630      	mov	r0, r6
  408a0e:	2300      	movs	r3, #0
  408a10:	f003 faea 	bl	40bfe8 <__aeabi_dcmplt>
  408a14:	2800      	cmp	r0, #0
  408a16:	f040 8171 	bne.w	408cfc <_dtoa_r+0x42c>
  408a1a:	9b02      	ldr	r3, [sp, #8]
  408a1c:	2b16      	cmp	r3, #22
  408a1e:	f200 8091 	bhi.w	408b44 <_dtoa_r+0x274>
  408a22:	9802      	ldr	r0, [sp, #8]
  408a24:	4652      	mov	r2, sl
  408a26:	4954      	ldr	r1, [pc, #336]	; (408b78 <_dtoa_r+0x2a8>)
  408a28:	465b      	mov	r3, fp
  408a2a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  408a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
  408a32:	f003 faf7 	bl	40c024 <__aeabi_dcmpgt>
  408a36:	2800      	cmp	r0, #0
  408a38:	f000 817c 	beq.w	408d34 <_dtoa_r+0x464>
  408a3c:	9b02      	ldr	r3, [sp, #8]
  408a3e:	3b01      	subs	r3, #1
  408a40:	9302      	str	r3, [sp, #8]
  408a42:	2300      	movs	r3, #0
  408a44:	930d      	str	r3, [sp, #52]	; 0x34
  408a46:	ebc5 0508 	rsb	r5, r5, r8
  408a4a:	1e6b      	subs	r3, r5, #1
  408a4c:	9303      	str	r3, [sp, #12]
  408a4e:	f100 816c 	bmi.w	408d2a <_dtoa_r+0x45a>
  408a52:	2300      	movs	r3, #0
  408a54:	9307      	str	r3, [sp, #28]
  408a56:	9b02      	ldr	r3, [sp, #8]
  408a58:	2b00      	cmp	r3, #0
  408a5a:	f2c0 815d 	blt.w	408d18 <_dtoa_r+0x448>
  408a5e:	9a03      	ldr	r2, [sp, #12]
  408a60:	930c      	str	r3, [sp, #48]	; 0x30
  408a62:	4611      	mov	r1, r2
  408a64:	4419      	add	r1, r3
  408a66:	2300      	movs	r3, #0
  408a68:	9103      	str	r1, [sp, #12]
  408a6a:	930a      	str	r3, [sp, #40]	; 0x28
  408a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408a6e:	2b09      	cmp	r3, #9
  408a70:	d82b      	bhi.n	408aca <_dtoa_r+0x1fa>
  408a72:	2b05      	cmp	r3, #5
  408a74:	f340 867e 	ble.w	409774 <_dtoa_r+0xea4>
  408a78:	3b04      	subs	r3, #4
  408a7a:	2500      	movs	r5, #0
  408a7c:	9322      	str	r3, [sp, #136]	; 0x88
  408a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408a80:	3b02      	subs	r3, #2
  408a82:	2b03      	cmp	r3, #3
  408a84:	f200 8679 	bhi.w	40977a <_dtoa_r+0xeaa>
  408a88:	e8df f013 	tbh	[pc, r3, lsl #1]
  408a8c:	0289029b 	.word	0x0289029b
  408a90:	068d0180 	.word	0x068d0180
  408a94:	f3c9 0013 	ubfx	r0, r9, #0, #20
  408a98:	4b35      	ldr	r3, [pc, #212]	; (408b70 <_dtoa_r+0x2a0>)
  408a9a:	4a38      	ldr	r2, [pc, #224]	; (408b7c <_dtoa_r+0x2ac>)
  408a9c:	2800      	cmp	r0, #0
  408a9e:	bf14      	ite	ne
  408aa0:	4618      	movne	r0, r3
  408aa2:	4610      	moveq	r0, r2
  408aa4:	e751      	b.n	40894a <_dtoa_r+0x7a>
  408aa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408aaa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  408aae:	4650      	mov	r0, sl
  408ab0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  408ab4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  408ab8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  408abc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408ac0:	e77f      	b.n	4089c2 <_dtoa_r+0xf2>
  408ac2:	482f      	ldr	r0, [pc, #188]	; (408b80 <_dtoa_r+0x2b0>)
  408ac4:	e735      	b.n	408932 <_dtoa_r+0x62>
  408ac6:	1cc3      	adds	r3, r0, #3
  408ac8:	e748      	b.n	40895c <_dtoa_r+0x8c>
  408aca:	f04f 33ff 	mov.w	r3, #4294967295
  408ace:	2100      	movs	r1, #0
  408ad0:	4620      	mov	r0, r4
  408ad2:	461d      	mov	r5, r3
  408ad4:	9310      	str	r3, [sp, #64]	; 0x40
  408ad6:	2301      	movs	r3, #1
  408ad8:	6461      	str	r1, [r4, #68]	; 0x44
  408ada:	9123      	str	r1, [sp, #140]	; 0x8c
  408adc:	930b      	str	r3, [sp, #44]	; 0x2c
  408ade:	f001 ff1b 	bl	40a918 <_Balloc>
  408ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408ae4:	9005      	str	r0, [sp, #20]
  408ae6:	9322      	str	r3, [sp, #136]	; 0x88
  408ae8:	9504      	str	r5, [sp, #16]
  408aea:	6420      	str	r0, [r4, #64]	; 0x40
  408aec:	9a02      	ldr	r2, [sp, #8]
  408aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408af0:	2a0e      	cmp	r2, #14
  408af2:	dc49      	bgt.n	408b88 <_dtoa_r+0x2b8>
  408af4:	2b00      	cmp	r3, #0
  408af6:	db47      	blt.n	408b88 <_dtoa_r+0x2b8>
  408af8:	4b1f      	ldr	r3, [pc, #124]	; (408b78 <_dtoa_r+0x2a8>)
  408afa:	9a02      	ldr	r2, [sp, #8]
  408afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408b00:	e9d3 8900 	ldrd	r8, r9, [r3]
  408b04:	9b04      	ldr	r3, [sp, #16]
  408b06:	2b00      	cmp	r3, #0
  408b08:	f300 825e 	bgt.w	408fc8 <_dtoa_r+0x6f8>
  408b0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408b0e:	2b00      	cmp	r3, #0
  408b10:	f280 825a 	bge.w	408fc8 <_dtoa_r+0x6f8>
  408b14:	9b04      	ldr	r3, [sp, #16]
  408b16:	2b00      	cmp	r3, #0
  408b18:	f040 85bf 	bne.w	40969a <_dtoa_r+0xdca>
  408b1c:	2200      	movs	r2, #0
  408b1e:	4b19      	ldr	r3, [pc, #100]	; (408b84 <_dtoa_r+0x2b4>)
  408b20:	4640      	mov	r0, r8
  408b22:	4649      	mov	r1, r9
  408b24:	f002 ffee 	bl	40bb04 <__aeabi_dmul>
  408b28:	4652      	mov	r2, sl
  408b2a:	465b      	mov	r3, fp
  408b2c:	f003 fa70 	bl	40c010 <__aeabi_dcmpge>
  408b30:	9f04      	ldr	r7, [sp, #16]
  408b32:	9708      	str	r7, [sp, #32]
  408b34:	2800      	cmp	r0, #0
  408b36:	f000 80bd 	beq.w	408cb4 <_dtoa_r+0x3e4>
  408b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408b3c:	9d05      	ldr	r5, [sp, #20]
  408b3e:	43db      	mvns	r3, r3
  408b40:	9302      	str	r3, [sp, #8]
  408b42:	e0be      	b.n	408cc2 <_dtoa_r+0x3f2>
  408b44:	2301      	movs	r3, #1
  408b46:	930d      	str	r3, [sp, #52]	; 0x34
  408b48:	e77d      	b.n	408a46 <_dtoa_r+0x176>
  408b4a:	bf00      	nop
  408b4c:	f3af 8000 	nop.w
  408b50:	636f4361 	.word	0x636f4361
  408b54:	3fd287a7 	.word	0x3fd287a7
  408b58:	8b60c8b3 	.word	0x8b60c8b3
  408b5c:	3fc68a28 	.word	0x3fc68a28
  408b60:	509f79fb 	.word	0x509f79fb
  408b64:	3fd34413 	.word	0x3fd34413
  408b68:	7ff00000 	.word	0x7ff00000
  408b6c:	0040d129 	.word	0x0040d129
  408b70:	0040d138 	.word	0x0040d138
  408b74:	3ff80000 	.word	0x3ff80000
  408b78:	0040d148 	.word	0x0040d148
  408b7c:	0040d12c 	.word	0x0040d12c
  408b80:	0040d128 	.word	0x0040d128
  408b84:	40140000 	.word	0x40140000
  408b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408b8a:	2a00      	cmp	r2, #0
  408b8c:	f040 80e1 	bne.w	408d52 <_dtoa_r+0x482>
  408b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408b92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408b94:	9d07      	ldr	r5, [sp, #28]
  408b96:	9308      	str	r3, [sp, #32]
  408b98:	9903      	ldr	r1, [sp, #12]
  408b9a:	2900      	cmp	r1, #0
  408b9c:	460b      	mov	r3, r1
  408b9e:	dd0a      	ble.n	408bb6 <_dtoa_r+0x2e6>
  408ba0:	2d00      	cmp	r5, #0
  408ba2:	dd08      	ble.n	408bb6 <_dtoa_r+0x2e6>
  408ba4:	42a9      	cmp	r1, r5
  408ba6:	9a07      	ldr	r2, [sp, #28]
  408ba8:	bfa8      	it	ge
  408baa:	462b      	movge	r3, r5
  408bac:	1ad2      	subs	r2, r2, r3
  408bae:	1aed      	subs	r5, r5, r3
  408bb0:	1acb      	subs	r3, r1, r3
  408bb2:	9207      	str	r2, [sp, #28]
  408bb4:	9303      	str	r3, [sp, #12]
  408bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bb8:	2b00      	cmp	r3, #0
  408bba:	dd1b      	ble.n	408bf4 <_dtoa_r+0x324>
  408bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408bbe:	2b00      	cmp	r3, #0
  408bc0:	f000 84ce 	beq.w	409560 <_dtoa_r+0xc90>
  408bc4:	2e00      	cmp	r6, #0
  408bc6:	dd11      	ble.n	408bec <_dtoa_r+0x31c>
  408bc8:	9908      	ldr	r1, [sp, #32]
  408bca:	4632      	mov	r2, r6
  408bcc:	4620      	mov	r0, r4
  408bce:	f002 f817 	bl	40ac00 <__pow5mult>
  408bd2:	9f06      	ldr	r7, [sp, #24]
  408bd4:	4601      	mov	r1, r0
  408bd6:	9008      	str	r0, [sp, #32]
  408bd8:	463a      	mov	r2, r7
  408bda:	4620      	mov	r0, r4
  408bdc:	f001 ff6e 	bl	40aabc <__multiply>
  408be0:	4603      	mov	r3, r0
  408be2:	4639      	mov	r1, r7
  408be4:	4620      	mov	r0, r4
  408be6:	9306      	str	r3, [sp, #24]
  408be8:	f001 febe 	bl	40a968 <_Bfree>
  408bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bee:	1b9a      	subs	r2, r3, r6
  408bf0:	f040 84ff 	bne.w	4095f2 <_dtoa_r+0xd22>
  408bf4:	4620      	mov	r0, r4
  408bf6:	2101      	movs	r1, #1
  408bf8:	f001 ff56 	bl	40aaa8 <__i2b>
  408bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408bfe:	4607      	mov	r7, r0
  408c00:	2b00      	cmp	r3, #0
  408c02:	f340 8282 	ble.w	40910a <_dtoa_r+0x83a>
  408c06:	4601      	mov	r1, r0
  408c08:	461a      	mov	r2, r3
  408c0a:	4620      	mov	r0, r4
  408c0c:	f001 fff8 	bl	40ac00 <__pow5mult>
  408c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408c12:	4607      	mov	r7, r0
  408c14:	2b01      	cmp	r3, #1
  408c16:	f340 84f3 	ble.w	409600 <_dtoa_r+0xd30>
  408c1a:	f04f 0800 	mov.w	r8, #0
  408c1e:	693b      	ldr	r3, [r7, #16]
  408c20:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  408c24:	6918      	ldr	r0, [r3, #16]
  408c26:	f001 feeb 	bl	40aa00 <__hi0bits>
  408c2a:	f1c0 0020 	rsb	r0, r0, #32
  408c2e:	9b03      	ldr	r3, [sp, #12]
  408c30:	4418      	add	r0, r3
  408c32:	f010 001f 	ands.w	r0, r0, #31
  408c36:	f000 82a0 	beq.w	40917a <_dtoa_r+0x8aa>
  408c3a:	f1c0 0320 	rsb	r3, r0, #32
  408c3e:	2b04      	cmp	r3, #4
  408c40:	f340 8592 	ble.w	409768 <_dtoa_r+0xe98>
  408c44:	f1c0 001c 	rsb	r0, r0, #28
  408c48:	9b07      	ldr	r3, [sp, #28]
  408c4a:	4405      	add	r5, r0
  408c4c:	4403      	add	r3, r0
  408c4e:	9307      	str	r3, [sp, #28]
  408c50:	9b03      	ldr	r3, [sp, #12]
  408c52:	4403      	add	r3, r0
  408c54:	9303      	str	r3, [sp, #12]
  408c56:	9b07      	ldr	r3, [sp, #28]
  408c58:	2b00      	cmp	r3, #0
  408c5a:	dd05      	ble.n	408c68 <_dtoa_r+0x398>
  408c5c:	9906      	ldr	r1, [sp, #24]
  408c5e:	461a      	mov	r2, r3
  408c60:	4620      	mov	r0, r4
  408c62:	f002 f81d 	bl	40aca0 <__lshift>
  408c66:	9006      	str	r0, [sp, #24]
  408c68:	9b03      	ldr	r3, [sp, #12]
  408c6a:	2b00      	cmp	r3, #0
  408c6c:	dd05      	ble.n	408c7a <_dtoa_r+0x3aa>
  408c6e:	4639      	mov	r1, r7
  408c70:	461a      	mov	r2, r3
  408c72:	4620      	mov	r0, r4
  408c74:	f002 f814 	bl	40aca0 <__lshift>
  408c78:	4607      	mov	r7, r0
  408c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408c7c:	2b00      	cmp	r3, #0
  408c7e:	f040 838b 	bne.w	409398 <_dtoa_r+0xac8>
  408c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408c84:	2b02      	cmp	r3, #2
  408c86:	f340 827a 	ble.w	40917e <_dtoa_r+0x8ae>
  408c8a:	9b04      	ldr	r3, [sp, #16]
  408c8c:	2b00      	cmp	r3, #0
  408c8e:	f300 8276 	bgt.w	40917e <_dtoa_r+0x8ae>
  408c92:	9b04      	ldr	r3, [sp, #16]
  408c94:	2b00      	cmp	r3, #0
  408c96:	f47f af50 	bne.w	408b3a <_dtoa_r+0x26a>
  408c9a:	4639      	mov	r1, r7
  408c9c:	2205      	movs	r2, #5
  408c9e:	4620      	mov	r0, r4
  408ca0:	f001 fe6c 	bl	40a97c <__multadd>
  408ca4:	4607      	mov	r7, r0
  408ca6:	9806      	ldr	r0, [sp, #24]
  408ca8:	4639      	mov	r1, r7
  408caa:	f002 f853 	bl	40ad54 <__mcmp>
  408cae:	2800      	cmp	r0, #0
  408cb0:	f77f af43 	ble.w	408b3a <_dtoa_r+0x26a>
  408cb4:	9a02      	ldr	r2, [sp, #8]
  408cb6:	2331      	movs	r3, #49	; 0x31
  408cb8:	3201      	adds	r2, #1
  408cba:	9202      	str	r2, [sp, #8]
  408cbc:	9a05      	ldr	r2, [sp, #20]
  408cbe:	1c55      	adds	r5, r2, #1
  408cc0:	7013      	strb	r3, [r2, #0]
  408cc2:	4639      	mov	r1, r7
  408cc4:	4620      	mov	r0, r4
  408cc6:	f001 fe4f 	bl	40a968 <_Bfree>
  408cca:	9b08      	ldr	r3, [sp, #32]
  408ccc:	b11b      	cbz	r3, 408cd6 <_dtoa_r+0x406>
  408cce:	9908      	ldr	r1, [sp, #32]
  408cd0:	4620      	mov	r0, r4
  408cd2:	f001 fe49 	bl	40a968 <_Bfree>
  408cd6:	4620      	mov	r0, r4
  408cd8:	9906      	ldr	r1, [sp, #24]
  408cda:	f001 fe45 	bl	40a968 <_Bfree>
  408cde:	2200      	movs	r2, #0
  408ce0:	9b02      	ldr	r3, [sp, #8]
  408ce2:	702a      	strb	r2, [r5, #0]
  408ce4:	3301      	adds	r3, #1
  408ce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408ce8:	6013      	str	r3, [r2, #0]
  408cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408cec:	2b00      	cmp	r3, #0
  408cee:	f000 82a3 	beq.w	409238 <_dtoa_r+0x968>
  408cf2:	9805      	ldr	r0, [sp, #20]
  408cf4:	601d      	str	r5, [r3, #0]
  408cf6:	b019      	add	sp, #100	; 0x64
  408cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cfc:	9802      	ldr	r0, [sp, #8]
  408cfe:	f002 fe9b 	bl	40ba38 <__aeabi_i2d>
  408d02:	4632      	mov	r2, r6
  408d04:	463b      	mov	r3, r7
  408d06:	f003 f965 	bl	40bfd4 <__aeabi_dcmpeq>
  408d0a:	2800      	cmp	r0, #0
  408d0c:	f47f ae85 	bne.w	408a1a <_dtoa_r+0x14a>
  408d10:	9b02      	ldr	r3, [sp, #8]
  408d12:	3b01      	subs	r3, #1
  408d14:	9302      	str	r3, [sp, #8]
  408d16:	e680      	b.n	408a1a <_dtoa_r+0x14a>
  408d18:	9a07      	ldr	r2, [sp, #28]
  408d1a:	9b02      	ldr	r3, [sp, #8]
  408d1c:	1ad2      	subs	r2, r2, r3
  408d1e:	425b      	negs	r3, r3
  408d20:	930a      	str	r3, [sp, #40]	; 0x28
  408d22:	2300      	movs	r3, #0
  408d24:	9207      	str	r2, [sp, #28]
  408d26:	930c      	str	r3, [sp, #48]	; 0x30
  408d28:	e6a0      	b.n	408a6c <_dtoa_r+0x19c>
  408d2a:	425b      	negs	r3, r3
  408d2c:	9307      	str	r3, [sp, #28]
  408d2e:	2300      	movs	r3, #0
  408d30:	9303      	str	r3, [sp, #12]
  408d32:	e690      	b.n	408a56 <_dtoa_r+0x186>
  408d34:	900d      	str	r0, [sp, #52]	; 0x34
  408d36:	e686      	b.n	408a46 <_dtoa_r+0x176>
  408d38:	4bbd      	ldr	r3, [pc, #756]	; (409030 <_dtoa_r+0x760>)
  408d3a:	1b5b      	subs	r3, r3, r5
  408d3c:	fa0a f003 	lsl.w	r0, sl, r3
  408d40:	e638      	b.n	4089b4 <_dtoa_r+0xe4>
  408d42:	2100      	movs	r1, #0
  408d44:	f04f 32ff 	mov.w	r2, #4294967295
  408d48:	9123      	str	r1, [sp, #140]	; 0x8c
  408d4a:	2101      	movs	r1, #1
  408d4c:	9204      	str	r2, [sp, #16]
  408d4e:	910b      	str	r1, [sp, #44]	; 0x2c
  408d50:	9210      	str	r2, [sp, #64]	; 0x40
  408d52:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408d54:	2a01      	cmp	r2, #1
  408d56:	f340 8460 	ble.w	40961a <_dtoa_r+0xd4a>
  408d5a:	9b04      	ldr	r3, [sp, #16]
  408d5c:	1e5e      	subs	r6, r3, #1
  408d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d60:	42b3      	cmp	r3, r6
  408d62:	f2c0 8405 	blt.w	409570 <_dtoa_r+0xca0>
  408d66:	1b9e      	subs	r6, r3, r6
  408d68:	9b04      	ldr	r3, [sp, #16]
  408d6a:	2b00      	cmp	r3, #0
  408d6c:	f2c0 8461 	blt.w	409632 <_dtoa_r+0xd62>
  408d70:	9d07      	ldr	r5, [sp, #28]
  408d72:	9b04      	ldr	r3, [sp, #16]
  408d74:	9a07      	ldr	r2, [sp, #28]
  408d76:	4620      	mov	r0, r4
  408d78:	2101      	movs	r1, #1
  408d7a:	441a      	add	r2, r3
  408d7c:	9207      	str	r2, [sp, #28]
  408d7e:	9a03      	ldr	r2, [sp, #12]
  408d80:	441a      	add	r2, r3
  408d82:	9203      	str	r2, [sp, #12]
  408d84:	f001 fe90 	bl	40aaa8 <__i2b>
  408d88:	9008      	str	r0, [sp, #32]
  408d8a:	e705      	b.n	408b98 <_dtoa_r+0x2c8>
  408d8c:	2301      	movs	r3, #1
  408d8e:	930b      	str	r3, [sp, #44]	; 0x2c
  408d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408d92:	2b00      	cmp	r3, #0
  408d94:	f340 83df 	ble.w	409556 <_dtoa_r+0xc86>
  408d98:	2b0e      	cmp	r3, #14
  408d9a:	bf8c      	ite	hi
  408d9c:	2500      	movhi	r5, #0
  408d9e:	f005 0501 	andls.w	r5, r5, #1
  408da2:	461e      	mov	r6, r3
  408da4:	9310      	str	r3, [sp, #64]	; 0x40
  408da6:	9304      	str	r3, [sp, #16]
  408da8:	2100      	movs	r1, #0
  408daa:	2e17      	cmp	r6, #23
  408dac:	6461      	str	r1, [r4, #68]	; 0x44
  408dae:	d909      	bls.n	408dc4 <_dtoa_r+0x4f4>
  408db0:	2201      	movs	r2, #1
  408db2:	2304      	movs	r3, #4
  408db4:	005b      	lsls	r3, r3, #1
  408db6:	4611      	mov	r1, r2
  408db8:	3201      	adds	r2, #1
  408dba:	f103 0014 	add.w	r0, r3, #20
  408dbe:	42b0      	cmp	r0, r6
  408dc0:	d9f8      	bls.n	408db4 <_dtoa_r+0x4e4>
  408dc2:	6461      	str	r1, [r4, #68]	; 0x44
  408dc4:	4620      	mov	r0, r4
  408dc6:	f001 fda7 	bl	40a918 <_Balloc>
  408dca:	9005      	str	r0, [sp, #20]
  408dcc:	6420      	str	r0, [r4, #64]	; 0x40
  408dce:	2d00      	cmp	r5, #0
  408dd0:	f43f ae8c 	beq.w	408aec <_dtoa_r+0x21c>
  408dd4:	9802      	ldr	r0, [sp, #8]
  408dd6:	2800      	cmp	r0, #0
  408dd8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  408ddc:	f340 8233 	ble.w	409246 <_dtoa_r+0x976>
  408de0:	4a94      	ldr	r2, [pc, #592]	; (409034 <_dtoa_r+0x764>)
  408de2:	f000 030f 	and.w	r3, r0, #15
  408de6:	1105      	asrs	r5, r0, #4
  408de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  408dec:	06ea      	lsls	r2, r5, #27
  408dee:	e9d3 6700 	ldrd	r6, r7, [r3]
  408df2:	f140 821c 	bpl.w	40922e <_dtoa_r+0x95e>
  408df6:	4b90      	ldr	r3, [pc, #576]	; (409038 <_dtoa_r+0x768>)
  408df8:	4650      	mov	r0, sl
  408dfa:	4659      	mov	r1, fp
  408dfc:	f005 050f 	and.w	r5, r5, #15
  408e00:	f04f 0803 	mov.w	r8, #3
  408e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408e08:	f002 ffa6 	bl	40bd58 <__aeabi_ddiv>
  408e0c:	4682      	mov	sl, r0
  408e0e:	468b      	mov	fp, r1
  408e10:	b18d      	cbz	r5, 408e36 <_dtoa_r+0x566>
  408e12:	f8df 9224 	ldr.w	r9, [pc, #548]	; 409038 <_dtoa_r+0x768>
  408e16:	07eb      	lsls	r3, r5, #31
  408e18:	4630      	mov	r0, r6
  408e1a:	4639      	mov	r1, r7
  408e1c:	d507      	bpl.n	408e2e <_dtoa_r+0x55e>
  408e1e:	f108 0801 	add.w	r8, r8, #1
  408e22:	e9d9 2300 	ldrd	r2, r3, [r9]
  408e26:	f002 fe6d 	bl	40bb04 <__aeabi_dmul>
  408e2a:	4606      	mov	r6, r0
  408e2c:	460f      	mov	r7, r1
  408e2e:	106d      	asrs	r5, r5, #1
  408e30:	f109 0908 	add.w	r9, r9, #8
  408e34:	d1ef      	bne.n	408e16 <_dtoa_r+0x546>
  408e36:	4650      	mov	r0, sl
  408e38:	4659      	mov	r1, fp
  408e3a:	4632      	mov	r2, r6
  408e3c:	463b      	mov	r3, r7
  408e3e:	f002 ff8b 	bl	40bd58 <__aeabi_ddiv>
  408e42:	e9cd 0108 	strd	r0, r1, [sp, #32]
  408e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e48:	b143      	cbz	r3, 408e5c <_dtoa_r+0x58c>
  408e4a:	2200      	movs	r2, #0
  408e4c:	4b7b      	ldr	r3, [pc, #492]	; (40903c <_dtoa_r+0x76c>)
  408e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408e52:	f003 f8c9 	bl	40bfe8 <__aeabi_dcmplt>
  408e56:	2800      	cmp	r0, #0
  408e58:	f040 8393 	bne.w	409582 <_dtoa_r+0xcb2>
  408e5c:	4640      	mov	r0, r8
  408e5e:	f002 fdeb 	bl	40ba38 <__aeabi_i2d>
  408e62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  408e66:	f002 fe4d 	bl	40bb04 <__aeabi_dmul>
  408e6a:	4b75      	ldr	r3, [pc, #468]	; (409040 <_dtoa_r+0x770>)
  408e6c:	2200      	movs	r2, #0
  408e6e:	f002 fc97 	bl	40b7a0 <__adddf3>
  408e72:	9b04      	ldr	r3, [sp, #16]
  408e74:	4606      	mov	r6, r0
  408e76:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  408e7a:	2b00      	cmp	r3, #0
  408e7c:	f000 8161 	beq.w	409142 <_dtoa_r+0x872>
  408e80:	9b02      	ldr	r3, [sp, #8]
  408e82:	f8dd c010 	ldr.w	ip, [sp, #16]
  408e86:	9314      	str	r3, [sp, #80]	; 0x50
  408e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408e8a:	2b00      	cmp	r3, #0
  408e8c:	f000 820b 	beq.w	4092a6 <_dtoa_r+0x9d6>
  408e90:	4b68      	ldr	r3, [pc, #416]	; (409034 <_dtoa_r+0x764>)
  408e92:	2000      	movs	r0, #0
  408e94:	9a05      	ldr	r2, [sp, #20]
  408e96:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  408e9a:	496a      	ldr	r1, [pc, #424]	; (409044 <_dtoa_r+0x774>)
  408e9c:	1c55      	adds	r5, r2, #1
  408e9e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  408ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  408ea6:	f002 ff57 	bl	40bd58 <__aeabi_ddiv>
  408eaa:	4632      	mov	r2, r6
  408eac:	463b      	mov	r3, r7
  408eae:	f002 fc75 	bl	40b79c <__aeabi_dsub>
  408eb2:	4682      	mov	sl, r0
  408eb4:	468b      	mov	fp, r1
  408eb6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408eba:	4649      	mov	r1, r9
  408ebc:	4640      	mov	r0, r8
  408ebe:	f003 f8bb 	bl	40c038 <__aeabi_d2iz>
  408ec2:	4606      	mov	r6, r0
  408ec4:	f002 fdb8 	bl	40ba38 <__aeabi_i2d>
  408ec8:	4602      	mov	r2, r0
  408eca:	3630      	adds	r6, #48	; 0x30
  408ecc:	460b      	mov	r3, r1
  408ece:	4640      	mov	r0, r8
  408ed0:	4649      	mov	r1, r9
  408ed2:	f002 fc63 	bl	40b79c <__aeabi_dsub>
  408ed6:	9f05      	ldr	r7, [sp, #20]
  408ed8:	4680      	mov	r8, r0
  408eda:	4689      	mov	r9, r1
  408edc:	b2f6      	uxtb	r6, r6
  408ede:	4650      	mov	r0, sl
  408ee0:	4659      	mov	r1, fp
  408ee2:	4642      	mov	r2, r8
  408ee4:	464b      	mov	r3, r9
  408ee6:	703e      	strb	r6, [r7, #0]
  408ee8:	f003 f89c 	bl	40c024 <__aeabi_dcmpgt>
  408eec:	2800      	cmp	r0, #0
  408eee:	f040 8243 	bne.w	409378 <_dtoa_r+0xaa8>
  408ef2:	4642      	mov	r2, r8
  408ef4:	464b      	mov	r3, r9
  408ef6:	2000      	movs	r0, #0
  408ef8:	4950      	ldr	r1, [pc, #320]	; (40903c <_dtoa_r+0x76c>)
  408efa:	f002 fc4f 	bl	40b79c <__aeabi_dsub>
  408efe:	4602      	mov	r2, r0
  408f00:	460b      	mov	r3, r1
  408f02:	4650      	mov	r0, sl
  408f04:	4659      	mov	r1, fp
  408f06:	f003 f88d 	bl	40c024 <__aeabi_dcmpgt>
  408f0a:	2800      	cmp	r0, #0
  408f0c:	f040 80eb 	bne.w	4090e6 <_dtoa_r+0x816>
  408f10:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  408f14:	f1bc 0f01 	cmp.w	ip, #1
  408f18:	f340 8192 	ble.w	409240 <_dtoa_r+0x970>
  408f1c:	9f05      	ldr	r7, [sp, #20]
  408f1e:	9412      	str	r4, [sp, #72]	; 0x48
  408f20:	4467      	add	r7, ip
  408f22:	9708      	str	r7, [sp, #32]
  408f24:	e00e      	b.n	408f44 <_dtoa_r+0x674>
  408f26:	2000      	movs	r0, #0
  408f28:	4944      	ldr	r1, [pc, #272]	; (40903c <_dtoa_r+0x76c>)
  408f2a:	f002 fc37 	bl	40b79c <__aeabi_dsub>
  408f2e:	4652      	mov	r2, sl
  408f30:	465b      	mov	r3, fp
  408f32:	f003 f859 	bl	40bfe8 <__aeabi_dcmplt>
  408f36:	2800      	cmp	r0, #0
  408f38:	f040 83a1 	bne.w	40967e <_dtoa_r+0xdae>
  408f3c:	9b08      	ldr	r3, [sp, #32]
  408f3e:	429d      	cmp	r5, r3
  408f40:	f000 817d 	beq.w	40923e <_dtoa_r+0x96e>
  408f44:	4650      	mov	r0, sl
  408f46:	4659      	mov	r1, fp
  408f48:	2200      	movs	r2, #0
  408f4a:	4b3f      	ldr	r3, [pc, #252]	; (409048 <_dtoa_r+0x778>)
  408f4c:	f002 fdda 	bl	40bb04 <__aeabi_dmul>
  408f50:	2200      	movs	r2, #0
  408f52:	4b3d      	ldr	r3, [pc, #244]	; (409048 <_dtoa_r+0x778>)
  408f54:	4682      	mov	sl, r0
  408f56:	468b      	mov	fp, r1
  408f58:	4640      	mov	r0, r8
  408f5a:	4649      	mov	r1, r9
  408f5c:	f002 fdd2 	bl	40bb04 <__aeabi_dmul>
  408f60:	4606      	mov	r6, r0
  408f62:	460f      	mov	r7, r1
  408f64:	f003 f868 	bl	40c038 <__aeabi_d2iz>
  408f68:	4604      	mov	r4, r0
  408f6a:	f002 fd65 	bl	40ba38 <__aeabi_i2d>
  408f6e:	4602      	mov	r2, r0
  408f70:	460b      	mov	r3, r1
  408f72:	3430      	adds	r4, #48	; 0x30
  408f74:	4630      	mov	r0, r6
  408f76:	4639      	mov	r1, r7
  408f78:	b2e6      	uxtb	r6, r4
  408f7a:	f002 fc0f 	bl	40b79c <__aeabi_dsub>
  408f7e:	4680      	mov	r8, r0
  408f80:	4689      	mov	r9, r1
  408f82:	4652      	mov	r2, sl
  408f84:	465b      	mov	r3, fp
  408f86:	f805 6b01 	strb.w	r6, [r5], #1
  408f8a:	f003 f82d 	bl	40bfe8 <__aeabi_dcmplt>
  408f8e:	4642      	mov	r2, r8
  408f90:	464b      	mov	r3, r9
  408f92:	2800      	cmp	r0, #0
  408f94:	d0c7      	beq.n	408f26 <_dtoa_r+0x656>
  408f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408f98:	9c12      	ldr	r4, [sp, #72]	; 0x48
  408f9a:	9302      	str	r3, [sp, #8]
  408f9c:	e69b      	b.n	408cd6 <_dtoa_r+0x406>
  408f9e:	2300      	movs	r3, #0
  408fa0:	930b      	str	r3, [sp, #44]	; 0x2c
  408fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408fa4:	9a02      	ldr	r2, [sp, #8]
  408fa6:	4413      	add	r3, r2
  408fa8:	9310      	str	r3, [sp, #64]	; 0x40
  408faa:	3301      	adds	r3, #1
  408fac:	2b00      	cmp	r3, #0
  408fae:	9304      	str	r3, [sp, #16]
  408fb0:	f340 82c9 	ble.w	409546 <_dtoa_r+0xc76>
  408fb4:	9e04      	ldr	r6, [sp, #16]
  408fb6:	2e0e      	cmp	r6, #14
  408fb8:	bf8c      	ite	hi
  408fba:	2500      	movhi	r5, #0
  408fbc:	f005 0501 	andls.w	r5, r5, #1
  408fc0:	e6f2      	b.n	408da8 <_dtoa_r+0x4d8>
  408fc2:	2300      	movs	r3, #0
  408fc4:	930b      	str	r3, [sp, #44]	; 0x2c
  408fc6:	e6e3      	b.n	408d90 <_dtoa_r+0x4c0>
  408fc8:	9905      	ldr	r1, [sp, #20]
  408fca:	4642      	mov	r2, r8
  408fcc:	464b      	mov	r3, r9
  408fce:	4650      	mov	r0, sl
  408fd0:	1c4d      	adds	r5, r1, #1
  408fd2:	4659      	mov	r1, fp
  408fd4:	f002 fec0 	bl	40bd58 <__aeabi_ddiv>
  408fd8:	4656      	mov	r6, sl
  408fda:	f003 f82d 	bl	40c038 <__aeabi_d2iz>
  408fde:	4682      	mov	sl, r0
  408fe0:	f002 fd2a 	bl	40ba38 <__aeabi_i2d>
  408fe4:	4642      	mov	r2, r8
  408fe6:	464b      	mov	r3, r9
  408fe8:	f002 fd8c 	bl	40bb04 <__aeabi_dmul>
  408fec:	4602      	mov	r2, r0
  408fee:	460b      	mov	r3, r1
  408ff0:	4630      	mov	r0, r6
  408ff2:	4659      	mov	r1, fp
  408ff4:	f002 fbd2 	bl	40b79c <__aeabi_dsub>
  408ff8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  408ffc:	9a05      	ldr	r2, [sp, #20]
  408ffe:	4606      	mov	r6, r0
  409000:	460f      	mov	r7, r1
  409002:	7013      	strb	r3, [r2, #0]
  409004:	9b04      	ldr	r3, [sp, #16]
  409006:	2b01      	cmp	r3, #1
  409008:	d04d      	beq.n	4090a6 <_dtoa_r+0x7d6>
  40900a:	2200      	movs	r2, #0
  40900c:	4b0e      	ldr	r3, [pc, #56]	; (409048 <_dtoa_r+0x778>)
  40900e:	f002 fd79 	bl	40bb04 <__aeabi_dmul>
  409012:	2200      	movs	r2, #0
  409014:	2300      	movs	r3, #0
  409016:	4606      	mov	r6, r0
  409018:	460f      	mov	r7, r1
  40901a:	f002 ffdb 	bl	40bfd4 <__aeabi_dcmpeq>
  40901e:	2800      	cmp	r0, #0
  409020:	f47f ae59 	bne.w	408cd6 <_dtoa_r+0x406>
  409024:	9403      	str	r4, [sp, #12]
  409026:	f8dd b014 	ldr.w	fp, [sp, #20]
  40902a:	9c04      	ldr	r4, [sp, #16]
  40902c:	e019      	b.n	409062 <_dtoa_r+0x792>
  40902e:	bf00      	nop
  409030:	fffffbee 	.word	0xfffffbee
  409034:	0040d148 	.word	0x0040d148
  409038:	0040d220 	.word	0x0040d220
  40903c:	3ff00000 	.word	0x3ff00000
  409040:	401c0000 	.word	0x401c0000
  409044:	3fe00000 	.word	0x3fe00000
  409048:	40240000 	.word	0x40240000
  40904c:	f002 fd5a 	bl	40bb04 <__aeabi_dmul>
  409050:	2200      	movs	r2, #0
  409052:	2300      	movs	r3, #0
  409054:	4606      	mov	r6, r0
  409056:	460f      	mov	r7, r1
  409058:	f002 ffbc 	bl	40bfd4 <__aeabi_dcmpeq>
  40905c:	2800      	cmp	r0, #0
  40905e:	f040 82e5 	bne.w	40962c <_dtoa_r+0xd5c>
  409062:	4642      	mov	r2, r8
  409064:	464b      	mov	r3, r9
  409066:	4630      	mov	r0, r6
  409068:	4639      	mov	r1, r7
  40906a:	f002 fe75 	bl	40bd58 <__aeabi_ddiv>
  40906e:	f002 ffe3 	bl	40c038 <__aeabi_d2iz>
  409072:	4682      	mov	sl, r0
  409074:	f002 fce0 	bl	40ba38 <__aeabi_i2d>
  409078:	4642      	mov	r2, r8
  40907a:	464b      	mov	r3, r9
  40907c:	f002 fd42 	bl	40bb04 <__aeabi_dmul>
  409080:	4602      	mov	r2, r0
  409082:	460b      	mov	r3, r1
  409084:	4630      	mov	r0, r6
  409086:	4639      	mov	r1, r7
  409088:	f002 fb88 	bl	40b79c <__aeabi_dsub>
  40908c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  409090:	4606      	mov	r6, r0
  409092:	460f      	mov	r7, r1
  409094:	f805 eb01 	strb.w	lr, [r5], #1
  409098:	ebcb 0e05 	rsb	lr, fp, r5
  40909c:	2200      	movs	r2, #0
  40909e:	4bb8      	ldr	r3, [pc, #736]	; (409380 <_dtoa_r+0xab0>)
  4090a0:	4574      	cmp	r4, lr
  4090a2:	d1d3      	bne.n	40904c <_dtoa_r+0x77c>
  4090a4:	9c03      	ldr	r4, [sp, #12]
  4090a6:	4632      	mov	r2, r6
  4090a8:	463b      	mov	r3, r7
  4090aa:	4630      	mov	r0, r6
  4090ac:	4639      	mov	r1, r7
  4090ae:	f002 fb77 	bl	40b7a0 <__adddf3>
  4090b2:	4606      	mov	r6, r0
  4090b4:	460f      	mov	r7, r1
  4090b6:	4640      	mov	r0, r8
  4090b8:	4649      	mov	r1, r9
  4090ba:	4632      	mov	r2, r6
  4090bc:	463b      	mov	r3, r7
  4090be:	f002 ff93 	bl	40bfe8 <__aeabi_dcmplt>
  4090c2:	b960      	cbnz	r0, 4090de <_dtoa_r+0x80e>
  4090c4:	4640      	mov	r0, r8
  4090c6:	4649      	mov	r1, r9
  4090c8:	4632      	mov	r2, r6
  4090ca:	463b      	mov	r3, r7
  4090cc:	f002 ff82 	bl	40bfd4 <__aeabi_dcmpeq>
  4090d0:	2800      	cmp	r0, #0
  4090d2:	f43f ae00 	beq.w	408cd6 <_dtoa_r+0x406>
  4090d6:	f01a 0f01 	tst.w	sl, #1
  4090da:	f43f adfc 	beq.w	408cd6 <_dtoa_r+0x406>
  4090de:	9b02      	ldr	r3, [sp, #8]
  4090e0:	9314      	str	r3, [sp, #80]	; 0x50
  4090e2:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  4090e6:	1e6a      	subs	r2, r5, #1
  4090e8:	9b05      	ldr	r3, [sp, #20]
  4090ea:	e004      	b.n	4090f6 <_dtoa_r+0x826>
  4090ec:	429a      	cmp	r2, r3
  4090ee:	f000 8277 	beq.w	4095e0 <_dtoa_r+0xd10>
  4090f2:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  4090f6:	2e39      	cmp	r6, #57	; 0x39
  4090f8:	f102 0501 	add.w	r5, r2, #1
  4090fc:	d0f6      	beq.n	4090ec <_dtoa_r+0x81c>
  4090fe:	1c73      	adds	r3, r6, #1
  409100:	9914      	ldr	r1, [sp, #80]	; 0x50
  409102:	b2db      	uxtb	r3, r3
  409104:	9102      	str	r1, [sp, #8]
  409106:	7013      	strb	r3, [r2, #0]
  409108:	e5e5      	b.n	408cd6 <_dtoa_r+0x406>
  40910a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40910c:	2b01      	cmp	r3, #1
  40910e:	f340 8161 	ble.w	4093d4 <_dtoa_r+0xb04>
  409112:	f04f 0800 	mov.w	r8, #0
  409116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409118:	2b00      	cmp	r3, #0
  40911a:	f47f ad80 	bne.w	408c1e <_dtoa_r+0x34e>
  40911e:	2001      	movs	r0, #1
  409120:	e585      	b.n	408c2e <_dtoa_r+0x35e>
  409122:	4640      	mov	r0, r8
  409124:	f002 fc88 	bl	40ba38 <__aeabi_i2d>
  409128:	4602      	mov	r2, r0
  40912a:	460b      	mov	r3, r1
  40912c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409130:	f002 fce8 	bl	40bb04 <__aeabi_dmul>
  409134:	2200      	movs	r2, #0
  409136:	4b93      	ldr	r3, [pc, #588]	; (409384 <_dtoa_r+0xab4>)
  409138:	f002 fb32 	bl	40b7a0 <__adddf3>
  40913c:	4606      	mov	r6, r0
  40913e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  409142:	2200      	movs	r2, #0
  409144:	4b90      	ldr	r3, [pc, #576]	; (409388 <_dtoa_r+0xab8>)
  409146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40914a:	f002 fb27 	bl	40b79c <__aeabi_dsub>
  40914e:	4632      	mov	r2, r6
  409150:	463b      	mov	r3, r7
  409152:	4680      	mov	r8, r0
  409154:	4689      	mov	r9, r1
  409156:	f002 ff65 	bl	40c024 <__aeabi_dcmpgt>
  40915a:	4605      	mov	r5, r0
  40915c:	2800      	cmp	r0, #0
  40915e:	f040 809f 	bne.w	4092a0 <_dtoa_r+0x9d0>
  409162:	4632      	mov	r2, r6
  409164:	4640      	mov	r0, r8
  409166:	4649      	mov	r1, r9
  409168:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40916c:	f002 ff3c 	bl	40bfe8 <__aeabi_dcmplt>
  409170:	2800      	cmp	r0, #0
  409172:	d065      	beq.n	409240 <_dtoa_r+0x970>
  409174:	462f      	mov	r7, r5
  409176:	9508      	str	r5, [sp, #32]
  409178:	e4df      	b.n	408b3a <_dtoa_r+0x26a>
  40917a:	201c      	movs	r0, #28
  40917c:	e564      	b.n	408c48 <_dtoa_r+0x378>
  40917e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409180:	2b00      	cmp	r3, #0
  409182:	f040 814f 	bne.w	409424 <_dtoa_r+0xb54>
  409186:	f8dd a014 	ldr.w	sl, [sp, #20]
  40918a:	9e06      	ldr	r6, [sp, #24]
  40918c:	4655      	mov	r5, sl
  40918e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  409192:	e002      	b.n	40919a <_dtoa_r+0x8ca>
  409194:	f001 fbf2 	bl	40a97c <__multadd>
  409198:	4606      	mov	r6, r0
  40919a:	4639      	mov	r1, r7
  40919c:	4630      	mov	r0, r6
  40919e:	f7ff faf5 	bl	40878c <quorem>
  4091a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4091a6:	4631      	mov	r1, r6
  4091a8:	4620      	mov	r0, r4
  4091aa:	f805 9b01 	strb.w	r9, [r5], #1
  4091ae:	ebca 0e05 	rsb	lr, sl, r5
  4091b2:	220a      	movs	r2, #10
  4091b4:	2300      	movs	r3, #0
  4091b6:	45c6      	cmp	lr, r8
  4091b8:	dbec      	blt.n	409194 <_dtoa_r+0x8c4>
  4091ba:	9b05      	ldr	r3, [sp, #20]
  4091bc:	f04f 0a00 	mov.w	sl, #0
  4091c0:	9a04      	ldr	r2, [sp, #16]
  4091c2:	9606      	str	r6, [sp, #24]
  4091c4:	2a01      	cmp	r2, #1
  4091c6:	bfac      	ite	ge
  4091c8:	189b      	addge	r3, r3, r2
  4091ca:	3301      	addlt	r3, #1
  4091cc:	461d      	mov	r5, r3
  4091ce:	9906      	ldr	r1, [sp, #24]
  4091d0:	2201      	movs	r2, #1
  4091d2:	4620      	mov	r0, r4
  4091d4:	f001 fd64 	bl	40aca0 <__lshift>
  4091d8:	4639      	mov	r1, r7
  4091da:	9006      	str	r0, [sp, #24]
  4091dc:	f001 fdba 	bl	40ad54 <__mcmp>
  4091e0:	2800      	cmp	r0, #0
  4091e2:	f340 824e 	ble.w	409682 <_dtoa_r+0xdb2>
  4091e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4091ea:	1e6b      	subs	r3, r5, #1
  4091ec:	9905      	ldr	r1, [sp, #20]
  4091ee:	e004      	b.n	4091fa <_dtoa_r+0x92a>
  4091f0:	428b      	cmp	r3, r1
  4091f2:	f000 820b 	beq.w	40960c <_dtoa_r+0xd3c>
  4091f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4091fa:	2a39      	cmp	r2, #57	; 0x39
  4091fc:	f103 0501 	add.w	r5, r3, #1
  409200:	d0f6      	beq.n	4091f0 <_dtoa_r+0x920>
  409202:	3201      	adds	r2, #1
  409204:	701a      	strb	r2, [r3, #0]
  409206:	4639      	mov	r1, r7
  409208:	4620      	mov	r0, r4
  40920a:	f001 fbad 	bl	40a968 <_Bfree>
  40920e:	9b08      	ldr	r3, [sp, #32]
  409210:	2b00      	cmp	r3, #0
  409212:	f43f ad60 	beq.w	408cd6 <_dtoa_r+0x406>
  409216:	459a      	cmp	sl, r3
  409218:	f43f ad59 	beq.w	408cce <_dtoa_r+0x3fe>
  40921c:	f1ba 0f00 	cmp.w	sl, #0
  409220:	f43f ad55 	beq.w	408cce <_dtoa_r+0x3fe>
  409224:	4651      	mov	r1, sl
  409226:	4620      	mov	r0, r4
  409228:	f001 fb9e 	bl	40a968 <_Bfree>
  40922c:	e54f      	b.n	408cce <_dtoa_r+0x3fe>
  40922e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  409232:	f04f 0802 	mov.w	r8, #2
  409236:	e5eb      	b.n	408e10 <_dtoa_r+0x540>
  409238:	9805      	ldr	r0, [sp, #20]
  40923a:	f7ff bb7a 	b.w	408932 <_dtoa_r+0x62>
  40923e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409240:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  409244:	e452      	b.n	408aec <_dtoa_r+0x21c>
  409246:	9b02      	ldr	r3, [sp, #8]
  409248:	425d      	negs	r5, r3
  40924a:	2d00      	cmp	r5, #0
  40924c:	f000 81c1 	beq.w	4095d2 <_dtoa_r+0xd02>
  409250:	f005 020f 	and.w	r2, r5, #15
  409254:	4b4d      	ldr	r3, [pc, #308]	; (40938c <_dtoa_r+0xabc>)
  409256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40925a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40925e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409262:	f002 fc4f 	bl	40bb04 <__aeabi_dmul>
  409266:	112d      	asrs	r5, r5, #4
  409268:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40926c:	f000 8275 	beq.w	40975a <_dtoa_r+0xe8a>
  409270:	4e47      	ldr	r6, [pc, #284]	; (409390 <_dtoa_r+0xac0>)
  409272:	f04f 0802 	mov.w	r8, #2
  409276:	4602      	mov	r2, r0
  409278:	460b      	mov	r3, r1
  40927a:	07ef      	lsls	r7, r5, #31
  40927c:	4610      	mov	r0, r2
  40927e:	4619      	mov	r1, r3
  409280:	d507      	bpl.n	409292 <_dtoa_r+0x9c2>
  409282:	f108 0801 	add.w	r8, r8, #1
  409286:	e9d6 2300 	ldrd	r2, r3, [r6]
  40928a:	f002 fc3b 	bl	40bb04 <__aeabi_dmul>
  40928e:	4602      	mov	r2, r0
  409290:	460b      	mov	r3, r1
  409292:	106d      	asrs	r5, r5, #1
  409294:	f106 0608 	add.w	r6, r6, #8
  409298:	d1ef      	bne.n	40927a <_dtoa_r+0x9aa>
  40929a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40929e:	e5d2      	b.n	408e46 <_dtoa_r+0x576>
  4092a0:	2700      	movs	r7, #0
  4092a2:	9708      	str	r7, [sp, #32]
  4092a4:	e506      	b.n	408cb4 <_dtoa_r+0x3e4>
  4092a6:	f10c 3bff 	add.w	fp, ip, #4294967295
  4092aa:	4938      	ldr	r1, [pc, #224]	; (40938c <_dtoa_r+0xabc>)
  4092ac:	4632      	mov	r2, r6
  4092ae:	463b      	mov	r3, r7
  4092b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4092b4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  4092b8:	9f05      	ldr	r7, [sp, #20]
  4092ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  4092be:	f002 fc21 	bl	40bb04 <__aeabi_dmul>
  4092c2:	1c7d      	adds	r5, r7, #1
  4092c4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4092c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4092cc:	4649      	mov	r1, r9
  4092ce:	4640      	mov	r0, r8
  4092d0:	f002 feb2 	bl	40c038 <__aeabi_d2iz>
  4092d4:	4606      	mov	r6, r0
  4092d6:	f002 fbaf 	bl	40ba38 <__aeabi_i2d>
  4092da:	4602      	mov	r2, r0
  4092dc:	460b      	mov	r3, r1
  4092de:	4640      	mov	r0, r8
  4092e0:	4649      	mov	r1, r9
  4092e2:	3630      	adds	r6, #48	; 0x30
  4092e4:	f002 fa5a 	bl	40b79c <__aeabi_dsub>
  4092e8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  4092ec:	4680      	mov	r8, r0
  4092ee:	4689      	mov	r9, r1
  4092f0:	f1bc 0f01 	cmp.w	ip, #1
  4092f4:	703e      	strb	r6, [r7, #0]
  4092f6:	d020      	beq.n	40933a <_dtoa_r+0xa6a>
  4092f8:	9b05      	ldr	r3, [sp, #20]
  4092fa:	4640      	mov	r0, r8
  4092fc:	46aa      	mov	sl, r5
  4092fe:	46a8      	mov	r8, r5
  409300:	eb03 070c 	add.w	r7, r3, ip
  409304:	46b9      	mov	r9, r7
  409306:	2200      	movs	r2, #0
  409308:	4b1d      	ldr	r3, [pc, #116]	; (409380 <_dtoa_r+0xab0>)
  40930a:	f002 fbfb 	bl	40bb04 <__aeabi_dmul>
  40930e:	460f      	mov	r7, r1
  409310:	4606      	mov	r6, r0
  409312:	f002 fe91 	bl	40c038 <__aeabi_d2iz>
  409316:	4605      	mov	r5, r0
  409318:	f002 fb8e 	bl	40ba38 <__aeabi_i2d>
  40931c:	4602      	mov	r2, r0
  40931e:	460b      	mov	r3, r1
  409320:	3530      	adds	r5, #48	; 0x30
  409322:	4630      	mov	r0, r6
  409324:	4639      	mov	r1, r7
  409326:	f002 fa39 	bl	40b79c <__aeabi_dsub>
  40932a:	f80a 5b01 	strb.w	r5, [sl], #1
  40932e:	45ca      	cmp	sl, r9
  409330:	d1e9      	bne.n	409306 <_dtoa_r+0xa36>
  409332:	4645      	mov	r5, r8
  409334:	4689      	mov	r9, r1
  409336:	4680      	mov	r8, r0
  409338:	445d      	add	r5, fp
  40933a:	2200      	movs	r2, #0
  40933c:	4b15      	ldr	r3, [pc, #84]	; (409394 <_dtoa_r+0xac4>)
  40933e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409342:	f002 fa2d 	bl	40b7a0 <__adddf3>
  409346:	4642      	mov	r2, r8
  409348:	464b      	mov	r3, r9
  40934a:	f002 fe4d 	bl	40bfe8 <__aeabi_dcmplt>
  40934e:	2800      	cmp	r0, #0
  409350:	f47f aec7 	bne.w	4090e2 <_dtoa_r+0x812>
  409354:	2000      	movs	r0, #0
  409356:	490f      	ldr	r1, [pc, #60]	; (409394 <_dtoa_r+0xac4>)
  409358:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40935c:	f002 fa1e 	bl	40b79c <__aeabi_dsub>
  409360:	4642      	mov	r2, r8
  409362:	464b      	mov	r3, r9
  409364:	f002 fe5e 	bl	40c024 <__aeabi_dcmpgt>
  409368:	b908      	cbnz	r0, 40936e <_dtoa_r+0xa9e>
  40936a:	e769      	b.n	409240 <_dtoa_r+0x970>
  40936c:	4615      	mov	r5, r2
  40936e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409372:	1e6a      	subs	r2, r5, #1
  409374:	2b30      	cmp	r3, #48	; 0x30
  409376:	d0f9      	beq.n	40936c <_dtoa_r+0xa9c>
  409378:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40937a:	9302      	str	r3, [sp, #8]
  40937c:	e4ab      	b.n	408cd6 <_dtoa_r+0x406>
  40937e:	bf00      	nop
  409380:	40240000 	.word	0x40240000
  409384:	401c0000 	.word	0x401c0000
  409388:	40140000 	.word	0x40140000
  40938c:	0040d148 	.word	0x0040d148
  409390:	0040d220 	.word	0x0040d220
  409394:	3fe00000 	.word	0x3fe00000
  409398:	9806      	ldr	r0, [sp, #24]
  40939a:	4639      	mov	r1, r7
  40939c:	f001 fcda 	bl	40ad54 <__mcmp>
  4093a0:	2800      	cmp	r0, #0
  4093a2:	f6bf ac6e 	bge.w	408c82 <_dtoa_r+0x3b2>
  4093a6:	9e02      	ldr	r6, [sp, #8]
  4093a8:	2300      	movs	r3, #0
  4093aa:	9906      	ldr	r1, [sp, #24]
  4093ac:	4620      	mov	r0, r4
  4093ae:	3e01      	subs	r6, #1
  4093b0:	220a      	movs	r2, #10
  4093b2:	9602      	str	r6, [sp, #8]
  4093b4:	f001 fae2 	bl	40a97c <__multadd>
  4093b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4093ba:	9006      	str	r0, [sp, #24]
  4093bc:	bb1b      	cbnz	r3, 409406 <_dtoa_r+0xb36>
  4093be:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4093c0:	2b02      	cmp	r3, #2
  4093c2:	f340 81ce 	ble.w	409762 <_dtoa_r+0xe92>
  4093c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4093c8:	2b00      	cmp	r3, #0
  4093ca:	f300 81ca 	bgt.w	409762 <_dtoa_r+0xe92>
  4093ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4093d0:	9304      	str	r3, [sp, #16]
  4093d2:	e45e      	b.n	408c92 <_dtoa_r+0x3c2>
  4093d4:	f1ba 0f00 	cmp.w	sl, #0
  4093d8:	f47f ae9b 	bne.w	409112 <_dtoa_r+0x842>
  4093dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4093e0:	2b00      	cmp	r3, #0
  4093e2:	f47f ae96 	bne.w	409112 <_dtoa_r+0x842>
  4093e6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  4093ea:	0d36      	lsrs	r6, r6, #20
  4093ec:	0536      	lsls	r6, r6, #20
  4093ee:	2e00      	cmp	r6, #0
  4093f0:	f000 818a 	beq.w	409708 <_dtoa_r+0xe38>
  4093f4:	9b07      	ldr	r3, [sp, #28]
  4093f6:	f04f 0801 	mov.w	r8, #1
  4093fa:	3301      	adds	r3, #1
  4093fc:	9307      	str	r3, [sp, #28]
  4093fe:	9b03      	ldr	r3, [sp, #12]
  409400:	3301      	adds	r3, #1
  409402:	9303      	str	r3, [sp, #12]
  409404:	e687      	b.n	409116 <_dtoa_r+0x846>
  409406:	2300      	movs	r3, #0
  409408:	9908      	ldr	r1, [sp, #32]
  40940a:	4620      	mov	r0, r4
  40940c:	220a      	movs	r2, #10
  40940e:	f001 fab5 	bl	40a97c <__multadd>
  409412:	9b22      	ldr	r3, [sp, #136]	; 0x88
  409414:	9008      	str	r0, [sp, #32]
  409416:	2b02      	cmp	r3, #2
  409418:	dd02      	ble.n	409420 <_dtoa_r+0xb50>
  40941a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40941c:	2b00      	cmp	r3, #0
  40941e:	ddd6      	ble.n	4093ce <_dtoa_r+0xafe>
  409420:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409422:	9304      	str	r3, [sp, #16]
  409424:	2d00      	cmp	r5, #0
  409426:	dd05      	ble.n	409434 <_dtoa_r+0xb64>
  409428:	9908      	ldr	r1, [sp, #32]
  40942a:	462a      	mov	r2, r5
  40942c:	4620      	mov	r0, r4
  40942e:	f001 fc37 	bl	40aca0 <__lshift>
  409432:	9008      	str	r0, [sp, #32]
  409434:	f1b8 0f00 	cmp.w	r8, #0
  409438:	f040 8133 	bne.w	4096a2 <_dtoa_r+0xdd2>
  40943c:	9e08      	ldr	r6, [sp, #32]
  40943e:	f00a 0101 	and.w	r1, sl, #1
  409442:	9b04      	ldr	r3, [sp, #16]
  409444:	9a22      	ldr	r2, [sp, #136]	; 0x88
  409446:	3b01      	subs	r3, #1
  409448:	910b      	str	r1, [sp, #44]	; 0x2c
  40944a:	9905      	ldr	r1, [sp, #20]
  40944c:	fab2 f282 	clz	r2, r2
  409450:	970a      	str	r7, [sp, #40]	; 0x28
  409452:	18cb      	adds	r3, r1, r3
  409454:	4688      	mov	r8, r1
  409456:	f8dd b020 	ldr.w	fp, [sp, #32]
  40945a:	930c      	str	r3, [sp, #48]	; 0x30
  40945c:	0953      	lsrs	r3, r2, #5
  40945e:	9f06      	ldr	r7, [sp, #24]
  409460:	9303      	str	r3, [sp, #12]
  409462:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409464:	4638      	mov	r0, r7
  409466:	4629      	mov	r1, r5
  409468:	f7ff f990 	bl	40878c <quorem>
  40946c:	4659      	mov	r1, fp
  40946e:	4681      	mov	r9, r0
  409470:	4638      	mov	r0, r7
  409472:	f001 fc6f 	bl	40ad54 <__mcmp>
  409476:	4629      	mov	r1, r5
  409478:	4632      	mov	r2, r6
  40947a:	4682      	mov	sl, r0
  40947c:	4620      	mov	r0, r4
  40947e:	f001 fc8d 	bl	40ad9c <__mdiff>
  409482:	68c2      	ldr	r2, [r0, #12]
  409484:	4605      	mov	r5, r0
  409486:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  40948a:	9207      	str	r2, [sp, #28]
  40948c:	2a00      	cmp	r2, #0
  40948e:	d150      	bne.n	409532 <_dtoa_r+0xc62>
  409490:	4629      	mov	r1, r5
  409492:	4638      	mov	r0, r7
  409494:	f8cd c018 	str.w	ip, [sp, #24]
  409498:	f001 fc5c 	bl	40ad54 <__mcmp>
  40949c:	4629      	mov	r1, r5
  40949e:	9004      	str	r0, [sp, #16]
  4094a0:	4620      	mov	r0, r4
  4094a2:	f001 fa61 	bl	40a968 <_Bfree>
  4094a6:	9a03      	ldr	r2, [sp, #12]
  4094a8:	9b04      	ldr	r3, [sp, #16]
  4094aa:	f8dd c018 	ldr.w	ip, [sp, #24]
  4094ae:	b132      	cbz	r2, 4094be <_dtoa_r+0xbee>
  4094b0:	b92b      	cbnz	r3, 4094be <_dtoa_r+0xbee>
  4094b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4094b4:	9a07      	ldr	r2, [sp, #28]
  4094b6:	2b00      	cmp	r3, #0
  4094b8:	f000 8128 	beq.w	40970c <_dtoa_r+0xe3c>
  4094bc:	4613      	mov	r3, r2
  4094be:	f1ba 0f00 	cmp.w	sl, #0
  4094c2:	f2c0 80bc 	blt.w	40963e <_dtoa_r+0xd6e>
  4094c6:	9a03      	ldr	r2, [sp, #12]
  4094c8:	b132      	cbz	r2, 4094d8 <_dtoa_r+0xc08>
  4094ca:	f1ba 0f00 	cmp.w	sl, #0
  4094ce:	d103      	bne.n	4094d8 <_dtoa_r+0xc08>
  4094d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4094d2:	2a00      	cmp	r2, #0
  4094d4:	f000 80b3 	beq.w	40963e <_dtoa_r+0xd6e>
  4094d8:	2b00      	cmp	r3, #0
  4094da:	f300 80fe 	bgt.w	4096da <_dtoa_r+0xe0a>
  4094de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4094e0:	f108 0901 	add.w	r9, r8, #1
  4094e4:	f888 c000 	strb.w	ip, [r8]
  4094e8:	4598      	cmp	r8, r3
  4094ea:	464d      	mov	r5, r9
  4094ec:	f000 8106 	beq.w	4096fc <_dtoa_r+0xe2c>
  4094f0:	4639      	mov	r1, r7
  4094f2:	220a      	movs	r2, #10
  4094f4:	2300      	movs	r3, #0
  4094f6:	4620      	mov	r0, r4
  4094f8:	f001 fa40 	bl	40a97c <__multadd>
  4094fc:	45b3      	cmp	fp, r6
  4094fe:	4607      	mov	r7, r0
  409500:	4659      	mov	r1, fp
  409502:	4620      	mov	r0, r4
  409504:	f04f 020a 	mov.w	r2, #10
  409508:	f04f 0300 	mov.w	r3, #0
  40950c:	d00b      	beq.n	409526 <_dtoa_r+0xc56>
  40950e:	f001 fa35 	bl	40a97c <__multadd>
  409512:	4631      	mov	r1, r6
  409514:	4683      	mov	fp, r0
  409516:	220a      	movs	r2, #10
  409518:	4620      	mov	r0, r4
  40951a:	2300      	movs	r3, #0
  40951c:	f001 fa2e 	bl	40a97c <__multadd>
  409520:	46c8      	mov	r8, r9
  409522:	4606      	mov	r6, r0
  409524:	e79d      	b.n	409462 <_dtoa_r+0xb92>
  409526:	f001 fa29 	bl	40a97c <__multadd>
  40952a:	46c8      	mov	r8, r9
  40952c:	4683      	mov	fp, r0
  40952e:	4606      	mov	r6, r0
  409530:	e797      	b.n	409462 <_dtoa_r+0xb92>
  409532:	4601      	mov	r1, r0
  409534:	4620      	mov	r0, r4
  409536:	f8cd c010 	str.w	ip, [sp, #16]
  40953a:	f001 fa15 	bl	40a968 <_Bfree>
  40953e:	2301      	movs	r3, #1
  409540:	f8dd c010 	ldr.w	ip, [sp, #16]
  409544:	e7bb      	b.n	4094be <_dtoa_r+0xbee>
  409546:	2b0e      	cmp	r3, #14
  409548:	bf8c      	ite	hi
  40954a:	2300      	movhi	r3, #0
  40954c:	2301      	movls	r3, #1
  40954e:	2100      	movs	r1, #0
  409550:	401d      	ands	r5, r3
  409552:	6461      	str	r1, [r4, #68]	; 0x44
  409554:	e436      	b.n	408dc4 <_dtoa_r+0x4f4>
  409556:	2301      	movs	r3, #1
  409558:	9323      	str	r3, [sp, #140]	; 0x8c
  40955a:	9310      	str	r3, [sp, #64]	; 0x40
  40955c:	9304      	str	r3, [sp, #16]
  40955e:	e7f6      	b.n	40954e <_dtoa_r+0xc7e>
  409560:	9906      	ldr	r1, [sp, #24]
  409562:	4620      	mov	r0, r4
  409564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409566:	f001 fb4b 	bl	40ac00 <__pow5mult>
  40956a:	9006      	str	r0, [sp, #24]
  40956c:	f7ff bb42 	b.w	408bf4 <_dtoa_r+0x324>
  409570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409574:	1af3      	subs	r3, r6, r3
  409576:	960a      	str	r6, [sp, #40]	; 0x28
  409578:	2600      	movs	r6, #0
  40957a:	441a      	add	r2, r3
  40957c:	920c      	str	r2, [sp, #48]	; 0x30
  40957e:	f7ff bbf3 	b.w	408d68 <_dtoa_r+0x498>
  409582:	9b04      	ldr	r3, [sp, #16]
  409584:	2b00      	cmp	r3, #0
  409586:	f43f adcc 	beq.w	409122 <_dtoa_r+0x852>
  40958a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40958c:	2d00      	cmp	r5, #0
  40958e:	f77f ae57 	ble.w	409240 <_dtoa_r+0x970>
  409592:	2200      	movs	r2, #0
  409594:	4b86      	ldr	r3, [pc, #536]	; (4097b0 <_dtoa_r+0xee0>)
  409596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40959a:	f002 fab3 	bl	40bb04 <__aeabi_dmul>
  40959e:	9b02      	ldr	r3, [sp, #8]
  4095a0:	4606      	mov	r6, r0
  4095a2:	460f      	mov	r7, r1
  4095a4:	3b01      	subs	r3, #1
  4095a6:	f108 0001 	add.w	r0, r8, #1
  4095aa:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4095ae:	9314      	str	r3, [sp, #80]	; 0x50
  4095b0:	f002 fa42 	bl	40ba38 <__aeabi_i2d>
  4095b4:	4602      	mov	r2, r0
  4095b6:	460b      	mov	r3, r1
  4095b8:	4630      	mov	r0, r6
  4095ba:	4639      	mov	r1, r7
  4095bc:	f002 faa2 	bl	40bb04 <__aeabi_dmul>
  4095c0:	2200      	movs	r2, #0
  4095c2:	4b7c      	ldr	r3, [pc, #496]	; (4097b4 <_dtoa_r+0xee4>)
  4095c4:	f002 f8ec 	bl	40b7a0 <__adddf3>
  4095c8:	46ac      	mov	ip, r5
  4095ca:	4606      	mov	r6, r0
  4095cc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4095d0:	e45a      	b.n	408e88 <_dtoa_r+0x5b8>
  4095d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4095d6:	f04f 0802 	mov.w	r8, #2
  4095da:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4095de:	e432      	b.n	408e46 <_dtoa_r+0x576>
  4095e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4095e2:	2130      	movs	r1, #48	; 0x30
  4095e4:	3301      	adds	r3, #1
  4095e6:	7011      	strb	r1, [r2, #0]
  4095e8:	9302      	str	r3, [sp, #8]
  4095ea:	2331      	movs	r3, #49	; 0x31
  4095ec:	7013      	strb	r3, [r2, #0]
  4095ee:	f7ff bb72 	b.w	408cd6 <_dtoa_r+0x406>
  4095f2:	9906      	ldr	r1, [sp, #24]
  4095f4:	4620      	mov	r0, r4
  4095f6:	f001 fb03 	bl	40ac00 <__pow5mult>
  4095fa:	9006      	str	r0, [sp, #24]
  4095fc:	f7ff bafa 	b.w	408bf4 <_dtoa_r+0x324>
  409600:	f1ba 0f00 	cmp.w	sl, #0
  409604:	f43f aeea 	beq.w	4093dc <_dtoa_r+0xb0c>
  409608:	f7ff bb07 	b.w	408c1a <_dtoa_r+0x34a>
  40960c:	9a02      	ldr	r2, [sp, #8]
  40960e:	2331      	movs	r3, #49	; 0x31
  409610:	3201      	adds	r2, #1
  409612:	9202      	str	r2, [sp, #8]
  409614:	9a05      	ldr	r2, [sp, #20]
  409616:	7013      	strb	r3, [r2, #0]
  409618:	e5f5      	b.n	409206 <_dtoa_r+0x936>
  40961a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40961c:	2a00      	cmp	r2, #0
  40961e:	d055      	beq.n	4096cc <_dtoa_r+0xdfc>
  409620:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409624:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409626:	9d07      	ldr	r5, [sp, #28]
  409628:	f7ff bba4 	b.w	408d74 <_dtoa_r+0x4a4>
  40962c:	9c03      	ldr	r4, [sp, #12]
  40962e:	f7ff bb52 	b.w	408cd6 <_dtoa_r+0x406>
  409632:	9b07      	ldr	r3, [sp, #28]
  409634:	9a04      	ldr	r2, [sp, #16]
  409636:	1a9d      	subs	r5, r3, r2
  409638:	2300      	movs	r3, #0
  40963a:	f7ff bb9b 	b.w	408d74 <_dtoa_r+0x4a4>
  40963e:	2b00      	cmp	r3, #0
  409640:	9706      	str	r7, [sp, #24]
  409642:	46e1      	mov	r9, ip
  409644:	f8cd b020 	str.w	fp, [sp, #32]
  409648:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40964a:	4665      	mov	r5, ip
  40964c:	dd0f      	ble.n	40966e <_dtoa_r+0xd9e>
  40964e:	9906      	ldr	r1, [sp, #24]
  409650:	2201      	movs	r2, #1
  409652:	4620      	mov	r0, r4
  409654:	f001 fb24 	bl	40aca0 <__lshift>
  409658:	4639      	mov	r1, r7
  40965a:	9006      	str	r0, [sp, #24]
  40965c:	f001 fb7a 	bl	40ad54 <__mcmp>
  409660:	2800      	cmp	r0, #0
  409662:	dd75      	ble.n	409750 <_dtoa_r+0xe80>
  409664:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  409668:	d066      	beq.n	409738 <_dtoa_r+0xe68>
  40966a:	f109 0501 	add.w	r5, r9, #1
  40966e:	f8dd a020 	ldr.w	sl, [sp, #32]
  409672:	f888 5000 	strb.w	r5, [r8]
  409676:	f108 0501 	add.w	r5, r8, #1
  40967a:	9608      	str	r6, [sp, #32]
  40967c:	e5c3      	b.n	409206 <_dtoa_r+0x936>
  40967e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  409680:	e531      	b.n	4090e6 <_dtoa_r+0x816>
  409682:	d104      	bne.n	40968e <_dtoa_r+0xdbe>
  409684:	f019 0f01 	tst.w	r9, #1
  409688:	d001      	beq.n	40968e <_dtoa_r+0xdbe>
  40968a:	e5ac      	b.n	4091e6 <_dtoa_r+0x916>
  40968c:	4615      	mov	r5, r2
  40968e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409692:	1e6a      	subs	r2, r5, #1
  409694:	2b30      	cmp	r3, #48	; 0x30
  409696:	d0f9      	beq.n	40968c <_dtoa_r+0xdbc>
  409698:	e5b5      	b.n	409206 <_dtoa_r+0x936>
  40969a:	2700      	movs	r7, #0
  40969c:	9708      	str	r7, [sp, #32]
  40969e:	f7ff ba4c 	b.w	408b3a <_dtoa_r+0x26a>
  4096a2:	9e08      	ldr	r6, [sp, #32]
  4096a4:	4620      	mov	r0, r4
  4096a6:	6871      	ldr	r1, [r6, #4]
  4096a8:	f001 f936 	bl	40a918 <_Balloc>
  4096ac:	6933      	ldr	r3, [r6, #16]
  4096ae:	4605      	mov	r5, r0
  4096b0:	f106 010c 	add.w	r1, r6, #12
  4096b4:	1c9a      	adds	r2, r3, #2
  4096b6:	300c      	adds	r0, #12
  4096b8:	0092      	lsls	r2, r2, #2
  4096ba:	f001 f82d 	bl	40a718 <memcpy>
  4096be:	4620      	mov	r0, r4
  4096c0:	4629      	mov	r1, r5
  4096c2:	2201      	movs	r2, #1
  4096c4:	f001 faec 	bl	40aca0 <__lshift>
  4096c8:	4606      	mov	r6, r0
  4096ca:	e6b8      	b.n	40943e <_dtoa_r+0xb6e>
  4096cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4096ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4096d0:	9d07      	ldr	r5, [sp, #28]
  4096d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4096d6:	f7ff bb4d 	b.w	408d74 <_dtoa_r+0x4a4>
  4096da:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4096de:	9706      	str	r7, [sp, #24]
  4096e0:	f8cd b020 	str.w	fp, [sp, #32]
  4096e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4096e6:	d030      	beq.n	40974a <_dtoa_r+0xe7a>
  4096e8:	f10c 0901 	add.w	r9, ip, #1
  4096ec:	f8dd a020 	ldr.w	sl, [sp, #32]
  4096f0:	f108 0501 	add.w	r5, r8, #1
  4096f4:	9608      	str	r6, [sp, #32]
  4096f6:	f888 9000 	strb.w	r9, [r8]
  4096fa:	e584      	b.n	409206 <_dtoa_r+0x936>
  4096fc:	9706      	str	r7, [sp, #24]
  4096fe:	46e1      	mov	r9, ip
  409700:	46da      	mov	sl, fp
  409702:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409704:	9608      	str	r6, [sp, #32]
  409706:	e562      	b.n	4091ce <_dtoa_r+0x8fe>
  409708:	46b0      	mov	r8, r6
  40970a:	e504      	b.n	409116 <_dtoa_r+0x846>
  40970c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  409710:	9706      	str	r7, [sp, #24]
  409712:	f8cd b020 	str.w	fp, [sp, #32]
  409716:	4655      	mov	r5, sl
  409718:	46cb      	mov	fp, r9
  40971a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40971c:	46e1      	mov	r9, ip
  40971e:	d00b      	beq.n	409738 <_dtoa_r+0xe68>
  409720:	2d00      	cmp	r5, #0
  409722:	dd01      	ble.n	409728 <_dtoa_r+0xe58>
  409724:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  409728:	f8dd a020 	ldr.w	sl, [sp, #32]
  40972c:	f108 0501 	add.w	r5, r8, #1
  409730:	f888 9000 	strb.w	r9, [r8]
  409734:	9608      	str	r6, [sp, #32]
  409736:	e566      	b.n	409206 <_dtoa_r+0x936>
  409738:	f8dd a020 	ldr.w	sl, [sp, #32]
  40973c:	9608      	str	r6, [sp, #32]
  40973e:	2239      	movs	r2, #57	; 0x39
  409740:	f108 0501 	add.w	r5, r8, #1
  409744:	f888 2000 	strb.w	r2, [r8]
  409748:	e54f      	b.n	4091ea <_dtoa_r+0x91a>
  40974a:	46da      	mov	sl, fp
  40974c:	9608      	str	r6, [sp, #32]
  40974e:	e7f6      	b.n	40973e <_dtoa_r+0xe6e>
  409750:	d18d      	bne.n	40966e <_dtoa_r+0xd9e>
  409752:	f019 0f01 	tst.w	r9, #1
  409756:	d08a      	beq.n	40966e <_dtoa_r+0xd9e>
  409758:	e784      	b.n	409664 <_dtoa_r+0xd94>
  40975a:	f04f 0802 	mov.w	r8, #2
  40975e:	f7ff bb72 	b.w	408e46 <_dtoa_r+0x576>
  409762:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409764:	9304      	str	r3, [sp, #16]
  409766:	e50e      	b.n	409186 <_dtoa_r+0x8b6>
  409768:	f43f aa75 	beq.w	408c56 <_dtoa_r+0x386>
  40976c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409770:	f7ff ba6a 	b.w	408c48 <_dtoa_r+0x378>
  409774:	2501      	movs	r5, #1
  409776:	f7ff b982 	b.w	408a7e <_dtoa_r+0x1ae>
  40977a:	2500      	movs	r5, #0
  40977c:	4620      	mov	r0, r4
  40977e:	6465      	str	r5, [r4, #68]	; 0x44
  409780:	4629      	mov	r1, r5
  409782:	f001 f8c9 	bl	40a918 <_Balloc>
  409786:	9a02      	ldr	r2, [sp, #8]
  409788:	9005      	str	r0, [sp, #20]
  40978a:	2a0e      	cmp	r2, #14
  40978c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40978e:	6420      	str	r0, [r4, #64]	; 0x40
  409790:	f73f aad7 	bgt.w	408d42 <_dtoa_r+0x472>
  409794:	42ab      	cmp	r3, r5
  409796:	f6ff aad4 	blt.w	408d42 <_dtoa_r+0x472>
  40979a:	f04f 33ff 	mov.w	r3, #4294967295
  40979e:	9523      	str	r5, [sp, #140]	; 0x8c
  4097a0:	9304      	str	r3, [sp, #16]
  4097a2:	f7ff b9a9 	b.w	408af8 <_dtoa_r+0x228>
  4097a6:	2301      	movs	r3, #1
  4097a8:	930b      	str	r3, [sp, #44]	; 0x2c
  4097aa:	f7ff bbfa 	b.w	408fa2 <_dtoa_r+0x6d2>
  4097ae:	bf00      	nop
  4097b0:	40240000 	.word	0x40240000
  4097b4:	401c0000 	.word	0x401c0000

004097b8 <__sflush_r>:
  4097b8:	898b      	ldrh	r3, [r1, #12]
  4097ba:	b29a      	uxth	r2, r3
  4097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097c0:	460d      	mov	r5, r1
  4097c2:	0711      	lsls	r1, r2, #28
  4097c4:	4680      	mov	r8, r0
  4097c6:	d43c      	bmi.n	409842 <__sflush_r+0x8a>
  4097c8:	686a      	ldr	r2, [r5, #4]
  4097ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4097ce:	2a00      	cmp	r2, #0
  4097d0:	81ab      	strh	r3, [r5, #12]
  4097d2:	dd76      	ble.n	4098c2 <__sflush_r+0x10a>
  4097d4:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4097d6:	2e00      	cmp	r6, #0
  4097d8:	d04b      	beq.n	409872 <__sflush_r+0xba>
  4097da:	b29b      	uxth	r3, r3
  4097dc:	2100      	movs	r1, #0
  4097de:	f8d8 4000 	ldr.w	r4, [r8]
  4097e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4097e6:	f8c8 1000 	str.w	r1, [r8]
  4097ea:	b292      	uxth	r2, r2
  4097ec:	2a00      	cmp	r2, #0
  4097ee:	d06c      	beq.n	4098ca <__sflush_r+0x112>
  4097f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4097f2:	075f      	lsls	r7, r3, #29
  4097f4:	d505      	bpl.n	409802 <__sflush_r+0x4a>
  4097f6:	6869      	ldr	r1, [r5, #4]
  4097f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4097fa:	1a52      	subs	r2, r2, r1
  4097fc:	b10b      	cbz	r3, 409802 <__sflush_r+0x4a>
  4097fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409800:	1ad2      	subs	r2, r2, r3
  409802:	4640      	mov	r0, r8
  409804:	69e9      	ldr	r1, [r5, #28]
  409806:	2300      	movs	r3, #0
  409808:	47b0      	blx	r6
  40980a:	1c46      	adds	r6, r0, #1
  40980c:	d03e      	beq.n	40988c <__sflush_r+0xd4>
  40980e:	89ab      	ldrh	r3, [r5, #12]
  409810:	2100      	movs	r1, #0
  409812:	692a      	ldr	r2, [r5, #16]
  409814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409818:	6069      	str	r1, [r5, #4]
  40981a:	602a      	str	r2, [r5, #0]
  40981c:	b29b      	uxth	r3, r3
  40981e:	04da      	lsls	r2, r3, #19
  409820:	81ab      	strh	r3, [r5, #12]
  409822:	d44c      	bmi.n	4098be <__sflush_r+0x106>
  409824:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409826:	f8c8 4000 	str.w	r4, [r8]
  40982a:	b311      	cbz	r1, 409872 <__sflush_r+0xba>
  40982c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409830:	4299      	cmp	r1, r3
  409832:	d002      	beq.n	40983a <__sflush_r+0x82>
  409834:	4640      	mov	r0, r8
  409836:	f000 f96b 	bl	409b10 <_free_r>
  40983a:	2000      	movs	r0, #0
  40983c:	6328      	str	r0, [r5, #48]	; 0x30
  40983e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409842:	692e      	ldr	r6, [r5, #16]
  409844:	b1ae      	cbz	r6, 409872 <__sflush_r+0xba>
  409846:	682c      	ldr	r4, [r5, #0]
  409848:	0791      	lsls	r1, r2, #30
  40984a:	602e      	str	r6, [r5, #0]
  40984c:	eba4 0406 	sub.w	r4, r4, r6
  409850:	d11a      	bne.n	409888 <__sflush_r+0xd0>
  409852:	696b      	ldr	r3, [r5, #20]
  409854:	60ab      	str	r3, [r5, #8]
  409856:	e00a      	b.n	40986e <__sflush_r+0xb6>
  409858:	4632      	mov	r2, r6
  40985a:	4623      	mov	r3, r4
  40985c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40985e:	4640      	mov	r0, r8
  409860:	69e9      	ldr	r1, [r5, #28]
  409862:	47b8      	blx	r7
  409864:	2800      	cmp	r0, #0
  409866:	eba4 0400 	sub.w	r4, r4, r0
  40986a:	4406      	add	r6, r0
  40986c:	dd04      	ble.n	409878 <__sflush_r+0xc0>
  40986e:	2c00      	cmp	r4, #0
  409870:	dcf2      	bgt.n	409858 <__sflush_r+0xa0>
  409872:	2000      	movs	r0, #0
  409874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409878:	89ab      	ldrh	r3, [r5, #12]
  40987a:	f04f 30ff 	mov.w	r0, #4294967295
  40987e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409882:	81ab      	strh	r3, [r5, #12]
  409884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409888:	2300      	movs	r3, #0
  40988a:	e7e3      	b.n	409854 <__sflush_r+0x9c>
  40988c:	f8d8 3000 	ldr.w	r3, [r8]
  409890:	fab3 f283 	clz	r2, r3
  409894:	2b00      	cmp	r3, #0
  409896:	bf18      	it	ne
  409898:	2b1d      	cmpne	r3, #29
  40989a:	ea4f 1252 	mov.w	r2, r2, lsr #5
  40989e:	d001      	beq.n	4098a4 <__sflush_r+0xec>
  4098a0:	2b16      	cmp	r3, #22
  4098a2:	d127      	bne.n	4098f4 <__sflush_r+0x13c>
  4098a4:	89ab      	ldrh	r3, [r5, #12]
  4098a6:	2600      	movs	r6, #0
  4098a8:	6929      	ldr	r1, [r5, #16]
  4098aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4098ae:	b29b      	uxth	r3, r3
  4098b0:	81ab      	strh	r3, [r5, #12]
  4098b2:	04db      	lsls	r3, r3, #19
  4098b4:	e885 0042 	stmia.w	r5, {r1, r6}
  4098b8:	d5b4      	bpl.n	409824 <__sflush_r+0x6c>
  4098ba:	2a00      	cmp	r2, #0
  4098bc:	d0b2      	beq.n	409824 <__sflush_r+0x6c>
  4098be:	6528      	str	r0, [r5, #80]	; 0x50
  4098c0:	e7b0      	b.n	409824 <__sflush_r+0x6c>
  4098c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4098c4:	2a00      	cmp	r2, #0
  4098c6:	dc85      	bgt.n	4097d4 <__sflush_r+0x1c>
  4098c8:	e7d3      	b.n	409872 <__sflush_r+0xba>
  4098ca:	2301      	movs	r3, #1
  4098cc:	4640      	mov	r0, r8
  4098ce:	69e9      	ldr	r1, [r5, #28]
  4098d0:	47b0      	blx	r6
  4098d2:	1c43      	adds	r3, r0, #1
  4098d4:	4602      	mov	r2, r0
  4098d6:	d002      	beq.n	4098de <__sflush_r+0x126>
  4098d8:	89ab      	ldrh	r3, [r5, #12]
  4098da:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4098dc:	e789      	b.n	4097f2 <__sflush_r+0x3a>
  4098de:	f8d8 3000 	ldr.w	r3, [r8]
  4098e2:	2b00      	cmp	r3, #0
  4098e4:	d0f8      	beq.n	4098d8 <__sflush_r+0x120>
  4098e6:	2b16      	cmp	r3, #22
  4098e8:	d001      	beq.n	4098ee <__sflush_r+0x136>
  4098ea:	2b1d      	cmp	r3, #29
  4098ec:	d1c4      	bne.n	409878 <__sflush_r+0xc0>
  4098ee:	f8c8 4000 	str.w	r4, [r8]
  4098f2:	e7be      	b.n	409872 <__sflush_r+0xba>
  4098f4:	89ab      	ldrh	r3, [r5, #12]
  4098f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4098fa:	81ab      	strh	r3, [r5, #12]
  4098fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409900 <_fflush_r>:
  409900:	b510      	push	{r4, lr}
  409902:	4604      	mov	r4, r0
  409904:	b082      	sub	sp, #8
  409906:	b108      	cbz	r0, 40990c <_fflush_r+0xc>
  409908:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40990a:	b153      	cbz	r3, 409922 <_fflush_r+0x22>
  40990c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  409910:	b908      	cbnz	r0, 409916 <_fflush_r+0x16>
  409912:	b002      	add	sp, #8
  409914:	bd10      	pop	{r4, pc}
  409916:	4620      	mov	r0, r4
  409918:	b002      	add	sp, #8
  40991a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40991e:	f7ff bf4b 	b.w	4097b8 <__sflush_r>
  409922:	9101      	str	r1, [sp, #4]
  409924:	f000 f886 	bl	409a34 <__sinit>
  409928:	9901      	ldr	r1, [sp, #4]
  40992a:	e7ef      	b.n	40990c <_fflush_r+0xc>

0040992c <_cleanup_r>:
  40992c:	4901      	ldr	r1, [pc, #4]	; (409934 <_cleanup_r+0x8>)
  40992e:	f000 bb59 	b.w	409fe4 <_fwalk_reent>
  409932:	bf00      	nop
  409934:	0040b675 	.word	0x0040b675

00409938 <__sinit.part.1>:
  409938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40993c:	4682      	mov	sl, r0
  40993e:	2400      	movs	r4, #0
  409940:	4837      	ldr	r0, [pc, #220]	; (409a20 <__sinit.part.1+0xe8>)
  409942:	2103      	movs	r1, #3
  409944:	f8da 5004 	ldr.w	r5, [sl, #4]
  409948:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40994c:	2604      	movs	r6, #4
  40994e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  409952:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  409956:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40995a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  40995e:	4621      	mov	r1, r4
  409960:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  409964:	2208      	movs	r2, #8
  409966:	81ae      	strh	r6, [r5, #12]
  409968:	602c      	str	r4, [r5, #0]
  40996a:	606c      	str	r4, [r5, #4]
  40996c:	60ac      	str	r4, [r5, #8]
  40996e:	666c      	str	r4, [r5, #100]	; 0x64
  409970:	81ec      	strh	r4, [r5, #14]
  409972:	612c      	str	r4, [r5, #16]
  409974:	616c      	str	r4, [r5, #20]
  409976:	61ac      	str	r4, [r5, #24]
  409978:	f7fd fa24 	bl	406dc4 <memset>
  40997c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 409a28 <__sinit.part.1+0xf0>
  409980:	f8da 6008 	ldr.w	r6, [sl, #8]
  409984:	f04f 0301 	mov.w	r3, #1
  409988:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 409a2c <__sinit.part.1+0xf4>
  40998c:	f04f 0e09 	mov.w	lr, #9
  409990:	f8df 809c 	ldr.w	r8, [pc, #156]	; 409a30 <__sinit.part.1+0xf8>
  409994:	4621      	mov	r1, r4
  409996:	4f23      	ldr	r7, [pc, #140]	; (409a24 <__sinit.part.1+0xec>)
  409998:	2208      	movs	r2, #8
  40999a:	61ed      	str	r5, [r5, #28]
  40999c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4099a0:	f8c5 b020 	str.w	fp, [r5, #32]
  4099a4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4099a8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4099ac:	62ef      	str	r7, [r5, #44]	; 0x2c
  4099ae:	81f3      	strh	r3, [r6, #14]
  4099b0:	f8a6 e00c 	strh.w	lr, [r6, #12]
  4099b4:	6034      	str	r4, [r6, #0]
  4099b6:	6074      	str	r4, [r6, #4]
  4099b8:	60b4      	str	r4, [r6, #8]
  4099ba:	6674      	str	r4, [r6, #100]	; 0x64
  4099bc:	6134      	str	r4, [r6, #16]
  4099be:	6174      	str	r4, [r6, #20]
  4099c0:	61b4      	str	r4, [r6, #24]
  4099c2:	f7fd f9ff 	bl	406dc4 <memset>
  4099c6:	f8da 500c 	ldr.w	r5, [sl, #12]
  4099ca:	f04f 0c12 	mov.w	ip, #18
  4099ce:	f04f 0e02 	mov.w	lr, #2
  4099d2:	61f6      	str	r6, [r6, #28]
  4099d4:	4621      	mov	r1, r4
  4099d6:	f8c6 b020 	str.w	fp, [r6, #32]
  4099da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4099de:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  4099e2:	2208      	movs	r2, #8
  4099e4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  4099e8:	62f7      	str	r7, [r6, #44]	; 0x2c
  4099ea:	602c      	str	r4, [r5, #0]
  4099ec:	606c      	str	r4, [r5, #4]
  4099ee:	60ac      	str	r4, [r5, #8]
  4099f0:	666c      	str	r4, [r5, #100]	; 0x64
  4099f2:	612c      	str	r4, [r5, #16]
  4099f4:	616c      	str	r4, [r5, #20]
  4099f6:	61ac      	str	r4, [r5, #24]
  4099f8:	f8a5 c00c 	strh.w	ip, [r5, #12]
  4099fc:	f8a5 e00e 	strh.w	lr, [r5, #14]
  409a00:	f7fd f9e0 	bl	406dc4 <memset>
  409a04:	2301      	movs	r3, #1
  409a06:	61ed      	str	r5, [r5, #28]
  409a08:	f8c5 b020 	str.w	fp, [r5, #32]
  409a0c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  409a10:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  409a14:	62ef      	str	r7, [r5, #44]	; 0x2c
  409a16:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  409a1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a1e:	bf00      	nop
  409a20:	0040992d 	.word	0x0040992d
  409a24:	0040b409 	.word	0x0040b409
  409a28:	0040b389 	.word	0x0040b389
  409a2c:	0040b3ad 	.word	0x0040b3ad
  409a30:	0040b3e5 	.word	0x0040b3e5

00409a34 <__sinit>:
  409a34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409a36:	b103      	cbz	r3, 409a3a <__sinit+0x6>
  409a38:	4770      	bx	lr
  409a3a:	f7ff bf7d 	b.w	409938 <__sinit.part.1>
  409a3e:	bf00      	nop

00409a40 <__sfp_lock_acquire>:
  409a40:	4770      	bx	lr
  409a42:	bf00      	nop

00409a44 <__sfp_lock_release>:
  409a44:	4770      	bx	lr
  409a46:	bf00      	nop

00409a48 <__libc_fini_array>:
  409a48:	b538      	push	{r3, r4, r5, lr}
  409a4a:	4b08      	ldr	r3, [pc, #32]	; (409a6c <__libc_fini_array+0x24>)
  409a4c:	4d08      	ldr	r5, [pc, #32]	; (409a70 <__libc_fini_array+0x28>)
  409a4e:	1aed      	subs	r5, r5, r3
  409a50:	10ac      	asrs	r4, r5, #2
  409a52:	bf18      	it	ne
  409a54:	18ed      	addne	r5, r5, r3
  409a56:	d005      	beq.n	409a64 <__libc_fini_array+0x1c>
  409a58:	3c01      	subs	r4, #1
  409a5a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  409a5e:	4798      	blx	r3
  409a60:	2c00      	cmp	r4, #0
  409a62:	d1f9      	bne.n	409a58 <__libc_fini_array+0x10>
  409a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409a68:	f003 bbf8 	b.w	40d25c <_fini>
  409a6c:	0040d268 	.word	0x0040d268
  409a70:	0040d26c 	.word	0x0040d26c

00409a74 <_malloc_trim_r>:
  409a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409a76:	4f22      	ldr	r7, [pc, #136]	; (409b00 <_malloc_trim_r+0x8c>)
  409a78:	460c      	mov	r4, r1
  409a7a:	4606      	mov	r6, r0
  409a7c:	f000 ff48 	bl	40a910 <__malloc_lock>
  409a80:	68ba      	ldr	r2, [r7, #8]
  409a82:	4b20      	ldr	r3, [pc, #128]	; (409b04 <_malloc_trim_r+0x90>)
  409a84:	6855      	ldr	r5, [r2, #4]
  409a86:	f025 0503 	bic.w	r5, r5, #3
  409a8a:	1b2c      	subs	r4, r5, r4
  409a8c:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  409a90:	4023      	ands	r3, r4
  409a92:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  409a96:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  409a9a:	db07      	blt.n	409aac <_malloc_trim_r+0x38>
  409a9c:	4630      	mov	r0, r6
  409a9e:	2100      	movs	r1, #0
  409aa0:	f001 fc60 	bl	40b364 <_sbrk_r>
  409aa4:	68bb      	ldr	r3, [r7, #8]
  409aa6:	442b      	add	r3, r5
  409aa8:	4298      	cmp	r0, r3
  409aaa:	d004      	beq.n	409ab6 <_malloc_trim_r+0x42>
  409aac:	4630      	mov	r0, r6
  409aae:	f000 ff31 	bl	40a914 <__malloc_unlock>
  409ab2:	2000      	movs	r0, #0
  409ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409ab6:	4630      	mov	r0, r6
  409ab8:	4261      	negs	r1, r4
  409aba:	f001 fc53 	bl	40b364 <_sbrk_r>
  409abe:	3001      	adds	r0, #1
  409ac0:	d00d      	beq.n	409ade <_malloc_trim_r+0x6a>
  409ac2:	4a11      	ldr	r2, [pc, #68]	; (409b08 <_malloc_trim_r+0x94>)
  409ac4:	1b2d      	subs	r5, r5, r4
  409ac6:	68b9      	ldr	r1, [r7, #8]
  409ac8:	4630      	mov	r0, r6
  409aca:	6813      	ldr	r3, [r2, #0]
  409acc:	f045 0501 	orr.w	r5, r5, #1
  409ad0:	1b1b      	subs	r3, r3, r4
  409ad2:	604d      	str	r5, [r1, #4]
  409ad4:	6013      	str	r3, [r2, #0]
  409ad6:	f000 ff1d 	bl	40a914 <__malloc_unlock>
  409ada:	2001      	movs	r0, #1
  409adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409ade:	4630      	mov	r0, r6
  409ae0:	2100      	movs	r1, #0
  409ae2:	f001 fc3f 	bl	40b364 <_sbrk_r>
  409ae6:	68ba      	ldr	r2, [r7, #8]
  409ae8:	1a83      	subs	r3, r0, r2
  409aea:	2b0f      	cmp	r3, #15
  409aec:	ddde      	ble.n	409aac <_malloc_trim_r+0x38>
  409aee:	4c07      	ldr	r4, [pc, #28]	; (409b0c <_malloc_trim_r+0x98>)
  409af0:	f043 0301 	orr.w	r3, r3, #1
  409af4:	4904      	ldr	r1, [pc, #16]	; (409b08 <_malloc_trim_r+0x94>)
  409af6:	6824      	ldr	r4, [r4, #0]
  409af8:	6053      	str	r3, [r2, #4]
  409afa:	1b00      	subs	r0, r0, r4
  409afc:	6008      	str	r0, [r1, #0]
  409afe:	e7d5      	b.n	409aac <_malloc_trim_r+0x38>
  409b00:	204004fc 	.word	0x204004fc
  409b04:	fffff000 	.word	0xfffff000
  409b08:	204009e0 	.word	0x204009e0
  409b0c:	20400908 	.word	0x20400908

00409b10 <_free_r>:
  409b10:	2900      	cmp	r1, #0
  409b12:	d04d      	beq.n	409bb0 <_free_r+0xa0>
  409b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b18:	460c      	mov	r4, r1
  409b1a:	4680      	mov	r8, r0
  409b1c:	f000 fef8 	bl	40a910 <__malloc_lock>
  409b20:	4963      	ldr	r1, [pc, #396]	; (409cb0 <_free_r+0x1a0>)
  409b22:	f854 7c04 	ldr.w	r7, [r4, #-4]
  409b26:	f1a4 0508 	sub.w	r5, r4, #8
  409b2a:	688e      	ldr	r6, [r1, #8]
  409b2c:	f027 0301 	bic.w	r3, r7, #1
  409b30:	18ea      	adds	r2, r5, r3
  409b32:	6850      	ldr	r0, [r2, #4]
  409b34:	4296      	cmp	r6, r2
  409b36:	f020 0003 	bic.w	r0, r0, #3
  409b3a:	d059      	beq.n	409bf0 <_free_r+0xe0>
  409b3c:	07fe      	lsls	r6, r7, #31
  409b3e:	6050      	str	r0, [r2, #4]
  409b40:	d40b      	bmi.n	409b5a <_free_r+0x4a>
  409b42:	f854 4c08 	ldr.w	r4, [r4, #-8]
  409b46:	f101 0708 	add.w	r7, r1, #8
  409b4a:	1b2d      	subs	r5, r5, r4
  409b4c:	4423      	add	r3, r4
  409b4e:	68ac      	ldr	r4, [r5, #8]
  409b50:	42bc      	cmp	r4, r7
  409b52:	d066      	beq.n	409c22 <_free_r+0x112>
  409b54:	68ef      	ldr	r7, [r5, #12]
  409b56:	60e7      	str	r7, [r4, #12]
  409b58:	60bc      	str	r4, [r7, #8]
  409b5a:	1814      	adds	r4, r2, r0
  409b5c:	6864      	ldr	r4, [r4, #4]
  409b5e:	07e4      	lsls	r4, r4, #31
  409b60:	d40c      	bmi.n	409b7c <_free_r+0x6c>
  409b62:	4c54      	ldr	r4, [pc, #336]	; (409cb4 <_free_r+0x1a4>)
  409b64:	4403      	add	r3, r0
  409b66:	6890      	ldr	r0, [r2, #8]
  409b68:	42a0      	cmp	r0, r4
  409b6a:	d07c      	beq.n	409c66 <_free_r+0x156>
  409b6c:	68d4      	ldr	r4, [r2, #12]
  409b6e:	f043 0201 	orr.w	r2, r3, #1
  409b72:	60c4      	str	r4, [r0, #12]
  409b74:	60a0      	str	r0, [r4, #8]
  409b76:	606a      	str	r2, [r5, #4]
  409b78:	50eb      	str	r3, [r5, r3]
  409b7a:	e003      	b.n	409b84 <_free_r+0x74>
  409b7c:	f043 0201 	orr.w	r2, r3, #1
  409b80:	606a      	str	r2, [r5, #4]
  409b82:	50eb      	str	r3, [r5, r3]
  409b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409b88:	d213      	bcs.n	409bb2 <_free_r+0xa2>
  409b8a:	08db      	lsrs	r3, r3, #3
  409b8c:	2001      	movs	r0, #1
  409b8e:	684a      	ldr	r2, [r1, #4]
  409b90:	109c      	asrs	r4, r3, #2
  409b92:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  409b96:	40a0      	lsls	r0, r4
  409b98:	689c      	ldr	r4, [r3, #8]
  409b9a:	4302      	orrs	r2, r0
  409b9c:	60eb      	str	r3, [r5, #12]
  409b9e:	60ac      	str	r4, [r5, #8]
  409ba0:	604a      	str	r2, [r1, #4]
  409ba2:	609d      	str	r5, [r3, #8]
  409ba4:	60e5      	str	r5, [r4, #12]
  409ba6:	4640      	mov	r0, r8
  409ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409bac:	f000 beb2 	b.w	40a914 <__malloc_unlock>
  409bb0:	4770      	bx	lr
  409bb2:	0a5a      	lsrs	r2, r3, #9
  409bb4:	2a04      	cmp	r2, #4
  409bb6:	d847      	bhi.n	409c48 <_free_r+0x138>
  409bb8:	099a      	lsrs	r2, r3, #6
  409bba:	f102 0438 	add.w	r4, r2, #56	; 0x38
  409bbe:	0060      	lsls	r0, r4, #1
  409bc0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  409bc4:	493a      	ldr	r1, [pc, #232]	; (409cb0 <_free_r+0x1a0>)
  409bc6:	6882      	ldr	r2, [r0, #8]
  409bc8:	4282      	cmp	r2, r0
  409bca:	d043      	beq.n	409c54 <_free_r+0x144>
  409bcc:	6851      	ldr	r1, [r2, #4]
  409bce:	f021 0103 	bic.w	r1, r1, #3
  409bd2:	4299      	cmp	r1, r3
  409bd4:	d902      	bls.n	409bdc <_free_r+0xcc>
  409bd6:	6892      	ldr	r2, [r2, #8]
  409bd8:	4290      	cmp	r0, r2
  409bda:	d1f7      	bne.n	409bcc <_free_r+0xbc>
  409bdc:	68d3      	ldr	r3, [r2, #12]
  409bde:	60eb      	str	r3, [r5, #12]
  409be0:	4640      	mov	r0, r8
  409be2:	60aa      	str	r2, [r5, #8]
  409be4:	609d      	str	r5, [r3, #8]
  409be6:	60d5      	str	r5, [r2, #12]
  409be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409bec:	f000 be92 	b.w	40a914 <__malloc_unlock>
  409bf0:	07ff      	lsls	r7, r7, #31
  409bf2:	4403      	add	r3, r0
  409bf4:	d407      	bmi.n	409c06 <_free_r+0xf6>
  409bf6:	f854 2c08 	ldr.w	r2, [r4, #-8]
  409bfa:	1aad      	subs	r5, r5, r2
  409bfc:	4413      	add	r3, r2
  409bfe:	68a8      	ldr	r0, [r5, #8]
  409c00:	68ea      	ldr	r2, [r5, #12]
  409c02:	60c2      	str	r2, [r0, #12]
  409c04:	6090      	str	r0, [r2, #8]
  409c06:	4a2c      	ldr	r2, [pc, #176]	; (409cb8 <_free_r+0x1a8>)
  409c08:	f043 0001 	orr.w	r0, r3, #1
  409c0c:	6812      	ldr	r2, [r2, #0]
  409c0e:	6068      	str	r0, [r5, #4]
  409c10:	4293      	cmp	r3, r2
  409c12:	608d      	str	r5, [r1, #8]
  409c14:	d3c7      	bcc.n	409ba6 <_free_r+0x96>
  409c16:	4b29      	ldr	r3, [pc, #164]	; (409cbc <_free_r+0x1ac>)
  409c18:	4640      	mov	r0, r8
  409c1a:	6819      	ldr	r1, [r3, #0]
  409c1c:	f7ff ff2a 	bl	409a74 <_malloc_trim_r>
  409c20:	e7c1      	b.n	409ba6 <_free_r+0x96>
  409c22:	1811      	adds	r1, r2, r0
  409c24:	6849      	ldr	r1, [r1, #4]
  409c26:	07c9      	lsls	r1, r1, #31
  409c28:	d409      	bmi.n	409c3e <_free_r+0x12e>
  409c2a:	4403      	add	r3, r0
  409c2c:	68d1      	ldr	r1, [r2, #12]
  409c2e:	6892      	ldr	r2, [r2, #8]
  409c30:	f043 0001 	orr.w	r0, r3, #1
  409c34:	60d1      	str	r1, [r2, #12]
  409c36:	608a      	str	r2, [r1, #8]
  409c38:	6068      	str	r0, [r5, #4]
  409c3a:	50eb      	str	r3, [r5, r3]
  409c3c:	e7b3      	b.n	409ba6 <_free_r+0x96>
  409c3e:	f043 0201 	orr.w	r2, r3, #1
  409c42:	606a      	str	r2, [r5, #4]
  409c44:	50eb      	str	r3, [r5, r3]
  409c46:	e7ae      	b.n	409ba6 <_free_r+0x96>
  409c48:	2a14      	cmp	r2, #20
  409c4a:	d815      	bhi.n	409c78 <_free_r+0x168>
  409c4c:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  409c50:	0060      	lsls	r0, r4, #1
  409c52:	e7b5      	b.n	409bc0 <_free_r+0xb0>
  409c54:	10a4      	asrs	r4, r4, #2
  409c56:	2701      	movs	r7, #1
  409c58:	6848      	ldr	r0, [r1, #4]
  409c5a:	4613      	mov	r3, r2
  409c5c:	fa07 f404 	lsl.w	r4, r7, r4
  409c60:	4320      	orrs	r0, r4
  409c62:	6048      	str	r0, [r1, #4]
  409c64:	e7bb      	b.n	409bde <_free_r+0xce>
  409c66:	f043 0201 	orr.w	r2, r3, #1
  409c6a:	614d      	str	r5, [r1, #20]
  409c6c:	610d      	str	r5, [r1, #16]
  409c6e:	60e8      	str	r0, [r5, #12]
  409c70:	60a8      	str	r0, [r5, #8]
  409c72:	606a      	str	r2, [r5, #4]
  409c74:	50eb      	str	r3, [r5, r3]
  409c76:	e796      	b.n	409ba6 <_free_r+0x96>
  409c78:	2a54      	cmp	r2, #84	; 0x54
  409c7a:	d804      	bhi.n	409c86 <_free_r+0x176>
  409c7c:	0b1a      	lsrs	r2, r3, #12
  409c7e:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  409c82:	0060      	lsls	r0, r4, #1
  409c84:	e79c      	b.n	409bc0 <_free_r+0xb0>
  409c86:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409c8a:	d804      	bhi.n	409c96 <_free_r+0x186>
  409c8c:	0bda      	lsrs	r2, r3, #15
  409c8e:	f102 0477 	add.w	r4, r2, #119	; 0x77
  409c92:	0060      	lsls	r0, r4, #1
  409c94:	e794      	b.n	409bc0 <_free_r+0xb0>
  409c96:	f240 5054 	movw	r0, #1364	; 0x554
  409c9a:	4282      	cmp	r2, r0
  409c9c:	d804      	bhi.n	409ca8 <_free_r+0x198>
  409c9e:	0c9a      	lsrs	r2, r3, #18
  409ca0:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  409ca4:	0060      	lsls	r0, r4, #1
  409ca6:	e78b      	b.n	409bc0 <_free_r+0xb0>
  409ca8:	20fc      	movs	r0, #252	; 0xfc
  409caa:	247e      	movs	r4, #126	; 0x7e
  409cac:	e788      	b.n	409bc0 <_free_r+0xb0>
  409cae:	bf00      	nop
  409cb0:	204004fc 	.word	0x204004fc
  409cb4:	20400504 	.word	0x20400504
  409cb8:	20400904 	.word	0x20400904
  409cbc:	204009dc 	.word	0x204009dc

00409cc0 <__sfvwrite_r>:
  409cc0:	6893      	ldr	r3, [r2, #8]
  409cc2:	2b00      	cmp	r3, #0
  409cc4:	d07a      	beq.n	409dbc <__sfvwrite_r+0xfc>
  409cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409cca:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  409cce:	b083      	sub	sp, #12
  409cd0:	460c      	mov	r4, r1
  409cd2:	4681      	mov	r9, r0
  409cd4:	f01e 0f08 	tst.w	lr, #8
  409cd8:	4616      	mov	r6, r2
  409cda:	d026      	beq.n	409d2a <__sfvwrite_r+0x6a>
  409cdc:	690b      	ldr	r3, [r1, #16]
  409cde:	b323      	cbz	r3, 409d2a <__sfvwrite_r+0x6a>
  409ce0:	f00e 0802 	and.w	r8, lr, #2
  409ce4:	6835      	ldr	r5, [r6, #0]
  409ce6:	fa1f f088 	uxth.w	r0, r8
  409cea:	b370      	cbz	r0, 409d4a <__sfvwrite_r+0x8a>
  409cec:	f04f 0a00 	mov.w	sl, #0
  409cf0:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 409fe0 <__sfvwrite_r+0x320>
  409cf4:	46d0      	mov	r8, sl
  409cf6:	45d8      	cmp	r8, fp
  409cf8:	4643      	mov	r3, r8
  409cfa:	4652      	mov	r2, sl
  409cfc:	4648      	mov	r0, r9
  409cfe:	bf28      	it	cs
  409d00:	465b      	movcs	r3, fp
  409d02:	f1b8 0f00 	cmp.w	r8, #0
  409d06:	d053      	beq.n	409db0 <__sfvwrite_r+0xf0>
  409d08:	69e1      	ldr	r1, [r4, #28]
  409d0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409d0c:	47b8      	blx	r7
  409d0e:	2800      	cmp	r0, #0
  409d10:	dd73      	ble.n	409dfa <__sfvwrite_r+0x13a>
  409d12:	68b3      	ldr	r3, [r6, #8]
  409d14:	4482      	add	sl, r0
  409d16:	ebc0 0808 	rsb	r8, r0, r8
  409d1a:	1a18      	subs	r0, r3, r0
  409d1c:	60b0      	str	r0, [r6, #8]
  409d1e:	2800      	cmp	r0, #0
  409d20:	d1e9      	bne.n	409cf6 <__sfvwrite_r+0x36>
  409d22:	2000      	movs	r0, #0
  409d24:	b003      	add	sp, #12
  409d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d2a:	4648      	mov	r0, r9
  409d2c:	4621      	mov	r1, r4
  409d2e:	f7fe fcbb 	bl	4086a8 <__swsetup_r>
  409d32:	2800      	cmp	r0, #0
  409d34:	f040 814c 	bne.w	409fd0 <__sfvwrite_r+0x310>
  409d38:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  409d3c:	6835      	ldr	r5, [r6, #0]
  409d3e:	f00e 0802 	and.w	r8, lr, #2
  409d42:	fa1f f088 	uxth.w	r0, r8
  409d46:	2800      	cmp	r0, #0
  409d48:	d1d0      	bne.n	409cec <__sfvwrite_r+0x2c>
  409d4a:	f01e 0b01 	ands.w	fp, lr, #1
  409d4e:	d15d      	bne.n	409e0c <__sfvwrite_r+0x14c>
  409d50:	46d8      	mov	r8, fp
  409d52:	f1b8 0f00 	cmp.w	r8, #0
  409d56:	d025      	beq.n	409da4 <__sfvwrite_r+0xe4>
  409d58:	f41e 7f00 	tst.w	lr, #512	; 0x200
  409d5c:	68a7      	ldr	r7, [r4, #8]
  409d5e:	d02f      	beq.n	409dc0 <__sfvwrite_r+0x100>
  409d60:	45b8      	cmp	r8, r7
  409d62:	46ba      	mov	sl, r7
  409d64:	f0c0 80a8 	bcc.w	409eb8 <__sfvwrite_r+0x1f8>
  409d68:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  409d6c:	f040 80b5 	bne.w	409eda <__sfvwrite_r+0x21a>
  409d70:	6820      	ldr	r0, [r4, #0]
  409d72:	4659      	mov	r1, fp
  409d74:	4652      	mov	r2, sl
  409d76:	f000 fd69 	bl	40a84c <memmove>
  409d7a:	68a2      	ldr	r2, [r4, #8]
  409d7c:	6821      	ldr	r1, [r4, #0]
  409d7e:	4640      	mov	r0, r8
  409d80:	1bd7      	subs	r7, r2, r7
  409d82:	eb01 030a 	add.w	r3, r1, sl
  409d86:	60a7      	str	r7, [r4, #8]
  409d88:	6023      	str	r3, [r4, #0]
  409d8a:	68b3      	ldr	r3, [r6, #8]
  409d8c:	4483      	add	fp, r0
  409d8e:	ebc0 0808 	rsb	r8, r0, r8
  409d92:	1a18      	subs	r0, r3, r0
  409d94:	60b0      	str	r0, [r6, #8]
  409d96:	2800      	cmp	r0, #0
  409d98:	d0c3      	beq.n	409d22 <__sfvwrite_r+0x62>
  409d9a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  409d9e:	f1b8 0f00 	cmp.w	r8, #0
  409da2:	d1d9      	bne.n	409d58 <__sfvwrite_r+0x98>
  409da4:	f8d5 b000 	ldr.w	fp, [r5]
  409da8:	3508      	adds	r5, #8
  409daa:	f855 8c04 	ldr.w	r8, [r5, #-4]
  409dae:	e7d0      	b.n	409d52 <__sfvwrite_r+0x92>
  409db0:	f8d5 a000 	ldr.w	sl, [r5]
  409db4:	3508      	adds	r5, #8
  409db6:	f855 8c04 	ldr.w	r8, [r5, #-4]
  409dba:	e79c      	b.n	409cf6 <__sfvwrite_r+0x36>
  409dbc:	2000      	movs	r0, #0
  409dbe:	4770      	bx	lr
  409dc0:	6820      	ldr	r0, [r4, #0]
  409dc2:	6923      	ldr	r3, [r4, #16]
  409dc4:	4298      	cmp	r0, r3
  409dc6:	d803      	bhi.n	409dd0 <__sfvwrite_r+0x110>
  409dc8:	6963      	ldr	r3, [r4, #20]
  409dca:	4598      	cmp	r8, r3
  409dcc:	f080 80bf 	bcs.w	409f4e <__sfvwrite_r+0x28e>
  409dd0:	4547      	cmp	r7, r8
  409dd2:	4659      	mov	r1, fp
  409dd4:	bf28      	it	cs
  409dd6:	4647      	movcs	r7, r8
  409dd8:	463a      	mov	r2, r7
  409dda:	f000 fd37 	bl	40a84c <memmove>
  409dde:	68a3      	ldr	r3, [r4, #8]
  409de0:	6822      	ldr	r2, [r4, #0]
  409de2:	1bdb      	subs	r3, r3, r7
  409de4:	443a      	add	r2, r7
  409de6:	60a3      	str	r3, [r4, #8]
  409de8:	6022      	str	r2, [r4, #0]
  409dea:	2b00      	cmp	r3, #0
  409dec:	d149      	bne.n	409e82 <__sfvwrite_r+0x1c2>
  409dee:	4648      	mov	r0, r9
  409df0:	4621      	mov	r1, r4
  409df2:	f7ff fd85 	bl	409900 <_fflush_r>
  409df6:	2800      	cmp	r0, #0
  409df8:	d043      	beq.n	409e82 <__sfvwrite_r+0x1c2>
  409dfa:	89a3      	ldrh	r3, [r4, #12]
  409dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409e00:	f04f 30ff 	mov.w	r0, #4294967295
  409e04:	81a3      	strh	r3, [r4, #12]
  409e06:	b003      	add	sp, #12
  409e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e0c:	4680      	mov	r8, r0
  409e0e:	4683      	mov	fp, r0
  409e10:	4682      	mov	sl, r0
  409e12:	9000      	str	r0, [sp, #0]
  409e14:	f1ba 0f00 	cmp.w	sl, #0
  409e18:	d02b      	beq.n	409e72 <__sfvwrite_r+0x1b2>
  409e1a:	9b00      	ldr	r3, [sp, #0]
  409e1c:	2b00      	cmp	r3, #0
  409e1e:	d04f      	beq.n	409ec0 <__sfvwrite_r+0x200>
  409e20:	45d0      	cmp	r8, sl
  409e22:	6962      	ldr	r2, [r4, #20]
  409e24:	68a1      	ldr	r1, [r4, #8]
  409e26:	4643      	mov	r3, r8
  409e28:	bf28      	it	cs
  409e2a:	4653      	movcs	r3, sl
  409e2c:	6820      	ldr	r0, [r4, #0]
  409e2e:	eb02 0c01 	add.w	ip, r2, r1
  409e32:	461f      	mov	r7, r3
  409e34:	4563      	cmp	r3, ip
  409e36:	dd03      	ble.n	409e40 <__sfvwrite_r+0x180>
  409e38:	6921      	ldr	r1, [r4, #16]
  409e3a:	4288      	cmp	r0, r1
  409e3c:	f200 8099 	bhi.w	409f72 <__sfvwrite_r+0x2b2>
  409e40:	4293      	cmp	r3, r2
  409e42:	db20      	blt.n	409e86 <__sfvwrite_r+0x1c6>
  409e44:	4613      	mov	r3, r2
  409e46:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409e48:	4648      	mov	r0, r9
  409e4a:	69e1      	ldr	r1, [r4, #28]
  409e4c:	465a      	mov	r2, fp
  409e4e:	47b8      	blx	r7
  409e50:	1e07      	subs	r7, r0, #0
  409e52:	ddd2      	ble.n	409dfa <__sfvwrite_r+0x13a>
  409e54:	ebb8 0807 	subs.w	r8, r8, r7
  409e58:	d025      	beq.n	409ea6 <__sfvwrite_r+0x1e6>
  409e5a:	68b3      	ldr	r3, [r6, #8]
  409e5c:	44bb      	add	fp, r7
  409e5e:	ebc7 0a0a 	rsb	sl, r7, sl
  409e62:	1bdf      	subs	r7, r3, r7
  409e64:	60b7      	str	r7, [r6, #8]
  409e66:	2f00      	cmp	r7, #0
  409e68:	f43f af5b 	beq.w	409d22 <__sfvwrite_r+0x62>
  409e6c:	f1ba 0f00 	cmp.w	sl, #0
  409e70:	d1d3      	bne.n	409e1a <__sfvwrite_r+0x15a>
  409e72:	2300      	movs	r3, #0
  409e74:	f8d5 b000 	ldr.w	fp, [r5]
  409e78:	f8d5 a004 	ldr.w	sl, [r5, #4]
  409e7c:	3508      	adds	r5, #8
  409e7e:	9300      	str	r3, [sp, #0]
  409e80:	e7c8      	b.n	409e14 <__sfvwrite_r+0x154>
  409e82:	4638      	mov	r0, r7
  409e84:	e781      	b.n	409d8a <__sfvwrite_r+0xca>
  409e86:	461a      	mov	r2, r3
  409e88:	4659      	mov	r1, fp
  409e8a:	9301      	str	r3, [sp, #4]
  409e8c:	f000 fcde 	bl	40a84c <memmove>
  409e90:	68a2      	ldr	r2, [r4, #8]
  409e92:	ebb8 0807 	subs.w	r8, r8, r7
  409e96:	6821      	ldr	r1, [r4, #0]
  409e98:	9b01      	ldr	r3, [sp, #4]
  409e9a:	eba2 0203 	sub.w	r2, r2, r3
  409e9e:	440b      	add	r3, r1
  409ea0:	60a2      	str	r2, [r4, #8]
  409ea2:	6023      	str	r3, [r4, #0]
  409ea4:	d1d9      	bne.n	409e5a <__sfvwrite_r+0x19a>
  409ea6:	4648      	mov	r0, r9
  409ea8:	4621      	mov	r1, r4
  409eaa:	f7ff fd29 	bl	409900 <_fflush_r>
  409eae:	2800      	cmp	r0, #0
  409eb0:	d1a3      	bne.n	409dfa <__sfvwrite_r+0x13a>
  409eb2:	f8cd 8000 	str.w	r8, [sp]
  409eb6:	e7d0      	b.n	409e5a <__sfvwrite_r+0x19a>
  409eb8:	4647      	mov	r7, r8
  409eba:	6820      	ldr	r0, [r4, #0]
  409ebc:	46c2      	mov	sl, r8
  409ebe:	e758      	b.n	409d72 <__sfvwrite_r+0xb2>
  409ec0:	4658      	mov	r0, fp
  409ec2:	210a      	movs	r1, #10
  409ec4:	4652      	mov	r2, sl
  409ec6:	f000 fbdf 	bl	40a688 <memchr>
  409eca:	2800      	cmp	r0, #0
  409ecc:	d07b      	beq.n	409fc6 <__sfvwrite_r+0x306>
  409ece:	3001      	adds	r0, #1
  409ed0:	2301      	movs	r3, #1
  409ed2:	ebcb 0800 	rsb	r8, fp, r0
  409ed6:	9300      	str	r3, [sp, #0]
  409ed8:	e7a2      	b.n	409e20 <__sfvwrite_r+0x160>
  409eda:	6963      	ldr	r3, [r4, #20]
  409edc:	6921      	ldr	r1, [r4, #16]
  409ede:	6827      	ldr	r7, [r4, #0]
  409ee0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  409ee4:	1a7f      	subs	r7, r7, r1
  409ee6:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  409eea:	1c7b      	adds	r3, r7, #1
  409eec:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  409ef0:	4443      	add	r3, r8
  409ef2:	4662      	mov	r2, ip
  409ef4:	459c      	cmp	ip, r3
  409ef6:	d201      	bcs.n	409efc <__sfvwrite_r+0x23c>
  409ef8:	469c      	mov	ip, r3
  409efa:	461a      	mov	r2, r3
  409efc:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  409f00:	f8cd c000 	str.w	ip, [sp]
  409f04:	d04b      	beq.n	409f9e <__sfvwrite_r+0x2de>
  409f06:	4611      	mov	r1, r2
  409f08:	4648      	mov	r0, r9
  409f0a:	f000 f911 	bl	40a130 <_malloc_r>
  409f0e:	f8dd c000 	ldr.w	ip, [sp]
  409f12:	4682      	mov	sl, r0
  409f14:	2800      	cmp	r0, #0
  409f16:	d05e      	beq.n	409fd6 <__sfvwrite_r+0x316>
  409f18:	463a      	mov	r2, r7
  409f1a:	6921      	ldr	r1, [r4, #16]
  409f1c:	f8cd c000 	str.w	ip, [sp]
  409f20:	f000 fbfa 	bl	40a718 <memcpy>
  409f24:	89a2      	ldrh	r2, [r4, #12]
  409f26:	f8dd c000 	ldr.w	ip, [sp]
  409f2a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409f32:	81a2      	strh	r2, [r4, #12]
  409f34:	eb0a 0007 	add.w	r0, sl, r7
  409f38:	ebc7 020c 	rsb	r2, r7, ip
  409f3c:	f8c4 a010 	str.w	sl, [r4, #16]
  409f40:	4647      	mov	r7, r8
  409f42:	6020      	str	r0, [r4, #0]
  409f44:	46c2      	mov	sl, r8
  409f46:	60a2      	str	r2, [r4, #8]
  409f48:	f8c4 c014 	str.w	ip, [r4, #20]
  409f4c:	e711      	b.n	409d72 <__sfvwrite_r+0xb2>
  409f4e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  409f52:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409f54:	4648      	mov	r0, r9
  409f56:	69e1      	ldr	r1, [r4, #28]
  409f58:	45c6      	cmp	lr, r8
  409f5a:	465a      	mov	r2, fp
  409f5c:	bf28      	it	cs
  409f5e:	46c6      	movcs	lr, r8
  409f60:	fb9e fef3 	sdiv	lr, lr, r3
  409f64:	fb0e f303 	mul.w	r3, lr, r3
  409f68:	47b8      	blx	r7
  409f6a:	2800      	cmp	r0, #0
  409f6c:	f73f af0d 	bgt.w	409d8a <__sfvwrite_r+0xca>
  409f70:	e743      	b.n	409dfa <__sfvwrite_r+0x13a>
  409f72:	4662      	mov	r2, ip
  409f74:	4659      	mov	r1, fp
  409f76:	f8cd c004 	str.w	ip, [sp, #4]
  409f7a:	f000 fc67 	bl	40a84c <memmove>
  409f7e:	6823      	ldr	r3, [r4, #0]
  409f80:	4648      	mov	r0, r9
  409f82:	f8dd c004 	ldr.w	ip, [sp, #4]
  409f86:	4621      	mov	r1, r4
  409f88:	4463      	add	r3, ip
  409f8a:	6023      	str	r3, [r4, #0]
  409f8c:	f7ff fcb8 	bl	409900 <_fflush_r>
  409f90:	f8dd c004 	ldr.w	ip, [sp, #4]
  409f94:	2800      	cmp	r0, #0
  409f96:	f47f af30 	bne.w	409dfa <__sfvwrite_r+0x13a>
  409f9a:	4667      	mov	r7, ip
  409f9c:	e75a      	b.n	409e54 <__sfvwrite_r+0x194>
  409f9e:	4648      	mov	r0, r9
  409fa0:	f000 ffc6 	bl	40af30 <_realloc_r>
  409fa4:	f8dd c000 	ldr.w	ip, [sp]
  409fa8:	4682      	mov	sl, r0
  409faa:	2800      	cmp	r0, #0
  409fac:	d1c2      	bne.n	409f34 <__sfvwrite_r+0x274>
  409fae:	4648      	mov	r0, r9
  409fb0:	6921      	ldr	r1, [r4, #16]
  409fb2:	f7ff fdad 	bl	409b10 <_free_r>
  409fb6:	89a3      	ldrh	r3, [r4, #12]
  409fb8:	220c      	movs	r2, #12
  409fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  409fbe:	f8c9 2000 	str.w	r2, [r9]
  409fc2:	b29b      	uxth	r3, r3
  409fc4:	e71a      	b.n	409dfc <__sfvwrite_r+0x13c>
  409fc6:	2301      	movs	r3, #1
  409fc8:	f10a 0801 	add.w	r8, sl, #1
  409fcc:	9300      	str	r3, [sp, #0]
  409fce:	e727      	b.n	409e20 <__sfvwrite_r+0x160>
  409fd0:	f04f 30ff 	mov.w	r0, #4294967295
  409fd4:	e6a6      	b.n	409d24 <__sfvwrite_r+0x64>
  409fd6:	220c      	movs	r2, #12
  409fd8:	89a3      	ldrh	r3, [r4, #12]
  409fda:	f8c9 2000 	str.w	r2, [r9]
  409fde:	e70d      	b.n	409dfc <__sfvwrite_r+0x13c>
  409fe0:	7ffffc00 	.word	0x7ffffc00

00409fe4 <_fwalk_reent>:
  409fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409fe8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  409fec:	d01e      	beq.n	40a02c <_fwalk_reent+0x48>
  409fee:	4688      	mov	r8, r1
  409ff0:	4606      	mov	r6, r0
  409ff2:	f04f 0900 	mov.w	r9, #0
  409ff6:	687d      	ldr	r5, [r7, #4]
  409ff8:	68bc      	ldr	r4, [r7, #8]
  409ffa:	3d01      	subs	r5, #1
  409ffc:	d410      	bmi.n	40a020 <_fwalk_reent+0x3c>
  409ffe:	89a3      	ldrh	r3, [r4, #12]
  40a000:	3d01      	subs	r5, #1
  40a002:	2b01      	cmp	r3, #1
  40a004:	d908      	bls.n	40a018 <_fwalk_reent+0x34>
  40a006:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a00a:	4621      	mov	r1, r4
  40a00c:	4630      	mov	r0, r6
  40a00e:	3301      	adds	r3, #1
  40a010:	d002      	beq.n	40a018 <_fwalk_reent+0x34>
  40a012:	47c0      	blx	r8
  40a014:	ea49 0900 	orr.w	r9, r9, r0
  40a018:	1c6b      	adds	r3, r5, #1
  40a01a:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a01e:	d1ee      	bne.n	409ffe <_fwalk_reent+0x1a>
  40a020:	683f      	ldr	r7, [r7, #0]
  40a022:	2f00      	cmp	r7, #0
  40a024:	d1e7      	bne.n	409ff6 <_fwalk_reent+0x12>
  40a026:	4648      	mov	r0, r9
  40a028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a02c:	46b9      	mov	r9, r7
  40a02e:	4648      	mov	r0, r9
  40a030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a034 <_localeconv_r>:
  40a034:	4800      	ldr	r0, [pc, #0]	; (40a038 <_localeconv_r+0x4>)
  40a036:	4770      	bx	lr
  40a038:	204004c4 	.word	0x204004c4

0040a03c <__smakebuf_r>:
  40a03c:	898b      	ldrh	r3, [r1, #12]
  40a03e:	b29a      	uxth	r2, r3
  40a040:	f012 0f02 	tst.w	r2, #2
  40a044:	d13d      	bne.n	40a0c2 <__smakebuf_r+0x86>
  40a046:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a048:	460c      	mov	r4, r1
  40a04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a04e:	b091      	sub	sp, #68	; 0x44
  40a050:	4605      	mov	r5, r0
  40a052:	2900      	cmp	r1, #0
  40a054:	db19      	blt.n	40a08a <__smakebuf_r+0x4e>
  40a056:	aa01      	add	r2, sp, #4
  40a058:	f001 fb4e 	bl	40b6f8 <_fstat_r>
  40a05c:	2800      	cmp	r0, #0
  40a05e:	db12      	blt.n	40a086 <__smakebuf_r+0x4a>
  40a060:	9b02      	ldr	r3, [sp, #8]
  40a062:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40a066:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40a06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40a06e:	fab7 f787 	clz	r7, r7
  40a072:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40a076:	d02b      	beq.n	40a0d0 <__smakebuf_r+0x94>
  40a078:	89a3      	ldrh	r3, [r4, #12]
  40a07a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a07e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a082:	81a3      	strh	r3, [r4, #12]
  40a084:	e00c      	b.n	40a0a0 <__smakebuf_r+0x64>
  40a086:	89a3      	ldrh	r3, [r4, #12]
  40a088:	b29a      	uxth	r2, r3
  40a08a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40a08e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a092:	f04f 0700 	mov.w	r7, #0
  40a096:	bf0c      	ite	eq
  40a098:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40a09c:	2640      	movne	r6, #64	; 0x40
  40a09e:	81a3      	strh	r3, [r4, #12]
  40a0a0:	4628      	mov	r0, r5
  40a0a2:	4631      	mov	r1, r6
  40a0a4:	f000 f844 	bl	40a130 <_malloc_r>
  40a0a8:	89a3      	ldrh	r3, [r4, #12]
  40a0aa:	b340      	cbz	r0, 40a0fe <__smakebuf_r+0xc2>
  40a0ac:	4a1a      	ldr	r2, [pc, #104]	; (40a118 <__smakebuf_r+0xdc>)
  40a0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a0b2:	63ea      	str	r2, [r5, #60]	; 0x3c
  40a0b4:	81a3      	strh	r3, [r4, #12]
  40a0b6:	6020      	str	r0, [r4, #0]
  40a0b8:	6120      	str	r0, [r4, #16]
  40a0ba:	6166      	str	r6, [r4, #20]
  40a0bc:	b99f      	cbnz	r7, 40a0e6 <__smakebuf_r+0xaa>
  40a0be:	b011      	add	sp, #68	; 0x44
  40a0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a0c2:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40a0c6:	2201      	movs	r2, #1
  40a0c8:	600b      	str	r3, [r1, #0]
  40a0ca:	610b      	str	r3, [r1, #16]
  40a0cc:	614a      	str	r2, [r1, #20]
  40a0ce:	4770      	bx	lr
  40a0d0:	4b12      	ldr	r3, [pc, #72]	; (40a11c <__smakebuf_r+0xe0>)
  40a0d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40a0d4:	429a      	cmp	r2, r3
  40a0d6:	d1cf      	bne.n	40a078 <__smakebuf_r+0x3c>
  40a0d8:	89a3      	ldrh	r3, [r4, #12]
  40a0da:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a0de:	4333      	orrs	r3, r6
  40a0e0:	64e6      	str	r6, [r4, #76]	; 0x4c
  40a0e2:	81a3      	strh	r3, [r4, #12]
  40a0e4:	e7dc      	b.n	40a0a0 <__smakebuf_r+0x64>
  40a0e6:	4628      	mov	r0, r5
  40a0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a0ec:	f001 fb18 	bl	40b720 <_isatty_r>
  40a0f0:	2800      	cmp	r0, #0
  40a0f2:	d0e4      	beq.n	40a0be <__smakebuf_r+0x82>
  40a0f4:	89a3      	ldrh	r3, [r4, #12]
  40a0f6:	f043 0301 	orr.w	r3, r3, #1
  40a0fa:	81a3      	strh	r3, [r4, #12]
  40a0fc:	e7df      	b.n	40a0be <__smakebuf_r+0x82>
  40a0fe:	059a      	lsls	r2, r3, #22
  40a100:	d4dd      	bmi.n	40a0be <__smakebuf_r+0x82>
  40a102:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a106:	f043 0302 	orr.w	r3, r3, #2
  40a10a:	2101      	movs	r1, #1
  40a10c:	81a3      	strh	r3, [r4, #12]
  40a10e:	6022      	str	r2, [r4, #0]
  40a110:	6122      	str	r2, [r4, #16]
  40a112:	6161      	str	r1, [r4, #20]
  40a114:	e7d3      	b.n	40a0be <__smakebuf_r+0x82>
  40a116:	bf00      	nop
  40a118:	0040992d 	.word	0x0040992d
  40a11c:	0040b3e5 	.word	0x0040b3e5

0040a120 <malloc>:
  40a120:	4b02      	ldr	r3, [pc, #8]	; (40a12c <malloc+0xc>)
  40a122:	4601      	mov	r1, r0
  40a124:	6818      	ldr	r0, [r3, #0]
  40a126:	f000 b803 	b.w	40a130 <_malloc_r>
  40a12a:	bf00      	nop
  40a12c:	204004c0 	.word	0x204004c0

0040a130 <_malloc_r>:
  40a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a134:	f101 040b 	add.w	r4, r1, #11
  40a138:	b083      	sub	sp, #12
  40a13a:	4605      	mov	r5, r0
  40a13c:	2c16      	cmp	r4, #22
  40a13e:	d927      	bls.n	40a190 <_malloc_r+0x60>
  40a140:	f034 0407 	bics.w	r4, r4, #7
  40a144:	d42a      	bmi.n	40a19c <_malloc_r+0x6c>
  40a146:	42a1      	cmp	r1, r4
  40a148:	d828      	bhi.n	40a19c <_malloc_r+0x6c>
  40a14a:	f000 fbe1 	bl	40a910 <__malloc_lock>
  40a14e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40a152:	d22b      	bcs.n	40a1ac <_malloc_r+0x7c>
  40a154:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40a158:	4ec0      	ldr	r6, [pc, #768]	; (40a45c <_malloc_r+0x32c>)
  40a15a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40a15e:	68d3      	ldr	r3, [r2, #12]
  40a160:	4293      	cmp	r3, r2
  40a162:	f000 8171 	beq.w	40a448 <_malloc_r+0x318>
  40a166:	685a      	ldr	r2, [r3, #4]
  40a168:	f103 0808 	add.w	r8, r3, #8
  40a16c:	68d9      	ldr	r1, [r3, #12]
  40a16e:	4628      	mov	r0, r5
  40a170:	f022 0203 	bic.w	r2, r2, #3
  40a174:	689c      	ldr	r4, [r3, #8]
  40a176:	4413      	add	r3, r2
  40a178:	60e1      	str	r1, [r4, #12]
  40a17a:	608c      	str	r4, [r1, #8]
  40a17c:	685a      	ldr	r2, [r3, #4]
  40a17e:	f042 0201 	orr.w	r2, r2, #1
  40a182:	605a      	str	r2, [r3, #4]
  40a184:	f000 fbc6 	bl	40a914 <__malloc_unlock>
  40a188:	4640      	mov	r0, r8
  40a18a:	b003      	add	sp, #12
  40a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a190:	2910      	cmp	r1, #16
  40a192:	d803      	bhi.n	40a19c <_malloc_r+0x6c>
  40a194:	f000 fbbc 	bl	40a910 <__malloc_lock>
  40a198:	2410      	movs	r4, #16
  40a19a:	e7db      	b.n	40a154 <_malloc_r+0x24>
  40a19c:	f04f 0800 	mov.w	r8, #0
  40a1a0:	230c      	movs	r3, #12
  40a1a2:	4640      	mov	r0, r8
  40a1a4:	602b      	str	r3, [r5, #0]
  40a1a6:	b003      	add	sp, #12
  40a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1ac:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40a1b0:	f000 8089 	beq.w	40a2c6 <_malloc_r+0x196>
  40a1b4:	f1bc 0f04 	cmp.w	ip, #4
  40a1b8:	f200 80c4 	bhi.w	40a344 <_malloc_r+0x214>
  40a1bc:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40a1c0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40a1c4:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a1c8:	4ea4      	ldr	r6, [pc, #656]	; (40a45c <_malloc_r+0x32c>)
  40a1ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40a1ce:	68c3      	ldr	r3, [r0, #12]
  40a1d0:	4298      	cmp	r0, r3
  40a1d2:	d105      	bne.n	40a1e0 <_malloc_r+0xb0>
  40a1d4:	e00c      	b.n	40a1f0 <_malloc_r+0xc0>
  40a1d6:	2900      	cmp	r1, #0
  40a1d8:	da79      	bge.n	40a2ce <_malloc_r+0x19e>
  40a1da:	68db      	ldr	r3, [r3, #12]
  40a1dc:	4298      	cmp	r0, r3
  40a1de:	d007      	beq.n	40a1f0 <_malloc_r+0xc0>
  40a1e0:	685a      	ldr	r2, [r3, #4]
  40a1e2:	f022 0203 	bic.w	r2, r2, #3
  40a1e6:	1b11      	subs	r1, r2, r4
  40a1e8:	290f      	cmp	r1, #15
  40a1ea:	ddf4      	ble.n	40a1d6 <_malloc_r+0xa6>
  40a1ec:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a1f0:	f10c 0c01 	add.w	ip, ip, #1
  40a1f4:	4f99      	ldr	r7, [pc, #612]	; (40a45c <_malloc_r+0x32c>)
  40a1f6:	6933      	ldr	r3, [r6, #16]
  40a1f8:	f107 0e08 	add.w	lr, r7, #8
  40a1fc:	4573      	cmp	r3, lr
  40a1fe:	f000 8119 	beq.w	40a434 <_malloc_r+0x304>
  40a202:	685a      	ldr	r2, [r3, #4]
  40a204:	f022 0203 	bic.w	r2, r2, #3
  40a208:	1b11      	subs	r1, r2, r4
  40a20a:	290f      	cmp	r1, #15
  40a20c:	f300 80ca 	bgt.w	40a3a4 <_malloc_r+0x274>
  40a210:	2900      	cmp	r1, #0
  40a212:	f8c7 e014 	str.w	lr, [r7, #20]
  40a216:	f8c7 e010 	str.w	lr, [r7, #16]
  40a21a:	da6a      	bge.n	40a2f2 <_malloc_r+0x1c2>
  40a21c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a220:	f080 809f 	bcs.w	40a362 <_malloc_r+0x232>
  40a224:	08d2      	lsrs	r2, r2, #3
  40a226:	2001      	movs	r0, #1
  40a228:	6879      	ldr	r1, [r7, #4]
  40a22a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40a22e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40a232:	fa00 f008 	lsl.w	r0, r0, r8
  40a236:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40a23a:	4308      	orrs	r0, r1
  40a23c:	60da      	str	r2, [r3, #12]
  40a23e:	f8c3 8008 	str.w	r8, [r3, #8]
  40a242:	6078      	str	r0, [r7, #4]
  40a244:	6093      	str	r3, [r2, #8]
  40a246:	f8c8 300c 	str.w	r3, [r8, #12]
  40a24a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40a24e:	2101      	movs	r1, #1
  40a250:	4099      	lsls	r1, r3
  40a252:	4281      	cmp	r1, r0
  40a254:	d85b      	bhi.n	40a30e <_malloc_r+0x1de>
  40a256:	4208      	tst	r0, r1
  40a258:	d106      	bne.n	40a268 <_malloc_r+0x138>
  40a25a:	f02c 0c03 	bic.w	ip, ip, #3
  40a25e:	0049      	lsls	r1, r1, #1
  40a260:	f10c 0c04 	add.w	ip, ip, #4
  40a264:	4208      	tst	r0, r1
  40a266:	d0fa      	beq.n	40a25e <_malloc_r+0x12e>
  40a268:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40a26c:	46e1      	mov	r9, ip
  40a26e:	4640      	mov	r0, r8
  40a270:	68c7      	ldr	r7, [r0, #12]
  40a272:	42b8      	cmp	r0, r7
  40a274:	d107      	bne.n	40a286 <_malloc_r+0x156>
  40a276:	e0df      	b.n	40a438 <_malloc_r+0x308>
  40a278:	2a00      	cmp	r2, #0
  40a27a:	f280 80f7 	bge.w	40a46c <_malloc_r+0x33c>
  40a27e:	68ff      	ldr	r7, [r7, #12]
  40a280:	42b8      	cmp	r0, r7
  40a282:	f000 80d9 	beq.w	40a438 <_malloc_r+0x308>
  40a286:	687b      	ldr	r3, [r7, #4]
  40a288:	f023 0303 	bic.w	r3, r3, #3
  40a28c:	1b1a      	subs	r2, r3, r4
  40a28e:	2a0f      	cmp	r2, #15
  40a290:	ddf2      	ble.n	40a278 <_malloc_r+0x148>
  40a292:	46b8      	mov	r8, r7
  40a294:	68fb      	ldr	r3, [r7, #12]
  40a296:	f044 0901 	orr.w	r9, r4, #1
  40a29a:	f042 0c01 	orr.w	ip, r2, #1
  40a29e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40a2a2:	443c      	add	r4, r7
  40a2a4:	f8c7 9004 	str.w	r9, [r7, #4]
  40a2a8:	4628      	mov	r0, r5
  40a2aa:	60cb      	str	r3, [r1, #12]
  40a2ac:	6099      	str	r1, [r3, #8]
  40a2ae:	6174      	str	r4, [r6, #20]
  40a2b0:	6134      	str	r4, [r6, #16]
  40a2b2:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a2b6:	f8c4 e008 	str.w	lr, [r4, #8]
  40a2ba:	f8c4 c004 	str.w	ip, [r4, #4]
  40a2be:	50a2      	str	r2, [r4, r2]
  40a2c0:	f000 fb28 	bl	40a914 <__malloc_unlock>
  40a2c4:	e760      	b.n	40a188 <_malloc_r+0x58>
  40a2c6:	207e      	movs	r0, #126	; 0x7e
  40a2c8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40a2cc:	e77c      	b.n	40a1c8 <_malloc_r+0x98>
  40a2ce:	441a      	add	r2, r3
  40a2d0:	68dc      	ldr	r4, [r3, #12]
  40a2d2:	689e      	ldr	r6, [r3, #8]
  40a2d4:	f103 0808 	add.w	r8, r3, #8
  40a2d8:	6851      	ldr	r1, [r2, #4]
  40a2da:	4628      	mov	r0, r5
  40a2dc:	60f4      	str	r4, [r6, #12]
  40a2de:	f041 0301 	orr.w	r3, r1, #1
  40a2e2:	60a6      	str	r6, [r4, #8]
  40a2e4:	6053      	str	r3, [r2, #4]
  40a2e6:	f000 fb15 	bl	40a914 <__malloc_unlock>
  40a2ea:	4640      	mov	r0, r8
  40a2ec:	b003      	add	sp, #12
  40a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2f2:	441a      	add	r2, r3
  40a2f4:	f103 0808 	add.w	r8, r3, #8
  40a2f8:	4628      	mov	r0, r5
  40a2fa:	6853      	ldr	r3, [r2, #4]
  40a2fc:	f043 0301 	orr.w	r3, r3, #1
  40a300:	6053      	str	r3, [r2, #4]
  40a302:	f000 fb07 	bl	40a914 <__malloc_unlock>
  40a306:	4640      	mov	r0, r8
  40a308:	b003      	add	sp, #12
  40a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a30e:	68b7      	ldr	r7, [r6, #8]
  40a310:	687a      	ldr	r2, [r7, #4]
  40a312:	f022 0803 	bic.w	r8, r2, #3
  40a316:	ebc4 0208 	rsb	r2, r4, r8
  40a31a:	2a0f      	cmp	r2, #15
  40a31c:	dd56      	ble.n	40a3cc <_malloc_r+0x29c>
  40a31e:	45a0      	cmp	r8, r4
  40a320:	d354      	bcc.n	40a3cc <_malloc_r+0x29c>
  40a322:	f044 0301 	orr.w	r3, r4, #1
  40a326:	f042 0201 	orr.w	r2, r2, #1
  40a32a:	443c      	add	r4, r7
  40a32c:	f107 0808 	add.w	r8, r7, #8
  40a330:	607b      	str	r3, [r7, #4]
  40a332:	4628      	mov	r0, r5
  40a334:	60b4      	str	r4, [r6, #8]
  40a336:	6062      	str	r2, [r4, #4]
  40a338:	f000 faec 	bl	40a914 <__malloc_unlock>
  40a33c:	4640      	mov	r0, r8
  40a33e:	b003      	add	sp, #12
  40a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a344:	f1bc 0f14 	cmp.w	ip, #20
  40a348:	f240 809f 	bls.w	40a48a <_malloc_r+0x35a>
  40a34c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40a350:	f200 8127 	bhi.w	40a5a2 <_malloc_r+0x472>
  40a354:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40a358:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40a35c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a360:	e732      	b.n	40a1c8 <_malloc_r+0x98>
  40a362:	0a51      	lsrs	r1, r2, #9
  40a364:	2904      	cmp	r1, #4
  40a366:	f240 8095 	bls.w	40a494 <_malloc_r+0x364>
  40a36a:	2914      	cmp	r1, #20
  40a36c:	f200 8142 	bhi.w	40a5f4 <_malloc_r+0x4c4>
  40a370:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40a374:	0078      	lsls	r0, r7, #1
  40a376:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40a37a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40a45c <_malloc_r+0x32c>
  40a37e:	6881      	ldr	r1, [r0, #8]
  40a380:	4281      	cmp	r1, r0
  40a382:	f000 811b 	beq.w	40a5bc <_malloc_r+0x48c>
  40a386:	684f      	ldr	r7, [r1, #4]
  40a388:	f027 0703 	bic.w	r7, r7, #3
  40a38c:	42ba      	cmp	r2, r7
  40a38e:	d202      	bcs.n	40a396 <_malloc_r+0x266>
  40a390:	6889      	ldr	r1, [r1, #8]
  40a392:	4288      	cmp	r0, r1
  40a394:	d1f7      	bne.n	40a386 <_malloc_r+0x256>
  40a396:	68ca      	ldr	r2, [r1, #12]
  40a398:	6870      	ldr	r0, [r6, #4]
  40a39a:	60da      	str	r2, [r3, #12]
  40a39c:	6099      	str	r1, [r3, #8]
  40a39e:	6093      	str	r3, [r2, #8]
  40a3a0:	60cb      	str	r3, [r1, #12]
  40a3a2:	e752      	b.n	40a24a <_malloc_r+0x11a>
  40a3a4:	f044 0601 	orr.w	r6, r4, #1
  40a3a8:	f041 0201 	orr.w	r2, r1, #1
  40a3ac:	441c      	add	r4, r3
  40a3ae:	4628      	mov	r0, r5
  40a3b0:	605e      	str	r6, [r3, #4]
  40a3b2:	f103 0808 	add.w	r8, r3, #8
  40a3b6:	617c      	str	r4, [r7, #20]
  40a3b8:	613c      	str	r4, [r7, #16]
  40a3ba:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a3be:	f8c4 e008 	str.w	lr, [r4, #8]
  40a3c2:	6062      	str	r2, [r4, #4]
  40a3c4:	5061      	str	r1, [r4, r1]
  40a3c6:	f000 faa5 	bl	40a914 <__malloc_unlock>
  40a3ca:	e6dd      	b.n	40a188 <_malloc_r+0x58>
  40a3cc:	4a24      	ldr	r2, [pc, #144]	; (40a460 <_malloc_r+0x330>)
  40a3ce:	4b25      	ldr	r3, [pc, #148]	; (40a464 <_malloc_r+0x334>)
  40a3d0:	6811      	ldr	r1, [r2, #0]
  40a3d2:	681b      	ldr	r3, [r3, #0]
  40a3d4:	3101      	adds	r1, #1
  40a3d6:	4423      	add	r3, r4
  40a3d8:	f000 8109 	beq.w	40a5ee <_malloc_r+0x4be>
  40a3dc:	f241 010f 	movw	r1, #4111	; 0x100f
  40a3e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40a468 <_malloc_r+0x338>
  40a3e4:	4419      	add	r1, r3
  40a3e6:	ea01 0909 	and.w	r9, r1, r9
  40a3ea:	4628      	mov	r0, r5
  40a3ec:	4649      	mov	r1, r9
  40a3ee:	9201      	str	r2, [sp, #4]
  40a3f0:	f000 ffb8 	bl	40b364 <_sbrk_r>
  40a3f4:	f1b0 3fff 	cmp.w	r0, #4294967295
  40a3f8:	4682      	mov	sl, r0
  40a3fa:	9a01      	ldr	r2, [sp, #4]
  40a3fc:	f000 8101 	beq.w	40a602 <_malloc_r+0x4d2>
  40a400:	1bbb      	subs	r3, r7, r6
  40a402:	eb07 0108 	add.w	r1, r7, r8
  40a406:	4815      	ldr	r0, [pc, #84]	; (40a45c <_malloc_r+0x32c>)
  40a408:	bf18      	it	ne
  40a40a:	2301      	movne	r3, #1
  40a40c:	4551      	cmp	r1, sl
  40a40e:	d967      	bls.n	40a4e0 <_malloc_r+0x3b0>
  40a410:	2b00      	cmp	r3, #0
  40a412:	d065      	beq.n	40a4e0 <_malloc_r+0x3b0>
  40a414:	6887      	ldr	r7, [r0, #8]
  40a416:	687b      	ldr	r3, [r7, #4]
  40a418:	f023 0303 	bic.w	r3, r3, #3
  40a41c:	1b1a      	subs	r2, r3, r4
  40a41e:	2a0f      	cmp	r2, #15
  40a420:	dd02      	ble.n	40a428 <_malloc_r+0x2f8>
  40a422:	429c      	cmp	r4, r3
  40a424:	f67f af7d 	bls.w	40a322 <_malloc_r+0x1f2>
  40a428:	4628      	mov	r0, r5
  40a42a:	f04f 0800 	mov.w	r8, #0
  40a42e:	f000 fa71 	bl	40a914 <__malloc_unlock>
  40a432:	e6a9      	b.n	40a188 <_malloc_r+0x58>
  40a434:	6878      	ldr	r0, [r7, #4]
  40a436:	e708      	b.n	40a24a <_malloc_r+0x11a>
  40a438:	f109 0901 	add.w	r9, r9, #1
  40a43c:	3008      	adds	r0, #8
  40a43e:	f019 0f03 	tst.w	r9, #3
  40a442:	f47f af15 	bne.w	40a270 <_malloc_r+0x140>
  40a446:	e02f      	b.n	40a4a8 <_malloc_r+0x378>
  40a448:	f103 0208 	add.w	r2, r3, #8
  40a44c:	695b      	ldr	r3, [r3, #20]
  40a44e:	429a      	cmp	r2, r3
  40a450:	bf08      	it	eq
  40a452:	f10c 0c02 	addeq.w	ip, ip, #2
  40a456:	f43f aecd 	beq.w	40a1f4 <_malloc_r+0xc4>
  40a45a:	e684      	b.n	40a166 <_malloc_r+0x36>
  40a45c:	204004fc 	.word	0x204004fc
  40a460:	20400908 	.word	0x20400908
  40a464:	204009dc 	.word	0x204009dc
  40a468:	fffff000 	.word	0xfffff000
  40a46c:	18fa      	adds	r2, r7, r3
  40a46e:	46b8      	mov	r8, r7
  40a470:	68f9      	ldr	r1, [r7, #12]
  40a472:	4628      	mov	r0, r5
  40a474:	6853      	ldr	r3, [r2, #4]
  40a476:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40a47a:	f043 0301 	orr.w	r3, r3, #1
  40a47e:	6053      	str	r3, [r2, #4]
  40a480:	60e1      	str	r1, [r4, #12]
  40a482:	608c      	str	r4, [r1, #8]
  40a484:	f000 fa46 	bl	40a914 <__malloc_unlock>
  40a488:	e67e      	b.n	40a188 <_malloc_r+0x58>
  40a48a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40a48e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a492:	e699      	b.n	40a1c8 <_malloc_r+0x98>
  40a494:	0991      	lsrs	r1, r2, #6
  40a496:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40a49a:	0078      	lsls	r0, r7, #1
  40a49c:	e76b      	b.n	40a376 <_malloc_r+0x246>
  40a49e:	f8d8 8000 	ldr.w	r8, [r8]
  40a4a2:	4598      	cmp	r8, r3
  40a4a4:	f040 80e6 	bne.w	40a674 <_malloc_r+0x544>
  40a4a8:	f01c 0f03 	tst.w	ip, #3
  40a4ac:	f1a8 0308 	sub.w	r3, r8, #8
  40a4b0:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a4b4:	d1f3      	bne.n	40a49e <_malloc_r+0x36e>
  40a4b6:	6873      	ldr	r3, [r6, #4]
  40a4b8:	ea23 0301 	bic.w	r3, r3, r1
  40a4bc:	6073      	str	r3, [r6, #4]
  40a4be:	0049      	lsls	r1, r1, #1
  40a4c0:	4299      	cmp	r1, r3
  40a4c2:	f63f af24 	bhi.w	40a30e <_malloc_r+0x1de>
  40a4c6:	2900      	cmp	r1, #0
  40a4c8:	f43f af21 	beq.w	40a30e <_malloc_r+0x1de>
  40a4cc:	420b      	tst	r3, r1
  40a4ce:	46cc      	mov	ip, r9
  40a4d0:	f47f aeca 	bne.w	40a268 <_malloc_r+0x138>
  40a4d4:	0049      	lsls	r1, r1, #1
  40a4d6:	f10c 0c04 	add.w	ip, ip, #4
  40a4da:	420b      	tst	r3, r1
  40a4dc:	d0fa      	beq.n	40a4d4 <_malloc_r+0x3a4>
  40a4de:	e6c3      	b.n	40a268 <_malloc_r+0x138>
  40a4e0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40a680 <_malloc_r+0x550>
  40a4e4:	4551      	cmp	r1, sl
  40a4e6:	f8db 0000 	ldr.w	r0, [fp]
  40a4ea:	4448      	add	r0, r9
  40a4ec:	f8cb 0000 	str.w	r0, [fp]
  40a4f0:	f000 808c 	beq.w	40a60c <_malloc_r+0x4dc>
  40a4f4:	6812      	ldr	r2, [r2, #0]
  40a4f6:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40a684 <_malloc_r+0x554>
  40a4fa:	3201      	adds	r2, #1
  40a4fc:	f000 80a3 	beq.w	40a646 <_malloc_r+0x516>
  40a500:	ebc1 010a 	rsb	r1, r1, sl
  40a504:	4408      	add	r0, r1
  40a506:	f8cb 0000 	str.w	r0, [fp]
  40a50a:	f01a 0107 	ands.w	r1, sl, #7
  40a50e:	d052      	beq.n	40a5b6 <_malloc_r+0x486>
  40a510:	f1c1 0008 	rsb	r0, r1, #8
  40a514:	f241 0208 	movw	r2, #4104	; 0x1008
  40a518:	4482      	add	sl, r0
  40a51a:	1a52      	subs	r2, r2, r1
  40a51c:	eb0a 0109 	add.w	r1, sl, r9
  40a520:	4628      	mov	r0, r5
  40a522:	9301      	str	r3, [sp, #4]
  40a524:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40a528:	ebc1 0902 	rsb	r9, r1, r2
  40a52c:	4649      	mov	r1, r9
  40a52e:	f000 ff19 	bl	40b364 <_sbrk_r>
  40a532:	1c43      	adds	r3, r0, #1
  40a534:	9b01      	ldr	r3, [sp, #4]
  40a536:	d07a      	beq.n	40a62e <_malloc_r+0x4fe>
  40a538:	ebca 0200 	rsb	r2, sl, r0
  40a53c:	444a      	add	r2, r9
  40a53e:	f042 0201 	orr.w	r2, r2, #1
  40a542:	f8db 0000 	ldr.w	r0, [fp]
  40a546:	f8c6 a008 	str.w	sl, [r6, #8]
  40a54a:	4448      	add	r0, r9
  40a54c:	f8ca 2004 	str.w	r2, [sl, #4]
  40a550:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40a680 <_malloc_r+0x550>
  40a554:	f8cb 0000 	str.w	r0, [fp]
  40a558:	b1a3      	cbz	r3, 40a584 <_malloc_r+0x454>
  40a55a:	f1b8 0f0f 	cmp.w	r8, #15
  40a55e:	d937      	bls.n	40a5d0 <_malloc_r+0x4a0>
  40a560:	687b      	ldr	r3, [r7, #4]
  40a562:	f1a8 020c 	sub.w	r2, r8, #12
  40a566:	f04f 0e05 	mov.w	lr, #5
  40a56a:	f022 0207 	bic.w	r2, r2, #7
  40a56e:	f003 0301 	and.w	r3, r3, #1
  40a572:	18b9      	adds	r1, r7, r2
  40a574:	4313      	orrs	r3, r2
  40a576:	2a0f      	cmp	r2, #15
  40a578:	607b      	str	r3, [r7, #4]
  40a57a:	f8c1 e004 	str.w	lr, [r1, #4]
  40a57e:	f8c1 e008 	str.w	lr, [r1, #8]
  40a582:	d858      	bhi.n	40a636 <_malloc_r+0x506>
  40a584:	4b3c      	ldr	r3, [pc, #240]	; (40a678 <_malloc_r+0x548>)
  40a586:	681a      	ldr	r2, [r3, #0]
  40a588:	4290      	cmp	r0, r2
  40a58a:	d900      	bls.n	40a58e <_malloc_r+0x45e>
  40a58c:	6018      	str	r0, [r3, #0]
  40a58e:	4b3b      	ldr	r3, [pc, #236]	; (40a67c <_malloc_r+0x54c>)
  40a590:	68b7      	ldr	r7, [r6, #8]
  40a592:	681a      	ldr	r2, [r3, #0]
  40a594:	4290      	cmp	r0, r2
  40a596:	d900      	bls.n	40a59a <_malloc_r+0x46a>
  40a598:	6018      	str	r0, [r3, #0]
  40a59a:	687b      	ldr	r3, [r7, #4]
  40a59c:	f023 0303 	bic.w	r3, r3, #3
  40a5a0:	e73c      	b.n	40a41c <_malloc_r+0x2ec>
  40a5a2:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40a5a6:	d817      	bhi.n	40a5d8 <_malloc_r+0x4a8>
  40a5a8:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40a5ac:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40a5b0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a5b4:	e608      	b.n	40a1c8 <_malloc_r+0x98>
  40a5b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40a5ba:	e7af      	b.n	40a51c <_malloc_r+0x3ec>
  40a5bc:	10bf      	asrs	r7, r7, #2
  40a5be:	2001      	movs	r0, #1
  40a5c0:	460a      	mov	r2, r1
  40a5c2:	40b8      	lsls	r0, r7
  40a5c4:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40a5c8:	4338      	orrs	r0, r7
  40a5ca:	f8c9 0004 	str.w	r0, [r9, #4]
  40a5ce:	e6e4      	b.n	40a39a <_malloc_r+0x26a>
  40a5d0:	2301      	movs	r3, #1
  40a5d2:	f8ca 3004 	str.w	r3, [sl, #4]
  40a5d6:	e727      	b.n	40a428 <_malloc_r+0x2f8>
  40a5d8:	f240 5354 	movw	r3, #1364	; 0x554
  40a5dc:	459c      	cmp	ip, r3
  40a5de:	d822      	bhi.n	40a626 <_malloc_r+0x4f6>
  40a5e0:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40a5e4:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40a5e8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40a5ec:	e5ec      	b.n	40a1c8 <_malloc_r+0x98>
  40a5ee:	f103 0910 	add.w	r9, r3, #16
  40a5f2:	e6fa      	b.n	40a3ea <_malloc_r+0x2ba>
  40a5f4:	2954      	cmp	r1, #84	; 0x54
  40a5f6:	d829      	bhi.n	40a64c <_malloc_r+0x51c>
  40a5f8:	0b11      	lsrs	r1, r2, #12
  40a5fa:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40a5fe:	0078      	lsls	r0, r7, #1
  40a600:	e6b9      	b.n	40a376 <_malloc_r+0x246>
  40a602:	68b7      	ldr	r7, [r6, #8]
  40a604:	687b      	ldr	r3, [r7, #4]
  40a606:	f023 0303 	bic.w	r3, r3, #3
  40a60a:	e707      	b.n	40a41c <_malloc_r+0x2ec>
  40a60c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40a610:	f1be 0f00 	cmp.w	lr, #0
  40a614:	f47f af6e 	bne.w	40a4f4 <_malloc_r+0x3c4>
  40a618:	eb09 0308 	add.w	r3, r9, r8
  40a61c:	68b2      	ldr	r2, [r6, #8]
  40a61e:	f043 0301 	orr.w	r3, r3, #1
  40a622:	6053      	str	r3, [r2, #4]
  40a624:	e7ae      	b.n	40a584 <_malloc_r+0x454>
  40a626:	20fc      	movs	r0, #252	; 0xfc
  40a628:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40a62c:	e5cc      	b.n	40a1c8 <_malloc_r+0x98>
  40a62e:	2201      	movs	r2, #1
  40a630:	f04f 0900 	mov.w	r9, #0
  40a634:	e785      	b.n	40a542 <_malloc_r+0x412>
  40a636:	4628      	mov	r0, r5
  40a638:	f107 0108 	add.w	r1, r7, #8
  40a63c:	f7ff fa68 	bl	409b10 <_free_r>
  40a640:	f8d9 0000 	ldr.w	r0, [r9]
  40a644:	e79e      	b.n	40a584 <_malloc_r+0x454>
  40a646:	f8ce a000 	str.w	sl, [lr]
  40a64a:	e75e      	b.n	40a50a <_malloc_r+0x3da>
  40a64c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40a650:	d804      	bhi.n	40a65c <_malloc_r+0x52c>
  40a652:	0bd1      	lsrs	r1, r2, #15
  40a654:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40a658:	0078      	lsls	r0, r7, #1
  40a65a:	e68c      	b.n	40a376 <_malloc_r+0x246>
  40a65c:	f240 5054 	movw	r0, #1364	; 0x554
  40a660:	4281      	cmp	r1, r0
  40a662:	d804      	bhi.n	40a66e <_malloc_r+0x53e>
  40a664:	0c91      	lsrs	r1, r2, #18
  40a666:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40a66a:	0078      	lsls	r0, r7, #1
  40a66c:	e683      	b.n	40a376 <_malloc_r+0x246>
  40a66e:	20fc      	movs	r0, #252	; 0xfc
  40a670:	277e      	movs	r7, #126	; 0x7e
  40a672:	e680      	b.n	40a376 <_malloc_r+0x246>
  40a674:	6873      	ldr	r3, [r6, #4]
  40a676:	e722      	b.n	40a4be <_malloc_r+0x38e>
  40a678:	204009d8 	.word	0x204009d8
  40a67c:	204009d4 	.word	0x204009d4
  40a680:	204009e0 	.word	0x204009e0
  40a684:	20400908 	.word	0x20400908

0040a688 <memchr>:
  40a688:	0783      	lsls	r3, r0, #30
  40a68a:	b2c9      	uxtb	r1, r1
  40a68c:	b470      	push	{r4, r5, r6}
  40a68e:	d03f      	beq.n	40a710 <memchr+0x88>
  40a690:	1e54      	subs	r4, r2, #1
  40a692:	2a00      	cmp	r2, #0
  40a694:	d03e      	beq.n	40a714 <memchr+0x8c>
  40a696:	7803      	ldrb	r3, [r0, #0]
  40a698:	428b      	cmp	r3, r1
  40a69a:	bf18      	it	ne
  40a69c:	1c43      	addne	r3, r0, #1
  40a69e:	d105      	bne.n	40a6ac <memchr+0x24>
  40a6a0:	e01c      	b.n	40a6dc <memchr+0x54>
  40a6a2:	b1ec      	cbz	r4, 40a6e0 <memchr+0x58>
  40a6a4:	7802      	ldrb	r2, [r0, #0]
  40a6a6:	3c01      	subs	r4, #1
  40a6a8:	428a      	cmp	r2, r1
  40a6aa:	d017      	beq.n	40a6dc <memchr+0x54>
  40a6ac:	f013 0f03 	tst.w	r3, #3
  40a6b0:	4618      	mov	r0, r3
  40a6b2:	f103 0301 	add.w	r3, r3, #1
  40a6b6:	d1f4      	bne.n	40a6a2 <memchr+0x1a>
  40a6b8:	2c03      	cmp	r4, #3
  40a6ba:	d814      	bhi.n	40a6e6 <memchr+0x5e>
  40a6bc:	b184      	cbz	r4, 40a6e0 <memchr+0x58>
  40a6be:	7803      	ldrb	r3, [r0, #0]
  40a6c0:	428b      	cmp	r3, r1
  40a6c2:	d00b      	beq.n	40a6dc <memchr+0x54>
  40a6c4:	1905      	adds	r5, r0, r4
  40a6c6:	1c43      	adds	r3, r0, #1
  40a6c8:	e002      	b.n	40a6d0 <memchr+0x48>
  40a6ca:	7802      	ldrb	r2, [r0, #0]
  40a6cc:	428a      	cmp	r2, r1
  40a6ce:	d005      	beq.n	40a6dc <memchr+0x54>
  40a6d0:	42ab      	cmp	r3, r5
  40a6d2:	4618      	mov	r0, r3
  40a6d4:	f103 0301 	add.w	r3, r3, #1
  40a6d8:	d1f7      	bne.n	40a6ca <memchr+0x42>
  40a6da:	2000      	movs	r0, #0
  40a6dc:	bc70      	pop	{r4, r5, r6}
  40a6de:	4770      	bx	lr
  40a6e0:	4620      	mov	r0, r4
  40a6e2:	bc70      	pop	{r4, r5, r6}
  40a6e4:	4770      	bx	lr
  40a6e6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40a6ea:	4602      	mov	r2, r0
  40a6ec:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40a6f0:	4610      	mov	r0, r2
  40a6f2:	3204      	adds	r2, #4
  40a6f4:	6803      	ldr	r3, [r0, #0]
  40a6f6:	4073      	eors	r3, r6
  40a6f8:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40a6fc:	ea25 0303 	bic.w	r3, r5, r3
  40a700:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40a704:	d1da      	bne.n	40a6bc <memchr+0x34>
  40a706:	3c04      	subs	r4, #4
  40a708:	4610      	mov	r0, r2
  40a70a:	2c03      	cmp	r4, #3
  40a70c:	d8f0      	bhi.n	40a6f0 <memchr+0x68>
  40a70e:	e7d5      	b.n	40a6bc <memchr+0x34>
  40a710:	4614      	mov	r4, r2
  40a712:	e7d1      	b.n	40a6b8 <memchr+0x30>
  40a714:	4610      	mov	r0, r2
  40a716:	e7e1      	b.n	40a6dc <memchr+0x54>

0040a718 <memcpy>:
  40a718:	4684      	mov	ip, r0
  40a71a:	ea41 0300 	orr.w	r3, r1, r0
  40a71e:	f013 0303 	ands.w	r3, r3, #3
  40a722:	d16d      	bne.n	40a800 <memcpy+0xe8>
  40a724:	3a40      	subs	r2, #64	; 0x40
  40a726:	d341      	bcc.n	40a7ac <memcpy+0x94>
  40a728:	f851 3b04 	ldr.w	r3, [r1], #4
  40a72c:	f840 3b04 	str.w	r3, [r0], #4
  40a730:	f851 3b04 	ldr.w	r3, [r1], #4
  40a734:	f840 3b04 	str.w	r3, [r0], #4
  40a738:	f851 3b04 	ldr.w	r3, [r1], #4
  40a73c:	f840 3b04 	str.w	r3, [r0], #4
  40a740:	f851 3b04 	ldr.w	r3, [r1], #4
  40a744:	f840 3b04 	str.w	r3, [r0], #4
  40a748:	f851 3b04 	ldr.w	r3, [r1], #4
  40a74c:	f840 3b04 	str.w	r3, [r0], #4
  40a750:	f851 3b04 	ldr.w	r3, [r1], #4
  40a754:	f840 3b04 	str.w	r3, [r0], #4
  40a758:	f851 3b04 	ldr.w	r3, [r1], #4
  40a75c:	f840 3b04 	str.w	r3, [r0], #4
  40a760:	f851 3b04 	ldr.w	r3, [r1], #4
  40a764:	f840 3b04 	str.w	r3, [r0], #4
  40a768:	f851 3b04 	ldr.w	r3, [r1], #4
  40a76c:	f840 3b04 	str.w	r3, [r0], #4
  40a770:	f851 3b04 	ldr.w	r3, [r1], #4
  40a774:	f840 3b04 	str.w	r3, [r0], #4
  40a778:	f851 3b04 	ldr.w	r3, [r1], #4
  40a77c:	f840 3b04 	str.w	r3, [r0], #4
  40a780:	f851 3b04 	ldr.w	r3, [r1], #4
  40a784:	f840 3b04 	str.w	r3, [r0], #4
  40a788:	f851 3b04 	ldr.w	r3, [r1], #4
  40a78c:	f840 3b04 	str.w	r3, [r0], #4
  40a790:	f851 3b04 	ldr.w	r3, [r1], #4
  40a794:	f840 3b04 	str.w	r3, [r0], #4
  40a798:	f851 3b04 	ldr.w	r3, [r1], #4
  40a79c:	f840 3b04 	str.w	r3, [r0], #4
  40a7a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7a4:	f840 3b04 	str.w	r3, [r0], #4
  40a7a8:	3a40      	subs	r2, #64	; 0x40
  40a7aa:	d2bd      	bcs.n	40a728 <memcpy+0x10>
  40a7ac:	3230      	adds	r2, #48	; 0x30
  40a7ae:	d311      	bcc.n	40a7d4 <memcpy+0xbc>
  40a7b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7b4:	f840 3b04 	str.w	r3, [r0], #4
  40a7b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7bc:	f840 3b04 	str.w	r3, [r0], #4
  40a7c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7c4:	f840 3b04 	str.w	r3, [r0], #4
  40a7c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7cc:	f840 3b04 	str.w	r3, [r0], #4
  40a7d0:	3a10      	subs	r2, #16
  40a7d2:	d2ed      	bcs.n	40a7b0 <memcpy+0x98>
  40a7d4:	320c      	adds	r2, #12
  40a7d6:	d305      	bcc.n	40a7e4 <memcpy+0xcc>
  40a7d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a7dc:	f840 3b04 	str.w	r3, [r0], #4
  40a7e0:	3a04      	subs	r2, #4
  40a7e2:	d2f9      	bcs.n	40a7d8 <memcpy+0xc0>
  40a7e4:	3204      	adds	r2, #4
  40a7e6:	d008      	beq.n	40a7fa <memcpy+0xe2>
  40a7e8:	07d2      	lsls	r2, r2, #31
  40a7ea:	bf1c      	itt	ne
  40a7ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a7f0:	f800 3b01 	strbne.w	r3, [r0], #1
  40a7f4:	d301      	bcc.n	40a7fa <memcpy+0xe2>
  40a7f6:	880b      	ldrh	r3, [r1, #0]
  40a7f8:	8003      	strh	r3, [r0, #0]
  40a7fa:	4660      	mov	r0, ip
  40a7fc:	4770      	bx	lr
  40a7fe:	bf00      	nop
  40a800:	2a08      	cmp	r2, #8
  40a802:	d313      	bcc.n	40a82c <memcpy+0x114>
  40a804:	078b      	lsls	r3, r1, #30
  40a806:	d08d      	beq.n	40a724 <memcpy+0xc>
  40a808:	f010 0303 	ands.w	r3, r0, #3
  40a80c:	d08a      	beq.n	40a724 <memcpy+0xc>
  40a80e:	f1c3 0304 	rsb	r3, r3, #4
  40a812:	1ad2      	subs	r2, r2, r3
  40a814:	07db      	lsls	r3, r3, #31
  40a816:	bf1c      	itt	ne
  40a818:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a81c:	f800 3b01 	strbne.w	r3, [r0], #1
  40a820:	d380      	bcc.n	40a724 <memcpy+0xc>
  40a822:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a826:	f820 3b02 	strh.w	r3, [r0], #2
  40a82a:	e77b      	b.n	40a724 <memcpy+0xc>
  40a82c:	3a04      	subs	r2, #4
  40a82e:	d3d9      	bcc.n	40a7e4 <memcpy+0xcc>
  40a830:	3a01      	subs	r2, #1
  40a832:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a836:	f800 3b01 	strb.w	r3, [r0], #1
  40a83a:	d2f9      	bcs.n	40a830 <memcpy+0x118>
  40a83c:	780b      	ldrb	r3, [r1, #0]
  40a83e:	7003      	strb	r3, [r0, #0]
  40a840:	784b      	ldrb	r3, [r1, #1]
  40a842:	7043      	strb	r3, [r0, #1]
  40a844:	788b      	ldrb	r3, [r1, #2]
  40a846:	7083      	strb	r3, [r0, #2]
  40a848:	4660      	mov	r0, ip
  40a84a:	4770      	bx	lr

0040a84c <memmove>:
  40a84c:	4288      	cmp	r0, r1
  40a84e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a850:	d90d      	bls.n	40a86e <memmove+0x22>
  40a852:	188b      	adds	r3, r1, r2
  40a854:	4298      	cmp	r0, r3
  40a856:	d20a      	bcs.n	40a86e <memmove+0x22>
  40a858:	1881      	adds	r1, r0, r2
  40a85a:	2a00      	cmp	r2, #0
  40a85c:	d053      	beq.n	40a906 <memmove+0xba>
  40a85e:	1a9a      	subs	r2, r3, r2
  40a860:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a864:	4293      	cmp	r3, r2
  40a866:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40a86a:	d1f9      	bne.n	40a860 <memmove+0x14>
  40a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a86e:	2a0f      	cmp	r2, #15
  40a870:	d947      	bls.n	40a902 <memmove+0xb6>
  40a872:	ea40 0301 	orr.w	r3, r0, r1
  40a876:	079b      	lsls	r3, r3, #30
  40a878:	d146      	bne.n	40a908 <memmove+0xbc>
  40a87a:	f100 0410 	add.w	r4, r0, #16
  40a87e:	f101 0310 	add.w	r3, r1, #16
  40a882:	4615      	mov	r5, r2
  40a884:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a888:	3d10      	subs	r5, #16
  40a88a:	3310      	adds	r3, #16
  40a88c:	3410      	adds	r4, #16
  40a88e:	f844 6c20 	str.w	r6, [r4, #-32]
  40a892:	2d0f      	cmp	r5, #15
  40a894:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  40a898:	f844 6c1c 	str.w	r6, [r4, #-28]
  40a89c:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40a8a0:	f844 6c18 	str.w	r6, [r4, #-24]
  40a8a4:	f853 6c14 	ldr.w	r6, [r3, #-20]
  40a8a8:	f844 6c14 	str.w	r6, [r4, #-20]
  40a8ac:	d8ea      	bhi.n	40a884 <memmove+0x38>
  40a8ae:	f1a2 0310 	sub.w	r3, r2, #16
  40a8b2:	f002 0e0f 	and.w	lr, r2, #15
  40a8b6:	f023 030f 	bic.w	r3, r3, #15
  40a8ba:	f1be 0f03 	cmp.w	lr, #3
  40a8be:	f103 0310 	add.w	r3, r3, #16
  40a8c2:	4419      	add	r1, r3
  40a8c4:	4403      	add	r3, r0
  40a8c6:	d921      	bls.n	40a90c <memmove+0xc0>
  40a8c8:	1f1e      	subs	r6, r3, #4
  40a8ca:	460d      	mov	r5, r1
  40a8cc:	4674      	mov	r4, lr
  40a8ce:	3c04      	subs	r4, #4
  40a8d0:	f855 7b04 	ldr.w	r7, [r5], #4
  40a8d4:	2c03      	cmp	r4, #3
  40a8d6:	f846 7f04 	str.w	r7, [r6, #4]!
  40a8da:	d8f8      	bhi.n	40a8ce <memmove+0x82>
  40a8dc:	f1ae 0404 	sub.w	r4, lr, #4
  40a8e0:	f002 0203 	and.w	r2, r2, #3
  40a8e4:	f024 0403 	bic.w	r4, r4, #3
  40a8e8:	3404      	adds	r4, #4
  40a8ea:	4423      	add	r3, r4
  40a8ec:	4421      	add	r1, r4
  40a8ee:	b152      	cbz	r2, 40a906 <memmove+0xba>
  40a8f0:	3b01      	subs	r3, #1
  40a8f2:	440a      	add	r2, r1
  40a8f4:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a8f8:	4291      	cmp	r1, r2
  40a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a8fe:	d1f9      	bne.n	40a8f4 <memmove+0xa8>
  40a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a902:	4603      	mov	r3, r0
  40a904:	e7f3      	b.n	40a8ee <memmove+0xa2>
  40a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a908:	4603      	mov	r3, r0
  40a90a:	e7f1      	b.n	40a8f0 <memmove+0xa4>
  40a90c:	4672      	mov	r2, lr
  40a90e:	e7ee      	b.n	40a8ee <memmove+0xa2>

0040a910 <__malloc_lock>:
  40a910:	4770      	bx	lr
  40a912:	bf00      	nop

0040a914 <__malloc_unlock>:
  40a914:	4770      	bx	lr
  40a916:	bf00      	nop

0040a918 <_Balloc>:
  40a918:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40a91a:	b538      	push	{r3, r4, r5, lr}
  40a91c:	4605      	mov	r5, r0
  40a91e:	460c      	mov	r4, r1
  40a920:	b152      	cbz	r2, 40a938 <_Balloc+0x20>
  40a922:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40a926:	b18b      	cbz	r3, 40a94c <_Balloc+0x34>
  40a928:	6819      	ldr	r1, [r3, #0]
  40a92a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40a92e:	2200      	movs	r2, #0
  40a930:	4618      	mov	r0, r3
  40a932:	611a      	str	r2, [r3, #16]
  40a934:	60da      	str	r2, [r3, #12]
  40a936:	bd38      	pop	{r3, r4, r5, pc}
  40a938:	2221      	movs	r2, #33	; 0x21
  40a93a:	2104      	movs	r1, #4
  40a93c:	f000 fe58 	bl	40b5f0 <_calloc_r>
  40a940:	64e8      	str	r0, [r5, #76]	; 0x4c
  40a942:	4602      	mov	r2, r0
  40a944:	2800      	cmp	r0, #0
  40a946:	d1ec      	bne.n	40a922 <_Balloc+0xa>
  40a948:	2000      	movs	r0, #0
  40a94a:	bd38      	pop	{r3, r4, r5, pc}
  40a94c:	2101      	movs	r1, #1
  40a94e:	4628      	mov	r0, r5
  40a950:	fa01 f504 	lsl.w	r5, r1, r4
  40a954:	1d6a      	adds	r2, r5, #5
  40a956:	0092      	lsls	r2, r2, #2
  40a958:	f000 fe4a 	bl	40b5f0 <_calloc_r>
  40a95c:	4603      	mov	r3, r0
  40a95e:	2800      	cmp	r0, #0
  40a960:	d0f2      	beq.n	40a948 <_Balloc+0x30>
  40a962:	6044      	str	r4, [r0, #4]
  40a964:	6085      	str	r5, [r0, #8]
  40a966:	e7e2      	b.n	40a92e <_Balloc+0x16>

0040a968 <_Bfree>:
  40a968:	b131      	cbz	r1, 40a978 <_Bfree+0x10>
  40a96a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a96c:	684a      	ldr	r2, [r1, #4]
  40a96e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40a972:	6008      	str	r0, [r1, #0]
  40a974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40a978:	4770      	bx	lr
  40a97a:	bf00      	nop

0040a97c <__multadd>:
  40a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a97e:	460c      	mov	r4, r1
  40a980:	b083      	sub	sp, #12
  40a982:	4605      	mov	r5, r0
  40a984:	690e      	ldr	r6, [r1, #16]
  40a986:	f101 0e14 	add.w	lr, r1, #20
  40a98a:	2700      	movs	r7, #0
  40a98c:	f8de 1000 	ldr.w	r1, [lr]
  40a990:	3701      	adds	r7, #1
  40a992:	b288      	uxth	r0, r1
  40a994:	42be      	cmp	r6, r7
  40a996:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40a99a:	fb02 3300 	mla	r3, r2, r0, r3
  40a99e:	fb02 f101 	mul.w	r1, r2, r1
  40a9a2:	b298      	uxth	r0, r3
  40a9a4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  40a9a8:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  40a9ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40a9b0:	f84e 1b04 	str.w	r1, [lr], #4
  40a9b4:	dcea      	bgt.n	40a98c <__multadd+0x10>
  40a9b6:	b13b      	cbz	r3, 40a9c8 <__multadd+0x4c>
  40a9b8:	68a2      	ldr	r2, [r4, #8]
  40a9ba:	4296      	cmp	r6, r2
  40a9bc:	da07      	bge.n	40a9ce <__multadd+0x52>
  40a9be:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40a9c2:	3601      	adds	r6, #1
  40a9c4:	6153      	str	r3, [r2, #20]
  40a9c6:	6126      	str	r6, [r4, #16]
  40a9c8:	4620      	mov	r0, r4
  40a9ca:	b003      	add	sp, #12
  40a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a9ce:	6861      	ldr	r1, [r4, #4]
  40a9d0:	4628      	mov	r0, r5
  40a9d2:	9301      	str	r3, [sp, #4]
  40a9d4:	3101      	adds	r1, #1
  40a9d6:	f7ff ff9f 	bl	40a918 <_Balloc>
  40a9da:	6922      	ldr	r2, [r4, #16]
  40a9dc:	f104 010c 	add.w	r1, r4, #12
  40a9e0:	4607      	mov	r7, r0
  40a9e2:	3202      	adds	r2, #2
  40a9e4:	300c      	adds	r0, #12
  40a9e6:	0092      	lsls	r2, r2, #2
  40a9e8:	f7ff fe96 	bl	40a718 <memcpy>
  40a9ec:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40a9ee:	6861      	ldr	r1, [r4, #4]
  40a9f0:	9b01      	ldr	r3, [sp, #4]
  40a9f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40a9f6:	6020      	str	r0, [r4, #0]
  40a9f8:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40a9fc:	463c      	mov	r4, r7
  40a9fe:	e7de      	b.n	40a9be <__multadd+0x42>

0040aa00 <__hi0bits>:
  40aa00:	4b0f      	ldr	r3, [pc, #60]	; (40aa40 <__hi0bits+0x40>)
  40aa02:	4003      	ands	r3, r0
  40aa04:	b9b3      	cbnz	r3, 40aa34 <__hi0bits+0x34>
  40aa06:	0400      	lsls	r0, r0, #16
  40aa08:	2310      	movs	r3, #16
  40aa0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40aa0e:	d101      	bne.n	40aa14 <__hi0bits+0x14>
  40aa10:	3308      	adds	r3, #8
  40aa12:	0200      	lsls	r0, r0, #8
  40aa14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40aa18:	d101      	bne.n	40aa1e <__hi0bits+0x1e>
  40aa1a:	3304      	adds	r3, #4
  40aa1c:	0100      	lsls	r0, r0, #4
  40aa1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40aa22:	d101      	bne.n	40aa28 <__hi0bits+0x28>
  40aa24:	3302      	adds	r3, #2
  40aa26:	0080      	lsls	r0, r0, #2
  40aa28:	2800      	cmp	r0, #0
  40aa2a:	db07      	blt.n	40aa3c <__hi0bits+0x3c>
  40aa2c:	0042      	lsls	r2, r0, #1
  40aa2e:	d403      	bmi.n	40aa38 <__hi0bits+0x38>
  40aa30:	2020      	movs	r0, #32
  40aa32:	4770      	bx	lr
  40aa34:	2300      	movs	r3, #0
  40aa36:	e7e8      	b.n	40aa0a <__hi0bits+0xa>
  40aa38:	1c58      	adds	r0, r3, #1
  40aa3a:	4770      	bx	lr
  40aa3c:	4618      	mov	r0, r3
  40aa3e:	4770      	bx	lr
  40aa40:	ffff0000 	.word	0xffff0000

0040aa44 <__lo0bits>:
  40aa44:	6803      	ldr	r3, [r0, #0]
  40aa46:	f013 0207 	ands.w	r2, r3, #7
  40aa4a:	d008      	beq.n	40aa5e <__lo0bits+0x1a>
  40aa4c:	07d9      	lsls	r1, r3, #31
  40aa4e:	d422      	bmi.n	40aa96 <__lo0bits+0x52>
  40aa50:	079a      	lsls	r2, r3, #30
  40aa52:	d423      	bmi.n	40aa9c <__lo0bits+0x58>
  40aa54:	089b      	lsrs	r3, r3, #2
  40aa56:	2202      	movs	r2, #2
  40aa58:	6003      	str	r3, [r0, #0]
  40aa5a:	4610      	mov	r0, r2
  40aa5c:	4770      	bx	lr
  40aa5e:	b299      	uxth	r1, r3
  40aa60:	b909      	cbnz	r1, 40aa66 <__lo0bits+0x22>
  40aa62:	0c1b      	lsrs	r3, r3, #16
  40aa64:	2210      	movs	r2, #16
  40aa66:	f013 0fff 	tst.w	r3, #255	; 0xff
  40aa6a:	d101      	bne.n	40aa70 <__lo0bits+0x2c>
  40aa6c:	3208      	adds	r2, #8
  40aa6e:	0a1b      	lsrs	r3, r3, #8
  40aa70:	0719      	lsls	r1, r3, #28
  40aa72:	d101      	bne.n	40aa78 <__lo0bits+0x34>
  40aa74:	3204      	adds	r2, #4
  40aa76:	091b      	lsrs	r3, r3, #4
  40aa78:	0799      	lsls	r1, r3, #30
  40aa7a:	d101      	bne.n	40aa80 <__lo0bits+0x3c>
  40aa7c:	3202      	adds	r2, #2
  40aa7e:	089b      	lsrs	r3, r3, #2
  40aa80:	07d9      	lsls	r1, r3, #31
  40aa82:	d405      	bmi.n	40aa90 <__lo0bits+0x4c>
  40aa84:	085b      	lsrs	r3, r3, #1
  40aa86:	d102      	bne.n	40aa8e <__lo0bits+0x4a>
  40aa88:	2220      	movs	r2, #32
  40aa8a:	4610      	mov	r0, r2
  40aa8c:	4770      	bx	lr
  40aa8e:	3201      	adds	r2, #1
  40aa90:	6003      	str	r3, [r0, #0]
  40aa92:	4610      	mov	r0, r2
  40aa94:	4770      	bx	lr
  40aa96:	2200      	movs	r2, #0
  40aa98:	4610      	mov	r0, r2
  40aa9a:	4770      	bx	lr
  40aa9c:	085b      	lsrs	r3, r3, #1
  40aa9e:	2201      	movs	r2, #1
  40aaa0:	6003      	str	r3, [r0, #0]
  40aaa2:	4610      	mov	r0, r2
  40aaa4:	4770      	bx	lr
  40aaa6:	bf00      	nop

0040aaa8 <__i2b>:
  40aaa8:	b510      	push	{r4, lr}
  40aaaa:	460c      	mov	r4, r1
  40aaac:	2101      	movs	r1, #1
  40aaae:	f7ff ff33 	bl	40a918 <_Balloc>
  40aab2:	2201      	movs	r2, #1
  40aab4:	6144      	str	r4, [r0, #20]
  40aab6:	6102      	str	r2, [r0, #16]
  40aab8:	bd10      	pop	{r4, pc}
  40aaba:	bf00      	nop

0040aabc <__multiply>:
  40aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aac0:	690e      	ldr	r6, [r1, #16]
  40aac2:	b085      	sub	sp, #20
  40aac4:	6915      	ldr	r5, [r2, #16]
  40aac6:	460c      	mov	r4, r1
  40aac8:	4691      	mov	r9, r2
  40aaca:	42ae      	cmp	r6, r5
  40aacc:	f2c0 8094 	blt.w	40abf8 <__multiply+0x13c>
  40aad0:	462b      	mov	r3, r5
  40aad2:	4635      	mov	r5, r6
  40aad4:	461e      	mov	r6, r3
  40aad6:	eb05 0806 	add.w	r8, r5, r6
  40aada:	68a3      	ldr	r3, [r4, #8]
  40aadc:	6861      	ldr	r1, [r4, #4]
  40aade:	4598      	cmp	r8, r3
  40aae0:	dd00      	ble.n	40aae4 <__multiply+0x28>
  40aae2:	3101      	adds	r1, #1
  40aae4:	f7ff ff18 	bl	40a918 <_Balloc>
  40aae8:	f100 0a14 	add.w	sl, r0, #20
  40aaec:	9001      	str	r0, [sp, #4]
  40aaee:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40aaf2:	45da      	cmp	sl, fp
  40aaf4:	d205      	bcs.n	40ab02 <__multiply+0x46>
  40aaf6:	4653      	mov	r3, sl
  40aaf8:	2100      	movs	r1, #0
  40aafa:	f843 1b04 	str.w	r1, [r3], #4
  40aafe:	459b      	cmp	fp, r3
  40ab00:	d8fb      	bhi.n	40aafa <__multiply+0x3e>
  40ab02:	f109 0914 	add.w	r9, r9, #20
  40ab06:	f104 0314 	add.w	r3, r4, #20
  40ab0a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40ab0e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40ab12:	4591      	cmp	r9, r2
  40ab14:	d25b      	bcs.n	40abce <__multiply+0x112>
  40ab16:	f8cd b008 	str.w	fp, [sp, #8]
  40ab1a:	4693      	mov	fp, r2
  40ab1c:	f8cd 800c 	str.w	r8, [sp, #12]
  40ab20:	4698      	mov	r8, r3
  40ab22:	f859 6b04 	ldr.w	r6, [r9], #4
  40ab26:	fa1f fe86 	uxth.w	lr, r6
  40ab2a:	f1be 0f00 	cmp.w	lr, #0
  40ab2e:	d021      	beq.n	40ab74 <__multiply+0xb8>
  40ab30:	4647      	mov	r7, r8
  40ab32:	4656      	mov	r6, sl
  40ab34:	2100      	movs	r1, #0
  40ab36:	e000      	b.n	40ab3a <__multiply+0x7e>
  40ab38:	4626      	mov	r6, r4
  40ab3a:	f857 2b04 	ldr.w	r2, [r7], #4
  40ab3e:	4634      	mov	r4, r6
  40ab40:	6835      	ldr	r5, [r6, #0]
  40ab42:	b290      	uxth	r0, r2
  40ab44:	45bc      	cmp	ip, r7
  40ab46:	b2ab      	uxth	r3, r5
  40ab48:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40ab4c:	fb0e 3000 	mla	r0, lr, r0, r3
  40ab50:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40ab54:	4401      	add	r1, r0
  40ab56:	fb0e 3302 	mla	r3, lr, r2, r3
  40ab5a:	b28a      	uxth	r2, r1
  40ab5c:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40ab60:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40ab64:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40ab68:	f844 3b04 	str.w	r3, [r4], #4
  40ab6c:	d8e4      	bhi.n	40ab38 <__multiply+0x7c>
  40ab6e:	6071      	str	r1, [r6, #4]
  40ab70:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40ab74:	0c36      	lsrs	r6, r6, #16
  40ab76:	d022      	beq.n	40abbe <__multiply+0x102>
  40ab78:	f8da 3000 	ldr.w	r3, [sl]
  40ab7c:	2700      	movs	r7, #0
  40ab7e:	4655      	mov	r5, sl
  40ab80:	4640      	mov	r0, r8
  40ab82:	461a      	mov	r2, r3
  40ab84:	46be      	mov	lr, r7
  40ab86:	e000      	b.n	40ab8a <__multiply+0xce>
  40ab88:	4625      	mov	r5, r4
  40ab8a:	8807      	ldrh	r7, [r0, #0]
  40ab8c:	0c12      	lsrs	r2, r2, #16
  40ab8e:	b299      	uxth	r1, r3
  40ab90:	462c      	mov	r4, r5
  40ab92:	fb06 2207 	mla	r2, r6, r7, r2
  40ab96:	eb02 070e 	add.w	r7, r2, lr
  40ab9a:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40ab9e:	f844 3b04 	str.w	r3, [r4], #4
  40aba2:	f850 1b04 	ldr.w	r1, [r0], #4
  40aba6:	686a      	ldr	r2, [r5, #4]
  40aba8:	0c09      	lsrs	r1, r1, #16
  40abaa:	4584      	cmp	ip, r0
  40abac:	b293      	uxth	r3, r2
  40abae:	fb06 3101 	mla	r1, r6, r1, r3
  40abb2:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  40abb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40abba:	d8e5      	bhi.n	40ab88 <__multiply+0xcc>
  40abbc:	606b      	str	r3, [r5, #4]
  40abbe:	45cb      	cmp	fp, r9
  40abc0:	f10a 0a04 	add.w	sl, sl, #4
  40abc4:	d8ad      	bhi.n	40ab22 <__multiply+0x66>
  40abc6:	f8dd b008 	ldr.w	fp, [sp, #8]
  40abca:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40abce:	f1b8 0f00 	cmp.w	r8, #0
  40abd2:	dd0b      	ble.n	40abec <__multiply+0x130>
  40abd4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  40abd8:	f1ab 0b04 	sub.w	fp, fp, #4
  40abdc:	b11b      	cbz	r3, 40abe6 <__multiply+0x12a>
  40abde:	e005      	b.n	40abec <__multiply+0x130>
  40abe0:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  40abe4:	b913      	cbnz	r3, 40abec <__multiply+0x130>
  40abe6:	f1b8 0801 	subs.w	r8, r8, #1
  40abea:	d1f9      	bne.n	40abe0 <__multiply+0x124>
  40abec:	9801      	ldr	r0, [sp, #4]
  40abee:	f8c0 8010 	str.w	r8, [r0, #16]
  40abf2:	b005      	add	sp, #20
  40abf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40abf8:	4614      	mov	r4, r2
  40abfa:	4689      	mov	r9, r1
  40abfc:	e76b      	b.n	40aad6 <__multiply+0x1a>
  40abfe:	bf00      	nop

0040ac00 <__pow5mult>:
  40ac00:	f012 0303 	ands.w	r3, r2, #3
  40ac04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ac08:	4614      	mov	r4, r2
  40ac0a:	4607      	mov	r7, r0
  40ac0c:	460e      	mov	r6, r1
  40ac0e:	d12d      	bne.n	40ac6c <__pow5mult+0x6c>
  40ac10:	10a4      	asrs	r4, r4, #2
  40ac12:	d01c      	beq.n	40ac4e <__pow5mult+0x4e>
  40ac14:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40ac16:	b395      	cbz	r5, 40ac7e <__pow5mult+0x7e>
  40ac18:	07e3      	lsls	r3, r4, #31
  40ac1a:	f04f 0800 	mov.w	r8, #0
  40ac1e:	d406      	bmi.n	40ac2e <__pow5mult+0x2e>
  40ac20:	1064      	asrs	r4, r4, #1
  40ac22:	d014      	beq.n	40ac4e <__pow5mult+0x4e>
  40ac24:	6828      	ldr	r0, [r5, #0]
  40ac26:	b1a8      	cbz	r0, 40ac54 <__pow5mult+0x54>
  40ac28:	4605      	mov	r5, r0
  40ac2a:	07e3      	lsls	r3, r4, #31
  40ac2c:	d5f8      	bpl.n	40ac20 <__pow5mult+0x20>
  40ac2e:	4638      	mov	r0, r7
  40ac30:	4631      	mov	r1, r6
  40ac32:	462a      	mov	r2, r5
  40ac34:	f7ff ff42 	bl	40aabc <__multiply>
  40ac38:	b1b6      	cbz	r6, 40ac68 <__pow5mult+0x68>
  40ac3a:	6872      	ldr	r2, [r6, #4]
  40ac3c:	1064      	asrs	r4, r4, #1
  40ac3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ac40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ac44:	6031      	str	r1, [r6, #0]
  40ac46:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ac4a:	4606      	mov	r6, r0
  40ac4c:	d1ea      	bne.n	40ac24 <__pow5mult+0x24>
  40ac4e:	4630      	mov	r0, r6
  40ac50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ac54:	4629      	mov	r1, r5
  40ac56:	462a      	mov	r2, r5
  40ac58:	4638      	mov	r0, r7
  40ac5a:	f7ff ff2f 	bl	40aabc <__multiply>
  40ac5e:	6028      	str	r0, [r5, #0]
  40ac60:	f8c0 8000 	str.w	r8, [r0]
  40ac64:	4605      	mov	r5, r0
  40ac66:	e7e0      	b.n	40ac2a <__pow5mult+0x2a>
  40ac68:	4606      	mov	r6, r0
  40ac6a:	e7d9      	b.n	40ac20 <__pow5mult+0x20>
  40ac6c:	1e5a      	subs	r2, r3, #1
  40ac6e:	4d0b      	ldr	r5, [pc, #44]	; (40ac9c <__pow5mult+0x9c>)
  40ac70:	2300      	movs	r3, #0
  40ac72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ac76:	f7ff fe81 	bl	40a97c <__multadd>
  40ac7a:	4606      	mov	r6, r0
  40ac7c:	e7c8      	b.n	40ac10 <__pow5mult+0x10>
  40ac7e:	2101      	movs	r1, #1
  40ac80:	4638      	mov	r0, r7
  40ac82:	f7ff fe49 	bl	40a918 <_Balloc>
  40ac86:	f240 2171 	movw	r1, #625	; 0x271
  40ac8a:	2201      	movs	r2, #1
  40ac8c:	2300      	movs	r3, #0
  40ac8e:	6141      	str	r1, [r0, #20]
  40ac90:	4605      	mov	r5, r0
  40ac92:	6102      	str	r2, [r0, #16]
  40ac94:	64b8      	str	r0, [r7, #72]	; 0x48
  40ac96:	6003      	str	r3, [r0, #0]
  40ac98:	e7be      	b.n	40ac18 <__pow5mult+0x18>
  40ac9a:	bf00      	nop
  40ac9c:	0040d210 	.word	0x0040d210

0040aca0 <__lshift>:
  40aca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aca4:	690e      	ldr	r6, [r1, #16]
  40aca6:	ea4f 1962 	mov.w	r9, r2, asr #5
  40acaa:	688b      	ldr	r3, [r1, #8]
  40acac:	460d      	mov	r5, r1
  40acae:	444e      	add	r6, r9
  40acb0:	4690      	mov	r8, r2
  40acb2:	4607      	mov	r7, r0
  40acb4:	6849      	ldr	r1, [r1, #4]
  40acb6:	1c74      	adds	r4, r6, #1
  40acb8:	429c      	cmp	r4, r3
  40acba:	dd03      	ble.n	40acc4 <__lshift+0x24>
  40acbc:	005b      	lsls	r3, r3, #1
  40acbe:	3101      	adds	r1, #1
  40acc0:	429c      	cmp	r4, r3
  40acc2:	dcfb      	bgt.n	40acbc <__lshift+0x1c>
  40acc4:	4638      	mov	r0, r7
  40acc6:	f7ff fe27 	bl	40a918 <_Balloc>
  40acca:	f1b9 0f00 	cmp.w	r9, #0
  40acce:	4684      	mov	ip, r0
  40acd0:	f100 0114 	add.w	r1, r0, #20
  40acd4:	dd09      	ble.n	40acea <__lshift+0x4a>
  40acd6:	2300      	movs	r3, #0
  40acd8:	460a      	mov	r2, r1
  40acda:	4618      	mov	r0, r3
  40acdc:	3301      	adds	r3, #1
  40acde:	f842 0b04 	str.w	r0, [r2], #4
  40ace2:	454b      	cmp	r3, r9
  40ace4:	d1fa      	bne.n	40acdc <__lshift+0x3c>
  40ace6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40acea:	692a      	ldr	r2, [r5, #16]
  40acec:	f105 0314 	add.w	r3, r5, #20
  40acf0:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40acf4:	f018 021f 	ands.w	r2, r8, #31
  40acf8:	d023      	beq.n	40ad42 <__lshift+0xa2>
  40acfa:	f1c2 0920 	rsb	r9, r2, #32
  40acfe:	f04f 0a00 	mov.w	sl, #0
  40ad02:	6818      	ldr	r0, [r3, #0]
  40ad04:	4688      	mov	r8, r1
  40ad06:	4090      	lsls	r0, r2
  40ad08:	ea4a 0000 	orr.w	r0, sl, r0
  40ad0c:	f841 0b04 	str.w	r0, [r1], #4
  40ad10:	f853 0b04 	ldr.w	r0, [r3], #4
  40ad14:	459e      	cmp	lr, r3
  40ad16:	fa20 fa09 	lsr.w	sl, r0, r9
  40ad1a:	d8f2      	bhi.n	40ad02 <__lshift+0x62>
  40ad1c:	f8c8 a004 	str.w	sl, [r8, #4]
  40ad20:	f1ba 0f00 	cmp.w	sl, #0
  40ad24:	d000      	beq.n	40ad28 <__lshift+0x88>
  40ad26:	1cb4      	adds	r4, r6, #2
  40ad28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ad2a:	3c01      	subs	r4, #1
  40ad2c:	686a      	ldr	r2, [r5, #4]
  40ad2e:	4660      	mov	r0, ip
  40ad30:	f8cc 4010 	str.w	r4, [ip, #16]
  40ad34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ad38:	6029      	str	r1, [r5, #0]
  40ad3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40ad3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ad42:	3904      	subs	r1, #4
  40ad44:	f853 2b04 	ldr.w	r2, [r3], #4
  40ad48:	459e      	cmp	lr, r3
  40ad4a:	f841 2f04 	str.w	r2, [r1, #4]!
  40ad4e:	d8f9      	bhi.n	40ad44 <__lshift+0xa4>
  40ad50:	e7ea      	b.n	40ad28 <__lshift+0x88>
  40ad52:	bf00      	nop

0040ad54 <__mcmp>:
  40ad54:	6902      	ldr	r2, [r0, #16]
  40ad56:	690b      	ldr	r3, [r1, #16]
  40ad58:	1ad2      	subs	r2, r2, r3
  40ad5a:	d113      	bne.n	40ad84 <__mcmp+0x30>
  40ad5c:	009a      	lsls	r2, r3, #2
  40ad5e:	3014      	adds	r0, #20
  40ad60:	3114      	adds	r1, #20
  40ad62:	1883      	adds	r3, r0, r2
  40ad64:	4411      	add	r1, r2
  40ad66:	b410      	push	{r4}
  40ad68:	e001      	b.n	40ad6e <__mcmp+0x1a>
  40ad6a:	4298      	cmp	r0, r3
  40ad6c:	d20c      	bcs.n	40ad88 <__mcmp+0x34>
  40ad6e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40ad72:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ad76:	4294      	cmp	r4, r2
  40ad78:	d0f7      	beq.n	40ad6a <__mcmp+0x16>
  40ad7a:	d309      	bcc.n	40ad90 <__mcmp+0x3c>
  40ad7c:	2001      	movs	r0, #1
  40ad7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ad82:	4770      	bx	lr
  40ad84:	4610      	mov	r0, r2
  40ad86:	4770      	bx	lr
  40ad88:	2000      	movs	r0, #0
  40ad8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ad8e:	4770      	bx	lr
  40ad90:	f04f 30ff 	mov.w	r0, #4294967295
  40ad94:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ad98:	4770      	bx	lr
  40ad9a:	bf00      	nop

0040ad9c <__mdiff>:
  40ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ada0:	460c      	mov	r4, r1
  40ada2:	4605      	mov	r5, r0
  40ada4:	4611      	mov	r1, r2
  40ada6:	4617      	mov	r7, r2
  40ada8:	4620      	mov	r0, r4
  40adaa:	f7ff ffd3 	bl	40ad54 <__mcmp>
  40adae:	1e06      	subs	r6, r0, #0
  40adb0:	d05c      	beq.n	40ae6c <__mdiff+0xd0>
  40adb2:	db55      	blt.n	40ae60 <__mdiff+0xc4>
  40adb4:	f04f 0800 	mov.w	r8, #0
  40adb8:	6861      	ldr	r1, [r4, #4]
  40adba:	4628      	mov	r0, r5
  40adbc:	f7ff fdac 	bl	40a918 <_Balloc>
  40adc0:	f107 0514 	add.w	r5, r7, #20
  40adc4:	693b      	ldr	r3, [r7, #16]
  40adc6:	f104 0114 	add.w	r1, r4, #20
  40adca:	6926      	ldr	r6, [r4, #16]
  40adcc:	4684      	mov	ip, r0
  40adce:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  40add2:	f100 0414 	add.w	r4, r0, #20
  40add6:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40adda:	2300      	movs	r3, #0
  40addc:	f8c0 800c 	str.w	r8, [r0, #12]
  40ade0:	f851 9b04 	ldr.w	r9, [r1], #4
  40ade4:	f855 2b04 	ldr.w	r2, [r5], #4
  40ade8:	fa13 f889 	uxtah	r8, r3, r9
  40adec:	4608      	mov	r0, r1
  40adee:	b293      	uxth	r3, r2
  40adf0:	45ae      	cmp	lr, r5
  40adf2:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40adf6:	ebc3 0308 	rsb	r3, r3, r8
  40adfa:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40adfe:	fa1f f883 	uxth.w	r8, r3
  40ae02:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40ae06:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40ae0a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ae0e:	f844 2b04 	str.w	r2, [r4], #4
  40ae12:	d8e5      	bhi.n	40ade0 <__mdiff+0x44>
  40ae14:	428f      	cmp	r7, r1
  40ae16:	4625      	mov	r5, r4
  40ae18:	d916      	bls.n	40ae48 <__mdiff+0xac>
  40ae1a:	f850 2b04 	ldr.w	r2, [r0], #4
  40ae1e:	fa13 f382 	uxtah	r3, r3, r2
  40ae22:	0c12      	lsrs	r2, r2, #16
  40ae24:	4287      	cmp	r7, r0
  40ae26:	fa1f fe83 	uxth.w	lr, r3
  40ae2a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40ae2e:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40ae32:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ae36:	f844 2b04 	str.w	r2, [r4], #4
  40ae3a:	d8ee      	bhi.n	40ae1a <__mdiff+0x7e>
  40ae3c:	43c9      	mvns	r1, r1
  40ae3e:	4439      	add	r1, r7
  40ae40:	f021 0403 	bic.w	r4, r1, #3
  40ae44:	3404      	adds	r4, #4
  40ae46:	442c      	add	r4, r5
  40ae48:	3c04      	subs	r4, #4
  40ae4a:	b922      	cbnz	r2, 40ae56 <__mdiff+0xba>
  40ae4c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ae50:	3e01      	subs	r6, #1
  40ae52:	2b00      	cmp	r3, #0
  40ae54:	d0fa      	beq.n	40ae4c <__mdiff+0xb0>
  40ae56:	4660      	mov	r0, ip
  40ae58:	f8cc 6010 	str.w	r6, [ip, #16]
  40ae5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ae60:	4623      	mov	r3, r4
  40ae62:	f04f 0801 	mov.w	r8, #1
  40ae66:	463c      	mov	r4, r7
  40ae68:	461f      	mov	r7, r3
  40ae6a:	e7a5      	b.n	40adb8 <__mdiff+0x1c>
  40ae6c:	4628      	mov	r0, r5
  40ae6e:	4631      	mov	r1, r6
  40ae70:	f7ff fd52 	bl	40a918 <_Balloc>
  40ae74:	2201      	movs	r2, #1
  40ae76:	4603      	mov	r3, r0
  40ae78:	6146      	str	r6, [r0, #20]
  40ae7a:	611a      	str	r2, [r3, #16]
  40ae7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040ae80 <__d2b>:
  40ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ae84:	461c      	mov	r4, r3
  40ae86:	b082      	sub	sp, #8
  40ae88:	2101      	movs	r1, #1
  40ae8a:	4616      	mov	r6, r2
  40ae8c:	f3c4 550a 	ubfx	r5, r4, #20, #11
  40ae90:	f7ff fd42 	bl	40a918 <_Balloc>
  40ae94:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ae98:	4607      	mov	r7, r0
  40ae9a:	b10d      	cbz	r5, 40aea0 <__d2b+0x20>
  40ae9c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40aea0:	9401      	str	r4, [sp, #4]
  40aea2:	b30e      	cbz	r6, 40aee8 <__d2b+0x68>
  40aea4:	a802      	add	r0, sp, #8
  40aea6:	f840 6d08 	str.w	r6, [r0, #-8]!
  40aeaa:	f7ff fdcb 	bl	40aa44 <__lo0bits>
  40aeae:	2800      	cmp	r0, #0
  40aeb0:	d132      	bne.n	40af18 <__d2b+0x98>
  40aeb2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40aeb6:	617a      	str	r2, [r7, #20]
  40aeb8:	2b00      	cmp	r3, #0
  40aeba:	61bb      	str	r3, [r7, #24]
  40aebc:	bf14      	ite	ne
  40aebe:	2402      	movne	r4, #2
  40aec0:	2401      	moveq	r4, #1
  40aec2:	613c      	str	r4, [r7, #16]
  40aec4:	b9dd      	cbnz	r5, 40aefe <__d2b+0x7e>
  40aec6:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40aeca:	9a08      	ldr	r2, [sp, #32]
  40aecc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40aed0:	6010      	str	r0, [r2, #0]
  40aed2:	6918      	ldr	r0, [r3, #16]
  40aed4:	f7ff fd94 	bl	40aa00 <__hi0bits>
  40aed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aeda:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40aede:	6018      	str	r0, [r3, #0]
  40aee0:	4638      	mov	r0, r7
  40aee2:	b002      	add	sp, #8
  40aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40aee8:	a801      	add	r0, sp, #4
  40aeea:	f7ff fdab 	bl	40aa44 <__lo0bits>
  40aeee:	2301      	movs	r3, #1
  40aef0:	9a01      	ldr	r2, [sp, #4]
  40aef2:	3020      	adds	r0, #32
  40aef4:	461c      	mov	r4, r3
  40aef6:	613b      	str	r3, [r7, #16]
  40aef8:	617a      	str	r2, [r7, #20]
  40aefa:	2d00      	cmp	r5, #0
  40aefc:	d0e3      	beq.n	40aec6 <__d2b+0x46>
  40aefe:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40af02:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40af06:	9a08      	ldr	r2, [sp, #32]
  40af08:	4440      	add	r0, r8
  40af0a:	6010      	str	r0, [r2, #0]
  40af0c:	4638      	mov	r0, r7
  40af0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40af10:	6013      	str	r3, [r2, #0]
  40af12:	b002      	add	sp, #8
  40af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af18:	9b01      	ldr	r3, [sp, #4]
  40af1a:	f1c0 0120 	rsb	r1, r0, #32
  40af1e:	9a00      	ldr	r2, [sp, #0]
  40af20:	fa03 f101 	lsl.w	r1, r3, r1
  40af24:	40c3      	lsrs	r3, r0
  40af26:	430a      	orrs	r2, r1
  40af28:	9301      	str	r3, [sp, #4]
  40af2a:	617a      	str	r2, [r7, #20]
  40af2c:	e7c4      	b.n	40aeb8 <__d2b+0x38>
  40af2e:	bf00      	nop

0040af30 <_realloc_r>:
  40af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af34:	4617      	mov	r7, r2
  40af36:	b083      	sub	sp, #12
  40af38:	460e      	mov	r6, r1
  40af3a:	2900      	cmp	r1, #0
  40af3c:	f000 80e2 	beq.w	40b104 <_realloc_r+0x1d4>
  40af40:	f107 040b 	add.w	r4, r7, #11
  40af44:	4681      	mov	r9, r0
  40af46:	f7ff fce3 	bl	40a910 <__malloc_lock>
  40af4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40af4e:	2c16      	cmp	r4, #22
  40af50:	f1a6 0808 	sub.w	r8, r6, #8
  40af54:	f023 0503 	bic.w	r5, r3, #3
  40af58:	d850      	bhi.n	40affc <_realloc_r+0xcc>
  40af5a:	2210      	movs	r2, #16
  40af5c:	2100      	movs	r1, #0
  40af5e:	4614      	mov	r4, r2
  40af60:	42bc      	cmp	r4, r7
  40af62:	f0c0 80dc 	bcc.w	40b11e <_realloc_r+0x1ee>
  40af66:	2900      	cmp	r1, #0
  40af68:	f040 80d9 	bne.w	40b11e <_realloc_r+0x1ee>
  40af6c:	4295      	cmp	r5, r2
  40af6e:	da4a      	bge.n	40b006 <_realloc_r+0xd6>
  40af70:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40b31c <_realloc_r+0x3ec>
  40af74:	eb08 0105 	add.w	r1, r8, r5
  40af78:	f8db 0008 	ldr.w	r0, [fp, #8]
  40af7c:	4288      	cmp	r0, r1
  40af7e:	f000 80d3 	beq.w	40b128 <_realloc_r+0x1f8>
  40af82:	6848      	ldr	r0, [r1, #4]
  40af84:	f020 0e01 	bic.w	lr, r0, #1
  40af88:	448e      	add	lr, r1
  40af8a:	f8de e004 	ldr.w	lr, [lr, #4]
  40af8e:	f01e 0f01 	tst.w	lr, #1
  40af92:	d14e      	bne.n	40b032 <_realloc_r+0x102>
  40af94:	f020 0003 	bic.w	r0, r0, #3
  40af98:	4428      	add	r0, r5
  40af9a:	4290      	cmp	r0, r2
  40af9c:	f280 80b8 	bge.w	40b110 <_realloc_r+0x1e0>
  40afa0:	07db      	lsls	r3, r3, #31
  40afa2:	f100 808b 	bmi.w	40b0bc <_realloc_r+0x18c>
  40afa6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40afaa:	ebc3 0a08 	rsb	sl, r3, r8
  40afae:	f8da 3004 	ldr.w	r3, [sl, #4]
  40afb2:	f023 0303 	bic.w	r3, r3, #3
  40afb6:	eb00 0e03 	add.w	lr, r0, r3
  40afba:	4596      	cmp	lr, r2
  40afbc:	db43      	blt.n	40b046 <_realloc_r+0x116>
  40afbe:	68cb      	ldr	r3, [r1, #12]
  40afc0:	4657      	mov	r7, sl
  40afc2:	6889      	ldr	r1, [r1, #8]
  40afc4:	1f2a      	subs	r2, r5, #4
  40afc6:	60cb      	str	r3, [r1, #12]
  40afc8:	2a24      	cmp	r2, #36	; 0x24
  40afca:	6099      	str	r1, [r3, #8]
  40afcc:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40afd0:	f8da 300c 	ldr.w	r3, [sl, #12]
  40afd4:	60cb      	str	r3, [r1, #12]
  40afd6:	6099      	str	r1, [r3, #8]
  40afd8:	f200 813c 	bhi.w	40b254 <_realloc_r+0x324>
  40afdc:	2a13      	cmp	r2, #19
  40afde:	f240 80fa 	bls.w	40b1d6 <_realloc_r+0x2a6>
  40afe2:	6833      	ldr	r3, [r6, #0]
  40afe4:	2a1b      	cmp	r2, #27
  40afe6:	f8ca 3008 	str.w	r3, [sl, #8]
  40afea:	6873      	ldr	r3, [r6, #4]
  40afec:	f8ca 300c 	str.w	r3, [sl, #12]
  40aff0:	f200 813b 	bhi.w	40b26a <_realloc_r+0x33a>
  40aff4:	3608      	adds	r6, #8
  40aff6:	f10a 0310 	add.w	r3, sl, #16
  40affa:	e0ed      	b.n	40b1d8 <_realloc_r+0x2a8>
  40affc:	f024 0407 	bic.w	r4, r4, #7
  40b000:	4622      	mov	r2, r4
  40b002:	0fe1      	lsrs	r1, r4, #31
  40b004:	e7ac      	b.n	40af60 <_realloc_r+0x30>
  40b006:	4637      	mov	r7, r6
  40b008:	1b2a      	subs	r2, r5, r4
  40b00a:	f003 0301 	and.w	r3, r3, #1
  40b00e:	2a0f      	cmp	r2, #15
  40b010:	d841      	bhi.n	40b096 <_realloc_r+0x166>
  40b012:	eb08 0205 	add.w	r2, r8, r5
  40b016:	431d      	orrs	r5, r3
  40b018:	f8c8 5004 	str.w	r5, [r8, #4]
  40b01c:	6853      	ldr	r3, [r2, #4]
  40b01e:	f043 0301 	orr.w	r3, r3, #1
  40b022:	6053      	str	r3, [r2, #4]
  40b024:	4648      	mov	r0, r9
  40b026:	f7ff fc75 	bl	40a914 <__malloc_unlock>
  40b02a:	4638      	mov	r0, r7
  40b02c:	b003      	add	sp, #12
  40b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b032:	07d9      	lsls	r1, r3, #31
  40b034:	d442      	bmi.n	40b0bc <_realloc_r+0x18c>
  40b036:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b03a:	ebc3 0a08 	rsb	sl, r3, r8
  40b03e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b042:	f023 0303 	bic.w	r3, r3, #3
  40b046:	442b      	add	r3, r5
  40b048:	4293      	cmp	r3, r2
  40b04a:	db37      	blt.n	40b0bc <_realloc_r+0x18c>
  40b04c:	4657      	mov	r7, sl
  40b04e:	1f2a      	subs	r2, r5, #4
  40b050:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b054:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40b058:	2a24      	cmp	r2, #36	; 0x24
  40b05a:	60c1      	str	r1, [r0, #12]
  40b05c:	6088      	str	r0, [r1, #8]
  40b05e:	f200 80c6 	bhi.w	40b1ee <_realloc_r+0x2be>
  40b062:	2a13      	cmp	r2, #19
  40b064:	f240 80ff 	bls.w	40b266 <_realloc_r+0x336>
  40b068:	6831      	ldr	r1, [r6, #0]
  40b06a:	2a1b      	cmp	r2, #27
  40b06c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b070:	6871      	ldr	r1, [r6, #4]
  40b072:	f8ca 100c 	str.w	r1, [sl, #12]
  40b076:	f200 810d 	bhi.w	40b294 <_realloc_r+0x364>
  40b07a:	3608      	adds	r6, #8
  40b07c:	f10a 0210 	add.w	r2, sl, #16
  40b080:	6831      	ldr	r1, [r6, #0]
  40b082:	461d      	mov	r5, r3
  40b084:	46d0      	mov	r8, sl
  40b086:	6011      	str	r1, [r2, #0]
  40b088:	6873      	ldr	r3, [r6, #4]
  40b08a:	6053      	str	r3, [r2, #4]
  40b08c:	68b3      	ldr	r3, [r6, #8]
  40b08e:	6093      	str	r3, [r2, #8]
  40b090:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b094:	e7b8      	b.n	40b008 <_realloc_r+0xd8>
  40b096:	eb08 0504 	add.w	r5, r8, r4
  40b09a:	f042 0601 	orr.w	r6, r2, #1
  40b09e:	431c      	orrs	r4, r3
  40b0a0:	4648      	mov	r0, r9
  40b0a2:	442a      	add	r2, r5
  40b0a4:	f105 0108 	add.w	r1, r5, #8
  40b0a8:	f8c8 4004 	str.w	r4, [r8, #4]
  40b0ac:	606e      	str	r6, [r5, #4]
  40b0ae:	6853      	ldr	r3, [r2, #4]
  40b0b0:	f043 0301 	orr.w	r3, r3, #1
  40b0b4:	6053      	str	r3, [r2, #4]
  40b0b6:	f7fe fd2b 	bl	409b10 <_free_r>
  40b0ba:	e7b3      	b.n	40b024 <_realloc_r+0xf4>
  40b0bc:	4639      	mov	r1, r7
  40b0be:	4648      	mov	r0, r9
  40b0c0:	f7ff f836 	bl	40a130 <_malloc_r>
  40b0c4:	4607      	mov	r7, r0
  40b0c6:	2800      	cmp	r0, #0
  40b0c8:	d0ac      	beq.n	40b024 <_realloc_r+0xf4>
  40b0ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b0ce:	f1a0 0108 	sub.w	r1, r0, #8
  40b0d2:	f023 0201 	bic.w	r2, r3, #1
  40b0d6:	4442      	add	r2, r8
  40b0d8:	4291      	cmp	r1, r2
  40b0da:	f000 80b4 	beq.w	40b246 <_realloc_r+0x316>
  40b0de:	1f2a      	subs	r2, r5, #4
  40b0e0:	2a24      	cmp	r2, #36	; 0x24
  40b0e2:	f200 80a1 	bhi.w	40b228 <_realloc_r+0x2f8>
  40b0e6:	2a13      	cmp	r2, #19
  40b0e8:	d86a      	bhi.n	40b1c0 <_realloc_r+0x290>
  40b0ea:	4603      	mov	r3, r0
  40b0ec:	4632      	mov	r2, r6
  40b0ee:	6811      	ldr	r1, [r2, #0]
  40b0f0:	6019      	str	r1, [r3, #0]
  40b0f2:	6851      	ldr	r1, [r2, #4]
  40b0f4:	6059      	str	r1, [r3, #4]
  40b0f6:	6892      	ldr	r2, [r2, #8]
  40b0f8:	609a      	str	r2, [r3, #8]
  40b0fa:	4631      	mov	r1, r6
  40b0fc:	4648      	mov	r0, r9
  40b0fe:	f7fe fd07 	bl	409b10 <_free_r>
  40b102:	e78f      	b.n	40b024 <_realloc_r+0xf4>
  40b104:	4611      	mov	r1, r2
  40b106:	b003      	add	sp, #12
  40b108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b10c:	f7ff b810 	b.w	40a130 <_malloc_r>
  40b110:	68ca      	ldr	r2, [r1, #12]
  40b112:	4637      	mov	r7, r6
  40b114:	6889      	ldr	r1, [r1, #8]
  40b116:	4605      	mov	r5, r0
  40b118:	60ca      	str	r2, [r1, #12]
  40b11a:	6091      	str	r1, [r2, #8]
  40b11c:	e774      	b.n	40b008 <_realloc_r+0xd8>
  40b11e:	230c      	movs	r3, #12
  40b120:	2000      	movs	r0, #0
  40b122:	f8c9 3000 	str.w	r3, [r9]
  40b126:	e781      	b.n	40b02c <_realloc_r+0xfc>
  40b128:	6841      	ldr	r1, [r0, #4]
  40b12a:	f104 0010 	add.w	r0, r4, #16
  40b12e:	f021 0103 	bic.w	r1, r1, #3
  40b132:	4429      	add	r1, r5
  40b134:	4281      	cmp	r1, r0
  40b136:	da63      	bge.n	40b200 <_realloc_r+0x2d0>
  40b138:	07db      	lsls	r3, r3, #31
  40b13a:	d4bf      	bmi.n	40b0bc <_realloc_r+0x18c>
  40b13c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40b140:	ebc3 0a08 	rsb	sl, r3, r8
  40b144:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b148:	f023 0303 	bic.w	r3, r3, #3
  40b14c:	eb01 0c03 	add.w	ip, r1, r3
  40b150:	4560      	cmp	r0, ip
  40b152:	f73f af78 	bgt.w	40b046 <_realloc_r+0x116>
  40b156:	4657      	mov	r7, sl
  40b158:	1f2a      	subs	r2, r5, #4
  40b15a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40b15e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40b162:	2a24      	cmp	r2, #36	; 0x24
  40b164:	60cb      	str	r3, [r1, #12]
  40b166:	6099      	str	r1, [r3, #8]
  40b168:	f200 80b8 	bhi.w	40b2dc <_realloc_r+0x3ac>
  40b16c:	2a13      	cmp	r2, #19
  40b16e:	f240 80a8 	bls.w	40b2c2 <_realloc_r+0x392>
  40b172:	6833      	ldr	r3, [r6, #0]
  40b174:	2a1b      	cmp	r2, #27
  40b176:	f8ca 3008 	str.w	r3, [sl, #8]
  40b17a:	6873      	ldr	r3, [r6, #4]
  40b17c:	f8ca 300c 	str.w	r3, [sl, #12]
  40b180:	f200 80b5 	bhi.w	40b2ee <_realloc_r+0x3be>
  40b184:	3608      	adds	r6, #8
  40b186:	f10a 0310 	add.w	r3, sl, #16
  40b18a:	6832      	ldr	r2, [r6, #0]
  40b18c:	601a      	str	r2, [r3, #0]
  40b18e:	6872      	ldr	r2, [r6, #4]
  40b190:	605a      	str	r2, [r3, #4]
  40b192:	68b2      	ldr	r2, [r6, #8]
  40b194:	609a      	str	r2, [r3, #8]
  40b196:	ebc4 030c 	rsb	r3, r4, ip
  40b19a:	eb0a 0204 	add.w	r2, sl, r4
  40b19e:	4648      	mov	r0, r9
  40b1a0:	f043 0301 	orr.w	r3, r3, #1
  40b1a4:	f8cb 2008 	str.w	r2, [fp, #8]
  40b1a8:	6053      	str	r3, [r2, #4]
  40b1aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b1ae:	f003 0301 	and.w	r3, r3, #1
  40b1b2:	431c      	orrs	r4, r3
  40b1b4:	f8ca 4004 	str.w	r4, [sl, #4]
  40b1b8:	f7ff fbac 	bl	40a914 <__malloc_unlock>
  40b1bc:	4638      	mov	r0, r7
  40b1be:	e735      	b.n	40b02c <_realloc_r+0xfc>
  40b1c0:	6833      	ldr	r3, [r6, #0]
  40b1c2:	2a1b      	cmp	r2, #27
  40b1c4:	6003      	str	r3, [r0, #0]
  40b1c6:	6873      	ldr	r3, [r6, #4]
  40b1c8:	6043      	str	r3, [r0, #4]
  40b1ca:	d831      	bhi.n	40b230 <_realloc_r+0x300>
  40b1cc:	f100 0308 	add.w	r3, r0, #8
  40b1d0:	f106 0208 	add.w	r2, r6, #8
  40b1d4:	e78b      	b.n	40b0ee <_realloc_r+0x1be>
  40b1d6:	463b      	mov	r3, r7
  40b1d8:	6832      	ldr	r2, [r6, #0]
  40b1da:	4675      	mov	r5, lr
  40b1dc:	46d0      	mov	r8, sl
  40b1de:	601a      	str	r2, [r3, #0]
  40b1e0:	6872      	ldr	r2, [r6, #4]
  40b1e2:	605a      	str	r2, [r3, #4]
  40b1e4:	68b2      	ldr	r2, [r6, #8]
  40b1e6:	609a      	str	r2, [r3, #8]
  40b1e8:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b1ec:	e70c      	b.n	40b008 <_realloc_r+0xd8>
  40b1ee:	4631      	mov	r1, r6
  40b1f0:	4638      	mov	r0, r7
  40b1f2:	461d      	mov	r5, r3
  40b1f4:	46d0      	mov	r8, sl
  40b1f6:	f7ff fb29 	bl	40a84c <memmove>
  40b1fa:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b1fe:	e703      	b.n	40b008 <_realloc_r+0xd8>
  40b200:	1b0b      	subs	r3, r1, r4
  40b202:	eb08 0204 	add.w	r2, r8, r4
  40b206:	4648      	mov	r0, r9
  40b208:	f043 0301 	orr.w	r3, r3, #1
  40b20c:	f8cb 2008 	str.w	r2, [fp, #8]
  40b210:	6053      	str	r3, [r2, #4]
  40b212:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40b216:	f003 0301 	and.w	r3, r3, #1
  40b21a:	431c      	orrs	r4, r3
  40b21c:	f846 4c04 	str.w	r4, [r6, #-4]
  40b220:	f7ff fb78 	bl	40a914 <__malloc_unlock>
  40b224:	4630      	mov	r0, r6
  40b226:	e701      	b.n	40b02c <_realloc_r+0xfc>
  40b228:	4631      	mov	r1, r6
  40b22a:	f7ff fb0f 	bl	40a84c <memmove>
  40b22e:	e764      	b.n	40b0fa <_realloc_r+0x1ca>
  40b230:	68b3      	ldr	r3, [r6, #8]
  40b232:	2a24      	cmp	r2, #36	; 0x24
  40b234:	6083      	str	r3, [r0, #8]
  40b236:	68f3      	ldr	r3, [r6, #12]
  40b238:	60c3      	str	r3, [r0, #12]
  40b23a:	d022      	beq.n	40b282 <_realloc_r+0x352>
  40b23c:	f100 0310 	add.w	r3, r0, #16
  40b240:	f106 0210 	add.w	r2, r6, #16
  40b244:	e753      	b.n	40b0ee <_realloc_r+0x1be>
  40b246:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b24a:	4637      	mov	r7, r6
  40b24c:	f022 0203 	bic.w	r2, r2, #3
  40b250:	4415      	add	r5, r2
  40b252:	e6d9      	b.n	40b008 <_realloc_r+0xd8>
  40b254:	4631      	mov	r1, r6
  40b256:	4638      	mov	r0, r7
  40b258:	4675      	mov	r5, lr
  40b25a:	46d0      	mov	r8, sl
  40b25c:	f7ff faf6 	bl	40a84c <memmove>
  40b260:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b264:	e6d0      	b.n	40b008 <_realloc_r+0xd8>
  40b266:	463a      	mov	r2, r7
  40b268:	e70a      	b.n	40b080 <_realloc_r+0x150>
  40b26a:	68b3      	ldr	r3, [r6, #8]
  40b26c:	2a24      	cmp	r2, #36	; 0x24
  40b26e:	f8ca 3010 	str.w	r3, [sl, #16]
  40b272:	68f3      	ldr	r3, [r6, #12]
  40b274:	f8ca 3014 	str.w	r3, [sl, #20]
  40b278:	d018      	beq.n	40b2ac <_realloc_r+0x37c>
  40b27a:	3610      	adds	r6, #16
  40b27c:	f10a 0318 	add.w	r3, sl, #24
  40b280:	e7aa      	b.n	40b1d8 <_realloc_r+0x2a8>
  40b282:	6931      	ldr	r1, [r6, #16]
  40b284:	f100 0318 	add.w	r3, r0, #24
  40b288:	f106 0218 	add.w	r2, r6, #24
  40b28c:	6101      	str	r1, [r0, #16]
  40b28e:	6971      	ldr	r1, [r6, #20]
  40b290:	6141      	str	r1, [r0, #20]
  40b292:	e72c      	b.n	40b0ee <_realloc_r+0x1be>
  40b294:	68b1      	ldr	r1, [r6, #8]
  40b296:	2a24      	cmp	r2, #36	; 0x24
  40b298:	f8ca 1010 	str.w	r1, [sl, #16]
  40b29c:	68f1      	ldr	r1, [r6, #12]
  40b29e:	f8ca 1014 	str.w	r1, [sl, #20]
  40b2a2:	d010      	beq.n	40b2c6 <_realloc_r+0x396>
  40b2a4:	3610      	adds	r6, #16
  40b2a6:	f10a 0218 	add.w	r2, sl, #24
  40b2aa:	e6e9      	b.n	40b080 <_realloc_r+0x150>
  40b2ac:	6932      	ldr	r2, [r6, #16]
  40b2ae:	f10a 0320 	add.w	r3, sl, #32
  40b2b2:	3618      	adds	r6, #24
  40b2b4:	f8ca 2018 	str.w	r2, [sl, #24]
  40b2b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b2bc:	f8ca 201c 	str.w	r2, [sl, #28]
  40b2c0:	e78a      	b.n	40b1d8 <_realloc_r+0x2a8>
  40b2c2:	463b      	mov	r3, r7
  40b2c4:	e761      	b.n	40b18a <_realloc_r+0x25a>
  40b2c6:	6931      	ldr	r1, [r6, #16]
  40b2c8:	f10a 0220 	add.w	r2, sl, #32
  40b2cc:	3618      	adds	r6, #24
  40b2ce:	f8ca 1018 	str.w	r1, [sl, #24]
  40b2d2:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40b2d6:	f8ca 101c 	str.w	r1, [sl, #28]
  40b2da:	e6d1      	b.n	40b080 <_realloc_r+0x150>
  40b2dc:	4631      	mov	r1, r6
  40b2de:	4638      	mov	r0, r7
  40b2e0:	f8cd c004 	str.w	ip, [sp, #4]
  40b2e4:	f7ff fab2 	bl	40a84c <memmove>
  40b2e8:	f8dd c004 	ldr.w	ip, [sp, #4]
  40b2ec:	e753      	b.n	40b196 <_realloc_r+0x266>
  40b2ee:	68b3      	ldr	r3, [r6, #8]
  40b2f0:	2a24      	cmp	r2, #36	; 0x24
  40b2f2:	f8ca 3010 	str.w	r3, [sl, #16]
  40b2f6:	68f3      	ldr	r3, [r6, #12]
  40b2f8:	f8ca 3014 	str.w	r3, [sl, #20]
  40b2fc:	d003      	beq.n	40b306 <_realloc_r+0x3d6>
  40b2fe:	3610      	adds	r6, #16
  40b300:	f10a 0318 	add.w	r3, sl, #24
  40b304:	e741      	b.n	40b18a <_realloc_r+0x25a>
  40b306:	6932      	ldr	r2, [r6, #16]
  40b308:	f10a 0320 	add.w	r3, sl, #32
  40b30c:	3618      	adds	r6, #24
  40b30e:	f8ca 2018 	str.w	r2, [sl, #24]
  40b312:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40b316:	f8ca 201c 	str.w	r2, [sl, #28]
  40b31a:	e736      	b.n	40b18a <_realloc_r+0x25a>
  40b31c:	204004fc 	.word	0x204004fc

0040b320 <__fpclassifyd>:
  40b320:	fab0 f080 	clz	r0, r0
  40b324:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  40b328:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40b32c:	d102      	bne.n	40b334 <__fpclassifyd+0x14>
  40b32e:	b108      	cbz	r0, 40b334 <__fpclassifyd+0x14>
  40b330:	2002      	movs	r0, #2
  40b332:	4770      	bx	lr
  40b334:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40b338:	4b08      	ldr	r3, [pc, #32]	; (40b35c <__fpclassifyd+0x3c>)
  40b33a:	429a      	cmp	r2, r3
  40b33c:	d801      	bhi.n	40b342 <__fpclassifyd+0x22>
  40b33e:	2004      	movs	r0, #4
  40b340:	4770      	bx	lr
  40b342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b346:	d201      	bcs.n	40b34c <__fpclassifyd+0x2c>
  40b348:	2003      	movs	r0, #3
  40b34a:	4770      	bx	lr
  40b34c:	4b04      	ldr	r3, [pc, #16]	; (40b360 <__fpclassifyd+0x40>)
  40b34e:	4299      	cmp	r1, r3
  40b350:	bf14      	ite	ne
  40b352:	2000      	movne	r0, #0
  40b354:	f000 0001 	andeq.w	r0, r0, #1
  40b358:	4770      	bx	lr
  40b35a:	bf00      	nop
  40b35c:	7fdfffff 	.word	0x7fdfffff
  40b360:	7ff00000 	.word	0x7ff00000

0040b364 <_sbrk_r>:
  40b364:	b538      	push	{r3, r4, r5, lr}
  40b366:	2300      	movs	r3, #0
  40b368:	4c06      	ldr	r4, [pc, #24]	; (40b384 <_sbrk_r+0x20>)
  40b36a:	4605      	mov	r5, r0
  40b36c:	4608      	mov	r0, r1
  40b36e:	6023      	str	r3, [r4, #0]
  40b370:	f7f7 f93c 	bl	4025ec <_sbrk>
  40b374:	1c43      	adds	r3, r0, #1
  40b376:	d000      	beq.n	40b37a <_sbrk_r+0x16>
  40b378:	bd38      	pop	{r3, r4, r5, pc}
  40b37a:	6823      	ldr	r3, [r4, #0]
  40b37c:	2b00      	cmp	r3, #0
  40b37e:	d0fb      	beq.n	40b378 <_sbrk_r+0x14>
  40b380:	602b      	str	r3, [r5, #0]
  40b382:	bd38      	pop	{r3, r4, r5, pc}
  40b384:	20401838 	.word	0x20401838

0040b388 <__sread>:
  40b388:	b510      	push	{r4, lr}
  40b38a:	460c      	mov	r4, r1
  40b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b390:	f000 f9ec 	bl	40b76c <_read_r>
  40b394:	2800      	cmp	r0, #0
  40b396:	db03      	blt.n	40b3a0 <__sread+0x18>
  40b398:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b39a:	4403      	add	r3, r0
  40b39c:	6523      	str	r3, [r4, #80]	; 0x50
  40b39e:	bd10      	pop	{r4, pc}
  40b3a0:	89a3      	ldrh	r3, [r4, #12]
  40b3a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b3a6:	81a3      	strh	r3, [r4, #12]
  40b3a8:	bd10      	pop	{r4, pc}
  40b3aa:	bf00      	nop

0040b3ac <__swrite>:
  40b3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b3b0:	461d      	mov	r5, r3
  40b3b2:	898b      	ldrh	r3, [r1, #12]
  40b3b4:	4616      	mov	r6, r2
  40b3b6:	460c      	mov	r4, r1
  40b3b8:	05da      	lsls	r2, r3, #23
  40b3ba:	4607      	mov	r7, r0
  40b3bc:	d506      	bpl.n	40b3cc <__swrite+0x20>
  40b3be:	2302      	movs	r3, #2
  40b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b3c4:	2200      	movs	r2, #0
  40b3c6:	f000 f9bd 	bl	40b744 <_lseek_r>
  40b3ca:	89a3      	ldrh	r3, [r4, #12]
  40b3cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b3d0:	4638      	mov	r0, r7
  40b3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b3d6:	4632      	mov	r2, r6
  40b3d8:	81a3      	strh	r3, [r4, #12]
  40b3da:	462b      	mov	r3, r5
  40b3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b3e0:	f000 b89e 	b.w	40b520 <_write_r>

0040b3e4 <__sseek>:
  40b3e4:	b510      	push	{r4, lr}
  40b3e6:	460c      	mov	r4, r1
  40b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b3ec:	f000 f9aa 	bl	40b744 <_lseek_r>
  40b3f0:	1c42      	adds	r2, r0, #1
  40b3f2:	89a3      	ldrh	r3, [r4, #12]
  40b3f4:	d004      	beq.n	40b400 <__sseek+0x1c>
  40b3f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40b3fa:	6520      	str	r0, [r4, #80]	; 0x50
  40b3fc:	81a3      	strh	r3, [r4, #12]
  40b3fe:	bd10      	pop	{r4, pc}
  40b400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b404:	81a3      	strh	r3, [r4, #12]
  40b406:	bd10      	pop	{r4, pc}

0040b408 <__sclose>:
  40b408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b40c:	f000 b920 	b.w	40b650 <_close_r>

0040b410 <__ssprint_r>:
  40b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b414:	6893      	ldr	r3, [r2, #8]
  40b416:	b083      	sub	sp, #12
  40b418:	4691      	mov	r9, r2
  40b41a:	f8d2 8000 	ldr.w	r8, [r2]
  40b41e:	9001      	str	r0, [sp, #4]
  40b420:	2b00      	cmp	r3, #0
  40b422:	d073      	beq.n	40b50c <__ssprint_r+0xfc>
  40b424:	f04f 0b00 	mov.w	fp, #0
  40b428:	460d      	mov	r5, r1
  40b42a:	6808      	ldr	r0, [r1, #0]
  40b42c:	688b      	ldr	r3, [r1, #8]
  40b42e:	465c      	mov	r4, fp
  40b430:	2c00      	cmp	r4, #0
  40b432:	d046      	beq.n	40b4c2 <__ssprint_r+0xb2>
  40b434:	429c      	cmp	r4, r3
  40b436:	461e      	mov	r6, r3
  40b438:	469a      	mov	sl, r3
  40b43a:	d349      	bcc.n	40b4d0 <__ssprint_r+0xc0>
  40b43c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40b440:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40b444:	d02d      	beq.n	40b4a2 <__ssprint_r+0x92>
  40b446:	696b      	ldr	r3, [r5, #20]
  40b448:	1c62      	adds	r2, r4, #1
  40b44a:	6929      	ldr	r1, [r5, #16]
  40b44c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40b450:	1a46      	subs	r6, r0, r1
  40b452:	4610      	mov	r0, r2
  40b454:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40b458:	4430      	add	r0, r6
  40b45a:	105f      	asrs	r7, r3, #1
  40b45c:	4287      	cmp	r7, r0
  40b45e:	463a      	mov	r2, r7
  40b460:	d201      	bcs.n	40b466 <__ssprint_r+0x56>
  40b462:	4607      	mov	r7, r0
  40b464:	4602      	mov	r2, r0
  40b466:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40b46a:	d034      	beq.n	40b4d6 <__ssprint_r+0xc6>
  40b46c:	4611      	mov	r1, r2
  40b46e:	9801      	ldr	r0, [sp, #4]
  40b470:	f7fe fe5e 	bl	40a130 <_malloc_r>
  40b474:	4682      	mov	sl, r0
  40b476:	2800      	cmp	r0, #0
  40b478:	d04e      	beq.n	40b518 <__ssprint_r+0x108>
  40b47a:	4632      	mov	r2, r6
  40b47c:	6929      	ldr	r1, [r5, #16]
  40b47e:	f7ff f94b 	bl	40a718 <memcpy>
  40b482:	89aa      	ldrh	r2, [r5, #12]
  40b484:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40b488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40b48c:	81aa      	strh	r2, [r5, #12]
  40b48e:	eb0a 0006 	add.w	r0, sl, r6
  40b492:	1bba      	subs	r2, r7, r6
  40b494:	f8c5 a010 	str.w	sl, [r5, #16]
  40b498:	4626      	mov	r6, r4
  40b49a:	46a2      	mov	sl, r4
  40b49c:	6028      	str	r0, [r5, #0]
  40b49e:	60aa      	str	r2, [r5, #8]
  40b4a0:	616f      	str	r7, [r5, #20]
  40b4a2:	4652      	mov	r2, sl
  40b4a4:	4659      	mov	r1, fp
  40b4a6:	f7ff f9d1 	bl	40a84c <memmove>
  40b4aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40b4ae:	68ab      	ldr	r3, [r5, #8]
  40b4b0:	6828      	ldr	r0, [r5, #0]
  40b4b2:	1b14      	subs	r4, r2, r4
  40b4b4:	1b9b      	subs	r3, r3, r6
  40b4b6:	4450      	add	r0, sl
  40b4b8:	60ab      	str	r3, [r5, #8]
  40b4ba:	6028      	str	r0, [r5, #0]
  40b4bc:	f8c9 4008 	str.w	r4, [r9, #8]
  40b4c0:	b324      	cbz	r4, 40b50c <__ssprint_r+0xfc>
  40b4c2:	f8d8 b000 	ldr.w	fp, [r8]
  40b4c6:	f108 0808 	add.w	r8, r8, #8
  40b4ca:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40b4ce:	e7af      	b.n	40b430 <__ssprint_r+0x20>
  40b4d0:	4626      	mov	r6, r4
  40b4d2:	46a2      	mov	sl, r4
  40b4d4:	e7e5      	b.n	40b4a2 <__ssprint_r+0x92>
  40b4d6:	9801      	ldr	r0, [sp, #4]
  40b4d8:	f7ff fd2a 	bl	40af30 <_realloc_r>
  40b4dc:	4682      	mov	sl, r0
  40b4de:	2800      	cmp	r0, #0
  40b4e0:	d1d5      	bne.n	40b48e <__ssprint_r+0x7e>
  40b4e2:	9c01      	ldr	r4, [sp, #4]
  40b4e4:	6929      	ldr	r1, [r5, #16]
  40b4e6:	4620      	mov	r0, r4
  40b4e8:	f7fe fb12 	bl	409b10 <_free_r>
  40b4ec:	230c      	movs	r3, #12
  40b4ee:	6023      	str	r3, [r4, #0]
  40b4f0:	89ab      	ldrh	r3, [r5, #12]
  40b4f2:	2200      	movs	r2, #0
  40b4f4:	f04f 30ff 	mov.w	r0, #4294967295
  40b4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b4fc:	81ab      	strh	r3, [r5, #12]
  40b4fe:	f8c9 2008 	str.w	r2, [r9, #8]
  40b502:	f8c9 2004 	str.w	r2, [r9, #4]
  40b506:	b003      	add	sp, #12
  40b508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b50c:	2000      	movs	r0, #0
  40b50e:	f8c9 0004 	str.w	r0, [r9, #4]
  40b512:	b003      	add	sp, #12
  40b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b518:	230c      	movs	r3, #12
  40b51a:	9a01      	ldr	r2, [sp, #4]
  40b51c:	6013      	str	r3, [r2, #0]
  40b51e:	e7e7      	b.n	40b4f0 <__ssprint_r+0xe0>

0040b520 <_write_r>:
  40b520:	b570      	push	{r4, r5, r6, lr}
  40b522:	4c08      	ldr	r4, [pc, #32]	; (40b544 <_write_r+0x24>)
  40b524:	2500      	movs	r5, #0
  40b526:	4606      	mov	r6, r0
  40b528:	4608      	mov	r0, r1
  40b52a:	4611      	mov	r1, r2
  40b52c:	461a      	mov	r2, r3
  40b52e:	6025      	str	r5, [r4, #0]
  40b530:	f7f5 f818 	bl	400564 <_write>
  40b534:	1c43      	adds	r3, r0, #1
  40b536:	d000      	beq.n	40b53a <_write_r+0x1a>
  40b538:	bd70      	pop	{r4, r5, r6, pc}
  40b53a:	6823      	ldr	r3, [r4, #0]
  40b53c:	2b00      	cmp	r3, #0
  40b53e:	d0fb      	beq.n	40b538 <_write_r+0x18>
  40b540:	6033      	str	r3, [r6, #0]
  40b542:	bd70      	pop	{r4, r5, r6, pc}
  40b544:	20401838 	.word	0x20401838

0040b548 <__register_exitproc>:
  40b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b54c:	4c26      	ldr	r4, [pc, #152]	; (40b5e8 <__register_exitproc+0xa0>)
  40b54e:	4606      	mov	r6, r0
  40b550:	4688      	mov	r8, r1
  40b552:	4691      	mov	r9, r2
  40b554:	6825      	ldr	r5, [r4, #0]
  40b556:	469a      	mov	sl, r3
  40b558:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40b55c:	2c00      	cmp	r4, #0
  40b55e:	d03a      	beq.n	40b5d6 <__register_exitproc+0x8e>
  40b560:	6860      	ldr	r0, [r4, #4]
  40b562:	281f      	cmp	r0, #31
  40b564:	dc19      	bgt.n	40b59a <__register_exitproc+0x52>
  40b566:	1c41      	adds	r1, r0, #1
  40b568:	b186      	cbz	r6, 40b58c <__register_exitproc+0x44>
  40b56a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40b56e:	2201      	movs	r2, #1
  40b570:	2e02      	cmp	r6, #2
  40b572:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40b576:	fa02 f200 	lsl.w	r2, r2, r0
  40b57a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40b57e:	ea43 0302 	orr.w	r3, r3, r2
  40b582:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40b586:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40b58a:	d01e      	beq.n	40b5ca <__register_exitproc+0x82>
  40b58c:	1c83      	adds	r3, r0, #2
  40b58e:	6061      	str	r1, [r4, #4]
  40b590:	2000      	movs	r0, #0
  40b592:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b59a:	4b14      	ldr	r3, [pc, #80]	; (40b5ec <__register_exitproc+0xa4>)
  40b59c:	b303      	cbz	r3, 40b5e0 <__register_exitproc+0x98>
  40b59e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b5a2:	f7fe fdbd 	bl	40a120 <malloc>
  40b5a6:	4604      	mov	r4, r0
  40b5a8:	b1d0      	cbz	r0, 40b5e0 <__register_exitproc+0x98>
  40b5aa:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40b5ae:	2700      	movs	r7, #0
  40b5b0:	2101      	movs	r1, #1
  40b5b2:	6003      	str	r3, [r0, #0]
  40b5b4:	4638      	mov	r0, r7
  40b5b6:	6067      	str	r7, [r4, #4]
  40b5b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b5bc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40b5c0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40b5c4:	2e00      	cmp	r6, #0
  40b5c6:	d0e1      	beq.n	40b58c <__register_exitproc+0x44>
  40b5c8:	e7cf      	b.n	40b56a <__register_exitproc+0x22>
  40b5ca:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40b5ce:	431a      	orrs	r2, r3
  40b5d0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40b5d4:	e7da      	b.n	40b58c <__register_exitproc+0x44>
  40b5d6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40b5da:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40b5de:	e7bf      	b.n	40b560 <__register_exitproc+0x18>
  40b5e0:	f04f 30ff 	mov.w	r0, #4294967295
  40b5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b5e8:	0040d0c0 	.word	0x0040d0c0
  40b5ec:	0040a121 	.word	0x0040a121

0040b5f0 <_calloc_r>:
  40b5f0:	b510      	push	{r4, lr}
  40b5f2:	fb02 f101 	mul.w	r1, r2, r1
  40b5f6:	f7fe fd9b 	bl	40a130 <_malloc_r>
  40b5fa:	4604      	mov	r4, r0
  40b5fc:	b168      	cbz	r0, 40b61a <_calloc_r+0x2a>
  40b5fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b602:	f022 0203 	bic.w	r2, r2, #3
  40b606:	3a04      	subs	r2, #4
  40b608:	2a24      	cmp	r2, #36	; 0x24
  40b60a:	d814      	bhi.n	40b636 <_calloc_r+0x46>
  40b60c:	2a13      	cmp	r2, #19
  40b60e:	d806      	bhi.n	40b61e <_calloc_r+0x2e>
  40b610:	4603      	mov	r3, r0
  40b612:	2200      	movs	r2, #0
  40b614:	601a      	str	r2, [r3, #0]
  40b616:	605a      	str	r2, [r3, #4]
  40b618:	609a      	str	r2, [r3, #8]
  40b61a:	4620      	mov	r0, r4
  40b61c:	bd10      	pop	{r4, pc}
  40b61e:	2100      	movs	r1, #0
  40b620:	2a1b      	cmp	r2, #27
  40b622:	6001      	str	r1, [r0, #0]
  40b624:	6041      	str	r1, [r0, #4]
  40b626:	d90b      	bls.n	40b640 <_calloc_r+0x50>
  40b628:	2a24      	cmp	r2, #36	; 0x24
  40b62a:	6081      	str	r1, [r0, #8]
  40b62c:	60c1      	str	r1, [r0, #12]
  40b62e:	d00a      	beq.n	40b646 <_calloc_r+0x56>
  40b630:	f100 0310 	add.w	r3, r0, #16
  40b634:	e7ed      	b.n	40b612 <_calloc_r+0x22>
  40b636:	2100      	movs	r1, #0
  40b638:	f7fb fbc4 	bl	406dc4 <memset>
  40b63c:	4620      	mov	r0, r4
  40b63e:	bd10      	pop	{r4, pc}
  40b640:	f100 0308 	add.w	r3, r0, #8
  40b644:	e7e5      	b.n	40b612 <_calloc_r+0x22>
  40b646:	6101      	str	r1, [r0, #16]
  40b648:	f100 0318 	add.w	r3, r0, #24
  40b64c:	6141      	str	r1, [r0, #20]
  40b64e:	e7e0      	b.n	40b612 <_calloc_r+0x22>

0040b650 <_close_r>:
  40b650:	b538      	push	{r3, r4, r5, lr}
  40b652:	2300      	movs	r3, #0
  40b654:	4c06      	ldr	r4, [pc, #24]	; (40b670 <_close_r+0x20>)
  40b656:	4605      	mov	r5, r0
  40b658:	4608      	mov	r0, r1
  40b65a:	6023      	str	r3, [r4, #0]
  40b65c:	f7f6 fff2 	bl	402644 <_close>
  40b660:	1c43      	adds	r3, r0, #1
  40b662:	d000      	beq.n	40b666 <_close_r+0x16>
  40b664:	bd38      	pop	{r3, r4, r5, pc}
  40b666:	6823      	ldr	r3, [r4, #0]
  40b668:	2b00      	cmp	r3, #0
  40b66a:	d0fb      	beq.n	40b664 <_close_r+0x14>
  40b66c:	602b      	str	r3, [r5, #0]
  40b66e:	bd38      	pop	{r3, r4, r5, pc}
  40b670:	20401838 	.word	0x20401838

0040b674 <_fclose_r>:
  40b674:	2900      	cmp	r1, #0
  40b676:	d03d      	beq.n	40b6f4 <_fclose_r+0x80>
  40b678:	b570      	push	{r4, r5, r6, lr}
  40b67a:	4605      	mov	r5, r0
  40b67c:	460c      	mov	r4, r1
  40b67e:	b108      	cbz	r0, 40b684 <_fclose_r+0x10>
  40b680:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b682:	b37b      	cbz	r3, 40b6e4 <_fclose_r+0x70>
  40b684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b688:	b90b      	cbnz	r3, 40b68e <_fclose_r+0x1a>
  40b68a:	2000      	movs	r0, #0
  40b68c:	bd70      	pop	{r4, r5, r6, pc}
  40b68e:	4628      	mov	r0, r5
  40b690:	4621      	mov	r1, r4
  40b692:	f7fe f891 	bl	4097b8 <__sflush_r>
  40b696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b698:	4606      	mov	r6, r0
  40b69a:	b133      	cbz	r3, 40b6aa <_fclose_r+0x36>
  40b69c:	4628      	mov	r0, r5
  40b69e:	69e1      	ldr	r1, [r4, #28]
  40b6a0:	4798      	blx	r3
  40b6a2:	2800      	cmp	r0, #0
  40b6a4:	bfb8      	it	lt
  40b6a6:	f04f 36ff 	movlt.w	r6, #4294967295
  40b6aa:	89a3      	ldrh	r3, [r4, #12]
  40b6ac:	061b      	lsls	r3, r3, #24
  40b6ae:	d41c      	bmi.n	40b6ea <_fclose_r+0x76>
  40b6b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b6b2:	b141      	cbz	r1, 40b6c6 <_fclose_r+0x52>
  40b6b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b6b8:	4299      	cmp	r1, r3
  40b6ba:	d002      	beq.n	40b6c2 <_fclose_r+0x4e>
  40b6bc:	4628      	mov	r0, r5
  40b6be:	f7fe fa27 	bl	409b10 <_free_r>
  40b6c2:	2300      	movs	r3, #0
  40b6c4:	6323      	str	r3, [r4, #48]	; 0x30
  40b6c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40b6c8:	b121      	cbz	r1, 40b6d4 <_fclose_r+0x60>
  40b6ca:	4628      	mov	r0, r5
  40b6cc:	f7fe fa20 	bl	409b10 <_free_r>
  40b6d0:	2300      	movs	r3, #0
  40b6d2:	6463      	str	r3, [r4, #68]	; 0x44
  40b6d4:	f7fe f9b4 	bl	409a40 <__sfp_lock_acquire>
  40b6d8:	2300      	movs	r3, #0
  40b6da:	81a3      	strh	r3, [r4, #12]
  40b6dc:	f7fe f9b2 	bl	409a44 <__sfp_lock_release>
  40b6e0:	4630      	mov	r0, r6
  40b6e2:	bd70      	pop	{r4, r5, r6, pc}
  40b6e4:	f7fe f9a6 	bl	409a34 <__sinit>
  40b6e8:	e7cc      	b.n	40b684 <_fclose_r+0x10>
  40b6ea:	4628      	mov	r0, r5
  40b6ec:	6921      	ldr	r1, [r4, #16]
  40b6ee:	f7fe fa0f 	bl	409b10 <_free_r>
  40b6f2:	e7dd      	b.n	40b6b0 <_fclose_r+0x3c>
  40b6f4:	2000      	movs	r0, #0
  40b6f6:	4770      	bx	lr

0040b6f8 <_fstat_r>:
  40b6f8:	b538      	push	{r3, r4, r5, lr}
  40b6fa:	2300      	movs	r3, #0
  40b6fc:	4c07      	ldr	r4, [pc, #28]	; (40b71c <_fstat_r+0x24>)
  40b6fe:	4605      	mov	r5, r0
  40b700:	4608      	mov	r0, r1
  40b702:	4611      	mov	r1, r2
  40b704:	6023      	str	r3, [r4, #0]
  40b706:	f7f6 ffa9 	bl	40265c <_fstat>
  40b70a:	1c43      	adds	r3, r0, #1
  40b70c:	d000      	beq.n	40b710 <_fstat_r+0x18>
  40b70e:	bd38      	pop	{r3, r4, r5, pc}
  40b710:	6823      	ldr	r3, [r4, #0]
  40b712:	2b00      	cmp	r3, #0
  40b714:	d0fb      	beq.n	40b70e <_fstat_r+0x16>
  40b716:	602b      	str	r3, [r5, #0]
  40b718:	bd38      	pop	{r3, r4, r5, pc}
  40b71a:	bf00      	nop
  40b71c:	20401838 	.word	0x20401838

0040b720 <_isatty_r>:
  40b720:	b538      	push	{r3, r4, r5, lr}
  40b722:	2300      	movs	r3, #0
  40b724:	4c06      	ldr	r4, [pc, #24]	; (40b740 <_isatty_r+0x20>)
  40b726:	4605      	mov	r5, r0
  40b728:	4608      	mov	r0, r1
  40b72a:	6023      	str	r3, [r4, #0]
  40b72c:	f7f6 ffa6 	bl	40267c <_isatty>
  40b730:	1c43      	adds	r3, r0, #1
  40b732:	d000      	beq.n	40b736 <_isatty_r+0x16>
  40b734:	bd38      	pop	{r3, r4, r5, pc}
  40b736:	6823      	ldr	r3, [r4, #0]
  40b738:	2b00      	cmp	r3, #0
  40b73a:	d0fb      	beq.n	40b734 <_isatty_r+0x14>
  40b73c:	602b      	str	r3, [r5, #0]
  40b73e:	bd38      	pop	{r3, r4, r5, pc}
  40b740:	20401838 	.word	0x20401838

0040b744 <_lseek_r>:
  40b744:	b570      	push	{r4, r5, r6, lr}
  40b746:	4c08      	ldr	r4, [pc, #32]	; (40b768 <_lseek_r+0x24>)
  40b748:	2500      	movs	r5, #0
  40b74a:	4606      	mov	r6, r0
  40b74c:	4608      	mov	r0, r1
  40b74e:	4611      	mov	r1, r2
  40b750:	461a      	mov	r2, r3
  40b752:	6025      	str	r5, [r4, #0]
  40b754:	f7f6 ff9e 	bl	402694 <_lseek>
  40b758:	1c43      	adds	r3, r0, #1
  40b75a:	d000      	beq.n	40b75e <_lseek_r+0x1a>
  40b75c:	bd70      	pop	{r4, r5, r6, pc}
  40b75e:	6823      	ldr	r3, [r4, #0]
  40b760:	2b00      	cmp	r3, #0
  40b762:	d0fb      	beq.n	40b75c <_lseek_r+0x18>
  40b764:	6033      	str	r3, [r6, #0]
  40b766:	bd70      	pop	{r4, r5, r6, pc}
  40b768:	20401838 	.word	0x20401838

0040b76c <_read_r>:
  40b76c:	b570      	push	{r4, r5, r6, lr}
  40b76e:	4c08      	ldr	r4, [pc, #32]	; (40b790 <_read_r+0x24>)
  40b770:	2500      	movs	r5, #0
  40b772:	4606      	mov	r6, r0
  40b774:	4608      	mov	r0, r1
  40b776:	4611      	mov	r1, r2
  40b778:	461a      	mov	r2, r3
  40b77a:	6025      	str	r5, [r4, #0]
  40b77c:	f7f4 fec6 	bl	40050c <_read>
  40b780:	1c43      	adds	r3, r0, #1
  40b782:	d000      	beq.n	40b786 <_read_r+0x1a>
  40b784:	bd70      	pop	{r4, r5, r6, pc}
  40b786:	6823      	ldr	r3, [r4, #0]
  40b788:	2b00      	cmp	r3, #0
  40b78a:	d0fb      	beq.n	40b784 <_read_r+0x18>
  40b78c:	6033      	str	r3, [r6, #0]
  40b78e:	bd70      	pop	{r4, r5, r6, pc}
  40b790:	20401838 	.word	0x20401838

0040b794 <__aeabi_drsub>:
  40b794:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40b798:	e002      	b.n	40b7a0 <__adddf3>
  40b79a:	bf00      	nop

0040b79c <__aeabi_dsub>:
  40b79c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040b7a0 <__adddf3>:
  40b7a0:	b530      	push	{r4, r5, lr}
  40b7a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40b7a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40b7aa:	ea94 0f05 	teq	r4, r5
  40b7ae:	bf08      	it	eq
  40b7b0:	ea90 0f02 	teqeq	r0, r2
  40b7b4:	bf1f      	itttt	ne
  40b7b6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40b7ba:	ea55 0c02 	orrsne.w	ip, r5, r2
  40b7be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40b7c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b7c6:	f000 80e2 	beq.w	40b98e <__adddf3+0x1ee>
  40b7ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40b7ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40b7d2:	bfb8      	it	lt
  40b7d4:	426d      	neglt	r5, r5
  40b7d6:	dd0c      	ble.n	40b7f2 <__adddf3+0x52>
  40b7d8:	442c      	add	r4, r5
  40b7da:	ea80 0202 	eor.w	r2, r0, r2
  40b7de:	ea81 0303 	eor.w	r3, r1, r3
  40b7e2:	ea82 0000 	eor.w	r0, r2, r0
  40b7e6:	ea83 0101 	eor.w	r1, r3, r1
  40b7ea:	ea80 0202 	eor.w	r2, r0, r2
  40b7ee:	ea81 0303 	eor.w	r3, r1, r3
  40b7f2:	2d36      	cmp	r5, #54	; 0x36
  40b7f4:	bf88      	it	hi
  40b7f6:	bd30      	pophi	{r4, r5, pc}
  40b7f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b7fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b800:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40b804:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40b808:	d002      	beq.n	40b810 <__adddf3+0x70>
  40b80a:	4240      	negs	r0, r0
  40b80c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b810:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40b814:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b818:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40b81c:	d002      	beq.n	40b824 <__adddf3+0x84>
  40b81e:	4252      	negs	r2, r2
  40b820:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b824:	ea94 0f05 	teq	r4, r5
  40b828:	f000 80a7 	beq.w	40b97a <__adddf3+0x1da>
  40b82c:	f1a4 0401 	sub.w	r4, r4, #1
  40b830:	f1d5 0e20 	rsbs	lr, r5, #32
  40b834:	db0d      	blt.n	40b852 <__adddf3+0xb2>
  40b836:	fa02 fc0e 	lsl.w	ip, r2, lr
  40b83a:	fa22 f205 	lsr.w	r2, r2, r5
  40b83e:	1880      	adds	r0, r0, r2
  40b840:	f141 0100 	adc.w	r1, r1, #0
  40b844:	fa03 f20e 	lsl.w	r2, r3, lr
  40b848:	1880      	adds	r0, r0, r2
  40b84a:	fa43 f305 	asr.w	r3, r3, r5
  40b84e:	4159      	adcs	r1, r3
  40b850:	e00e      	b.n	40b870 <__adddf3+0xd0>
  40b852:	f1a5 0520 	sub.w	r5, r5, #32
  40b856:	f10e 0e20 	add.w	lr, lr, #32
  40b85a:	2a01      	cmp	r2, #1
  40b85c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40b860:	bf28      	it	cs
  40b862:	f04c 0c02 	orrcs.w	ip, ip, #2
  40b866:	fa43 f305 	asr.w	r3, r3, r5
  40b86a:	18c0      	adds	r0, r0, r3
  40b86c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40b870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b874:	d507      	bpl.n	40b886 <__adddf3+0xe6>
  40b876:	f04f 0e00 	mov.w	lr, #0
  40b87a:	f1dc 0c00 	rsbs	ip, ip, #0
  40b87e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40b882:	eb6e 0101 	sbc.w	r1, lr, r1
  40b886:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b88a:	d31b      	bcc.n	40b8c4 <__adddf3+0x124>
  40b88c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40b890:	d30c      	bcc.n	40b8ac <__adddf3+0x10c>
  40b892:	0849      	lsrs	r1, r1, #1
  40b894:	ea5f 0030 	movs.w	r0, r0, rrx
  40b898:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40b89c:	f104 0401 	add.w	r4, r4, #1
  40b8a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40b8a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40b8a8:	f080 809a 	bcs.w	40b9e0 <__adddf3+0x240>
  40b8ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b8b0:	bf08      	it	eq
  40b8b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b8b6:	f150 0000 	adcs.w	r0, r0, #0
  40b8ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b8be:	ea41 0105 	orr.w	r1, r1, r5
  40b8c2:	bd30      	pop	{r4, r5, pc}
  40b8c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40b8c8:	4140      	adcs	r0, r0
  40b8ca:	eb41 0101 	adc.w	r1, r1, r1
  40b8ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b8d2:	f1a4 0401 	sub.w	r4, r4, #1
  40b8d6:	d1e9      	bne.n	40b8ac <__adddf3+0x10c>
  40b8d8:	f091 0f00 	teq	r1, #0
  40b8dc:	bf04      	itt	eq
  40b8de:	4601      	moveq	r1, r0
  40b8e0:	2000      	moveq	r0, #0
  40b8e2:	fab1 f381 	clz	r3, r1
  40b8e6:	bf08      	it	eq
  40b8e8:	3320      	addeq	r3, #32
  40b8ea:	f1a3 030b 	sub.w	r3, r3, #11
  40b8ee:	f1b3 0220 	subs.w	r2, r3, #32
  40b8f2:	da0c      	bge.n	40b90e <__adddf3+0x16e>
  40b8f4:	320c      	adds	r2, #12
  40b8f6:	dd08      	ble.n	40b90a <__adddf3+0x16a>
  40b8f8:	f102 0c14 	add.w	ip, r2, #20
  40b8fc:	f1c2 020c 	rsb	r2, r2, #12
  40b900:	fa01 f00c 	lsl.w	r0, r1, ip
  40b904:	fa21 f102 	lsr.w	r1, r1, r2
  40b908:	e00c      	b.n	40b924 <__adddf3+0x184>
  40b90a:	f102 0214 	add.w	r2, r2, #20
  40b90e:	bfd8      	it	le
  40b910:	f1c2 0c20 	rsble	ip, r2, #32
  40b914:	fa01 f102 	lsl.w	r1, r1, r2
  40b918:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b91c:	bfdc      	itt	le
  40b91e:	ea41 010c 	orrle.w	r1, r1, ip
  40b922:	4090      	lslle	r0, r2
  40b924:	1ae4      	subs	r4, r4, r3
  40b926:	bfa2      	ittt	ge
  40b928:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40b92c:	4329      	orrge	r1, r5
  40b92e:	bd30      	popge	{r4, r5, pc}
  40b930:	ea6f 0404 	mvn.w	r4, r4
  40b934:	3c1f      	subs	r4, #31
  40b936:	da1c      	bge.n	40b972 <__adddf3+0x1d2>
  40b938:	340c      	adds	r4, #12
  40b93a:	dc0e      	bgt.n	40b95a <__adddf3+0x1ba>
  40b93c:	f104 0414 	add.w	r4, r4, #20
  40b940:	f1c4 0220 	rsb	r2, r4, #32
  40b944:	fa20 f004 	lsr.w	r0, r0, r4
  40b948:	fa01 f302 	lsl.w	r3, r1, r2
  40b94c:	ea40 0003 	orr.w	r0, r0, r3
  40b950:	fa21 f304 	lsr.w	r3, r1, r4
  40b954:	ea45 0103 	orr.w	r1, r5, r3
  40b958:	bd30      	pop	{r4, r5, pc}
  40b95a:	f1c4 040c 	rsb	r4, r4, #12
  40b95e:	f1c4 0220 	rsb	r2, r4, #32
  40b962:	fa20 f002 	lsr.w	r0, r0, r2
  40b966:	fa01 f304 	lsl.w	r3, r1, r4
  40b96a:	ea40 0003 	orr.w	r0, r0, r3
  40b96e:	4629      	mov	r1, r5
  40b970:	bd30      	pop	{r4, r5, pc}
  40b972:	fa21 f004 	lsr.w	r0, r1, r4
  40b976:	4629      	mov	r1, r5
  40b978:	bd30      	pop	{r4, r5, pc}
  40b97a:	f094 0f00 	teq	r4, #0
  40b97e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40b982:	bf06      	itte	eq
  40b984:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40b988:	3401      	addeq	r4, #1
  40b98a:	3d01      	subne	r5, #1
  40b98c:	e74e      	b.n	40b82c <__adddf3+0x8c>
  40b98e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b992:	bf18      	it	ne
  40b994:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b998:	d029      	beq.n	40b9ee <__adddf3+0x24e>
  40b99a:	ea94 0f05 	teq	r4, r5
  40b99e:	bf08      	it	eq
  40b9a0:	ea90 0f02 	teqeq	r0, r2
  40b9a4:	d005      	beq.n	40b9b2 <__adddf3+0x212>
  40b9a6:	ea54 0c00 	orrs.w	ip, r4, r0
  40b9aa:	bf04      	itt	eq
  40b9ac:	4619      	moveq	r1, r3
  40b9ae:	4610      	moveq	r0, r2
  40b9b0:	bd30      	pop	{r4, r5, pc}
  40b9b2:	ea91 0f03 	teq	r1, r3
  40b9b6:	bf1e      	ittt	ne
  40b9b8:	2100      	movne	r1, #0
  40b9ba:	2000      	movne	r0, #0
  40b9bc:	bd30      	popne	{r4, r5, pc}
  40b9be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40b9c2:	d105      	bne.n	40b9d0 <__adddf3+0x230>
  40b9c4:	0040      	lsls	r0, r0, #1
  40b9c6:	4149      	adcs	r1, r1
  40b9c8:	bf28      	it	cs
  40b9ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40b9ce:	bd30      	pop	{r4, r5, pc}
  40b9d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40b9d4:	bf3c      	itt	cc
  40b9d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40b9da:	bd30      	popcc	{r4, r5, pc}
  40b9dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b9e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40b9e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b9e8:	f04f 0000 	mov.w	r0, #0
  40b9ec:	bd30      	pop	{r4, r5, pc}
  40b9ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40b9f2:	bf1a      	itte	ne
  40b9f4:	4619      	movne	r1, r3
  40b9f6:	4610      	movne	r0, r2
  40b9f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40b9fc:	bf1c      	itt	ne
  40b9fe:	460b      	movne	r3, r1
  40ba00:	4602      	movne	r2, r0
  40ba02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ba06:	bf06      	itte	eq
  40ba08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ba0c:	ea91 0f03 	teqeq	r1, r3
  40ba10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ba14:	bd30      	pop	{r4, r5, pc}
  40ba16:	bf00      	nop

0040ba18 <__aeabi_ui2d>:
  40ba18:	f090 0f00 	teq	r0, #0
  40ba1c:	bf04      	itt	eq
  40ba1e:	2100      	moveq	r1, #0
  40ba20:	4770      	bxeq	lr
  40ba22:	b530      	push	{r4, r5, lr}
  40ba24:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ba28:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ba2c:	f04f 0500 	mov.w	r5, #0
  40ba30:	f04f 0100 	mov.w	r1, #0
  40ba34:	e750      	b.n	40b8d8 <__adddf3+0x138>
  40ba36:	bf00      	nop

0040ba38 <__aeabi_i2d>:
  40ba38:	f090 0f00 	teq	r0, #0
  40ba3c:	bf04      	itt	eq
  40ba3e:	2100      	moveq	r1, #0
  40ba40:	4770      	bxeq	lr
  40ba42:	b530      	push	{r4, r5, lr}
  40ba44:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ba48:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ba4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ba50:	bf48      	it	mi
  40ba52:	4240      	negmi	r0, r0
  40ba54:	f04f 0100 	mov.w	r1, #0
  40ba58:	e73e      	b.n	40b8d8 <__adddf3+0x138>
  40ba5a:	bf00      	nop

0040ba5c <__aeabi_f2d>:
  40ba5c:	0042      	lsls	r2, r0, #1
  40ba5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40ba62:	ea4f 0131 	mov.w	r1, r1, rrx
  40ba66:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40ba6a:	bf1f      	itttt	ne
  40ba6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40ba70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ba74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40ba78:	4770      	bxne	lr
  40ba7a:	f092 0f00 	teq	r2, #0
  40ba7e:	bf14      	ite	ne
  40ba80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ba84:	4770      	bxeq	lr
  40ba86:	b530      	push	{r4, r5, lr}
  40ba88:	f44f 7460 	mov.w	r4, #896	; 0x380
  40ba8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ba90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ba94:	e720      	b.n	40b8d8 <__adddf3+0x138>
  40ba96:	bf00      	nop

0040ba98 <__aeabi_ul2d>:
  40ba98:	ea50 0201 	orrs.w	r2, r0, r1
  40ba9c:	bf08      	it	eq
  40ba9e:	4770      	bxeq	lr
  40baa0:	b530      	push	{r4, r5, lr}
  40baa2:	f04f 0500 	mov.w	r5, #0
  40baa6:	e00a      	b.n	40babe <__aeabi_l2d+0x16>

0040baa8 <__aeabi_l2d>:
  40baa8:	ea50 0201 	orrs.w	r2, r0, r1
  40baac:	bf08      	it	eq
  40baae:	4770      	bxeq	lr
  40bab0:	b530      	push	{r4, r5, lr}
  40bab2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40bab6:	d502      	bpl.n	40babe <__aeabi_l2d+0x16>
  40bab8:	4240      	negs	r0, r0
  40baba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40babe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bac2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bac6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40baca:	f43f aedc 	beq.w	40b886 <__adddf3+0xe6>
  40bace:	f04f 0203 	mov.w	r2, #3
  40bad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bad6:	bf18      	it	ne
  40bad8:	3203      	addne	r2, #3
  40bada:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bade:	bf18      	it	ne
  40bae0:	3203      	addne	r2, #3
  40bae2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40bae6:	f1c2 0320 	rsb	r3, r2, #32
  40baea:	fa00 fc03 	lsl.w	ip, r0, r3
  40baee:	fa20 f002 	lsr.w	r0, r0, r2
  40baf2:	fa01 fe03 	lsl.w	lr, r1, r3
  40baf6:	ea40 000e 	orr.w	r0, r0, lr
  40bafa:	fa21 f102 	lsr.w	r1, r1, r2
  40bafe:	4414      	add	r4, r2
  40bb00:	e6c1      	b.n	40b886 <__adddf3+0xe6>
  40bb02:	bf00      	nop

0040bb04 <__aeabi_dmul>:
  40bb04:	b570      	push	{r4, r5, r6, lr}
  40bb06:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40bb0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40bb0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40bb12:	bf1d      	ittte	ne
  40bb14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40bb18:	ea94 0f0c 	teqne	r4, ip
  40bb1c:	ea95 0f0c 	teqne	r5, ip
  40bb20:	f000 f8de 	bleq	40bce0 <__aeabi_dmul+0x1dc>
  40bb24:	442c      	add	r4, r5
  40bb26:	ea81 0603 	eor.w	r6, r1, r3
  40bb2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40bb2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40bb32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40bb36:	bf18      	it	ne
  40bb38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40bb3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bb40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40bb44:	d038      	beq.n	40bbb8 <__aeabi_dmul+0xb4>
  40bb46:	fba0 ce02 	umull	ip, lr, r0, r2
  40bb4a:	f04f 0500 	mov.w	r5, #0
  40bb4e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40bb52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40bb56:	fbe0 e503 	umlal	lr, r5, r0, r3
  40bb5a:	f04f 0600 	mov.w	r6, #0
  40bb5e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40bb62:	f09c 0f00 	teq	ip, #0
  40bb66:	bf18      	it	ne
  40bb68:	f04e 0e01 	orrne.w	lr, lr, #1
  40bb6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40bb70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40bb74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40bb78:	d204      	bcs.n	40bb84 <__aeabi_dmul+0x80>
  40bb7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40bb7e:	416d      	adcs	r5, r5
  40bb80:	eb46 0606 	adc.w	r6, r6, r6
  40bb84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40bb88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40bb8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40bb90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40bb94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40bb98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bb9c:	bf88      	it	hi
  40bb9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bba2:	d81e      	bhi.n	40bbe2 <__aeabi_dmul+0xde>
  40bba4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40bba8:	bf08      	it	eq
  40bbaa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40bbae:	f150 0000 	adcs.w	r0, r0, #0
  40bbb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bbb6:	bd70      	pop	{r4, r5, r6, pc}
  40bbb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40bbbc:	ea46 0101 	orr.w	r1, r6, r1
  40bbc0:	ea40 0002 	orr.w	r0, r0, r2
  40bbc4:	ea81 0103 	eor.w	r1, r1, r3
  40bbc8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40bbcc:	bfc2      	ittt	gt
  40bbce:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bbd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bbd6:	bd70      	popgt	{r4, r5, r6, pc}
  40bbd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bbdc:	f04f 0e00 	mov.w	lr, #0
  40bbe0:	3c01      	subs	r4, #1
  40bbe2:	f300 80ab 	bgt.w	40bd3c <__aeabi_dmul+0x238>
  40bbe6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40bbea:	bfde      	ittt	le
  40bbec:	2000      	movle	r0, #0
  40bbee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40bbf2:	bd70      	pople	{r4, r5, r6, pc}
  40bbf4:	f1c4 0400 	rsb	r4, r4, #0
  40bbf8:	3c20      	subs	r4, #32
  40bbfa:	da35      	bge.n	40bc68 <__aeabi_dmul+0x164>
  40bbfc:	340c      	adds	r4, #12
  40bbfe:	dc1b      	bgt.n	40bc38 <__aeabi_dmul+0x134>
  40bc00:	f104 0414 	add.w	r4, r4, #20
  40bc04:	f1c4 0520 	rsb	r5, r4, #32
  40bc08:	fa00 f305 	lsl.w	r3, r0, r5
  40bc0c:	fa20 f004 	lsr.w	r0, r0, r4
  40bc10:	fa01 f205 	lsl.w	r2, r1, r5
  40bc14:	ea40 0002 	orr.w	r0, r0, r2
  40bc18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40bc1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40bc20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bc24:	fa21 f604 	lsr.w	r6, r1, r4
  40bc28:	eb42 0106 	adc.w	r1, r2, r6
  40bc2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bc30:	bf08      	it	eq
  40bc32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bc36:	bd70      	pop	{r4, r5, r6, pc}
  40bc38:	f1c4 040c 	rsb	r4, r4, #12
  40bc3c:	f1c4 0520 	rsb	r5, r4, #32
  40bc40:	fa00 f304 	lsl.w	r3, r0, r4
  40bc44:	fa20 f005 	lsr.w	r0, r0, r5
  40bc48:	fa01 f204 	lsl.w	r2, r1, r4
  40bc4c:	ea40 0002 	orr.w	r0, r0, r2
  40bc50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bc54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bc58:	f141 0100 	adc.w	r1, r1, #0
  40bc5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bc60:	bf08      	it	eq
  40bc62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bc66:	bd70      	pop	{r4, r5, r6, pc}
  40bc68:	f1c4 0520 	rsb	r5, r4, #32
  40bc6c:	fa00 f205 	lsl.w	r2, r0, r5
  40bc70:	ea4e 0e02 	orr.w	lr, lr, r2
  40bc74:	fa20 f304 	lsr.w	r3, r0, r4
  40bc78:	fa01 f205 	lsl.w	r2, r1, r5
  40bc7c:	ea43 0302 	orr.w	r3, r3, r2
  40bc80:	fa21 f004 	lsr.w	r0, r1, r4
  40bc84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bc88:	fa21 f204 	lsr.w	r2, r1, r4
  40bc8c:	ea20 0002 	bic.w	r0, r0, r2
  40bc90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40bc94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bc98:	bf08      	it	eq
  40bc9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bc9e:	bd70      	pop	{r4, r5, r6, pc}
  40bca0:	f094 0f00 	teq	r4, #0
  40bca4:	d10f      	bne.n	40bcc6 <__aeabi_dmul+0x1c2>
  40bca6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40bcaa:	0040      	lsls	r0, r0, #1
  40bcac:	eb41 0101 	adc.w	r1, r1, r1
  40bcb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bcb4:	bf08      	it	eq
  40bcb6:	3c01      	subeq	r4, #1
  40bcb8:	d0f7      	beq.n	40bcaa <__aeabi_dmul+0x1a6>
  40bcba:	ea41 0106 	orr.w	r1, r1, r6
  40bcbe:	f095 0f00 	teq	r5, #0
  40bcc2:	bf18      	it	ne
  40bcc4:	4770      	bxne	lr
  40bcc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40bcca:	0052      	lsls	r2, r2, #1
  40bccc:	eb43 0303 	adc.w	r3, r3, r3
  40bcd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40bcd4:	bf08      	it	eq
  40bcd6:	3d01      	subeq	r5, #1
  40bcd8:	d0f7      	beq.n	40bcca <__aeabi_dmul+0x1c6>
  40bcda:	ea43 0306 	orr.w	r3, r3, r6
  40bcde:	4770      	bx	lr
  40bce0:	ea94 0f0c 	teq	r4, ip
  40bce4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40bce8:	bf18      	it	ne
  40bcea:	ea95 0f0c 	teqne	r5, ip
  40bcee:	d00c      	beq.n	40bd0a <__aeabi_dmul+0x206>
  40bcf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bcf4:	bf18      	it	ne
  40bcf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bcfa:	d1d1      	bne.n	40bca0 <__aeabi_dmul+0x19c>
  40bcfc:	ea81 0103 	eor.w	r1, r1, r3
  40bd00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bd04:	f04f 0000 	mov.w	r0, #0
  40bd08:	bd70      	pop	{r4, r5, r6, pc}
  40bd0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bd0e:	bf06      	itte	eq
  40bd10:	4610      	moveq	r0, r2
  40bd12:	4619      	moveq	r1, r3
  40bd14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bd18:	d019      	beq.n	40bd4e <__aeabi_dmul+0x24a>
  40bd1a:	ea94 0f0c 	teq	r4, ip
  40bd1e:	d102      	bne.n	40bd26 <__aeabi_dmul+0x222>
  40bd20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40bd24:	d113      	bne.n	40bd4e <__aeabi_dmul+0x24a>
  40bd26:	ea95 0f0c 	teq	r5, ip
  40bd2a:	d105      	bne.n	40bd38 <__aeabi_dmul+0x234>
  40bd2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40bd30:	bf1c      	itt	ne
  40bd32:	4610      	movne	r0, r2
  40bd34:	4619      	movne	r1, r3
  40bd36:	d10a      	bne.n	40bd4e <__aeabi_dmul+0x24a>
  40bd38:	ea81 0103 	eor.w	r1, r1, r3
  40bd3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bd40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40bd44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bd48:	f04f 0000 	mov.w	r0, #0
  40bd4c:	bd70      	pop	{r4, r5, r6, pc}
  40bd4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40bd52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40bd56:	bd70      	pop	{r4, r5, r6, pc}

0040bd58 <__aeabi_ddiv>:
  40bd58:	b570      	push	{r4, r5, r6, lr}
  40bd5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40bd5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40bd62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40bd66:	bf1d      	ittte	ne
  40bd68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40bd6c:	ea94 0f0c 	teqne	r4, ip
  40bd70:	ea95 0f0c 	teqne	r5, ip
  40bd74:	f000 f8a7 	bleq	40bec6 <__aeabi_ddiv+0x16e>
  40bd78:	eba4 0405 	sub.w	r4, r4, r5
  40bd7c:	ea81 0e03 	eor.w	lr, r1, r3
  40bd80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40bd84:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bd88:	f000 8088 	beq.w	40be9c <__aeabi_ddiv+0x144>
  40bd8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40bd90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40bd94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40bd98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40bd9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40bda0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40bda4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40bda8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40bdac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40bdb0:	429d      	cmp	r5, r3
  40bdb2:	bf08      	it	eq
  40bdb4:	4296      	cmpeq	r6, r2
  40bdb6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40bdba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40bdbe:	d202      	bcs.n	40bdc6 <__aeabi_ddiv+0x6e>
  40bdc0:	085b      	lsrs	r3, r3, #1
  40bdc2:	ea4f 0232 	mov.w	r2, r2, rrx
  40bdc6:	1ab6      	subs	r6, r6, r2
  40bdc8:	eb65 0503 	sbc.w	r5, r5, r3
  40bdcc:	085b      	lsrs	r3, r3, #1
  40bdce:	ea4f 0232 	mov.w	r2, r2, rrx
  40bdd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40bdd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40bdda:	ebb6 0e02 	subs.w	lr, r6, r2
  40bdde:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bde2:	bf22      	ittt	cs
  40bde4:	1ab6      	subcs	r6, r6, r2
  40bde6:	4675      	movcs	r5, lr
  40bde8:	ea40 000c 	orrcs.w	r0, r0, ip
  40bdec:	085b      	lsrs	r3, r3, #1
  40bdee:	ea4f 0232 	mov.w	r2, r2, rrx
  40bdf2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bdf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bdfa:	bf22      	ittt	cs
  40bdfc:	1ab6      	subcs	r6, r6, r2
  40bdfe:	4675      	movcs	r5, lr
  40be00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40be04:	085b      	lsrs	r3, r3, #1
  40be06:	ea4f 0232 	mov.w	r2, r2, rrx
  40be0a:	ebb6 0e02 	subs.w	lr, r6, r2
  40be0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40be12:	bf22      	ittt	cs
  40be14:	1ab6      	subcs	r6, r6, r2
  40be16:	4675      	movcs	r5, lr
  40be18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40be1c:	085b      	lsrs	r3, r3, #1
  40be1e:	ea4f 0232 	mov.w	r2, r2, rrx
  40be22:	ebb6 0e02 	subs.w	lr, r6, r2
  40be26:	eb75 0e03 	sbcs.w	lr, r5, r3
  40be2a:	bf22      	ittt	cs
  40be2c:	1ab6      	subcs	r6, r6, r2
  40be2e:	4675      	movcs	r5, lr
  40be30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40be34:	ea55 0e06 	orrs.w	lr, r5, r6
  40be38:	d018      	beq.n	40be6c <__aeabi_ddiv+0x114>
  40be3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40be3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40be42:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40be46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40be4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40be4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40be52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40be56:	d1c0      	bne.n	40bdda <__aeabi_ddiv+0x82>
  40be58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40be5c:	d10b      	bne.n	40be76 <__aeabi_ddiv+0x11e>
  40be5e:	ea41 0100 	orr.w	r1, r1, r0
  40be62:	f04f 0000 	mov.w	r0, #0
  40be66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40be6a:	e7b6      	b.n	40bdda <__aeabi_ddiv+0x82>
  40be6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40be70:	bf04      	itt	eq
  40be72:	4301      	orreq	r1, r0
  40be74:	2000      	moveq	r0, #0
  40be76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40be7a:	bf88      	it	hi
  40be7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40be80:	f63f aeaf 	bhi.w	40bbe2 <__aeabi_dmul+0xde>
  40be84:	ebb5 0c03 	subs.w	ip, r5, r3
  40be88:	bf04      	itt	eq
  40be8a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40be8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40be92:	f150 0000 	adcs.w	r0, r0, #0
  40be96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40be9a:	bd70      	pop	{r4, r5, r6, pc}
  40be9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40bea0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40bea4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40bea8:	bfc2      	ittt	gt
  40beaa:	ebd4 050c 	rsbsgt	r5, r4, ip
  40beae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40beb2:	bd70      	popgt	{r4, r5, r6, pc}
  40beb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40beb8:	f04f 0e00 	mov.w	lr, #0
  40bebc:	3c01      	subs	r4, #1
  40bebe:	e690      	b.n	40bbe2 <__aeabi_dmul+0xde>
  40bec0:	ea45 0e06 	orr.w	lr, r5, r6
  40bec4:	e68d      	b.n	40bbe2 <__aeabi_dmul+0xde>
  40bec6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40beca:	ea94 0f0c 	teq	r4, ip
  40bece:	bf08      	it	eq
  40bed0:	ea95 0f0c 	teqeq	r5, ip
  40bed4:	f43f af3b 	beq.w	40bd4e <__aeabi_dmul+0x24a>
  40bed8:	ea94 0f0c 	teq	r4, ip
  40bedc:	d10a      	bne.n	40bef4 <__aeabi_ddiv+0x19c>
  40bede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bee2:	f47f af34 	bne.w	40bd4e <__aeabi_dmul+0x24a>
  40bee6:	ea95 0f0c 	teq	r5, ip
  40beea:	f47f af25 	bne.w	40bd38 <__aeabi_dmul+0x234>
  40beee:	4610      	mov	r0, r2
  40bef0:	4619      	mov	r1, r3
  40bef2:	e72c      	b.n	40bd4e <__aeabi_dmul+0x24a>
  40bef4:	ea95 0f0c 	teq	r5, ip
  40bef8:	d106      	bne.n	40bf08 <__aeabi_ddiv+0x1b0>
  40befa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40befe:	f43f aefd 	beq.w	40bcfc <__aeabi_dmul+0x1f8>
  40bf02:	4610      	mov	r0, r2
  40bf04:	4619      	mov	r1, r3
  40bf06:	e722      	b.n	40bd4e <__aeabi_dmul+0x24a>
  40bf08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bf0c:	bf18      	it	ne
  40bf0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bf12:	f47f aec5 	bne.w	40bca0 <__aeabi_dmul+0x19c>
  40bf16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40bf1a:	f47f af0d 	bne.w	40bd38 <__aeabi_dmul+0x234>
  40bf1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40bf22:	f47f aeeb 	bne.w	40bcfc <__aeabi_dmul+0x1f8>
  40bf26:	e712      	b.n	40bd4e <__aeabi_dmul+0x24a>

0040bf28 <__gedf2>:
  40bf28:	f04f 3cff 	mov.w	ip, #4294967295
  40bf2c:	e006      	b.n	40bf3c <__cmpdf2+0x4>
  40bf2e:	bf00      	nop

0040bf30 <__ledf2>:
  40bf30:	f04f 0c01 	mov.w	ip, #1
  40bf34:	e002      	b.n	40bf3c <__cmpdf2+0x4>
  40bf36:	bf00      	nop

0040bf38 <__cmpdf2>:
  40bf38:	f04f 0c01 	mov.w	ip, #1
  40bf3c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40bf40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bf44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bf48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bf4c:	bf18      	it	ne
  40bf4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40bf52:	d01b      	beq.n	40bf8c <__cmpdf2+0x54>
  40bf54:	b001      	add	sp, #4
  40bf56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40bf5a:	bf0c      	ite	eq
  40bf5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40bf60:	ea91 0f03 	teqne	r1, r3
  40bf64:	bf02      	ittt	eq
  40bf66:	ea90 0f02 	teqeq	r0, r2
  40bf6a:	2000      	moveq	r0, #0
  40bf6c:	4770      	bxeq	lr
  40bf6e:	f110 0f00 	cmn.w	r0, #0
  40bf72:	ea91 0f03 	teq	r1, r3
  40bf76:	bf58      	it	pl
  40bf78:	4299      	cmppl	r1, r3
  40bf7a:	bf08      	it	eq
  40bf7c:	4290      	cmpeq	r0, r2
  40bf7e:	bf2c      	ite	cs
  40bf80:	17d8      	asrcs	r0, r3, #31
  40bf82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40bf86:	f040 0001 	orr.w	r0, r0, #1
  40bf8a:	4770      	bx	lr
  40bf8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bf90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bf94:	d102      	bne.n	40bf9c <__cmpdf2+0x64>
  40bf96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40bf9a:	d107      	bne.n	40bfac <__cmpdf2+0x74>
  40bf9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bfa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bfa4:	d1d6      	bne.n	40bf54 <__cmpdf2+0x1c>
  40bfa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40bfaa:	d0d3      	beq.n	40bf54 <__cmpdf2+0x1c>
  40bfac:	f85d 0b04 	ldr.w	r0, [sp], #4
  40bfb0:	4770      	bx	lr
  40bfb2:	bf00      	nop

0040bfb4 <__aeabi_cdrcmple>:
  40bfb4:	4684      	mov	ip, r0
  40bfb6:	4610      	mov	r0, r2
  40bfb8:	4662      	mov	r2, ip
  40bfba:	468c      	mov	ip, r1
  40bfbc:	4619      	mov	r1, r3
  40bfbe:	4663      	mov	r3, ip
  40bfc0:	e000      	b.n	40bfc4 <__aeabi_cdcmpeq>
  40bfc2:	bf00      	nop

0040bfc4 <__aeabi_cdcmpeq>:
  40bfc4:	b501      	push	{r0, lr}
  40bfc6:	f7ff ffb7 	bl	40bf38 <__cmpdf2>
  40bfca:	2800      	cmp	r0, #0
  40bfcc:	bf48      	it	mi
  40bfce:	f110 0f00 	cmnmi.w	r0, #0
  40bfd2:	bd01      	pop	{r0, pc}

0040bfd4 <__aeabi_dcmpeq>:
  40bfd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bfd8:	f7ff fff4 	bl	40bfc4 <__aeabi_cdcmpeq>
  40bfdc:	bf0c      	ite	eq
  40bfde:	2001      	moveq	r0, #1
  40bfe0:	2000      	movne	r0, #0
  40bfe2:	f85d fb08 	ldr.w	pc, [sp], #8
  40bfe6:	bf00      	nop

0040bfe8 <__aeabi_dcmplt>:
  40bfe8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40bfec:	f7ff ffea 	bl	40bfc4 <__aeabi_cdcmpeq>
  40bff0:	bf34      	ite	cc
  40bff2:	2001      	movcc	r0, #1
  40bff4:	2000      	movcs	r0, #0
  40bff6:	f85d fb08 	ldr.w	pc, [sp], #8
  40bffa:	bf00      	nop

0040bffc <__aeabi_dcmple>:
  40bffc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c000:	f7ff ffe0 	bl	40bfc4 <__aeabi_cdcmpeq>
  40c004:	bf94      	ite	ls
  40c006:	2001      	movls	r0, #1
  40c008:	2000      	movhi	r0, #0
  40c00a:	f85d fb08 	ldr.w	pc, [sp], #8
  40c00e:	bf00      	nop

0040c010 <__aeabi_dcmpge>:
  40c010:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c014:	f7ff ffce 	bl	40bfb4 <__aeabi_cdrcmple>
  40c018:	bf94      	ite	ls
  40c01a:	2001      	movls	r0, #1
  40c01c:	2000      	movhi	r0, #0
  40c01e:	f85d fb08 	ldr.w	pc, [sp], #8
  40c022:	bf00      	nop

0040c024 <__aeabi_dcmpgt>:
  40c024:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c028:	f7ff ffc4 	bl	40bfb4 <__aeabi_cdrcmple>
  40c02c:	bf34      	ite	cc
  40c02e:	2001      	movcc	r0, #1
  40c030:	2000      	movcs	r0, #0
  40c032:	f85d fb08 	ldr.w	pc, [sp], #8
  40c036:	bf00      	nop

0040c038 <__aeabi_d2iz>:
  40c038:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c03c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c040:	d215      	bcs.n	40c06e <__aeabi_d2iz+0x36>
  40c042:	d511      	bpl.n	40c068 <__aeabi_d2iz+0x30>
  40c044:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c048:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c04c:	d912      	bls.n	40c074 <__aeabi_d2iz+0x3c>
  40c04e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c056:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c05a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c05e:	fa23 f002 	lsr.w	r0, r3, r2
  40c062:	bf18      	it	ne
  40c064:	4240      	negne	r0, r0
  40c066:	4770      	bx	lr
  40c068:	f04f 0000 	mov.w	r0, #0
  40c06c:	4770      	bx	lr
  40c06e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c072:	d105      	bne.n	40c080 <__aeabi_d2iz+0x48>
  40c074:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c078:	bf08      	it	eq
  40c07a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c07e:	4770      	bx	lr
  40c080:	f04f 0000 	mov.w	r0, #0
  40c084:	4770      	bx	lr
  40c086:	bf00      	nop

0040c088 <__aeabi_uldivmod>:
  40c088:	b953      	cbnz	r3, 40c0a0 <__aeabi_uldivmod+0x18>
  40c08a:	b94a      	cbnz	r2, 40c0a0 <__aeabi_uldivmod+0x18>
  40c08c:	2900      	cmp	r1, #0
  40c08e:	bf08      	it	eq
  40c090:	2800      	cmpeq	r0, #0
  40c092:	bf1c      	itt	ne
  40c094:	f04f 31ff 	movne.w	r1, #4294967295
  40c098:	f04f 30ff 	movne.w	r0, #4294967295
  40c09c:	f000 b83c 	b.w	40c118 <__aeabi_idiv0>
  40c0a0:	b082      	sub	sp, #8
  40c0a2:	46ec      	mov	ip, sp
  40c0a4:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c0a8:	f000 f81e 	bl	40c0e8 <__gnu_uldivmod_helper>
  40c0ac:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c0b0:	b002      	add	sp, #8
  40c0b2:	bc0c      	pop	{r2, r3}
  40c0b4:	4770      	bx	lr
  40c0b6:	bf00      	nop

0040c0b8 <__gnu_ldivmod_helper>:
  40c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c0bc:	4690      	mov	r8, r2
  40c0be:	4606      	mov	r6, r0
  40c0c0:	460f      	mov	r7, r1
  40c0c2:	461d      	mov	r5, r3
  40c0c4:	9c06      	ldr	r4, [sp, #24]
  40c0c6:	f000 f829 	bl	40c11c <__divdi3>
  40c0ca:	fb08 fc01 	mul.w	ip, r8, r1
  40c0ce:	4686      	mov	lr, r0
  40c0d0:	fba8 2300 	umull	r2, r3, r8, r0
  40c0d4:	fb00 c505 	mla	r5, r0, r5, ip
  40c0d8:	1ab2      	subs	r2, r6, r2
  40c0da:	442b      	add	r3, r5
  40c0dc:	eb67 0303 	sbc.w	r3, r7, r3
  40c0e0:	e9c4 2300 	strd	r2, r3, [r4]
  40c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040c0e8 <__gnu_uldivmod_helper>:
  40c0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c0ec:	461d      	mov	r5, r3
  40c0ee:	4617      	mov	r7, r2
  40c0f0:	4680      	mov	r8, r0
  40c0f2:	4689      	mov	r9, r1
  40c0f4:	9e08      	ldr	r6, [sp, #32]
  40c0f6:	f000 f953 	bl	40c3a0 <__udivdi3>
  40c0fa:	fb00 f305 	mul.w	r3, r0, r5
  40c0fe:	fba0 4507 	umull	r4, r5, r0, r7
  40c102:	fb07 3701 	mla	r7, r7, r1, r3
  40c106:	ebb8 0404 	subs.w	r4, r8, r4
  40c10a:	443d      	add	r5, r7
  40c10c:	eb69 0505 	sbc.w	r5, r9, r5
  40c110:	e9c6 4500 	strd	r4, r5, [r6]
  40c114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c118 <__aeabi_idiv0>:
  40c118:	4770      	bx	lr
  40c11a:	bf00      	nop

0040c11c <__divdi3>:
  40c11c:	2900      	cmp	r1, #0
  40c11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c122:	f2c0 80a2 	blt.w	40c26a <__divdi3+0x14e>
  40c126:	2600      	movs	r6, #0
  40c128:	2b00      	cmp	r3, #0
  40c12a:	f2c0 8098 	blt.w	40c25e <__divdi3+0x142>
  40c12e:	468c      	mov	ip, r1
  40c130:	4690      	mov	r8, r2
  40c132:	469e      	mov	lr, r3
  40c134:	4615      	mov	r5, r2
  40c136:	4604      	mov	r4, r0
  40c138:	460f      	mov	r7, r1
  40c13a:	bbcb      	cbnz	r3, 40c1b0 <__divdi3+0x94>
  40c13c:	428a      	cmp	r2, r1
  40c13e:	d956      	bls.n	40c1ee <__divdi3+0xd2>
  40c140:	fab2 f382 	clz	r3, r2
  40c144:	b13b      	cbz	r3, 40c156 <__divdi3+0x3a>
  40c146:	f1c3 0220 	rsb	r2, r3, #32
  40c14a:	409f      	lsls	r7, r3
  40c14c:	409d      	lsls	r5, r3
  40c14e:	409c      	lsls	r4, r3
  40c150:	fa20 f202 	lsr.w	r2, r0, r2
  40c154:	4317      	orrs	r7, r2
  40c156:	0c28      	lsrs	r0, r5, #16
  40c158:	0c22      	lsrs	r2, r4, #16
  40c15a:	fa1f fe85 	uxth.w	lr, r5
  40c15e:	fbb7 f1f0 	udiv	r1, r7, r0
  40c162:	fb00 7711 	mls	r7, r0, r1, r7
  40c166:	fb0e f301 	mul.w	r3, lr, r1
  40c16a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40c16e:	42bb      	cmp	r3, r7
  40c170:	d907      	bls.n	40c182 <__divdi3+0x66>
  40c172:	197f      	adds	r7, r7, r5
  40c174:	f080 8101 	bcs.w	40c37a <__divdi3+0x25e>
  40c178:	42bb      	cmp	r3, r7
  40c17a:	f240 80fe 	bls.w	40c37a <__divdi3+0x25e>
  40c17e:	3902      	subs	r1, #2
  40c180:	442f      	add	r7, r5
  40c182:	1aff      	subs	r7, r7, r3
  40c184:	b2a4      	uxth	r4, r4
  40c186:	fbb7 f3f0 	udiv	r3, r7, r0
  40c18a:	fb00 7713 	mls	r7, r0, r3, r7
  40c18e:	fb0e fe03 	mul.w	lr, lr, r3
  40c192:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c196:	45be      	cmp	lr, r7
  40c198:	d906      	bls.n	40c1a8 <__divdi3+0x8c>
  40c19a:	197f      	adds	r7, r7, r5
  40c19c:	f080 80eb 	bcs.w	40c376 <__divdi3+0x25a>
  40c1a0:	45be      	cmp	lr, r7
  40c1a2:	f240 80e8 	bls.w	40c376 <__divdi3+0x25a>
  40c1a6:	3b02      	subs	r3, #2
  40c1a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40c1ac:	2200      	movs	r2, #0
  40c1ae:	e003      	b.n	40c1b8 <__divdi3+0x9c>
  40c1b0:	428b      	cmp	r3, r1
  40c1b2:	d90f      	bls.n	40c1d4 <__divdi3+0xb8>
  40c1b4:	2200      	movs	r2, #0
  40c1b6:	4613      	mov	r3, r2
  40c1b8:	1c34      	adds	r4, r6, #0
  40c1ba:	f04f 0500 	mov.w	r5, #0
  40c1be:	bf18      	it	ne
  40c1c0:	2401      	movne	r4, #1
  40c1c2:	4260      	negs	r0, r4
  40c1c4:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40c1c8:	4058      	eors	r0, r3
  40c1ca:	4051      	eors	r1, r2
  40c1cc:	1900      	adds	r0, r0, r4
  40c1ce:	4169      	adcs	r1, r5
  40c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c1d4:	fab3 f283 	clz	r2, r3
  40c1d8:	2a00      	cmp	r2, #0
  40c1da:	f040 8083 	bne.w	40c2e4 <__divdi3+0x1c8>
  40c1de:	4580      	cmp	r8, r0
  40c1e0:	f240 80cd 	bls.w	40c37e <__divdi3+0x262>
  40c1e4:	428b      	cmp	r3, r1
  40c1e6:	f0c0 80ca 	bcc.w	40c37e <__divdi3+0x262>
  40c1ea:	4613      	mov	r3, r2
  40c1ec:	e7e4      	b.n	40c1b8 <__divdi3+0x9c>
  40c1ee:	b912      	cbnz	r2, 40c1f6 <__divdi3+0xda>
  40c1f0:	2301      	movs	r3, #1
  40c1f2:	fbb3 f5f2 	udiv	r5, r3, r2
  40c1f6:	fab5 f285 	clz	r2, r5
  40c1fa:	2a00      	cmp	r2, #0
  40c1fc:	d13b      	bne.n	40c276 <__divdi3+0x15a>
  40c1fe:	1b78      	subs	r0, r7, r5
  40c200:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c204:	fa1f fc85 	uxth.w	ip, r5
  40c208:	2201      	movs	r2, #1
  40c20a:	0c21      	lsrs	r1, r4, #16
  40c20c:	fbb0 f8fe 	udiv	r8, r0, lr
  40c210:	fb0e 0018 	mls	r0, lr, r8, r0
  40c214:	fb0c f308 	mul.w	r3, ip, r8
  40c218:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40c21c:	42bb      	cmp	r3, r7
  40c21e:	d908      	bls.n	40c232 <__divdi3+0x116>
  40c220:	197f      	adds	r7, r7, r5
  40c222:	f080 80b0 	bcs.w	40c386 <__divdi3+0x26a>
  40c226:	42bb      	cmp	r3, r7
  40c228:	f240 80ad 	bls.w	40c386 <__divdi3+0x26a>
  40c22c:	f1a8 0802 	sub.w	r8, r8, #2
  40c230:	442f      	add	r7, r5
  40c232:	1aff      	subs	r7, r7, r3
  40c234:	b2a4      	uxth	r4, r4
  40c236:	fbb7 f3fe 	udiv	r3, r7, lr
  40c23a:	fb0e 7713 	mls	r7, lr, r3, r7
  40c23e:	fb0c fc03 	mul.w	ip, ip, r3
  40c242:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40c246:	45bc      	cmp	ip, r7
  40c248:	d906      	bls.n	40c258 <__divdi3+0x13c>
  40c24a:	197f      	adds	r7, r7, r5
  40c24c:	f080 8099 	bcs.w	40c382 <__divdi3+0x266>
  40c250:	45bc      	cmp	ip, r7
  40c252:	f240 8096 	bls.w	40c382 <__divdi3+0x266>
  40c256:	3b02      	subs	r3, #2
  40c258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40c25c:	e7ac      	b.n	40c1b8 <__divdi3+0x9c>
  40c25e:	4252      	negs	r2, r2
  40c260:	ea6f 0606 	mvn.w	r6, r6
  40c264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c268:	e761      	b.n	40c12e <__divdi3+0x12>
  40c26a:	4240      	negs	r0, r0
  40c26c:	f04f 36ff 	mov.w	r6, #4294967295
  40c270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c274:	e758      	b.n	40c128 <__divdi3+0xc>
  40c276:	4095      	lsls	r5, r2
  40c278:	f1c2 0120 	rsb	r1, r2, #32
  40c27c:	fa07 f302 	lsl.w	r3, r7, r2
  40c280:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c284:	40cf      	lsrs	r7, r1
  40c286:	fa24 f101 	lsr.w	r1, r4, r1
  40c28a:	4094      	lsls	r4, r2
  40c28c:	fa1f fc85 	uxth.w	ip, r5
  40c290:	4319      	orrs	r1, r3
  40c292:	fbb7 f2fe 	udiv	r2, r7, lr
  40c296:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40c29a:	fb0e 7712 	mls	r7, lr, r2, r7
  40c29e:	fb0c f302 	mul.w	r3, ip, r2
  40c2a2:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40c2a6:	42bb      	cmp	r3, r7
  40c2a8:	d905      	bls.n	40c2b6 <__divdi3+0x19a>
  40c2aa:	197f      	adds	r7, r7, r5
  40c2ac:	d271      	bcs.n	40c392 <__divdi3+0x276>
  40c2ae:	42bb      	cmp	r3, r7
  40c2b0:	d96f      	bls.n	40c392 <__divdi3+0x276>
  40c2b2:	3a02      	subs	r2, #2
  40c2b4:	442f      	add	r7, r5
  40c2b6:	1aff      	subs	r7, r7, r3
  40c2b8:	b289      	uxth	r1, r1
  40c2ba:	fbb7 f8fe 	udiv	r8, r7, lr
  40c2be:	fb0e 7718 	mls	r7, lr, r8, r7
  40c2c2:	fb0c f008 	mul.w	r0, ip, r8
  40c2c6:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40c2ca:	4298      	cmp	r0, r3
  40c2cc:	d906      	bls.n	40c2dc <__divdi3+0x1c0>
  40c2ce:	195b      	adds	r3, r3, r5
  40c2d0:	d261      	bcs.n	40c396 <__divdi3+0x27a>
  40c2d2:	4298      	cmp	r0, r3
  40c2d4:	d95f      	bls.n	40c396 <__divdi3+0x27a>
  40c2d6:	f1a8 0802 	sub.w	r8, r8, #2
  40c2da:	442b      	add	r3, r5
  40c2dc:	1a18      	subs	r0, r3, r0
  40c2de:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40c2e2:	e792      	b.n	40c20a <__divdi3+0xee>
  40c2e4:	f1c2 0720 	rsb	r7, r2, #32
  40c2e8:	fa03 fe02 	lsl.w	lr, r3, r2
  40c2ec:	fa08 f502 	lsl.w	r5, r8, r2
  40c2f0:	4091      	lsls	r1, r2
  40c2f2:	fa28 f307 	lsr.w	r3, r8, r7
  40c2f6:	fa2c fc07 	lsr.w	ip, ip, r7
  40c2fa:	40f8      	lsrs	r0, r7
  40c2fc:	ea43 0e0e 	orr.w	lr, r3, lr
  40c300:	4308      	orrs	r0, r1
  40c302:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40c306:	0c07      	lsrs	r7, r0, #16
  40c308:	fa1f fa8e 	uxth.w	sl, lr
  40c30c:	fbbc f9f8 	udiv	r9, ip, r8
  40c310:	fb08 cc19 	mls	ip, r8, r9, ip
  40c314:	fb0a f109 	mul.w	r1, sl, r9
  40c318:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40c31c:	4561      	cmp	r1, ip
  40c31e:	d907      	bls.n	40c330 <__divdi3+0x214>
  40c320:	eb1c 0c0e 	adds.w	ip, ip, lr
  40c324:	d232      	bcs.n	40c38c <__divdi3+0x270>
  40c326:	4561      	cmp	r1, ip
  40c328:	d930      	bls.n	40c38c <__divdi3+0x270>
  40c32a:	f1a9 0902 	sub.w	r9, r9, #2
  40c32e:	44f4      	add	ip, lr
  40c330:	ebc1 0c0c 	rsb	ip, r1, ip
  40c334:	b280      	uxth	r0, r0
  40c336:	fbbc f3f8 	udiv	r3, ip, r8
  40c33a:	fb08 cc13 	mls	ip, r8, r3, ip
  40c33e:	fb0a fa03 	mul.w	sl, sl, r3
  40c342:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40c346:	458a      	cmp	sl, r1
  40c348:	d906      	bls.n	40c358 <__divdi3+0x23c>
  40c34a:	eb11 010e 	adds.w	r1, r1, lr
  40c34e:	d225      	bcs.n	40c39c <__divdi3+0x280>
  40c350:	458a      	cmp	sl, r1
  40c352:	d923      	bls.n	40c39c <__divdi3+0x280>
  40c354:	3b02      	subs	r3, #2
  40c356:	4471      	add	r1, lr
  40c358:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40c35c:	ebca 0101 	rsb	r1, sl, r1
  40c360:	fba3 8905 	umull	r8, r9, r3, r5
  40c364:	4549      	cmp	r1, r9
  40c366:	d303      	bcc.n	40c370 <__divdi3+0x254>
  40c368:	d103      	bne.n	40c372 <__divdi3+0x256>
  40c36a:	4094      	lsls	r4, r2
  40c36c:	4544      	cmp	r4, r8
  40c36e:	d200      	bcs.n	40c372 <__divdi3+0x256>
  40c370:	3b01      	subs	r3, #1
  40c372:	2200      	movs	r2, #0
  40c374:	e720      	b.n	40c1b8 <__divdi3+0x9c>
  40c376:	3b01      	subs	r3, #1
  40c378:	e716      	b.n	40c1a8 <__divdi3+0x8c>
  40c37a:	3901      	subs	r1, #1
  40c37c:	e701      	b.n	40c182 <__divdi3+0x66>
  40c37e:	2301      	movs	r3, #1
  40c380:	e71a      	b.n	40c1b8 <__divdi3+0x9c>
  40c382:	3b01      	subs	r3, #1
  40c384:	e768      	b.n	40c258 <__divdi3+0x13c>
  40c386:	f108 38ff 	add.w	r8, r8, #4294967295
  40c38a:	e752      	b.n	40c232 <__divdi3+0x116>
  40c38c:	f109 39ff 	add.w	r9, r9, #4294967295
  40c390:	e7ce      	b.n	40c330 <__divdi3+0x214>
  40c392:	3a01      	subs	r2, #1
  40c394:	e78f      	b.n	40c2b6 <__divdi3+0x19a>
  40c396:	f108 38ff 	add.w	r8, r8, #4294967295
  40c39a:	e79f      	b.n	40c2dc <__divdi3+0x1c0>
  40c39c:	3b01      	subs	r3, #1
  40c39e:	e7db      	b.n	40c358 <__divdi3+0x23c>

0040c3a0 <__udivdi3>:
  40c3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40c3a4:	2b00      	cmp	r3, #0
  40c3a6:	d140      	bne.n	40c42a <__udivdi3+0x8a>
  40c3a8:	428a      	cmp	r2, r1
  40c3aa:	4604      	mov	r4, r0
  40c3ac:	4615      	mov	r5, r2
  40c3ae:	d94a      	bls.n	40c446 <__udivdi3+0xa6>
  40c3b0:	fab2 f382 	clz	r3, r2
  40c3b4:	460f      	mov	r7, r1
  40c3b6:	b14b      	cbz	r3, 40c3cc <__udivdi3+0x2c>
  40c3b8:	f1c3 0620 	rsb	r6, r3, #32
  40c3bc:	4099      	lsls	r1, r3
  40c3be:	fa00 f403 	lsl.w	r4, r0, r3
  40c3c2:	fa02 f503 	lsl.w	r5, r2, r3
  40c3c6:	40f0      	lsrs	r0, r6
  40c3c8:	ea40 0701 	orr.w	r7, r0, r1
  40c3cc:	0c29      	lsrs	r1, r5, #16
  40c3ce:	0c26      	lsrs	r6, r4, #16
  40c3d0:	fa1f fe85 	uxth.w	lr, r5
  40c3d4:	fbb7 f0f1 	udiv	r0, r7, r1
  40c3d8:	fb01 7710 	mls	r7, r1, r0, r7
  40c3dc:	fb0e f200 	mul.w	r2, lr, r0
  40c3e0:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40c3e4:	429a      	cmp	r2, r3
  40c3e6:	d907      	bls.n	40c3f8 <__udivdi3+0x58>
  40c3e8:	195b      	adds	r3, r3, r5
  40c3ea:	f080 80ea 	bcs.w	40c5c2 <__udivdi3+0x222>
  40c3ee:	429a      	cmp	r2, r3
  40c3f0:	f240 80e7 	bls.w	40c5c2 <__udivdi3+0x222>
  40c3f4:	3802      	subs	r0, #2
  40c3f6:	442b      	add	r3, r5
  40c3f8:	1a9a      	subs	r2, r3, r2
  40c3fa:	b2a4      	uxth	r4, r4
  40c3fc:	fbb2 f3f1 	udiv	r3, r2, r1
  40c400:	fb01 2213 	mls	r2, r1, r3, r2
  40c404:	fb0e fe03 	mul.w	lr, lr, r3
  40c408:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40c40c:	4596      	cmp	lr, r2
  40c40e:	d906      	bls.n	40c41e <__udivdi3+0x7e>
  40c410:	1952      	adds	r2, r2, r5
  40c412:	f080 80da 	bcs.w	40c5ca <__udivdi3+0x22a>
  40c416:	4596      	cmp	lr, r2
  40c418:	f240 80d7 	bls.w	40c5ca <__udivdi3+0x22a>
  40c41c:	3b02      	subs	r3, #2
  40c41e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40c422:	2600      	movs	r6, #0
  40c424:	4631      	mov	r1, r6
  40c426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c42a:	428b      	cmp	r3, r1
  40c42c:	d844      	bhi.n	40c4b8 <__udivdi3+0x118>
  40c42e:	fab3 f683 	clz	r6, r3
  40c432:	2e00      	cmp	r6, #0
  40c434:	d145      	bne.n	40c4c2 <__udivdi3+0x122>
  40c436:	4282      	cmp	r2, r0
  40c438:	f240 80bf 	bls.w	40c5ba <__udivdi3+0x21a>
  40c43c:	428b      	cmp	r3, r1
  40c43e:	f0c0 80bc 	bcc.w	40c5ba <__udivdi3+0x21a>
  40c442:	4630      	mov	r0, r6
  40c444:	e7ee      	b.n	40c424 <__udivdi3+0x84>
  40c446:	b912      	cbnz	r2, 40c44e <__udivdi3+0xae>
  40c448:	2501      	movs	r5, #1
  40c44a:	fbb5 f5f2 	udiv	r5, r5, r2
  40c44e:	fab5 f285 	clz	r2, r5
  40c452:	2a00      	cmp	r2, #0
  40c454:	d17b      	bne.n	40c54e <__udivdi3+0x1ae>
  40c456:	1b4a      	subs	r2, r1, r5
  40c458:	0c2f      	lsrs	r7, r5, #16
  40c45a:	fa1f fe85 	uxth.w	lr, r5
  40c45e:	2601      	movs	r6, #1
  40c460:	0c23      	lsrs	r3, r4, #16
  40c462:	fbb2 f0f7 	udiv	r0, r2, r7
  40c466:	fb07 2210 	mls	r2, r7, r0, r2
  40c46a:	fb0e fc00 	mul.w	ip, lr, r0
  40c46e:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40c472:	458c      	cmp	ip, r1
  40c474:	d907      	bls.n	40c486 <__udivdi3+0xe6>
  40c476:	1949      	adds	r1, r1, r5
  40c478:	f080 80a1 	bcs.w	40c5be <__udivdi3+0x21e>
  40c47c:	458c      	cmp	ip, r1
  40c47e:	f240 809e 	bls.w	40c5be <__udivdi3+0x21e>
  40c482:	3802      	subs	r0, #2
  40c484:	4429      	add	r1, r5
  40c486:	ebcc 0101 	rsb	r1, ip, r1
  40c48a:	b2a4      	uxth	r4, r4
  40c48c:	fbb1 f3f7 	udiv	r3, r1, r7
  40c490:	fb07 1113 	mls	r1, r7, r3, r1
  40c494:	fb0e fe03 	mul.w	lr, lr, r3
  40c498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40c49c:	45a6      	cmp	lr, r4
  40c49e:	d906      	bls.n	40c4ae <__udivdi3+0x10e>
  40c4a0:	1964      	adds	r4, r4, r5
  40c4a2:	f080 8090 	bcs.w	40c5c6 <__udivdi3+0x226>
  40c4a6:	45a6      	cmp	lr, r4
  40c4a8:	f240 808d 	bls.w	40c5c6 <__udivdi3+0x226>
  40c4ac:	3b02      	subs	r3, #2
  40c4ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40c4b2:	4631      	mov	r1, r6
  40c4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c4b8:	2600      	movs	r6, #0
  40c4ba:	4630      	mov	r0, r6
  40c4bc:	4631      	mov	r1, r6
  40c4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c4c2:	f1c6 0520 	rsb	r5, r6, #32
  40c4c6:	40b3      	lsls	r3, r6
  40c4c8:	fa02 f706 	lsl.w	r7, r2, r6
  40c4cc:	fa01 f406 	lsl.w	r4, r1, r6
  40c4d0:	40ea      	lsrs	r2, r5
  40c4d2:	40e9      	lsrs	r1, r5
  40c4d4:	fa20 f505 	lsr.w	r5, r0, r5
  40c4d8:	431a      	orrs	r2, r3
  40c4da:	4325      	orrs	r5, r4
  40c4dc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40c4e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40c4e4:	b293      	uxth	r3, r2
  40c4e6:	fbb1 f8fc 	udiv	r8, r1, ip
  40c4ea:	fb0c 1118 	mls	r1, ip, r8, r1
  40c4ee:	fb03 f408 	mul.w	r4, r3, r8
  40c4f2:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40c4f6:	428c      	cmp	r4, r1
  40c4f8:	d906      	bls.n	40c508 <__udivdi3+0x168>
  40c4fa:	1889      	adds	r1, r1, r2
  40c4fc:	d269      	bcs.n	40c5d2 <__udivdi3+0x232>
  40c4fe:	428c      	cmp	r4, r1
  40c500:	d967      	bls.n	40c5d2 <__udivdi3+0x232>
  40c502:	f1a8 0802 	sub.w	r8, r8, #2
  40c506:	4411      	add	r1, r2
  40c508:	1b09      	subs	r1, r1, r4
  40c50a:	b2ad      	uxth	r5, r5
  40c50c:	fbb1 f4fc 	udiv	r4, r1, ip
  40c510:	fb0c 1114 	mls	r1, ip, r4, r1
  40c514:	fb03 fe04 	mul.w	lr, r3, r4
  40c518:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40c51c:	459e      	cmp	lr, r3
  40c51e:	d905      	bls.n	40c52c <__udivdi3+0x18c>
  40c520:	189b      	adds	r3, r3, r2
  40c522:	d254      	bcs.n	40c5ce <__udivdi3+0x22e>
  40c524:	459e      	cmp	lr, r3
  40c526:	d952      	bls.n	40c5ce <__udivdi3+0x22e>
  40c528:	3c02      	subs	r4, #2
  40c52a:	4413      	add	r3, r2
  40c52c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40c530:	ebce 0303 	rsb	r3, lr, r3
  40c534:	fba4 8907 	umull	r8, r9, r4, r7
  40c538:	454b      	cmp	r3, r9
  40c53a:	d303      	bcc.n	40c544 <__udivdi3+0x1a4>
  40c53c:	d151      	bne.n	40c5e2 <__udivdi3+0x242>
  40c53e:	40b0      	lsls	r0, r6
  40c540:	4540      	cmp	r0, r8
  40c542:	d24e      	bcs.n	40c5e2 <__udivdi3+0x242>
  40c544:	2600      	movs	r6, #0
  40c546:	1e60      	subs	r0, r4, #1
  40c548:	4631      	mov	r1, r6
  40c54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40c54e:	f1c2 0620 	rsb	r6, r2, #32
  40c552:	4095      	lsls	r5, r2
  40c554:	fa01 f302 	lsl.w	r3, r1, r2
  40c558:	fa00 f402 	lsl.w	r4, r0, r2
  40c55c:	0c2f      	lsrs	r7, r5, #16
  40c55e:	40f1      	lsrs	r1, r6
  40c560:	40f0      	lsrs	r0, r6
  40c562:	fa1f fe85 	uxth.w	lr, r5
  40c566:	fbb1 f6f7 	udiv	r6, r1, r7
  40c56a:	4318      	orrs	r0, r3
  40c56c:	fb07 1116 	mls	r1, r7, r6, r1
  40c570:	fb0e f206 	mul.w	r2, lr, r6
  40c574:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40c578:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40c57c:	429a      	cmp	r2, r3
  40c57e:	d905      	bls.n	40c58c <__udivdi3+0x1ec>
  40c580:	195b      	adds	r3, r3, r5
  40c582:	d229      	bcs.n	40c5d8 <__udivdi3+0x238>
  40c584:	429a      	cmp	r2, r3
  40c586:	d927      	bls.n	40c5d8 <__udivdi3+0x238>
  40c588:	3e02      	subs	r6, #2
  40c58a:	442b      	add	r3, r5
  40c58c:	1a9b      	subs	r3, r3, r2
  40c58e:	b280      	uxth	r0, r0
  40c590:	fbb3 fcf7 	udiv	ip, r3, r7
  40c594:	fb07 331c 	mls	r3, r7, ip, r3
  40c598:	fb0e f10c 	mul.w	r1, lr, ip
  40c59c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40c5a0:	4299      	cmp	r1, r3
  40c5a2:	d906      	bls.n	40c5b2 <__udivdi3+0x212>
  40c5a4:	195b      	adds	r3, r3, r5
  40c5a6:	d219      	bcs.n	40c5dc <__udivdi3+0x23c>
  40c5a8:	4299      	cmp	r1, r3
  40c5aa:	d917      	bls.n	40c5dc <__udivdi3+0x23c>
  40c5ac:	f1ac 0c02 	sub.w	ip, ip, #2
  40c5b0:	442b      	add	r3, r5
  40c5b2:	1a5a      	subs	r2, r3, r1
  40c5b4:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40c5b8:	e752      	b.n	40c460 <__udivdi3+0xc0>
  40c5ba:	2001      	movs	r0, #1
  40c5bc:	e732      	b.n	40c424 <__udivdi3+0x84>
  40c5be:	3801      	subs	r0, #1
  40c5c0:	e761      	b.n	40c486 <__udivdi3+0xe6>
  40c5c2:	3801      	subs	r0, #1
  40c5c4:	e718      	b.n	40c3f8 <__udivdi3+0x58>
  40c5c6:	3b01      	subs	r3, #1
  40c5c8:	e771      	b.n	40c4ae <__udivdi3+0x10e>
  40c5ca:	3b01      	subs	r3, #1
  40c5cc:	e727      	b.n	40c41e <__udivdi3+0x7e>
  40c5ce:	3c01      	subs	r4, #1
  40c5d0:	e7ac      	b.n	40c52c <__udivdi3+0x18c>
  40c5d2:	f108 38ff 	add.w	r8, r8, #4294967295
  40c5d6:	e797      	b.n	40c508 <__udivdi3+0x168>
  40c5d8:	3e01      	subs	r6, #1
  40c5da:	e7d7      	b.n	40c58c <__udivdi3+0x1ec>
  40c5dc:	f10c 3cff 	add.w	ip, ip, #4294967295
  40c5e0:	e7e7      	b.n	40c5b2 <__udivdi3+0x212>
  40c5e2:	4620      	mov	r0, r4
  40c5e4:	2600      	movs	r6, #0
  40c5e6:	e71d      	b.n	40c424 <__udivdi3+0x84>
  40c5e8:	00000001 	.word	0x00000001
  40c5ec:	00000002 	.word	0x00000002
  40c5f0:	00000004 	.word	0x00000004
  40c5f4:	00000008 	.word	0x00000008
  40c5f8:	00000010 	.word	0x00000010
  40c5fc:	00000020 	.word	0x00000020
  40c600:	00000040 	.word	0x00000040
  40c604:	00000080 	.word	0x00000080
  40c608:	00000100 	.word	0x00000100
  40c60c:	00000200 	.word	0x00000200
  40c610:	00000400 	.word	0x00000400
  40c614:	39414350 	.word	0x39414350
  40c618:	3a323539 	.word	0x3a323539
  40c61c:	706d7420 	.word	0x706d7420
  40c620:	25203a31 	.word	0x25203a31
  40c624:	6d742078 	.word	0x6d742078
  40c628:	203a3270 	.word	0x203a3270
  40c62c:	74207825 	.word	0x74207825
  40c630:	3a33706d 	.word	0x3a33706d
  40c634:	20782520 	.word	0x20782520
  40c638:	34706d74 	.word	0x34706d74
  40c63c:	7825203a 	.word	0x7825203a
  40c640:	00000a0d 	.word	0x00000a0d
  40c644:	0001c200 	.word	0x0001c200
  40c648:	000000c0 	.word	0x000000c0
  40c64c:	00000800 	.word	0x00000800
	...
  40c65c:	202d462d 	.word	0x202d462d
  40c660:	74737953 	.word	0x74737953
  40c664:	206b6369 	.word	0x206b6369
  40c668:	666e6f63 	.word	0x666e6f63
  40c66c:	72756769 	.word	0x72756769
  40c670:	6f697461 	.word	0x6f697461
  40c674:	7265206e 	.word	0x7265206e
  40c678:	0d726f72 	.word	0x0d726f72
  40c67c:	00000000 	.word	0x00000000
  40c680:	00000960 	.word	0x00000960
  40c684:	000000c0 	.word	0x000000c0
  40c688:	00000800 	.word	0x00000800
  40c68c:	00000000 	.word	0x00000000
  40c690:	00006325 	.word	0x00006325
  40c694:	73616843 	.word	0x73616843
  40c698:	20736973 	.word	0x20736973
  40c69c:	6f727265 	.word	0x6f727265
  40c6a0:	2e2e2e72 	.word	0x2e2e2e72
  40c6a4:	74756873 	.word	0x74756873
  40c6a8:	676e6974 	.word	0x676e6974
  40c6ac:	776f6420 	.word	0x776f6420
  40c6b0:	0a0d2e6e 	.word	0x0a0d2e6e
  40c6b4:	00000000 	.word	0x00000000
  40c6b8:	00006425 	.word	0x00006425
  40c6bc:	2044454c 	.word	0x2044454c
  40c6c0:	72616f62 	.word	0x72616f62
  40c6c4:	65642064 	.word	0x65642064
  40c6c8:	74636574 	.word	0x74636574
  40c6cc:	69206465 	.word	0x69206465
  40c6d0:	6c73206e 	.word	0x6c73206e
  40c6d4:	0020746f 	.word	0x0020746f
  40c6d8:	00000a0d 	.word	0x00000a0d
  40c6dc:	6c656853 	.word	0x6c656853
  40c6e0:	20302066 	.word	0x20302066
  40c6e4:	73657270 	.word	0x73657270
  40c6e8:	0d746e65 	.word	0x0d746e65
  40c6ec:	0000000a 	.word	0x0000000a
  40c6f0:	6c656853 	.word	0x6c656853
  40c6f4:	20312066 	.word	0x20312066
  40c6f8:	73657270 	.word	0x73657270
  40c6fc:	0d746e65 	.word	0x0d746e65
  40c700:	0000000a 	.word	0x0000000a
  40c704:	6c656853 	.word	0x6c656853
  40c708:	20322066 	.word	0x20322066
  40c70c:	73657270 	.word	0x73657270
  40c710:	0d746e65 	.word	0x0d746e65
  40c714:	0000000a 	.word	0x0000000a
  40c718:	6c656853 	.word	0x6c656853
  40c71c:	20332066 	.word	0x20332066
  40c720:	73657270 	.word	0x73657270
  40c724:	0d746e65 	.word	0x0d746e65
  40c728:	0000000a 	.word	0x0000000a
  40c72c:	61766e49 	.word	0x61766e49
  40c730:	2064696c 	.word	0x2064696c
  40c734:	69726573 	.word	0x69726573
  40c738:	49206c61 	.word	0x49206c61
  40c73c:	68632044 	.word	0x68632044
  40c740:	736b6365 	.word	0x736b6365
  40c744:	0d2e6d75 	.word	0x0d2e6d75
  40c748:	0000000a 	.word	0x0000000a
  40c74c:	6c656873 	.word	0x6c656873
  40c750:	64252066 	.word	0x64252066
  40c754:	6c62203a 	.word	0x6c62203a
  40c758:	65736575 	.word	0x65736575
  40c75c:	5b65736e 	.word	0x5b65736e
  40c760:	3d5d6425 	.word	0x3d5d6425
  40c764:	58257830 	.word	0x58257830
  40c768:	00000a0d 	.word	0x00000a0d
  40c76c:	69766544 	.word	0x69766544
  40c770:	20736563 	.word	0x20736563
  40c774:	65746564 	.word	0x65746564
  40c778:	64657463 	.word	0x64657463
  40c77c:	206e6f20 	.word	0x206e6f20
  40c780:	6c656873 	.word	0x6c656873
  40c784:	00002066 	.word	0x00002066
  40c788:	39414350 	.word	0x39414350
  40c78c:	20323539 	.word	0x20323539
  40c790:	6f727245 	.word	0x6f727245
  40c794:	29732872 	.word	0x29732872
  40c798:	206e6f20 	.word	0x206e6f20
  40c79c:	44504f54 	.word	0x44504f54
  40c7a0:	45564952 	.word	0x45564952
  40c7a4:	00000020 	.word	0x00000020
  40c7a8:	00000020 	.word	0x00000020
  40c7ac:	4f525245 	.word	0x4f525245
  40c7b0:	6e6f2052 	.word	0x6e6f2052
  40c7b4:	756e7520 	.word	0x756e7520
  40c7b8:	20646573 	.word	0x20646573
  40c7bc:	6e616863 	.word	0x6e616863
  40c7c0:	736c656e 	.word	0x736c656e
  40c7c4:	4350203a 	.word	0x4350203a
  40c7c8:	35393941 	.word	0x35393941
  40c7cc:	202d2032 	.word	0x202d2032
  40c7d0:	746e6f43 	.word	0x746e6f43
  40c7d4:	6c6c6f72 	.word	0x6c6c6f72
  40c7d8:	62207265 	.word	0x62207265
  40c7dc:	6472616f 	.word	0x6472616f
  40c7e0:	0d375520 	.word	0x0d375520
  40c7e4:	0000000a 	.word	0x0000000a
  40c7e8:	39414350 	.word	0x39414350
  40c7ec:	20323539 	.word	0x20323539
  40c7f0:	6f727245 	.word	0x6f727245
  40c7f4:	29732872 	.word	0x29732872
  40c7f8:	206e6f20 	.word	0x206e6f20
  40c7fc:	44544f42 	.word	0x44544f42
  40c800:	45564952 	.word	0x45564952
  40c804:	00000020 	.word	0x00000020
  40c808:	4f525245 	.word	0x4f525245
  40c80c:	6e6f2052 	.word	0x6e6f2052
  40c810:	756e7520 	.word	0x756e7520
  40c814:	20646573 	.word	0x20646573
  40c818:	6e616863 	.word	0x6e616863
  40c81c:	736c656e 	.word	0x736c656e
  40c820:	4350203a 	.word	0x4350203a
  40c824:	35393941 	.word	0x35393941
  40c828:	202d2032 	.word	0x202d2032
  40c82c:	746e6f43 	.word	0x746e6f43
  40c830:	6c6c6f72 	.word	0x6c6c6f72
  40c834:	62207265 	.word	0x62207265
  40c838:	6472616f 	.word	0x6472616f
  40c83c:	0d385520 	.word	0x0d385520
  40c840:	0000000a 	.word	0x0000000a
  40c844:	6c656853 	.word	0x6c656853
  40c848:	20302066 	.word	0x20302066
  40c84c:	69746361 	.word	0x69746361
  40c850:	0a0d6576 	.word	0x0a0d6576
  40c854:	00000000 	.word	0x00000000
  40c858:	6c656853 	.word	0x6c656853
  40c85c:	20312066 	.word	0x20312066
  40c860:	69746361 	.word	0x69746361
  40c864:	0a0d6576 	.word	0x0a0d6576
  40c868:	00000000 	.word	0x00000000
  40c86c:	6c656853 	.word	0x6c656853
  40c870:	20322066 	.word	0x20322066
  40c874:	69746361 	.word	0x69746361
  40c878:	0a0d6576 	.word	0x0a0d6576
  40c87c:	00000000 	.word	0x00000000
  40c880:	6c656853 	.word	0x6c656853
  40c884:	20332066 	.word	0x20332066
  40c888:	69746361 	.word	0x69746361
  40c88c:	0a0d6576 	.word	0x0a0d6576
  40c890:	00000000 	.word	0x00000000
  40c894:	726f6f44 	.word	0x726f6f44
  40c898:	74616c20 	.word	0x74616c20
  40c89c:	6f206863 	.word	0x6f206863
  40c8a0:	656e6570 	.word	0x656e6570
  40c8a4:	6b202c64 	.word	0x6b202c64
  40c8a8:	206c6c69 	.word	0x206c6c69
  40c8ac:	206c6c61 	.word	0x206c6c61
  40c8b0:	6c656873 	.word	0x6c656873
  40c8b4:	20736576 	.word	0x20736576
  40c8b8:	20726f66 	.word	0x20726f66
  40c8bc:	65666173 	.word	0x65666173
  40c8c0:	0d2e7974 	.word	0x0d2e7974
  40c8c4:	0000000a 	.word	0x0000000a
  40c8c8:	6d206f4e 	.word	0x6d206f4e
  40c8cc:	2065726f 	.word	0x2065726f
  40c8d0:	6d6f6f72 	.word	0x6d6f6f72
  40c8d4:	726f6620 	.word	0x726f6620
  40c8d8:	44454c20 	.word	0x44454c20
  40c8dc:	616f6220 	.word	0x616f6220
  40c8e0:	69206472 	.word	0x69206472
  40c8e4:	2e6f666e 	.word	0x2e6f666e
  40c8e8:	6e614320 	.word	0x6e614320
  40c8ec:	20746f6e 	.word	0x20746f6e
  40c8f0:	63617274 	.word	0x63617274
  40c8f4:	696d206b 	.word	0x696d206b
  40c8f8:	6574756e 	.word	0x6574756e
  40c8fc:	61737520 	.word	0x61737520
  40c900:	66206567 	.word	0x66206567
  40c904:	6120726f 	.word	0x6120726f
  40c908:	74696464 	.word	0x74696464
  40c90c:	616e6f69 	.word	0x616e6f69
  40c910:	6f62206c 	.word	0x6f62206c
  40c914:	73647261 	.word	0x73647261
  40c918:	000a0d2e 	.word	0x000a0d2e
  40c91c:	2d2a0a0d 	.word	0x2d2a0a0d
  40c920:	2d2d2d2d 	.word	0x2d2d2d2d
  40c924:	2d2d2d2d 	.word	0x2d2d2d2d
  40c928:	2d2d2d2d 	.word	0x2d2d2d2d
  40c92c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c930:	2d2d2d2d 	.word	0x2d2d2d2d
  40c934:	2d2d2d2d 	.word	0x2d2d2d2d
  40c938:	2d2d2d2d 	.word	0x2d2d2d2d
  40c93c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c940:	2d2d2d2d 	.word	0x2d2d2d2d
  40c944:	2d2d2d2d 	.word	0x2d2d2d2d
  40c948:	2d2d2d2d 	.word	0x2d2d2d2d
  40c94c:	2d2d2d2d 	.word	0x2d2d2d2d
  40c950:	0d2a2d2d 	.word	0x0d2a2d2d
  40c954:	0000000a 	.word	0x0000000a
  40c958:	43454c45 	.word	0x43454c45
  40c95c:	434f5254 	.word	0x434f5254
  40c960:	4556414c 	.word	0x4556414c
  40c964:	6f430a0d 	.word	0x6f430a0d
  40c968:	69727970 	.word	0x69727970
  40c96c:	20746867 	.word	0x20746867
  40c970:	20296328 	.word	0x20296328
  40c974:	36313032 	.word	0x36313032
  40c978:	61655320 	.word	0x61655320
  40c97c:	6853206c 	.word	0x6853206c
  40c980:	646c6569 	.word	0x646c6569
  40c984:	6e49202c 	.word	0x6e49202c
  40c988:	0d202e63 	.word	0x0d202e63
  40c98c:	0000000a 	.word	0x0000000a
  40c990:	64726148 	.word	0x64726148
  40c994:	65726177 	.word	0x65726177
  40c998:	72655620 	.word	0x72655620
  40c99c:	6e6f6973 	.word	0x6e6f6973
  40c9a0:	6c43203a 	.word	0x6c43203a
  40c9a4:	69737361 	.word	0x69737361
  40c9a8:	2b2b2063 	.word	0x2b2b2063
  40c9ac:	6f53202b 	.word	0x6f53202b
  40c9b0:	61777466 	.word	0x61777466
  40c9b4:	56206572 	.word	0x56206572
  40c9b8:	69737265 	.word	0x69737265
  40c9bc:	203a6e6f 	.word	0x203a6e6f
  40c9c0:	37302e30 	.word	0x37302e30
  40c9c4:	000a0d38 	.word	0x000a0d38
  40c9c8:	2a2a0a0d 	.word	0x2a2a0a0d
  40c9cc:	534e492a 	.word	0x534e492a
  40c9d0:	4c4c4154 	.word	0x4c4c4154
  40c9d4:	4c204445 	.word	0x4c204445
  40c9d8:	42204445 	.word	0x42204445
  40c9dc:	4452414f 	.word	0x4452414f
  40c9e0:	2a2a2a53 	.word	0x2a2a2a53
  40c9e4:	0a0d0a0d 	.word	0x0a0d0a0d
  40c9e8:	00000000 	.word	0x00000000
  40c9ec:	44454c20 	.word	0x44454c20
  40c9f0:	4c207c20 	.word	0x4c207c20
  40c9f4:	42204445 	.word	0x42204445
  40c9f8:	4452414f 	.word	0x4452414f
  40c9fc:	20202020 	.word	0x20202020
  40ca00:	2020207c 	.word	0x2020207c
  40ca04:	45505055 	.word	0x45505055
  40ca08:	49532052 	.word	0x49532052
  40ca0c:	20204544 	.word	0x20204544
  40ca10:	7c202020 	.word	0x7c202020
  40ca14:	4c202020 	.word	0x4c202020
  40ca18:	5245574f 	.word	0x5245574f
  40ca1c:	44495320 	.word	0x44495320
  40ca20:	20202045 	.word	0x20202045
  40ca24:	000a0d20 	.word	0x000a0d20
  40ca28:	544f4c53 	.word	0x544f4c53
  40ca2c:	20207c20 	.word	0x20207c20
  40ca30:	44492020 	.word	0x44492020
  40ca34:	20202020 	.word	0x20202020
  40ca38:	20202020 	.word	0x20202020
  40ca3c:	5248207c 	.word	0x5248207c
  40ca40:	494d3a53 	.word	0x494d3a53
  40ca44:	2020204e 	.word	0x2020204e
  40ca48:	45544420 	.word	0x45544420
  40ca4c:	7c202020 	.word	0x7c202020
  40ca50:	53524820 	.word	0x53524820
  40ca54:	4e494d3a 	.word	0x4e494d3a
  40ca58:	20202020 	.word	0x20202020
  40ca5c:	20455444 	.word	0x20455444
  40ca60:	0a0d2020 	.word	0x0a0d2020
  40ca64:	00000000 	.word	0x00000000
  40ca68:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca6c:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca70:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca74:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca78:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca7c:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca80:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca84:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca88:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca8c:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca90:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca94:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca98:	2d2d2d2d 	.word	0x2d2d2d2d
  40ca9c:	2d2d2d2d 	.word	0x2d2d2d2d
  40caa0:	0a0d2d2d 	.word	0x0a0d2d2d
  40caa4:	00000000 	.word	0x00000000
  40caa8:	20643225 	.word	0x20643225
  40caac:	20202020 	.word	0x20202020
  40cab0:	58323025 	.word	0x58323025
  40cab4:	58323025 	.word	0x58323025
  40cab8:	58323025 	.word	0x58323025
  40cabc:	58323025 	.word	0x58323025
  40cac0:	58323025 	.word	0x58323025
  40cac4:	58323025 	.word	0x58323025
  40cac8:	30252020 	.word	0x30252020
  40cacc:	253a6434 	.word	0x253a6434
  40cad0:	20643230 	.word	0x20643230
  40cad4:	20202020 	.word	0x20202020
  40cad8:	64323025 	.word	0x64323025
  40cadc:	20202020 	.word	0x20202020
  40cae0:	34302520 	.word	0x34302520
  40cae4:	30253a64 	.word	0x30253a64
  40cae8:	20206432 	.word	0x20206432
  40caec:	25202020 	.word	0x25202020
  40caf0:	0d643230 	.word	0x0d643230
  40caf4:	0000000a 	.word	0x0000000a
  40caf8:	2058414d 	.word	0x2058414d
  40cafc:	3a455444 	.word	0x3a455444
  40cb00:	00000020 	.word	0x00000020
  40cb04:	4e494d20 	.word	0x4e494d20
  40cb08:	45544420 	.word	0x45544420
  40cb0c:	0000203a 	.word	0x0000203a
  40cb10:	41544f54 	.word	0x41544f54
  40cb14:	4153204c 	.word	0x4153204c
  40cb18:	4954494e 	.word	0x4954494e
  40cb1c:	5420455a 	.word	0x5420455a
  40cb20:	3a454d49 	.word	0x3a454d49
  40cb24:	00000020 	.word	0x00000020
  40cb28:	00000030 	.word	0x00000030
  40cb2c:	0000003a 	.word	0x0000003a
  40cb30:	4f542020 	.word	0x4f542020
  40cb34:	204c4154 	.word	0x204c4154
  40cb38:	494e4153 	.word	0x494e4153
  40cb3c:	455a4954 	.word	0x455a4954
  40cb40:	43594320 	.word	0x43594320
  40cb44:	3a53454c 	.word	0x3a53454c
  40cb48:	00000020 	.word	0x00000020
  40cb4c:	2a2a0a0d 	.word	0x2a2a0a0d
  40cb50:	5359532a 	.word	0x5359532a
  40cb54:	204d4554 	.word	0x204d4554
  40cb58:	54534554 	.word	0x54534554
  40cb5c:	2a2a2a53 	.word	0x2a2a2a53
  40cb60:	0a0d0a0d 	.word	0x0a0d0a0d
  40cb64:	00000000 	.word	0x00000000
  40cb68:	2044454c 	.word	0x2044454c
  40cb6c:	76697244 	.word	0x76697244
  40cb70:	203a7265 	.word	0x203a7265
  40cb74:	20504f54 	.word	0x20504f54
  40cb78:	2e2e3028 	.word	0x2e2e3028
  40cb7c:	20202937 	.word	0x20202937
  40cb80:	20202020 	.word	0x20202020
  40cb84:	20202020 	.word	0x20202020
  40cb88:	20202020 	.word	0x20202020
  40cb8c:	00202020 	.word	0x00202020
  40cb90:	00002046 	.word	0x00002046
  40cb94:	00002050 	.word	0x00002050
  40cb98:	2044454c 	.word	0x2044454c
  40cb9c:	76697244 	.word	0x76697244
  40cba0:	203a7265 	.word	0x203a7265
  40cba4:	54544f42 	.word	0x54544f42
  40cba8:	28204d4f 	.word	0x28204d4f
  40cbac:	312e2e30 	.word	0x312e2e30
  40cbb0:	20202931 	.word	0x20202931
  40cbb4:	20202020 	.word	0x20202020
  40cbb8:	20202020 	.word	0x20202020
  40cbbc:	00202020 	.word	0x00202020
  40cbc0:	73616c46 	.word	0x73616c46
  40cbc4:	30282068 	.word	0x30282068
  40cbc8:	29342e2e 	.word	0x29342e2e
  40cbcc:	20202020 	.word	0x20202020
  40cbd0:	20202020 	.word	0x20202020
  40cbd4:	20202020 	.word	0x20202020
  40cbd8:	20202020 	.word	0x20202020
  40cbdc:	20202020 	.word	0x20202020
  40cbe0:	20202020 	.word	0x20202020
  40cbe4:	00202020 	.word	0x00202020
  40cbe8:	2044454c 	.word	0x2044454c
  40cbec:	72616f42 	.word	0x72616f42
  40cbf0:	65532064 	.word	0x65532064
  40cbf4:	6c616972 	.word	0x6c616972
  40cbf8:	20444920 	.word	0x20444920
  40cbfc:	63656843 	.word	0x63656843
  40cc00:	6d75736b 	.word	0x6d75736b
  40cc04:	30282073 	.word	0x30282073
  40cc08:	29342e2e 	.word	0x29342e2e
  40cc0c:	00202020 	.word	0x00202020
  40cc10:	2044454c 	.word	0x2044454c
  40cc14:	72616f42 	.word	0x72616f42
  40cc18:	69532064 	.word	0x69532064
  40cc1c:	4d206564 	.word	0x4d206564
  40cc20:	55207861 	.word	0x55207861
  40cc24:	65676173 	.word	0x65676173
  40cc28:	2e302820 	.word	0x2e302820
  40cc2c:	2029372e 	.word	0x2029372e
  40cc30:	20202020 	.word	0x20202020
  40cc34:	00202020 	.word	0x00202020
  40cc38:	67617355 	.word	0x67617355
  40cc3c:	74532065 	.word	0x74532065
  40cc40:	74637572 	.word	0x74637572
  40cc44:	65704f20 	.word	0x65704f20
  40cc48:	6c53206e 	.word	0x6c53206e
  40cc4c:	2073746f 	.word	0x2073746f
  40cc50:	20202020 	.word	0x20202020
  40cc54:	20202020 	.word	0x20202020
  40cc58:	20202020 	.word	0x20202020
  40cc5c:	00202020 	.word	0x00202020
  40cc60:	0a0d2046 	.word	0x0a0d2046
  40cc64:	00000000 	.word	0x00000000
  40cc68:	0a0d2050 	.word	0x0a0d2050
  40cc6c:	00000000 	.word	0x00000000
  40cc70:	2a2a0a0d 	.word	0x2a2a0a0d
  40cc74:	44454c2a 	.word	0x44454c2a
  40cc78:	414f4220 	.word	0x414f4220
  40cc7c:	20534452 	.word	0x20534452
  40cc80:	5453414d 	.word	0x5453414d
  40cc84:	4c205245 	.word	0x4c205245
  40cc88:	2a545349 	.word	0x2a545349
  40cc8c:	0a0d2a2a 	.word	0x0a0d2a2a
  40cc90:	00000a0d 	.word	0x00000a0d
  40cc94:	29643225 	.word	0x29643225
  40cc98:	32302520 	.word	0x32302520
  40cc9c:	32302558 	.word	0x32302558
  40cca0:	32302558 	.word	0x32302558
  40cca4:	32302558 	.word	0x32302558
  40cca8:	32302558 	.word	0x32302558
  40ccac:	32302558 	.word	0x32302558
  40ccb0:	00002058 	.word	0x00002058
  40ccb4:	504f5420 	.word	0x504f5420
  40ccb8:	00000a0d 	.word	0x00000a0d
  40ccbc:	544f4220 	.word	0x544f4220
  40ccc0:	00000a0d 	.word	0x00000a0d
  40ccc4:	0a0d0a0d 	.word	0x0a0d0a0d
  40ccc8:	00000000 	.word	0x00000000
  40cccc:	65707954 	.word	0x65707954
  40ccd0:	27482720 	.word	0x27482720
  40ccd4:	726f6620 	.word	0x726f6620
  40ccd8:	6c656820 	.word	0x6c656820
  40ccdc:	0a0d2e70 	.word	0x0a0d2e70
  40cce0:	00000a0d 	.word	0x00000a0d
  40cce4:	2a2a0a0d 	.word	0x2a2a0a0d
  40cce8:	2d2d2d2d 	.word	0x2d2d2d2d
  40ccec:	2d2d2d2d 	.word	0x2d2d2d2d
  40ccf0:	2d2d2d2d 	.word	0x2d2d2d2d
  40ccf4:	2d2d2d2d 	.word	0x2d2d2d2d
  40ccf8:	0d2a2a2d 	.word	0x0d2a2a2d
  40ccfc:	0000000a 	.word	0x0000000a
  40cd00:	6c452020 	.word	0x6c452020
  40cd04:	72746365 	.word	0x72746365
  40cd08:	616c636f 	.word	0x616c636f
  40cd0c:	48206576 	.word	0x48206576
  40cd10:	0d504c45 	.word	0x0d504c45
  40cd14:	0000000a 	.word	0x0000000a
  40cd18:	2d2d2a2a 	.word	0x2d2d2a2a
  40cd1c:	2d2d2d2d 	.word	0x2d2d2d2d
  40cd20:	2d2d2d2d 	.word	0x2d2d2d2d
  40cd24:	2d2d2d2d 	.word	0x2d2d2d2d
  40cd28:	2a2d2d2d 	.word	0x2a2d2d2d
  40cd2c:	000a0d2a 	.word	0x000a0d2a
  40cd30:	20202020 	.word	0x20202020
  40cd34:	20202048 	.word	0x20202048
  40cd38:	20202020 	.word	0x20202020
  40cd3c:	54202d20 	.word	0x54202d20
  40cd40:	20736968 	.word	0x20736968
  40cd44:	706c6568 	.word	0x706c6568
  40cd48:	6e656d20 	.word	0x6e656d20
  40cd4c:	000a0d75 	.word	0x000a0d75
  40cd50:	20202020 	.word	0x20202020
  40cd54:	20202044 	.word	0x20202044
  40cd58:	20202020 	.word	0x20202020
  40cd5c:	53202d20 	.word	0x53202d20
  40cd60:	20776f68 	.word	0x20776f68
  40cd64:	72727563 	.word	0x72727563
  40cd68:	20746e65 	.word	0x20746e65
  40cd6c:	20455444 	.word	0x20455444
  40cd70:	74746573 	.word	0x74746573
  40cd74:	0d676e69 	.word	0x0d676e69
  40cd78:	0000000a 	.word	0x0000000a
  40cd7c:	20202020 	.word	0x20202020
  40cd80:	78202044 	.word	0x78202044
  40cd84:	20202078 	.word	0x20202078
  40cd88:	43202d20 	.word	0x43202d20
  40cd8c:	676e6168 	.word	0x676e6168
  40cd90:	6e692065 	.word	0x6e692065
  40cd94:	61697469 	.word	0x61697469
  40cd98:	5444206c 	.word	0x5444206c
  40cd9c:	6f742045 	.word	0x6f742045
  40cda0:	20787820 	.word	0x20787820
  40cda4:	756e696d 	.word	0x756e696d
  40cda8:	20736574 	.word	0x20736574
  40cdac:	72656877 	.word	0x72656877
  40cdb0:	20322065 	.word	0x20322065
  40cdb4:	78203d3e 	.word	0x78203d3e
  40cdb8:	3d3e2078 	.word	0x3d3e2078
  40cdbc:	2e393520 	.word	0x2e393520
  40cdc0:	00000a0d 	.word	0x00000a0d
  40cdc4:	20202020 	.word	0x20202020
  40cdc8:	20202053 	.word	0x20202053
  40cdcc:	20202020 	.word	0x20202020
  40cdd0:	53202d20 	.word	0x53202d20
  40cdd4:	65747379 	.word	0x65747379
  40cdd8:	7473206d 	.word	0x7473206d
  40cddc:	73757461 	.word	0x73757461
  40cde0:	00000a0d 	.word	0x00000a0d
  40cde4:	0000003e 	.word	0x0000003e
  40cde8:	74696e49 	.word	0x74696e49
  40cdec:	206c6169 	.word	0x206c6169
  40cdf0:	20455444 	.word	0x20455444
  40cdf4:	20746573 	.word	0x20746573
  40cdf8:	203a6f74 	.word	0x203a6f74
  40cdfc:	00000000 	.word	0x00000000
  40ce00:	6e696d20 	.word	0x6e696d20
  40ce04:	73657475 	.word	0x73657475
  40ce08:	3e0a0d2e 	.word	0x3e0a0d2e
  40ce0c:	00000000 	.word	0x00000000
  40ce10:	696c6156 	.word	0x696c6156
  40ce14:	654b2064 	.word	0x654b2064
  40ce18:	64617079 	.word	0x64617079
  40ce1c:	646f4320 	.word	0x646f4320
  40ce20:	000a0d65 	.word	0x000a0d65
  40ce24:	74696e49 	.word	0x74696e49
  40ce28:	206c6169 	.word	0x206c6169
  40ce2c:	20455444 	.word	0x20455444
  40ce30:	20776f6e 	.word	0x20776f6e
  40ce34:	20746573 	.word	0x20746573
  40ce38:	203a6f74 	.word	0x203a6f74
  40ce3c:	00000000 	.word	0x00000000
  40ce40:	003e0a0d 	.word	0x003e0a0d
  40ce44:	6f727245 	.word	0x6f727245
  40ce48:	49202e72 	.word	0x49202e72
  40ce4c:	6974696e 	.word	0x6974696e
  40ce50:	44206c61 	.word	0x44206c61
  40ce54:	6e204554 	.word	0x6e204554
  40ce58:	6d20746f 	.word	0x6d20746f
  40ce5c:	6669646f 	.word	0x6669646f
  40ce60:	2e646569 	.word	0x2e646569
  40ce64:	000a0d20 	.word	0x000a0d20
  40ce68:	7473754d 	.word	0x7473754d
  40ce6c:	20656220 	.word	0x20656220
  40ce70:	61762061 	.word	0x61762061
  40ce74:	2065756c 	.word	0x2065756c
  40ce78:	77746562 	.word	0x77746562
  40ce7c:	206e6565 	.word	0x206e6565
  40ce80:	6e612032 	.word	0x6e612032
  40ce84:	39352064 	.word	0x39352064
  40ce88:	3e0a0d2e 	.word	0x3e0a0d2e
  40ce8c:	00000000 	.word	0x00000000
  40ce90:	726f6f44 	.word	0x726f6f44
  40ce94:	74616c20 	.word	0x74616c20
  40ce98:	64206863 	.word	0x64206863
  40ce9c:	63657465 	.word	0x63657465
  40cea0:	0d646574 	.word	0x0d646574
  40cea4:	0000000a 	.word	0x0000000a
  40cea8:	696c6156 	.word	0x696c6156
  40ceac:	656b2064 	.word	0x656b2064
  40ceb0:	64617079 	.word	0x64617079
  40ceb4:	646f6320 	.word	0x646f6320
  40ceb8:	65642065 	.word	0x65642065
  40cebc:	74636574 	.word	0x74636574
  40cec0:	0a0d6465 	.word	0x0a0d6465
  40cec4:	00000000 	.word	0x00000000
  40cec8:	696e6153 	.word	0x696e6153
  40cecc:	697a6974 	.word	0x697a6974
  40ced0:	0a0d676e 	.word	0x0a0d676e
  40ced4:	00000000 	.word	0x00000000
  40ced8:	6c207441 	.word	0x6c207441
  40cedc:	74736165 	.word	0x74736165
  40cee0:	656e6f20 	.word	0x656e6f20
  40cee4:	65687320 	.word	0x65687320
  40cee8:	6920666c 	.word	0x6920666c
  40ceec:	72702073 	.word	0x72702073
  40cef0:	6e657365 	.word	0x6e657365
  40cef4:	62202c74 	.word	0x62202c74
  40cef8:	6e207475 	.word	0x6e207475
  40cefc:	6564206f 	.word	0x6564206f
  40cf00:	65636976 	.word	0x65636976
  40cf04:	6f742073 	.word	0x6f742073
  40cf08:	20656220 	.word	0x20656220
  40cf0c:	61656c63 	.word	0x61656c63
  40cf10:	2e64656e 	.word	0x2e64656e
  40cf14:	00000a0d 	.word	0x00000a0d
  40cf18:	73206f4e 	.word	0x73206f4e
  40cf1c:	766c6568 	.word	0x766c6568
  40cf20:	202c7365 	.word	0x202c7365
  40cf24:	7320726f 	.word	0x7320726f
  40cf28:	766c6568 	.word	0x766c6568
  40cf2c:	61207365 	.word	0x61207365
  40cf30:	70206572 	.word	0x70206572
  40cf34:	20747361 	.word	0x20747361
  40cf38:	6566696c 	.word	0x6566696c
  40cf3c:	656d6974 	.word	0x656d6974
  40cf40:	00000a0d 	.word	0x00000a0d
  40cf44:	696e6173 	.word	0x696e6173
  40cf48:	657a6974 	.word	0x657a6974
  40cf4c:	756e694d 	.word	0x756e694d
  40cf50:	3a736574 	.word	0x3a736574
  40cf54:	646c2520 	.word	0x646c2520
  40cf58:	706d7420 	.word	0x706d7420
  40cf5c:	696e6153 	.word	0x696e6153
  40cf60:	657a6974 	.word	0x657a6974
  40cf64:	756e694d 	.word	0x756e694d
  40cf68:	3a736574 	.word	0x3a736574
  40cf6c:	646c2520 	.word	0x646c2520
  40cf70:	00000a0d 	.word	0x00000a0d
  40cf74:	6c656853 	.word	0x6c656853
  40cf78:	6c632066 	.word	0x6c632066
  40cf7c:	0d6e6165 	.word	0x0d6e6165
  40cf80:	0000000a 	.word	0x0000000a
  40cf84:	726f6f44 	.word	0x726f6f44
  40cf88:	74616c20 	.word	0x74616c20
  40cf8c:	6f206863 	.word	0x6f206863
  40cf90:	656e6570 	.word	0x656e6570
  40cf94:	73202c64 	.word	0x73202c64
  40cf98:	74747568 	.word	0x74747568
  40cf9c:	20676e69 	.word	0x20676e69
  40cfa0:	6e776f64 	.word	0x6e776f64
  40cfa4:	6c6c6120 	.word	0x6c6c6120
  40cfa8:	6f727020 	.word	0x6f727020
  40cfac:	73736563 	.word	0x73736563
  40cfb0:	0a0d7365 	.word	0x0a0d7365
  40cfb4:	00000000 	.word	0x00000000

0040cfb8 <_ctype_>:
  40cfb8:	20202000 20202020 28282020 20282828     .         ((((( 
  40cfc8:	20202020 20202020 20202020 20202020                     
  40cfd8:	10108820 10101010 10101010 10101010      ...............
  40cfe8:	04040410 04040404 10040404 10101010     ................
  40cff8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40d008:	01010101 01010101 01010101 10101010     ................
  40d018:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40d028:	02020202 02020202 02020202 10101010     ................
  40d038:	00000020 00000000 00000000 00000000      ...............
	...
  40d0bc:	00000043                                C...

0040d0c0 <_global_impure_ptr>:
  40d0c0:	20400098 0000000a                       ..@ ....

0040d0c8 <zeroes.6911>:
  40d0c8:	30303030 30303030 30303030 30303030     0000000000000000

0040d0d8 <blanks.6910>:
  40d0d8:	20202020 20202020 20202020 20202020                     
  40d0e8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40d0f8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40d108:	00000000 33323130 37363534 62613938     ....0123456789ab
  40d118:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40d128:	00000030 69666e49 7974696e 00000000     0...Infinity....
  40d138:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

0040d148 <__mprec_tens>:
  40d148:	00000000 3ff00000 00000000 40240000     .......?......$@
  40d158:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40d168:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40d178:	00000000 412e8480 00000000 416312d0     .......A......cA
  40d188:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40d198:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40d1a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40d1b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40d1c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40d1d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40d1e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40d1f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40d208:	79d99db4 44ea7843                       ...yCx.D

0040d210 <p05.5302>:
  40d210:	00000005 00000019 0000007d 00000000     ........}.......

0040d220 <__mprec_bigtens>:
  40d220:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40d230:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40d240:	7f73bf3c 75154fdd                       <.s..O.u

0040d248 <_init>:
  40d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d24a:	bf00      	nop
  40d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d24e:	bc08      	pop	{r3}
  40d250:	469e      	mov	lr, r3
  40d252:	4770      	bx	lr

0040d254 <__init_array_start>:
  40d254:	0040876d 	.word	0x0040876d

0040d258 <__frame_dummy_init_array_entry>:
  40d258:	00400165                                e.@.

0040d25c <_fini>:
  40d25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d25e:	bf00      	nop
  40d260:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d262:	bc08      	pop	{r3}
  40d264:	469e      	mov	lr, r3
  40d266:	4770      	bx	lr

0040d268 <__fini_array_start>:
  40d268:	00400141 	.word	0x00400141
